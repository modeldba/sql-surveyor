// Generated from /Users/matt/git/sqlsurveyor/grammars/plpgsql/PLpgSQLParser.g4 by ANTLR 4.8
package cz.startnet.utils.pgdiff.parsers.antlr;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class PLpgSQLParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.8", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		ABORT=1, ABSOLUTE=2, ACCESS=3, ACTION=4, ADD=5, ADMIN=6, AFTER=7, AGGREGATE=8, 
		ALSO=9, ALTER=10, ALWAYS=11, ASSERTION=12, ASSIGNMENT=13, AT=14, ATTACH=15, 
		ATTRIBUTE=16, BACKWARD=17, BEFORE=18, BEGIN=19, BY=20, CACHE=21, CALL=22, 
		CALLED=23, CASCADE=24, CASCADED=25, CATALOG=26, CHAIN=27, CHARACTERISTICS=28, 
		CHECKPOINT=29, CLASS=30, CLOSE=31, CLUSTER=32, COLUMNS=33, COMMENT=34, 
		COMMENTS=35, COMMIT=36, COMMITTED=37, CONFIGURATION=38, CONFLICT=39, CONNECTION=40, 
		CONSTRAINTS=41, CONTENT=42, CONTINUE=43, CONVERSION=44, COPY=45, COST=46, 
		CSV=47, CUBE=48, CURRENT=49, CURSOR=50, CYCLE=51, DATA=52, DATABASE=53, 
		DAY=54, DEALLOCATE=55, DECLARE=56, DEFAULTS=57, DEFERRED=58, DEFINER=59, 
		DELETE=60, DELIMITER=61, DELIMITERS=62, DEPENDS=63, DETACH=64, DICTIONARY=65, 
		DISABLE=66, DISCARD=67, DOCUMENT=68, DOMAIN=69, DOUBLE=70, DROP=71, EACH=72, 
		ENABLE=73, ENCODING=74, ENCRYPTED=75, ENUM=76, ESCAPE=77, EVENT=78, EXCLUDE=79, 
		EXCLUDING=80, EXCLUSIVE=81, EXECUTE=82, EXPLAIN=83, EXTENSION=84, EXTERNAL=85, 
		FAMILY=86, FILTER=87, FIRST=88, FOLLOWING=89, FORCE=90, FORWARD=91, FUNCTION=92, 
		FUNCTIONS=93, GENERATED=94, GLOBAL=95, GRANTED=96, GROUPS=97, HANDLER=98, 
		HEADER=99, HOLD=100, HOUR=101, IDENTITY=102, IF=103, IMMEDIATE=104, IMMUTABLE=105, 
		IMPLICIT=106, IMPORT=107, INCLUDE=108, INCLUDING=109, INCREMENT=110, INDEX=111, 
		INDEXES=112, INHERIT=113, INHERITS=114, INLINE=115, INPUT=116, INSENSITIVE=117, 
		INSERT=118, INSTEAD=119, INVOKER=120, ISOLATION=121, KEY=122, LABEL=123, 
		LANGUAGE=124, LARGE=125, LAST=126, LEAKPROOF=127, LEVEL=128, LISTEN=129, 
		LOAD=130, LOCAL=131, LOCATION=132, LOCK=133, LOCKED=134, LOGGED=135, MAPPING=136, 
		MATCH=137, MATERIALIZED=138, MAXVALUE=139, METHOD=140, MINUTE=141, MINVALUE=142, 
		MODE=143, MONTH=144, MOVE=145, NAME=146, NAMES=147, NEW=148, NEXT=149, 
		NO=150, NOTHING=151, NOTIFY=152, NOWAIT=153, NULLS=154, OBJECT=155, OF=156, 
		OFF=157, OIDS=158, OLD=159, OPERATOR=160, OPTION=161, OPTIONS=162, ORDINALITY=163, 
		OTHERS=164, OVER=165, OVERRIDING=166, OWNED=167, OWNER=168, PARALLEL=169, 
		PARSER=170, PARTIAL=171, PARTITION=172, PASSING=173, PASSWORD=174, PLANS=175, 
		POLICY=176, PRECEDING=177, PREPARE=178, PREPARED=179, PRESERVE=180, PRIOR=181, 
		PRIVILEGES=182, PROCEDURAL=183, PROCEDURE=184, PROCEDURES=185, PROGRAM=186, 
		PUBLICATION=187, QUOTE=188, RANGE=189, READ=190, REASSIGN=191, RECHECK=192, 
		RECURSIVE=193, REF=194, REFERENCING=195, REFRESH=196, REINDEX=197, RELATIVE=198, 
		RELEASE=199, RENAME=200, REPEATABLE=201, REPLACE=202, REPLICA=203, RESET=204, 
		RESTART=205, RESTRICT=206, RETURNS=207, REVOKE=208, ROLE=209, ROLLBACK=210, 
		ROLLUP=211, ROUTINE=212, ROUTINES=213, ROWS=214, RULE=215, SAVEPOINT=216, 
		SCHEMA=217, SCHEMAS=218, SCROLL=219, SEARCH=220, SECOND=221, SECURITY=222, 
		SEQUENCE=223, SEQUENCES=224, SERIALIZABLE=225, SERVER=226, SESSION=227, 
		SET=228, SETS=229, SHARE=230, SHOW=231, SIMPLE=232, SKIP_=233, SNAPSHOT=234, 
		SQL=235, STABLE=236, STANDALONE=237, START=238, STATEMENT=239, STATISTICS=240, 
		STDIN=241, STDOUT=242, STORAGE=243, STORED=244, STRICT=245, STRIP=246, 
		SUBSCRIPTION=247, SUPPORT=248, SYSID=249, SYSTEM=250, TABLES=251, TABLESPACE=252, 
		TEMP=253, TEMPLATE=254, TEMPORARY=255, TEXT=256, TIES=257, TRANSACTION=258, 
		TRANSFORM=259, TRIGGER=260, TRUNCATE=261, TRUSTED=262, TYPE=263, TYPES=264, 
		UNBOUNDED=265, UNCOMMITTED=266, UNENCRYPTED=267, UNKNOWN=268, UNLISTEN=269, 
		UNLOGGED=270, UNTIL=271, UPDATE=272, VACUUM=273, VALID=274, VALIDATE=275, 
		VALIDATOR=276, VALUE=277, VARYING=278, VERSION=279, VIEW=280, VIEWS=281, 
		VOLATILE=282, WHITESPACE=283, WITHIN=284, WITHOUT=285, WORK=286, WRAPPER=287, 
		WRITE=288, XML=289, YEAR=290, YES=291, ZONE=292, BETWEEN=293, BIGINT=294, 
		BIT=295, BOOLEAN=296, CHAR=297, CHARACTER=298, COALESCE=299, DEC=300, 
		DECIMAL=301, EXISTS=302, EXTRACT=303, FLOAT=304, GREATEST=305, GROUPING=306, 
		INOUT=307, INT=308, INTEGER=309, INTERVAL=310, LEAST=311, NATIONAL=312, 
		NCHAR=313, NONE=314, NULLIF=315, NUMERIC=316, OUT=317, OVERLAY=318, POSITION=319, 
		PRECISION=320, REAL=321, ROW=322, SETOF=323, SMALLINT=324, SUBSTRING=325, 
		TIME=326, TIMESTAMP=327, TREAT=328, TRIM=329, VALUES=330, VARCHAR=331, 
		XMLATTRIBUTES=332, XMLCONCAT=333, XMLELEMENT=334, XMLEXISTS=335, XMLFOREST=336, 
		XMLNAMESPACES=337, XMLPARSE=338, XMLPI=339, XMLROOT=340, XMLSERIALIZE=341, 
		XMLTABLE=342, AUTHORIZATION=343, BINARY=344, COLLATION=345, CONCURRENTLY=346, 
		CROSS=347, CURRENT_SCHEMA=348, FREEZE=349, FULL=350, ILIKE=351, INNER=352, 
		IS=353, ISNULL=354, JOIN=355, LEFT=356, LIKE=357, NATURAL=358, NOTNULL=359, 
		OUTER=360, OVERLAPS=361, RIGHT=362, SIMILAR=363, TABLESAMPLE=364, VERBOSE=365, 
		ALL=366, ANALYSE=367, ANALYZE=368, AND=369, ANY=370, ARRAY=371, AS=372, 
		ASC=373, ASYMMETRIC=374, BOTH=375, CASE=376, CAST=377, CHECK=378, COLLATE=379, 
		COLUMN=380, CONSTRAINT=381, CREATE=382, CURRENT_CATALOG=383, CURRENT_DATE=384, 
		CURRENT_ROLE=385, CURRENT_TIME=386, CURRENT_TIMESTAMP=387, CURRENT_USER=388, 
		DEFAULT=389, DEFERRABLE=390, DESC=391, DISTINCT=392, DO=393, ELSE=394, 
		END=395, EXCEPT=396, FALSE=397, FETCH=398, FOR=399, FOREIGN=400, FROM=401, 
		GRANT=402, GROUP=403, HAVING=404, IN=405, INITIALLY=406, INTERSECT=407, 
		INTO=408, LATERAL=409, LEADING=410, LIMIT=411, LOCALTIME=412, LOCALTIMESTAMP=413, 
		NOT=414, NULL=415, OFFSET=416, ON=417, ONLY=418, OR=419, ORDER=420, PLACING=421, 
		PRIMARY=422, REFERENCES=423, RETURNING=424, SELECT=425, SESSION_USER=426, 
		SOME=427, SYMMETRIC=428, TABLE=429, THEN=430, TO=431, TRAILING=432, TRUE=433, 
		UNION=434, UNIQUE=435, USER=436, USING=437, VARIADIC=438, WHEN=439, WHERE=440, 
		WINDOW=441, WITH=442, ALIGNMENT=443, BASETYPE=444, BUFFERS=445, BYPASSRLS=446, 
		CANONICAL=447, CATEGORY=448, COLLATABLE=449, COMBINEFUNC=450, COMMUTATOR=451, 
		CONNECT=452, COSTS=453, CREATEDB=454, CREATEROLE=455, DESERIALFUNC=456, 
		DETERMINISTIC=457, DISABLE_PAGE_SKIPPING=458, ELEMENT=459, EXTENDED=460, 
		FINALFUNC=461, FINALFUNC_EXTRA=462, FINALFUNC_MODIFY=463, FORCE_NOT_NULL=464, 
		FORCE_NULL=465, FORCE_QUOTE=466, FORMAT=467, GETTOKEN=468, HASH=469, HASHES=470, 
		HEADLINE=471, HYPOTHETICAL=472, INDEX_CLEANUP=473, INIT=474, INITCOND=475, 
		INTERNALLENGTH=476, JSON=477, LC_COLLATE=478, LC_CTYPE=479, LEFTARG=480, 
		LEXIZE=481, LEXTYPES=482, LIST=483, LOCALE=484, LOGIN=485, MAIN=486, MERGES=487, 
		MFINALFUNC=488, MFINALFUNC_EXTRA=489, MFINALFUNC_MODIFY=490, MINITCOND=491, 
		MINVFUNC=492, MODULUS=493, MSFUNC=494, MSSPACE=495, MSTYPE=496, NEGATOR=497, 
		NOBYPASSRLS=498, NOCREATEDB=499, NOCREATEROLE=500, NOINHERIT=501, NOLOGIN=502, 
		NOREPLICATION=503, NOSUPERUSER=504, OUTPUT=505, PASSEDBYVALUE=506, PATH=507, 
		PERMISSIVE=508, PLAIN=509, PREFERRED=510, PROVIDER=511, READ_ONLY=512, 
		READ_WRITE=513, RECEIVE=514, REMAINDER=515, REPLICATION=516, RESTRICTED=517, 
		RESTRICTIVE=518, RIGHTARG=519, SAFE=520, SEND=521, SERIALFUNC=522, SETTINGS=523, 
		SFUNC=524, SHAREABLE=525, SKIP_LOCKED=526, SORTOP=527, SSPACE=528, STYPE=529, 
		SUBTYPE_DIFF=530, SUBTYPE_OPCLASS=531, SUBTYPE=532, SUMMARY=533, SUPERUSER=534, 
		TIMING=535, TYPMOD_IN=536, TYPMOD_OUT=537, UNSAFE=538, USAGE=539, VARIABLE=540, 
		YAML=541, ALIAS=542, ASSERT=543, CONSTANT=544, DATATYPE=545, DEBUG=546, 
		DETAIL=547, DIAGNOSTICS=548, ELSEIF=549, ELSIF=550, ERRCODE=551, EXIT=552, 
		EXCEPTION=553, FOREACH=554, GET=555, HINT=556, INFO=557, LOG=558, LOOP=559, 
		MESSAGE=560, NOTICE=561, OPEN=562, PERFORM=563, QUERY=564, RAISE=565, 
		RECORD=566, RETURN=567, REVERSE=568, ROWTYPE=569, SLICE=570, SQLSTATE=571, 
		STACKED=572, WARNING=573, WHILE=574, CAST_EXPRESSION=575, EQUAL=576, COLON=577, 
		SEMI_COLON=578, COMMA=579, NOT_EQUAL=580, LTH=581, LEQ=582, GTH=583, GEQ=584, 
		LEFT_PAREN=585, RIGHT_PAREN=586, PLUS=587, MINUS=588, MULTIPLY=589, DIVIDE=590, 
		MODULAR=591, EXP=592, DOT=593, QUOTE_CHAR=594, DOUBLE_QUOTE=595, DOLLAR=596, 
		LEFT_BRACKET=597, RIGHT_BRACKET=598, EQUAL_GTH=599, COLON_EQUAL=600, LESS_LESS=601, 
		GREATER_GREATER=602, DOUBLE_DOT=603, HASH_SIGN=604, BlockComment=605, 
		LineComment=606, OP_CHARS=607, NUMBER_LITERAL=608, REAL_NUMBER=609, DOLLAR_NUMBER=610, 
		Identifier=611, QuotedIdentifier=612, Character_String_Literal=613, BeginDollarStringConstant=614, 
		Space=615, White_Space=616, New_Line=617, Tab=618, BOM=619, BAD=620, Text_between_Dollar=621, 
		EndDollarStringConstant=622;
	public static final int
		RULE_sql = 0, RULE_qname_parser = 1, RULE_function_args_parser = 2, RULE_vex_eof = 3, 
		RULE_plpgsql_function = 4, RULE_plpgsql_function_test_list = 5, RULE_statement = 6, 
		RULE_data_statement = 7, RULE_script_statement = 8, RULE_script_transaction = 9, 
		RULE_transaction_mode = 10, RULE_lock_table = 11, RULE_lock_mode = 12, 
		RULE_script_additional = 13, RULE_additional_statement = 14, RULE_explain_statement = 15, 
		RULE_explain_query = 16, RULE_execute_statement = 17, RULE_declare_statement = 18, 
		RULE_show_statement = 19, RULE_explain_option = 20, RULE_user_name = 21, 
		RULE_table_cols_list = 22, RULE_table_cols = 23, RULE_vacuum_mode = 24, 
		RULE_vacuum_option = 25, RULE_analyze_mode = 26, RULE_boolean_value = 27, 
		RULE_fetch_move_direction = 28, RULE_schema_statement = 29, RULE_schema_create = 30, 
		RULE_schema_alter = 31, RULE_schema_drop = 32, RULE_schema_import = 33, 
		RULE_alter_function_statement = 34, RULE_alter_aggregate_statement = 35, 
		RULE_alter_extension_statement = 36, RULE_alter_extension_action = 37, 
		RULE_extension_member_object = 38, RULE_alter_schema_statement = 39, RULE_alter_language_statement = 40, 
		RULE_alter_table_statement = 41, RULE_table_action = 42, RULE_column_action = 43, 
		RULE_identity_body = 44, RULE_alter_identity = 45, RULE_storage_option = 46, 
		RULE_validate_constraint = 47, RULE_drop_constraint = 48, RULE_table_deferrable = 49, 
		RULE_table_initialy_immed = 50, RULE_function_actions_common = 51, RULE_function_def = 52, 
		RULE_alter_index_statement = 53, RULE_index_def_action = 54, RULE_alter_default_privileges = 55, 
		RULE_abbreviated_grant_or_revoke = 56, RULE_grant_option_for = 57, RULE_alter_sequence_statement = 58, 
		RULE_alter_view_statement = 59, RULE_alter_event_trigger = 60, RULE_alter_event_trigger_action = 61, 
		RULE_alter_type_statement = 62, RULE_alter_domain_statement = 63, RULE_alter_server_statement = 64, 
		RULE_alter_server_action = 65, RULE_alter_fts_statement = 66, RULE_alter_fts_configuration = 67, 
		RULE_type_action = 68, RULE_set_def_column = 69, RULE_drop_def = 70, RULE_create_index_statement = 71, 
		RULE_index_rest = 72, RULE_index_sort = 73, RULE_including_index = 74, 
		RULE_index_where = 75, RULE_create_extension_statement = 76, RULE_create_language_statement = 77, 
		RULE_create_event_trigger = 78, RULE_create_type_statement = 79, RULE_create_domain_statement = 80, 
		RULE_create_server_statement = 81, RULE_create_fts_dictionary = 82, RULE_option_with_value = 83, 
		RULE_create_fts_configuration = 84, RULE_create_fts_template = 85, RULE_create_fts_parser = 86, 
		RULE_create_collation = 87, RULE_alter_collation = 88, RULE_collation_option = 89, 
		RULE_create_user_mapping = 90, RULE_alter_user_mapping = 91, RULE_alter_user_or_role = 92, 
		RULE_alter_user_or_role_set_reset = 93, RULE_user_or_role_set_reset = 94, 
		RULE_alter_group = 95, RULE_alter_group_action = 96, RULE_alter_tablespace = 97, 
		RULE_alter_owner = 98, RULE_alter_tablespace_action = 99, RULE_alter_statistics = 100, 
		RULE_alter_foreign_data_wrapper = 101, RULE_alter_foreign_data_wrapper_action = 102, 
		RULE_alter_operator_statement = 103, RULE_alter_operator_action = 104, 
		RULE_operator_set_restrict_join = 105, RULE_drop_user_mapping = 106, RULE_drop_owned = 107, 
		RULE_drop_operator_statement = 108, RULE_target_operator = 109, RULE_domain_constraint = 110, 
		RULE_create_transform_statement = 111, RULE_create_access_method = 112, 
		RULE_create_user_or_role = 113, RULE_user_or_role_option = 114, RULE_user_or_role_option_for_alter = 115, 
		RULE_user_or_role_or_group_common_option = 116, RULE_user_or_role_common_option = 117, 
		RULE_user_or_role_or_group_option_for_create = 118, RULE_create_group = 119, 
		RULE_group_option = 120, RULE_create_tablespace = 121, RULE_create_statistics = 122, 
		RULE_create_foreign_data_wrapper = 123, RULE_option_without_equal = 124, 
		RULE_create_operator_statement = 125, RULE_operator_name = 126, RULE_operator_option = 127, 
		RULE_create_aggregate_statement = 128, RULE_aggregate_param = 129, RULE_set_statement = 130, 
		RULE_set_action = 131, RULE_session_local_option = 132, RULE_set_statement_value = 133, 
		RULE_create_rewrite_statement = 134, RULE_rewrite_command = 135, RULE_create_trigger_statement = 136, 
		RULE_trigger_referencing = 137, RULE_when_trigger = 138, RULE_rule_common = 139, 
		RULE_rule_member_object = 140, RULE_columns_permissions = 141, RULE_table_column_privileges = 142, 
		RULE_permissions = 143, RULE_permission = 144, RULE_other_rules = 145, 
		RULE_grant_to_rule = 146, RULE_revoke_from_cascade_restrict = 147, RULE_roles_names = 148, 
		RULE_role_name_with_group = 149, RULE_comment_on_statement = 150, RULE_security_label = 151, 
		RULE_comment_member_object = 152, RULE_label_member_object = 153, RULE_create_function_statement = 154, 
		RULE_create_funct_params = 155, RULE_transform_for_type = 156, RULE_function_ret_table = 157, 
		RULE_function_column_name_type = 158, RULE_function_parameters = 159, 
		RULE_function_args = 160, RULE_agg_order = 161, RULE_character_string = 162, 
		RULE_function_arguments = 163, RULE_argmode = 164, RULE_create_sequence_statement = 165, 
		RULE_sequence_body = 166, RULE_signed_number_literal = 167, RULE_signed_numerical_literal = 168, 
		RULE_sign = 169, RULE_create_schema_statement = 170, RULE_create_policy_statement = 171, 
		RULE_alter_policy_statement = 172, RULE_drop_policy_statement = 173, RULE_create_subscription_statement = 174, 
		RULE_alter_subscription_statement = 175, RULE_alter_subscription_action = 176, 
		RULE_create_cast_statement = 177, RULE_drop_cast_statement = 178, RULE_create_operator_family_statement = 179, 
		RULE_alter_operator_family_statement = 180, RULE_operator_family_action = 181, 
		RULE_add_operator_to_family = 182, RULE_drop_operator_from_family = 183, 
		RULE_drop_operator_family_statement = 184, RULE_create_operator_class_statement = 185, 
		RULE_create_operator_class_option = 186, RULE_alter_operator_class_statement = 187, 
		RULE_drop_operator_class_statement = 188, RULE_create_conversion_statement = 189, 
		RULE_alter_conversion_statement = 190, RULE_create_publication_statement = 191, 
		RULE_alter_publication_statement = 192, RULE_alter_publication_action = 193, 
		RULE_only_table_multiply = 194, RULE_alter_trigger_statement = 195, RULE_alter_rule_statement = 196, 
		RULE_copy_statement = 197, RULE_copy_from_statement = 198, RULE_copy_to_statement = 199, 
		RULE_copy_option_list = 200, RULE_copy_option = 201, RULE_create_view_statement = 202, 
		RULE_if_exists = 203, RULE_if_not_exists = 204, RULE_view_columns = 205, 
		RULE_with_check_option = 206, RULE_create_table_statement = 207, RULE_create_table_as_statement = 208, 
		RULE_create_foreign_table_statement = 209, RULE_define_table = 210, RULE_define_partition = 211, 
		RULE_for_values_bound = 212, RULE_partition_bound_spec = 213, RULE_partition_bound_part = 214, 
		RULE_define_columns = 215, RULE_define_type = 216, RULE_partition_by = 217, 
		RULE_partition_method = 218, RULE_partition_column = 219, RULE_define_server = 220, 
		RULE_define_foreign_options = 221, RULE_foreign_option = 222, RULE_foreign_option_name = 223, 
		RULE_list_of_type_column_def = 224, RULE_table_column_def = 225, RULE_table_of_type_column_def = 226, 
		RULE_table_column_definition = 227, RULE_like_option = 228, RULE_constraint_common = 229, 
		RULE_constr_body = 230, RULE_all_op = 231, RULE_all_simple_op = 232, RULE_op_chars = 233, 
		RULE_index_parameters = 234, RULE_names_in_parens = 235, RULE_names_references = 236, 
		RULE_storage_parameter = 237, RULE_storage_parameter_option = 238, RULE_storage_parameter_name = 239, 
		RULE_with_storage_parameter = 240, RULE_storage_parameter_oid = 241, RULE_on_commit = 242, 
		RULE_table_space = 243, RULE_action = 244, RULE_owner_to = 245, RULE_rename_to = 246, 
		RULE_set_schema = 247, RULE_table_column_privilege = 248, RULE_usage_select_update = 249, 
		RULE_partition_by_columns = 250, RULE_cascade_restrict = 251, RULE_collate_identifier = 252, 
		RULE_indirection_var = 253, RULE_dollar_number = 254, RULE_indirection_list = 255, 
		RULE_indirection = 256, RULE_drop_function_statement = 257, RULE_drop_trigger_statement = 258, 
		RULE_drop_rule_statement = 259, RULE_drop_statements = 260, RULE_if_exist_names_restrict_cascade = 261, 
		RULE_id_token = 262, RULE_identifier = 263, RULE_identifier_nontype = 264, 
		RULE_col_label = 265, RULE_tokens_nonreserved = 266, RULE_tokens_nonreserved_except_function_type = 267, 
		RULE_tokens_reserved_except_function_type = 268, RULE_tokens_reserved = 269, 
		RULE_tokens_nonkeyword = 270, RULE_schema_qualified_name_nontype = 271, 
		RULE_type_list = 272, RULE_data_type = 273, RULE_array_type = 274, RULE_predefined_type = 275, 
		RULE_interval_field = 276, RULE_type_length = 277, RULE_precision_param = 278, 
		RULE_vex = 279, RULE_vex_b = 280, RULE_op = 281, RULE_all_op_ref = 282, 
		RULE_datetime_overlaps = 283, RULE_value_expression_primary = 284, RULE_unsigned_value_specification = 285, 
		RULE_unsigned_numeric_literal = 286, RULE_truth_value = 287, RULE_case_expression = 288, 
		RULE_cast_specification = 289, RULE_function_call = 290, RULE_vex_or_named_notation = 291, 
		RULE_pointer = 292, RULE_function_construct = 293, RULE_extract_function = 294, 
		RULE_system_function = 295, RULE_date_time_function = 296, RULE_string_value_function = 297, 
		RULE_xml_function = 298, RULE_xml_table_column = 299, RULE_comparison_mod = 300, 
		RULE_filter_clause = 301, RULE_window_definition = 302, RULE_frame_clause = 303, 
		RULE_frame_bound = 304, RULE_array_expression = 305, RULE_array_elements = 306, 
		RULE_type_coercion = 307, RULE_schema_qualified_name = 308, RULE_set_qualifier = 309, 
		RULE_table_subquery = 310, RULE_select_stmt = 311, RULE_after_ops = 312, 
		RULE_select_stmt_no_parens = 313, RULE_with_clause = 314, RULE_with_query = 315, 
		RULE_select_ops = 316, RULE_select_ops_no_parens = 317, RULE_select_primary = 318, 
		RULE_select_list = 319, RULE_select_sublist = 320, RULE_into_table = 321, 
		RULE_from_item = 322, RULE_from_primary = 323, RULE_alias_clause = 324, 
		RULE_from_function_column_def = 325, RULE_groupby_clause = 326, RULE_grouping_element_list = 327, 
		RULE_grouping_element = 328, RULE_values_stmt = 329, RULE_values_values = 330, 
		RULE_orderby_clause = 331, RULE_sort_specifier_list = 332, RULE_sort_specifier = 333, 
		RULE_order_specification = 334, RULE_null_ordering = 335, RULE_insert_stmt_for_psql = 336, 
		RULE_insert_columns = 337, RULE_indirection_identifier = 338, RULE_conflict_object = 339, 
		RULE_conflict_action = 340, RULE_delete_stmt_for_psql = 341, RULE_update_stmt_for_psql = 342, 
		RULE_update_set = 343, RULE_notify_stmt = 344, RULE_truncate_stmt = 345, 
		RULE_identifier_list = 346, RULE_anonymous_block = 347, RULE_comp_options = 348, 
		RULE_function_block = 349, RULE_start_label = 350, RULE_declarations = 351, 
		RULE_declaration = 352, RULE_type_declaration = 353, RULE_arguments_list = 354, 
		RULE_data_type_dec = 355, RULE_exception_statement = 356, RULE_function_statements = 357, 
		RULE_function_statement = 358, RULE_base_statement = 359, RULE_var = 360, 
		RULE_diagnostic_option = 361, RULE_perform_stmt = 362, RULE_assign_stmt = 363, 
		RULE_execute_stmt = 364, RULE_control_statement = 365, RULE_cursor_statement = 366, 
		RULE_option = 367, RULE_transaction_statement = 368, RULE_message_statement = 369, 
		RULE_log_level = 370, RULE_raise_using = 371, RULE_raise_param = 372, 
		RULE_return_stmt = 373, RULE_loop_statement = 374, RULE_loop_start = 375, 
		RULE_using_vex = 376, RULE_if_statement = 377, RULE_case_statement = 378, 
		RULE_plpgsql_query = 379;
	private static String[] makeRuleNames() {
		return new String[] {
			"sql", "qname_parser", "function_args_parser", "vex_eof", "plpgsql_function", 
			"plpgsql_function_test_list", "statement", "data_statement", "script_statement", 
			"script_transaction", "transaction_mode", "lock_table", "lock_mode", 
			"script_additional", "additional_statement", "explain_statement", "explain_query", 
			"execute_statement", "declare_statement", "show_statement", "explain_option", 
			"user_name", "table_cols_list", "table_cols", "vacuum_mode", "vacuum_option", 
			"analyze_mode", "boolean_value", "fetch_move_direction", "schema_statement", 
			"schema_create", "schema_alter", "schema_drop", "schema_import", "alter_function_statement", 
			"alter_aggregate_statement", "alter_extension_statement", "alter_extension_action", 
			"extension_member_object", "alter_schema_statement", "alter_language_statement", 
			"alter_table_statement", "table_action", "column_action", "identity_body", 
			"alter_identity", "storage_option", "validate_constraint", "drop_constraint", 
			"table_deferrable", "table_initialy_immed", "function_actions_common", 
			"function_def", "alter_index_statement", "index_def_action", "alter_default_privileges", 
			"abbreviated_grant_or_revoke", "grant_option_for", "alter_sequence_statement", 
			"alter_view_statement", "alter_event_trigger", "alter_event_trigger_action", 
			"alter_type_statement", "alter_domain_statement", "alter_server_statement", 
			"alter_server_action", "alter_fts_statement", "alter_fts_configuration", 
			"type_action", "set_def_column", "drop_def", "create_index_statement", 
			"index_rest", "index_sort", "including_index", "index_where", "create_extension_statement", 
			"create_language_statement", "create_event_trigger", "create_type_statement", 
			"create_domain_statement", "create_server_statement", "create_fts_dictionary", 
			"option_with_value", "create_fts_configuration", "create_fts_template", 
			"create_fts_parser", "create_collation", "alter_collation", "collation_option", 
			"create_user_mapping", "alter_user_mapping", "alter_user_or_role", "alter_user_or_role_set_reset", 
			"user_or_role_set_reset", "alter_group", "alter_group_action", "alter_tablespace", 
			"alter_owner", "alter_tablespace_action", "alter_statistics", "alter_foreign_data_wrapper", 
			"alter_foreign_data_wrapper_action", "alter_operator_statement", "alter_operator_action", 
			"operator_set_restrict_join", "drop_user_mapping", "drop_owned", "drop_operator_statement", 
			"target_operator", "domain_constraint", "create_transform_statement", 
			"create_access_method", "create_user_or_role", "user_or_role_option", 
			"user_or_role_option_for_alter", "user_or_role_or_group_common_option", 
			"user_or_role_common_option", "user_or_role_or_group_option_for_create", 
			"create_group", "group_option", "create_tablespace", "create_statistics", 
			"create_foreign_data_wrapper", "option_without_equal", "create_operator_statement", 
			"operator_name", "operator_option", "create_aggregate_statement", "aggregate_param", 
			"set_statement", "set_action", "session_local_option", "set_statement_value", 
			"create_rewrite_statement", "rewrite_command", "create_trigger_statement", 
			"trigger_referencing", "when_trigger", "rule_common", "rule_member_object", 
			"columns_permissions", "table_column_privileges", "permissions", "permission", 
			"other_rules", "grant_to_rule", "revoke_from_cascade_restrict", "roles_names", 
			"role_name_with_group", "comment_on_statement", "security_label", "comment_member_object", 
			"label_member_object", "create_function_statement", "create_funct_params", 
			"transform_for_type", "function_ret_table", "function_column_name_type", 
			"function_parameters", "function_args", "agg_order", "character_string", 
			"function_arguments", "argmode", "create_sequence_statement", "sequence_body", 
			"signed_number_literal", "signed_numerical_literal", "sign", "create_schema_statement", 
			"create_policy_statement", "alter_policy_statement", "drop_policy_statement", 
			"create_subscription_statement", "alter_subscription_statement", "alter_subscription_action", 
			"create_cast_statement", "drop_cast_statement", "create_operator_family_statement", 
			"alter_operator_family_statement", "operator_family_action", "add_operator_to_family", 
			"drop_operator_from_family", "drop_operator_family_statement", "create_operator_class_statement", 
			"create_operator_class_option", "alter_operator_class_statement", "drop_operator_class_statement", 
			"create_conversion_statement", "alter_conversion_statement", "create_publication_statement", 
			"alter_publication_statement", "alter_publication_action", "only_table_multiply", 
			"alter_trigger_statement", "alter_rule_statement", "copy_statement", 
			"copy_from_statement", "copy_to_statement", "copy_option_list", "copy_option", 
			"create_view_statement", "if_exists", "if_not_exists", "view_columns", 
			"with_check_option", "create_table_statement", "create_table_as_statement", 
			"create_foreign_table_statement", "define_table", "define_partition", 
			"for_values_bound", "partition_bound_spec", "partition_bound_part", "define_columns", 
			"define_type", "partition_by", "partition_method", "partition_column", 
			"define_server", "define_foreign_options", "foreign_option", "foreign_option_name", 
			"list_of_type_column_def", "table_column_def", "table_of_type_column_def", 
			"table_column_definition", "like_option", "constraint_common", "constr_body", 
			"all_op", "all_simple_op", "op_chars", "index_parameters", "names_in_parens", 
			"names_references", "storage_parameter", "storage_parameter_option", 
			"storage_parameter_name", "with_storage_parameter", "storage_parameter_oid", 
			"on_commit", "table_space", "action", "owner_to", "rename_to", "set_schema", 
			"table_column_privilege", "usage_select_update", "partition_by_columns", 
			"cascade_restrict", "collate_identifier", "indirection_var", "dollar_number", 
			"indirection_list", "indirection", "drop_function_statement", "drop_trigger_statement", 
			"drop_rule_statement", "drop_statements", "if_exist_names_restrict_cascade", 
			"id_token", "identifier", "identifier_nontype", "col_label", "tokens_nonreserved", 
			"tokens_nonreserved_except_function_type", "tokens_reserved_except_function_type", 
			"tokens_reserved", "tokens_nonkeyword", "schema_qualified_name_nontype", 
			"type_list", "data_type", "array_type", "predefined_type", "interval_field", 
			"type_length", "precision_param", "vex", "vex_b", "op", "all_op_ref", 
			"datetime_overlaps", "value_expression_primary", "unsigned_value_specification", 
			"unsigned_numeric_literal", "truth_value", "case_expression", "cast_specification", 
			"function_call", "vex_or_named_notation", "pointer", "function_construct", 
			"extract_function", "system_function", "date_time_function", "string_value_function", 
			"xml_function", "xml_table_column", "comparison_mod", "filter_clause", 
			"window_definition", "frame_clause", "frame_bound", "array_expression", 
			"array_elements", "type_coercion", "schema_qualified_name", "set_qualifier", 
			"table_subquery", "select_stmt", "after_ops", "select_stmt_no_parens", 
			"with_clause", "with_query", "select_ops", "select_ops_no_parens", "select_primary", 
			"select_list", "select_sublist", "into_table", "from_item", "from_primary", 
			"alias_clause", "from_function_column_def", "groupby_clause", "grouping_element_list", 
			"grouping_element", "values_stmt", "values_values", "orderby_clause", 
			"sort_specifier_list", "sort_specifier", "order_specification", "null_ordering", 
			"insert_stmt_for_psql", "insert_columns", "indirection_identifier", "conflict_object", 
			"conflict_action", "delete_stmt_for_psql", "update_stmt_for_psql", "update_set", 
			"notify_stmt", "truncate_stmt", "identifier_list", "anonymous_block", 
			"comp_options", "function_block", "start_label", "declarations", "declaration", 
			"type_declaration", "arguments_list", "data_type_dec", "exception_statement", 
			"function_statements", "function_statement", "base_statement", "var", 
			"diagnostic_option", "perform_stmt", "assign_stmt", "execute_stmt", "control_statement", 
			"cursor_statement", "option", "transaction_statement", "message_statement", 
			"log_level", "raise_using", "raise_param", "return_stmt", "loop_statement", 
			"loop_start", "using_vex", "if_statement", "case_statement", "plpgsql_query"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			"'='", "':'", "';'", "','", null, "'<'", "'<='", "'>'", "'>='", "'('", 
			"')'", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'.'", "'''", "'\"'", 
			"'$'", "'['", "']'", "'=>'", "':='", "'<<'", "'>>'", "'..'", "'#'", null, 
			null, null, null, null, null, null, null, null, null, "' '", null, null, 
			"'\u0009'", "'\uFEFF'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "ABORT", "ABSOLUTE", "ACCESS", "ACTION", "ADD", "ADMIN", "AFTER", 
			"AGGREGATE", "ALSO", "ALTER", "ALWAYS", "ASSERTION", "ASSIGNMENT", "AT", 
			"ATTACH", "ATTRIBUTE", "BACKWARD", "BEFORE", "BEGIN", "BY", "CACHE", 
			"CALL", "CALLED", "CASCADE", "CASCADED", "CATALOG", "CHAIN", "CHARACTERISTICS", 
			"CHECKPOINT", "CLASS", "CLOSE", "CLUSTER", "COLUMNS", "COMMENT", "COMMENTS", 
			"COMMIT", "COMMITTED", "CONFIGURATION", "CONFLICT", "CONNECTION", "CONSTRAINTS", 
			"CONTENT", "CONTINUE", "CONVERSION", "COPY", "COST", "CSV", "CUBE", "CURRENT", 
			"CURSOR", "CYCLE", "DATA", "DATABASE", "DAY", "DEALLOCATE", "DECLARE", 
			"DEFAULTS", "DEFERRED", "DEFINER", "DELETE", "DELIMITER", "DELIMITERS", 
			"DEPENDS", "DETACH", "DICTIONARY", "DISABLE", "DISCARD", "DOCUMENT", 
			"DOMAIN", "DOUBLE", "DROP", "EACH", "ENABLE", "ENCODING", "ENCRYPTED", 
			"ENUM", "ESCAPE", "EVENT", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXECUTE", 
			"EXPLAIN", "EXTENSION", "EXTERNAL", "FAMILY", "FILTER", "FIRST", "FOLLOWING", 
			"FORCE", "FORWARD", "FUNCTION", "FUNCTIONS", "GENERATED", "GLOBAL", "GRANTED", 
			"GROUPS", "HANDLER", "HEADER", "HOLD", "HOUR", "IDENTITY", "IF", "IMMEDIATE", 
			"IMMUTABLE", "IMPLICIT", "IMPORT", "INCLUDE", "INCLUDING", "INCREMENT", 
			"INDEX", "INDEXES", "INHERIT", "INHERITS", "INLINE", "INPUT", "INSENSITIVE", 
			"INSERT", "INSTEAD", "INVOKER", "ISOLATION", "KEY", "LABEL", "LANGUAGE", 
			"LARGE", "LAST", "LEAKPROOF", "LEVEL", "LISTEN", "LOAD", "LOCAL", "LOCATION", 
			"LOCK", "LOCKED", "LOGGED", "MAPPING", "MATCH", "MATERIALIZED", "MAXVALUE", 
			"METHOD", "MINUTE", "MINVALUE", "MODE", "MONTH", "MOVE", "NAME", "NAMES", 
			"NEW", "NEXT", "NO", "NOTHING", "NOTIFY", "NOWAIT", "NULLS", "OBJECT", 
			"OF", "OFF", "OIDS", "OLD", "OPERATOR", "OPTION", "OPTIONS", "ORDINALITY", 
			"OTHERS", "OVER", "OVERRIDING", "OWNED", "OWNER", "PARALLEL", "PARSER", 
			"PARTIAL", "PARTITION", "PASSING", "PASSWORD", "PLANS", "POLICY", "PRECEDING", 
			"PREPARE", "PREPARED", "PRESERVE", "PRIOR", "PRIVILEGES", "PROCEDURAL", 
			"PROCEDURE", "PROCEDURES", "PROGRAM", "PUBLICATION", "QUOTE", "RANGE", 
			"READ", "REASSIGN", "RECHECK", "RECURSIVE", "REF", "REFERENCING", "REFRESH", 
			"REINDEX", "RELATIVE", "RELEASE", "RENAME", "REPEATABLE", "REPLACE", 
			"REPLICA", "RESET", "RESTART", "RESTRICT", "RETURNS", "REVOKE", "ROLE", 
			"ROLLBACK", "ROLLUP", "ROUTINE", "ROUTINES", "ROWS", "RULE", "SAVEPOINT", 
			"SCHEMA", "SCHEMAS", "SCROLL", "SEARCH", "SECOND", "SECURITY", "SEQUENCE", 
			"SEQUENCES", "SERIALIZABLE", "SERVER", "SESSION", "SET", "SETS", "SHARE", 
			"SHOW", "SIMPLE", "SKIP_", "SNAPSHOT", "SQL", "STABLE", "STANDALONE", 
			"START", "STATEMENT", "STATISTICS", "STDIN", "STDOUT", "STORAGE", "STORED", 
			"STRICT", "STRIP", "SUBSCRIPTION", "SUPPORT", "SYSID", "SYSTEM", "TABLES", 
			"TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY", "TEXT", "TIES", "TRANSACTION", 
			"TRANSFORM", "TRIGGER", "TRUNCATE", "TRUSTED", "TYPE", "TYPES", "UNBOUNDED", 
			"UNCOMMITTED", "UNENCRYPTED", "UNKNOWN", "UNLISTEN", "UNLOGGED", "UNTIL", 
			"UPDATE", "VACUUM", "VALID", "VALIDATE", "VALIDATOR", "VALUE", "VARYING", 
			"VERSION", "VIEW", "VIEWS", "VOLATILE", "WHITESPACE", "WITHIN", "WITHOUT", 
			"WORK", "WRAPPER", "WRITE", "XML", "YEAR", "YES", "ZONE", "BETWEEN", 
			"BIGINT", "BIT", "BOOLEAN", "CHAR", "CHARACTER", "COALESCE", "DEC", "DECIMAL", 
			"EXISTS", "EXTRACT", "FLOAT", "GREATEST", "GROUPING", "INOUT", "INT", 
			"INTEGER", "INTERVAL", "LEAST", "NATIONAL", "NCHAR", "NONE", "NULLIF", 
			"NUMERIC", "OUT", "OVERLAY", "POSITION", "PRECISION", "REAL", "ROW", 
			"SETOF", "SMALLINT", "SUBSTRING", "TIME", "TIMESTAMP", "TREAT", "TRIM", 
			"VALUES", "VARCHAR", "XMLATTRIBUTES", "XMLCONCAT", "XMLELEMENT", "XMLEXISTS", 
			"XMLFOREST", "XMLNAMESPACES", "XMLPARSE", "XMLPI", "XMLROOT", "XMLSERIALIZE", 
			"XMLTABLE", "AUTHORIZATION", "BINARY", "COLLATION", "CONCURRENTLY", "CROSS", 
			"CURRENT_SCHEMA", "FREEZE", "FULL", "ILIKE", "INNER", "IS", "ISNULL", 
			"JOIN", "LEFT", "LIKE", "NATURAL", "NOTNULL", "OUTER", "OVERLAPS", "RIGHT", 
			"SIMILAR", "TABLESAMPLE", "VERBOSE", "ALL", "ANALYSE", "ANALYZE", "AND", 
			"ANY", "ARRAY", "AS", "ASC", "ASYMMETRIC", "BOTH", "CASE", "CAST", "CHECK", 
			"COLLATE", "COLUMN", "CONSTRAINT", "CREATE", "CURRENT_CATALOG", "CURRENT_DATE", 
			"CURRENT_ROLE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", 
			"DEFAULT", "DEFERRABLE", "DESC", "DISTINCT", "DO", "ELSE", "END", "EXCEPT", 
			"FALSE", "FETCH", "FOR", "FOREIGN", "FROM", "GRANT", "GROUP", "HAVING", 
			"IN", "INITIALLY", "INTERSECT", "INTO", "LATERAL", "LEADING", "LIMIT", 
			"LOCALTIME", "LOCALTIMESTAMP", "NOT", "NULL", "OFFSET", "ON", "ONLY", 
			"OR", "ORDER", "PLACING", "PRIMARY", "REFERENCES", "RETURNING", "SELECT", 
			"SESSION_USER", "SOME", "SYMMETRIC", "TABLE", "THEN", "TO", "TRAILING", 
			"TRUE", "UNION", "UNIQUE", "USER", "USING", "VARIADIC", "WHEN", "WHERE", 
			"WINDOW", "WITH", "ALIGNMENT", "BASETYPE", "BUFFERS", "BYPASSRLS", "CANONICAL", 
			"CATEGORY", "COLLATABLE", "COMBINEFUNC", "COMMUTATOR", "CONNECT", "COSTS", 
			"CREATEDB", "CREATEROLE", "DESERIALFUNC", "DETERMINISTIC", "DISABLE_PAGE_SKIPPING", 
			"ELEMENT", "EXTENDED", "FINALFUNC", "FINALFUNC_EXTRA", "FINALFUNC_MODIFY", 
			"FORCE_NOT_NULL", "FORCE_NULL", "FORCE_QUOTE", "FORMAT", "GETTOKEN", 
			"HASH", "HASHES", "HEADLINE", "HYPOTHETICAL", "INDEX_CLEANUP", "INIT", 
			"INITCOND", "INTERNALLENGTH", "JSON", "LC_COLLATE", "LC_CTYPE", "LEFTARG", 
			"LEXIZE", "LEXTYPES", "LIST", "LOCALE", "LOGIN", "MAIN", "MERGES", "MFINALFUNC", 
			"MFINALFUNC_EXTRA", "MFINALFUNC_MODIFY", "MINITCOND", "MINVFUNC", "MODULUS", 
			"MSFUNC", "MSSPACE", "MSTYPE", "NEGATOR", "NOBYPASSRLS", "NOCREATEDB", 
			"NOCREATEROLE", "NOINHERIT", "NOLOGIN", "NOREPLICATION", "NOSUPERUSER", 
			"OUTPUT", "PASSEDBYVALUE", "PATH", "PERMISSIVE", "PLAIN", "PREFERRED", 
			"PROVIDER", "READ_ONLY", "READ_WRITE", "RECEIVE", "REMAINDER", "REPLICATION", 
			"RESTRICTED", "RESTRICTIVE", "RIGHTARG", "SAFE", "SEND", "SERIALFUNC", 
			"SETTINGS", "SFUNC", "SHAREABLE", "SKIP_LOCKED", "SORTOP", "SSPACE", 
			"STYPE", "SUBTYPE_DIFF", "SUBTYPE_OPCLASS", "SUBTYPE", "SUMMARY", "SUPERUSER", 
			"TIMING", "TYPMOD_IN", "TYPMOD_OUT", "UNSAFE", "USAGE", "VARIABLE", "YAML", 
			"ALIAS", "ASSERT", "CONSTANT", "DATATYPE", "DEBUG", "DETAIL", "DIAGNOSTICS", 
			"ELSEIF", "ELSIF", "ERRCODE", "EXIT", "EXCEPTION", "FOREACH", "GET", 
			"HINT", "INFO", "LOG", "LOOP", "MESSAGE", "NOTICE", "OPEN", "PERFORM", 
			"QUERY", "RAISE", "RECORD", "RETURN", "REVERSE", "ROWTYPE", "SLICE", 
			"SQLSTATE", "STACKED", "WARNING", "WHILE", "CAST_EXPRESSION", "EQUAL", 
			"COLON", "SEMI_COLON", "COMMA", "NOT_EQUAL", "LTH", "LEQ", "GTH", "GEQ", 
			"LEFT_PAREN", "RIGHT_PAREN", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MODULAR", 
			"EXP", "DOT", "QUOTE_CHAR", "DOUBLE_QUOTE", "DOLLAR", "LEFT_BRACKET", 
			"RIGHT_BRACKET", "EQUAL_GTH", "COLON_EQUAL", "LESS_LESS", "GREATER_GREATER", 
			"DOUBLE_DOT", "HASH_SIGN", "BlockComment", "LineComment", "OP_CHARS", 
			"NUMBER_LITERAL", "REAL_NUMBER", "DOLLAR_NUMBER", "Identifier", "QuotedIdentifier", 
			"Character_String_Literal", "BeginDollarStringConstant", "Space", "White_Space", 
			"New_Line", "Tab", "BOM", "BAD", "Text_between_Dollar", "EndDollarStringConstant"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "PLpgSQLParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public PLpgSQLParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class SqlContext extends ParserRuleContext {
		public List<TerminalNode> EOF() { return getTokens(PLpgSQLParser.EOF); }
		public TerminalNode EOF(int i) {
			return getToken(PLpgSQLParser.EOF, i);
		}
		public TerminalNode BOM() { return getToken(PLpgSQLParser.BOM, 0); }
		public List<TerminalNode> SEMI_COLON() { return getTokens(PLpgSQLParser.SEMI_COLON); }
		public TerminalNode SEMI_COLON(int i) {
			return getToken(PLpgSQLParser.SEMI_COLON, i);
		}
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public SqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql; }
	}

	public final SqlContext sql() throws RecognitionException {
		SqlContext _localctx = new SqlContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_sql);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(761);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BOM) {
				{
				setState(760);
				match(BOM);
				}
			}

			setState(766);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==SEMI_COLON) {
				{
				{
				setState(763);
				match(SEMI_COLON);
				}
				}
				setState(768);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(780);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ALTER) | (1L << BEGIN) | (1L << CALL) | (1L << CHECKPOINT) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COMMENT) | (1L << COMMIT) | (1L << COPY) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DELETE))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (DISCARD - 67)) | (1L << (DROP - 67)) | (1L << (EXECUTE - 67)) | (1L << (EXPLAIN - 67)) | (1L << (IMPORT - 67)) | (1L << (INSERT - 67)) | (1L << (LISTEN - 67)) | (1L << (LOAD - 67)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (LOCK - 133)) | (1L << (MOVE - 133)) | (1L << (NOTIFY - 133)) | (1L << (PREPARE - 133)) | (1L << (REASSIGN - 133)) | (1L << (REFRESH - 133)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (REINDEX - 197)) | (1L << (RELEASE - 197)) | (1L << (RESET - 197)) | (1L << (REVOKE - 197)) | (1L << (ROLLBACK - 197)) | (1L << (SAVEPOINT - 197)) | (1L << (SECURITY - 197)) | (1L << (SET - 197)) | (1L << (SHOW - 197)) | (1L << (START - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (TRUNCATE - 261)) | (1L << (UNLISTEN - 261)) | (1L << (UPDATE - 261)) | (1L << (VACUUM - 261)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (VALUES - 330)) | (1L << (ANALYZE - 330)) | (1L << (CREATE - 330)) | (1L << (DO - 330)))) != 0) || ((((_la - 395)) & ~0x3f) == 0 && ((1L << (_la - 395)) & ((1L << (END - 395)) | (1L << (FETCH - 395)) | (1L << (GRANT - 395)) | (1L << (SELECT - 395)) | (1L << (TABLE - 395)) | (1L << (WITH - 395)))) != 0) || _la==LEFT_PAREN) {
				{
				{
				setState(769);
				statement();
				setState(776);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SEMI_COLON:
					{
					setState(771); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(770);
						match(SEMI_COLON);
						}
						}
						setState(773); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==SEMI_COLON );
					}
					break;
				case EOF:
					{
					setState(775);
					match(EOF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				setState(782);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(783);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Qname_parserContext extends ParserRuleContext {
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public TerminalNode EOF() { return getToken(PLpgSQLParser.EOF, 0); }
		public Qname_parserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qname_parser; }
	}

	public final Qname_parserContext qname_parser() throws RecognitionException {
		Qname_parserContext _localctx = new Qname_parserContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_qname_parser);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(785);
			schema_qualified_name();
			setState(786);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_args_parserContext extends ParserRuleContext {
		public Function_argsContext function_args() {
			return getRuleContext(Function_argsContext.class,0);
		}
		public TerminalNode EOF() { return getToken(PLpgSQLParser.EOF, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Function_args_parserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_args_parser; }
	}

	public final Function_args_parserContext function_args_parser() throws RecognitionException {
		Function_args_parserContext _localctx = new Function_args_parserContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_function_args_parser);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(789);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATTACH) | (1L << ATTRIBUTE) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BY) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG) | (1L << CHAIN) | (1L << CHARACTERISTICS) | (1L << CHECKPOINT) | (1L << CLASS) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMENTS) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONFIGURATION) | (1L << CONFLICT) | (1L << CONNECTION) | (1L << CONSTRAINTS) | (1L << CONTENT) | (1L << CONTINUE) | (1L << CONVERSION) | (1L << COPY) | (1L << COST) | (1L << CSV) | (1L << CUBE) | (1L << CURRENT) | (1L << CURSOR) | (1L << CYCLE) | (1L << DATA) | (1L << DATABASE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DEFAULTS) | (1L << DEFERRED) | (1L << DEFINER) | (1L << DELETE) | (1L << DELIMITER) | (1L << DELIMITERS) | (1L << DEPENDS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DETACH - 64)) | (1L << (DICTIONARY - 64)) | (1L << (DISABLE - 64)) | (1L << (DISCARD - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOMAIN - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (EACH - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTED - 64)) | (1L << (ENUM - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVENT - 64)) | (1L << (EXCLUDE - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXCLUSIVE - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTENSION - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FAMILY - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORCE - 64)) | (1L << (FORWARD - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GENERATED - 64)) | (1L << (GLOBAL - 64)) | (1L << (GRANTED - 64)) | (1L << (GROUPS - 64)) | (1L << (HANDLER - 64)) | (1L << (HEADER - 64)) | (1L << (HOLD - 64)) | (1L << (HOUR - 64)) | (1L << (IDENTITY - 64)) | (1L << (IF - 64)) | (1L << (IMMEDIATE - 64)) | (1L << (IMMUTABLE - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPORT - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INCREMENT - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXES - 64)) | (1L << (INHERIT - 64)) | (1L << (INHERITS - 64)) | (1L << (INLINE - 64)) | (1L << (INPUT - 64)) | (1L << (INSENSITIVE - 64)) | (1L << (INSERT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INVOKER - 64)) | (1L << (ISOLATION - 64)) | (1L << (KEY - 64)) | (1L << (LABEL - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LARGE - 64)) | (1L << (LAST - 64)) | (1L << (LEAKPROOF - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LEVEL - 128)) | (1L << (LISTEN - 128)) | (1L << (LOAD - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCATION - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKED - 128)) | (1L << (LOGGED - 128)) | (1L << (MAPPING - 128)) | (1L << (MATCH - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MAXVALUE - 128)) | (1L << (METHOD - 128)) | (1L << (MINUTE - 128)) | (1L << (MINVALUE - 128)) | (1L << (MODE - 128)) | (1L << (MONTH - 128)) | (1L << (MOVE - 128)) | (1L << (NAME - 128)) | (1L << (NAMES - 128)) | (1L << (NEW - 128)) | (1L << (NEXT - 128)) | (1L << (NO - 128)) | (1L << (NOTHING - 128)) | (1L << (NOTIFY - 128)) | (1L << (NOWAIT - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFF - 128)) | (1L << (OIDS - 128)) | (1L << (OLD - 128)) | (1L << (OPERATOR - 128)) | (1L << (OPTION - 128)) | (1L << (OPTIONS - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OTHERS - 128)) | (1L << (OVER - 128)) | (1L << (OVERRIDING - 128)) | (1L << (OWNED - 128)) | (1L << (OWNER - 128)) | (1L << (PARALLEL - 128)) | (1L << (PARSER - 128)) | (1L << (PARTIAL - 128)) | (1L << (PARTITION - 128)) | (1L << (PASSING - 128)) | (1L << (PASSWORD - 128)) | (1L << (PLANS - 128)) | (1L << (POLICY - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PREPARED - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRIOR - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROCEDURAL - 128)) | (1L << (PROCEDURE - 128)) | (1L << (PROCEDURES - 128)) | (1L << (PROGRAM - 128)) | (1L << (PUBLICATION - 128)) | (1L << (QUOTE - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (REASSIGN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (RECHECK - 192)) | (1L << (RECURSIVE - 192)) | (1L << (REF - 192)) | (1L << (REFERENCING - 192)) | (1L << (REFRESH - 192)) | (1L << (REINDEX - 192)) | (1L << (RELATIVE - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (REPLICA - 192)) | (1L << (RESET - 192)) | (1L << (RESTART - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUTINE - 192)) | (1L << (ROUTINES - 192)) | (1L << (ROWS - 192)) | (1L << (RULE - 192)) | (1L << (SAVEPOINT - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SCROLL - 192)) | (1L << (SEARCH - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEQUENCE - 192)) | (1L << (SEQUENCES - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SERVER - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHARE - 192)) | (1L << (SHOW - 192)) | (1L << (SIMPLE - 192)) | (1L << (SKIP_ - 192)) | (1L << (SNAPSHOT - 192)) | (1L << (SQL - 192)) | (1L << (STABLE - 192)) | (1L << (STANDALONE - 192)) | (1L << (START - 192)) | (1L << (STATEMENT - 192)) | (1L << (STATISTICS - 192)) | (1L << (STDIN - 192)) | (1L << (STDOUT - 192)) | (1L << (STORAGE - 192)) | (1L << (STORED - 192)) | (1L << (STRICT - 192)) | (1L << (STRIP - 192)) | (1L << (SUBSCRIPTION - 192)) | (1L << (SUPPORT - 192)) | (1L << (SYSID - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESPACE - 192)) | (1L << (TEMP - 192)) | (1L << (TEMPLATE - 192)) | (1L << (TEMPORARY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TEXT - 256)) | (1L << (TIES - 256)) | (1L << (TRANSACTION - 256)) | (1L << (TRANSFORM - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TRUSTED - 256)) | (1L << (TYPE - 256)) | (1L << (TYPES - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNENCRYPTED - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNLISTEN - 256)) | (1L << (UNLOGGED - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (VACUUM - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALIDATOR - 256)) | (1L << (VALUE - 256)) | (1L << (VARYING - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (VIEWS - 256)) | (1L << (VOLATILE - 256)) | (1L << (WHITESPACE - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (XML - 256)) | (1L << (YEAR - 256)) | (1L << (YES - 256)) | (1L << (ZONE - 256)) | (1L << (BETWEEN - 256)) | (1L << (BIGINT - 256)) | (1L << (BIT - 256)) | (1L << (BOOLEAN - 256)) | (1L << (CHAR - 256)) | (1L << (CHARACTER - 256)) | (1L << (COALESCE - 256)) | (1L << (DEC - 256)) | (1L << (DECIMAL - 256)) | (1L << (EXISTS - 256)) | (1L << (EXTRACT - 256)) | (1L << (FLOAT - 256)) | (1L << (GREATEST - 256)) | (1L << (GROUPING - 256)) | (1L << (INOUT - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERVAL - 256)) | (1L << (LEAST - 256)) | (1L << (NATIONAL - 256)) | (1L << (NCHAR - 256)) | (1L << (NONE - 256)) | (1L << (NULLIF - 256)) | (1L << (NUMERIC - 256)) | (1L << (OUT - 256)) | (1L << (OVERLAY - 256)) | (1L << (POSITION - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRECISION - 320)) | (1L << (REAL - 320)) | (1L << (ROW - 320)) | (1L << (SETOF - 320)) | (1L << (SMALLINT - 320)) | (1L << (SUBSTRING - 320)) | (1L << (TIME - 320)) | (1L << (TIMESTAMP - 320)) | (1L << (TREAT - 320)) | (1L << (TRIM - 320)) | (1L << (VALUES - 320)) | (1L << (VARCHAR - 320)) | (1L << (XMLATTRIBUTES - 320)) | (1L << (XMLCONCAT - 320)) | (1L << (XMLELEMENT - 320)) | (1L << (XMLEXISTS - 320)) | (1L << (XMLFOREST - 320)) | (1L << (XMLNAMESPACES - 320)) | (1L << (XMLPARSE - 320)) | (1L << (XMLPI - 320)) | (1L << (XMLROOT - 320)) | (1L << (XMLSERIALIZE - 320)) | (1L << (XMLTABLE - 320)))) != 0) || ((((_la - 443)) & ~0x3f) == 0 && ((1L << (_la - 443)) & ((1L << (ALIGNMENT - 443)) | (1L << (BASETYPE - 443)) | (1L << (BUFFERS - 443)) | (1L << (BYPASSRLS - 443)) | (1L << (CANONICAL - 443)) | (1L << (CATEGORY - 443)) | (1L << (COLLATABLE - 443)) | (1L << (COMBINEFUNC - 443)) | (1L << (COMMUTATOR - 443)) | (1L << (CONNECT - 443)) | (1L << (COSTS - 443)) | (1L << (CREATEDB - 443)) | (1L << (CREATEROLE - 443)) | (1L << (DESERIALFUNC - 443)) | (1L << (DETERMINISTIC - 443)) | (1L << (DISABLE_PAGE_SKIPPING - 443)) | (1L << (ELEMENT - 443)) | (1L << (EXTENDED - 443)) | (1L << (FINALFUNC - 443)) | (1L << (FINALFUNC_EXTRA - 443)) | (1L << (FINALFUNC_MODIFY - 443)) | (1L << (FORCE_NOT_NULL - 443)) | (1L << (FORCE_NULL - 443)) | (1L << (FORCE_QUOTE - 443)) | (1L << (FORMAT - 443)) | (1L << (GETTOKEN - 443)) | (1L << (HASH - 443)) | (1L << (HASHES - 443)) | (1L << (HEADLINE - 443)) | (1L << (HYPOTHETICAL - 443)) | (1L << (INDEX_CLEANUP - 443)) | (1L << (INIT - 443)) | (1L << (INITCOND - 443)) | (1L << (INTERNALLENGTH - 443)) | (1L << (JSON - 443)) | (1L << (LC_COLLATE - 443)) | (1L << (LC_CTYPE - 443)) | (1L << (LEFTARG - 443)) | (1L << (LEXIZE - 443)) | (1L << (LEXTYPES - 443)) | (1L << (LIST - 443)) | (1L << (LOCALE - 443)) | (1L << (LOGIN - 443)) | (1L << (MAIN - 443)) | (1L << (MERGES - 443)) | (1L << (MFINALFUNC - 443)) | (1L << (MFINALFUNC_EXTRA - 443)) | (1L << (MFINALFUNC_MODIFY - 443)) | (1L << (MINITCOND - 443)) | (1L << (MINVFUNC - 443)) | (1L << (MODULUS - 443)) | (1L << (MSFUNC - 443)) | (1L << (MSSPACE - 443)) | (1L << (MSTYPE - 443)) | (1L << (NEGATOR - 443)) | (1L << (NOBYPASSRLS - 443)) | (1L << (NOCREATEDB - 443)) | (1L << (NOCREATEROLE - 443)) | (1L << (NOINHERIT - 443)) | (1L << (NOLOGIN - 443)) | (1L << (NOREPLICATION - 443)) | (1L << (NOSUPERUSER - 443)) | (1L << (OUTPUT - 443)) | (1L << (PASSEDBYVALUE - 443)))) != 0) || ((((_la - 507)) & ~0x3f) == 0 && ((1L << (_la - 507)) & ((1L << (PATH - 507)) | (1L << (PERMISSIVE - 507)) | (1L << (PLAIN - 507)) | (1L << (PREFERRED - 507)) | (1L << (PROVIDER - 507)) | (1L << (READ_ONLY - 507)) | (1L << (READ_WRITE - 507)) | (1L << (RECEIVE - 507)) | (1L << (REMAINDER - 507)) | (1L << (REPLICATION - 507)) | (1L << (RESTRICTED - 507)) | (1L << (RESTRICTIVE - 507)) | (1L << (RIGHTARG - 507)) | (1L << (SAFE - 507)) | (1L << (SEND - 507)) | (1L << (SERIALFUNC - 507)) | (1L << (SETTINGS - 507)) | (1L << (SFUNC - 507)) | (1L << (SHAREABLE - 507)) | (1L << (SKIP_LOCKED - 507)) | (1L << (SORTOP - 507)) | (1L << (SSPACE - 507)) | (1L << (STYPE - 507)) | (1L << (SUBTYPE_DIFF - 507)) | (1L << (SUBTYPE_OPCLASS - 507)) | (1L << (SUBTYPE - 507)) | (1L << (SUMMARY - 507)) | (1L << (SUPERUSER - 507)) | (1L << (TIMING - 507)) | (1L << (TYPMOD_IN - 507)) | (1L << (TYPMOD_OUT - 507)) | (1L << (UNSAFE - 507)) | (1L << (USAGE - 507)) | (1L << (VARIABLE - 507)) | (1L << (YAML - 507)) | (1L << (ALIAS - 507)) | (1L << (ASSERT - 507)) | (1L << (CONSTANT - 507)) | (1L << (DATATYPE - 507)) | (1L << (DEBUG - 507)) | (1L << (DETAIL - 507)) | (1L << (DIAGNOSTICS - 507)) | (1L << (ELSEIF - 507)) | (1L << (ELSIF - 507)) | (1L << (ERRCODE - 507)) | (1L << (EXIT - 507)) | (1L << (EXCEPTION - 507)) | (1L << (FOREACH - 507)) | (1L << (GET - 507)) | (1L << (HINT - 507)) | (1L << (INFO - 507)) | (1L << (LOG - 507)) | (1L << (LOOP - 507)) | (1L << (MESSAGE - 507)) | (1L << (NOTICE - 507)) | (1L << (OPEN - 507)) | (1L << (PERFORM - 507)) | (1L << (QUERY - 507)) | (1L << (RAISE - 507)) | (1L << (RECORD - 507)) | (1L << (RETURN - 507)) | (1L << (REVERSE - 507)) | (1L << (ROWTYPE - 507)) | (1L << (SLICE - 507)))) != 0) || ((((_la - 571)) & ~0x3f) == 0 && ((1L << (_la - 571)) & ((1L << (SQLSTATE - 571)) | (1L << (STACKED - 571)) | (1L << (WARNING - 571)) | (1L << (WHILE - 571)) | (1L << (Identifier - 571)) | (1L << (QuotedIdentifier - 571)))) != 0)) {
				{
				setState(788);
				schema_qualified_name();
				}
			}

			setState(791);
			function_args();
			setState(792);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vex_eofContext extends ParserRuleContext {
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public TerminalNode EOF() { return getToken(PLpgSQLParser.EOF, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Vex_eofContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vex_eof; }
	}

	public final Vex_eofContext vex_eof() throws RecognitionException {
		Vex_eofContext _localctx = new Vex_eofContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_vex_eof);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(794);
			vex(0);
			setState(799);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(795);
				match(COMMA);
				setState(796);
				vex(0);
				}
				}
				setState(801);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(802);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Plpgsql_functionContext extends ParserRuleContext {
		public Function_blockContext function_block() {
			return getRuleContext(Function_blockContext.class,0);
		}
		public TerminalNode EOF() { return getToken(PLpgSQLParser.EOF, 0); }
		public Comp_optionsContext comp_options() {
			return getRuleContext(Comp_optionsContext.class,0);
		}
		public TerminalNode SEMI_COLON() { return getToken(PLpgSQLParser.SEMI_COLON, 0); }
		public Plpgsql_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_plpgsql_function; }
	}

	public final Plpgsql_functionContext plpgsql_function() throws RecognitionException {
		Plpgsql_functionContext _localctx = new Plpgsql_functionContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_plpgsql_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(805);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HASH_SIGN) {
				{
				setState(804);
				comp_options();
				}
			}

			setState(807);
			function_block();
			setState(809);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEMI_COLON) {
				{
				setState(808);
				match(SEMI_COLON);
				}
			}

			setState(811);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Plpgsql_function_test_listContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(PLpgSQLParser.EOF, 0); }
		public List<Function_blockContext> function_block() {
			return getRuleContexts(Function_blockContext.class);
		}
		public Function_blockContext function_block(int i) {
			return getRuleContext(Function_blockContext.class,i);
		}
		public List<TerminalNode> SEMI_COLON() { return getTokens(PLpgSQLParser.SEMI_COLON); }
		public TerminalNode SEMI_COLON(int i) {
			return getToken(PLpgSQLParser.SEMI_COLON, i);
		}
		public List<Comp_optionsContext> comp_options() {
			return getRuleContexts(Comp_optionsContext.class);
		}
		public Comp_optionsContext comp_options(int i) {
			return getRuleContext(Comp_optionsContext.class,i);
		}
		public Plpgsql_function_test_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_plpgsql_function_test_list; }
	}

	public final Plpgsql_function_test_listContext plpgsql_function_test_list() throws RecognitionException {
		Plpgsql_function_test_listContext _localctx = new Plpgsql_function_test_listContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_plpgsql_function_test_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(821);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==BEGIN || _la==DECLARE || _la==LESS_LESS || _la==HASH_SIGN) {
				{
				{
				setState(814);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HASH_SIGN) {
					{
					setState(813);
					comp_options();
					}
				}

				setState(816);
				function_block();
				setState(817);
				match(SEMI_COLON);
				}
				}
				setState(823);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(824);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementContext extends ParserRuleContext {
		public Data_statementContext data_statement() {
			return getRuleContext(Data_statementContext.class,0);
		}
		public Schema_statementContext schema_statement() {
			return getRuleContext(Schema_statementContext.class,0);
		}
		public Script_statementContext script_statement() {
			return getRuleContext(Script_statementContext.class,0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement; }
	}

	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_statement);
		try {
			setState(829);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DELETE:
			case INSERT:
			case UPDATE:
			case VALUES:
			case SELECT:
			case TABLE:
			case WITH:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 1);
				{
				setState(826);
				data_statement();
				}
				break;
			case ALTER:
			case COMMENT:
			case DROP:
			case IMPORT:
			case REVOKE:
			case SECURITY:
			case SET:
			case CREATE:
			case GRANT:
				enterOuterAlt(_localctx, 2);
				{
				setState(827);
				schema_statement();
				}
				break;
			case ABORT:
			case BEGIN:
			case CALL:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DISCARD:
			case EXECUTE:
			case EXPLAIN:
			case LISTEN:
			case LOAD:
			case LOCK:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case ROLLBACK:
			case SAVEPOINT:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case VACUUM:
			case ANALYZE:
			case DO:
			case END:
			case FETCH:
				enterOuterAlt(_localctx, 3);
				{
				setState(828);
				script_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_statementContext extends ParserRuleContext {
		public Select_stmtContext select_stmt() {
			return getRuleContext(Select_stmtContext.class,0);
		}
		public Insert_stmt_for_psqlContext insert_stmt_for_psql() {
			return getRuleContext(Insert_stmt_for_psqlContext.class,0);
		}
		public Update_stmt_for_psqlContext update_stmt_for_psql() {
			return getRuleContext(Update_stmt_for_psqlContext.class,0);
		}
		public Delete_stmt_for_psqlContext delete_stmt_for_psql() {
			return getRuleContext(Delete_stmt_for_psqlContext.class,0);
		}
		public Data_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_statement; }
	}

	public final Data_statementContext data_statement() throws RecognitionException {
		Data_statementContext _localctx = new Data_statementContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_data_statement);
		try {
			setState(835);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,12,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(831);
				select_stmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(832);
				insert_stmt_for_psql();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(833);
				update_stmt_for_psql();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(834);
				delete_stmt_for_psql();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Script_statementContext extends ParserRuleContext {
		public Script_transactionContext script_transaction() {
			return getRuleContext(Script_transactionContext.class,0);
		}
		public Script_additionalContext script_additional() {
			return getRuleContext(Script_additionalContext.class,0);
		}
		public Script_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_script_statement; }
	}

	public final Script_statementContext script_statement() throws RecognitionException {
		Script_statementContext _localctx = new Script_statementContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_script_statement);
		try {
			setState(839);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,13,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(837);
				script_transaction();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(838);
				script_additional();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Script_transactionContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(PLpgSQLParser.START, 0); }
		public TerminalNode TRANSACTION() { return getToken(PLpgSQLParser.TRANSACTION, 0); }
		public TerminalNode BEGIN() { return getToken(PLpgSQLParser.BEGIN, 0); }
		public List<Transaction_modeContext> transaction_mode() {
			return getRuleContexts(Transaction_modeContext.class);
		}
		public Transaction_modeContext transaction_mode(int i) {
			return getRuleContext(Transaction_modeContext.class,i);
		}
		public TerminalNode WORK() { return getToken(PLpgSQLParser.WORK, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public TerminalNode COMMIT() { return getToken(PLpgSQLParser.COMMIT, 0); }
		public TerminalNode END() { return getToken(PLpgSQLParser.END, 0); }
		public TerminalNode ABORT() { return getToken(PLpgSQLParser.ABORT, 0); }
		public TerminalNode ROLLBACK() { return getToken(PLpgSQLParser.ROLLBACK, 0); }
		public TerminalNode AND() { return getToken(PLpgSQLParser.AND, 0); }
		public TerminalNode CHAIN() { return getToken(PLpgSQLParser.CHAIN, 0); }
		public TerminalNode NO() { return getToken(PLpgSQLParser.NO, 0); }
		public TerminalNode Character_String_Literal() { return getToken(PLpgSQLParser.Character_String_Literal, 0); }
		public TerminalNode PREPARED() { return getToken(PLpgSQLParser.PREPARED, 0); }
		public TerminalNode PREPARE() { return getToken(PLpgSQLParser.PREPARE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode SAVEPOINT() { return getToken(PLpgSQLParser.SAVEPOINT, 0); }
		public TerminalNode RELEASE() { return getToken(PLpgSQLParser.RELEASE, 0); }
		public TerminalNode TO() { return getToken(PLpgSQLParser.TO, 0); }
		public Lock_tableContext lock_table() {
			return getRuleContext(Lock_tableContext.class,0);
		}
		public Script_transactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_script_transaction; }
	}

	public final Script_transactionContext script_transaction() throws RecognitionException {
		Script_transactionContext _localctx = new Script_transactionContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_script_transaction);
		int _la;
		try {
			setState(898);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,26,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(847);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case START:
					{
					setState(841);
					match(START);
					setState(842);
					match(TRANSACTION);
					}
					break;
				case BEGIN:
					{
					setState(843);
					match(BEGIN);
					setState(845);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==TRANSACTION || _la==WORK) {
						{
						setState(844);
						_la = _input.LA(1);
						if ( !(_la==TRANSACTION || _la==WORK) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(857);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ISOLATION || _la==READ || _la==DEFERRABLE || _la==NOT) {
					{
					setState(849);
					transaction_mode();
					setState(854);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(850);
						match(COMMA);
						setState(851);
						transaction_mode();
						}
						}
						setState(856);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(859);
				_la = _input.LA(1);
				if ( !(_la==ABORT || _la==COMMIT || _la==ROLLBACK || _la==END) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(861);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TRANSACTION || _la==WORK) {
					{
					setState(860);
					_la = _input.LA(1);
					if ( !(_la==TRANSACTION || _la==WORK) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(868);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AND) {
					{
					setState(863);
					match(AND);
					setState(865);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NO) {
						{
						setState(864);
						match(NO);
						}
					}

					setState(867);
					match(CHAIN);
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(874);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case COMMIT:
					{
					setState(870);
					match(COMMIT);
					setState(871);
					match(PREPARED);
					}
					break;
				case PREPARE:
					{
					setState(872);
					match(PREPARE);
					setState(873);
					match(TRANSACTION);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(876);
				match(Character_String_Literal);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(882);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SAVEPOINT:
					{
					setState(877);
					match(SAVEPOINT);
					}
					break;
				case RELEASE:
					{
					setState(878);
					match(RELEASE);
					setState(880);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,22,_ctx) ) {
					case 1:
						{
						setState(879);
						match(SAVEPOINT);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(884);
				identifier();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(885);
				match(ROLLBACK);
				setState(886);
				match(PREPARED);
				setState(887);
				match(Character_String_Literal);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(888);
				match(ROLLBACK);
				setState(890);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TRANSACTION || _la==WORK) {
					{
					setState(889);
					_la = _input.LA(1);
					if ( !(_la==TRANSACTION || _la==WORK) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(892);
				match(TO);
				setState(894);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,25,_ctx) ) {
				case 1:
					{
					setState(893);
					match(SAVEPOINT);
					}
					break;
				}
				setState(896);
				identifier();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(897);
				lock_table();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_modeContext extends ParserRuleContext {
		public TerminalNode ISOLATION() { return getToken(PLpgSQLParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(PLpgSQLParser.LEVEL, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(PLpgSQLParser.SERIALIZABLE, 0); }
		public TerminalNode REPEATABLE() { return getToken(PLpgSQLParser.REPEATABLE, 0); }
		public TerminalNode READ() { return getToken(PLpgSQLParser.READ, 0); }
		public TerminalNode COMMITTED() { return getToken(PLpgSQLParser.COMMITTED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(PLpgSQLParser.UNCOMMITTED, 0); }
		public TerminalNode WRITE() { return getToken(PLpgSQLParser.WRITE, 0); }
		public TerminalNode ONLY() { return getToken(PLpgSQLParser.ONLY, 0); }
		public TerminalNode DEFERRABLE() { return getToken(PLpgSQLParser.DEFERRABLE, 0); }
		public TerminalNode NOT() { return getToken(PLpgSQLParser.NOT, 0); }
		public Transaction_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_mode; }
	}

	public final Transaction_modeContext transaction_mode() throws RecognitionException {
		Transaction_modeContext _localctx = new Transaction_modeContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_transaction_mode);
		int _la;
		try {
			setState(919);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,29,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(900);
				match(ISOLATION);
				setState(901);
				match(LEVEL);
				setState(909);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,27,_ctx) ) {
				case 1:
					{
					setState(902);
					match(SERIALIZABLE);
					}
					break;
				case 2:
					{
					setState(903);
					match(REPEATABLE);
					setState(904);
					match(READ);
					}
					break;
				case 3:
					{
					setState(905);
					match(READ);
					setState(906);
					match(COMMITTED);
					}
					break;
				case 4:
					{
					setState(907);
					match(READ);
					setState(908);
					match(UNCOMMITTED);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(911);
				match(READ);
				setState(912);
				match(WRITE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(913);
				match(READ);
				setState(914);
				match(ONLY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(916);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(915);
					match(NOT);
					}
				}

				setState(918);
				match(DEFERRABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_tableContext extends ParserRuleContext {
		public TerminalNode LOCK() { return getToken(PLpgSQLParser.LOCK, 0); }
		public List<Only_table_multiplyContext> only_table_multiply() {
			return getRuleContexts(Only_table_multiplyContext.class);
		}
		public Only_table_multiplyContext only_table_multiply(int i) {
			return getRuleContext(Only_table_multiplyContext.class,i);
		}
		public TerminalNode TABLE() { return getToken(PLpgSQLParser.TABLE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public TerminalNode IN() { return getToken(PLpgSQLParser.IN, 0); }
		public Lock_modeContext lock_mode() {
			return getRuleContext(Lock_modeContext.class,0);
		}
		public TerminalNode MODE() { return getToken(PLpgSQLParser.MODE, 0); }
		public TerminalNode NOWAIT() { return getToken(PLpgSQLParser.NOWAIT, 0); }
		public Lock_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_table; }
	}

	public final Lock_tableContext lock_table() throws RecognitionException {
		Lock_tableContext _localctx = new Lock_tableContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_lock_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(921);
			match(LOCK);
			setState(923);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLE) {
				{
				setState(922);
				match(TABLE);
				}
			}

			setState(925);
			only_table_multiply();
			setState(930);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(926);
				match(COMMA);
				setState(927);
				only_table_multiply();
				}
				}
				setState(932);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(937);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(933);
				match(IN);
				setState(934);
				lock_mode();
				setState(935);
				match(MODE);
				}
			}

			setState(940);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT) {
				{
				setState(939);
				match(NOWAIT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_modeContext extends ParserRuleContext {
		public TerminalNode SHARE() { return getToken(PLpgSQLParser.SHARE, 0); }
		public TerminalNode ROW() { return getToken(PLpgSQLParser.ROW, 0); }
		public TerminalNode ACCESS() { return getToken(PLpgSQLParser.ACCESS, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(PLpgSQLParser.EXCLUSIVE, 0); }
		public TerminalNode UPDATE() { return getToken(PLpgSQLParser.UPDATE, 0); }
		public Lock_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_mode; }
	}

	public final Lock_modeContext lock_mode() throws RecognitionException {
		Lock_modeContext _localctx = new Lock_modeContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_lock_mode);
		int _la;
		try {
			setState(954);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,35,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(942);
				_la = _input.LA(1);
				if ( !(_la==ACCESS || _la==ROW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(943);
				match(SHARE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(944);
				match(ROW);
				setState(945);
				match(EXCLUSIVE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(946);
				match(SHARE);
				setState(947);
				_la = _input.LA(1);
				if ( !(_la==UPDATE || _la==ROW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(948);
				match(EXCLUSIVE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(949);
				match(SHARE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(951);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ACCESS) {
					{
					setState(950);
					match(ACCESS);
					}
				}

				setState(953);
				match(EXCLUSIVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Script_additionalContext extends ParserRuleContext {
		public Additional_statementContext additional_statement() {
			return getRuleContext(Additional_statementContext.class,0);
		}
		public TerminalNode VACUUM() { return getToken(PLpgSQLParser.VACUUM, 0); }
		public Vacuum_modeContext vacuum_mode() {
			return getRuleContext(Vacuum_modeContext.class,0);
		}
		public Table_cols_listContext table_cols_list() {
			return getRuleContext(Table_cols_listContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode FETCH() { return getToken(PLpgSQLParser.FETCH, 0); }
		public TerminalNode MOVE() { return getToken(PLpgSQLParser.MOVE, 0); }
		public Fetch_move_directionContext fetch_move_direction() {
			return getRuleContext(Fetch_move_directionContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PLpgSQLParser.FROM, 0); }
		public TerminalNode IN() { return getToken(PLpgSQLParser.IN, 0); }
		public TerminalNode CLOSE() { return getToken(PLpgSQLParser.CLOSE, 0); }
		public TerminalNode ALL() { return getToken(PLpgSQLParser.ALL, 0); }
		public TerminalNode CALL() { return getToken(PLpgSQLParser.CALL, 0); }
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public TerminalNode DISCARD() { return getToken(PLpgSQLParser.DISCARD, 0); }
		public TerminalNode PLANS() { return getToken(PLpgSQLParser.PLANS, 0); }
		public TerminalNode SEQUENCES() { return getToken(PLpgSQLParser.SEQUENCES, 0); }
		public TerminalNode TEMPORARY() { return getToken(PLpgSQLParser.TEMPORARY, 0); }
		public TerminalNode TEMP() { return getToken(PLpgSQLParser.TEMP, 0); }
		public Declare_statementContext declare_statement() {
			return getRuleContext(Declare_statementContext.class,0);
		}
		public Execute_statementContext execute_statement() {
			return getRuleContext(Execute_statementContext.class,0);
		}
		public Explain_statementContext explain_statement() {
			return getRuleContext(Explain_statementContext.class,0);
		}
		public Show_statementContext show_statement() {
			return getRuleContext(Show_statementContext.class,0);
		}
		public Script_additionalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_script_additional; }
	}

	public final Script_additionalContext script_additional() throws RecognitionException {
		Script_additionalContext _localctx = new Script_additionalContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_script_additional);
		int _la;
		try {
			setState(983);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHECKPOINT:
			case CLUSTER:
			case COPY:
			case DEALLOCATE:
			case LISTEN:
			case LOAD:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RESET:
			case TRUNCATE:
			case UNLISTEN:
			case ANALYZE:
			case DO:
				enterOuterAlt(_localctx, 1);
				{
				setState(956);
				additional_statement();
				}
				break;
			case VACUUM:
				enterOuterAlt(_localctx, 2);
				{
				setState(957);
				match(VACUUM);
				setState(958);
				vacuum_mode();
				setState(960);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATTACH) | (1L << ATTRIBUTE) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BY) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG) | (1L << CHAIN) | (1L << CHARACTERISTICS) | (1L << CHECKPOINT) | (1L << CLASS) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMENTS) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONFIGURATION) | (1L << CONFLICT) | (1L << CONNECTION) | (1L << CONSTRAINTS) | (1L << CONTENT) | (1L << CONTINUE) | (1L << CONVERSION) | (1L << COPY) | (1L << COST) | (1L << CSV) | (1L << CUBE) | (1L << CURRENT) | (1L << CURSOR) | (1L << CYCLE) | (1L << DATA) | (1L << DATABASE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DEFAULTS) | (1L << DEFERRED) | (1L << DEFINER) | (1L << DELETE) | (1L << DELIMITER) | (1L << DELIMITERS) | (1L << DEPENDS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DETACH - 64)) | (1L << (DICTIONARY - 64)) | (1L << (DISABLE - 64)) | (1L << (DISCARD - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOMAIN - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (EACH - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTED - 64)) | (1L << (ENUM - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVENT - 64)) | (1L << (EXCLUDE - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXCLUSIVE - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTENSION - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FAMILY - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORCE - 64)) | (1L << (FORWARD - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GENERATED - 64)) | (1L << (GLOBAL - 64)) | (1L << (GRANTED - 64)) | (1L << (GROUPS - 64)) | (1L << (HANDLER - 64)) | (1L << (HEADER - 64)) | (1L << (HOLD - 64)) | (1L << (HOUR - 64)) | (1L << (IDENTITY - 64)) | (1L << (IF - 64)) | (1L << (IMMEDIATE - 64)) | (1L << (IMMUTABLE - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPORT - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INCREMENT - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXES - 64)) | (1L << (INHERIT - 64)) | (1L << (INHERITS - 64)) | (1L << (INLINE - 64)) | (1L << (INPUT - 64)) | (1L << (INSENSITIVE - 64)) | (1L << (INSERT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INVOKER - 64)) | (1L << (ISOLATION - 64)) | (1L << (KEY - 64)) | (1L << (LABEL - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LARGE - 64)) | (1L << (LAST - 64)) | (1L << (LEAKPROOF - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LEVEL - 128)) | (1L << (LISTEN - 128)) | (1L << (LOAD - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCATION - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKED - 128)) | (1L << (LOGGED - 128)) | (1L << (MAPPING - 128)) | (1L << (MATCH - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MAXVALUE - 128)) | (1L << (METHOD - 128)) | (1L << (MINUTE - 128)) | (1L << (MINVALUE - 128)) | (1L << (MODE - 128)) | (1L << (MONTH - 128)) | (1L << (MOVE - 128)) | (1L << (NAME - 128)) | (1L << (NAMES - 128)) | (1L << (NEW - 128)) | (1L << (NEXT - 128)) | (1L << (NO - 128)) | (1L << (NOTHING - 128)) | (1L << (NOTIFY - 128)) | (1L << (NOWAIT - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFF - 128)) | (1L << (OIDS - 128)) | (1L << (OLD - 128)) | (1L << (OPERATOR - 128)) | (1L << (OPTION - 128)) | (1L << (OPTIONS - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OTHERS - 128)) | (1L << (OVER - 128)) | (1L << (OVERRIDING - 128)) | (1L << (OWNED - 128)) | (1L << (OWNER - 128)) | (1L << (PARALLEL - 128)) | (1L << (PARSER - 128)) | (1L << (PARTIAL - 128)) | (1L << (PARTITION - 128)) | (1L << (PASSING - 128)) | (1L << (PASSWORD - 128)) | (1L << (PLANS - 128)) | (1L << (POLICY - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PREPARED - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRIOR - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROCEDURAL - 128)) | (1L << (PROCEDURE - 128)) | (1L << (PROCEDURES - 128)) | (1L << (PROGRAM - 128)) | (1L << (PUBLICATION - 128)) | (1L << (QUOTE - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (REASSIGN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (RECHECK - 192)) | (1L << (RECURSIVE - 192)) | (1L << (REF - 192)) | (1L << (REFERENCING - 192)) | (1L << (REFRESH - 192)) | (1L << (REINDEX - 192)) | (1L << (RELATIVE - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (REPLICA - 192)) | (1L << (RESET - 192)) | (1L << (RESTART - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUTINE - 192)) | (1L << (ROUTINES - 192)) | (1L << (ROWS - 192)) | (1L << (RULE - 192)) | (1L << (SAVEPOINT - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SCROLL - 192)) | (1L << (SEARCH - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEQUENCE - 192)) | (1L << (SEQUENCES - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SERVER - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHARE - 192)) | (1L << (SHOW - 192)) | (1L << (SIMPLE - 192)) | (1L << (SKIP_ - 192)) | (1L << (SNAPSHOT - 192)) | (1L << (SQL - 192)) | (1L << (STABLE - 192)) | (1L << (STANDALONE - 192)) | (1L << (START - 192)) | (1L << (STATEMENT - 192)) | (1L << (STATISTICS - 192)) | (1L << (STDIN - 192)) | (1L << (STDOUT - 192)) | (1L << (STORAGE - 192)) | (1L << (STORED - 192)) | (1L << (STRICT - 192)) | (1L << (STRIP - 192)) | (1L << (SUBSCRIPTION - 192)) | (1L << (SUPPORT - 192)) | (1L << (SYSID - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESPACE - 192)) | (1L << (TEMP - 192)) | (1L << (TEMPLATE - 192)) | (1L << (TEMPORARY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TEXT - 256)) | (1L << (TIES - 256)) | (1L << (TRANSACTION - 256)) | (1L << (TRANSFORM - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TRUSTED - 256)) | (1L << (TYPE - 256)) | (1L << (TYPES - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNENCRYPTED - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNLISTEN - 256)) | (1L << (UNLOGGED - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (VACUUM - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALIDATOR - 256)) | (1L << (VALUE - 256)) | (1L << (VARYING - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (VIEWS - 256)) | (1L << (VOLATILE - 256)) | (1L << (WHITESPACE - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (XML - 256)) | (1L << (YEAR - 256)) | (1L << (YES - 256)) | (1L << (ZONE - 256)) | (1L << (BETWEEN - 256)) | (1L << (BIGINT - 256)) | (1L << (BIT - 256)) | (1L << (BOOLEAN - 256)) | (1L << (CHAR - 256)) | (1L << (CHARACTER - 256)) | (1L << (COALESCE - 256)) | (1L << (DEC - 256)) | (1L << (DECIMAL - 256)) | (1L << (EXISTS - 256)) | (1L << (EXTRACT - 256)) | (1L << (FLOAT - 256)) | (1L << (GREATEST - 256)) | (1L << (GROUPING - 256)) | (1L << (INOUT - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERVAL - 256)) | (1L << (LEAST - 256)) | (1L << (NATIONAL - 256)) | (1L << (NCHAR - 256)) | (1L << (NONE - 256)) | (1L << (NULLIF - 256)) | (1L << (NUMERIC - 256)) | (1L << (OUT - 256)) | (1L << (OVERLAY - 256)) | (1L << (POSITION - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRECISION - 320)) | (1L << (REAL - 320)) | (1L << (ROW - 320)) | (1L << (SETOF - 320)) | (1L << (SMALLINT - 320)) | (1L << (SUBSTRING - 320)) | (1L << (TIME - 320)) | (1L << (TIMESTAMP - 320)) | (1L << (TREAT - 320)) | (1L << (TRIM - 320)) | (1L << (VALUES - 320)) | (1L << (VARCHAR - 320)) | (1L << (XMLATTRIBUTES - 320)) | (1L << (XMLCONCAT - 320)) | (1L << (XMLELEMENT - 320)) | (1L << (XMLEXISTS - 320)) | (1L << (XMLFOREST - 320)) | (1L << (XMLNAMESPACES - 320)) | (1L << (XMLPARSE - 320)) | (1L << (XMLPI - 320)) | (1L << (XMLROOT - 320)) | (1L << (XMLSERIALIZE - 320)) | (1L << (XMLTABLE - 320)))) != 0) || ((((_la - 443)) & ~0x3f) == 0 && ((1L << (_la - 443)) & ((1L << (ALIGNMENT - 443)) | (1L << (BASETYPE - 443)) | (1L << (BUFFERS - 443)) | (1L << (BYPASSRLS - 443)) | (1L << (CANONICAL - 443)) | (1L << (CATEGORY - 443)) | (1L << (COLLATABLE - 443)) | (1L << (COMBINEFUNC - 443)) | (1L << (COMMUTATOR - 443)) | (1L << (CONNECT - 443)) | (1L << (COSTS - 443)) | (1L << (CREATEDB - 443)) | (1L << (CREATEROLE - 443)) | (1L << (DESERIALFUNC - 443)) | (1L << (DETERMINISTIC - 443)) | (1L << (DISABLE_PAGE_SKIPPING - 443)) | (1L << (ELEMENT - 443)) | (1L << (EXTENDED - 443)) | (1L << (FINALFUNC - 443)) | (1L << (FINALFUNC_EXTRA - 443)) | (1L << (FINALFUNC_MODIFY - 443)) | (1L << (FORCE_NOT_NULL - 443)) | (1L << (FORCE_NULL - 443)) | (1L << (FORCE_QUOTE - 443)) | (1L << (FORMAT - 443)) | (1L << (GETTOKEN - 443)) | (1L << (HASH - 443)) | (1L << (HASHES - 443)) | (1L << (HEADLINE - 443)) | (1L << (HYPOTHETICAL - 443)) | (1L << (INDEX_CLEANUP - 443)) | (1L << (INIT - 443)) | (1L << (INITCOND - 443)) | (1L << (INTERNALLENGTH - 443)) | (1L << (JSON - 443)) | (1L << (LC_COLLATE - 443)) | (1L << (LC_CTYPE - 443)) | (1L << (LEFTARG - 443)) | (1L << (LEXIZE - 443)) | (1L << (LEXTYPES - 443)) | (1L << (LIST - 443)) | (1L << (LOCALE - 443)) | (1L << (LOGIN - 443)) | (1L << (MAIN - 443)) | (1L << (MERGES - 443)) | (1L << (MFINALFUNC - 443)) | (1L << (MFINALFUNC_EXTRA - 443)) | (1L << (MFINALFUNC_MODIFY - 443)) | (1L << (MINITCOND - 443)) | (1L << (MINVFUNC - 443)) | (1L << (MODULUS - 443)) | (1L << (MSFUNC - 443)) | (1L << (MSSPACE - 443)) | (1L << (MSTYPE - 443)) | (1L << (NEGATOR - 443)) | (1L << (NOBYPASSRLS - 443)) | (1L << (NOCREATEDB - 443)) | (1L << (NOCREATEROLE - 443)) | (1L << (NOINHERIT - 443)) | (1L << (NOLOGIN - 443)) | (1L << (NOREPLICATION - 443)) | (1L << (NOSUPERUSER - 443)) | (1L << (OUTPUT - 443)) | (1L << (PASSEDBYVALUE - 443)))) != 0) || ((((_la - 507)) & ~0x3f) == 0 && ((1L << (_la - 507)) & ((1L << (PATH - 507)) | (1L << (PERMISSIVE - 507)) | (1L << (PLAIN - 507)) | (1L << (PREFERRED - 507)) | (1L << (PROVIDER - 507)) | (1L << (READ_ONLY - 507)) | (1L << (READ_WRITE - 507)) | (1L << (RECEIVE - 507)) | (1L << (REMAINDER - 507)) | (1L << (REPLICATION - 507)) | (1L << (RESTRICTED - 507)) | (1L << (RESTRICTIVE - 507)) | (1L << (RIGHTARG - 507)) | (1L << (SAFE - 507)) | (1L << (SEND - 507)) | (1L << (SERIALFUNC - 507)) | (1L << (SETTINGS - 507)) | (1L << (SFUNC - 507)) | (1L << (SHAREABLE - 507)) | (1L << (SKIP_LOCKED - 507)) | (1L << (SORTOP - 507)) | (1L << (SSPACE - 507)) | (1L << (STYPE - 507)) | (1L << (SUBTYPE_DIFF - 507)) | (1L << (SUBTYPE_OPCLASS - 507)) | (1L << (SUBTYPE - 507)) | (1L << (SUMMARY - 507)) | (1L << (SUPERUSER - 507)) | (1L << (TIMING - 507)) | (1L << (TYPMOD_IN - 507)) | (1L << (TYPMOD_OUT - 507)) | (1L << (UNSAFE - 507)) | (1L << (USAGE - 507)) | (1L << (VARIABLE - 507)) | (1L << (YAML - 507)) | (1L << (ALIAS - 507)) | (1L << (ASSERT - 507)) | (1L << (CONSTANT - 507)) | (1L << (DATATYPE - 507)) | (1L << (DEBUG - 507)) | (1L << (DETAIL - 507)) | (1L << (DIAGNOSTICS - 507)) | (1L << (ELSEIF - 507)) | (1L << (ELSIF - 507)) | (1L << (ERRCODE - 507)) | (1L << (EXIT - 507)) | (1L << (EXCEPTION - 507)) | (1L << (FOREACH - 507)) | (1L << (GET - 507)) | (1L << (HINT - 507)) | (1L << (INFO - 507)) | (1L << (LOG - 507)) | (1L << (LOOP - 507)) | (1L << (MESSAGE - 507)) | (1L << (NOTICE - 507)) | (1L << (OPEN - 507)) | (1L << (PERFORM - 507)) | (1L << (QUERY - 507)) | (1L << (RAISE - 507)) | (1L << (RECORD - 507)) | (1L << (RETURN - 507)) | (1L << (REVERSE - 507)) | (1L << (ROWTYPE - 507)) | (1L << (SLICE - 507)))) != 0) || ((((_la - 571)) & ~0x3f) == 0 && ((1L << (_la - 571)) & ((1L << (SQLSTATE - 571)) | (1L << (STACKED - 571)) | (1L << (WARNING - 571)) | (1L << (WHILE - 571)) | (1L << (Identifier - 571)) | (1L << (QuotedIdentifier - 571)))) != 0)) {
					{
					setState(959);
					table_cols_list();
					}
				}

				}
				break;
			case MOVE:
			case FETCH:
				enterOuterAlt(_localctx, 3);
				{
				setState(962);
				_la = _input.LA(1);
				if ( !(_la==MOVE || _la==FETCH) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(964);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,37,_ctx) ) {
				case 1:
					{
					setState(963);
					fetch_move_direction();
					}
					break;
				}
				setState(967);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(966);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(969);
				identifier();
				}
				break;
			case CLOSE:
				enterOuterAlt(_localctx, 4);
				{
				setState(970);
				match(CLOSE);
				setState(973);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BY:
				case CACHE:
				case CALL:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COLUMNS:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONFLICT:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CUBE:
				case CURRENT:
				case CURSOR:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DEPENDS:
				case DETACH:
				case DICTIONARY:
				case DISABLE:
				case DISCARD:
				case DOCUMENT:
				case DOMAIN:
				case DOUBLE:
				case DROP:
				case EACH:
				case ENABLE:
				case ENCODING:
				case ENCRYPTED:
				case ENUM:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GENERATED:
				case GLOBAL:
				case GRANTED:
				case GROUPS:
				case HANDLER:
				case HEADER:
				case HOLD:
				case HOUR:
				case IDENTITY:
				case IF:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT:
				case IMPORT:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCKED:
				case LOGGED:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case METHOD:
				case MINUTE:
				case MINVALUE:
				case MODE:
				case MONTH:
				case MOVE:
				case NAME:
				case NAMES:
				case NEW:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS:
				case OBJECT:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDINALITY:
				case OTHERS:
				case OVER:
				case OVERRIDING:
				case OWNED:
				case OWNER:
				case PARALLEL:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case POLICY:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROCEDURES:
				case PROGRAM:
				case PUBLICATION:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINES:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMAS:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SKIP_:
				case SNAPSHOT:
				case SQL:
				case STABLE:
				case STANDALONE:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STORED:
				case STRICT:
				case STRIP:
				case SUBSCRIPTION:
				case SUPPORT:
				case SYSID:
				case SYSTEM:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT:
				case TIES:
				case TRANSACTION:
				case TRANSFORM:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case TYPES:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VALUE:
				case VARYING:
				case VERSION:
				case VIEW:
				case VIEWS:
				case VOLATILE:
				case WHITESPACE:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML:
				case YEAR:
				case YES:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN:
				case CHAR:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL:
				case EXISTS:
				case EXTRACT:
				case FLOAT:
				case GREATEST:
				case GROUPING:
				case INOUT:
				case INT:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OUT:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case ALIGNMENT:
				case BASETYPE:
				case BUFFERS:
				case BYPASSRLS:
				case CANONICAL:
				case CATEGORY:
				case COLLATABLE:
				case COMBINEFUNC:
				case COMMUTATOR:
				case CONNECT:
				case COSTS:
				case CREATEDB:
				case CREATEROLE:
				case DESERIALFUNC:
				case DETERMINISTIC:
				case DISABLE_PAGE_SKIPPING:
				case ELEMENT:
				case EXTENDED:
				case FINALFUNC:
				case FINALFUNC_EXTRA:
				case FINALFUNC_MODIFY:
				case FORCE_NOT_NULL:
				case FORCE_NULL:
				case FORCE_QUOTE:
				case FORMAT:
				case GETTOKEN:
				case HASH:
				case HASHES:
				case HEADLINE:
				case HYPOTHETICAL:
				case INDEX_CLEANUP:
				case INIT:
				case INITCOND:
				case INTERNALLENGTH:
				case JSON:
				case LC_COLLATE:
				case LC_CTYPE:
				case LEFTARG:
				case LEXIZE:
				case LEXTYPES:
				case LIST:
				case LOCALE:
				case LOGIN:
				case MAIN:
				case MERGES:
				case MFINALFUNC:
				case MFINALFUNC_EXTRA:
				case MFINALFUNC_MODIFY:
				case MINITCOND:
				case MINVFUNC:
				case MODULUS:
				case MSFUNC:
				case MSSPACE:
				case MSTYPE:
				case NEGATOR:
				case NOBYPASSRLS:
				case NOCREATEDB:
				case NOCREATEROLE:
				case NOINHERIT:
				case NOLOGIN:
				case NOREPLICATION:
				case NOSUPERUSER:
				case OUTPUT:
				case PASSEDBYVALUE:
				case PATH:
				case PERMISSIVE:
				case PLAIN:
				case PREFERRED:
				case PROVIDER:
				case READ_ONLY:
				case READ_WRITE:
				case RECEIVE:
				case REMAINDER:
				case REPLICATION:
				case RESTRICTED:
				case RESTRICTIVE:
				case RIGHTARG:
				case SAFE:
				case SEND:
				case SERIALFUNC:
				case SETTINGS:
				case SFUNC:
				case SHAREABLE:
				case SKIP_LOCKED:
				case SORTOP:
				case SSPACE:
				case STYPE:
				case SUBTYPE_DIFF:
				case SUBTYPE_OPCLASS:
				case SUBTYPE:
				case SUMMARY:
				case SUPERUSER:
				case TIMING:
				case TYPMOD_IN:
				case TYPMOD_OUT:
				case UNSAFE:
				case USAGE:
				case VARIABLE:
				case YAML:
				case ALIAS:
				case ASSERT:
				case CONSTANT:
				case DATATYPE:
				case DEBUG:
				case DETAIL:
				case DIAGNOSTICS:
				case ELSEIF:
				case ELSIF:
				case ERRCODE:
				case EXIT:
				case EXCEPTION:
				case FOREACH:
				case GET:
				case HINT:
				case INFO:
				case LOG:
				case LOOP:
				case MESSAGE:
				case NOTICE:
				case OPEN:
				case PERFORM:
				case QUERY:
				case RAISE:
				case RECORD:
				case RETURN:
				case REVERSE:
				case ROWTYPE:
				case SLICE:
				case SQLSTATE:
				case STACKED:
				case WARNING:
				case WHILE:
				case Identifier:
				case QuotedIdentifier:
					{
					setState(971);
					identifier();
					}
					break;
				case ALL:
					{
					setState(972);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case CALL:
				enterOuterAlt(_localctx, 5);
				{
				setState(975);
				match(CALL);
				setState(976);
				function_call();
				}
				break;
			case DISCARD:
				enterOuterAlt(_localctx, 6);
				{
				setState(977);
				match(DISCARD);
				setState(978);
				_la = _input.LA(1);
				if ( !(_la==PLANS || _la==SEQUENCES || _la==TEMP || _la==TEMPORARY || _la==ALL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case DECLARE:
				enterOuterAlt(_localctx, 7);
				{
				setState(979);
				declare_statement();
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 8);
				{
				setState(980);
				execute_statement();
				}
				break;
			case EXPLAIN:
				enterOuterAlt(_localctx, 9);
				{
				setState(981);
				explain_statement();
				}
				break;
			case SHOW:
				enterOuterAlt(_localctx, 10);
				{
				setState(982);
				show_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Additional_statementContext extends ParserRuleContext {
		public Anonymous_blockContext anonymous_block() {
			return getRuleContext(Anonymous_blockContext.class,0);
		}
		public TerminalNode LISTEN() { return getToken(PLpgSQLParser.LISTEN, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode UNLISTEN() { return getToken(PLpgSQLParser.UNLISTEN, 0); }
		public TerminalNode MULTIPLY() { return getToken(PLpgSQLParser.MULTIPLY, 0); }
		public TerminalNode ANALYZE() { return getToken(PLpgSQLParser.ANALYZE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public List<Analyze_modeContext> analyze_mode() {
			return getRuleContexts(Analyze_modeContext.class);
		}
		public Analyze_modeContext analyze_mode(int i) {
			return getRuleContext(Analyze_modeContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public TerminalNode VERBOSE() { return getToken(PLpgSQLParser.VERBOSE, 0); }
		public Table_cols_listContext table_cols_list() {
			return getRuleContext(Table_cols_listContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public TerminalNode CLUSTER() { return getToken(PLpgSQLParser.CLUSTER, 0); }
		public TerminalNode ON() { return getToken(PLpgSQLParser.ON, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PLpgSQLParser.USING, 0); }
		public TerminalNode CHECKPOINT() { return getToken(PLpgSQLParser.CHECKPOINT, 0); }
		public TerminalNode LOAD() { return getToken(PLpgSQLParser.LOAD, 0); }
		public TerminalNode Character_String_Literal() { return getToken(PLpgSQLParser.Character_String_Literal, 0); }
		public TerminalNode DEALLOCATE() { return getToken(PLpgSQLParser.DEALLOCATE, 0); }
		public TerminalNode ALL() { return getToken(PLpgSQLParser.ALL, 0); }
		public TerminalNode PREPARE() { return getToken(PLpgSQLParser.PREPARE, 0); }
		public TerminalNode REINDEX() { return getToken(PLpgSQLParser.REINDEX, 0); }
		public TerminalNode INDEX() { return getToken(PLpgSQLParser.INDEX, 0); }
		public TerminalNode TABLE() { return getToken(PLpgSQLParser.TABLE, 0); }
		public TerminalNode SCHEMA() { return getToken(PLpgSQLParser.SCHEMA, 0); }
		public TerminalNode DATABASE() { return getToken(PLpgSQLParser.DATABASE, 0); }
		public TerminalNode SYSTEM() { return getToken(PLpgSQLParser.SYSTEM, 0); }
		public TerminalNode CONCURRENTLY() { return getToken(PLpgSQLParser.CONCURRENTLY, 0); }
		public TerminalNode RESET() { return getToken(PLpgSQLParser.RESET, 0); }
		public TerminalNode TIME() { return getToken(PLpgSQLParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PLpgSQLParser.ZONE, 0); }
		public TerminalNode SESSION() { return getToken(PLpgSQLParser.SESSION, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(PLpgSQLParser.AUTHORIZATION, 0); }
		public TerminalNode DOT() { return getToken(PLpgSQLParser.DOT, 0); }
		public TerminalNode REFRESH() { return getToken(PLpgSQLParser.REFRESH, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PLpgSQLParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(PLpgSQLParser.VIEW, 0); }
		public TerminalNode WITH() { return getToken(PLpgSQLParser.WITH, 0); }
		public TerminalNode DATA() { return getToken(PLpgSQLParser.DATA, 0); }
		public TerminalNode NO() { return getToken(PLpgSQLParser.NO, 0); }
		public TerminalNode AS() { return getToken(PLpgSQLParser.AS, 0); }
		public Data_statementContext data_statement() {
			return getRuleContext(Data_statementContext.class,0);
		}
		public List<Data_typeContext> data_type() {
			return getRuleContexts(Data_typeContext.class);
		}
		public Data_typeContext data_type(int i) {
			return getRuleContext(Data_typeContext.class,i);
		}
		public TerminalNode REASSIGN() { return getToken(PLpgSQLParser.REASSIGN, 0); }
		public TerminalNode OWNED() { return getToken(PLpgSQLParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(PLpgSQLParser.BY, 0); }
		public List<User_nameContext> user_name() {
			return getRuleContexts(User_nameContext.class);
		}
		public User_nameContext user_name(int i) {
			return getRuleContext(User_nameContext.class,i);
		}
		public TerminalNode TO() { return getToken(PLpgSQLParser.TO, 0); }
		public Copy_statementContext copy_statement() {
			return getRuleContext(Copy_statementContext.class,0);
		}
		public Truncate_stmtContext truncate_stmt() {
			return getRuleContext(Truncate_stmtContext.class,0);
		}
		public Notify_stmtContext notify_stmt() {
			return getRuleContext(Notify_stmtContext.class,0);
		}
		public Additional_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_additional_statement; }
	}

	public final Additional_statementContext additional_statement() throws RecognitionException {
		Additional_statementContext _localctx = new Additional_statementContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_additional_statement);
		int _la;
		try {
			setState(1111);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DO:
				enterOuterAlt(_localctx, 1);
				{
				setState(985);
				anonymous_block();
				}
				break;
			case LISTEN:
				enterOuterAlt(_localctx, 2);
				{
				setState(986);
				match(LISTEN);
				setState(987);
				identifier();
				}
				break;
			case UNLISTEN:
				enterOuterAlt(_localctx, 3);
				{
				setState(988);
				match(UNLISTEN);
				setState(991);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BY:
				case CACHE:
				case CALL:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COLUMNS:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONFLICT:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CUBE:
				case CURRENT:
				case CURSOR:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DEPENDS:
				case DETACH:
				case DICTIONARY:
				case DISABLE:
				case DISCARD:
				case DOCUMENT:
				case DOMAIN:
				case DOUBLE:
				case DROP:
				case EACH:
				case ENABLE:
				case ENCODING:
				case ENCRYPTED:
				case ENUM:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GENERATED:
				case GLOBAL:
				case GRANTED:
				case GROUPS:
				case HANDLER:
				case HEADER:
				case HOLD:
				case HOUR:
				case IDENTITY:
				case IF:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT:
				case IMPORT:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCKED:
				case LOGGED:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case METHOD:
				case MINUTE:
				case MINVALUE:
				case MODE:
				case MONTH:
				case MOVE:
				case NAME:
				case NAMES:
				case NEW:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS:
				case OBJECT:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDINALITY:
				case OTHERS:
				case OVER:
				case OVERRIDING:
				case OWNED:
				case OWNER:
				case PARALLEL:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case POLICY:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROCEDURES:
				case PROGRAM:
				case PUBLICATION:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINES:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMAS:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SKIP_:
				case SNAPSHOT:
				case SQL:
				case STABLE:
				case STANDALONE:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STORED:
				case STRICT:
				case STRIP:
				case SUBSCRIPTION:
				case SUPPORT:
				case SYSID:
				case SYSTEM:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT:
				case TIES:
				case TRANSACTION:
				case TRANSFORM:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case TYPES:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VALUE:
				case VARYING:
				case VERSION:
				case VIEW:
				case VIEWS:
				case VOLATILE:
				case WHITESPACE:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML:
				case YEAR:
				case YES:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN:
				case CHAR:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL:
				case EXISTS:
				case EXTRACT:
				case FLOAT:
				case GREATEST:
				case GROUPING:
				case INOUT:
				case INT:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OUT:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case ALIGNMENT:
				case BASETYPE:
				case BUFFERS:
				case BYPASSRLS:
				case CANONICAL:
				case CATEGORY:
				case COLLATABLE:
				case COMBINEFUNC:
				case COMMUTATOR:
				case CONNECT:
				case COSTS:
				case CREATEDB:
				case CREATEROLE:
				case DESERIALFUNC:
				case DETERMINISTIC:
				case DISABLE_PAGE_SKIPPING:
				case ELEMENT:
				case EXTENDED:
				case FINALFUNC:
				case FINALFUNC_EXTRA:
				case FINALFUNC_MODIFY:
				case FORCE_NOT_NULL:
				case FORCE_NULL:
				case FORCE_QUOTE:
				case FORMAT:
				case GETTOKEN:
				case HASH:
				case HASHES:
				case HEADLINE:
				case HYPOTHETICAL:
				case INDEX_CLEANUP:
				case INIT:
				case INITCOND:
				case INTERNALLENGTH:
				case JSON:
				case LC_COLLATE:
				case LC_CTYPE:
				case LEFTARG:
				case LEXIZE:
				case LEXTYPES:
				case LIST:
				case LOCALE:
				case LOGIN:
				case MAIN:
				case MERGES:
				case MFINALFUNC:
				case MFINALFUNC_EXTRA:
				case MFINALFUNC_MODIFY:
				case MINITCOND:
				case MINVFUNC:
				case MODULUS:
				case MSFUNC:
				case MSSPACE:
				case MSTYPE:
				case NEGATOR:
				case NOBYPASSRLS:
				case NOCREATEDB:
				case NOCREATEROLE:
				case NOINHERIT:
				case NOLOGIN:
				case NOREPLICATION:
				case NOSUPERUSER:
				case OUTPUT:
				case PASSEDBYVALUE:
				case PATH:
				case PERMISSIVE:
				case PLAIN:
				case PREFERRED:
				case PROVIDER:
				case READ_ONLY:
				case READ_WRITE:
				case RECEIVE:
				case REMAINDER:
				case REPLICATION:
				case RESTRICTED:
				case RESTRICTIVE:
				case RIGHTARG:
				case SAFE:
				case SEND:
				case SERIALFUNC:
				case SETTINGS:
				case SFUNC:
				case SHAREABLE:
				case SKIP_LOCKED:
				case SORTOP:
				case SSPACE:
				case STYPE:
				case SUBTYPE_DIFF:
				case SUBTYPE_OPCLASS:
				case SUBTYPE:
				case SUMMARY:
				case SUPERUSER:
				case TIMING:
				case TYPMOD_IN:
				case TYPMOD_OUT:
				case UNSAFE:
				case USAGE:
				case VARIABLE:
				case YAML:
				case ALIAS:
				case ASSERT:
				case CONSTANT:
				case DATATYPE:
				case DEBUG:
				case DETAIL:
				case DIAGNOSTICS:
				case ELSEIF:
				case ELSIF:
				case ERRCODE:
				case EXIT:
				case EXCEPTION:
				case FOREACH:
				case GET:
				case HINT:
				case INFO:
				case LOG:
				case LOOP:
				case MESSAGE:
				case NOTICE:
				case OPEN:
				case PERFORM:
				case QUERY:
				case RAISE:
				case RECORD:
				case RETURN:
				case REVERSE:
				case ROWTYPE:
				case SLICE:
				case SQLSTATE:
				case STACKED:
				case WARNING:
				case WHILE:
				case Identifier:
				case QuotedIdentifier:
					{
					setState(989);
					identifier();
					}
					break;
				case MULTIPLY:
					{
					setState(990);
					match(MULTIPLY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case ANALYZE:
				enterOuterAlt(_localctx, 4);
				{
				setState(993);
				match(ANALYZE);
				setState(1006);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LEFT_PAREN:
					{
					setState(994);
					match(LEFT_PAREN);
					setState(995);
					analyze_mode();
					setState(1000);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(996);
						match(COMMA);
						setState(997);
						analyze_mode();
						}
						}
						setState(1002);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1003);
					match(RIGHT_PAREN);
					}
					break;
				case VERBOSE:
					{
					setState(1005);
					match(VERBOSE);
					}
					break;
				case EOF:
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BY:
				case CACHE:
				case CALL:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COLUMNS:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONFLICT:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CUBE:
				case CURRENT:
				case CURSOR:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DEPENDS:
				case DETACH:
				case DICTIONARY:
				case DISABLE:
				case DISCARD:
				case DOCUMENT:
				case DOMAIN:
				case DOUBLE:
				case DROP:
				case EACH:
				case ENABLE:
				case ENCODING:
				case ENCRYPTED:
				case ENUM:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GENERATED:
				case GLOBAL:
				case GRANTED:
				case GROUPS:
				case HANDLER:
				case HEADER:
				case HOLD:
				case HOUR:
				case IDENTITY:
				case IF:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT:
				case IMPORT:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCKED:
				case LOGGED:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case METHOD:
				case MINUTE:
				case MINVALUE:
				case MODE:
				case MONTH:
				case MOVE:
				case NAME:
				case NAMES:
				case NEW:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS:
				case OBJECT:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDINALITY:
				case OTHERS:
				case OVER:
				case OVERRIDING:
				case OWNED:
				case OWNER:
				case PARALLEL:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case POLICY:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROCEDURES:
				case PROGRAM:
				case PUBLICATION:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINES:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMAS:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SKIP_:
				case SNAPSHOT:
				case SQL:
				case STABLE:
				case STANDALONE:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STORED:
				case STRICT:
				case STRIP:
				case SUBSCRIPTION:
				case SUPPORT:
				case SYSID:
				case SYSTEM:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT:
				case TIES:
				case TRANSACTION:
				case TRANSFORM:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case TYPES:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VALUE:
				case VARYING:
				case VERSION:
				case VIEW:
				case VIEWS:
				case VOLATILE:
				case WHITESPACE:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML:
				case YEAR:
				case YES:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN:
				case CHAR:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL:
				case EXISTS:
				case EXTRACT:
				case FLOAT:
				case GREATEST:
				case GROUPING:
				case INOUT:
				case INT:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OUT:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case ALIGNMENT:
				case BASETYPE:
				case BUFFERS:
				case BYPASSRLS:
				case CANONICAL:
				case CATEGORY:
				case COLLATABLE:
				case COMBINEFUNC:
				case COMMUTATOR:
				case CONNECT:
				case COSTS:
				case CREATEDB:
				case CREATEROLE:
				case DESERIALFUNC:
				case DETERMINISTIC:
				case DISABLE_PAGE_SKIPPING:
				case ELEMENT:
				case EXTENDED:
				case FINALFUNC:
				case FINALFUNC_EXTRA:
				case FINALFUNC_MODIFY:
				case FORCE_NOT_NULL:
				case FORCE_NULL:
				case FORCE_QUOTE:
				case FORMAT:
				case GETTOKEN:
				case HASH:
				case HASHES:
				case HEADLINE:
				case HYPOTHETICAL:
				case INDEX_CLEANUP:
				case INIT:
				case INITCOND:
				case INTERNALLENGTH:
				case JSON:
				case LC_COLLATE:
				case LC_CTYPE:
				case LEFTARG:
				case LEXIZE:
				case LEXTYPES:
				case LIST:
				case LOCALE:
				case LOGIN:
				case MAIN:
				case MERGES:
				case MFINALFUNC:
				case MFINALFUNC_EXTRA:
				case MFINALFUNC_MODIFY:
				case MINITCOND:
				case MINVFUNC:
				case MODULUS:
				case MSFUNC:
				case MSSPACE:
				case MSTYPE:
				case NEGATOR:
				case NOBYPASSRLS:
				case NOCREATEDB:
				case NOCREATEROLE:
				case NOINHERIT:
				case NOLOGIN:
				case NOREPLICATION:
				case NOSUPERUSER:
				case OUTPUT:
				case PASSEDBYVALUE:
				case PATH:
				case PERMISSIVE:
				case PLAIN:
				case PREFERRED:
				case PROVIDER:
				case READ_ONLY:
				case READ_WRITE:
				case RECEIVE:
				case REMAINDER:
				case REPLICATION:
				case RESTRICTED:
				case RESTRICTIVE:
				case RIGHTARG:
				case SAFE:
				case SEND:
				case SERIALFUNC:
				case SETTINGS:
				case SFUNC:
				case SHAREABLE:
				case SKIP_LOCKED:
				case SORTOP:
				case SSPACE:
				case STYPE:
				case SUBTYPE_DIFF:
				case SUBTYPE_OPCLASS:
				case SUBTYPE:
				case SUMMARY:
				case SUPERUSER:
				case TIMING:
				case TYPMOD_IN:
				case TYPMOD_OUT:
				case UNSAFE:
				case USAGE:
				case VARIABLE:
				case YAML:
				case ALIAS:
				case ASSERT:
				case CONSTANT:
				case DATATYPE:
				case DEBUG:
				case DETAIL:
				case DIAGNOSTICS:
				case ELSEIF:
				case ELSIF:
				case ERRCODE:
				case EXIT:
				case EXCEPTION:
				case FOREACH:
				case GET:
				case HINT:
				case INFO:
				case LOG:
				case LOOP:
				case MESSAGE:
				case NOTICE:
				case OPEN:
				case PERFORM:
				case QUERY:
				case RAISE:
				case RECORD:
				case RETURN:
				case REVERSE:
				case ROWTYPE:
				case SLICE:
				case SQLSTATE:
				case STACKED:
				case WARNING:
				case WHILE:
				case SEMI_COLON:
				case Identifier:
				case QuotedIdentifier:
					break;
				default:
					break;
				}
				setState(1009);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATTACH) | (1L << ATTRIBUTE) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BY) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG) | (1L << CHAIN) | (1L << CHARACTERISTICS) | (1L << CHECKPOINT) | (1L << CLASS) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMENTS) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONFIGURATION) | (1L << CONFLICT) | (1L << CONNECTION) | (1L << CONSTRAINTS) | (1L << CONTENT) | (1L << CONTINUE) | (1L << CONVERSION) | (1L << COPY) | (1L << COST) | (1L << CSV) | (1L << CUBE) | (1L << CURRENT) | (1L << CURSOR) | (1L << CYCLE) | (1L << DATA) | (1L << DATABASE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DEFAULTS) | (1L << DEFERRED) | (1L << DEFINER) | (1L << DELETE) | (1L << DELIMITER) | (1L << DELIMITERS) | (1L << DEPENDS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DETACH - 64)) | (1L << (DICTIONARY - 64)) | (1L << (DISABLE - 64)) | (1L << (DISCARD - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOMAIN - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (EACH - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTED - 64)) | (1L << (ENUM - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVENT - 64)) | (1L << (EXCLUDE - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXCLUSIVE - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTENSION - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FAMILY - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORCE - 64)) | (1L << (FORWARD - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GENERATED - 64)) | (1L << (GLOBAL - 64)) | (1L << (GRANTED - 64)) | (1L << (GROUPS - 64)) | (1L << (HANDLER - 64)) | (1L << (HEADER - 64)) | (1L << (HOLD - 64)) | (1L << (HOUR - 64)) | (1L << (IDENTITY - 64)) | (1L << (IF - 64)) | (1L << (IMMEDIATE - 64)) | (1L << (IMMUTABLE - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPORT - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INCREMENT - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXES - 64)) | (1L << (INHERIT - 64)) | (1L << (INHERITS - 64)) | (1L << (INLINE - 64)) | (1L << (INPUT - 64)) | (1L << (INSENSITIVE - 64)) | (1L << (INSERT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INVOKER - 64)) | (1L << (ISOLATION - 64)) | (1L << (KEY - 64)) | (1L << (LABEL - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LARGE - 64)) | (1L << (LAST - 64)) | (1L << (LEAKPROOF - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LEVEL - 128)) | (1L << (LISTEN - 128)) | (1L << (LOAD - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCATION - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKED - 128)) | (1L << (LOGGED - 128)) | (1L << (MAPPING - 128)) | (1L << (MATCH - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MAXVALUE - 128)) | (1L << (METHOD - 128)) | (1L << (MINUTE - 128)) | (1L << (MINVALUE - 128)) | (1L << (MODE - 128)) | (1L << (MONTH - 128)) | (1L << (MOVE - 128)) | (1L << (NAME - 128)) | (1L << (NAMES - 128)) | (1L << (NEW - 128)) | (1L << (NEXT - 128)) | (1L << (NO - 128)) | (1L << (NOTHING - 128)) | (1L << (NOTIFY - 128)) | (1L << (NOWAIT - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFF - 128)) | (1L << (OIDS - 128)) | (1L << (OLD - 128)) | (1L << (OPERATOR - 128)) | (1L << (OPTION - 128)) | (1L << (OPTIONS - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OTHERS - 128)) | (1L << (OVER - 128)) | (1L << (OVERRIDING - 128)) | (1L << (OWNED - 128)) | (1L << (OWNER - 128)) | (1L << (PARALLEL - 128)) | (1L << (PARSER - 128)) | (1L << (PARTIAL - 128)) | (1L << (PARTITION - 128)) | (1L << (PASSING - 128)) | (1L << (PASSWORD - 128)) | (1L << (PLANS - 128)) | (1L << (POLICY - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PREPARED - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRIOR - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROCEDURAL - 128)) | (1L << (PROCEDURE - 128)) | (1L << (PROCEDURES - 128)) | (1L << (PROGRAM - 128)) | (1L << (PUBLICATION - 128)) | (1L << (QUOTE - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (REASSIGN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (RECHECK - 192)) | (1L << (RECURSIVE - 192)) | (1L << (REF - 192)) | (1L << (REFERENCING - 192)) | (1L << (REFRESH - 192)) | (1L << (REINDEX - 192)) | (1L << (RELATIVE - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (REPLICA - 192)) | (1L << (RESET - 192)) | (1L << (RESTART - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUTINE - 192)) | (1L << (ROUTINES - 192)) | (1L << (ROWS - 192)) | (1L << (RULE - 192)) | (1L << (SAVEPOINT - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SCROLL - 192)) | (1L << (SEARCH - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEQUENCE - 192)) | (1L << (SEQUENCES - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SERVER - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHARE - 192)) | (1L << (SHOW - 192)) | (1L << (SIMPLE - 192)) | (1L << (SKIP_ - 192)) | (1L << (SNAPSHOT - 192)) | (1L << (SQL - 192)) | (1L << (STABLE - 192)) | (1L << (STANDALONE - 192)) | (1L << (START - 192)) | (1L << (STATEMENT - 192)) | (1L << (STATISTICS - 192)) | (1L << (STDIN - 192)) | (1L << (STDOUT - 192)) | (1L << (STORAGE - 192)) | (1L << (STORED - 192)) | (1L << (STRICT - 192)) | (1L << (STRIP - 192)) | (1L << (SUBSCRIPTION - 192)) | (1L << (SUPPORT - 192)) | (1L << (SYSID - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESPACE - 192)) | (1L << (TEMP - 192)) | (1L << (TEMPLATE - 192)) | (1L << (TEMPORARY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TEXT - 256)) | (1L << (TIES - 256)) | (1L << (TRANSACTION - 256)) | (1L << (TRANSFORM - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TRUSTED - 256)) | (1L << (TYPE - 256)) | (1L << (TYPES - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNENCRYPTED - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNLISTEN - 256)) | (1L << (UNLOGGED - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (VACUUM - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALIDATOR - 256)) | (1L << (VALUE - 256)) | (1L << (VARYING - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (VIEWS - 256)) | (1L << (VOLATILE - 256)) | (1L << (WHITESPACE - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (XML - 256)) | (1L << (YEAR - 256)) | (1L << (YES - 256)) | (1L << (ZONE - 256)) | (1L << (BETWEEN - 256)) | (1L << (BIGINT - 256)) | (1L << (BIT - 256)) | (1L << (BOOLEAN - 256)) | (1L << (CHAR - 256)) | (1L << (CHARACTER - 256)) | (1L << (COALESCE - 256)) | (1L << (DEC - 256)) | (1L << (DECIMAL - 256)) | (1L << (EXISTS - 256)) | (1L << (EXTRACT - 256)) | (1L << (FLOAT - 256)) | (1L << (GREATEST - 256)) | (1L << (GROUPING - 256)) | (1L << (INOUT - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERVAL - 256)) | (1L << (LEAST - 256)) | (1L << (NATIONAL - 256)) | (1L << (NCHAR - 256)) | (1L << (NONE - 256)) | (1L << (NULLIF - 256)) | (1L << (NUMERIC - 256)) | (1L << (OUT - 256)) | (1L << (OVERLAY - 256)) | (1L << (POSITION - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRECISION - 320)) | (1L << (REAL - 320)) | (1L << (ROW - 320)) | (1L << (SETOF - 320)) | (1L << (SMALLINT - 320)) | (1L << (SUBSTRING - 320)) | (1L << (TIME - 320)) | (1L << (TIMESTAMP - 320)) | (1L << (TREAT - 320)) | (1L << (TRIM - 320)) | (1L << (VALUES - 320)) | (1L << (VARCHAR - 320)) | (1L << (XMLATTRIBUTES - 320)) | (1L << (XMLCONCAT - 320)) | (1L << (XMLELEMENT - 320)) | (1L << (XMLEXISTS - 320)) | (1L << (XMLFOREST - 320)) | (1L << (XMLNAMESPACES - 320)) | (1L << (XMLPARSE - 320)) | (1L << (XMLPI - 320)) | (1L << (XMLROOT - 320)) | (1L << (XMLSERIALIZE - 320)) | (1L << (XMLTABLE - 320)))) != 0) || ((((_la - 443)) & ~0x3f) == 0 && ((1L << (_la - 443)) & ((1L << (ALIGNMENT - 443)) | (1L << (BASETYPE - 443)) | (1L << (BUFFERS - 443)) | (1L << (BYPASSRLS - 443)) | (1L << (CANONICAL - 443)) | (1L << (CATEGORY - 443)) | (1L << (COLLATABLE - 443)) | (1L << (COMBINEFUNC - 443)) | (1L << (COMMUTATOR - 443)) | (1L << (CONNECT - 443)) | (1L << (COSTS - 443)) | (1L << (CREATEDB - 443)) | (1L << (CREATEROLE - 443)) | (1L << (DESERIALFUNC - 443)) | (1L << (DETERMINISTIC - 443)) | (1L << (DISABLE_PAGE_SKIPPING - 443)) | (1L << (ELEMENT - 443)) | (1L << (EXTENDED - 443)) | (1L << (FINALFUNC - 443)) | (1L << (FINALFUNC_EXTRA - 443)) | (1L << (FINALFUNC_MODIFY - 443)) | (1L << (FORCE_NOT_NULL - 443)) | (1L << (FORCE_NULL - 443)) | (1L << (FORCE_QUOTE - 443)) | (1L << (FORMAT - 443)) | (1L << (GETTOKEN - 443)) | (1L << (HASH - 443)) | (1L << (HASHES - 443)) | (1L << (HEADLINE - 443)) | (1L << (HYPOTHETICAL - 443)) | (1L << (INDEX_CLEANUP - 443)) | (1L << (INIT - 443)) | (1L << (INITCOND - 443)) | (1L << (INTERNALLENGTH - 443)) | (1L << (JSON - 443)) | (1L << (LC_COLLATE - 443)) | (1L << (LC_CTYPE - 443)) | (1L << (LEFTARG - 443)) | (1L << (LEXIZE - 443)) | (1L << (LEXTYPES - 443)) | (1L << (LIST - 443)) | (1L << (LOCALE - 443)) | (1L << (LOGIN - 443)) | (1L << (MAIN - 443)) | (1L << (MERGES - 443)) | (1L << (MFINALFUNC - 443)) | (1L << (MFINALFUNC_EXTRA - 443)) | (1L << (MFINALFUNC_MODIFY - 443)) | (1L << (MINITCOND - 443)) | (1L << (MINVFUNC - 443)) | (1L << (MODULUS - 443)) | (1L << (MSFUNC - 443)) | (1L << (MSSPACE - 443)) | (1L << (MSTYPE - 443)) | (1L << (NEGATOR - 443)) | (1L << (NOBYPASSRLS - 443)) | (1L << (NOCREATEDB - 443)) | (1L << (NOCREATEROLE - 443)) | (1L << (NOINHERIT - 443)) | (1L << (NOLOGIN - 443)) | (1L << (NOREPLICATION - 443)) | (1L << (NOSUPERUSER - 443)) | (1L << (OUTPUT - 443)) | (1L << (PASSEDBYVALUE - 443)))) != 0) || ((((_la - 507)) & ~0x3f) == 0 && ((1L << (_la - 507)) & ((1L << (PATH - 507)) | (1L << (PERMISSIVE - 507)) | (1L << (PLAIN - 507)) | (1L << (PREFERRED - 507)) | (1L << (PROVIDER - 507)) | (1L << (READ_ONLY - 507)) | (1L << (READ_WRITE - 507)) | (1L << (RECEIVE - 507)) | (1L << (REMAINDER - 507)) | (1L << (REPLICATION - 507)) | (1L << (RESTRICTED - 507)) | (1L << (RESTRICTIVE - 507)) | (1L << (RIGHTARG - 507)) | (1L << (SAFE - 507)) | (1L << (SEND - 507)) | (1L << (SERIALFUNC - 507)) | (1L << (SETTINGS - 507)) | (1L << (SFUNC - 507)) | (1L << (SHAREABLE - 507)) | (1L << (SKIP_LOCKED - 507)) | (1L << (SORTOP - 507)) | (1L << (SSPACE - 507)) | (1L << (STYPE - 507)) | (1L << (SUBTYPE_DIFF - 507)) | (1L << (SUBTYPE_OPCLASS - 507)) | (1L << (SUBTYPE - 507)) | (1L << (SUMMARY - 507)) | (1L << (SUPERUSER - 507)) | (1L << (TIMING - 507)) | (1L << (TYPMOD_IN - 507)) | (1L << (TYPMOD_OUT - 507)) | (1L << (UNSAFE - 507)) | (1L << (USAGE - 507)) | (1L << (VARIABLE - 507)) | (1L << (YAML - 507)) | (1L << (ALIAS - 507)) | (1L << (ASSERT - 507)) | (1L << (CONSTANT - 507)) | (1L << (DATATYPE - 507)) | (1L << (DEBUG - 507)) | (1L << (DETAIL - 507)) | (1L << (DIAGNOSTICS - 507)) | (1L << (ELSEIF - 507)) | (1L << (ELSIF - 507)) | (1L << (ERRCODE - 507)) | (1L << (EXIT - 507)) | (1L << (EXCEPTION - 507)) | (1L << (FOREACH - 507)) | (1L << (GET - 507)) | (1L << (HINT - 507)) | (1L << (INFO - 507)) | (1L << (LOG - 507)) | (1L << (LOOP - 507)) | (1L << (MESSAGE - 507)) | (1L << (NOTICE - 507)) | (1L << (OPEN - 507)) | (1L << (PERFORM - 507)) | (1L << (QUERY - 507)) | (1L << (RAISE - 507)) | (1L << (RECORD - 507)) | (1L << (RETURN - 507)) | (1L << (REVERSE - 507)) | (1L << (ROWTYPE - 507)) | (1L << (SLICE - 507)))) != 0) || ((((_la - 571)) & ~0x3f) == 0 && ((1L << (_la - 571)) & ((1L << (SQLSTATE - 571)) | (1L << (STACKED - 571)) | (1L << (WARNING - 571)) | (1L << (WHILE - 571)) | (1L << (Identifier - 571)) | (1L << (QuotedIdentifier - 571)))) != 0)) {
					{
					setState(1008);
					table_cols_list();
					}
				}

				}
				break;
			case CLUSTER:
				enterOuterAlt(_localctx, 5);
				{
				setState(1011);
				match(CLUSTER);
				setState(1013);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VERBOSE) {
					{
					setState(1012);
					match(VERBOSE);
					}
				}

				setState(1024);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,47,_ctx) ) {
				case 1:
					{
					setState(1015);
					identifier();
					setState(1016);
					match(ON);
					setState(1017);
					schema_qualified_name();
					}
					break;
				case 2:
					{
					setState(1019);
					schema_qualified_name();
					setState(1022);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==USING) {
						{
						setState(1020);
						match(USING);
						setState(1021);
						identifier();
						}
					}

					}
					break;
				}
				}
				break;
			case CHECKPOINT:
				enterOuterAlt(_localctx, 6);
				{
				setState(1026);
				match(CHECKPOINT);
				}
				break;
			case LOAD:
				enterOuterAlt(_localctx, 7);
				{
				setState(1027);
				match(LOAD);
				setState(1028);
				match(Character_String_Literal);
				}
				break;
			case DEALLOCATE:
				enterOuterAlt(_localctx, 8);
				{
				setState(1029);
				match(DEALLOCATE);
				setState(1031);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,48,_ctx) ) {
				case 1:
					{
					setState(1030);
					match(PREPARE);
					}
					break;
				}
				setState(1035);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BY:
				case CACHE:
				case CALL:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COLUMNS:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONFLICT:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CUBE:
				case CURRENT:
				case CURSOR:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DEPENDS:
				case DETACH:
				case DICTIONARY:
				case DISABLE:
				case DISCARD:
				case DOCUMENT:
				case DOMAIN:
				case DOUBLE:
				case DROP:
				case EACH:
				case ENABLE:
				case ENCODING:
				case ENCRYPTED:
				case ENUM:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GENERATED:
				case GLOBAL:
				case GRANTED:
				case GROUPS:
				case HANDLER:
				case HEADER:
				case HOLD:
				case HOUR:
				case IDENTITY:
				case IF:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT:
				case IMPORT:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCKED:
				case LOGGED:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case METHOD:
				case MINUTE:
				case MINVALUE:
				case MODE:
				case MONTH:
				case MOVE:
				case NAME:
				case NAMES:
				case NEW:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS:
				case OBJECT:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDINALITY:
				case OTHERS:
				case OVER:
				case OVERRIDING:
				case OWNED:
				case OWNER:
				case PARALLEL:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case POLICY:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROCEDURES:
				case PROGRAM:
				case PUBLICATION:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINES:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMAS:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SKIP_:
				case SNAPSHOT:
				case SQL:
				case STABLE:
				case STANDALONE:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STORED:
				case STRICT:
				case STRIP:
				case SUBSCRIPTION:
				case SUPPORT:
				case SYSID:
				case SYSTEM:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT:
				case TIES:
				case TRANSACTION:
				case TRANSFORM:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case TYPES:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VALUE:
				case VARYING:
				case VERSION:
				case VIEW:
				case VIEWS:
				case VOLATILE:
				case WHITESPACE:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML:
				case YEAR:
				case YES:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN:
				case CHAR:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL:
				case EXISTS:
				case EXTRACT:
				case FLOAT:
				case GREATEST:
				case GROUPING:
				case INOUT:
				case INT:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OUT:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case ALIGNMENT:
				case BASETYPE:
				case BUFFERS:
				case BYPASSRLS:
				case CANONICAL:
				case CATEGORY:
				case COLLATABLE:
				case COMBINEFUNC:
				case COMMUTATOR:
				case CONNECT:
				case COSTS:
				case CREATEDB:
				case CREATEROLE:
				case DESERIALFUNC:
				case DETERMINISTIC:
				case DISABLE_PAGE_SKIPPING:
				case ELEMENT:
				case EXTENDED:
				case FINALFUNC:
				case FINALFUNC_EXTRA:
				case FINALFUNC_MODIFY:
				case FORCE_NOT_NULL:
				case FORCE_NULL:
				case FORCE_QUOTE:
				case FORMAT:
				case GETTOKEN:
				case HASH:
				case HASHES:
				case HEADLINE:
				case HYPOTHETICAL:
				case INDEX_CLEANUP:
				case INIT:
				case INITCOND:
				case INTERNALLENGTH:
				case JSON:
				case LC_COLLATE:
				case LC_CTYPE:
				case LEFTARG:
				case LEXIZE:
				case LEXTYPES:
				case LIST:
				case LOCALE:
				case LOGIN:
				case MAIN:
				case MERGES:
				case MFINALFUNC:
				case MFINALFUNC_EXTRA:
				case MFINALFUNC_MODIFY:
				case MINITCOND:
				case MINVFUNC:
				case MODULUS:
				case MSFUNC:
				case MSSPACE:
				case MSTYPE:
				case NEGATOR:
				case NOBYPASSRLS:
				case NOCREATEDB:
				case NOCREATEROLE:
				case NOINHERIT:
				case NOLOGIN:
				case NOREPLICATION:
				case NOSUPERUSER:
				case OUTPUT:
				case PASSEDBYVALUE:
				case PATH:
				case PERMISSIVE:
				case PLAIN:
				case PREFERRED:
				case PROVIDER:
				case READ_ONLY:
				case READ_WRITE:
				case RECEIVE:
				case REMAINDER:
				case REPLICATION:
				case RESTRICTED:
				case RESTRICTIVE:
				case RIGHTARG:
				case SAFE:
				case SEND:
				case SERIALFUNC:
				case SETTINGS:
				case SFUNC:
				case SHAREABLE:
				case SKIP_LOCKED:
				case SORTOP:
				case SSPACE:
				case STYPE:
				case SUBTYPE_DIFF:
				case SUBTYPE_OPCLASS:
				case SUBTYPE:
				case SUMMARY:
				case SUPERUSER:
				case TIMING:
				case TYPMOD_IN:
				case TYPMOD_OUT:
				case UNSAFE:
				case USAGE:
				case VARIABLE:
				case YAML:
				case ALIAS:
				case ASSERT:
				case CONSTANT:
				case DATATYPE:
				case DEBUG:
				case DETAIL:
				case DIAGNOSTICS:
				case ELSEIF:
				case ELSIF:
				case ERRCODE:
				case EXIT:
				case EXCEPTION:
				case FOREACH:
				case GET:
				case HINT:
				case INFO:
				case LOG:
				case LOOP:
				case MESSAGE:
				case NOTICE:
				case OPEN:
				case PERFORM:
				case QUERY:
				case RAISE:
				case RECORD:
				case RETURN:
				case REVERSE:
				case ROWTYPE:
				case SLICE:
				case SQLSTATE:
				case STACKED:
				case WARNING:
				case WHILE:
				case Identifier:
				case QuotedIdentifier:
					{
					setState(1033);
					identifier();
					}
					break;
				case ALL:
					{
					setState(1034);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case REINDEX:
				enterOuterAlt(_localctx, 9);
				{
				setState(1037);
				match(REINDEX);
				setState(1041);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(1038);
					match(LEFT_PAREN);
					setState(1039);
					match(VERBOSE);
					setState(1040);
					match(RIGHT_PAREN);
					}
				}

				setState(1043);
				_la = _input.LA(1);
				if ( !(_la==DATABASE || _la==INDEX || _la==SCHEMA || _la==SYSTEM || _la==TABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1045);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONCURRENTLY) {
					{
					setState(1044);
					match(CONCURRENTLY);
					}
				}

				setState(1047);
				schema_qualified_name();
				}
				break;
			case RESET:
				enterOuterAlt(_localctx, 10);
				{
				setState(1048);
				match(RESET);
				setState(1060);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,53,_ctx) ) {
				case 1:
					{
					setState(1052);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,52,_ctx) ) {
					case 1:
						{
						setState(1049);
						identifier();
						setState(1050);
						match(DOT);
						}
						break;
					}
					setState(1054);
					identifier();
					}
					break;
				case 2:
					{
					setState(1055);
					match(TIME);
					setState(1056);
					match(ZONE);
					}
					break;
				case 3:
					{
					setState(1057);
					match(SESSION);
					setState(1058);
					match(AUTHORIZATION);
					}
					break;
				case 4:
					{
					setState(1059);
					match(ALL);
					}
					break;
				}
				}
				break;
			case REFRESH:
				enterOuterAlt(_localctx, 11);
				{
				setState(1062);
				match(REFRESH);
				setState(1063);
				match(MATERIALIZED);
				setState(1064);
				match(VIEW);
				setState(1066);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONCURRENTLY) {
					{
					setState(1065);
					match(CONCURRENTLY);
					}
				}

				setState(1068);
				schema_qualified_name();
				setState(1074);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(1069);
					match(WITH);
					setState(1071);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NO) {
						{
						setState(1070);
						match(NO);
						}
					}

					setState(1073);
					match(DATA);
					}
				}

				}
				break;
			case PREPARE:
				enterOuterAlt(_localctx, 12);
				{
				setState(1076);
				match(PREPARE);
				setState(1077);
				identifier();
				setState(1089);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(1078);
					match(LEFT_PAREN);
					setState(1079);
					data_type();
					setState(1084);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1080);
						match(COMMA);
						setState(1081);
						data_type();
						}
						}
						setState(1086);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1087);
					match(RIGHT_PAREN);
					}
				}

				setState(1091);
				match(AS);
				setState(1092);
				data_statement();
				}
				break;
			case REASSIGN:
				enterOuterAlt(_localctx, 13);
				{
				setState(1094);
				match(REASSIGN);
				setState(1095);
				match(OWNED);
				setState(1096);
				match(BY);
				setState(1097);
				user_name();
				setState(1102);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1098);
					match(COMMA);
					setState(1099);
					user_name();
					}
					}
					setState(1104);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1105);
				match(TO);
				setState(1106);
				user_name();
				}
				break;
			case COPY:
				enterOuterAlt(_localctx, 14);
				{
				setState(1108);
				copy_statement();
				}
				break;
			case TRUNCATE:
				enterOuterAlt(_localctx, 15);
				{
				setState(1109);
				truncate_stmt();
				}
				break;
			case NOTIFY:
				enterOuterAlt(_localctx, 16);
				{
				setState(1110);
				notify_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explain_statementContext extends ParserRuleContext {
		public TerminalNode EXPLAIN() { return getToken(PLpgSQLParser.EXPLAIN, 0); }
		public Explain_queryContext explain_query() {
			return getRuleContext(Explain_queryContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public List<Explain_optionContext> explain_option() {
			return getRuleContexts(Explain_optionContext.class);
		}
		public Explain_optionContext explain_option(int i) {
			return getRuleContext(Explain_optionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public TerminalNode ANALYZE() { return getToken(PLpgSQLParser.ANALYZE, 0); }
		public TerminalNode VERBOSE() { return getToken(PLpgSQLParser.VERBOSE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Explain_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_statement; }
	}

	public final Explain_statementContext explain_statement() throws RecognitionException {
		Explain_statementContext _localctx = new Explain_statementContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_explain_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1113);
			match(EXPLAIN);
			setState(1131);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,64,_ctx) ) {
			case 1:
				{
				setState(1115);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANALYZE) {
					{
					setState(1114);
					match(ANALYZE);
					}
				}

				setState(1118);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VERBOSE) {
					{
					setState(1117);
					match(VERBOSE);
					}
				}

				}
				break;
			case 2:
				{
				setState(1120);
				match(LEFT_PAREN);
				setState(1121);
				explain_option();
				setState(1126);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1122);
					match(COMMA);
					setState(1123);
					explain_option();
					}
					}
					setState(1128);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1129);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(1133);
			explain_query();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explain_queryContext extends ParserRuleContext {
		public Data_statementContext data_statement() {
			return getRuleContext(Data_statementContext.class,0);
		}
		public Execute_statementContext execute_statement() {
			return getRuleContext(Execute_statementContext.class,0);
		}
		public Declare_statementContext declare_statement() {
			return getRuleContext(Declare_statementContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(PLpgSQLParser.CREATE, 0); }
		public Create_table_as_statementContext create_table_as_statement() {
			return getRuleContext(Create_table_as_statementContext.class,0);
		}
		public Create_view_statementContext create_view_statement() {
			return getRuleContext(Create_view_statementContext.class,0);
		}
		public Explain_queryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_query; }
	}

	public final Explain_queryContext explain_query() throws RecognitionException {
		Explain_queryContext _localctx = new Explain_queryContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_explain_query);
		try {
			setState(1143);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DELETE:
			case INSERT:
			case UPDATE:
			case VALUES:
			case SELECT:
			case TABLE:
			case WITH:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 1);
				{
				setState(1135);
				data_statement();
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1136);
				execute_statement();
				}
				break;
			case DECLARE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1137);
				declare_statement();
				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(1138);
				match(CREATE);
				setState(1141);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,65,_ctx) ) {
				case 1:
					{
					setState(1139);
					create_table_as_statement();
					}
					break;
				case 2:
					{
					setState(1140);
					create_view_statement();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_statementContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(PLpgSQLParser.EXECUTE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Execute_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_statement; }
	}

	public final Execute_statementContext execute_statement() throws RecognitionException {
		Execute_statementContext _localctx = new Execute_statementContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_execute_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1145);
			match(EXECUTE);
			setState(1146);
			identifier();
			setState(1158);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1147);
				match(LEFT_PAREN);
				setState(1148);
				vex(0);
				setState(1153);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1149);
					match(COMMA);
					setState(1150);
					vex(0);
					}
					}
					setState(1155);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1156);
				match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_statementContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(PLpgSQLParser.DECLARE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(PLpgSQLParser.CURSOR, 0); }
		public TerminalNode FOR() { return getToken(PLpgSQLParser.FOR, 0); }
		public Select_stmtContext select_stmt() {
			return getRuleContext(Select_stmtContext.class,0);
		}
		public TerminalNode BINARY() { return getToken(PLpgSQLParser.BINARY, 0); }
		public TerminalNode INSENSITIVE() { return getToken(PLpgSQLParser.INSENSITIVE, 0); }
		public TerminalNode SCROLL() { return getToken(PLpgSQLParser.SCROLL, 0); }
		public TerminalNode HOLD() { return getToken(PLpgSQLParser.HOLD, 0); }
		public TerminalNode WITH() { return getToken(PLpgSQLParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(PLpgSQLParser.WITHOUT, 0); }
		public TerminalNode NO() { return getToken(PLpgSQLParser.NO, 0); }
		public Declare_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_statement; }
	}

	public final Declare_statementContext declare_statement() throws RecognitionException {
		Declare_statementContext _localctx = new Declare_statementContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_declare_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1160);
			match(DECLARE);
			setState(1161);
			identifier();
			setState(1163);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BINARY) {
				{
				setState(1162);
				match(BINARY);
				}
			}

			setState(1166);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INSENSITIVE) {
				{
				setState(1165);
				match(INSENSITIVE);
				}
			}

			setState(1172);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO || _la==SCROLL) {
				{
				setState(1169);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(1168);
					match(NO);
					}
				}

				setState(1171);
				match(SCROLL);
				}
			}

			setState(1174);
			match(CURSOR);
			setState(1177);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITHOUT || _la==WITH) {
				{
				setState(1175);
				_la = _input.LA(1);
				if ( !(_la==WITHOUT || _la==WITH) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1176);
				match(HOLD);
				}
			}

			setState(1179);
			match(FOR);
			setState(1180);
			select_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Show_statementContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(PLpgSQLParser.SHOW, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode ALL() { return getToken(PLpgSQLParser.ALL, 0); }
		public TerminalNode TIME() { return getToken(PLpgSQLParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PLpgSQLParser.ZONE, 0); }
		public TerminalNode TRANSACTION() { return getToken(PLpgSQLParser.TRANSACTION, 0); }
		public TerminalNode ISOLATION() { return getToken(PLpgSQLParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(PLpgSQLParser.LEVEL, 0); }
		public TerminalNode SESSION() { return getToken(PLpgSQLParser.SESSION, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(PLpgSQLParser.AUTHORIZATION, 0); }
		public TerminalNode DOT() { return getToken(PLpgSQLParser.DOT, 0); }
		public Show_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_statement; }
	}

	public final Show_statementContext show_statement() throws RecognitionException {
		Show_statementContext _localctx = new Show_statementContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_show_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1182);
			match(SHOW);
			setState(1197);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,75,_ctx) ) {
			case 1:
				{
				setState(1186);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,74,_ctx) ) {
				case 1:
					{
					setState(1183);
					identifier();
					setState(1184);
					match(DOT);
					}
					break;
				}
				setState(1188);
				identifier();
				}
				break;
			case 2:
				{
				setState(1189);
				match(ALL);
				}
				break;
			case 3:
				{
				setState(1190);
				match(TIME);
				setState(1191);
				match(ZONE);
				}
				break;
			case 4:
				{
				setState(1192);
				match(TRANSACTION);
				setState(1193);
				match(ISOLATION);
				setState(1194);
				match(LEVEL);
				}
				break;
			case 5:
				{
				setState(1195);
				match(SESSION);
				setState(1196);
				match(AUTHORIZATION);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explain_optionContext extends ParserRuleContext {
		public TerminalNode ANALYZE() { return getToken(PLpgSQLParser.ANALYZE, 0); }
		public TerminalNode VERBOSE() { return getToken(PLpgSQLParser.VERBOSE, 0); }
		public TerminalNode COSTS() { return getToken(PLpgSQLParser.COSTS, 0); }
		public TerminalNode SETTINGS() { return getToken(PLpgSQLParser.SETTINGS, 0); }
		public TerminalNode BUFFERS() { return getToken(PLpgSQLParser.BUFFERS, 0); }
		public TerminalNode TIMING() { return getToken(PLpgSQLParser.TIMING, 0); }
		public TerminalNode SUMMARY() { return getToken(PLpgSQLParser.SUMMARY, 0); }
		public Boolean_valueContext boolean_value() {
			return getRuleContext(Boolean_valueContext.class,0);
		}
		public TerminalNode FORMAT() { return getToken(PLpgSQLParser.FORMAT, 0); }
		public TerminalNode TEXT() { return getToken(PLpgSQLParser.TEXT, 0); }
		public TerminalNode XML() { return getToken(PLpgSQLParser.XML, 0); }
		public TerminalNode JSON() { return getToken(PLpgSQLParser.JSON, 0); }
		public TerminalNode YAML() { return getToken(PLpgSQLParser.YAML, 0); }
		public Explain_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_option; }
	}

	public final Explain_optionContext explain_option() throws RecognitionException {
		Explain_optionContext _localctx = new Explain_optionContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_explain_option);
		int _la;
		try {
			setState(1205);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VERBOSE:
			case ANALYZE:
			case BUFFERS:
			case COSTS:
			case SETTINGS:
			case SUMMARY:
			case TIMING:
				enterOuterAlt(_localctx, 1);
				{
				setState(1199);
				_la = _input.LA(1);
				if ( !(_la==VERBOSE || _la==ANALYZE || _la==BUFFERS || _la==COSTS || ((((_la - 523)) & ~0x3f) == 0 && ((1L << (_la - 523)) & ((1L << (SETTINGS - 523)) | (1L << (SUMMARY - 523)) | (1L << (TIMING - 523)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1201);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OFF || ((((_la - 397)) & ~0x3f) == 0 && ((1L << (_la - 397)) & ((1L << (FALSE - 397)) | (1L << (ON - 397)) | (1L << (TRUE - 397)))) != 0) || _la==NUMBER_LITERAL) {
					{
					setState(1200);
					boolean_value();
					}
				}

				}
				break;
			case FORMAT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1203);
				match(FORMAT);
				setState(1204);
				_la = _input.LA(1);
				if ( !(_la==TEXT || _la==XML || _la==JSON || _la==YAML) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class User_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode CURRENT_USER() { return getToken(PLpgSQLParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(PLpgSQLParser.SESSION_USER, 0); }
		public User_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_name; }
	}

	public final User_nameContext user_name() throws RecognitionException {
		User_nameContext _localctx = new User_nameContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_user_name);
		try {
			setState(1210);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BY:
			case CACHE:
			case CALL:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COLUMNS:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONFLICT:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CUBE:
			case CURRENT:
			case CURSOR:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DEPENDS:
			case DETACH:
			case DICTIONARY:
			case DISABLE:
			case DISCARD:
			case DOCUMENT:
			case DOMAIN:
			case DOUBLE:
			case DROP:
			case EACH:
			case ENABLE:
			case ENCODING:
			case ENCRYPTED:
			case ENUM:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GENERATED:
			case GLOBAL:
			case GRANTED:
			case GROUPS:
			case HANDLER:
			case HEADER:
			case HOLD:
			case HOUR:
			case IDENTITY:
			case IF:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT:
			case IMPORT:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCKED:
			case LOGGED:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case METHOD:
			case MINUTE:
			case MINVALUE:
			case MODE:
			case MONTH:
			case MOVE:
			case NAME:
			case NAMES:
			case NEW:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS:
			case OBJECT:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OVER:
			case OVERRIDING:
			case OWNED:
			case OWNER:
			case PARALLEL:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POLICY:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROCEDURES:
			case PROGRAM:
			case PUBLICATION:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINES:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMAS:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SKIP_:
			case SNAPSHOT:
			case SQL:
			case STABLE:
			case STANDALONE:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STORED:
			case STRICT:
			case STRIP:
			case SUBSCRIPTION:
			case SUPPORT:
			case SYSID:
			case SYSTEM:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT:
			case TIES:
			case TRANSACTION:
			case TRANSFORM:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE:
			case VARYING:
			case VERSION:
			case VIEW:
			case VIEWS:
			case VOLATILE:
			case WHITESPACE:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML:
			case YEAR:
			case YES:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL:
			case EXISTS:
			case EXTRACT:
			case FLOAT:
			case GREATEST:
			case GROUPING:
			case INOUT:
			case INT:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case ALIGNMENT:
			case BASETYPE:
			case BUFFERS:
			case BYPASSRLS:
			case CANONICAL:
			case CATEGORY:
			case COLLATABLE:
			case COMBINEFUNC:
			case COMMUTATOR:
			case CONNECT:
			case COSTS:
			case CREATEDB:
			case CREATEROLE:
			case DESERIALFUNC:
			case DETERMINISTIC:
			case DISABLE_PAGE_SKIPPING:
			case ELEMENT:
			case EXTENDED:
			case FINALFUNC:
			case FINALFUNC_EXTRA:
			case FINALFUNC_MODIFY:
			case FORCE_NOT_NULL:
			case FORCE_NULL:
			case FORCE_QUOTE:
			case FORMAT:
			case GETTOKEN:
			case HASH:
			case HASHES:
			case HEADLINE:
			case HYPOTHETICAL:
			case INDEX_CLEANUP:
			case INIT:
			case INITCOND:
			case INTERNALLENGTH:
			case JSON:
			case LC_COLLATE:
			case LC_CTYPE:
			case LEFTARG:
			case LEXIZE:
			case LEXTYPES:
			case LIST:
			case LOCALE:
			case LOGIN:
			case MAIN:
			case MERGES:
			case MFINALFUNC:
			case MFINALFUNC_EXTRA:
			case MFINALFUNC_MODIFY:
			case MINITCOND:
			case MINVFUNC:
			case MODULUS:
			case MSFUNC:
			case MSSPACE:
			case MSTYPE:
			case NEGATOR:
			case NOBYPASSRLS:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOREPLICATION:
			case NOSUPERUSER:
			case OUTPUT:
			case PASSEDBYVALUE:
			case PATH:
			case PERMISSIVE:
			case PLAIN:
			case PREFERRED:
			case PROVIDER:
			case READ_ONLY:
			case READ_WRITE:
			case RECEIVE:
			case REMAINDER:
			case REPLICATION:
			case RESTRICTED:
			case RESTRICTIVE:
			case RIGHTARG:
			case SAFE:
			case SEND:
			case SERIALFUNC:
			case SETTINGS:
			case SFUNC:
			case SHAREABLE:
			case SKIP_LOCKED:
			case SORTOP:
			case SSPACE:
			case STYPE:
			case SUBTYPE_DIFF:
			case SUBTYPE_OPCLASS:
			case SUBTYPE:
			case SUMMARY:
			case SUPERUSER:
			case TIMING:
			case TYPMOD_IN:
			case TYPMOD_OUT:
			case UNSAFE:
			case USAGE:
			case VARIABLE:
			case YAML:
			case ALIAS:
			case ASSERT:
			case CONSTANT:
			case DATATYPE:
			case DEBUG:
			case DETAIL:
			case DIAGNOSTICS:
			case ELSEIF:
			case ELSIF:
			case ERRCODE:
			case EXIT:
			case EXCEPTION:
			case FOREACH:
			case GET:
			case HINT:
			case INFO:
			case LOG:
			case LOOP:
			case MESSAGE:
			case NOTICE:
			case OPEN:
			case PERFORM:
			case QUERY:
			case RAISE:
			case RECORD:
			case RETURN:
			case REVERSE:
			case ROWTYPE:
			case SLICE:
			case SQLSTATE:
			case STACKED:
			case WARNING:
			case WHILE:
			case Identifier:
			case QuotedIdentifier:
				enterOuterAlt(_localctx, 1);
				{
				setState(1207);
				identifier();
				}
				break;
			case CURRENT_USER:
				enterOuterAlt(_localctx, 2);
				{
				setState(1208);
				match(CURRENT_USER);
				}
				break;
			case SESSION_USER:
				enterOuterAlt(_localctx, 3);
				{
				setState(1209);
				match(SESSION_USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_cols_listContext extends ParserRuleContext {
		public List<Table_colsContext> table_cols() {
			return getRuleContexts(Table_colsContext.class);
		}
		public Table_colsContext table_cols(int i) {
			return getRuleContext(Table_colsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Table_cols_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_cols_list; }
	}

	public final Table_cols_listContext table_cols_list() throws RecognitionException {
		Table_cols_listContext _localctx = new Table_cols_listContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_table_cols_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1212);
			table_cols();
			setState(1217);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1213);
				match(COMMA);
				setState(1214);
				table_cols();
				}
				}
				setState(1219);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_colsContext extends ParserRuleContext {
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Table_colsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_cols; }
	}

	public final Table_colsContext table_cols() throws RecognitionException {
		Table_colsContext _localctx = new Table_colsContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_table_cols);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1220);
			schema_qualified_name();
			setState(1232);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1221);
				match(LEFT_PAREN);
				setState(1222);
				identifier();
				setState(1227);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1223);
					match(COMMA);
					setState(1224);
					identifier();
					}
					}
					setState(1229);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1230);
				match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vacuum_modeContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public List<Vacuum_optionContext> vacuum_option() {
			return getRuleContexts(Vacuum_optionContext.class);
		}
		public Vacuum_optionContext vacuum_option(int i) {
			return getRuleContext(Vacuum_optionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public TerminalNode FULL() { return getToken(PLpgSQLParser.FULL, 0); }
		public TerminalNode FREEZE() { return getToken(PLpgSQLParser.FREEZE, 0); }
		public TerminalNode VERBOSE() { return getToken(PLpgSQLParser.VERBOSE, 0); }
		public TerminalNode ANALYZE() { return getToken(PLpgSQLParser.ANALYZE, 0); }
		public Vacuum_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacuum_mode; }
	}

	public final Vacuum_modeContext vacuum_mode() throws RecognitionException {
		Vacuum_modeContext _localctx = new Vacuum_modeContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_vacuum_mode);
		int _la;
		try {
			setState(1257);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 1);
				{
				setState(1234);
				match(LEFT_PAREN);
				setState(1235);
				vacuum_option();
				setState(1240);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1236);
					match(COMMA);
					setState(1237);
					vacuum_option();
					}
					}
					setState(1242);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1243);
				match(RIGHT_PAREN);
				}
				break;
			case EOF:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BY:
			case CACHE:
			case CALL:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COLUMNS:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONFLICT:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CUBE:
			case CURRENT:
			case CURSOR:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DEPENDS:
			case DETACH:
			case DICTIONARY:
			case DISABLE:
			case DISCARD:
			case DOCUMENT:
			case DOMAIN:
			case DOUBLE:
			case DROP:
			case EACH:
			case ENABLE:
			case ENCODING:
			case ENCRYPTED:
			case ENUM:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GENERATED:
			case GLOBAL:
			case GRANTED:
			case GROUPS:
			case HANDLER:
			case HEADER:
			case HOLD:
			case HOUR:
			case IDENTITY:
			case IF:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT:
			case IMPORT:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCKED:
			case LOGGED:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case METHOD:
			case MINUTE:
			case MINVALUE:
			case MODE:
			case MONTH:
			case MOVE:
			case NAME:
			case NAMES:
			case NEW:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS:
			case OBJECT:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OVER:
			case OVERRIDING:
			case OWNED:
			case OWNER:
			case PARALLEL:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POLICY:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROCEDURES:
			case PROGRAM:
			case PUBLICATION:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINES:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMAS:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SKIP_:
			case SNAPSHOT:
			case SQL:
			case STABLE:
			case STANDALONE:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STORED:
			case STRICT:
			case STRIP:
			case SUBSCRIPTION:
			case SUPPORT:
			case SYSID:
			case SYSTEM:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT:
			case TIES:
			case TRANSACTION:
			case TRANSFORM:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE:
			case VARYING:
			case VERSION:
			case VIEW:
			case VIEWS:
			case VOLATILE:
			case WHITESPACE:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML:
			case YEAR:
			case YES:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL:
			case EXISTS:
			case EXTRACT:
			case FLOAT:
			case GREATEST:
			case GROUPING:
			case INOUT:
			case INT:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case FREEZE:
			case FULL:
			case VERBOSE:
			case ANALYZE:
			case ALIGNMENT:
			case BASETYPE:
			case BUFFERS:
			case BYPASSRLS:
			case CANONICAL:
			case CATEGORY:
			case COLLATABLE:
			case COMBINEFUNC:
			case COMMUTATOR:
			case CONNECT:
			case COSTS:
			case CREATEDB:
			case CREATEROLE:
			case DESERIALFUNC:
			case DETERMINISTIC:
			case DISABLE_PAGE_SKIPPING:
			case ELEMENT:
			case EXTENDED:
			case FINALFUNC:
			case FINALFUNC_EXTRA:
			case FINALFUNC_MODIFY:
			case FORCE_NOT_NULL:
			case FORCE_NULL:
			case FORCE_QUOTE:
			case FORMAT:
			case GETTOKEN:
			case HASH:
			case HASHES:
			case HEADLINE:
			case HYPOTHETICAL:
			case INDEX_CLEANUP:
			case INIT:
			case INITCOND:
			case INTERNALLENGTH:
			case JSON:
			case LC_COLLATE:
			case LC_CTYPE:
			case LEFTARG:
			case LEXIZE:
			case LEXTYPES:
			case LIST:
			case LOCALE:
			case LOGIN:
			case MAIN:
			case MERGES:
			case MFINALFUNC:
			case MFINALFUNC_EXTRA:
			case MFINALFUNC_MODIFY:
			case MINITCOND:
			case MINVFUNC:
			case MODULUS:
			case MSFUNC:
			case MSSPACE:
			case MSTYPE:
			case NEGATOR:
			case NOBYPASSRLS:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOREPLICATION:
			case NOSUPERUSER:
			case OUTPUT:
			case PASSEDBYVALUE:
			case PATH:
			case PERMISSIVE:
			case PLAIN:
			case PREFERRED:
			case PROVIDER:
			case READ_ONLY:
			case READ_WRITE:
			case RECEIVE:
			case REMAINDER:
			case REPLICATION:
			case RESTRICTED:
			case RESTRICTIVE:
			case RIGHTARG:
			case SAFE:
			case SEND:
			case SERIALFUNC:
			case SETTINGS:
			case SFUNC:
			case SHAREABLE:
			case SKIP_LOCKED:
			case SORTOP:
			case SSPACE:
			case STYPE:
			case SUBTYPE_DIFF:
			case SUBTYPE_OPCLASS:
			case SUBTYPE:
			case SUMMARY:
			case SUPERUSER:
			case TIMING:
			case TYPMOD_IN:
			case TYPMOD_OUT:
			case UNSAFE:
			case USAGE:
			case VARIABLE:
			case YAML:
			case ALIAS:
			case ASSERT:
			case CONSTANT:
			case DATATYPE:
			case DEBUG:
			case DETAIL:
			case DIAGNOSTICS:
			case ELSEIF:
			case ELSIF:
			case ERRCODE:
			case EXIT:
			case EXCEPTION:
			case FOREACH:
			case GET:
			case HINT:
			case INFO:
			case LOG:
			case LOOP:
			case MESSAGE:
			case NOTICE:
			case OPEN:
			case PERFORM:
			case QUERY:
			case RAISE:
			case RECORD:
			case RETURN:
			case REVERSE:
			case ROWTYPE:
			case SLICE:
			case SQLSTATE:
			case STACKED:
			case WARNING:
			case WHILE:
			case SEMI_COLON:
			case Identifier:
			case QuotedIdentifier:
				enterOuterAlt(_localctx, 2);
				{
				setState(1246);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(1245);
					match(FULL);
					}
				}

				setState(1249);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FREEZE) {
					{
					setState(1248);
					match(FREEZE);
					}
				}

				setState(1252);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VERBOSE) {
					{
					setState(1251);
					match(VERBOSE);
					}
				}

				setState(1255);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANALYZE) {
					{
					setState(1254);
					match(ANALYZE);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vacuum_optionContext extends ParserRuleContext {
		public TerminalNode FULL() { return getToken(PLpgSQLParser.FULL, 0); }
		public TerminalNode FREEZE() { return getToken(PLpgSQLParser.FREEZE, 0); }
		public TerminalNode VERBOSE() { return getToken(PLpgSQLParser.VERBOSE, 0); }
		public TerminalNode ANALYZE() { return getToken(PLpgSQLParser.ANALYZE, 0); }
		public TerminalNode DISABLE_PAGE_SKIPPING() { return getToken(PLpgSQLParser.DISABLE_PAGE_SKIPPING, 0); }
		public TerminalNode SKIP_LOCKED() { return getToken(PLpgSQLParser.SKIP_LOCKED, 0); }
		public TerminalNode INDEX_CLEANUP() { return getToken(PLpgSQLParser.INDEX_CLEANUP, 0); }
		public TerminalNode TRUNCATE() { return getToken(PLpgSQLParser.TRUNCATE, 0); }
		public Boolean_valueContext boolean_value() {
			return getRuleContext(Boolean_valueContext.class,0);
		}
		public Vacuum_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacuum_option; }
	}

	public final Vacuum_optionContext vacuum_option() throws RecognitionException {
		Vacuum_optionContext _localctx = new Vacuum_optionContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_vacuum_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1259);
			_la = _input.LA(1);
			if ( !(_la==TRUNCATE || ((((_la - 349)) & ~0x3f) == 0 && ((1L << (_la - 349)) & ((1L << (FREEZE - 349)) | (1L << (FULL - 349)) | (1L << (VERBOSE - 349)) | (1L << (ANALYZE - 349)))) != 0) || _la==DISABLE_PAGE_SKIPPING || _la==INDEX_CLEANUP || _la==SKIP_LOCKED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1261);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFF || ((((_la - 397)) & ~0x3f) == 0 && ((1L << (_la - 397)) & ((1L << (FALSE - 397)) | (1L << (ON - 397)) | (1L << (TRUE - 397)))) != 0) || _la==NUMBER_LITERAL) {
				{
				setState(1260);
				boolean_value();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Analyze_modeContext extends ParserRuleContext {
		public TerminalNode VERBOSE() { return getToken(PLpgSQLParser.VERBOSE, 0); }
		public TerminalNode SKIP_LOCKED() { return getToken(PLpgSQLParser.SKIP_LOCKED, 0); }
		public Boolean_valueContext boolean_value() {
			return getRuleContext(Boolean_valueContext.class,0);
		}
		public Analyze_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyze_mode; }
	}

	public final Analyze_modeContext analyze_mode() throws RecognitionException {
		Analyze_modeContext _localctx = new Analyze_modeContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_analyze_mode);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1263);
			_la = _input.LA(1);
			if ( !(_la==VERBOSE || _la==SKIP_LOCKED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1265);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFF || ((((_la - 397)) & ~0x3f) == 0 && ((1L << (_la - 397)) & ((1L << (FALSE - 397)) | (1L << (ON - 397)) | (1L << (TRUE - 397)))) != 0) || _la==NUMBER_LITERAL) {
				{
				setState(1264);
				boolean_value();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Boolean_valueContext extends ParserRuleContext {
		public TerminalNode TRUE() { return getToken(PLpgSQLParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(PLpgSQLParser.FALSE, 0); }
		public TerminalNode OFF() { return getToken(PLpgSQLParser.OFF, 0); }
		public TerminalNode ON() { return getToken(PLpgSQLParser.ON, 0); }
		public TerminalNode NUMBER_LITERAL() { return getToken(PLpgSQLParser.NUMBER_LITERAL, 0); }
		public Boolean_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolean_value; }
	}

	public final Boolean_valueContext boolean_value() throws RecognitionException {
		Boolean_valueContext _localctx = new Boolean_valueContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_boolean_value);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1267);
			_la = _input.LA(1);
			if ( !(_la==OFF || ((((_la - 397)) & ~0x3f) == 0 && ((1L << (_la - 397)) & ((1L << (FALSE - 397)) | (1L << (ON - 397)) | (1L << (TRUE - 397)))) != 0) || _la==NUMBER_LITERAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fetch_move_directionContext extends ParserRuleContext {
		public TerminalNode NEXT() { return getToken(PLpgSQLParser.NEXT, 0); }
		public TerminalNode PRIOR() { return getToken(PLpgSQLParser.PRIOR, 0); }
		public TerminalNode FIRST() { return getToken(PLpgSQLParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(PLpgSQLParser.LAST, 0); }
		public Signed_number_literalContext signed_number_literal() {
			return getRuleContext(Signed_number_literalContext.class,0);
		}
		public TerminalNode ABSOLUTE() { return getToken(PLpgSQLParser.ABSOLUTE, 0); }
		public TerminalNode RELATIVE() { return getToken(PLpgSQLParser.RELATIVE, 0); }
		public TerminalNode ALL() { return getToken(PLpgSQLParser.ALL, 0); }
		public TerminalNode FORWARD() { return getToken(PLpgSQLParser.FORWARD, 0); }
		public TerminalNode NUMBER_LITERAL() { return getToken(PLpgSQLParser.NUMBER_LITERAL, 0); }
		public TerminalNode BACKWARD() { return getToken(PLpgSQLParser.BACKWARD, 0); }
		public Fetch_move_directionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_move_direction; }
	}

	public final Fetch_move_directionContext fetch_move_direction() throws RecognitionException {
		Fetch_move_directionContext _localctx = new Fetch_move_directionContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_fetch_move_direction);
		int _la;
		try {
			setState(1286);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NEXT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1269);
				match(NEXT);
				}
				break;
			case PRIOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(1270);
				match(PRIOR);
				}
				break;
			case FIRST:
				enterOuterAlt(_localctx, 3);
				{
				setState(1271);
				match(FIRST);
				}
				break;
			case LAST:
				enterOuterAlt(_localctx, 4);
				{
				setState(1272);
				match(LAST);
				}
				break;
			case ABSOLUTE:
			case RELATIVE:
			case PLUS:
			case MINUS:
			case NUMBER_LITERAL:
				enterOuterAlt(_localctx, 5);
				{
				setState(1274);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ABSOLUTE || _la==RELATIVE) {
					{
					setState(1273);
					_la = _input.LA(1);
					if ( !(_la==ABSOLUTE || _la==RELATIVE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1276);
				signed_number_literal();
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 6);
				{
				setState(1277);
				match(ALL);
				}
				break;
			case FORWARD:
				enterOuterAlt(_localctx, 7);
				{
				setState(1278);
				match(FORWARD);
				setState(1280);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL || _la==NUMBER_LITERAL) {
					{
					setState(1279);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==NUMBER_LITERAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case BACKWARD:
				enterOuterAlt(_localctx, 8);
				{
				setState(1282);
				match(BACKWARD);
				setState(1284);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL || _la==NUMBER_LITERAL) {
					{
					setState(1283);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==NUMBER_LITERAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_statementContext extends ParserRuleContext {
		public Schema_createContext schema_create() {
			return getRuleContext(Schema_createContext.class,0);
		}
		public Schema_alterContext schema_alter() {
			return getRuleContext(Schema_alterContext.class,0);
		}
		public Schema_dropContext schema_drop() {
			return getRuleContext(Schema_dropContext.class,0);
		}
		public Schema_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_statement; }
	}

	public final Schema_statementContext schema_statement() throws RecognitionException {
		Schema_statementContext _localctx = new Schema_statementContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_schema_statement);
		try {
			setState(1291);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMMENT:
			case IMPORT:
			case REVOKE:
			case SECURITY:
			case SET:
			case CREATE:
			case GRANT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1288);
				schema_create();
				}
				break;
			case ALTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(1289);
				schema_alter();
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 3);
				{
				setState(1290);
				schema_drop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_createContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PLpgSQLParser.CREATE, 0); }
		public Create_table_statementContext create_table_statement() {
			return getRuleContext(Create_table_statementContext.class,0);
		}
		public Create_foreign_table_statementContext create_foreign_table_statement() {
			return getRuleContext(Create_foreign_table_statementContext.class,0);
		}
		public Create_index_statementContext create_index_statement() {
			return getRuleContext(Create_index_statementContext.class,0);
		}
		public Create_extension_statementContext create_extension_statement() {
			return getRuleContext(Create_extension_statementContext.class,0);
		}
		public Create_trigger_statementContext create_trigger_statement() {
			return getRuleContext(Create_trigger_statementContext.class,0);
		}
		public Create_rewrite_statementContext create_rewrite_statement() {
			return getRuleContext(Create_rewrite_statementContext.class,0);
		}
		public Create_function_statementContext create_function_statement() {
			return getRuleContext(Create_function_statementContext.class,0);
		}
		public Create_sequence_statementContext create_sequence_statement() {
			return getRuleContext(Create_sequence_statementContext.class,0);
		}
		public Create_schema_statementContext create_schema_statement() {
			return getRuleContext(Create_schema_statementContext.class,0);
		}
		public Create_view_statementContext create_view_statement() {
			return getRuleContext(Create_view_statementContext.class,0);
		}
		public Create_language_statementContext create_language_statement() {
			return getRuleContext(Create_language_statementContext.class,0);
		}
		public Create_event_triggerContext create_event_trigger() {
			return getRuleContext(Create_event_triggerContext.class,0);
		}
		public Create_type_statementContext create_type_statement() {
			return getRuleContext(Create_type_statementContext.class,0);
		}
		public Create_domain_statementContext create_domain_statement() {
			return getRuleContext(Create_domain_statementContext.class,0);
		}
		public Create_server_statementContext create_server_statement() {
			return getRuleContext(Create_server_statementContext.class,0);
		}
		public Create_fts_configurationContext create_fts_configuration() {
			return getRuleContext(Create_fts_configurationContext.class,0);
		}
		public Create_fts_templateContext create_fts_template() {
			return getRuleContext(Create_fts_templateContext.class,0);
		}
		public Create_fts_parserContext create_fts_parser() {
			return getRuleContext(Create_fts_parserContext.class,0);
		}
		public Create_fts_dictionaryContext create_fts_dictionary() {
			return getRuleContext(Create_fts_dictionaryContext.class,0);
		}
		public Create_collationContext create_collation() {
			return getRuleContext(Create_collationContext.class,0);
		}
		public Create_user_mappingContext create_user_mapping() {
			return getRuleContext(Create_user_mappingContext.class,0);
		}
		public Create_transform_statementContext create_transform_statement() {
			return getRuleContext(Create_transform_statementContext.class,0);
		}
		public Create_access_methodContext create_access_method() {
			return getRuleContext(Create_access_methodContext.class,0);
		}
		public Create_user_or_roleContext create_user_or_role() {
			return getRuleContext(Create_user_or_roleContext.class,0);
		}
		public Create_groupContext create_group() {
			return getRuleContext(Create_groupContext.class,0);
		}
		public Create_tablespaceContext create_tablespace() {
			return getRuleContext(Create_tablespaceContext.class,0);
		}
		public Create_statisticsContext create_statistics() {
			return getRuleContext(Create_statisticsContext.class,0);
		}
		public Create_foreign_data_wrapperContext create_foreign_data_wrapper() {
			return getRuleContext(Create_foreign_data_wrapperContext.class,0);
		}
		public Create_operator_statementContext create_operator_statement() {
			return getRuleContext(Create_operator_statementContext.class,0);
		}
		public Create_aggregate_statementContext create_aggregate_statement() {
			return getRuleContext(Create_aggregate_statementContext.class,0);
		}
		public Create_table_as_statementContext create_table_as_statement() {
			return getRuleContext(Create_table_as_statementContext.class,0);
		}
		public Create_policy_statementContext create_policy_statement() {
			return getRuleContext(Create_policy_statementContext.class,0);
		}
		public Create_subscription_statementContext create_subscription_statement() {
			return getRuleContext(Create_subscription_statementContext.class,0);
		}
		public Create_cast_statementContext create_cast_statement() {
			return getRuleContext(Create_cast_statementContext.class,0);
		}
		public Create_operator_family_statementContext create_operator_family_statement() {
			return getRuleContext(Create_operator_family_statementContext.class,0);
		}
		public Create_operator_class_statementContext create_operator_class_statement() {
			return getRuleContext(Create_operator_class_statementContext.class,0);
		}
		public Create_conversion_statementContext create_conversion_statement() {
			return getRuleContext(Create_conversion_statementContext.class,0);
		}
		public Create_publication_statementContext create_publication_statement() {
			return getRuleContext(Create_publication_statementContext.class,0);
		}
		public Comment_on_statementContext comment_on_statement() {
			return getRuleContext(Comment_on_statementContext.class,0);
		}
		public Rule_commonContext rule_common() {
			return getRuleContext(Rule_commonContext.class,0);
		}
		public Set_statementContext set_statement() {
			return getRuleContext(Set_statementContext.class,0);
		}
		public Schema_importContext schema_import() {
			return getRuleContext(Schema_importContext.class,0);
		}
		public Security_labelContext security_label() {
			return getRuleContext(Security_labelContext.class,0);
		}
		public Schema_createContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_create; }
	}

	public final Schema_createContext schema_create() throws RecognitionException {
		Schema_createContext _localctx = new Schema_createContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_schema_create);
		try {
			setState(1339);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CREATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1293);
				match(CREATE);
				setState(1332);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,95,_ctx) ) {
				case 1:
					{
					setState(1294);
					create_table_statement();
					}
					break;
				case 2:
					{
					setState(1295);
					create_foreign_table_statement();
					}
					break;
				case 3:
					{
					setState(1296);
					create_index_statement();
					}
					break;
				case 4:
					{
					setState(1297);
					create_extension_statement();
					}
					break;
				case 5:
					{
					setState(1298);
					create_trigger_statement();
					}
					break;
				case 6:
					{
					setState(1299);
					create_rewrite_statement();
					}
					break;
				case 7:
					{
					setState(1300);
					create_function_statement();
					}
					break;
				case 8:
					{
					setState(1301);
					create_sequence_statement();
					}
					break;
				case 9:
					{
					setState(1302);
					create_schema_statement();
					}
					break;
				case 10:
					{
					setState(1303);
					create_view_statement();
					}
					break;
				case 11:
					{
					setState(1304);
					create_language_statement();
					}
					break;
				case 12:
					{
					setState(1305);
					create_event_trigger();
					}
					break;
				case 13:
					{
					setState(1306);
					create_type_statement();
					}
					break;
				case 14:
					{
					setState(1307);
					create_domain_statement();
					}
					break;
				case 15:
					{
					setState(1308);
					create_server_statement();
					}
					break;
				case 16:
					{
					setState(1309);
					create_fts_configuration();
					}
					break;
				case 17:
					{
					setState(1310);
					create_fts_template();
					}
					break;
				case 18:
					{
					setState(1311);
					create_fts_parser();
					}
					break;
				case 19:
					{
					setState(1312);
					create_fts_dictionary();
					}
					break;
				case 20:
					{
					setState(1313);
					create_collation();
					}
					break;
				case 21:
					{
					setState(1314);
					create_user_mapping();
					}
					break;
				case 22:
					{
					setState(1315);
					create_transform_statement();
					}
					break;
				case 23:
					{
					setState(1316);
					create_access_method();
					}
					break;
				case 24:
					{
					setState(1317);
					create_user_or_role();
					}
					break;
				case 25:
					{
					setState(1318);
					create_group();
					}
					break;
				case 26:
					{
					setState(1319);
					create_tablespace();
					}
					break;
				case 27:
					{
					setState(1320);
					create_statistics();
					}
					break;
				case 28:
					{
					setState(1321);
					create_foreign_data_wrapper();
					}
					break;
				case 29:
					{
					setState(1322);
					create_operator_statement();
					}
					break;
				case 30:
					{
					setState(1323);
					create_aggregate_statement();
					}
					break;
				case 31:
					{
					setState(1324);
					create_table_as_statement();
					}
					break;
				case 32:
					{
					setState(1325);
					create_policy_statement();
					}
					break;
				case 33:
					{
					setState(1326);
					create_subscription_statement();
					}
					break;
				case 34:
					{
					setState(1327);
					create_cast_statement();
					}
					break;
				case 35:
					{
					setState(1328);
					create_operator_family_statement();
					}
					break;
				case 36:
					{
					setState(1329);
					create_operator_class_statement();
					}
					break;
				case 37:
					{
					setState(1330);
					create_conversion_statement();
					}
					break;
				case 38:
					{
					setState(1331);
					create_publication_statement();
					}
					break;
				}
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1334);
				comment_on_statement();
				}
				break;
			case REVOKE:
			case GRANT:
				enterOuterAlt(_localctx, 3);
				{
				setState(1335);
				rule_common();
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 4);
				{
				setState(1336);
				set_statement();
				}
				break;
			case IMPORT:
				enterOuterAlt(_localctx, 5);
				{
				setState(1337);
				schema_import();
				}
				break;
			case SECURITY:
				enterOuterAlt(_localctx, 6);
				{
				setState(1338);
				security_label();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_alterContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PLpgSQLParser.ALTER, 0); }
		public Alter_function_statementContext alter_function_statement() {
			return getRuleContext(Alter_function_statementContext.class,0);
		}
		public Alter_schema_statementContext alter_schema_statement() {
			return getRuleContext(Alter_schema_statementContext.class,0);
		}
		public Alter_language_statementContext alter_language_statement() {
			return getRuleContext(Alter_language_statementContext.class,0);
		}
		public Alter_table_statementContext alter_table_statement() {
			return getRuleContext(Alter_table_statementContext.class,0);
		}
		public Alter_index_statementContext alter_index_statement() {
			return getRuleContext(Alter_index_statementContext.class,0);
		}
		public Alter_default_privilegesContext alter_default_privileges() {
			return getRuleContext(Alter_default_privilegesContext.class,0);
		}
		public Alter_sequence_statementContext alter_sequence_statement() {
			return getRuleContext(Alter_sequence_statementContext.class,0);
		}
		public Alter_view_statementContext alter_view_statement() {
			return getRuleContext(Alter_view_statementContext.class,0);
		}
		public Alter_event_triggerContext alter_event_trigger() {
			return getRuleContext(Alter_event_triggerContext.class,0);
		}
		public Alter_type_statementContext alter_type_statement() {
			return getRuleContext(Alter_type_statementContext.class,0);
		}
		public Alter_domain_statementContext alter_domain_statement() {
			return getRuleContext(Alter_domain_statementContext.class,0);
		}
		public Alter_server_statementContext alter_server_statement() {
			return getRuleContext(Alter_server_statementContext.class,0);
		}
		public Alter_fts_statementContext alter_fts_statement() {
			return getRuleContext(Alter_fts_statementContext.class,0);
		}
		public Alter_collationContext alter_collation() {
			return getRuleContext(Alter_collationContext.class,0);
		}
		public Alter_user_mappingContext alter_user_mapping() {
			return getRuleContext(Alter_user_mappingContext.class,0);
		}
		public Alter_user_or_roleContext alter_user_or_role() {
			return getRuleContext(Alter_user_or_roleContext.class,0);
		}
		public Alter_groupContext alter_group() {
			return getRuleContext(Alter_groupContext.class,0);
		}
		public Alter_tablespaceContext alter_tablespace() {
			return getRuleContext(Alter_tablespaceContext.class,0);
		}
		public Alter_statisticsContext alter_statistics() {
			return getRuleContext(Alter_statisticsContext.class,0);
		}
		public Alter_foreign_data_wrapperContext alter_foreign_data_wrapper() {
			return getRuleContext(Alter_foreign_data_wrapperContext.class,0);
		}
		public Alter_operator_statementContext alter_operator_statement() {
			return getRuleContext(Alter_operator_statementContext.class,0);
		}
		public Alter_aggregate_statementContext alter_aggregate_statement() {
			return getRuleContext(Alter_aggregate_statementContext.class,0);
		}
		public Alter_extension_statementContext alter_extension_statement() {
			return getRuleContext(Alter_extension_statementContext.class,0);
		}
		public Alter_policy_statementContext alter_policy_statement() {
			return getRuleContext(Alter_policy_statementContext.class,0);
		}
		public Alter_subscription_statementContext alter_subscription_statement() {
			return getRuleContext(Alter_subscription_statementContext.class,0);
		}
		public Alter_trigger_statementContext alter_trigger_statement() {
			return getRuleContext(Alter_trigger_statementContext.class,0);
		}
		public Alter_rule_statementContext alter_rule_statement() {
			return getRuleContext(Alter_rule_statementContext.class,0);
		}
		public Alter_operator_family_statementContext alter_operator_family_statement() {
			return getRuleContext(Alter_operator_family_statementContext.class,0);
		}
		public Alter_operator_class_statementContext alter_operator_class_statement() {
			return getRuleContext(Alter_operator_class_statementContext.class,0);
		}
		public Alter_conversion_statementContext alter_conversion_statement() {
			return getRuleContext(Alter_conversion_statementContext.class,0);
		}
		public Alter_publication_statementContext alter_publication_statement() {
			return getRuleContext(Alter_publication_statementContext.class,0);
		}
		public Alter_ownerContext alter_owner() {
			return getRuleContext(Alter_ownerContext.class,0);
		}
		public Schema_alterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_alter; }
	}

	public final Schema_alterContext schema_alter() throws RecognitionException {
		Schema_alterContext _localctx = new Schema_alterContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_schema_alter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1341);
			match(ALTER);
			setState(1374);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,97,_ctx) ) {
			case 1:
				{
				setState(1342);
				alter_function_statement();
				}
				break;
			case 2:
				{
				setState(1343);
				alter_schema_statement();
				}
				break;
			case 3:
				{
				setState(1344);
				alter_language_statement();
				}
				break;
			case 4:
				{
				setState(1345);
				alter_table_statement();
				}
				break;
			case 5:
				{
				setState(1346);
				alter_index_statement();
				}
				break;
			case 6:
				{
				setState(1347);
				alter_default_privileges();
				}
				break;
			case 7:
				{
				setState(1348);
				alter_sequence_statement();
				}
				break;
			case 8:
				{
				setState(1349);
				alter_view_statement();
				}
				break;
			case 9:
				{
				setState(1350);
				alter_event_trigger();
				}
				break;
			case 10:
				{
				setState(1351);
				alter_type_statement();
				}
				break;
			case 11:
				{
				setState(1352);
				alter_domain_statement();
				}
				break;
			case 12:
				{
				setState(1353);
				alter_server_statement();
				}
				break;
			case 13:
				{
				setState(1354);
				alter_fts_statement();
				}
				break;
			case 14:
				{
				setState(1355);
				alter_collation();
				}
				break;
			case 15:
				{
				setState(1356);
				alter_user_mapping();
				}
				break;
			case 16:
				{
				setState(1357);
				alter_user_or_role();
				}
				break;
			case 17:
				{
				setState(1358);
				alter_group();
				}
				break;
			case 18:
				{
				setState(1359);
				alter_tablespace();
				}
				break;
			case 19:
				{
				setState(1360);
				alter_statistics();
				}
				break;
			case 20:
				{
				setState(1361);
				alter_foreign_data_wrapper();
				}
				break;
			case 21:
				{
				setState(1362);
				alter_operator_statement();
				}
				break;
			case 22:
				{
				setState(1363);
				alter_aggregate_statement();
				}
				break;
			case 23:
				{
				setState(1364);
				alter_extension_statement();
				}
				break;
			case 24:
				{
				setState(1365);
				alter_policy_statement();
				}
				break;
			case 25:
				{
				setState(1366);
				alter_subscription_statement();
				}
				break;
			case 26:
				{
				setState(1367);
				alter_trigger_statement();
				}
				break;
			case 27:
				{
				setState(1368);
				alter_rule_statement();
				}
				break;
			case 28:
				{
				setState(1369);
				alter_operator_family_statement();
				}
				break;
			case 29:
				{
				setState(1370);
				alter_operator_class_statement();
				}
				break;
			case 30:
				{
				setState(1371);
				alter_conversion_statement();
				}
				break;
			case 31:
				{
				setState(1372);
				alter_publication_statement();
				}
				break;
			case 32:
				{
				setState(1373);
				alter_owner();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_dropContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PLpgSQLParser.DROP, 0); }
		public Drop_function_statementContext drop_function_statement() {
			return getRuleContext(Drop_function_statementContext.class,0);
		}
		public Drop_trigger_statementContext drop_trigger_statement() {
			return getRuleContext(Drop_trigger_statementContext.class,0);
		}
		public Drop_rule_statementContext drop_rule_statement() {
			return getRuleContext(Drop_rule_statementContext.class,0);
		}
		public Drop_policy_statementContext drop_policy_statement() {
			return getRuleContext(Drop_policy_statementContext.class,0);
		}
		public Drop_cast_statementContext drop_cast_statement() {
			return getRuleContext(Drop_cast_statementContext.class,0);
		}
		public Drop_operator_family_statementContext drop_operator_family_statement() {
			return getRuleContext(Drop_operator_family_statementContext.class,0);
		}
		public Drop_operator_class_statementContext drop_operator_class_statement() {
			return getRuleContext(Drop_operator_class_statementContext.class,0);
		}
		public Drop_statementsContext drop_statements() {
			return getRuleContext(Drop_statementsContext.class,0);
		}
		public Drop_user_mappingContext drop_user_mapping() {
			return getRuleContext(Drop_user_mappingContext.class,0);
		}
		public Drop_ownedContext drop_owned() {
			return getRuleContext(Drop_ownedContext.class,0);
		}
		public Drop_operator_statementContext drop_operator_statement() {
			return getRuleContext(Drop_operator_statementContext.class,0);
		}
		public Schema_dropContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_drop; }
	}

	public final Schema_dropContext schema_drop() throws RecognitionException {
		Schema_dropContext _localctx = new Schema_dropContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_schema_drop);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1376);
			match(DROP);
			setState(1388);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,98,_ctx) ) {
			case 1:
				{
				setState(1377);
				drop_function_statement();
				}
				break;
			case 2:
				{
				setState(1378);
				drop_trigger_statement();
				}
				break;
			case 3:
				{
				setState(1379);
				drop_rule_statement();
				}
				break;
			case 4:
				{
				setState(1380);
				drop_policy_statement();
				}
				break;
			case 5:
				{
				setState(1381);
				drop_cast_statement();
				}
				break;
			case 6:
				{
				setState(1382);
				drop_operator_family_statement();
				}
				break;
			case 7:
				{
				setState(1383);
				drop_operator_class_statement();
				}
				break;
			case 8:
				{
				setState(1384);
				drop_statements();
				}
				break;
			case 9:
				{
				setState(1385);
				drop_user_mapping();
				}
				break;
			case 10:
				{
				setState(1386);
				drop_owned();
				}
				break;
			case 11:
				{
				setState(1387);
				drop_operator_statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_importContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode IMPORT() { return getToken(PLpgSQLParser.IMPORT, 0); }
		public TerminalNode FOREIGN() { return getToken(PLpgSQLParser.FOREIGN, 0); }
		public TerminalNode SCHEMA() { return getToken(PLpgSQLParser.SCHEMA, 0); }
		public TerminalNode FROM() { return getToken(PLpgSQLParser.FROM, 0); }
		public TerminalNode SERVER() { return getToken(PLpgSQLParser.SERVER, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode INTO() { return getToken(PLpgSQLParser.INTO, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public Define_foreign_optionsContext define_foreign_options() {
			return getRuleContext(Define_foreign_optionsContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(PLpgSQLParser.LIMIT, 0); }
		public TerminalNode TO() { return getToken(PLpgSQLParser.TO, 0); }
		public TerminalNode EXCEPT() { return getToken(PLpgSQLParser.EXCEPT, 0); }
		public Schema_importContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_import; }
	}

	public final Schema_importContext schema_import() throws RecognitionException {
		Schema_importContext _localctx = new Schema_importContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_schema_import);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1390);
			match(IMPORT);
			setState(1391);
			match(FOREIGN);
			setState(1392);
			match(SCHEMA);
			setState(1393);
			((Schema_importContext)_localctx).name = identifier();
			setState(1403);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCEPT || _la==LIMIT) {
				{
				setState(1397);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LIMIT:
					{
					setState(1394);
					match(LIMIT);
					setState(1395);
					match(TO);
					}
					break;
				case EXCEPT:
					{
					setState(1396);
					match(EXCEPT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1399);
				match(LEFT_PAREN);
				setState(1400);
				identifier_list();
				setState(1401);
				match(RIGHT_PAREN);
				}
			}

			setState(1405);
			match(FROM);
			setState(1406);
			match(SERVER);
			setState(1407);
			identifier();
			setState(1408);
			match(INTO);
			setState(1409);
			identifier();
			setState(1411);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTIONS) {
				{
				setState(1410);
				define_foreign_options();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_function_statementContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(PLpgSQLParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(PLpgSQLParser.PROCEDURE, 0); }
		public Rename_toContext rename_to() {
			return getRuleContext(Rename_toContext.class,0);
		}
		public Set_schemaContext set_schema() {
			return getRuleContext(Set_schemaContext.class,0);
		}
		public TerminalNode DEPENDS() { return getToken(PLpgSQLParser.DEPENDS, 0); }
		public TerminalNode ON() { return getToken(PLpgSQLParser.ON, 0); }
		public TerminalNode EXTENSION() { return getToken(PLpgSQLParser.EXTENSION, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public Function_parametersContext function_parameters() {
			return getRuleContext(Function_parametersContext.class,0);
		}
		public List<Function_actions_commonContext> function_actions_common() {
			return getRuleContexts(Function_actions_commonContext.class);
		}
		public Function_actions_commonContext function_actions_common(int i) {
			return getRuleContext(Function_actions_commonContext.class,i);
		}
		public List<TerminalNode> RESET() { return getTokens(PLpgSQLParser.RESET); }
		public TerminalNode RESET(int i) {
			return getToken(PLpgSQLParser.RESET, i);
		}
		public TerminalNode RESTRICT() { return getToken(PLpgSQLParser.RESTRICT, 0); }
		public List<TerminalNode> ALL() { return getTokens(PLpgSQLParser.ALL); }
		public TerminalNode ALL(int i) {
			return getToken(PLpgSQLParser.ALL, i);
		}
		public List<TerminalNode> DOT() { return getTokens(PLpgSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(PLpgSQLParser.DOT, i);
		}
		public Alter_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_function_statement; }
	}

	public final Alter_function_statementContext alter_function_statement() throws RecognitionException {
		Alter_function_statementContext _localctx = new Alter_function_statementContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_alter_function_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1413);
			_la = _input.LA(1);
			if ( !(_la==FUNCTION || _la==PROCEDURE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1415);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,102,_ctx) ) {
			case 1:
				{
				setState(1414);
				function_parameters();
				}
				break;
			}
			setState(1441);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,108,_ctx) ) {
			case 1:
				{
				setState(1428); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(1428);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CALLED:
					case COST:
					case EXTERNAL:
					case IMMUTABLE:
					case LANGUAGE:
					case LEAKPROOF:
					case PARALLEL:
					case RETURNS:
					case ROWS:
					case SECURITY:
					case SET:
					case STABLE:
					case STRICT:
					case SUPPORT:
					case TRANSFORM:
					case VOLATILE:
					case AS:
					case NOT:
					case WINDOW:
						{
						setState(1417);
						function_actions_common();
						}
						break;
					case RESET:
						{
						setState(1418);
						match(RESET);
						setState(1426);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case ABORT:
						case ABSOLUTE:
						case ACCESS:
						case ACTION:
						case ADD:
						case ADMIN:
						case AFTER:
						case AGGREGATE:
						case ALSO:
						case ALTER:
						case ALWAYS:
						case ASSERTION:
						case ASSIGNMENT:
						case AT:
						case ATTACH:
						case ATTRIBUTE:
						case BACKWARD:
						case BEFORE:
						case BEGIN:
						case BY:
						case CACHE:
						case CALL:
						case CALLED:
						case CASCADE:
						case CASCADED:
						case CATALOG:
						case CHAIN:
						case CHARACTERISTICS:
						case CHECKPOINT:
						case CLASS:
						case CLOSE:
						case CLUSTER:
						case COLUMNS:
						case COMMENT:
						case COMMENTS:
						case COMMIT:
						case COMMITTED:
						case CONFIGURATION:
						case CONFLICT:
						case CONNECTION:
						case CONSTRAINTS:
						case CONTENT:
						case CONTINUE:
						case CONVERSION:
						case COPY:
						case COST:
						case CSV:
						case CUBE:
						case CURRENT:
						case CURSOR:
						case CYCLE:
						case DATA:
						case DATABASE:
						case DAY:
						case DEALLOCATE:
						case DECLARE:
						case DEFAULTS:
						case DEFERRED:
						case DEFINER:
						case DELETE:
						case DELIMITER:
						case DELIMITERS:
						case DEPENDS:
						case DETACH:
						case DICTIONARY:
						case DISABLE:
						case DISCARD:
						case DOCUMENT:
						case DOMAIN:
						case DOUBLE:
						case DROP:
						case EACH:
						case ENABLE:
						case ENCODING:
						case ENCRYPTED:
						case ENUM:
						case ESCAPE:
						case EVENT:
						case EXCLUDE:
						case EXCLUDING:
						case EXCLUSIVE:
						case EXECUTE:
						case EXPLAIN:
						case EXTENSION:
						case EXTERNAL:
						case FAMILY:
						case FILTER:
						case FIRST:
						case FOLLOWING:
						case FORCE:
						case FORWARD:
						case FUNCTION:
						case FUNCTIONS:
						case GENERATED:
						case GLOBAL:
						case GRANTED:
						case GROUPS:
						case HANDLER:
						case HEADER:
						case HOLD:
						case HOUR:
						case IDENTITY:
						case IF:
						case IMMEDIATE:
						case IMMUTABLE:
						case IMPLICIT:
						case IMPORT:
						case INCLUDE:
						case INCLUDING:
						case INCREMENT:
						case INDEX:
						case INDEXES:
						case INHERIT:
						case INHERITS:
						case INLINE:
						case INPUT:
						case INSENSITIVE:
						case INSERT:
						case INSTEAD:
						case INVOKER:
						case ISOLATION:
						case KEY:
						case LABEL:
						case LANGUAGE:
						case LARGE:
						case LAST:
						case LEAKPROOF:
						case LEVEL:
						case LISTEN:
						case LOAD:
						case LOCAL:
						case LOCATION:
						case LOCK:
						case LOCKED:
						case LOGGED:
						case MAPPING:
						case MATCH:
						case MATERIALIZED:
						case MAXVALUE:
						case METHOD:
						case MINUTE:
						case MINVALUE:
						case MODE:
						case MONTH:
						case MOVE:
						case NAME:
						case NAMES:
						case NEW:
						case NEXT:
						case NO:
						case NOTHING:
						case NOTIFY:
						case NOWAIT:
						case NULLS:
						case OBJECT:
						case OF:
						case OFF:
						case OIDS:
						case OLD:
						case OPERATOR:
						case OPTION:
						case OPTIONS:
						case ORDINALITY:
						case OTHERS:
						case OVER:
						case OVERRIDING:
						case OWNED:
						case OWNER:
						case PARALLEL:
						case PARSER:
						case PARTIAL:
						case PARTITION:
						case PASSING:
						case PASSWORD:
						case PLANS:
						case POLICY:
						case PRECEDING:
						case PREPARE:
						case PREPARED:
						case PRESERVE:
						case PRIOR:
						case PRIVILEGES:
						case PROCEDURAL:
						case PROCEDURE:
						case PROCEDURES:
						case PROGRAM:
						case PUBLICATION:
						case QUOTE:
						case RANGE:
						case READ:
						case REASSIGN:
						case RECHECK:
						case RECURSIVE:
						case REF:
						case REFERENCING:
						case REFRESH:
						case REINDEX:
						case RELATIVE:
						case RELEASE:
						case RENAME:
						case REPEATABLE:
						case REPLACE:
						case REPLICA:
						case RESET:
						case RESTART:
						case RESTRICT:
						case RETURNS:
						case REVOKE:
						case ROLE:
						case ROLLBACK:
						case ROLLUP:
						case ROUTINE:
						case ROUTINES:
						case ROWS:
						case RULE:
						case SAVEPOINT:
						case SCHEMA:
						case SCHEMAS:
						case SCROLL:
						case SEARCH:
						case SECOND:
						case SECURITY:
						case SEQUENCE:
						case SEQUENCES:
						case SERIALIZABLE:
						case SERVER:
						case SESSION:
						case SET:
						case SETS:
						case SHARE:
						case SHOW:
						case SIMPLE:
						case SKIP_:
						case SNAPSHOT:
						case SQL:
						case STABLE:
						case STANDALONE:
						case START:
						case STATEMENT:
						case STATISTICS:
						case STDIN:
						case STDOUT:
						case STORAGE:
						case STORED:
						case STRICT:
						case STRIP:
						case SUBSCRIPTION:
						case SUPPORT:
						case SYSID:
						case SYSTEM:
						case TABLES:
						case TABLESPACE:
						case TEMP:
						case TEMPLATE:
						case TEMPORARY:
						case TEXT:
						case TIES:
						case TRANSACTION:
						case TRANSFORM:
						case TRIGGER:
						case TRUNCATE:
						case TRUSTED:
						case TYPE:
						case TYPES:
						case UNBOUNDED:
						case UNCOMMITTED:
						case UNENCRYPTED:
						case UNKNOWN:
						case UNLISTEN:
						case UNLOGGED:
						case UNTIL:
						case UPDATE:
						case VACUUM:
						case VALID:
						case VALIDATE:
						case VALIDATOR:
						case VALUE:
						case VARYING:
						case VERSION:
						case VIEW:
						case VIEWS:
						case VOLATILE:
						case WHITESPACE:
						case WITHIN:
						case WITHOUT:
						case WORK:
						case WRAPPER:
						case WRITE:
						case XML:
						case YEAR:
						case YES:
						case ZONE:
						case BETWEEN:
						case BIGINT:
						case BIT:
						case BOOLEAN:
						case CHAR:
						case CHARACTER:
						case COALESCE:
						case DEC:
						case DECIMAL:
						case EXISTS:
						case EXTRACT:
						case FLOAT:
						case GREATEST:
						case GROUPING:
						case INOUT:
						case INT:
						case INTEGER:
						case INTERVAL:
						case LEAST:
						case NATIONAL:
						case NCHAR:
						case NONE:
						case NULLIF:
						case NUMERIC:
						case OUT:
						case OVERLAY:
						case POSITION:
						case PRECISION:
						case REAL:
						case ROW:
						case SETOF:
						case SMALLINT:
						case SUBSTRING:
						case TIME:
						case TIMESTAMP:
						case TREAT:
						case TRIM:
						case VALUES:
						case VARCHAR:
						case XMLATTRIBUTES:
						case XMLCONCAT:
						case XMLELEMENT:
						case XMLEXISTS:
						case XMLFOREST:
						case XMLNAMESPACES:
						case XMLPARSE:
						case XMLPI:
						case XMLROOT:
						case XMLSERIALIZE:
						case XMLTABLE:
						case ALIGNMENT:
						case BASETYPE:
						case BUFFERS:
						case BYPASSRLS:
						case CANONICAL:
						case CATEGORY:
						case COLLATABLE:
						case COMBINEFUNC:
						case COMMUTATOR:
						case CONNECT:
						case COSTS:
						case CREATEDB:
						case CREATEROLE:
						case DESERIALFUNC:
						case DETERMINISTIC:
						case DISABLE_PAGE_SKIPPING:
						case ELEMENT:
						case EXTENDED:
						case FINALFUNC:
						case FINALFUNC_EXTRA:
						case FINALFUNC_MODIFY:
						case FORCE_NOT_NULL:
						case FORCE_NULL:
						case FORCE_QUOTE:
						case FORMAT:
						case GETTOKEN:
						case HASH:
						case HASHES:
						case HEADLINE:
						case HYPOTHETICAL:
						case INDEX_CLEANUP:
						case INIT:
						case INITCOND:
						case INTERNALLENGTH:
						case JSON:
						case LC_COLLATE:
						case LC_CTYPE:
						case LEFTARG:
						case LEXIZE:
						case LEXTYPES:
						case LIST:
						case LOCALE:
						case LOGIN:
						case MAIN:
						case MERGES:
						case MFINALFUNC:
						case MFINALFUNC_EXTRA:
						case MFINALFUNC_MODIFY:
						case MINITCOND:
						case MINVFUNC:
						case MODULUS:
						case MSFUNC:
						case MSSPACE:
						case MSTYPE:
						case NEGATOR:
						case NOBYPASSRLS:
						case NOCREATEDB:
						case NOCREATEROLE:
						case NOINHERIT:
						case NOLOGIN:
						case NOREPLICATION:
						case NOSUPERUSER:
						case OUTPUT:
						case PASSEDBYVALUE:
						case PATH:
						case PERMISSIVE:
						case PLAIN:
						case PREFERRED:
						case PROVIDER:
						case READ_ONLY:
						case READ_WRITE:
						case RECEIVE:
						case REMAINDER:
						case REPLICATION:
						case RESTRICTED:
						case RESTRICTIVE:
						case RIGHTARG:
						case SAFE:
						case SEND:
						case SERIALFUNC:
						case SETTINGS:
						case SFUNC:
						case SHAREABLE:
						case SKIP_LOCKED:
						case SORTOP:
						case SSPACE:
						case STYPE:
						case SUBTYPE_DIFF:
						case SUBTYPE_OPCLASS:
						case SUBTYPE:
						case SUMMARY:
						case SUPERUSER:
						case TIMING:
						case TYPMOD_IN:
						case TYPMOD_OUT:
						case UNSAFE:
						case USAGE:
						case VARIABLE:
						case YAML:
						case ALIAS:
						case ASSERT:
						case CONSTANT:
						case DATATYPE:
						case DEBUG:
						case DETAIL:
						case DIAGNOSTICS:
						case ELSEIF:
						case ELSIF:
						case ERRCODE:
						case EXIT:
						case EXCEPTION:
						case FOREACH:
						case GET:
						case HINT:
						case INFO:
						case LOG:
						case LOOP:
						case MESSAGE:
						case NOTICE:
						case OPEN:
						case PERFORM:
						case QUERY:
						case RAISE:
						case RECORD:
						case RETURN:
						case REVERSE:
						case ROWTYPE:
						case SLICE:
						case SQLSTATE:
						case STACKED:
						case WARNING:
						case WHILE:
						case Identifier:
						case QuotedIdentifier:
							{
							setState(1422);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,103,_ctx) ) {
							case 1:
								{
								setState(1419);
								identifier();
								setState(1420);
								match(DOT);
								}
								break;
							}
							setState(1424);
							identifier();
							}
							break;
						case ALL:
							{
							setState(1425);
							match(ALL);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(1430); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CALLED || _la==COST || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (EXTERNAL - 85)) | (1L << (IMMUTABLE - 85)) | (1L << (LANGUAGE - 85)) | (1L << (LEAKPROOF - 85)))) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & ((1L << (PARALLEL - 169)) | (1L << (RESET - 169)) | (1L << (RETURNS - 169)) | (1L << (ROWS - 169)) | (1L << (SECURITY - 169)) | (1L << (SET - 169)))) != 0) || ((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & ((1L << (STABLE - 236)) | (1L << (STRICT - 236)) | (1L << (SUPPORT - 236)) | (1L << (TRANSFORM - 236)) | (1L << (VOLATILE - 236)))) != 0) || _la==AS || _la==NOT || _la==WINDOW );
				setState(1433);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RESTRICT) {
					{
					setState(1432);
					match(RESTRICT);
					}
				}

				}
				break;
			case 2:
				{
				setState(1435);
				rename_to();
				}
				break;
			case 3:
				{
				setState(1436);
				set_schema();
				}
				break;
			case 4:
				{
				setState(1437);
				match(DEPENDS);
				setState(1438);
				match(ON);
				setState(1439);
				match(EXTENSION);
				setState(1440);
				identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_aggregate_statementContext extends ParserRuleContext {
		public TerminalNode AGGREGATE() { return getToken(PLpgSQLParser.AGGREGATE, 0); }
		public Function_parametersContext function_parameters() {
			return getRuleContext(Function_parametersContext.class,0);
		}
		public Rename_toContext rename_to() {
			return getRuleContext(Rename_toContext.class,0);
		}
		public Set_schemaContext set_schema() {
			return getRuleContext(Set_schemaContext.class,0);
		}
		public Alter_aggregate_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_aggregate_statement; }
	}

	public final Alter_aggregate_statementContext alter_aggregate_statement() throws RecognitionException {
		Alter_aggregate_statementContext _localctx = new Alter_aggregate_statementContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_alter_aggregate_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1443);
			match(AGGREGATE);
			setState(1444);
			function_parameters();
			setState(1447);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RENAME:
				{
				setState(1445);
				rename_to();
				}
				break;
			case SET:
				{
				setState(1446);
				set_schema();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_extension_statementContext extends ParserRuleContext {
		public TerminalNode EXTENSION() { return getToken(PLpgSQLParser.EXTENSION, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Alter_extension_actionContext alter_extension_action() {
			return getRuleContext(Alter_extension_actionContext.class,0);
		}
		public Alter_extension_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_extension_statement; }
	}

	public final Alter_extension_statementContext alter_extension_statement() throws RecognitionException {
		Alter_extension_statementContext _localctx = new Alter_extension_statementContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_alter_extension_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1449);
			match(EXTENSION);
			setState(1450);
			identifier();
			setState(1451);
			alter_extension_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_extension_actionContext extends ParserRuleContext {
		public Set_schemaContext set_schema() {
			return getRuleContext(Set_schemaContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(PLpgSQLParser.UPDATE, 0); }
		public TerminalNode TO() { return getToken(PLpgSQLParser.TO, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Character_stringContext character_string() {
			return getRuleContext(Character_stringContext.class,0);
		}
		public Extension_member_objectContext extension_member_object() {
			return getRuleContext(Extension_member_objectContext.class,0);
		}
		public TerminalNode ADD() { return getToken(PLpgSQLParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(PLpgSQLParser.DROP, 0); }
		public Alter_extension_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_extension_action; }
	}

	public final Alter_extension_actionContext alter_extension_action() throws RecognitionException {
		Alter_extension_actionContext _localctx = new Alter_extension_actionContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_alter_extension_action);
		int _la;
		try {
			setState(1464);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(1453);
				set_schema();
				}
				break;
			case UPDATE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1454);
				match(UPDATE);
				setState(1460);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TO) {
					{
					setState(1455);
					match(TO);
					setState(1458);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ABORT:
					case ABSOLUTE:
					case ACCESS:
					case ACTION:
					case ADD:
					case ADMIN:
					case AFTER:
					case AGGREGATE:
					case ALSO:
					case ALTER:
					case ALWAYS:
					case ASSERTION:
					case ASSIGNMENT:
					case AT:
					case ATTACH:
					case ATTRIBUTE:
					case BACKWARD:
					case BEFORE:
					case BEGIN:
					case BY:
					case CACHE:
					case CALL:
					case CALLED:
					case CASCADE:
					case CASCADED:
					case CATALOG:
					case CHAIN:
					case CHARACTERISTICS:
					case CHECKPOINT:
					case CLASS:
					case CLOSE:
					case CLUSTER:
					case COLUMNS:
					case COMMENT:
					case COMMENTS:
					case COMMIT:
					case COMMITTED:
					case CONFIGURATION:
					case CONFLICT:
					case CONNECTION:
					case CONSTRAINTS:
					case CONTENT:
					case CONTINUE:
					case CONVERSION:
					case COPY:
					case COST:
					case CSV:
					case CUBE:
					case CURRENT:
					case CURSOR:
					case CYCLE:
					case DATA:
					case DATABASE:
					case DAY:
					case DEALLOCATE:
					case DECLARE:
					case DEFAULTS:
					case DEFERRED:
					case DEFINER:
					case DELETE:
					case DELIMITER:
					case DELIMITERS:
					case DEPENDS:
					case DETACH:
					case DICTIONARY:
					case DISABLE:
					case DISCARD:
					case DOCUMENT:
					case DOMAIN:
					case DOUBLE:
					case DROP:
					case EACH:
					case ENABLE:
					case ENCODING:
					case ENCRYPTED:
					case ENUM:
					case ESCAPE:
					case EVENT:
					case EXCLUDE:
					case EXCLUDING:
					case EXCLUSIVE:
					case EXECUTE:
					case EXPLAIN:
					case EXTENSION:
					case EXTERNAL:
					case FAMILY:
					case FILTER:
					case FIRST:
					case FOLLOWING:
					case FORCE:
					case FORWARD:
					case FUNCTION:
					case FUNCTIONS:
					case GENERATED:
					case GLOBAL:
					case GRANTED:
					case GROUPS:
					case HANDLER:
					case HEADER:
					case HOLD:
					case HOUR:
					case IDENTITY:
					case IF:
					case IMMEDIATE:
					case IMMUTABLE:
					case IMPLICIT:
					case IMPORT:
					case INCLUDE:
					case INCLUDING:
					case INCREMENT:
					case INDEX:
					case INDEXES:
					case INHERIT:
					case INHERITS:
					case INLINE:
					case INPUT:
					case INSENSITIVE:
					case INSERT:
					case INSTEAD:
					case INVOKER:
					case ISOLATION:
					case KEY:
					case LABEL:
					case LANGUAGE:
					case LARGE:
					case LAST:
					case LEAKPROOF:
					case LEVEL:
					case LISTEN:
					case LOAD:
					case LOCAL:
					case LOCATION:
					case LOCK:
					case LOCKED:
					case LOGGED:
					case MAPPING:
					case MATCH:
					case MATERIALIZED:
					case MAXVALUE:
					case METHOD:
					case MINUTE:
					case MINVALUE:
					case MODE:
					case MONTH:
					case MOVE:
					case NAME:
					case NAMES:
					case NEW:
					case NEXT:
					case NO:
					case NOTHING:
					case NOTIFY:
					case NOWAIT:
					case NULLS:
					case OBJECT:
					case OF:
					case OFF:
					case OIDS:
					case OLD:
					case OPERATOR:
					case OPTION:
					case OPTIONS:
					case ORDINALITY:
					case OTHERS:
					case OVER:
					case OVERRIDING:
					case OWNED:
					case OWNER:
					case PARALLEL:
					case PARSER:
					case PARTIAL:
					case PARTITION:
					case PASSING:
					case PASSWORD:
					case PLANS:
					case POLICY:
					case PRECEDING:
					case PREPARE:
					case PREPARED:
					case PRESERVE:
					case PRIOR:
					case PRIVILEGES:
					case PROCEDURAL:
					case PROCEDURE:
					case PROCEDURES:
					case PROGRAM:
					case PUBLICATION:
					case QUOTE:
					case RANGE:
					case READ:
					case REASSIGN:
					case RECHECK:
					case RECURSIVE:
					case REF:
					case REFERENCING:
					case REFRESH:
					case REINDEX:
					case RELATIVE:
					case RELEASE:
					case RENAME:
					case REPEATABLE:
					case REPLACE:
					case REPLICA:
					case RESET:
					case RESTART:
					case RESTRICT:
					case RETURNS:
					case REVOKE:
					case ROLE:
					case ROLLBACK:
					case ROLLUP:
					case ROUTINE:
					case ROUTINES:
					case ROWS:
					case RULE:
					case SAVEPOINT:
					case SCHEMA:
					case SCHEMAS:
					case SCROLL:
					case SEARCH:
					case SECOND:
					case SECURITY:
					case SEQUENCE:
					case SEQUENCES:
					case SERIALIZABLE:
					case SERVER:
					case SESSION:
					case SET:
					case SETS:
					case SHARE:
					case SHOW:
					case SIMPLE:
					case SKIP_:
					case SNAPSHOT:
					case SQL:
					case STABLE:
					case STANDALONE:
					case START:
					case STATEMENT:
					case STATISTICS:
					case STDIN:
					case STDOUT:
					case STORAGE:
					case STORED:
					case STRICT:
					case STRIP:
					case SUBSCRIPTION:
					case SUPPORT:
					case SYSID:
					case SYSTEM:
					case TABLES:
					case TABLESPACE:
					case TEMP:
					case TEMPLATE:
					case TEMPORARY:
					case TEXT:
					case TIES:
					case TRANSACTION:
					case TRANSFORM:
					case TRIGGER:
					case TRUNCATE:
					case TRUSTED:
					case TYPE:
					case TYPES:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNENCRYPTED:
					case UNKNOWN:
					case UNLISTEN:
					case UNLOGGED:
					case UNTIL:
					case UPDATE:
					case VACUUM:
					case VALID:
					case VALIDATE:
					case VALIDATOR:
					case VALUE:
					case VARYING:
					case VERSION:
					case VIEW:
					case VIEWS:
					case VOLATILE:
					case WHITESPACE:
					case WITHIN:
					case WITHOUT:
					case WORK:
					case WRAPPER:
					case WRITE:
					case XML:
					case YEAR:
					case YES:
					case ZONE:
					case BETWEEN:
					case BIGINT:
					case BIT:
					case BOOLEAN:
					case CHAR:
					case CHARACTER:
					case COALESCE:
					case DEC:
					case DECIMAL:
					case EXISTS:
					case EXTRACT:
					case FLOAT:
					case GREATEST:
					case GROUPING:
					case INOUT:
					case INT:
					case INTEGER:
					case INTERVAL:
					case LEAST:
					case NATIONAL:
					case NCHAR:
					case NONE:
					case NULLIF:
					case NUMERIC:
					case OUT:
					case OVERLAY:
					case POSITION:
					case PRECISION:
					case REAL:
					case ROW:
					case SETOF:
					case SMALLINT:
					case SUBSTRING:
					case TIME:
					case TIMESTAMP:
					case TREAT:
					case TRIM:
					case VALUES:
					case VARCHAR:
					case XMLATTRIBUTES:
					case XMLCONCAT:
					case XMLELEMENT:
					case XMLEXISTS:
					case XMLFOREST:
					case XMLNAMESPACES:
					case XMLPARSE:
					case XMLPI:
					case XMLROOT:
					case XMLSERIALIZE:
					case XMLTABLE:
					case ALIGNMENT:
					case BASETYPE:
					case BUFFERS:
					case BYPASSRLS:
					case CANONICAL:
					case CATEGORY:
					case COLLATABLE:
					case COMBINEFUNC:
					case COMMUTATOR:
					case CONNECT:
					case COSTS:
					case CREATEDB:
					case CREATEROLE:
					case DESERIALFUNC:
					case DETERMINISTIC:
					case DISABLE_PAGE_SKIPPING:
					case ELEMENT:
					case EXTENDED:
					case FINALFUNC:
					case FINALFUNC_EXTRA:
					case FINALFUNC_MODIFY:
					case FORCE_NOT_NULL:
					case FORCE_NULL:
					case FORCE_QUOTE:
					case FORMAT:
					case GETTOKEN:
					case HASH:
					case HASHES:
					case HEADLINE:
					case HYPOTHETICAL:
					case INDEX_CLEANUP:
					case INIT:
					case INITCOND:
					case INTERNALLENGTH:
					case JSON:
					case LC_COLLATE:
					case LC_CTYPE:
					case LEFTARG:
					case LEXIZE:
					case LEXTYPES:
					case LIST:
					case LOCALE:
					case LOGIN:
					case MAIN:
					case MERGES:
					case MFINALFUNC:
					case MFINALFUNC_EXTRA:
					case MFINALFUNC_MODIFY:
					case MINITCOND:
					case MINVFUNC:
					case MODULUS:
					case MSFUNC:
					case MSSPACE:
					case MSTYPE:
					case NEGATOR:
					case NOBYPASSRLS:
					case NOCREATEDB:
					case NOCREATEROLE:
					case NOINHERIT:
					case NOLOGIN:
					case NOREPLICATION:
					case NOSUPERUSER:
					case OUTPUT:
					case PASSEDBYVALUE:
					case PATH:
					case PERMISSIVE:
					case PLAIN:
					case PREFERRED:
					case PROVIDER:
					case READ_ONLY:
					case READ_WRITE:
					case RECEIVE:
					case REMAINDER:
					case REPLICATION:
					case RESTRICTED:
					case RESTRICTIVE:
					case RIGHTARG:
					case SAFE:
					case SEND:
					case SERIALFUNC:
					case SETTINGS:
					case SFUNC:
					case SHAREABLE:
					case SKIP_LOCKED:
					case SORTOP:
					case SSPACE:
					case STYPE:
					case SUBTYPE_DIFF:
					case SUBTYPE_OPCLASS:
					case SUBTYPE:
					case SUMMARY:
					case SUPERUSER:
					case TIMING:
					case TYPMOD_IN:
					case TYPMOD_OUT:
					case UNSAFE:
					case USAGE:
					case VARIABLE:
					case YAML:
					case ALIAS:
					case ASSERT:
					case CONSTANT:
					case DATATYPE:
					case DEBUG:
					case DETAIL:
					case DIAGNOSTICS:
					case ELSEIF:
					case ELSIF:
					case ERRCODE:
					case EXIT:
					case EXCEPTION:
					case FOREACH:
					case GET:
					case HINT:
					case INFO:
					case LOG:
					case LOOP:
					case MESSAGE:
					case NOTICE:
					case OPEN:
					case PERFORM:
					case QUERY:
					case RAISE:
					case RECORD:
					case RETURN:
					case REVERSE:
					case ROWTYPE:
					case SLICE:
					case SQLSTATE:
					case STACKED:
					case WARNING:
					case WHILE:
					case Identifier:
					case QuotedIdentifier:
						{
						setState(1456);
						identifier();
						}
						break;
					case Character_String_Literal:
					case BeginDollarStringConstant:
						{
						setState(1457);
						character_string();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
				break;
			case ADD:
			case DROP:
				enterOuterAlt(_localctx, 3);
				{
				setState(1462);
				_la = _input.LA(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1463);
				extension_member_object();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Extension_member_objectContext extends ParserRuleContext {
		public TerminalNode ACCESS() { return getToken(PLpgSQLParser.ACCESS, 0); }
		public TerminalNode METHOD() { return getToken(PLpgSQLParser.METHOD, 0); }
		public List<Schema_qualified_nameContext> schema_qualified_name() {
			return getRuleContexts(Schema_qualified_nameContext.class);
		}
		public Schema_qualified_nameContext schema_qualified_name(int i) {
			return getRuleContext(Schema_qualified_nameContext.class,i);
		}
		public TerminalNode AGGREGATE() { return getToken(PLpgSQLParser.AGGREGATE, 0); }
		public Function_parametersContext function_parameters() {
			return getRuleContext(Function_parametersContext.class,0);
		}
		public TerminalNode CAST() { return getToken(PLpgSQLParser.CAST, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public TerminalNode AS() { return getToken(PLpgSQLParser.AS, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public TerminalNode COLLATION() { return getToken(PLpgSQLParser.COLLATION, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode CONVERSION() { return getToken(PLpgSQLParser.CONVERSION, 0); }
		public TerminalNode DOMAIN() { return getToken(PLpgSQLParser.DOMAIN, 0); }
		public TerminalNode EVENT() { return getToken(PLpgSQLParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(PLpgSQLParser.TRIGGER, 0); }
		public TerminalNode FOREIGN() { return getToken(PLpgSQLParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(PLpgSQLParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(PLpgSQLParser.WRAPPER, 0); }
		public TerminalNode TABLE() { return getToken(PLpgSQLParser.TABLE, 0); }
		public TerminalNode FUNCTION() { return getToken(PLpgSQLParser.FUNCTION, 0); }
		public TerminalNode VIEW() { return getToken(PLpgSQLParser.VIEW, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PLpgSQLParser.MATERIALIZED, 0); }
		public TerminalNode OPERATOR() { return getToken(PLpgSQLParser.OPERATOR, 0); }
		public Operator_nameContext operator_name() {
			return getRuleContext(Operator_nameContext.class,0);
		}
		public TerminalNode CLASS() { return getToken(PLpgSQLParser.CLASS, 0); }
		public TerminalNode USING() { return getToken(PLpgSQLParser.USING, 0); }
		public TerminalNode FAMILY() { return getToken(PLpgSQLParser.FAMILY, 0); }
		public TerminalNode LANGUAGE() { return getToken(PLpgSQLParser.LANGUAGE, 0); }
		public TerminalNode PROCEDURAL() { return getToken(PLpgSQLParser.PROCEDURAL, 0); }
		public TerminalNode PROCEDURE() { return getToken(PLpgSQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PLpgSQLParser.ROUTINE, 0); }
		public TerminalNode SCHEMA() { return getToken(PLpgSQLParser.SCHEMA, 0); }
		public TerminalNode SEQUENCE() { return getToken(PLpgSQLParser.SEQUENCE, 0); }
		public TerminalNode SERVER() { return getToken(PLpgSQLParser.SERVER, 0); }
		public TerminalNode TEXT() { return getToken(PLpgSQLParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(PLpgSQLParser.SEARCH, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PLpgSQLParser.CONFIGURATION, 0); }
		public TerminalNode DICTIONARY() { return getToken(PLpgSQLParser.DICTIONARY, 0); }
		public TerminalNode PARSER() { return getToken(PLpgSQLParser.PARSER, 0); }
		public TerminalNode TEMPLATE() { return getToken(PLpgSQLParser.TEMPLATE, 0); }
		public TerminalNode TRANSFORM() { return getToken(PLpgSQLParser.TRANSFORM, 0); }
		public TerminalNode FOR() { return getToken(PLpgSQLParser.FOR, 0); }
		public TerminalNode TYPE() { return getToken(PLpgSQLParser.TYPE, 0); }
		public Extension_member_objectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extension_member_object; }
	}

	public final Extension_member_objectContext extension_member_object() throws RecognitionException {
		Extension_member_objectContext _localctx = new Extension_member_objectContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_extension_member_object);
		int _la;
		try {
			setState(1556);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,115,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1466);
				match(ACCESS);
				setState(1467);
				match(METHOD);
				setState(1468);
				schema_qualified_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1469);
				match(AGGREGATE);
				setState(1470);
				function_parameters();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1471);
				match(CAST);
				setState(1472);
				match(LEFT_PAREN);
				setState(1473);
				schema_qualified_name();
				setState(1474);
				match(AS);
				setState(1475);
				schema_qualified_name();
				setState(1476);
				match(RIGHT_PAREN);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1478);
				match(COLLATION);
				setState(1479);
				identifier();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1480);
				match(CONVERSION);
				setState(1481);
				identifier();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1482);
				match(DOMAIN);
				setState(1483);
				schema_qualified_name();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1484);
				match(EVENT);
				setState(1485);
				match(TRIGGER);
				setState(1486);
				identifier();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1487);
				match(FOREIGN);
				setState(1488);
				match(DATA);
				setState(1489);
				match(WRAPPER);
				setState(1490);
				identifier();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1491);
				match(FOREIGN);
				setState(1492);
				match(TABLE);
				setState(1493);
				schema_qualified_name();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1494);
				match(FUNCTION);
				setState(1495);
				function_parameters();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1497);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MATERIALIZED) {
					{
					setState(1496);
					match(MATERIALIZED);
					}
				}

				setState(1499);
				match(VIEW);
				setState(1500);
				schema_qualified_name();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1501);
				match(OPERATOR);
				setState(1502);
				operator_name();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1503);
				match(OPERATOR);
				setState(1504);
				match(CLASS);
				setState(1505);
				schema_qualified_name();
				setState(1506);
				match(USING);
				setState(1507);
				identifier();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1509);
				match(OPERATOR);
				setState(1510);
				match(FAMILY);
				setState(1511);
				schema_qualified_name();
				setState(1512);
				match(USING);
				setState(1513);
				identifier();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1516);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROCEDURAL) {
					{
					setState(1515);
					match(PROCEDURAL);
					}
				}

				setState(1518);
				match(LANGUAGE);
				setState(1519);
				identifier();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1520);
				match(PROCEDURE);
				setState(1521);
				function_parameters();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1522);
				match(ROUTINE);
				setState(1523);
				function_parameters();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1524);
				match(SCHEMA);
				setState(1525);
				identifier();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1526);
				match(SEQUENCE);
				setState(1527);
				schema_qualified_name();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1528);
				match(SERVER);
				setState(1529);
				identifier();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1530);
				match(TABLE);
				setState(1531);
				schema_qualified_name();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(1532);
				match(TEXT);
				setState(1533);
				match(SEARCH);
				setState(1534);
				match(CONFIGURATION);
				setState(1535);
				schema_qualified_name();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(1536);
				match(TEXT);
				setState(1537);
				match(SEARCH);
				setState(1538);
				match(DICTIONARY);
				setState(1539);
				schema_qualified_name();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(1540);
				match(TEXT);
				setState(1541);
				match(SEARCH);
				setState(1542);
				match(PARSER);
				setState(1543);
				schema_qualified_name();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(1544);
				match(TEXT);
				setState(1545);
				match(SEARCH);
				setState(1546);
				match(TEMPLATE);
				setState(1547);
				schema_qualified_name();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(1548);
				match(TRANSFORM);
				setState(1549);
				match(FOR);
				setState(1550);
				identifier();
				setState(1551);
				match(LANGUAGE);
				setState(1552);
				identifier();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(1554);
				match(TYPE);
				setState(1555);
				schema_qualified_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_schema_statementContext extends ParserRuleContext {
		public TerminalNode SCHEMA() { return getToken(PLpgSQLParser.SCHEMA, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Rename_toContext rename_to() {
			return getRuleContext(Rename_toContext.class,0);
		}
		public Alter_schema_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_schema_statement; }
	}

	public final Alter_schema_statementContext alter_schema_statement() throws RecognitionException {
		Alter_schema_statementContext _localctx = new Alter_schema_statementContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_alter_schema_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1558);
			match(SCHEMA);
			setState(1559);
			identifier();
			setState(1560);
			rename_to();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_language_statementContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode LANGUAGE() { return getToken(PLpgSQLParser.LANGUAGE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Rename_toContext rename_to() {
			return getRuleContext(Rename_toContext.class,0);
		}
		public Owner_toContext owner_to() {
			return getRuleContext(Owner_toContext.class,0);
		}
		public TerminalNode PROCEDURAL() { return getToken(PLpgSQLParser.PROCEDURAL, 0); }
		public Alter_language_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_language_statement; }
	}

	public final Alter_language_statementContext alter_language_statement() throws RecognitionException {
		Alter_language_statementContext _localctx = new Alter_language_statementContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_alter_language_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1563);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PROCEDURAL) {
				{
				setState(1562);
				match(PROCEDURAL);
				}
			}

			setState(1565);
			match(LANGUAGE);
			setState(1566);
			((Alter_language_statementContext)_localctx).name = identifier();
			setState(1569);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RENAME:
				{
				setState(1567);
				rename_to();
				}
				break;
			case OWNER:
				{
				setState(1568);
				owner_to();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_table_statementContext extends ParserRuleContext {
		public Schema_qualified_nameContext name;
		public Schema_qualified_nameContext child;
		public TerminalNode TABLE() { return getToken(PLpgSQLParser.TABLE, 0); }
		public List<Schema_qualified_nameContext> schema_qualified_name() {
			return getRuleContexts(Schema_qualified_nameContext.class);
		}
		public Schema_qualified_nameContext schema_qualified_name(int i) {
			return getRuleContext(Schema_qualified_nameContext.class,i);
		}
		public List<Table_actionContext> table_action() {
			return getRuleContexts(Table_actionContext.class);
		}
		public Table_actionContext table_action(int i) {
			return getRuleContext(Table_actionContext.class,i);
		}
		public TerminalNode RENAME() { return getToken(PLpgSQLParser.RENAME, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode TO() { return getToken(PLpgSQLParser.TO, 0); }
		public Set_schemaContext set_schema() {
			return getRuleContext(Set_schemaContext.class,0);
		}
		public Rename_toContext rename_to() {
			return getRuleContext(Rename_toContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(PLpgSQLParser.CONSTRAINT, 0); }
		public TerminalNode ATTACH() { return getToken(PLpgSQLParser.ATTACH, 0); }
		public TerminalNode PARTITION() { return getToken(PLpgSQLParser.PARTITION, 0); }
		public For_values_boundContext for_values_bound() {
			return getRuleContext(For_values_boundContext.class,0);
		}
		public TerminalNode DETACH() { return getToken(PLpgSQLParser.DETACH, 0); }
		public TerminalNode FOREIGN() { return getToken(PLpgSQLParser.FOREIGN, 0); }
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(PLpgSQLParser.ONLY, 0); }
		public TerminalNode MULTIPLY() { return getToken(PLpgSQLParser.MULTIPLY, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public TerminalNode COLUMN() { return getToken(PLpgSQLParser.COLUMN, 0); }
		public Alter_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table_statement; }
	}

	public final Alter_table_statementContext alter_table_statement() throws RecognitionException {
		Alter_table_statementContext _localctx = new Alter_table_statementContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_alter_table_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1572);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOREIGN) {
				{
				setState(1571);
				match(FOREIGN);
				}
			}

			setState(1574);
			match(TABLE);
			setState(1576);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,119,_ctx) ) {
			case 1:
				{
				setState(1575);
				if_exists();
				}
				break;
			}
			setState(1579);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ONLY) {
				{
				setState(1578);
				match(ONLY);
				}
			}

			setState(1581);
			((Alter_table_statementContext)_localctx).name = schema_qualified_name();
			setState(1583);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MULTIPLY) {
				{
				setState(1582);
				match(MULTIPLY);
				}
			}

			setState(1617);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,124,_ctx) ) {
			case 1:
				{
				setState(1585);
				table_action();
				setState(1590);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1586);
					match(COMMA);
					setState(1587);
					table_action();
					}
					}
					setState(1592);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				{
				setState(1593);
				match(RENAME);
				setState(1595);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(1594);
					match(COLUMN);
					}
				}

				setState(1597);
				identifier();
				setState(1598);
				match(TO);
				setState(1599);
				identifier();
				}
				break;
			case 3:
				{
				setState(1601);
				set_schema();
				}
				break;
			case 4:
				{
				setState(1602);
				rename_to();
				}
				break;
			case 5:
				{
				setState(1603);
				match(RENAME);
				setState(1604);
				match(CONSTRAINT);
				setState(1605);
				identifier();
				setState(1606);
				match(TO);
				setState(1607);
				identifier();
				}
				break;
			case 6:
				{
				setState(1609);
				match(ATTACH);
				setState(1610);
				match(PARTITION);
				setState(1611);
				((Alter_table_statementContext)_localctx).child = schema_qualified_name();
				setState(1612);
				for_values_bound();
				}
				break;
			case 7:
				{
				setState(1614);
				match(DETACH);
				setState(1615);
				match(PARTITION);
				setState(1616);
				((Alter_table_statementContext)_localctx).child = schema_qualified_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_actionContext extends ParserRuleContext {
		public IdentifierContext column;
		public Constraint_commonContext tabl_constraint;
		public Token not_valid;
		public Schema_qualified_nameContext trigger_name;
		public Schema_qualified_nameContext rewrite_rule_name;
		public Schema_qualified_nameContext index_name;
		public Schema_qualified_nameContext parent_table;
		public Schema_qualified_nameContext type_name;
		public TerminalNode ADD() { return getToken(PLpgSQLParser.ADD, 0); }
		public Table_column_definitionContext table_column_definition() {
			return getRuleContext(Table_column_definitionContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(PLpgSQLParser.COLUMN, 0); }
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PLpgSQLParser.DROP, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Cascade_restrictContext cascade_restrict() {
			return getRuleContext(Cascade_restrictContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(PLpgSQLParser.ALTER, 0); }
		public Column_actionContext column_action() {
			return getRuleContext(Column_actionContext.class,0);
		}
		public Constraint_commonContext constraint_common() {
			return getRuleContext(Constraint_commonContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PLpgSQLParser.NOT, 0); }
		public TerminalNode VALID() { return getToken(PLpgSQLParser.VALID, 0); }
		public Validate_constraintContext validate_constraint() {
			return getRuleContext(Validate_constraintContext.class,0);
		}
		public Drop_constraintContext drop_constraint() {
			return getRuleContext(Drop_constraintContext.class,0);
		}
		public TerminalNode TRIGGER() { return getToken(PLpgSQLParser.TRIGGER, 0); }
		public TerminalNode DISABLE() { return getToken(PLpgSQLParser.DISABLE, 0); }
		public TerminalNode ENABLE() { return getToken(PLpgSQLParser.ENABLE, 0); }
		public TerminalNode ALL() { return getToken(PLpgSQLParser.ALL, 0); }
		public TerminalNode USER() { return getToken(PLpgSQLParser.USER, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public TerminalNode REPLICA() { return getToken(PLpgSQLParser.REPLICA, 0); }
		public TerminalNode ALWAYS() { return getToken(PLpgSQLParser.ALWAYS, 0); }
		public TerminalNode RULE() { return getToken(PLpgSQLParser.RULE, 0); }
		public TerminalNode ROW() { return getToken(PLpgSQLParser.ROW, 0); }
		public TerminalNode LEVEL() { return getToken(PLpgSQLParser.LEVEL, 0); }
		public TerminalNode SECURITY() { return getToken(PLpgSQLParser.SECURITY, 0); }
		public TerminalNode FORCE() { return getToken(PLpgSQLParser.FORCE, 0); }
		public TerminalNode NO() { return getToken(PLpgSQLParser.NO, 0); }
		public TerminalNode CLUSTER() { return getToken(PLpgSQLParser.CLUSTER, 0); }
		public TerminalNode ON() { return getToken(PLpgSQLParser.ON, 0); }
		public TerminalNode SET() { return getToken(PLpgSQLParser.SET, 0); }
		public TerminalNode WITHOUT() { return getToken(PLpgSQLParser.WITHOUT, 0); }
		public TerminalNode OIDS() { return getToken(PLpgSQLParser.OIDS, 0); }
		public TerminalNode WITH() { return getToken(PLpgSQLParser.WITH, 0); }
		public TerminalNode LOGGED() { return getToken(PLpgSQLParser.LOGGED, 0); }
		public TerminalNode UNLOGGED() { return getToken(PLpgSQLParser.UNLOGGED, 0); }
		public Storage_parameterContext storage_parameter() {
			return getRuleContext(Storage_parameterContext.class,0);
		}
		public TerminalNode RESET() { return getToken(PLpgSQLParser.RESET, 0); }
		public Names_in_parensContext names_in_parens() {
			return getRuleContext(Names_in_parensContext.class,0);
		}
		public Define_foreign_optionsContext define_foreign_options() {
			return getRuleContext(Define_foreign_optionsContext.class,0);
		}
		public TerminalNode INHERIT() { return getToken(PLpgSQLParser.INHERIT, 0); }
		public TerminalNode OF() { return getToken(PLpgSQLParser.OF, 0); }
		public Owner_toContext owner_to() {
			return getRuleContext(Owner_toContext.class,0);
		}
		public Table_spaceContext table_space() {
			return getRuleContext(Table_spaceContext.class,0);
		}
		public TerminalNode IDENTITY() { return getToken(PLpgSQLParser.IDENTITY, 0); }
		public TerminalNode DEFAULT() { return getToken(PLpgSQLParser.DEFAULT, 0); }
		public TerminalNode FULL() { return getToken(PLpgSQLParser.FULL, 0); }
		public TerminalNode NOTHING() { return getToken(PLpgSQLParser.NOTHING, 0); }
		public TerminalNode USING() { return getToken(PLpgSQLParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(PLpgSQLParser.INDEX, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PLpgSQLParser.CONSTRAINT, 0); }
		public Table_deferrableContext table_deferrable() {
			return getRuleContext(Table_deferrableContext.class,0);
		}
		public Table_initialy_immedContext table_initialy_immed() {
			return getRuleContext(Table_initialy_immedContext.class,0);
		}
		public Table_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_action; }
	}

	public final Table_actionContext table_action() throws RecognitionException {
		Table_actionContext _localctx = new Table_actionContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_table_action);
		int _la;
		try {
			setState(1729);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,137,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1619);
				match(ADD);
				setState(1621);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(1620);
					match(COLUMN);
					}
				}

				setState(1624);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,126,_ctx) ) {
				case 1:
					{
					setState(1623);
					if_not_exists();
					}
					break;
				}
				setState(1626);
				table_column_definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1627);
				match(DROP);
				setState(1629);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(1628);
					match(COLUMN);
					}
				}

				setState(1632);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,128,_ctx) ) {
				case 1:
					{
					setState(1631);
					if_exists();
					}
					break;
				}
				setState(1634);
				((Table_actionContext)_localctx).column = identifier();
				setState(1636);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(1635);
					cascade_restrict();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1638);
				match(ALTER);
				setState(1640);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(1639);
					match(COLUMN);
					}
				}

				setState(1642);
				((Table_actionContext)_localctx).column = identifier();
				setState(1643);
				column_action();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1645);
				match(ADD);
				setState(1646);
				((Table_actionContext)_localctx).tabl_constraint = constraint_common();
				setState(1649);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1647);
					match(NOT);
					setState(1648);
					((Table_actionContext)_localctx).not_valid = match(VALID);
					}
				}

				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1651);
				validate_constraint();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1652);
				drop_constraint();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1653);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1654);
				match(TRIGGER);
				setState(1658);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BY:
				case CACHE:
				case CALL:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COLUMNS:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONFLICT:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CUBE:
				case CURRENT:
				case CURSOR:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DEPENDS:
				case DETACH:
				case DICTIONARY:
				case DISABLE:
				case DISCARD:
				case DOCUMENT:
				case DOMAIN:
				case DOUBLE:
				case DROP:
				case EACH:
				case ENABLE:
				case ENCODING:
				case ENCRYPTED:
				case ENUM:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GENERATED:
				case GLOBAL:
				case GRANTED:
				case GROUPS:
				case HANDLER:
				case HEADER:
				case HOLD:
				case HOUR:
				case IDENTITY:
				case IF:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT:
				case IMPORT:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCKED:
				case LOGGED:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case METHOD:
				case MINUTE:
				case MINVALUE:
				case MODE:
				case MONTH:
				case MOVE:
				case NAME:
				case NAMES:
				case NEW:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS:
				case OBJECT:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDINALITY:
				case OTHERS:
				case OVER:
				case OVERRIDING:
				case OWNED:
				case OWNER:
				case PARALLEL:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case POLICY:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROCEDURES:
				case PROGRAM:
				case PUBLICATION:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINES:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMAS:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SKIP_:
				case SNAPSHOT:
				case SQL:
				case STABLE:
				case STANDALONE:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STORED:
				case STRICT:
				case STRIP:
				case SUBSCRIPTION:
				case SUPPORT:
				case SYSID:
				case SYSTEM:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT:
				case TIES:
				case TRANSACTION:
				case TRANSFORM:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case TYPES:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VALUE:
				case VARYING:
				case VERSION:
				case VIEW:
				case VIEWS:
				case VOLATILE:
				case WHITESPACE:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML:
				case YEAR:
				case YES:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN:
				case CHAR:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL:
				case EXISTS:
				case EXTRACT:
				case FLOAT:
				case GREATEST:
				case GROUPING:
				case INOUT:
				case INT:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OUT:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case ALIGNMENT:
				case BASETYPE:
				case BUFFERS:
				case BYPASSRLS:
				case CANONICAL:
				case CATEGORY:
				case COLLATABLE:
				case COMBINEFUNC:
				case COMMUTATOR:
				case CONNECT:
				case COSTS:
				case CREATEDB:
				case CREATEROLE:
				case DESERIALFUNC:
				case DETERMINISTIC:
				case DISABLE_PAGE_SKIPPING:
				case ELEMENT:
				case EXTENDED:
				case FINALFUNC:
				case FINALFUNC_EXTRA:
				case FINALFUNC_MODIFY:
				case FORCE_NOT_NULL:
				case FORCE_NULL:
				case FORCE_QUOTE:
				case FORMAT:
				case GETTOKEN:
				case HASH:
				case HASHES:
				case HEADLINE:
				case HYPOTHETICAL:
				case INDEX_CLEANUP:
				case INIT:
				case INITCOND:
				case INTERNALLENGTH:
				case JSON:
				case LC_COLLATE:
				case LC_CTYPE:
				case LEFTARG:
				case LEXIZE:
				case LEXTYPES:
				case LIST:
				case LOCALE:
				case LOGIN:
				case MAIN:
				case MERGES:
				case MFINALFUNC:
				case MFINALFUNC_EXTRA:
				case MFINALFUNC_MODIFY:
				case MINITCOND:
				case MINVFUNC:
				case MODULUS:
				case MSFUNC:
				case MSSPACE:
				case MSTYPE:
				case NEGATOR:
				case NOBYPASSRLS:
				case NOCREATEDB:
				case NOCREATEROLE:
				case NOINHERIT:
				case NOLOGIN:
				case NOREPLICATION:
				case NOSUPERUSER:
				case OUTPUT:
				case PASSEDBYVALUE:
				case PATH:
				case PERMISSIVE:
				case PLAIN:
				case PREFERRED:
				case PROVIDER:
				case READ_ONLY:
				case READ_WRITE:
				case RECEIVE:
				case REMAINDER:
				case REPLICATION:
				case RESTRICTED:
				case RESTRICTIVE:
				case RIGHTARG:
				case SAFE:
				case SEND:
				case SERIALFUNC:
				case SETTINGS:
				case SFUNC:
				case SHAREABLE:
				case SKIP_LOCKED:
				case SORTOP:
				case SSPACE:
				case STYPE:
				case SUBTYPE_DIFF:
				case SUBTYPE_OPCLASS:
				case SUBTYPE:
				case SUMMARY:
				case SUPERUSER:
				case TIMING:
				case TYPMOD_IN:
				case TYPMOD_OUT:
				case UNSAFE:
				case USAGE:
				case VARIABLE:
				case YAML:
				case ALIAS:
				case ASSERT:
				case CONSTANT:
				case DATATYPE:
				case DEBUG:
				case DETAIL:
				case DIAGNOSTICS:
				case ELSEIF:
				case ELSIF:
				case ERRCODE:
				case EXIT:
				case EXCEPTION:
				case FOREACH:
				case GET:
				case HINT:
				case INFO:
				case LOG:
				case LOOP:
				case MESSAGE:
				case NOTICE:
				case OPEN:
				case PERFORM:
				case QUERY:
				case RAISE:
				case RECORD:
				case RETURN:
				case REVERSE:
				case ROWTYPE:
				case SLICE:
				case SQLSTATE:
				case STACKED:
				case WARNING:
				case WHILE:
				case Identifier:
				case QuotedIdentifier:
					{
					setState(1655);
					((Table_actionContext)_localctx).trigger_name = schema_qualified_name();
					}
					break;
				case ALL:
					{
					setState(1656);
					match(ALL);
					}
					break;
				case USER:
					{
					setState(1657);
					match(USER);
					}
					break;
				case EOF:
				case SEMI_COLON:
				case COMMA:
					break;
				default:
					break;
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1660);
				match(ENABLE);
				setState(1661);
				_la = _input.LA(1);
				if ( !(_la==ALWAYS || _la==REPLICA) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1662);
				match(TRIGGER);
				setState(1663);
				((Table_actionContext)_localctx).trigger_name = schema_qualified_name();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1664);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1665);
				match(RULE);
				setState(1666);
				((Table_actionContext)_localctx).rewrite_rule_name = schema_qualified_name();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1667);
				match(ENABLE);
				setState(1668);
				_la = _input.LA(1);
				if ( !(_la==ALWAYS || _la==REPLICA) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1669);
				match(RULE);
				setState(1670);
				((Table_actionContext)_localctx).rewrite_rule_name = schema_qualified_name();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1671);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1672);
				match(ROW);
				setState(1673);
				match(LEVEL);
				setState(1674);
				match(SECURITY);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1676);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(1675);
					match(NO);
					}
				}

				setState(1678);
				match(FORCE);
				setState(1679);
				match(ROW);
				setState(1680);
				match(LEVEL);
				setState(1681);
				match(SECURITY);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1682);
				match(CLUSTER);
				setState(1683);
				match(ON);
				setState(1684);
				((Table_actionContext)_localctx).index_name = schema_qualified_name();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1685);
				match(SET);
				setState(1686);
				match(WITHOUT);
				setState(1687);
				_la = _input.LA(1);
				if ( !(_la==CLUSTER || _la==OIDS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1688);
				match(SET);
				setState(1689);
				match(WITH);
				setState(1690);
				match(OIDS);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1691);
				match(SET);
				setState(1692);
				_la = _input.LA(1);
				if ( !(_la==LOGGED || _la==UNLOGGED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1693);
				match(SET);
				setState(1694);
				storage_parameter();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1695);
				match(RESET);
				setState(1696);
				names_in_parens();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1697);
				define_foreign_options();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1698);
				match(INHERIT);
				setState(1699);
				((Table_actionContext)_localctx).parent_table = schema_qualified_name();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1700);
				match(NO);
				setState(1701);
				match(INHERIT);
				setState(1702);
				((Table_actionContext)_localctx).parent_table = schema_qualified_name();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(1703);
				match(OF);
				setState(1704);
				((Table_actionContext)_localctx).type_name = schema_qualified_name();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(1705);
				match(NOT);
				setState(1706);
				match(OF);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(1707);
				owner_to();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(1708);
				match(SET);
				setState(1709);
				table_space();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(1710);
				match(REPLICA);
				setState(1711);
				match(IDENTITY);
				setState(1718);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DEFAULT:
					{
					setState(1712);
					match(DEFAULT);
					}
					break;
				case FULL:
					{
					setState(1713);
					match(FULL);
					}
					break;
				case NOTHING:
					{
					setState(1714);
					match(NOTHING);
					}
					break;
				case USING:
					{
					setState(1715);
					match(USING);
					setState(1716);
					match(INDEX);
					setState(1717);
					identifier();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(1720);
				match(ALTER);
				setState(1721);
				match(CONSTRAINT);
				setState(1722);
				identifier();
				setState(1724);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFERRABLE || _la==NOT) {
					{
					setState(1723);
					table_deferrable();
					}
				}

				setState(1727);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INITIALLY) {
					{
					setState(1726);
					table_initialy_immed();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_actionContext extends ParserRuleContext {
		public Token set;
		public TerminalNode TYPE() { return getToken(PLpgSQLParser.TYPE, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode SET() { return getToken(PLpgSQLParser.SET, 0); }
		public TerminalNode DATA() { return getToken(PLpgSQLParser.DATA, 0); }
		public Collate_identifierContext collate_identifier() {
			return getRuleContext(Collate_identifierContext.class,0);
		}
		public TerminalNode USING() { return getToken(PLpgSQLParser.USING, 0); }
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public TerminalNode ADD() { return getToken(PLpgSQLParser.ADD, 0); }
		public Identity_bodyContext identity_body() {
			return getRuleContext(Identity_bodyContext.class,0);
		}
		public Set_def_columnContext set_def_column() {
			return getRuleContext(Set_def_columnContext.class,0);
		}
		public Drop_defContext drop_def() {
			return getRuleContext(Drop_defContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PLpgSQLParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PLpgSQLParser.NULL, 0); }
		public TerminalNode DROP() { return getToken(PLpgSQLParser.DROP, 0); }
		public TerminalNode IDENTITY() { return getToken(PLpgSQLParser.IDENTITY, 0); }
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Storage_parameterContext storage_parameter() {
			return getRuleContext(Storage_parameterContext.class,0);
		}
		public TerminalNode STATISTICS() { return getToken(PLpgSQLParser.STATISTICS, 0); }
		public Signed_number_literalContext signed_number_literal() {
			return getRuleContext(Signed_number_literalContext.class,0);
		}
		public TerminalNode STORAGE() { return getToken(PLpgSQLParser.STORAGE, 0); }
		public Storage_optionContext storage_option() {
			return getRuleContext(Storage_optionContext.class,0);
		}
		public TerminalNode RESET() { return getToken(PLpgSQLParser.RESET, 0); }
		public Names_in_parensContext names_in_parens() {
			return getRuleContext(Names_in_parensContext.class,0);
		}
		public Define_foreign_optionsContext define_foreign_options() {
			return getRuleContext(Define_foreign_optionsContext.class,0);
		}
		public List<Alter_identityContext> alter_identity() {
			return getRuleContexts(Alter_identityContext.class);
		}
		public Alter_identityContext alter_identity(int i) {
			return getRuleContext(Alter_identityContext.class,i);
		}
		public Column_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_action; }
	}

	public final Column_actionContext column_action() throws RecognitionException {
		Column_actionContext _localctx = new Column_actionContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_column_action);
		int _la;
		try {
			setState(1775);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,144,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1733);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SET) {
					{
					setState(1731);
					match(SET);
					setState(1732);
					match(DATA);
					}
				}

				setState(1735);
				match(TYPE);
				setState(1736);
				data_type();
				setState(1738);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(1737);
					collate_identifier();
					}
				}

				setState(1742);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1740);
					match(USING);
					setState(1741);
					vex(0);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1744);
				match(ADD);
				setState(1745);
				identity_body();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1746);
				set_def_column();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1747);
				drop_def();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1750);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SET:
					{
					setState(1748);
					((Column_actionContext)_localctx).set = match(SET);
					}
					break;
				case DROP:
					{
					setState(1749);
					match(DROP);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1752);
				match(NOT);
				setState(1753);
				match(NULL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1754);
				match(DROP);
				setState(1755);
				match(IDENTITY);
				setState(1757);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1756);
					if_exists();
					}
				}

				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1759);
				match(SET);
				setState(1760);
				storage_parameter();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1761);
				match(SET);
				setState(1762);
				match(STATISTICS);
				setState(1763);
				signed_number_literal();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1764);
				match(SET);
				setState(1765);
				match(STORAGE);
				setState(1766);
				storage_option();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1767);
				match(RESET);
				setState(1768);
				names_in_parens();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1769);
				define_foreign_options();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1771); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1770);
					alter_identity();
					}
					}
					setState(1773); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==RESTART || _la==SET );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Identity_bodyContext extends ParserRuleContext {
		public TerminalNode GENERATED() { return getToken(PLpgSQLParser.GENERATED, 0); }
		public TerminalNode AS() { return getToken(PLpgSQLParser.AS, 0); }
		public TerminalNode IDENTITY() { return getToken(PLpgSQLParser.IDENTITY, 0); }
		public TerminalNode ALWAYS() { return getToken(PLpgSQLParser.ALWAYS, 0); }
		public TerminalNode BY() { return getToken(PLpgSQLParser.BY, 0); }
		public TerminalNode DEFAULT() { return getToken(PLpgSQLParser.DEFAULT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public List<Sequence_bodyContext> sequence_body() {
			return getRuleContexts(Sequence_bodyContext.class);
		}
		public Sequence_bodyContext sequence_body(int i) {
			return getRuleContext(Sequence_bodyContext.class,i);
		}
		public Identity_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identity_body; }
	}

	public final Identity_bodyContext identity_body() throws RecognitionException {
		Identity_bodyContext _localctx = new Identity_bodyContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_identity_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1777);
			match(GENERATED);
			setState(1781);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALWAYS:
				{
				setState(1778);
				match(ALWAYS);
				}
				break;
			case BY:
				{
				setState(1779);
				match(BY);
				setState(1780);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1783);
			match(AS);
			setState(1784);
			match(IDENTITY);
			setState(1793);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1785);
				match(LEFT_PAREN);
				setState(1787); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1786);
					sequence_body();
					}
					}
					setState(1789); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CACHE || _la==CYCLE || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (INCREMENT - 110)) | (1L << (MAXVALUE - 110)) | (1L << (MINVALUE - 110)) | (1L << (NO - 110)) | (1L << (OWNED - 110)))) != 0) || _la==SEQUENCE || _la==START || _la==AS );
				setState(1791);
				match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_identityContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PLpgSQLParser.SET, 0); }
		public TerminalNode GENERATED() { return getToken(PLpgSQLParser.GENERATED, 0); }
		public TerminalNode ALWAYS() { return getToken(PLpgSQLParser.ALWAYS, 0); }
		public TerminalNode BY() { return getToken(PLpgSQLParser.BY, 0); }
		public TerminalNode DEFAULT() { return getToken(PLpgSQLParser.DEFAULT, 0); }
		public Sequence_bodyContext sequence_body() {
			return getRuleContext(Sequence_bodyContext.class,0);
		}
		public TerminalNode RESTART() { return getToken(PLpgSQLParser.RESTART, 0); }
		public TerminalNode NUMBER_LITERAL() { return getToken(PLpgSQLParser.NUMBER_LITERAL, 0); }
		public TerminalNode WITH() { return getToken(PLpgSQLParser.WITH, 0); }
		public Alter_identityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_identity; }
	}

	public final Alter_identityContext alter_identity() throws RecognitionException {
		Alter_identityContext _localctx = new Alter_identityContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_alter_identity);
		int _la;
		try {
			setState(1811);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,151,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1795);
				match(SET);
				setState(1796);
				match(GENERATED);
				setState(1800);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALWAYS:
					{
					setState(1797);
					match(ALWAYS);
					}
					break;
				case BY:
					{
					setState(1798);
					match(BY);
					setState(1799);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1802);
				match(SET);
				setState(1803);
				sequence_body();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1804);
				match(RESTART);
				setState(1809);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH || _la==NUMBER_LITERAL) {
					{
					setState(1806);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WITH) {
						{
						setState(1805);
						match(WITH);
						}
					}

					setState(1808);
					match(NUMBER_LITERAL);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Storage_optionContext extends ParserRuleContext {
		public TerminalNode PLAIN() { return getToken(PLpgSQLParser.PLAIN, 0); }
		public TerminalNode EXTERNAL() { return getToken(PLpgSQLParser.EXTERNAL, 0); }
		public TerminalNode EXTENDED() { return getToken(PLpgSQLParser.EXTENDED, 0); }
		public TerminalNode MAIN() { return getToken(PLpgSQLParser.MAIN, 0); }
		public Storage_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_storage_option; }
	}

	public final Storage_optionContext storage_option() throws RecognitionException {
		Storage_optionContext _localctx = new Storage_optionContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_storage_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1813);
			_la = _input.LA(1);
			if ( !(_la==EXTERNAL || ((((_la - 460)) & ~0x3f) == 0 && ((1L << (_la - 460)) & ((1L << (EXTENDED - 460)) | (1L << (MAIN - 460)) | (1L << (PLAIN - 460)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Validate_constraintContext extends ParserRuleContext {
		public Schema_qualified_nameContext constraint_name;
		public TerminalNode VALIDATE() { return getToken(PLpgSQLParser.VALIDATE, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PLpgSQLParser.CONSTRAINT, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Validate_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_validate_constraint; }
	}

	public final Validate_constraintContext validate_constraint() throws RecognitionException {
		Validate_constraintContext _localctx = new Validate_constraintContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_validate_constraint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1815);
			match(VALIDATE);
			setState(1816);
			match(CONSTRAINT);
			setState(1817);
			((Validate_constraintContext)_localctx).constraint_name = schema_qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_constraintContext extends ParserRuleContext {
		public IdentifierContext constraint_name;
		public TerminalNode DROP() { return getToken(PLpgSQLParser.DROP, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PLpgSQLParser.CONSTRAINT, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Cascade_restrictContext cascade_restrict() {
			return getRuleContext(Cascade_restrictContext.class,0);
		}
		public Drop_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_constraint; }
	}

	public final Drop_constraintContext drop_constraint() throws RecognitionException {
		Drop_constraintContext _localctx = new Drop_constraintContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_drop_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1819);
			match(DROP);
			setState(1820);
			match(CONSTRAINT);
			setState(1822);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,152,_ctx) ) {
			case 1:
				{
				setState(1821);
				if_exists();
				}
				break;
			}
			setState(1824);
			((Drop_constraintContext)_localctx).constraint_name = identifier();
			setState(1826);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(1825);
				cascade_restrict();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_deferrableContext extends ParserRuleContext {
		public TerminalNode DEFERRABLE() { return getToken(PLpgSQLParser.DEFERRABLE, 0); }
		public TerminalNode NOT() { return getToken(PLpgSQLParser.NOT, 0); }
		public Table_deferrableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_deferrable; }
	}

	public final Table_deferrableContext table_deferrable() throws RecognitionException {
		Table_deferrableContext _localctx = new Table_deferrableContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_table_deferrable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1829);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(1828);
				match(NOT);
				}
			}

			setState(1831);
			match(DEFERRABLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_initialy_immedContext extends ParserRuleContext {
		public TerminalNode INITIALLY() { return getToken(PLpgSQLParser.INITIALLY, 0); }
		public TerminalNode DEFERRED() { return getToken(PLpgSQLParser.DEFERRED, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PLpgSQLParser.IMMEDIATE, 0); }
		public Table_initialy_immedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_initialy_immed; }
	}

	public final Table_initialy_immedContext table_initialy_immed() throws RecognitionException {
		Table_initialy_immedContext _localctx = new Table_initialy_immedContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_table_initialy_immed);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1833);
			match(INITIALLY);
			setState(1834);
			_la = _input.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_actions_commonContext extends ParserRuleContext {
		public Unsigned_numeric_literalContext execution_cost;
		public Unsigned_numeric_literalContext result_rows;
		public IdentifierContext config_scope;
		public IdentifierContext config_param;
		public IdentifierContext lang_name;
		public TerminalNode ON() { return getToken(PLpgSQLParser.ON, 0); }
		public List<TerminalNode> NULL() { return getTokens(PLpgSQLParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(PLpgSQLParser.NULL, i);
		}
		public TerminalNode INPUT() { return getToken(PLpgSQLParser.INPUT, 0); }
		public TerminalNode CALLED() { return getToken(PLpgSQLParser.CALLED, 0); }
		public TerminalNode RETURNS() { return getToken(PLpgSQLParser.RETURNS, 0); }
		public TerminalNode TRANSFORM() { return getToken(PLpgSQLParser.TRANSFORM, 0); }
		public List<Transform_for_typeContext> transform_for_type() {
			return getRuleContexts(Transform_for_typeContext.class);
		}
		public Transform_for_typeContext transform_for_type(int i) {
			return getRuleContext(Transform_for_typeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public TerminalNode STRICT() { return getToken(PLpgSQLParser.STRICT, 0); }
		public TerminalNode IMMUTABLE() { return getToken(PLpgSQLParser.IMMUTABLE, 0); }
		public TerminalNode VOLATILE() { return getToken(PLpgSQLParser.VOLATILE, 0); }
		public TerminalNode STABLE() { return getToken(PLpgSQLParser.STABLE, 0); }
		public TerminalNode LEAKPROOF() { return getToken(PLpgSQLParser.LEAKPROOF, 0); }
		public TerminalNode NOT() { return getToken(PLpgSQLParser.NOT, 0); }
		public TerminalNode SECURITY() { return getToken(PLpgSQLParser.SECURITY, 0); }
		public TerminalNode INVOKER() { return getToken(PLpgSQLParser.INVOKER, 0); }
		public TerminalNode DEFINER() { return getToken(PLpgSQLParser.DEFINER, 0); }
		public TerminalNode EXTERNAL() { return getToken(PLpgSQLParser.EXTERNAL, 0); }
		public TerminalNode PARALLEL() { return getToken(PLpgSQLParser.PARALLEL, 0); }
		public TerminalNode SAFE() { return getToken(PLpgSQLParser.SAFE, 0); }
		public TerminalNode UNSAFE() { return getToken(PLpgSQLParser.UNSAFE, 0); }
		public TerminalNode RESTRICTED() { return getToken(PLpgSQLParser.RESTRICTED, 0); }
		public TerminalNode COST() { return getToken(PLpgSQLParser.COST, 0); }
		public Unsigned_numeric_literalContext unsigned_numeric_literal() {
			return getRuleContext(Unsigned_numeric_literalContext.class,0);
		}
		public TerminalNode ROWS() { return getToken(PLpgSQLParser.ROWS, 0); }
		public TerminalNode SUPPORT() { return getToken(PLpgSQLParser.SUPPORT, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PLpgSQLParser.SET, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public Set_statement_valueContext set_statement_value() {
			return getRuleContext(Set_statement_valueContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PLpgSQLParser.FROM, 0); }
		public TerminalNode CURRENT() { return getToken(PLpgSQLParser.CURRENT, 0); }
		public TerminalNode DOT() { return getToken(PLpgSQLParser.DOT, 0); }
		public TerminalNode TO() { return getToken(PLpgSQLParser.TO, 0); }
		public TerminalNode EQUAL() { return getToken(PLpgSQLParser.EQUAL, 0); }
		public TerminalNode LANGUAGE() { return getToken(PLpgSQLParser.LANGUAGE, 0); }
		public TerminalNode WINDOW() { return getToken(PLpgSQLParser.WINDOW, 0); }
		public TerminalNode AS() { return getToken(PLpgSQLParser.AS, 0); }
		public Function_defContext function_def() {
			return getRuleContext(Function_defContext.class,0);
		}
		public Function_actions_commonContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_actions_common; }
	}

	public final Function_actions_commonContext function_actions_common() throws RecognitionException {
		Function_actions_commonContext _localctx = new Function_actions_commonContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_function_actions_common);
		int _la;
		try {
			setState(1892);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case RETURNS:
				enterOuterAlt(_localctx, 1);
				{
				setState(1839);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CALLED:
					{
					setState(1836);
					match(CALLED);
					}
					break;
				case RETURNS:
					{
					setState(1837);
					match(RETURNS);
					setState(1838);
					match(NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1841);
				match(ON);
				setState(1842);
				match(NULL);
				setState(1843);
				match(INPUT);
				}
				break;
			case TRANSFORM:
				enterOuterAlt(_localctx, 2);
				{
				setState(1844);
				match(TRANSFORM);
				setState(1845);
				transform_for_type();
				setState(1850);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1846);
					match(COMMA);
					setState(1847);
					transform_for_type();
					}
					}
					setState(1852);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case STRICT:
				enterOuterAlt(_localctx, 3);
				{
				setState(1853);
				match(STRICT);
				}
				break;
			case IMMUTABLE:
				enterOuterAlt(_localctx, 4);
				{
				setState(1854);
				match(IMMUTABLE);
				}
				break;
			case VOLATILE:
				enterOuterAlt(_localctx, 5);
				{
				setState(1855);
				match(VOLATILE);
				}
				break;
			case STABLE:
				enterOuterAlt(_localctx, 6);
				{
				setState(1856);
				match(STABLE);
				}
				break;
			case LEAKPROOF:
			case NOT:
				enterOuterAlt(_localctx, 7);
				{
				setState(1858);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1857);
					match(NOT);
					}
				}

				setState(1860);
				match(LEAKPROOF);
				}
				break;
			case EXTERNAL:
			case SECURITY:
				enterOuterAlt(_localctx, 8);
				{
				setState(1862);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXTERNAL) {
					{
					setState(1861);
					match(EXTERNAL);
					}
				}

				setState(1864);
				match(SECURITY);
				setState(1865);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case PARALLEL:
				enterOuterAlt(_localctx, 9);
				{
				setState(1866);
				match(PARALLEL);
				setState(1867);
				_la = _input.LA(1);
				if ( !(((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (RESTRICTED - 517)) | (1L << (SAFE - 517)) | (1L << (UNSAFE - 517)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case COST:
				enterOuterAlt(_localctx, 10);
				{
				setState(1868);
				match(COST);
				setState(1869);
				((Function_actions_commonContext)_localctx).execution_cost = unsigned_numeric_literal();
				}
				break;
			case ROWS:
				enterOuterAlt(_localctx, 11);
				{
				setState(1870);
				match(ROWS);
				setState(1871);
				((Function_actions_commonContext)_localctx).result_rows = unsigned_numeric_literal();
				}
				break;
			case SUPPORT:
				enterOuterAlt(_localctx, 12);
				{
				setState(1872);
				match(SUPPORT);
				setState(1873);
				schema_qualified_name();
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 13);
				{
				setState(1874);
				match(SET);
				setState(1878);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,159,_ctx) ) {
				case 1:
					{
					setState(1875);
					((Function_actions_commonContext)_localctx).config_scope = identifier();
					setState(1876);
					match(DOT);
					}
					break;
				}
				setState(1880);
				((Function_actions_commonContext)_localctx).config_param = identifier();
				setState(1885);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case TO:
				case EQUAL:
					{
					setState(1881);
					_la = _input.LA(1);
					if ( !(_la==TO || _la==EQUAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1882);
					set_statement_value();
					}
					break;
				case FROM:
					{
					setState(1883);
					match(FROM);
					setState(1884);
					match(CURRENT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case LANGUAGE:
				enterOuterAlt(_localctx, 14);
				{
				setState(1887);
				match(LANGUAGE);
				setState(1888);
				((Function_actions_commonContext)_localctx).lang_name = identifier();
				}
				break;
			case WINDOW:
				enterOuterAlt(_localctx, 15);
				{
				setState(1889);
				match(WINDOW);
				}
				break;
			case AS:
				enterOuterAlt(_localctx, 16);
				{
				setState(1890);
				match(AS);
				setState(1891);
				function_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_defContext extends ParserRuleContext {
		public Character_stringContext definition;
		public Character_stringContext symbol;
		public List<Character_stringContext> character_string() {
			return getRuleContexts(Character_stringContext.class);
		}
		public Character_stringContext character_string(int i) {
			return getRuleContext(Character_stringContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(PLpgSQLParser.COMMA, 0); }
		public Function_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_def; }
	}

	public final Function_defContext function_def() throws RecognitionException {
		Function_defContext _localctx = new Function_defContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_function_def);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1894);
			((Function_defContext)_localctx).definition = character_string();
			setState(1897);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(1895);
				match(COMMA);
				setState(1896);
				((Function_defContext)_localctx).symbol = character_string();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_index_statementContext extends ParserRuleContext {
		public TerminalNode INDEX() { return getToken(PLpgSQLParser.INDEX, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Index_def_actionContext index_def_action() {
			return getRuleContext(Index_def_actionContext.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PLpgSQLParser.ALL, 0); }
		public TerminalNode IN() { return getToken(PLpgSQLParser.IN, 0); }
		public List<TerminalNode> TABLESPACE() { return getTokens(PLpgSQLParser.TABLESPACE); }
		public TerminalNode TABLESPACE(int i) {
			return getToken(PLpgSQLParser.TABLESPACE, i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode SET() { return getToken(PLpgSQLParser.SET, 0); }
		public TerminalNode OWNED() { return getToken(PLpgSQLParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(PLpgSQLParser.BY, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode NOWAIT() { return getToken(PLpgSQLParser.NOWAIT, 0); }
		public Alter_index_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_index_statement; }
	}

	public final Alter_index_statementContext alter_index_statement() throws RecognitionException {
		Alter_index_statementContext _localctx = new Alter_index_statementContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_alter_index_statement);
		int _la;
		try {
			setState(1922);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,166,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1899);
				match(INDEX);
				setState(1901);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,163,_ctx) ) {
				case 1:
					{
					setState(1900);
					if_exists();
					}
					break;
				}
				setState(1903);
				schema_qualified_name();
				setState(1904);
				index_def_action();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1906);
				match(INDEX);
				setState(1907);
				match(ALL);
				setState(1908);
				match(IN);
				setState(1909);
				match(TABLESPACE);
				setState(1910);
				identifier();
				setState(1914);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OWNED) {
					{
					setState(1911);
					match(OWNED);
					setState(1912);
					match(BY);
					setState(1913);
					identifier_list();
					}
				}

				setState(1916);
				match(SET);
				setState(1917);
				match(TABLESPACE);
				setState(1918);
				identifier();
				setState(1920);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOWAIT) {
					{
					setState(1919);
					match(NOWAIT);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_def_actionContext extends ParserRuleContext {
		public Schema_qualified_nameContext index;
		public Rename_toContext rename_to() {
			return getRuleContext(Rename_toContext.class,0);
		}
		public TerminalNode ATTACH() { return getToken(PLpgSQLParser.ATTACH, 0); }
		public TerminalNode PARTITION() { return getToken(PLpgSQLParser.PARTITION, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public TerminalNode DEPENDS() { return getToken(PLpgSQLParser.DEPENDS, 0); }
		public TerminalNode ON() { return getToken(PLpgSQLParser.ON, 0); }
		public TerminalNode EXTENSION() { return getToken(PLpgSQLParser.EXTENSION, 0); }
		public TerminalNode ALTER() { return getToken(PLpgSQLParser.ALTER, 0); }
		public TerminalNode NUMBER_LITERAL() { return getToken(PLpgSQLParser.NUMBER_LITERAL, 0); }
		public TerminalNode SET() { return getToken(PLpgSQLParser.SET, 0); }
		public TerminalNode STATISTICS() { return getToken(PLpgSQLParser.STATISTICS, 0); }
		public Signed_number_literalContext signed_number_literal() {
			return getRuleContext(Signed_number_literalContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(PLpgSQLParser.COLUMN, 0); }
		public SignContext sign() {
			return getRuleContext(SignContext.class,0);
		}
		public TerminalNode RESET() { return getToken(PLpgSQLParser.RESET, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public TerminalNode TABLESPACE() { return getToken(PLpgSQLParser.TABLESPACE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<Option_with_valueContext> option_with_value() {
			return getRuleContexts(Option_with_valueContext.class);
		}
		public Option_with_valueContext option_with_value(int i) {
			return getRuleContext(Option_with_valueContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Index_def_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_def_action; }
	}

	public final Index_def_actionContext index_def_action() throws RecognitionException {
		Index_def_actionContext _localctx = new Index_def_actionContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_index_def_action);
		int _la;
		try {
			setState(1963);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,170,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1924);
				rename_to();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1925);
				match(ATTACH);
				setState(1926);
				match(PARTITION);
				setState(1927);
				((Index_def_actionContext)_localctx).index = schema_qualified_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1928);
				match(DEPENDS);
				setState(1929);
				match(ON);
				setState(1930);
				match(EXTENSION);
				setState(1931);
				schema_qualified_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1932);
				match(ALTER);
				setState(1934);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(1933);
					match(COLUMN);
					}
				}

				setState(1937);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					setState(1936);
					sign();
					}
				}

				setState(1939);
				match(NUMBER_LITERAL);
				setState(1940);
				match(SET);
				setState(1941);
				match(STATISTICS);
				setState(1942);
				signed_number_literal();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1943);
				match(RESET);
				setState(1944);
				match(LEFT_PAREN);
				setState(1945);
				identifier_list();
				setState(1946);
				match(RIGHT_PAREN);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1948);
				match(SET);
				setState(1949);
				match(TABLESPACE);
				setState(1950);
				identifier();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1951);
				match(SET);
				setState(1952);
				match(LEFT_PAREN);
				setState(1953);
				option_with_value();
				setState(1958);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1954);
					match(COMMA);
					setState(1955);
					option_with_value();
					}
					}
					setState(1960);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1961);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_default_privilegesContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(PLpgSQLParser.DEFAULT, 0); }
		public TerminalNode PRIVILEGES() { return getToken(PLpgSQLParser.PRIVILEGES, 0); }
		public Abbreviated_grant_or_revokeContext abbreviated_grant_or_revoke() {
			return getRuleContext(Abbreviated_grant_or_revokeContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PLpgSQLParser.FOR, 0); }
		public List<Identifier_listContext> identifier_list() {
			return getRuleContexts(Identifier_listContext.class);
		}
		public Identifier_listContext identifier_list(int i) {
			return getRuleContext(Identifier_listContext.class,i);
		}
		public TerminalNode IN() { return getToken(PLpgSQLParser.IN, 0); }
		public TerminalNode SCHEMA() { return getToken(PLpgSQLParser.SCHEMA, 0); }
		public TerminalNode ROLE() { return getToken(PLpgSQLParser.ROLE, 0); }
		public TerminalNode USER() { return getToken(PLpgSQLParser.USER, 0); }
		public Alter_default_privilegesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_default_privileges; }
	}

	public final Alter_default_privilegesContext alter_default_privileges() throws RecognitionException {
		Alter_default_privilegesContext _localctx = new Alter_default_privilegesContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_alter_default_privileges);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1965);
			match(DEFAULT);
			setState(1966);
			match(PRIVILEGES);
			setState(1970);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(1967);
				match(FOR);
				setState(1968);
				_la = _input.LA(1);
				if ( !(_la==ROLE || _la==USER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1969);
				identifier_list();
				}
			}

			setState(1975);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(1972);
				match(IN);
				setState(1973);
				match(SCHEMA);
				setState(1974);
				identifier_list();
				}
			}

			setState(1977);
			abbreviated_grant_or_revoke();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Abbreviated_grant_or_revokeContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(PLpgSQLParser.GRANT, 0); }
		public TerminalNode REVOKE() { return getToken(PLpgSQLParser.REVOKE, 0); }
		public List<Table_column_privilegeContext> table_column_privilege() {
			return getRuleContexts(Table_column_privilegeContext.class);
		}
		public Table_column_privilegeContext table_column_privilege(int i) {
			return getRuleContext(Table_column_privilegeContext.class,i);
		}
		public TerminalNode ON() { return getToken(PLpgSQLParser.ON, 0); }
		public TerminalNode TABLES() { return getToken(PLpgSQLParser.TABLES, 0); }
		public TerminalNode SEQUENCES() { return getToken(PLpgSQLParser.SEQUENCES, 0); }
		public TerminalNode FUNCTIONS() { return getToken(PLpgSQLParser.FUNCTIONS, 0); }
		public TerminalNode SCHEMAS() { return getToken(PLpgSQLParser.SCHEMAS, 0); }
		public TerminalNode TYPES() { return getToken(PLpgSQLParser.TYPES, 0); }
		public Grant_to_ruleContext grant_to_rule() {
			return getRuleContext(Grant_to_ruleContext.class,0);
		}
		public Revoke_from_cascade_restrictContext revoke_from_cascade_restrict() {
			return getRuleContext(Revoke_from_cascade_restrictContext.class,0);
		}
		public List<Usage_select_updateContext> usage_select_update() {
			return getRuleContexts(Usage_select_updateContext.class);
		}
		public Usage_select_updateContext usage_select_update(int i) {
			return getRuleContext(Usage_select_updateContext.class,i);
		}
		public TerminalNode ALL() { return getToken(PLpgSQLParser.ALL, 0); }
		public TerminalNode EXECUTE() { return getToken(PLpgSQLParser.EXECUTE, 0); }
		public TerminalNode USAGE() { return getToken(PLpgSQLParser.USAGE, 0); }
		public TerminalNode CREATE() { return getToken(PLpgSQLParser.CREATE, 0); }
		public Grant_option_forContext grant_option_for() {
			return getRuleContext(Grant_option_forContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public TerminalNode PRIVILEGES() { return getToken(PLpgSQLParser.PRIVILEGES, 0); }
		public Abbreviated_grant_or_revokeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_abbreviated_grant_or_revoke; }
	}

	public final Abbreviated_grant_or_revokeContext abbreviated_grant_or_revoke() throws RecognitionException {
		Abbreviated_grant_or_revokeContext _localctx = new Abbreviated_grant_or_revokeContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_abbreviated_grant_or_revoke);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1984);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GRANT:
				{
				setState(1979);
				match(GRANT);
				}
				break;
			case REVOKE:
				{
				setState(1980);
				match(REVOKE);
				setState(1982);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GRANT) {
					{
					setState(1981);
					grant_option_for();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2041);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,185,_ctx) ) {
			case 1:
				{
				setState(1986);
				table_column_privilege();
				setState(1991);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1987);
					match(COMMA);
					setState(1988);
					table_column_privilege();
					}
					}
					setState(1993);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1994);
				match(ON);
				setState(1995);
				match(TABLES);
				}
				break;
			case 2:
				{
				setState(2009);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case UPDATE:
				case SELECT:
				case USAGE:
					{
					setState(1997);
					usage_select_update();
					setState(2002);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1998);
						match(COMMA);
						setState(1999);
						usage_select_update();
						}
						}
						setState(2004);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				case ALL:
					{
					setState(2005);
					match(ALL);
					setState(2007);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(2006);
						match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2011);
				match(ON);
				setState(2012);
				match(SEQUENCES);
				}
				break;
			case 3:
				{
				setState(2018);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case EXECUTE:
					{
					setState(2013);
					match(EXECUTE);
					}
					break;
				case ALL:
					{
					setState(2014);
					match(ALL);
					setState(2016);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(2015);
						match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2020);
				match(ON);
				setState(2021);
				match(FUNCTIONS);
				}
				break;
			case 4:
				{
				setState(2028);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case USAGE:
					{
					setState(2022);
					match(USAGE);
					}
					break;
				case CREATE:
					{
					setState(2023);
					match(CREATE);
					}
					break;
				case ALL:
					{
					setState(2024);
					match(ALL);
					setState(2026);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(2025);
						match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2030);
				match(ON);
				setState(2031);
				match(SCHEMAS);
				}
				break;
			case 5:
				{
				setState(2037);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case USAGE:
					{
					setState(2032);
					match(USAGE);
					}
					break;
				case ALL:
					{
					setState(2033);
					match(ALL);
					setState(2035);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(2034);
						match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2039);
				match(ON);
				setState(2040);
				match(TYPES);
				}
				break;
			}
			setState(2045);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TO:
				{
				setState(2043);
				grant_to_rule();
				}
				break;
			case FROM:
				{
				setState(2044);
				revoke_from_cascade_restrict();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_option_forContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(PLpgSQLParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(PLpgSQLParser.OPTION, 0); }
		public TerminalNode FOR() { return getToken(PLpgSQLParser.FOR, 0); }
		public Grant_option_forContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_option_for; }
	}

	public final Grant_option_forContext grant_option_for() throws RecognitionException {
		Grant_option_forContext _localctx = new Grant_option_forContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_grant_option_for);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2047);
			match(GRANT);
			setState(2048);
			match(OPTION);
			setState(2049);
			match(FOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_sequence_statementContext extends ParserRuleContext {
		public Schema_qualified_nameContext name;
		public TerminalNode SEQUENCE() { return getToken(PLpgSQLParser.SEQUENCE, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Set_schemaContext set_schema() {
			return getRuleContext(Set_schemaContext.class,0);
		}
		public Rename_toContext rename_to() {
			return getRuleContext(Rename_toContext.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public List<Sequence_bodyContext> sequence_body() {
			return getRuleContexts(Sequence_bodyContext.class);
		}
		public Sequence_bodyContext sequence_body(int i) {
			return getRuleContext(Sequence_bodyContext.class,i);
		}
		public List<TerminalNode> RESTART() { return getTokens(PLpgSQLParser.RESTART); }
		public TerminalNode RESTART(int i) {
			return getToken(PLpgSQLParser.RESTART, i);
		}
		public List<Signed_number_literalContext> signed_number_literal() {
			return getRuleContexts(Signed_number_literalContext.class);
		}
		public Signed_number_literalContext signed_number_literal(int i) {
			return getRuleContext(Signed_number_literalContext.class,i);
		}
		public List<TerminalNode> WITH() { return getTokens(PLpgSQLParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(PLpgSQLParser.WITH, i);
		}
		public Alter_sequence_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_sequence_statement; }
	}

	public final Alter_sequence_statementContext alter_sequence_statement() throws RecognitionException {
		Alter_sequence_statementContext _localctx = new Alter_sequence_statementContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_alter_sequence_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2051);
			match(SEQUENCE);
			setState(2053);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,187,_ctx) ) {
			case 1:
				{
				setState(2052);
				if_exists();
				}
				break;
			}
			setState(2055);
			((Alter_sequence_statementContext)_localctx).name = schema_qualified_name();
			setState(2071);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EOF:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case MAXVALUE:
			case MINVALUE:
			case NO:
			case OWNED:
			case RESTART:
			case SEQUENCE:
			case START:
			case AS:
			case SEMI_COLON:
				{
				setState(2066);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==CACHE || _la==CYCLE || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (INCREMENT - 110)) | (1L << (MAXVALUE - 110)) | (1L << (MINVALUE - 110)) | (1L << (NO - 110)) | (1L << (OWNED - 110)))) != 0) || ((((_la - 205)) & ~0x3f) == 0 && ((1L << (_la - 205)) & ((1L << (RESTART - 205)) | (1L << (SEQUENCE - 205)) | (1L << (START - 205)))) != 0) || _la==AS) {
					{
					setState(2064);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CACHE:
					case CYCLE:
					case INCREMENT:
					case MAXVALUE:
					case MINVALUE:
					case NO:
					case OWNED:
					case SEQUENCE:
					case START:
					case AS:
						{
						setState(2056);
						sequence_body();
						}
						break;
					case RESTART:
						{
						setState(2057);
						match(RESTART);
						setState(2062);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==WITH || ((((_la - 587)) & ~0x3f) == 0 && ((1L << (_la - 587)) & ((1L << (PLUS - 587)) | (1L << (MINUS - 587)) | (1L << (NUMBER_LITERAL - 587)))) != 0)) {
							{
							setState(2059);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==WITH) {
								{
								setState(2058);
								match(WITH);
								}
							}

							setState(2061);
							signed_number_literal();
							}
						}

						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(2068);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case SET:
				{
				setState(2069);
				set_schema();
				}
				break;
			case RENAME:
				{
				setState(2070);
				rename_to();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_view_statementContext extends ParserRuleContext {
		public Schema_qualified_nameContext name;
		public Schema_qualified_nameContext column_name;
		public TerminalNode VIEW() { return getToken(PLpgSQLParser.VIEW, 0); }
		public List<Schema_qualified_nameContext> schema_qualified_name() {
			return getRuleContexts(Schema_qualified_nameContext.class);
		}
		public Schema_qualified_nameContext schema_qualified_name(int i) {
			return getRuleContext(Schema_qualified_nameContext.class,i);
		}
		public TerminalNode ALTER() { return getToken(PLpgSQLParser.ALTER, 0); }
		public Set_schemaContext set_schema() {
			return getRuleContext(Set_schemaContext.class,0);
		}
		public Rename_toContext rename_to() {
			return getRuleContext(Rename_toContext.class,0);
		}
		public TerminalNode SET() { return getToken(PLpgSQLParser.SET, 0); }
		public Storage_parameterContext storage_parameter() {
			return getRuleContext(Storage_parameterContext.class,0);
		}
		public TerminalNode RESET() { return getToken(PLpgSQLParser.RESET, 0); }
		public Names_in_parensContext names_in_parens() {
			return getRuleContext(Names_in_parensContext.class,0);
		}
		public TerminalNode MATERIALIZED() { return getToken(PLpgSQLParser.MATERIALIZED, 0); }
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Set_def_columnContext set_def_column() {
			return getRuleContext(Set_def_columnContext.class,0);
		}
		public Drop_defContext drop_def() {
			return getRuleContext(Drop_defContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(PLpgSQLParser.COLUMN, 0); }
		public Alter_view_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_view_statement; }
	}

	public final Alter_view_statementContext alter_view_statement() throws RecognitionException {
		Alter_view_statementContext _localctx = new Alter_view_statementContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_alter_view_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2074);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MATERIALIZED) {
				{
				setState(2073);
				match(MATERIALIZED);
				}
			}

			setState(2076);
			match(VIEW);
			setState(2078);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,194,_ctx) ) {
			case 1:
				{
				setState(2077);
				if_exists();
				}
				break;
			}
			setState(2080);
			((Alter_view_statementContext)_localctx).name = schema_qualified_name();
			setState(2096);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,197,_ctx) ) {
			case 1:
				{
				setState(2081);
				match(ALTER);
				setState(2083);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2082);
					match(COLUMN);
					}
				}

				setState(2085);
				((Alter_view_statementContext)_localctx).column_name = schema_qualified_name();
				setState(2088);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SET:
					{
					setState(2086);
					set_def_column();
					}
					break;
				case DROP:
					{
					setState(2087);
					drop_def();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				setState(2090);
				set_schema();
				}
				break;
			case 3:
				{
				setState(2091);
				rename_to();
				}
				break;
			case 4:
				{
				setState(2092);
				match(SET);
				setState(2093);
				storage_parameter();
				}
				break;
			case 5:
				{
				setState(2094);
				match(RESET);
				setState(2095);
				names_in_parens();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_event_triggerContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode EVENT() { return getToken(PLpgSQLParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(PLpgSQLParser.TRIGGER, 0); }
		public Alter_event_trigger_actionContext alter_event_trigger_action() {
			return getRuleContext(Alter_event_trigger_actionContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Alter_event_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_event_trigger; }
	}

	public final Alter_event_triggerContext alter_event_trigger() throws RecognitionException {
		Alter_event_triggerContext _localctx = new Alter_event_triggerContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_alter_event_trigger);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2098);
			match(EVENT);
			setState(2099);
			match(TRIGGER);
			setState(2100);
			((Alter_event_triggerContext)_localctx).name = identifier();
			setState(2101);
			alter_event_trigger_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_event_trigger_actionContext extends ParserRuleContext {
		public TerminalNode DISABLE() { return getToken(PLpgSQLParser.DISABLE, 0); }
		public TerminalNode ENABLE() { return getToken(PLpgSQLParser.ENABLE, 0); }
		public TerminalNode REPLICA() { return getToken(PLpgSQLParser.REPLICA, 0); }
		public TerminalNode ALWAYS() { return getToken(PLpgSQLParser.ALWAYS, 0); }
		public Owner_toContext owner_to() {
			return getRuleContext(Owner_toContext.class,0);
		}
		public Rename_toContext rename_to() {
			return getRuleContext(Rename_toContext.class,0);
		}
		public Alter_event_trigger_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_event_trigger_action; }
	}

	public final Alter_event_trigger_actionContext alter_event_trigger_action() throws RecognitionException {
		Alter_event_trigger_actionContext _localctx = new Alter_event_trigger_actionContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_alter_event_trigger_action);
		int _la;
		try {
			setState(2110);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DISABLE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2103);
				match(DISABLE);
				}
				break;
			case ENABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2104);
				match(ENABLE);
				setState(2106);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALWAYS || _la==REPLICA) {
					{
					setState(2105);
					_la = _input.LA(1);
					if ( !(_la==ALWAYS || _la==REPLICA) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case OWNER:
				enterOuterAlt(_localctx, 3);
				{
				setState(2108);
				owner_to();
				}
				break;
			case RENAME:
				enterOuterAlt(_localctx, 4);
				{
				setState(2109);
				rename_to();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_type_statementContext extends ParserRuleContext {
		public Schema_qualified_nameContext name;
		public Character_stringContext new_enum_value;
		public Character_stringContext existing_enum_value;
		public IdentifierContext attribute_name;
		public IdentifierContext new_attribute_name;
		public Character_stringContext existing_enum_name;
		public Character_stringContext new_enum_name;
		public TerminalNode TYPE() { return getToken(PLpgSQLParser.TYPE, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Set_schemaContext set_schema() {
			return getRuleContext(Set_schemaContext.class,0);
		}
		public Rename_toContext rename_to() {
			return getRuleContext(Rename_toContext.class,0);
		}
		public TerminalNode ADD() { return getToken(PLpgSQLParser.ADD, 0); }
		public TerminalNode VALUE() { return getToken(PLpgSQLParser.VALUE, 0); }
		public TerminalNode RENAME() { return getToken(PLpgSQLParser.RENAME, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(PLpgSQLParser.ATTRIBUTE, 0); }
		public TerminalNode TO() { return getToken(PLpgSQLParser.TO, 0); }
		public List<Type_actionContext> type_action() {
			return getRuleContexts(Type_actionContext.class);
		}
		public Type_actionContext type_action(int i) {
			return getRuleContext(Type_actionContext.class,i);
		}
		public List<Character_stringContext> character_string() {
			return getRuleContexts(Character_stringContext.class);
		}
		public Character_stringContext character_string(int i) {
			return getRuleContext(Character_stringContext.class,i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public Cascade_restrictContext cascade_restrict() {
			return getRuleContext(Cascade_restrictContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public TerminalNode BEFORE() { return getToken(PLpgSQLParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(PLpgSQLParser.AFTER, 0); }
		public Alter_type_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_type_statement; }
	}

	public final Alter_type_statementContext alter_type_statement() throws RecognitionException {
		Alter_type_statementContext _localctx = new Alter_type_statementContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_alter_type_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2112);
			match(TYPE);
			setState(2113);
			((Alter_type_statementContext)_localctx).name = schema_qualified_name();
			setState(2148);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,204,_ctx) ) {
			case 1:
				{
				setState(2114);
				set_schema();
				}
				break;
			case 2:
				{
				setState(2115);
				rename_to();
				}
				break;
			case 3:
				{
				setState(2116);
				match(ADD);
				setState(2117);
				match(VALUE);
				setState(2119);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(2118);
					if_not_exists();
					}
				}

				setState(2121);
				((Alter_type_statementContext)_localctx).new_enum_value = character_string();
				setState(2124);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AFTER || _la==BEFORE) {
					{
					setState(2122);
					_la = _input.LA(1);
					if ( !(_la==AFTER || _la==BEFORE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2123);
					((Alter_type_statementContext)_localctx).existing_enum_value = character_string();
					}
				}

				}
				break;
			case 4:
				{
				setState(2126);
				match(RENAME);
				setState(2127);
				match(ATTRIBUTE);
				setState(2128);
				((Alter_type_statementContext)_localctx).attribute_name = identifier();
				setState(2129);
				match(TO);
				setState(2130);
				((Alter_type_statementContext)_localctx).new_attribute_name = identifier();
				setState(2132);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(2131);
					cascade_restrict();
					}
				}

				}
				break;
			case 5:
				{
				setState(2134);
				match(RENAME);
				setState(2135);
				match(VALUE);
				setState(2136);
				((Alter_type_statementContext)_localctx).existing_enum_name = character_string();
				setState(2137);
				match(TO);
				setState(2138);
				((Alter_type_statementContext)_localctx).new_enum_name = character_string();
				}
				break;
			case 6:
				{
				setState(2140);
				type_action();
				setState(2145);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2141);
					match(COMMA);
					setState(2142);
					type_action();
					}
					}
					setState(2147);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_domain_statementContext extends ParserRuleContext {
		public Schema_qualified_nameContext name;
		public Domain_constraintContext dom_constraint;
		public Token not_valid;
		public TerminalNode DOMAIN() { return getToken(PLpgSQLParser.DOMAIN, 0); }
		public List<Schema_qualified_nameContext> schema_qualified_name() {
			return getRuleContexts(Schema_qualified_nameContext.class);
		}
		public Schema_qualified_nameContext schema_qualified_name(int i) {
			return getRuleContext(Schema_qualified_nameContext.class,i);
		}
		public Set_def_columnContext set_def_column() {
			return getRuleContext(Set_def_columnContext.class,0);
		}
		public Drop_defContext drop_def() {
			return getRuleContext(Drop_defContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PLpgSQLParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PLpgSQLParser.NULL, 0); }
		public TerminalNode ADD() { return getToken(PLpgSQLParser.ADD, 0); }
		public Drop_constraintContext drop_constraint() {
			return getRuleContext(Drop_constraintContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(PLpgSQLParser.RENAME, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PLpgSQLParser.CONSTRAINT, 0); }
		public TerminalNode TO() { return getToken(PLpgSQLParser.TO, 0); }
		public Validate_constraintContext validate_constraint() {
			return getRuleContext(Validate_constraintContext.class,0);
		}
		public Rename_toContext rename_to() {
			return getRuleContext(Rename_toContext.class,0);
		}
		public Set_schemaContext set_schema() {
			return getRuleContext(Set_schemaContext.class,0);
		}
		public TerminalNode SET() { return getToken(PLpgSQLParser.SET, 0); }
		public TerminalNode DROP() { return getToken(PLpgSQLParser.DROP, 0); }
		public Domain_constraintContext domain_constraint() {
			return getRuleContext(Domain_constraintContext.class,0);
		}
		public TerminalNode VALID() { return getToken(PLpgSQLParser.VALID, 0); }
		public Alter_domain_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_domain_statement; }
	}

	public final Alter_domain_statementContext alter_domain_statement() throws RecognitionException {
		Alter_domain_statementContext _localctx = new Alter_domain_statementContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_alter_domain_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2150);
			match(DOMAIN);
			setState(2151);
			((Alter_domain_statementContext)_localctx).name = schema_qualified_name();
			setState(2173);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,206,_ctx) ) {
			case 1:
				{
				setState(2152);
				set_def_column();
				}
				break;
			case 2:
				{
				setState(2153);
				drop_def();
				}
				break;
			case 3:
				{
				setState(2154);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==SET) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2155);
				match(NOT);
				setState(2156);
				match(NULL);
				}
				break;
			case 4:
				{
				setState(2157);
				match(ADD);
				setState(2158);
				((Alter_domain_statementContext)_localctx).dom_constraint = domain_constraint();
				setState(2161);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2159);
					match(NOT);
					setState(2160);
					((Alter_domain_statementContext)_localctx).not_valid = match(VALID);
					}
				}

				}
				break;
			case 5:
				{
				setState(2163);
				drop_constraint();
				}
				break;
			case 6:
				{
				setState(2164);
				match(RENAME);
				setState(2165);
				match(CONSTRAINT);
				setState(2166);
				schema_qualified_name();
				setState(2167);
				match(TO);
				setState(2168);
				schema_qualified_name();
				}
				break;
			case 7:
				{
				setState(2170);
				validate_constraint();
				}
				break;
			case 8:
				{
				setState(2171);
				rename_to();
				}
				break;
			case 9:
				{
				setState(2172);
				set_schema();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_server_statementContext extends ParserRuleContext {
		public TerminalNode SERVER() { return getToken(PLpgSQLParser.SERVER, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Alter_server_actionContext alter_server_action() {
			return getRuleContext(Alter_server_actionContext.class,0);
		}
		public Alter_server_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_server_statement; }
	}

	public final Alter_server_statementContext alter_server_statement() throws RecognitionException {
		Alter_server_statementContext _localctx = new Alter_server_statementContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_alter_server_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2175);
			match(SERVER);
			setState(2176);
			identifier();
			setState(2177);
			alter_server_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_server_actionContext extends ParserRuleContext {
		public Define_foreign_optionsContext define_foreign_options() {
			return getRuleContext(Define_foreign_optionsContext.class,0);
		}
		public TerminalNode VERSION() { return getToken(PLpgSQLParser.VERSION, 0); }
		public Character_stringContext character_string() {
			return getRuleContext(Character_stringContext.class,0);
		}
		public Owner_toContext owner_to() {
			return getRuleContext(Owner_toContext.class,0);
		}
		public Rename_toContext rename_to() {
			return getRuleContext(Rename_toContext.class,0);
		}
		public Alter_server_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_server_action; }
	}

	public final Alter_server_actionContext alter_server_action() throws RecognitionException {
		Alter_server_actionContext _localctx = new Alter_server_actionContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_alter_server_action);
		int _la;
		try {
			setState(2188);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,208,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2181);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VERSION) {
					{
					setState(2179);
					match(VERSION);
					setState(2180);
					character_string();
					}
				}

				setState(2183);
				define_foreign_options();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2184);
				match(VERSION);
				setState(2185);
				character_string();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2186);
				owner_to();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2187);
				rename_to();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_fts_statementContext extends ParserRuleContext {
		public Schema_qualified_nameContext name;
		public TerminalNode TEXT() { return getToken(PLpgSQLParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(PLpgSQLParser.SEARCH, 0); }
		public TerminalNode DICTIONARY() { return getToken(PLpgSQLParser.DICTIONARY, 0); }
		public Storage_parameterContext storage_parameter() {
			return getRuleContext(Storage_parameterContext.class,0);
		}
		public TerminalNode CONFIGURATION() { return getToken(PLpgSQLParser.CONFIGURATION, 0); }
		public Alter_fts_configurationContext alter_fts_configuration() {
			return getRuleContext(Alter_fts_configurationContext.class,0);
		}
		public TerminalNode TEMPLATE() { return getToken(PLpgSQLParser.TEMPLATE, 0); }
		public TerminalNode PARSER() { return getToken(PLpgSQLParser.PARSER, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Rename_toContext rename_to() {
			return getRuleContext(Rename_toContext.class,0);
		}
		public Set_schemaContext set_schema() {
			return getRuleContext(Set_schemaContext.class,0);
		}
		public Alter_fts_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_fts_statement; }
	}

	public final Alter_fts_statementContext alter_fts_statement() throws RecognitionException {
		Alter_fts_statementContext _localctx = new Alter_fts_statementContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_alter_fts_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2190);
			match(TEXT);
			setState(2191);
			match(SEARCH);
			setState(2206);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,210,_ctx) ) {
			case 1:
				{
				setState(2192);
				_la = _input.LA(1);
				if ( !(_la==CONFIGURATION || _la==DICTIONARY || _la==PARSER || _la==TEMPLATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2193);
				((Alter_fts_statementContext)_localctx).name = schema_qualified_name();
				setState(2196);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case RENAME:
					{
					setState(2194);
					rename_to();
					}
					break;
				case SET:
					{
					setState(2195);
					set_schema();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				setState(2198);
				match(DICTIONARY);
				setState(2199);
				((Alter_fts_statementContext)_localctx).name = schema_qualified_name();
				setState(2200);
				storage_parameter();
				}
				break;
			case 3:
				{
				setState(2202);
				match(CONFIGURATION);
				setState(2203);
				((Alter_fts_statementContext)_localctx).name = schema_qualified_name();
				setState(2204);
				alter_fts_configuration();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_fts_configurationContext extends ParserRuleContext {
		public TerminalNode MAPPING() { return getToken(PLpgSQLParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(PLpgSQLParser.FOR, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PLpgSQLParser.WITH, 0); }
		public List<Schema_qualified_nameContext> schema_qualified_name() {
			return getRuleContexts(Schema_qualified_nameContext.class);
		}
		public Schema_qualified_nameContext schema_qualified_name(int i) {
			return getRuleContext(Schema_qualified_nameContext.class,i);
		}
		public TerminalNode ADD() { return getToken(PLpgSQLParser.ADD, 0); }
		public TerminalNode ALTER() { return getToken(PLpgSQLParser.ALTER, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public TerminalNode REPLACE() { return getToken(PLpgSQLParser.REPLACE, 0); }
		public TerminalNode DROP() { return getToken(PLpgSQLParser.DROP, 0); }
		public TerminalNode IF() { return getToken(PLpgSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PLpgSQLParser.EXISTS, 0); }
		public Alter_fts_configurationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_fts_configuration; }
	}

	public final Alter_fts_configurationContext alter_fts_configuration() throws RecognitionException {
		Alter_fts_configurationContext _localctx = new Alter_fts_configurationContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_alter_fts_configuration);
		int _la;
		try {
			setState(2240);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,214,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2208);
				_la = _input.LA(1);
				if ( !(_la==ADD || _la==ALTER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2209);
				match(MAPPING);
				setState(2210);
				match(FOR);
				setState(2211);
				identifier_list();
				setState(2212);
				match(WITH);
				setState(2213);
				schema_qualified_name();
				setState(2218);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2214);
					match(COMMA);
					setState(2215);
					schema_qualified_name();
					}
					}
					setState(2220);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2221);
				match(ALTER);
				setState(2222);
				match(MAPPING);
				setState(2225);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(2223);
					match(FOR);
					setState(2224);
					identifier_list();
					}
				}

				setState(2227);
				match(REPLACE);
				setState(2228);
				schema_qualified_name();
				setState(2229);
				match(WITH);
				setState(2230);
				schema_qualified_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2232);
				match(DROP);
				setState(2233);
				match(MAPPING);
				setState(2236);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(2234);
					match(IF);
					setState(2235);
					match(EXISTS);
					}
				}

				setState(2238);
				match(FOR);
				setState(2239);
				identifier_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_actionContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(PLpgSQLParser.ADD, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(PLpgSQLParser.ATTRIBUTE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public Collate_identifierContext collate_identifier() {
			return getRuleContext(Collate_identifierContext.class,0);
		}
		public Cascade_restrictContext cascade_restrict() {
			return getRuleContext(Cascade_restrictContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PLpgSQLParser.DROP, 0); }
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(PLpgSQLParser.ALTER, 0); }
		public TerminalNode TYPE() { return getToken(PLpgSQLParser.TYPE, 0); }
		public TerminalNode SET() { return getToken(PLpgSQLParser.SET, 0); }
		public TerminalNode DATA() { return getToken(PLpgSQLParser.DATA, 0); }
		public Type_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_action; }
	}

	public final Type_actionContext type_action() throws RecognitionException {
		Type_actionContext _localctx = new Type_actionContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_type_action);
		int _la;
		try {
			setState(2276);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
				enterOuterAlt(_localctx, 1);
				{
				setState(2242);
				match(ADD);
				setState(2243);
				match(ATTRIBUTE);
				setState(2244);
				identifier();
				setState(2245);
				data_type();
				setState(2247);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(2246);
					collate_identifier();
					}
				}

				setState(2250);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(2249);
					cascade_restrict();
					}
				}

				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 2);
				{
				setState(2252);
				match(DROP);
				setState(2253);
				match(ATTRIBUTE);
				setState(2255);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,217,_ctx) ) {
				case 1:
					{
					setState(2254);
					if_exists();
					}
					break;
				}
				setState(2257);
				identifier();
				setState(2259);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(2258);
					cascade_restrict();
					}
				}

				}
				break;
			case ALTER:
				enterOuterAlt(_localctx, 3);
				{
				setState(2261);
				match(ALTER);
				setState(2262);
				match(ATTRIBUTE);
				setState(2263);
				identifier();
				setState(2266);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SET) {
					{
					setState(2264);
					match(SET);
					setState(2265);
					match(DATA);
					}
				}

				setState(2268);
				match(TYPE);
				setState(2269);
				data_type();
				setState(2271);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(2270);
					collate_identifier();
					}
				}

				setState(2274);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(2273);
					cascade_restrict();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_def_columnContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PLpgSQLParser.SET, 0); }
		public TerminalNode DEFAULT() { return getToken(PLpgSQLParser.DEFAULT, 0); }
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public Set_def_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_def_column; }
	}

	public final Set_def_columnContext set_def_column() throws RecognitionException {
		Set_def_columnContext _localctx = new Set_def_columnContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_set_def_column);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2278);
			match(SET);
			setState(2279);
			match(DEFAULT);
			setState(2280);
			vex(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_defContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PLpgSQLParser.DROP, 0); }
		public TerminalNode DEFAULT() { return getToken(PLpgSQLParser.DEFAULT, 0); }
		public Drop_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_def; }
	}

	public final Drop_defContext drop_def() throws RecognitionException {
		Drop_defContext _localctx = new Drop_defContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_drop_def);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2282);
			match(DROP);
			setState(2283);
			match(DEFAULT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_index_statementContext extends ParserRuleContext {
		public IdentifierContext name;
		public Schema_qualified_nameContext table_name;
		public TerminalNode INDEX() { return getToken(PLpgSQLParser.INDEX, 0); }
		public TerminalNode ON() { return getToken(PLpgSQLParser.ON, 0); }
		public Index_restContext index_rest() {
			return getRuleContext(Index_restContext.class,0);
		}
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(PLpgSQLParser.UNIQUE, 0); }
		public TerminalNode CONCURRENTLY() { return getToken(PLpgSQLParser.CONCURRENTLY, 0); }
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(PLpgSQLParser.ONLY, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Create_index_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_index_statement; }
	}

	public final Create_index_statementContext create_index_statement() throws RecognitionException {
		Create_index_statementContext _localctx = new Create_index_statementContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_create_index_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2286);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNIQUE) {
				{
				setState(2285);
				match(UNIQUE);
				}
			}

			setState(2288);
			match(INDEX);
			setState(2290);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONCURRENTLY) {
				{
				setState(2289);
				match(CONCURRENTLY);
				}
			}

			setState(2293);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,225,_ctx) ) {
			case 1:
				{
				setState(2292);
				if_not_exists();
				}
				break;
			}
			setState(2296);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATTACH) | (1L << ATTRIBUTE) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BY) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG) | (1L << CHAIN) | (1L << CHARACTERISTICS) | (1L << CHECKPOINT) | (1L << CLASS) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMENTS) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONFIGURATION) | (1L << CONFLICT) | (1L << CONNECTION) | (1L << CONSTRAINTS) | (1L << CONTENT) | (1L << CONTINUE) | (1L << CONVERSION) | (1L << COPY) | (1L << COST) | (1L << CSV) | (1L << CUBE) | (1L << CURRENT) | (1L << CURSOR) | (1L << CYCLE) | (1L << DATA) | (1L << DATABASE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DEFAULTS) | (1L << DEFERRED) | (1L << DEFINER) | (1L << DELETE) | (1L << DELIMITER) | (1L << DELIMITERS) | (1L << DEPENDS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DETACH - 64)) | (1L << (DICTIONARY - 64)) | (1L << (DISABLE - 64)) | (1L << (DISCARD - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOMAIN - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (EACH - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTED - 64)) | (1L << (ENUM - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVENT - 64)) | (1L << (EXCLUDE - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXCLUSIVE - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTENSION - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FAMILY - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORCE - 64)) | (1L << (FORWARD - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GENERATED - 64)) | (1L << (GLOBAL - 64)) | (1L << (GRANTED - 64)) | (1L << (GROUPS - 64)) | (1L << (HANDLER - 64)) | (1L << (HEADER - 64)) | (1L << (HOLD - 64)) | (1L << (HOUR - 64)) | (1L << (IDENTITY - 64)) | (1L << (IF - 64)) | (1L << (IMMEDIATE - 64)) | (1L << (IMMUTABLE - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPORT - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INCREMENT - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXES - 64)) | (1L << (INHERIT - 64)) | (1L << (INHERITS - 64)) | (1L << (INLINE - 64)) | (1L << (INPUT - 64)) | (1L << (INSENSITIVE - 64)) | (1L << (INSERT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INVOKER - 64)) | (1L << (ISOLATION - 64)) | (1L << (KEY - 64)) | (1L << (LABEL - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LARGE - 64)) | (1L << (LAST - 64)) | (1L << (LEAKPROOF - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LEVEL - 128)) | (1L << (LISTEN - 128)) | (1L << (LOAD - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCATION - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKED - 128)) | (1L << (LOGGED - 128)) | (1L << (MAPPING - 128)) | (1L << (MATCH - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MAXVALUE - 128)) | (1L << (METHOD - 128)) | (1L << (MINUTE - 128)) | (1L << (MINVALUE - 128)) | (1L << (MODE - 128)) | (1L << (MONTH - 128)) | (1L << (MOVE - 128)) | (1L << (NAME - 128)) | (1L << (NAMES - 128)) | (1L << (NEW - 128)) | (1L << (NEXT - 128)) | (1L << (NO - 128)) | (1L << (NOTHING - 128)) | (1L << (NOTIFY - 128)) | (1L << (NOWAIT - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFF - 128)) | (1L << (OIDS - 128)) | (1L << (OLD - 128)) | (1L << (OPERATOR - 128)) | (1L << (OPTION - 128)) | (1L << (OPTIONS - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OTHERS - 128)) | (1L << (OVER - 128)) | (1L << (OVERRIDING - 128)) | (1L << (OWNED - 128)) | (1L << (OWNER - 128)) | (1L << (PARALLEL - 128)) | (1L << (PARSER - 128)) | (1L << (PARTIAL - 128)) | (1L << (PARTITION - 128)) | (1L << (PASSING - 128)) | (1L << (PASSWORD - 128)) | (1L << (PLANS - 128)) | (1L << (POLICY - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PREPARED - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRIOR - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROCEDURAL - 128)) | (1L << (PROCEDURE - 128)) | (1L << (PROCEDURES - 128)) | (1L << (PROGRAM - 128)) | (1L << (PUBLICATION - 128)) | (1L << (QUOTE - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (REASSIGN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (RECHECK - 192)) | (1L << (RECURSIVE - 192)) | (1L << (REF - 192)) | (1L << (REFERENCING - 192)) | (1L << (REFRESH - 192)) | (1L << (REINDEX - 192)) | (1L << (RELATIVE - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (REPLICA - 192)) | (1L << (RESET - 192)) | (1L << (RESTART - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUTINE - 192)) | (1L << (ROUTINES - 192)) | (1L << (ROWS - 192)) | (1L << (RULE - 192)) | (1L << (SAVEPOINT - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SCROLL - 192)) | (1L << (SEARCH - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEQUENCE - 192)) | (1L << (SEQUENCES - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SERVER - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHARE - 192)) | (1L << (SHOW - 192)) | (1L << (SIMPLE - 192)) | (1L << (SKIP_ - 192)) | (1L << (SNAPSHOT - 192)) | (1L << (SQL - 192)) | (1L << (STABLE - 192)) | (1L << (STANDALONE - 192)) | (1L << (START - 192)) | (1L << (STATEMENT - 192)) | (1L << (STATISTICS - 192)) | (1L << (STDIN - 192)) | (1L << (STDOUT - 192)) | (1L << (STORAGE - 192)) | (1L << (STORED - 192)) | (1L << (STRICT - 192)) | (1L << (STRIP - 192)) | (1L << (SUBSCRIPTION - 192)) | (1L << (SUPPORT - 192)) | (1L << (SYSID - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESPACE - 192)) | (1L << (TEMP - 192)) | (1L << (TEMPLATE - 192)) | (1L << (TEMPORARY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TEXT - 256)) | (1L << (TIES - 256)) | (1L << (TRANSACTION - 256)) | (1L << (TRANSFORM - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TRUSTED - 256)) | (1L << (TYPE - 256)) | (1L << (TYPES - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNENCRYPTED - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNLISTEN - 256)) | (1L << (UNLOGGED - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (VACUUM - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALIDATOR - 256)) | (1L << (VALUE - 256)) | (1L << (VARYING - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (VIEWS - 256)) | (1L << (VOLATILE - 256)) | (1L << (WHITESPACE - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (XML - 256)) | (1L << (YEAR - 256)) | (1L << (YES - 256)) | (1L << (ZONE - 256)) | (1L << (BETWEEN - 256)) | (1L << (BIGINT - 256)) | (1L << (BIT - 256)) | (1L << (BOOLEAN - 256)) | (1L << (CHAR - 256)) | (1L << (CHARACTER - 256)) | (1L << (COALESCE - 256)) | (1L << (DEC - 256)) | (1L << (DECIMAL - 256)) | (1L << (EXISTS - 256)) | (1L << (EXTRACT - 256)) | (1L << (FLOAT - 256)) | (1L << (GREATEST - 256)) | (1L << (GROUPING - 256)) | (1L << (INOUT - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERVAL - 256)) | (1L << (LEAST - 256)) | (1L << (NATIONAL - 256)) | (1L << (NCHAR - 256)) | (1L << (NONE - 256)) | (1L << (NULLIF - 256)) | (1L << (NUMERIC - 256)) | (1L << (OUT - 256)) | (1L << (OVERLAY - 256)) | (1L << (POSITION - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRECISION - 320)) | (1L << (REAL - 320)) | (1L << (ROW - 320)) | (1L << (SETOF - 320)) | (1L << (SMALLINT - 320)) | (1L << (SUBSTRING - 320)) | (1L << (TIME - 320)) | (1L << (TIMESTAMP - 320)) | (1L << (TREAT - 320)) | (1L << (TRIM - 320)) | (1L << (VALUES - 320)) | (1L << (VARCHAR - 320)) | (1L << (XMLATTRIBUTES - 320)) | (1L << (XMLCONCAT - 320)) | (1L << (XMLELEMENT - 320)) | (1L << (XMLEXISTS - 320)) | (1L << (XMLFOREST - 320)) | (1L << (XMLNAMESPACES - 320)) | (1L << (XMLPARSE - 320)) | (1L << (XMLPI - 320)) | (1L << (XMLROOT - 320)) | (1L << (XMLSERIALIZE - 320)) | (1L << (XMLTABLE - 320)))) != 0) || ((((_la - 443)) & ~0x3f) == 0 && ((1L << (_la - 443)) & ((1L << (ALIGNMENT - 443)) | (1L << (BASETYPE - 443)) | (1L << (BUFFERS - 443)) | (1L << (BYPASSRLS - 443)) | (1L << (CANONICAL - 443)) | (1L << (CATEGORY - 443)) | (1L << (COLLATABLE - 443)) | (1L << (COMBINEFUNC - 443)) | (1L << (COMMUTATOR - 443)) | (1L << (CONNECT - 443)) | (1L << (COSTS - 443)) | (1L << (CREATEDB - 443)) | (1L << (CREATEROLE - 443)) | (1L << (DESERIALFUNC - 443)) | (1L << (DETERMINISTIC - 443)) | (1L << (DISABLE_PAGE_SKIPPING - 443)) | (1L << (ELEMENT - 443)) | (1L << (EXTENDED - 443)) | (1L << (FINALFUNC - 443)) | (1L << (FINALFUNC_EXTRA - 443)) | (1L << (FINALFUNC_MODIFY - 443)) | (1L << (FORCE_NOT_NULL - 443)) | (1L << (FORCE_NULL - 443)) | (1L << (FORCE_QUOTE - 443)) | (1L << (FORMAT - 443)) | (1L << (GETTOKEN - 443)) | (1L << (HASH - 443)) | (1L << (HASHES - 443)) | (1L << (HEADLINE - 443)) | (1L << (HYPOTHETICAL - 443)) | (1L << (INDEX_CLEANUP - 443)) | (1L << (INIT - 443)) | (1L << (INITCOND - 443)) | (1L << (INTERNALLENGTH - 443)) | (1L << (JSON - 443)) | (1L << (LC_COLLATE - 443)) | (1L << (LC_CTYPE - 443)) | (1L << (LEFTARG - 443)) | (1L << (LEXIZE - 443)) | (1L << (LEXTYPES - 443)) | (1L << (LIST - 443)) | (1L << (LOCALE - 443)) | (1L << (LOGIN - 443)) | (1L << (MAIN - 443)) | (1L << (MERGES - 443)) | (1L << (MFINALFUNC - 443)) | (1L << (MFINALFUNC_EXTRA - 443)) | (1L << (MFINALFUNC_MODIFY - 443)) | (1L << (MINITCOND - 443)) | (1L << (MINVFUNC - 443)) | (1L << (MODULUS - 443)) | (1L << (MSFUNC - 443)) | (1L << (MSSPACE - 443)) | (1L << (MSTYPE - 443)) | (1L << (NEGATOR - 443)) | (1L << (NOBYPASSRLS - 443)) | (1L << (NOCREATEDB - 443)) | (1L << (NOCREATEROLE - 443)) | (1L << (NOINHERIT - 443)) | (1L << (NOLOGIN - 443)) | (1L << (NOREPLICATION - 443)) | (1L << (NOSUPERUSER - 443)) | (1L << (OUTPUT - 443)) | (1L << (PASSEDBYVALUE - 443)))) != 0) || ((((_la - 507)) & ~0x3f) == 0 && ((1L << (_la - 507)) & ((1L << (PATH - 507)) | (1L << (PERMISSIVE - 507)) | (1L << (PLAIN - 507)) | (1L << (PREFERRED - 507)) | (1L << (PROVIDER - 507)) | (1L << (READ_ONLY - 507)) | (1L << (READ_WRITE - 507)) | (1L << (RECEIVE - 507)) | (1L << (REMAINDER - 507)) | (1L << (REPLICATION - 507)) | (1L << (RESTRICTED - 507)) | (1L << (RESTRICTIVE - 507)) | (1L << (RIGHTARG - 507)) | (1L << (SAFE - 507)) | (1L << (SEND - 507)) | (1L << (SERIALFUNC - 507)) | (1L << (SETTINGS - 507)) | (1L << (SFUNC - 507)) | (1L << (SHAREABLE - 507)) | (1L << (SKIP_LOCKED - 507)) | (1L << (SORTOP - 507)) | (1L << (SSPACE - 507)) | (1L << (STYPE - 507)) | (1L << (SUBTYPE_DIFF - 507)) | (1L << (SUBTYPE_OPCLASS - 507)) | (1L << (SUBTYPE - 507)) | (1L << (SUMMARY - 507)) | (1L << (SUPERUSER - 507)) | (1L << (TIMING - 507)) | (1L << (TYPMOD_IN - 507)) | (1L << (TYPMOD_OUT - 507)) | (1L << (UNSAFE - 507)) | (1L << (USAGE - 507)) | (1L << (VARIABLE - 507)) | (1L << (YAML - 507)) | (1L << (ALIAS - 507)) | (1L << (ASSERT - 507)) | (1L << (CONSTANT - 507)) | (1L << (DATATYPE - 507)) | (1L << (DEBUG - 507)) | (1L << (DETAIL - 507)) | (1L << (DIAGNOSTICS - 507)) | (1L << (ELSEIF - 507)) | (1L << (ELSIF - 507)) | (1L << (ERRCODE - 507)) | (1L << (EXIT - 507)) | (1L << (EXCEPTION - 507)) | (1L << (FOREACH - 507)) | (1L << (GET - 507)) | (1L << (HINT - 507)) | (1L << (INFO - 507)) | (1L << (LOG - 507)) | (1L << (LOOP - 507)) | (1L << (MESSAGE - 507)) | (1L << (NOTICE - 507)) | (1L << (OPEN - 507)) | (1L << (PERFORM - 507)) | (1L << (QUERY - 507)) | (1L << (RAISE - 507)) | (1L << (RECORD - 507)) | (1L << (RETURN - 507)) | (1L << (REVERSE - 507)) | (1L << (ROWTYPE - 507)) | (1L << (SLICE - 507)))) != 0) || ((((_la - 571)) & ~0x3f) == 0 && ((1L << (_la - 571)) & ((1L << (SQLSTATE - 571)) | (1L << (STACKED - 571)) | (1L << (WARNING - 571)) | (1L << (WHILE - 571)) | (1L << (Identifier - 571)) | (1L << (QuotedIdentifier - 571)))) != 0)) {
				{
				setState(2295);
				((Create_index_statementContext)_localctx).name = identifier();
				}
			}

			setState(2298);
			match(ON);
			setState(2300);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ONLY) {
				{
				setState(2299);
				match(ONLY);
				}
			}

			setState(2302);
			((Create_index_statementContext)_localctx).table_name = schema_qualified_name();
			setState(2303);
			index_rest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_restContext extends ParserRuleContext {
		public IdentifierContext method;
		public Index_sortContext index_sort() {
			return getRuleContext(Index_sortContext.class,0);
		}
		public TerminalNode USING() { return getToken(PLpgSQLParser.USING, 0); }
		public Including_indexContext including_index() {
			return getRuleContext(Including_indexContext.class,0);
		}
		public With_storage_parameterContext with_storage_parameter() {
			return getRuleContext(With_storage_parameterContext.class,0);
		}
		public Table_spaceContext table_space() {
			return getRuleContext(Table_spaceContext.class,0);
		}
		public Index_whereContext index_where() {
			return getRuleContext(Index_whereContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Index_restContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_rest; }
	}

	public final Index_restContext index_rest() throws RecognitionException {
		Index_restContext _localctx = new Index_restContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_index_rest);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2307);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(2305);
				match(USING);
				setState(2306);
				((Index_restContext)_localctx).method = identifier();
				}
			}

			setState(2309);
			index_sort();
			setState(2311);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCLUDE) {
				{
				setState(2310);
				including_index();
				}
			}

			setState(2314);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2313);
				with_storage_parameter();
				}
			}

			setState(2317);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLESPACE) {
				{
				setState(2316);
				table_space();
				}
			}

			setState(2320);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(2319);
				index_where();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_sortContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public Sort_specifier_listContext sort_specifier_list() {
			return getRuleContext(Sort_specifier_listContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public Index_sortContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_sort; }
	}

	public final Index_sortContext index_sort() throws RecognitionException {
		Index_sortContext _localctx = new Index_sortContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_index_sort);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2322);
			match(LEFT_PAREN);
			setState(2323);
			sort_specifier_list();
			setState(2324);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Including_indexContext extends ParserRuleContext {
		public TerminalNode INCLUDE() { return getToken(PLpgSQLParser.INCLUDE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Including_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_including_index; }
	}

	public final Including_indexContext including_index() throws RecognitionException {
		Including_indexContext _localctx = new Including_indexContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_including_index);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2326);
			match(INCLUDE);
			setState(2327);
			match(LEFT_PAREN);
			setState(2328);
			identifier();
			setState(2333);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2329);
				match(COMMA);
				setState(2330);
				identifier();
				}
				}
				setState(2335);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2336);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_whereContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(PLpgSQLParser.WHERE, 0); }
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public Index_whereContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_where; }
	}

	public final Index_whereContext index_where() throws RecognitionException {
		Index_whereContext _localctx = new Index_whereContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_index_where);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2338);
			match(WHERE);
			setState(2339);
			vex(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_extension_statementContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext schema;
		public TerminalNode EXTENSION() { return getToken(PLpgSQLParser.EXTENSION, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PLpgSQLParser.WITH, 0); }
		public TerminalNode SCHEMA() { return getToken(PLpgSQLParser.SCHEMA, 0); }
		public TerminalNode VERSION() { return getToken(PLpgSQLParser.VERSION, 0); }
		public TerminalNode FROM() { return getToken(PLpgSQLParser.FROM, 0); }
		public TerminalNode CASCADE() { return getToken(PLpgSQLParser.CASCADE, 0); }
		public List<Character_stringContext> character_string() {
			return getRuleContexts(Character_stringContext.class);
		}
		public Character_stringContext character_string(int i) {
			return getRuleContext(Character_stringContext.class,i);
		}
		public Create_extension_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_extension_statement; }
	}

	public final Create_extension_statementContext create_extension_statement() throws RecognitionException {
		Create_extension_statementContext _localctx = new Create_extension_statementContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_create_extension_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2341);
			match(EXTENSION);
			setState(2343);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,234,_ctx) ) {
			case 1:
				{
				setState(2342);
				if_not_exists();
				}
				break;
			}
			setState(2345);
			((Create_extension_statementContext)_localctx).name = identifier();
			setState(2347);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2346);
				match(WITH);
				}
			}

			setState(2351);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SCHEMA) {
				{
				setState(2349);
				match(SCHEMA);
				setState(2350);
				((Create_extension_statementContext)_localctx).schema = identifier();
				}
			}

			setState(2358);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VERSION) {
				{
				setState(2353);
				match(VERSION);
				setState(2356);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BY:
				case CACHE:
				case CALL:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COLUMNS:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONFLICT:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CUBE:
				case CURRENT:
				case CURSOR:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DEPENDS:
				case DETACH:
				case DICTIONARY:
				case DISABLE:
				case DISCARD:
				case DOCUMENT:
				case DOMAIN:
				case DOUBLE:
				case DROP:
				case EACH:
				case ENABLE:
				case ENCODING:
				case ENCRYPTED:
				case ENUM:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GENERATED:
				case GLOBAL:
				case GRANTED:
				case GROUPS:
				case HANDLER:
				case HEADER:
				case HOLD:
				case HOUR:
				case IDENTITY:
				case IF:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT:
				case IMPORT:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCKED:
				case LOGGED:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case METHOD:
				case MINUTE:
				case MINVALUE:
				case MODE:
				case MONTH:
				case MOVE:
				case NAME:
				case NAMES:
				case NEW:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS:
				case OBJECT:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDINALITY:
				case OTHERS:
				case OVER:
				case OVERRIDING:
				case OWNED:
				case OWNER:
				case PARALLEL:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case POLICY:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROCEDURES:
				case PROGRAM:
				case PUBLICATION:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINES:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMAS:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SKIP_:
				case SNAPSHOT:
				case SQL:
				case STABLE:
				case STANDALONE:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STORED:
				case STRICT:
				case STRIP:
				case SUBSCRIPTION:
				case SUPPORT:
				case SYSID:
				case SYSTEM:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT:
				case TIES:
				case TRANSACTION:
				case TRANSFORM:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case TYPES:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VALUE:
				case VARYING:
				case VERSION:
				case VIEW:
				case VIEWS:
				case VOLATILE:
				case WHITESPACE:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML:
				case YEAR:
				case YES:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN:
				case CHAR:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL:
				case EXISTS:
				case EXTRACT:
				case FLOAT:
				case GREATEST:
				case GROUPING:
				case INOUT:
				case INT:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OUT:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case ALIGNMENT:
				case BASETYPE:
				case BUFFERS:
				case BYPASSRLS:
				case CANONICAL:
				case CATEGORY:
				case COLLATABLE:
				case COMBINEFUNC:
				case COMMUTATOR:
				case CONNECT:
				case COSTS:
				case CREATEDB:
				case CREATEROLE:
				case DESERIALFUNC:
				case DETERMINISTIC:
				case DISABLE_PAGE_SKIPPING:
				case ELEMENT:
				case EXTENDED:
				case FINALFUNC:
				case FINALFUNC_EXTRA:
				case FINALFUNC_MODIFY:
				case FORCE_NOT_NULL:
				case FORCE_NULL:
				case FORCE_QUOTE:
				case FORMAT:
				case GETTOKEN:
				case HASH:
				case HASHES:
				case HEADLINE:
				case HYPOTHETICAL:
				case INDEX_CLEANUP:
				case INIT:
				case INITCOND:
				case INTERNALLENGTH:
				case JSON:
				case LC_COLLATE:
				case LC_CTYPE:
				case LEFTARG:
				case LEXIZE:
				case LEXTYPES:
				case LIST:
				case LOCALE:
				case LOGIN:
				case MAIN:
				case MERGES:
				case MFINALFUNC:
				case MFINALFUNC_EXTRA:
				case MFINALFUNC_MODIFY:
				case MINITCOND:
				case MINVFUNC:
				case MODULUS:
				case MSFUNC:
				case MSSPACE:
				case MSTYPE:
				case NEGATOR:
				case NOBYPASSRLS:
				case NOCREATEDB:
				case NOCREATEROLE:
				case NOINHERIT:
				case NOLOGIN:
				case NOREPLICATION:
				case NOSUPERUSER:
				case OUTPUT:
				case PASSEDBYVALUE:
				case PATH:
				case PERMISSIVE:
				case PLAIN:
				case PREFERRED:
				case PROVIDER:
				case READ_ONLY:
				case READ_WRITE:
				case RECEIVE:
				case REMAINDER:
				case REPLICATION:
				case RESTRICTED:
				case RESTRICTIVE:
				case RIGHTARG:
				case SAFE:
				case SEND:
				case SERIALFUNC:
				case SETTINGS:
				case SFUNC:
				case SHAREABLE:
				case SKIP_LOCKED:
				case SORTOP:
				case SSPACE:
				case STYPE:
				case SUBTYPE_DIFF:
				case SUBTYPE_OPCLASS:
				case SUBTYPE:
				case SUMMARY:
				case SUPERUSER:
				case TIMING:
				case TYPMOD_IN:
				case TYPMOD_OUT:
				case UNSAFE:
				case USAGE:
				case VARIABLE:
				case YAML:
				case ALIAS:
				case ASSERT:
				case CONSTANT:
				case DATATYPE:
				case DEBUG:
				case DETAIL:
				case DIAGNOSTICS:
				case ELSEIF:
				case ELSIF:
				case ERRCODE:
				case EXIT:
				case EXCEPTION:
				case FOREACH:
				case GET:
				case HINT:
				case INFO:
				case LOG:
				case LOOP:
				case MESSAGE:
				case NOTICE:
				case OPEN:
				case PERFORM:
				case QUERY:
				case RAISE:
				case RECORD:
				case RETURN:
				case REVERSE:
				case ROWTYPE:
				case SLICE:
				case SQLSTATE:
				case STACKED:
				case WARNING:
				case WHILE:
				case Identifier:
				case QuotedIdentifier:
					{
					setState(2354);
					identifier();
					}
					break;
				case Character_String_Literal:
				case BeginDollarStringConstant:
					{
					setState(2355);
					character_string();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(2365);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(2360);
				match(FROM);
				setState(2363);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BY:
				case CACHE:
				case CALL:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COLUMNS:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONFLICT:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CUBE:
				case CURRENT:
				case CURSOR:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DEPENDS:
				case DETACH:
				case DICTIONARY:
				case DISABLE:
				case DISCARD:
				case DOCUMENT:
				case DOMAIN:
				case DOUBLE:
				case DROP:
				case EACH:
				case ENABLE:
				case ENCODING:
				case ENCRYPTED:
				case ENUM:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GENERATED:
				case GLOBAL:
				case GRANTED:
				case GROUPS:
				case HANDLER:
				case HEADER:
				case HOLD:
				case HOUR:
				case IDENTITY:
				case IF:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT:
				case IMPORT:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCKED:
				case LOGGED:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case METHOD:
				case MINUTE:
				case MINVALUE:
				case MODE:
				case MONTH:
				case MOVE:
				case NAME:
				case NAMES:
				case NEW:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS:
				case OBJECT:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDINALITY:
				case OTHERS:
				case OVER:
				case OVERRIDING:
				case OWNED:
				case OWNER:
				case PARALLEL:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case POLICY:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROCEDURES:
				case PROGRAM:
				case PUBLICATION:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINES:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMAS:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SKIP_:
				case SNAPSHOT:
				case SQL:
				case STABLE:
				case STANDALONE:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STORED:
				case STRICT:
				case STRIP:
				case SUBSCRIPTION:
				case SUPPORT:
				case SYSID:
				case SYSTEM:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT:
				case TIES:
				case TRANSACTION:
				case TRANSFORM:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case TYPES:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VALUE:
				case VARYING:
				case VERSION:
				case VIEW:
				case VIEWS:
				case VOLATILE:
				case WHITESPACE:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML:
				case YEAR:
				case YES:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN:
				case CHAR:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL:
				case EXISTS:
				case EXTRACT:
				case FLOAT:
				case GREATEST:
				case GROUPING:
				case INOUT:
				case INT:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OUT:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case ALIGNMENT:
				case BASETYPE:
				case BUFFERS:
				case BYPASSRLS:
				case CANONICAL:
				case CATEGORY:
				case COLLATABLE:
				case COMBINEFUNC:
				case COMMUTATOR:
				case CONNECT:
				case COSTS:
				case CREATEDB:
				case CREATEROLE:
				case DESERIALFUNC:
				case DETERMINISTIC:
				case DISABLE_PAGE_SKIPPING:
				case ELEMENT:
				case EXTENDED:
				case FINALFUNC:
				case FINALFUNC_EXTRA:
				case FINALFUNC_MODIFY:
				case FORCE_NOT_NULL:
				case FORCE_NULL:
				case FORCE_QUOTE:
				case FORMAT:
				case GETTOKEN:
				case HASH:
				case HASHES:
				case HEADLINE:
				case HYPOTHETICAL:
				case INDEX_CLEANUP:
				case INIT:
				case INITCOND:
				case INTERNALLENGTH:
				case JSON:
				case LC_COLLATE:
				case LC_CTYPE:
				case LEFTARG:
				case LEXIZE:
				case LEXTYPES:
				case LIST:
				case LOCALE:
				case LOGIN:
				case MAIN:
				case MERGES:
				case MFINALFUNC:
				case MFINALFUNC_EXTRA:
				case MFINALFUNC_MODIFY:
				case MINITCOND:
				case MINVFUNC:
				case MODULUS:
				case MSFUNC:
				case MSSPACE:
				case MSTYPE:
				case NEGATOR:
				case NOBYPASSRLS:
				case NOCREATEDB:
				case NOCREATEROLE:
				case NOINHERIT:
				case NOLOGIN:
				case NOREPLICATION:
				case NOSUPERUSER:
				case OUTPUT:
				case PASSEDBYVALUE:
				case PATH:
				case PERMISSIVE:
				case PLAIN:
				case PREFERRED:
				case PROVIDER:
				case READ_ONLY:
				case READ_WRITE:
				case RECEIVE:
				case REMAINDER:
				case REPLICATION:
				case RESTRICTED:
				case RESTRICTIVE:
				case RIGHTARG:
				case SAFE:
				case SEND:
				case SERIALFUNC:
				case SETTINGS:
				case SFUNC:
				case SHAREABLE:
				case SKIP_LOCKED:
				case SORTOP:
				case SSPACE:
				case STYPE:
				case SUBTYPE_DIFF:
				case SUBTYPE_OPCLASS:
				case SUBTYPE:
				case SUMMARY:
				case SUPERUSER:
				case TIMING:
				case TYPMOD_IN:
				case TYPMOD_OUT:
				case UNSAFE:
				case USAGE:
				case VARIABLE:
				case YAML:
				case ALIAS:
				case ASSERT:
				case CONSTANT:
				case DATATYPE:
				case DEBUG:
				case DETAIL:
				case DIAGNOSTICS:
				case ELSEIF:
				case ELSIF:
				case ERRCODE:
				case EXIT:
				case EXCEPTION:
				case FOREACH:
				case GET:
				case HINT:
				case INFO:
				case LOG:
				case LOOP:
				case MESSAGE:
				case NOTICE:
				case OPEN:
				case PERFORM:
				case QUERY:
				case RAISE:
				case RECORD:
				case RETURN:
				case REVERSE:
				case ROWTYPE:
				case SLICE:
				case SQLSTATE:
				case STACKED:
				case WARNING:
				case WHILE:
				case Identifier:
				case QuotedIdentifier:
					{
					setState(2361);
					identifier();
					}
					break;
				case Character_String_Literal:
				case BeginDollarStringConstant:
					{
					setState(2362);
					character_string();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(2368);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE) {
				{
				setState(2367);
				match(CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_language_statementContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode LANGUAGE() { return getToken(PLpgSQLParser.LANGUAGE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode OR() { return getToken(PLpgSQLParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PLpgSQLParser.REPLACE, 0); }
		public TerminalNode TRUSTED() { return getToken(PLpgSQLParser.TRUSTED, 0); }
		public TerminalNode PROCEDURAL() { return getToken(PLpgSQLParser.PROCEDURAL, 0); }
		public TerminalNode HANDLER() { return getToken(PLpgSQLParser.HANDLER, 0); }
		public List<Schema_qualified_nameContext> schema_qualified_name() {
			return getRuleContexts(Schema_qualified_nameContext.class);
		}
		public Schema_qualified_nameContext schema_qualified_name(int i) {
			return getRuleContext(Schema_qualified_nameContext.class,i);
		}
		public TerminalNode INLINE() { return getToken(PLpgSQLParser.INLINE, 0); }
		public TerminalNode VALIDATOR() { return getToken(PLpgSQLParser.VALIDATOR, 0); }
		public Create_language_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_language_statement; }
	}

	public final Create_language_statementContext create_language_statement() throws RecognitionException {
		Create_language_statementContext _localctx = new Create_language_statementContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_create_language_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2372);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(2370);
				match(OR);
				setState(2371);
				match(REPLACE);
				}
			}

			setState(2375);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TRUSTED) {
				{
				setState(2374);
				match(TRUSTED);
				}
			}

			setState(2378);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PROCEDURAL) {
				{
				setState(2377);
				match(PROCEDURAL);
				}
			}

			setState(2380);
			match(LANGUAGE);
			setState(2381);
			((Create_language_statementContext)_localctx).name = identifier();
			setState(2392);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HANDLER) {
				{
				setState(2382);
				match(HANDLER);
				setState(2383);
				schema_qualified_name();
				setState(2386);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INLINE) {
					{
					setState(2384);
					match(INLINE);
					setState(2385);
					schema_qualified_name();
					}
				}

				setState(2390);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALIDATOR) {
					{
					setState(2388);
					match(VALIDATOR);
					setState(2389);
					schema_qualified_name();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_event_triggerContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode EVENT() { return getToken(PLpgSQLParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(PLpgSQLParser.TRIGGER, 0); }
		public TerminalNode ON() { return getToken(PLpgSQLParser.ON, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode EXECUTE() { return getToken(PLpgSQLParser.EXECUTE, 0); }
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public TerminalNode PROCEDURE() { return getToken(PLpgSQLParser.PROCEDURE, 0); }
		public TerminalNode FUNCTION() { return getToken(PLpgSQLParser.FUNCTION, 0); }
		public TerminalNode WHEN() { return getToken(PLpgSQLParser.WHEN, 0); }
		public List<Schema_qualified_nameContext> schema_qualified_name() {
			return getRuleContexts(Schema_qualified_nameContext.class);
		}
		public Schema_qualified_nameContext schema_qualified_name(int i) {
			return getRuleContext(Schema_qualified_nameContext.class,i);
		}
		public List<TerminalNode> IN() { return getTokens(PLpgSQLParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(PLpgSQLParser.IN, i);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PLpgSQLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PLpgSQLParser.LEFT_PAREN, i);
		}
		public List<Character_stringContext> character_string() {
			return getRuleContexts(Character_stringContext.class);
		}
		public Character_stringContext character_string(int i) {
			return getRuleContext(Character_stringContext.class,i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PLpgSQLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PLpgSQLParser.RIGHT_PAREN, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public List<TerminalNode> AND() { return getTokens(PLpgSQLParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(PLpgSQLParser.AND, i);
		}
		public Create_event_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_event_trigger; }
	}

	public final Create_event_triggerContext create_event_trigger() throws RecognitionException {
		Create_event_triggerContext _localctx = new Create_event_triggerContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_create_event_trigger);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2394);
			match(EVENT);
			setState(2395);
			match(TRIGGER);
			setState(2396);
			((Create_event_triggerContext)_localctx).name = identifier();
			setState(2397);
			match(ON);
			setState(2398);
			identifier();
			setState(2419);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(2399);
				match(WHEN);
				setState(2415); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2400);
						schema_qualified_name();
						setState(2401);
						match(IN);
						setState(2402);
						match(LEFT_PAREN);
						setState(2403);
						character_string();
						setState(2408);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(2404);
							match(COMMA);
							setState(2405);
							character_string();
							}
							}
							setState(2410);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(2411);
						match(RIGHT_PAREN);
						setState(2413);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==AND) {
							{
							setState(2412);
							match(AND);
							}
						}

						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2417); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,250,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
			}

			setState(2421);
			match(EXECUTE);
			setState(2422);
			_la = _input.LA(1);
			if ( !(_la==FUNCTION || _la==PROCEDURE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2423);
			vex(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_type_statementContext extends ParserRuleContext {
		public Schema_qualified_nameContext name;
		public Table_column_definitionContext table_column_definition;
		public List<Table_column_definitionContext> attrs = new ArrayList<Table_column_definitionContext>();
		public Character_stringContext character_string;
		public List<Character_stringContext> enums = new ArrayList<Character_stringContext>();
		public Data_typeContext subtype_name;
		public IdentifierContext subtype_operator_class;
		public Schema_qualified_nameContext collation;
		public Schema_qualified_nameContext canonical_function;
		public Schema_qualified_nameContext subtype_diff_function;
		public Signed_numerical_literalContext internallength;
		public Schema_qualified_nameContext input_function;
		public Schema_qualified_nameContext output_function;
		public Schema_qualified_nameContext receive_function;
		public Schema_qualified_nameContext send_function;
		public Schema_qualified_nameContext type_modifier_input_function;
		public Schema_qualified_nameContext type_modifier_output_function;
		public Schema_qualified_nameContext analyze_function;
		public Data_typeContext alignment;
		public Token storage;
		public Data_typeContext like_type;
		public Character_stringContext category;
		public Truth_valueContext preferred;
		public VexContext default_value;
		public Data_typeContext element;
		public Character_stringContext delimiter;
		public Truth_valueContext collatable;
		public TerminalNode TYPE() { return getToken(PLpgSQLParser.TYPE, 0); }
		public List<Schema_qualified_nameContext> schema_qualified_name() {
			return getRuleContexts(Schema_qualified_nameContext.class);
		}
		public Schema_qualified_nameContext schema_qualified_name(int i) {
			return getRuleContext(Schema_qualified_nameContext.class,i);
		}
		public TerminalNode AS() { return getToken(PLpgSQLParser.AS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public TerminalNode INPUT() { return getToken(PLpgSQLParser.INPUT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(PLpgSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(PLpgSQLParser.EQUAL, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public TerminalNode OUTPUT() { return getToken(PLpgSQLParser.OUTPUT, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public TerminalNode ENUM() { return getToken(PLpgSQLParser.ENUM, 0); }
		public TerminalNode RANGE() { return getToken(PLpgSQLParser.RANGE, 0); }
		public List<TerminalNode> INTERNALLENGTH() { return getTokens(PLpgSQLParser.INTERNALLENGTH); }
		public TerminalNode INTERNALLENGTH(int i) {
			return getToken(PLpgSQLParser.INTERNALLENGTH, i);
		}
		public List<TerminalNode> SUBTYPE() { return getTokens(PLpgSQLParser.SUBTYPE); }
		public TerminalNode SUBTYPE(int i) {
			return getToken(PLpgSQLParser.SUBTYPE, i);
		}
		public List<TerminalNode> SUBTYPE_OPCLASS() { return getTokens(PLpgSQLParser.SUBTYPE_OPCLASS); }
		public TerminalNode SUBTYPE_OPCLASS(int i) {
			return getToken(PLpgSQLParser.SUBTYPE_OPCLASS, i);
		}
		public List<TerminalNode> COLLATION() { return getTokens(PLpgSQLParser.COLLATION); }
		public TerminalNode COLLATION(int i) {
			return getToken(PLpgSQLParser.COLLATION, i);
		}
		public List<TerminalNode> CANONICAL() { return getTokens(PLpgSQLParser.CANONICAL); }
		public TerminalNode CANONICAL(int i) {
			return getToken(PLpgSQLParser.CANONICAL, i);
		}
		public List<TerminalNode> SUBTYPE_DIFF() { return getTokens(PLpgSQLParser.SUBTYPE_DIFF); }
		public TerminalNode SUBTYPE_DIFF(int i) {
			return getToken(PLpgSQLParser.SUBTYPE_DIFF, i);
		}
		public List<TerminalNode> VARIABLE() { return getTokens(PLpgSQLParser.VARIABLE); }
		public TerminalNode VARIABLE(int i) {
			return getToken(PLpgSQLParser.VARIABLE, i);
		}
		public List<TerminalNode> RECEIVE() { return getTokens(PLpgSQLParser.RECEIVE); }
		public TerminalNode RECEIVE(int i) {
			return getToken(PLpgSQLParser.RECEIVE, i);
		}
		public List<TerminalNode> SEND() { return getTokens(PLpgSQLParser.SEND); }
		public TerminalNode SEND(int i) {
			return getToken(PLpgSQLParser.SEND, i);
		}
		public List<TerminalNode> TYPMOD_IN() { return getTokens(PLpgSQLParser.TYPMOD_IN); }
		public TerminalNode TYPMOD_IN(int i) {
			return getToken(PLpgSQLParser.TYPMOD_IN, i);
		}
		public List<TerminalNode> TYPMOD_OUT() { return getTokens(PLpgSQLParser.TYPMOD_OUT); }
		public TerminalNode TYPMOD_OUT(int i) {
			return getToken(PLpgSQLParser.TYPMOD_OUT, i);
		}
		public List<TerminalNode> ANALYZE() { return getTokens(PLpgSQLParser.ANALYZE); }
		public TerminalNode ANALYZE(int i) {
			return getToken(PLpgSQLParser.ANALYZE, i);
		}
		public List<TerminalNode> PASSEDBYVALUE() { return getTokens(PLpgSQLParser.PASSEDBYVALUE); }
		public TerminalNode PASSEDBYVALUE(int i) {
			return getToken(PLpgSQLParser.PASSEDBYVALUE, i);
		}
		public List<TerminalNode> ALIGNMENT() { return getTokens(PLpgSQLParser.ALIGNMENT); }
		public TerminalNode ALIGNMENT(int i) {
			return getToken(PLpgSQLParser.ALIGNMENT, i);
		}
		public List<TerminalNode> STORAGE() { return getTokens(PLpgSQLParser.STORAGE); }
		public TerminalNode STORAGE(int i) {
			return getToken(PLpgSQLParser.STORAGE, i);
		}
		public List<TerminalNode> LIKE() { return getTokens(PLpgSQLParser.LIKE); }
		public TerminalNode LIKE(int i) {
			return getToken(PLpgSQLParser.LIKE, i);
		}
		public List<TerminalNode> CATEGORY() { return getTokens(PLpgSQLParser.CATEGORY); }
		public TerminalNode CATEGORY(int i) {
			return getToken(PLpgSQLParser.CATEGORY, i);
		}
		public List<TerminalNode> PREFERRED() { return getTokens(PLpgSQLParser.PREFERRED); }
		public TerminalNode PREFERRED(int i) {
			return getToken(PLpgSQLParser.PREFERRED, i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(PLpgSQLParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(PLpgSQLParser.DEFAULT, i);
		}
		public List<TerminalNode> ELEMENT() { return getTokens(PLpgSQLParser.ELEMENT); }
		public TerminalNode ELEMENT(int i) {
			return getToken(PLpgSQLParser.ELEMENT, i);
		}
		public List<TerminalNode> DELIMITER() { return getTokens(PLpgSQLParser.DELIMITER); }
		public TerminalNode DELIMITER(int i) {
			return getToken(PLpgSQLParser.DELIMITER, i);
		}
		public List<TerminalNode> COLLATABLE() { return getTokens(PLpgSQLParser.COLLATABLE); }
		public TerminalNode COLLATABLE(int i) {
			return getToken(PLpgSQLParser.COLLATABLE, i);
		}
		public List<Table_column_definitionContext> table_column_definition() {
			return getRuleContexts(Table_column_definitionContext.class);
		}
		public Table_column_definitionContext table_column_definition(int i) {
			return getRuleContext(Table_column_definitionContext.class,i);
		}
		public List<Character_stringContext> character_string() {
			return getRuleContexts(Character_stringContext.class);
		}
		public Character_stringContext character_string(int i) {
			return getRuleContext(Character_stringContext.class,i);
		}
		public List<Data_typeContext> data_type() {
			return getRuleContexts(Data_typeContext.class);
		}
		public Data_typeContext data_type(int i) {
			return getRuleContext(Data_typeContext.class,i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<Signed_numerical_literalContext> signed_numerical_literal() {
			return getRuleContexts(Signed_numerical_literalContext.class);
		}
		public Signed_numerical_literalContext signed_numerical_literal(int i) {
			return getRuleContext(Signed_numerical_literalContext.class,i);
		}
		public List<Truth_valueContext> truth_value() {
			return getRuleContexts(Truth_valueContext.class);
		}
		public Truth_valueContext truth_value(int i) {
			return getRuleContext(Truth_valueContext.class,i);
		}
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public List<TerminalNode> PLAIN() { return getTokens(PLpgSQLParser.PLAIN); }
		public TerminalNode PLAIN(int i) {
			return getToken(PLpgSQLParser.PLAIN, i);
		}
		public List<TerminalNode> EXTERNAL() { return getTokens(PLpgSQLParser.EXTERNAL); }
		public TerminalNode EXTERNAL(int i) {
			return getToken(PLpgSQLParser.EXTERNAL, i);
		}
		public List<TerminalNode> EXTENDED() { return getTokens(PLpgSQLParser.EXTENDED); }
		public TerminalNode EXTENDED(int i) {
			return getToken(PLpgSQLParser.EXTENDED, i);
		}
		public List<TerminalNode> MAIN() { return getTokens(PLpgSQLParser.MAIN); }
		public TerminalNode MAIN(int i) {
			return getToken(PLpgSQLParser.MAIN, i);
		}
		public Create_type_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_type_statement; }
	}

	public final Create_type_statementContext create_type_statement() throws RecognitionException {
		Create_type_statementContext _localctx = new Create_type_statementContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_create_type_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2425);
			match(TYPE);
			setState(2426);
			((Create_type_statementContext)_localctx).name = schema_qualified_name();
			setState(2574);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
				{
				setState(2427);
				match(AS);
				setState(2496);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LEFT_PAREN:
					{
					setState(2428);
					match(LEFT_PAREN);
					setState(2437);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATTACH) | (1L << ATTRIBUTE) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BY) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG) | (1L << CHAIN) | (1L << CHARACTERISTICS) | (1L << CHECKPOINT) | (1L << CLASS) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMENTS) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONFIGURATION) | (1L << CONFLICT) | (1L << CONNECTION) | (1L << CONSTRAINTS) | (1L << CONTENT) | (1L << CONTINUE) | (1L << CONVERSION) | (1L << COPY) | (1L << COST) | (1L << CSV) | (1L << CUBE) | (1L << CURRENT) | (1L << CURSOR) | (1L << CYCLE) | (1L << DATA) | (1L << DATABASE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DEFAULTS) | (1L << DEFERRED) | (1L << DEFINER) | (1L << DELETE) | (1L << DELIMITER) | (1L << DELIMITERS) | (1L << DEPENDS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DETACH - 64)) | (1L << (DICTIONARY - 64)) | (1L << (DISABLE - 64)) | (1L << (DISCARD - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOMAIN - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (EACH - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTED - 64)) | (1L << (ENUM - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVENT - 64)) | (1L << (EXCLUDE - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXCLUSIVE - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTENSION - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FAMILY - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORCE - 64)) | (1L << (FORWARD - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GENERATED - 64)) | (1L << (GLOBAL - 64)) | (1L << (GRANTED - 64)) | (1L << (GROUPS - 64)) | (1L << (HANDLER - 64)) | (1L << (HEADER - 64)) | (1L << (HOLD - 64)) | (1L << (HOUR - 64)) | (1L << (IDENTITY - 64)) | (1L << (IF - 64)) | (1L << (IMMEDIATE - 64)) | (1L << (IMMUTABLE - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPORT - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INCREMENT - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXES - 64)) | (1L << (INHERIT - 64)) | (1L << (INHERITS - 64)) | (1L << (INLINE - 64)) | (1L << (INPUT - 64)) | (1L << (INSENSITIVE - 64)) | (1L << (INSERT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INVOKER - 64)) | (1L << (ISOLATION - 64)) | (1L << (KEY - 64)) | (1L << (LABEL - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LARGE - 64)) | (1L << (LAST - 64)) | (1L << (LEAKPROOF - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LEVEL - 128)) | (1L << (LISTEN - 128)) | (1L << (LOAD - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCATION - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKED - 128)) | (1L << (LOGGED - 128)) | (1L << (MAPPING - 128)) | (1L << (MATCH - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MAXVALUE - 128)) | (1L << (METHOD - 128)) | (1L << (MINUTE - 128)) | (1L << (MINVALUE - 128)) | (1L << (MODE - 128)) | (1L << (MONTH - 128)) | (1L << (MOVE - 128)) | (1L << (NAME - 128)) | (1L << (NAMES - 128)) | (1L << (NEW - 128)) | (1L << (NEXT - 128)) | (1L << (NO - 128)) | (1L << (NOTHING - 128)) | (1L << (NOTIFY - 128)) | (1L << (NOWAIT - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFF - 128)) | (1L << (OIDS - 128)) | (1L << (OLD - 128)) | (1L << (OPERATOR - 128)) | (1L << (OPTION - 128)) | (1L << (OPTIONS - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OTHERS - 128)) | (1L << (OVER - 128)) | (1L << (OVERRIDING - 128)) | (1L << (OWNED - 128)) | (1L << (OWNER - 128)) | (1L << (PARALLEL - 128)) | (1L << (PARSER - 128)) | (1L << (PARTIAL - 128)) | (1L << (PARTITION - 128)) | (1L << (PASSING - 128)) | (1L << (PASSWORD - 128)) | (1L << (PLANS - 128)) | (1L << (POLICY - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PREPARED - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRIOR - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROCEDURAL - 128)) | (1L << (PROCEDURE - 128)) | (1L << (PROCEDURES - 128)) | (1L << (PROGRAM - 128)) | (1L << (PUBLICATION - 128)) | (1L << (QUOTE - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (REASSIGN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (RECHECK - 192)) | (1L << (RECURSIVE - 192)) | (1L << (REF - 192)) | (1L << (REFERENCING - 192)) | (1L << (REFRESH - 192)) | (1L << (REINDEX - 192)) | (1L << (RELATIVE - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (REPLICA - 192)) | (1L << (RESET - 192)) | (1L << (RESTART - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUTINE - 192)) | (1L << (ROUTINES - 192)) | (1L << (ROWS - 192)) | (1L << (RULE - 192)) | (1L << (SAVEPOINT - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SCROLL - 192)) | (1L << (SEARCH - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEQUENCE - 192)) | (1L << (SEQUENCES - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SERVER - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHARE - 192)) | (1L << (SHOW - 192)) | (1L << (SIMPLE - 192)) | (1L << (SKIP_ - 192)) | (1L << (SNAPSHOT - 192)) | (1L << (SQL - 192)) | (1L << (STABLE - 192)) | (1L << (STANDALONE - 192)) | (1L << (START - 192)) | (1L << (STATEMENT - 192)) | (1L << (STATISTICS - 192)) | (1L << (STDIN - 192)) | (1L << (STDOUT - 192)) | (1L << (STORAGE - 192)) | (1L << (STORED - 192)) | (1L << (STRICT - 192)) | (1L << (STRIP - 192)) | (1L << (SUBSCRIPTION - 192)) | (1L << (SUPPORT - 192)) | (1L << (SYSID - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESPACE - 192)) | (1L << (TEMP - 192)) | (1L << (TEMPLATE - 192)) | (1L << (TEMPORARY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TEXT - 256)) | (1L << (TIES - 256)) | (1L << (TRANSACTION - 256)) | (1L << (TRANSFORM - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TRUSTED - 256)) | (1L << (TYPE - 256)) | (1L << (TYPES - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNENCRYPTED - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNLISTEN - 256)) | (1L << (UNLOGGED - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (VACUUM - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALIDATOR - 256)) | (1L << (VALUE - 256)) | (1L << (VARYING - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (VIEWS - 256)) | (1L << (VOLATILE - 256)) | (1L << (WHITESPACE - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (XML - 256)) | (1L << (YEAR - 256)) | (1L << (YES - 256)) | (1L << (ZONE - 256)) | (1L << (BETWEEN - 256)) | (1L << (BIGINT - 256)) | (1L << (BIT - 256)) | (1L << (BOOLEAN - 256)) | (1L << (CHAR - 256)) | (1L << (CHARACTER - 256)) | (1L << (COALESCE - 256)) | (1L << (DEC - 256)) | (1L << (DECIMAL - 256)) | (1L << (EXISTS - 256)) | (1L << (EXTRACT - 256)) | (1L << (FLOAT - 256)) | (1L << (GREATEST - 256)) | (1L << (GROUPING - 256)) | (1L << (INOUT - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERVAL - 256)) | (1L << (LEAST - 256)) | (1L << (NATIONAL - 256)) | (1L << (NCHAR - 256)) | (1L << (NONE - 256)) | (1L << (NULLIF - 256)) | (1L << (NUMERIC - 256)) | (1L << (OUT - 256)) | (1L << (OVERLAY - 256)) | (1L << (POSITION - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRECISION - 320)) | (1L << (REAL - 320)) | (1L << (ROW - 320)) | (1L << (SETOF - 320)) | (1L << (SMALLINT - 320)) | (1L << (SUBSTRING - 320)) | (1L << (TIME - 320)) | (1L << (TIMESTAMP - 320)) | (1L << (TREAT - 320)) | (1L << (TRIM - 320)) | (1L << (VALUES - 320)) | (1L << (VARCHAR - 320)) | (1L << (XMLATTRIBUTES - 320)) | (1L << (XMLCONCAT - 320)) | (1L << (XMLELEMENT - 320)) | (1L << (XMLEXISTS - 320)) | (1L << (XMLFOREST - 320)) | (1L << (XMLNAMESPACES - 320)) | (1L << (XMLPARSE - 320)) | (1L << (XMLPI - 320)) | (1L << (XMLROOT - 320)) | (1L << (XMLSERIALIZE - 320)) | (1L << (XMLTABLE - 320)))) != 0) || ((((_la - 443)) & ~0x3f) == 0 && ((1L << (_la - 443)) & ((1L << (ALIGNMENT - 443)) | (1L << (BASETYPE - 443)) | (1L << (BUFFERS - 443)) | (1L << (BYPASSRLS - 443)) | (1L << (CANONICAL - 443)) | (1L << (CATEGORY - 443)) | (1L << (COLLATABLE - 443)) | (1L << (COMBINEFUNC - 443)) | (1L << (COMMUTATOR - 443)) | (1L << (CONNECT - 443)) | (1L << (COSTS - 443)) | (1L << (CREATEDB - 443)) | (1L << (CREATEROLE - 443)) | (1L << (DESERIALFUNC - 443)) | (1L << (DETERMINISTIC - 443)) | (1L << (DISABLE_PAGE_SKIPPING - 443)) | (1L << (ELEMENT - 443)) | (1L << (EXTENDED - 443)) | (1L << (FINALFUNC - 443)) | (1L << (FINALFUNC_EXTRA - 443)) | (1L << (FINALFUNC_MODIFY - 443)) | (1L << (FORCE_NOT_NULL - 443)) | (1L << (FORCE_NULL - 443)) | (1L << (FORCE_QUOTE - 443)) | (1L << (FORMAT - 443)) | (1L << (GETTOKEN - 443)) | (1L << (HASH - 443)) | (1L << (HASHES - 443)) | (1L << (HEADLINE - 443)) | (1L << (HYPOTHETICAL - 443)) | (1L << (INDEX_CLEANUP - 443)) | (1L << (INIT - 443)) | (1L << (INITCOND - 443)) | (1L << (INTERNALLENGTH - 443)) | (1L << (JSON - 443)) | (1L << (LC_COLLATE - 443)) | (1L << (LC_CTYPE - 443)) | (1L << (LEFTARG - 443)) | (1L << (LEXIZE - 443)) | (1L << (LEXTYPES - 443)) | (1L << (LIST - 443)) | (1L << (LOCALE - 443)) | (1L << (LOGIN - 443)) | (1L << (MAIN - 443)) | (1L << (MERGES - 443)) | (1L << (MFINALFUNC - 443)) | (1L << (MFINALFUNC_EXTRA - 443)) | (1L << (MFINALFUNC_MODIFY - 443)) | (1L << (MINITCOND - 443)) | (1L << (MINVFUNC - 443)) | (1L << (MODULUS - 443)) | (1L << (MSFUNC - 443)) | (1L << (MSSPACE - 443)) | (1L << (MSTYPE - 443)) | (1L << (NEGATOR - 443)) | (1L << (NOBYPASSRLS - 443)) | (1L << (NOCREATEDB - 443)) | (1L << (NOCREATEROLE - 443)) | (1L << (NOINHERIT - 443)) | (1L << (NOLOGIN - 443)) | (1L << (NOREPLICATION - 443)) | (1L << (NOSUPERUSER - 443)) | (1L << (OUTPUT - 443)) | (1L << (PASSEDBYVALUE - 443)))) != 0) || ((((_la - 507)) & ~0x3f) == 0 && ((1L << (_la - 507)) & ((1L << (PATH - 507)) | (1L << (PERMISSIVE - 507)) | (1L << (PLAIN - 507)) | (1L << (PREFERRED - 507)) | (1L << (PROVIDER - 507)) | (1L << (READ_ONLY - 507)) | (1L << (READ_WRITE - 507)) | (1L << (RECEIVE - 507)) | (1L << (REMAINDER - 507)) | (1L << (REPLICATION - 507)) | (1L << (RESTRICTED - 507)) | (1L << (RESTRICTIVE - 507)) | (1L << (RIGHTARG - 507)) | (1L << (SAFE - 507)) | (1L << (SEND - 507)) | (1L << (SERIALFUNC - 507)) | (1L << (SETTINGS - 507)) | (1L << (SFUNC - 507)) | (1L << (SHAREABLE - 507)) | (1L << (SKIP_LOCKED - 507)) | (1L << (SORTOP - 507)) | (1L << (SSPACE - 507)) | (1L << (STYPE - 507)) | (1L << (SUBTYPE_DIFF - 507)) | (1L << (SUBTYPE_OPCLASS - 507)) | (1L << (SUBTYPE - 507)) | (1L << (SUMMARY - 507)) | (1L << (SUPERUSER - 507)) | (1L << (TIMING - 507)) | (1L << (TYPMOD_IN - 507)) | (1L << (TYPMOD_OUT - 507)) | (1L << (UNSAFE - 507)) | (1L << (USAGE - 507)) | (1L << (VARIABLE - 507)) | (1L << (YAML - 507)) | (1L << (ALIAS - 507)) | (1L << (ASSERT - 507)) | (1L << (CONSTANT - 507)) | (1L << (DATATYPE - 507)) | (1L << (DEBUG - 507)) | (1L << (DETAIL - 507)) | (1L << (DIAGNOSTICS - 507)) | (1L << (ELSEIF - 507)) | (1L << (ELSIF - 507)) | (1L << (ERRCODE - 507)) | (1L << (EXIT - 507)) | (1L << (EXCEPTION - 507)) | (1L << (FOREACH - 507)) | (1L << (GET - 507)) | (1L << (HINT - 507)) | (1L << (INFO - 507)) | (1L << (LOG - 507)) | (1L << (LOOP - 507)) | (1L << (MESSAGE - 507)) | (1L << (NOTICE - 507)) | (1L << (OPEN - 507)) | (1L << (PERFORM - 507)) | (1L << (QUERY - 507)) | (1L << (RAISE - 507)) | (1L << (RECORD - 507)) | (1L << (RETURN - 507)) | (1L << (REVERSE - 507)) | (1L << (ROWTYPE - 507)) | (1L << (SLICE - 507)))) != 0) || ((((_la - 571)) & ~0x3f) == 0 && ((1L << (_la - 571)) & ((1L << (SQLSTATE - 571)) | (1L << (STACKED - 571)) | (1L << (WARNING - 571)) | (1L << (WHILE - 571)) | (1L << (Identifier - 571)) | (1L << (QuotedIdentifier - 571)))) != 0)) {
						{
						setState(2429);
						((Create_type_statementContext)_localctx).table_column_definition = table_column_definition();
						((Create_type_statementContext)_localctx).attrs.add(((Create_type_statementContext)_localctx).table_column_definition);
						setState(2434);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(2430);
							match(COMMA);
							setState(2431);
							((Create_type_statementContext)_localctx).table_column_definition = table_column_definition();
							((Create_type_statementContext)_localctx).attrs.add(((Create_type_statementContext)_localctx).table_column_definition);
							}
							}
							setState(2436);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
					}

					setState(2439);
					match(RIGHT_PAREN);
					}
					break;
				case ENUM:
					{
					setState(2440);
					match(ENUM);
					setState(2441);
					match(LEFT_PAREN);
					setState(2450);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==Character_String_Literal || _la==BeginDollarStringConstant) {
						{
						setState(2442);
						((Create_type_statementContext)_localctx).character_string = character_string();
						((Create_type_statementContext)_localctx).enums.add(((Create_type_statementContext)_localctx).character_string);
						setState(2447);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(2443);
							match(COMMA);
							setState(2444);
							((Create_type_statementContext)_localctx).character_string = character_string();
							((Create_type_statementContext)_localctx).enums.add(((Create_type_statementContext)_localctx).character_string);
							}
							}
							setState(2449);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
					}

					setState(2452);
					match(RIGHT_PAREN);
					}
					break;
				case RANGE:
					{
					setState(2453);
					match(RANGE);
					setState(2454);
					match(LEFT_PAREN);
					setState(2470);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case SUBTYPE:
						{
						setState(2455);
						match(SUBTYPE);
						setState(2456);
						match(EQUAL);
						setState(2457);
						((Create_type_statementContext)_localctx).subtype_name = data_type();
						}
						break;
					case SUBTYPE_OPCLASS:
						{
						setState(2458);
						match(SUBTYPE_OPCLASS);
						setState(2459);
						match(EQUAL);
						setState(2460);
						((Create_type_statementContext)_localctx).subtype_operator_class = identifier();
						}
						break;
					case COLLATION:
						{
						setState(2461);
						match(COLLATION);
						setState(2462);
						match(EQUAL);
						setState(2463);
						((Create_type_statementContext)_localctx).collation = schema_qualified_name();
						}
						break;
					case CANONICAL:
						{
						setState(2464);
						match(CANONICAL);
						setState(2465);
						match(EQUAL);
						setState(2466);
						((Create_type_statementContext)_localctx).canonical_function = schema_qualified_name();
						}
						break;
					case SUBTYPE_DIFF:
						{
						setState(2467);
						match(SUBTYPE_DIFF);
						setState(2468);
						match(EQUAL);
						setState(2469);
						((Create_type_statementContext)_localctx).subtype_diff_function = schema_qualified_name();
						}
						break;
					case COMMA:
					case RIGHT_PAREN:
						break;
					default:
						break;
					}
					setState(2492);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2472);
						match(COMMA);
						setState(2488);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case SUBTYPE:
							{
							setState(2473);
							match(SUBTYPE);
							setState(2474);
							match(EQUAL);
							setState(2475);
							((Create_type_statementContext)_localctx).subtype_name = data_type();
							}
							break;
						case SUBTYPE_OPCLASS:
							{
							setState(2476);
							match(SUBTYPE_OPCLASS);
							setState(2477);
							match(EQUAL);
							setState(2478);
							((Create_type_statementContext)_localctx).subtype_operator_class = identifier();
							}
							break;
						case COLLATION:
							{
							setState(2479);
							match(COLLATION);
							setState(2480);
							match(EQUAL);
							setState(2481);
							((Create_type_statementContext)_localctx).collation = schema_qualified_name();
							}
							break;
						case CANONICAL:
							{
							setState(2482);
							match(CANONICAL);
							setState(2483);
							match(EQUAL);
							setState(2484);
							((Create_type_statementContext)_localctx).canonical_function = schema_qualified_name();
							}
							break;
						case SUBTYPE_DIFF:
							{
							setState(2485);
							match(SUBTYPE_DIFF);
							setState(2486);
							match(EQUAL);
							setState(2487);
							((Create_type_statementContext)_localctx).subtype_diff_function = schema_qualified_name();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						}
						setState(2494);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2495);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case LEFT_PAREN:
				{
				setState(2498);
				match(LEFT_PAREN);
				setState(2506);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTERNALLENGTH) {
					{
					setState(2499);
					match(INTERNALLENGTH);
					setState(2500);
					match(EQUAL);
					setState(2503);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case PLUS:
					case MINUS:
					case NUMBER_LITERAL:
					case REAL_NUMBER:
						{
						setState(2501);
						((Create_type_statementContext)_localctx).internallength = signed_numerical_literal();
						}
						break;
					case VARIABLE:
						{
						setState(2502);
						match(VARIABLE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2505);
					match(COMMA);
					}
				}

				setState(2508);
				match(INPUT);
				setState(2509);
				match(EQUAL);
				setState(2510);
				((Create_type_statementContext)_localctx).input_function = schema_qualified_name();
				setState(2511);
				match(COMMA);
				setState(2512);
				match(OUTPUT);
				setState(2513);
				match(EQUAL);
				setState(2514);
				((Create_type_statementContext)_localctx).output_function = schema_qualified_name();
				setState(2569);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2515);
					match(COMMA);
					setState(2565);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case RECEIVE:
						{
						setState(2516);
						match(RECEIVE);
						setState(2517);
						match(EQUAL);
						setState(2518);
						((Create_type_statementContext)_localctx).receive_function = schema_qualified_name();
						}
						break;
					case SEND:
						{
						setState(2519);
						match(SEND);
						setState(2520);
						match(EQUAL);
						setState(2521);
						((Create_type_statementContext)_localctx).send_function = schema_qualified_name();
						}
						break;
					case TYPMOD_IN:
						{
						setState(2522);
						match(TYPMOD_IN);
						setState(2523);
						match(EQUAL);
						setState(2524);
						((Create_type_statementContext)_localctx).type_modifier_input_function = schema_qualified_name();
						}
						break;
					case TYPMOD_OUT:
						{
						setState(2525);
						match(TYPMOD_OUT);
						setState(2526);
						match(EQUAL);
						setState(2527);
						((Create_type_statementContext)_localctx).type_modifier_output_function = schema_qualified_name();
						}
						break;
					case ANALYZE:
						{
						setState(2528);
						match(ANALYZE);
						setState(2529);
						match(EQUAL);
						setState(2530);
						((Create_type_statementContext)_localctx).analyze_function = schema_qualified_name();
						}
						break;
					case INTERNALLENGTH:
						{
						setState(2531);
						match(INTERNALLENGTH);
						setState(2532);
						match(EQUAL);
						setState(2535);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case PLUS:
						case MINUS:
						case NUMBER_LITERAL:
						case REAL_NUMBER:
							{
							setState(2533);
							((Create_type_statementContext)_localctx).internallength = signed_numerical_literal();
							}
							break;
						case VARIABLE:
							{
							setState(2534);
							match(VARIABLE);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case PASSEDBYVALUE:
						{
						setState(2537);
						match(PASSEDBYVALUE);
						}
						break;
					case ALIGNMENT:
						{
						setState(2538);
						match(ALIGNMENT);
						setState(2539);
						match(EQUAL);
						setState(2540);
						((Create_type_statementContext)_localctx).alignment = data_type();
						}
						break;
					case STORAGE:
						{
						setState(2541);
						match(STORAGE);
						setState(2542);
						match(EQUAL);
						setState(2543);
						((Create_type_statementContext)_localctx).storage = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==EXTERNAL || ((((_la - 460)) & ~0x3f) == 0 && ((1L << (_la - 460)) & ((1L << (EXTENDED - 460)) | (1L << (MAIN - 460)) | (1L << (PLAIN - 460)))) != 0)) ) {
							((Create_type_statementContext)_localctx).storage = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case LIKE:
						{
						setState(2544);
						match(LIKE);
						setState(2545);
						match(EQUAL);
						setState(2546);
						((Create_type_statementContext)_localctx).like_type = data_type();
						}
						break;
					case CATEGORY:
						{
						setState(2547);
						match(CATEGORY);
						setState(2548);
						match(EQUAL);
						setState(2549);
						((Create_type_statementContext)_localctx).category = character_string();
						}
						break;
					case PREFERRED:
						{
						setState(2550);
						match(PREFERRED);
						setState(2551);
						match(EQUAL);
						setState(2552);
						((Create_type_statementContext)_localctx).preferred = truth_value();
						}
						break;
					case DEFAULT:
						{
						setState(2553);
						match(DEFAULT);
						setState(2554);
						match(EQUAL);
						setState(2555);
						((Create_type_statementContext)_localctx).default_value = vex(0);
						}
						break;
					case ELEMENT:
						{
						setState(2556);
						match(ELEMENT);
						setState(2557);
						match(EQUAL);
						setState(2558);
						((Create_type_statementContext)_localctx).element = data_type();
						}
						break;
					case DELIMITER:
						{
						setState(2559);
						match(DELIMITER);
						setState(2560);
						match(EQUAL);
						setState(2561);
						((Create_type_statementContext)_localctx).delimiter = character_string();
						}
						break;
					case COLLATABLE:
						{
						setState(2562);
						match(COLLATABLE);
						setState(2563);
						match(EQUAL);
						setState(2564);
						((Create_type_statementContext)_localctx).collatable = truth_value();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					setState(2571);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2572);
				match(RIGHT_PAREN);
				}
				break;
			case EOF:
			case SEMI_COLON:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_domain_statementContext extends ParserRuleContext {
		public Schema_qualified_nameContext name;
		public Data_typeContext dat_type;
		public VexContext def_value;
		public Domain_constraintContext domain_constraint;
		public List<Domain_constraintContext> dom_constraint = new ArrayList<Domain_constraintContext>();
		public TerminalNode DOMAIN() { return getToken(PLpgSQLParser.DOMAIN, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode AS() { return getToken(PLpgSQLParser.AS, 0); }
		public List<Collate_identifierContext> collate_identifier() {
			return getRuleContexts(Collate_identifierContext.class);
		}
		public Collate_identifierContext collate_identifier(int i) {
			return getRuleContext(Collate_identifierContext.class,i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(PLpgSQLParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(PLpgSQLParser.DEFAULT, i);
		}
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public List<Domain_constraintContext> domain_constraint() {
			return getRuleContexts(Domain_constraintContext.class);
		}
		public Domain_constraintContext domain_constraint(int i) {
			return getRuleContext(Domain_constraintContext.class,i);
		}
		public Create_domain_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_domain_statement; }
	}

	public final Create_domain_statementContext create_domain_statement() throws RecognitionException {
		Create_domain_statementContext _localctx = new Create_domain_statementContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_create_domain_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2576);
			match(DOMAIN);
			setState(2577);
			((Create_domain_statementContext)_localctx).name = schema_qualified_name();
			setState(2579);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(2578);
				match(AS);
				}
			}

			setState(2581);
			((Create_domain_statementContext)_localctx).dat_type = data_type();
			setState(2588);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 378)) & ~0x3f) == 0 && ((1L << (_la - 378)) & ((1L << (CHECK - 378)) | (1L << (COLLATE - 378)) | (1L << (CONSTRAINT - 378)) | (1L << (DEFAULT - 378)) | (1L << (NOT - 378)) | (1L << (NULL - 378)))) != 0)) {
				{
				setState(2586);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case COLLATE:
					{
					setState(2582);
					collate_identifier();
					}
					break;
				case DEFAULT:
					{
					setState(2583);
					match(DEFAULT);
					setState(2584);
					((Create_domain_statementContext)_localctx).def_value = vex(0);
					}
					break;
				case CHECK:
				case CONSTRAINT:
				case NOT:
				case NULL:
					{
					setState(2585);
					((Create_domain_statementContext)_localctx).domain_constraint = domain_constraint();
					((Create_domain_statementContext)_localctx).dom_constraint.add(((Create_domain_statementContext)_localctx).domain_constraint);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2590);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_server_statementContext extends ParserRuleContext {
		public TerminalNode SERVER() { return getToken(PLpgSQLParser.SERVER, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode FOREIGN() { return getToken(PLpgSQLParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(PLpgSQLParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(PLpgSQLParser.WRAPPER, 0); }
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(PLpgSQLParser.TYPE, 0); }
		public List<Character_stringContext> character_string() {
			return getRuleContexts(Character_stringContext.class);
		}
		public Character_stringContext character_string(int i) {
			return getRuleContext(Character_stringContext.class,i);
		}
		public TerminalNode VERSION() { return getToken(PLpgSQLParser.VERSION, 0); }
		public Define_foreign_optionsContext define_foreign_options() {
			return getRuleContext(Define_foreign_optionsContext.class,0);
		}
		public Create_server_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_server_statement; }
	}

	public final Create_server_statementContext create_server_statement() throws RecognitionException {
		Create_server_statementContext _localctx = new Create_server_statementContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_create_server_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2591);
			match(SERVER);
			setState(2593);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,269,_ctx) ) {
			case 1:
				{
				setState(2592);
				if_not_exists();
				}
				break;
			}
			setState(2595);
			identifier();
			setState(2598);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TYPE) {
				{
				setState(2596);
				match(TYPE);
				setState(2597);
				character_string();
				}
			}

			setState(2602);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VERSION) {
				{
				setState(2600);
				match(VERSION);
				setState(2601);
				character_string();
				}
			}

			setState(2604);
			match(FOREIGN);
			setState(2605);
			match(DATA);
			setState(2606);
			match(WRAPPER);
			setState(2607);
			identifier();
			setState(2609);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTIONS) {
				{
				setState(2608);
				define_foreign_options();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_fts_dictionaryContext extends ParserRuleContext {
		public Schema_qualified_nameContext name;
		public Schema_qualified_nameContext template;
		public TerminalNode TEXT() { return getToken(PLpgSQLParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(PLpgSQLParser.SEARCH, 0); }
		public TerminalNode DICTIONARY() { return getToken(PLpgSQLParser.DICTIONARY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public TerminalNode TEMPLATE() { return getToken(PLpgSQLParser.TEMPLATE, 0); }
		public TerminalNode EQUAL() { return getToken(PLpgSQLParser.EQUAL, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public List<Schema_qualified_nameContext> schema_qualified_name() {
			return getRuleContexts(Schema_qualified_nameContext.class);
		}
		public Schema_qualified_nameContext schema_qualified_name(int i) {
			return getRuleContext(Schema_qualified_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public List<Option_with_valueContext> option_with_value() {
			return getRuleContexts(Option_with_valueContext.class);
		}
		public Option_with_valueContext option_with_value(int i) {
			return getRuleContext(Option_with_valueContext.class,i);
		}
		public Create_fts_dictionaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_fts_dictionary; }
	}

	public final Create_fts_dictionaryContext create_fts_dictionary() throws RecognitionException {
		Create_fts_dictionaryContext _localctx = new Create_fts_dictionaryContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_create_fts_dictionary);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2611);
			match(TEXT);
			setState(2612);
			match(SEARCH);
			setState(2613);
			match(DICTIONARY);
			setState(2614);
			((Create_fts_dictionaryContext)_localctx).name = schema_qualified_name();
			setState(2615);
			match(LEFT_PAREN);
			setState(2616);
			match(TEMPLATE);
			setState(2617);
			match(EQUAL);
			setState(2618);
			((Create_fts_dictionaryContext)_localctx).template = schema_qualified_name();
			setState(2623);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2619);
				match(COMMA);
				setState(2620);
				option_with_value();
				}
				}
				setState(2625);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2626);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Option_with_valueContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(PLpgSQLParser.EQUAL, 0); }
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public Option_with_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_option_with_value; }
	}

	public final Option_with_valueContext option_with_value() throws RecognitionException {
		Option_with_valueContext _localctx = new Option_with_valueContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_option_with_value);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2628);
			identifier();
			setState(2629);
			match(EQUAL);
			setState(2630);
			vex(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_fts_configurationContext extends ParserRuleContext {
		public Schema_qualified_nameContext name;
		public Schema_qualified_nameContext parser_name;
		public Schema_qualified_nameContext config_name;
		public TerminalNode TEXT() { return getToken(PLpgSQLParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(PLpgSQLParser.SEARCH, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PLpgSQLParser.CONFIGURATION, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public List<Schema_qualified_nameContext> schema_qualified_name() {
			return getRuleContexts(Schema_qualified_nameContext.class);
		}
		public Schema_qualified_nameContext schema_qualified_name(int i) {
			return getRuleContext(Schema_qualified_nameContext.class,i);
		}
		public TerminalNode PARSER() { return getToken(PLpgSQLParser.PARSER, 0); }
		public TerminalNode EQUAL() { return getToken(PLpgSQLParser.EQUAL, 0); }
		public TerminalNode COPY() { return getToken(PLpgSQLParser.COPY, 0); }
		public Create_fts_configurationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_fts_configuration; }
	}

	public final Create_fts_configurationContext create_fts_configuration() throws RecognitionException {
		Create_fts_configurationContext _localctx = new Create_fts_configurationContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_create_fts_configuration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2632);
			match(TEXT);
			setState(2633);
			match(SEARCH);
			setState(2634);
			match(CONFIGURATION);
			setState(2635);
			((Create_fts_configurationContext)_localctx).name = schema_qualified_name();
			setState(2636);
			match(LEFT_PAREN);
			setState(2643);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PARSER:
				{
				setState(2637);
				match(PARSER);
				setState(2638);
				match(EQUAL);
				setState(2639);
				((Create_fts_configurationContext)_localctx).parser_name = schema_qualified_name();
				}
				break;
			case COPY:
				{
				setState(2640);
				match(COPY);
				setState(2641);
				match(EQUAL);
				setState(2642);
				((Create_fts_configurationContext)_localctx).config_name = schema_qualified_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2645);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_fts_templateContext extends ParserRuleContext {
		public Schema_qualified_nameContext name;
		public Schema_qualified_nameContext init_name;
		public Schema_qualified_nameContext lexize_name;
		public TerminalNode TEXT() { return getToken(PLpgSQLParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(PLpgSQLParser.SEARCH, 0); }
		public TerminalNode TEMPLATE() { return getToken(PLpgSQLParser.TEMPLATE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public TerminalNode LEXIZE() { return getToken(PLpgSQLParser.LEXIZE, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(PLpgSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(PLpgSQLParser.EQUAL, i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public List<Schema_qualified_nameContext> schema_qualified_name() {
			return getRuleContexts(Schema_qualified_nameContext.class);
		}
		public Schema_qualified_nameContext schema_qualified_name(int i) {
			return getRuleContext(Schema_qualified_nameContext.class,i);
		}
		public List<TerminalNode> INIT() { return getTokens(PLpgSQLParser.INIT); }
		public TerminalNode INIT(int i) {
			return getToken(PLpgSQLParser.INIT, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Create_fts_templateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_fts_template; }
	}

	public final Create_fts_templateContext create_fts_template() throws RecognitionException {
		Create_fts_templateContext _localctx = new Create_fts_templateContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_create_fts_template);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2647);
			match(TEXT);
			setState(2648);
			match(SEARCH);
			setState(2649);
			match(TEMPLATE);
			setState(2650);
			((Create_fts_templateContext)_localctx).name = schema_qualified_name();
			setState(2651);
			match(LEFT_PAREN);
			setState(2657);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INIT) {
				{
				setState(2652);
				match(INIT);
				setState(2653);
				match(EQUAL);
				setState(2654);
				((Create_fts_templateContext)_localctx).init_name = schema_qualified_name();
				setState(2655);
				match(COMMA);
				}
			}

			setState(2659);
			match(LEXIZE);
			setState(2660);
			match(EQUAL);
			setState(2661);
			((Create_fts_templateContext)_localctx).lexize_name = schema_qualified_name();
			setState(2666);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(2662);
				match(COMMA);
				setState(2663);
				match(INIT);
				setState(2664);
				match(EQUAL);
				setState(2665);
				((Create_fts_templateContext)_localctx).init_name = schema_qualified_name();
				}
			}

			setState(2668);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_fts_parserContext extends ParserRuleContext {
		public Schema_qualified_nameContext name;
		public Schema_qualified_nameContext start_func;
		public Schema_qualified_nameContext gettoken_func;
		public Schema_qualified_nameContext end_func;
		public Schema_qualified_nameContext headline_func;
		public Schema_qualified_nameContext lextypes_func;
		public TerminalNode TEXT() { return getToken(PLpgSQLParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(PLpgSQLParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(PLpgSQLParser.PARSER, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public TerminalNode START() { return getToken(PLpgSQLParser.START, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(PLpgSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(PLpgSQLParser.EQUAL, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public TerminalNode GETTOKEN() { return getToken(PLpgSQLParser.GETTOKEN, 0); }
		public TerminalNode END() { return getToken(PLpgSQLParser.END, 0); }
		public TerminalNode LEXTYPES() { return getToken(PLpgSQLParser.LEXTYPES, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public List<Schema_qualified_nameContext> schema_qualified_name() {
			return getRuleContexts(Schema_qualified_nameContext.class);
		}
		public Schema_qualified_nameContext schema_qualified_name(int i) {
			return getRuleContext(Schema_qualified_nameContext.class,i);
		}
		public List<TerminalNode> HEADLINE() { return getTokens(PLpgSQLParser.HEADLINE); }
		public TerminalNode HEADLINE(int i) {
			return getToken(PLpgSQLParser.HEADLINE, i);
		}
		public Create_fts_parserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_fts_parser; }
	}

	public final Create_fts_parserContext create_fts_parser() throws RecognitionException {
		Create_fts_parserContext _localctx = new Create_fts_parserContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_create_fts_parser);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2670);
			match(TEXT);
			setState(2671);
			match(SEARCH);
			setState(2672);
			match(PARSER);
			setState(2673);
			((Create_fts_parserContext)_localctx).name = schema_qualified_name();
			setState(2674);
			match(LEFT_PAREN);
			setState(2675);
			match(START);
			setState(2676);
			match(EQUAL);
			setState(2677);
			((Create_fts_parserContext)_localctx).start_func = schema_qualified_name();
			setState(2678);
			match(COMMA);
			setState(2679);
			match(GETTOKEN);
			setState(2680);
			match(EQUAL);
			setState(2681);
			((Create_fts_parserContext)_localctx).gettoken_func = schema_qualified_name();
			setState(2682);
			match(COMMA);
			setState(2683);
			match(END);
			setState(2684);
			match(EQUAL);
			setState(2685);
			((Create_fts_parserContext)_localctx).end_func = schema_qualified_name();
			setState(2686);
			match(COMMA);
			setState(2692);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HEADLINE) {
				{
				setState(2687);
				match(HEADLINE);
				setState(2688);
				match(EQUAL);
				setState(2689);
				((Create_fts_parserContext)_localctx).headline_func = schema_qualified_name();
				setState(2690);
				match(COMMA);
				}
			}

			setState(2694);
			match(LEXTYPES);
			setState(2695);
			match(EQUAL);
			setState(2696);
			((Create_fts_parserContext)_localctx).lextypes_func = schema_qualified_name();
			setState(2701);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(2697);
				match(COMMA);
				setState(2698);
				match(HEADLINE);
				setState(2699);
				match(EQUAL);
				setState(2700);
				((Create_fts_parserContext)_localctx).headline_func = schema_qualified_name();
				}
			}

			setState(2703);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_collationContext extends ParserRuleContext {
		public Schema_qualified_nameContext name;
		public TerminalNode COLLATION() { return getToken(PLpgSQLParser.COLLATION, 0); }
		public List<Schema_qualified_nameContext> schema_qualified_name() {
			return getRuleContexts(Schema_qualified_nameContext.class);
		}
		public Schema_qualified_nameContext schema_qualified_name(int i) {
			return getRuleContext(Schema_qualified_nameContext.class,i);
		}
		public TerminalNode FROM() { return getToken(PLpgSQLParser.FROM, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public List<Collation_optionContext> collation_option() {
			return getRuleContexts(Collation_optionContext.class);
		}
		public Collation_optionContext collation_option(int i) {
			return getRuleContext(Collation_optionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Create_collationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_collation; }
	}

	public final Create_collationContext create_collation() throws RecognitionException {
		Create_collationContext _localctx = new Create_collationContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_create_collation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2705);
			match(COLLATION);
			setState(2707);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,279,_ctx) ) {
			case 1:
				{
				setState(2706);
				if_not_exists();
				}
				break;
			}
			setState(2709);
			((Create_collationContext)_localctx).name = schema_qualified_name();
			setState(2724);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FROM:
				{
				setState(2710);
				match(FROM);
				setState(2711);
				schema_qualified_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(2712);
				match(LEFT_PAREN);
				setState(2721);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VERSION || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (DETERMINISTIC - 457)) | (1L << (LC_COLLATE - 457)) | (1L << (LC_CTYPE - 457)) | (1L << (LOCALE - 457)) | (1L << (PROVIDER - 457)))) != 0)) {
					{
					setState(2713);
					collation_option();
					setState(2718);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2714);
						match(COMMA);
						setState(2715);
						collation_option();
						}
						}
						setState(2720);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(2723);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_collationContext extends ParserRuleContext {
		public Schema_qualified_nameContext name;
		public TerminalNode COLLATION() { return getToken(PLpgSQLParser.COLLATION, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public TerminalNode REFRESH() { return getToken(PLpgSQLParser.REFRESH, 0); }
		public TerminalNode VERSION() { return getToken(PLpgSQLParser.VERSION, 0); }
		public Rename_toContext rename_to() {
			return getRuleContext(Rename_toContext.class,0);
		}
		public Owner_toContext owner_to() {
			return getRuleContext(Owner_toContext.class,0);
		}
		public Set_schemaContext set_schema() {
			return getRuleContext(Set_schemaContext.class,0);
		}
		public Alter_collationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_collation; }
	}

	public final Alter_collationContext alter_collation() throws RecognitionException {
		Alter_collationContext _localctx = new Alter_collationContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_alter_collation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2726);
			match(COLLATION);
			setState(2727);
			((Alter_collationContext)_localctx).name = schema_qualified_name();
			setState(2733);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REFRESH:
				{
				setState(2728);
				match(REFRESH);
				setState(2729);
				match(VERSION);
				}
				break;
			case RENAME:
				{
				setState(2730);
				rename_to();
				}
				break;
			case OWNER:
				{
				setState(2731);
				owner_to();
				}
				break;
			case SET:
				{
				setState(2732);
				set_schema();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collation_optionContext extends ParserRuleContext {
		public TerminalNode EQUAL() { return getToken(PLpgSQLParser.EQUAL, 0); }
		public TerminalNode LOCALE() { return getToken(PLpgSQLParser.LOCALE, 0); }
		public TerminalNode LC_COLLATE() { return getToken(PLpgSQLParser.LC_COLLATE, 0); }
		public TerminalNode LC_CTYPE() { return getToken(PLpgSQLParser.LC_CTYPE, 0); }
		public TerminalNode PROVIDER() { return getToken(PLpgSQLParser.PROVIDER, 0); }
		public TerminalNode VERSION() { return getToken(PLpgSQLParser.VERSION, 0); }
		public Character_stringContext character_string() {
			return getRuleContext(Character_stringContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode DETERMINISTIC() { return getToken(PLpgSQLParser.DETERMINISTIC, 0); }
		public Boolean_valueContext boolean_value() {
			return getRuleContext(Boolean_valueContext.class,0);
		}
		public Collation_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collation_option; }
	}

	public final Collation_optionContext collation_option() throws RecognitionException {
		Collation_optionContext _localctx = new Collation_optionContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_collation_option);
		int _la;
		try {
			setState(2744);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VERSION:
			case LC_COLLATE:
			case LC_CTYPE:
			case LOCALE:
			case PROVIDER:
				enterOuterAlt(_localctx, 1);
				{
				setState(2735);
				_la = _input.LA(1);
				if ( !(_la==VERSION || ((((_la - 478)) & ~0x3f) == 0 && ((1L << (_la - 478)) & ((1L << (LC_COLLATE - 478)) | (1L << (LC_CTYPE - 478)) | (1L << (LOCALE - 478)) | (1L << (PROVIDER - 478)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2736);
				match(EQUAL);
				setState(2739);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case Character_String_Literal:
				case BeginDollarStringConstant:
					{
					setState(2737);
					character_string();
					}
					break;
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BY:
				case CACHE:
				case CALL:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COLUMNS:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONFLICT:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CUBE:
				case CURRENT:
				case CURSOR:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DEPENDS:
				case DETACH:
				case DICTIONARY:
				case DISABLE:
				case DISCARD:
				case DOCUMENT:
				case DOMAIN:
				case DOUBLE:
				case DROP:
				case EACH:
				case ENABLE:
				case ENCODING:
				case ENCRYPTED:
				case ENUM:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GENERATED:
				case GLOBAL:
				case GRANTED:
				case GROUPS:
				case HANDLER:
				case HEADER:
				case HOLD:
				case HOUR:
				case IDENTITY:
				case IF:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT:
				case IMPORT:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCKED:
				case LOGGED:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case METHOD:
				case MINUTE:
				case MINVALUE:
				case MODE:
				case MONTH:
				case MOVE:
				case NAME:
				case NAMES:
				case NEW:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS:
				case OBJECT:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDINALITY:
				case OTHERS:
				case OVER:
				case OVERRIDING:
				case OWNED:
				case OWNER:
				case PARALLEL:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case POLICY:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROCEDURES:
				case PROGRAM:
				case PUBLICATION:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINES:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMAS:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SKIP_:
				case SNAPSHOT:
				case SQL:
				case STABLE:
				case STANDALONE:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STORED:
				case STRICT:
				case STRIP:
				case SUBSCRIPTION:
				case SUPPORT:
				case SYSID:
				case SYSTEM:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT:
				case TIES:
				case TRANSACTION:
				case TRANSFORM:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case TYPES:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VALUE:
				case VARYING:
				case VERSION:
				case VIEW:
				case VIEWS:
				case VOLATILE:
				case WHITESPACE:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML:
				case YEAR:
				case YES:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN:
				case CHAR:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL:
				case EXISTS:
				case EXTRACT:
				case FLOAT:
				case GREATEST:
				case GROUPING:
				case INOUT:
				case INT:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OUT:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case ALIGNMENT:
				case BASETYPE:
				case BUFFERS:
				case BYPASSRLS:
				case CANONICAL:
				case CATEGORY:
				case COLLATABLE:
				case COMBINEFUNC:
				case COMMUTATOR:
				case CONNECT:
				case COSTS:
				case CREATEDB:
				case CREATEROLE:
				case DESERIALFUNC:
				case DETERMINISTIC:
				case DISABLE_PAGE_SKIPPING:
				case ELEMENT:
				case EXTENDED:
				case FINALFUNC:
				case FINALFUNC_EXTRA:
				case FINALFUNC_MODIFY:
				case FORCE_NOT_NULL:
				case FORCE_NULL:
				case FORCE_QUOTE:
				case FORMAT:
				case GETTOKEN:
				case HASH:
				case HASHES:
				case HEADLINE:
				case HYPOTHETICAL:
				case INDEX_CLEANUP:
				case INIT:
				case INITCOND:
				case INTERNALLENGTH:
				case JSON:
				case LC_COLLATE:
				case LC_CTYPE:
				case LEFTARG:
				case LEXIZE:
				case LEXTYPES:
				case LIST:
				case LOCALE:
				case LOGIN:
				case MAIN:
				case MERGES:
				case MFINALFUNC:
				case MFINALFUNC_EXTRA:
				case MFINALFUNC_MODIFY:
				case MINITCOND:
				case MINVFUNC:
				case MODULUS:
				case MSFUNC:
				case MSSPACE:
				case MSTYPE:
				case NEGATOR:
				case NOBYPASSRLS:
				case NOCREATEDB:
				case NOCREATEROLE:
				case NOINHERIT:
				case NOLOGIN:
				case NOREPLICATION:
				case NOSUPERUSER:
				case OUTPUT:
				case PASSEDBYVALUE:
				case PATH:
				case PERMISSIVE:
				case PLAIN:
				case PREFERRED:
				case PROVIDER:
				case READ_ONLY:
				case READ_WRITE:
				case RECEIVE:
				case REMAINDER:
				case REPLICATION:
				case RESTRICTED:
				case RESTRICTIVE:
				case RIGHTARG:
				case SAFE:
				case SEND:
				case SERIALFUNC:
				case SETTINGS:
				case SFUNC:
				case SHAREABLE:
				case SKIP_LOCKED:
				case SORTOP:
				case SSPACE:
				case STYPE:
				case SUBTYPE_DIFF:
				case SUBTYPE_OPCLASS:
				case SUBTYPE:
				case SUMMARY:
				case SUPERUSER:
				case TIMING:
				case TYPMOD_IN:
				case TYPMOD_OUT:
				case UNSAFE:
				case USAGE:
				case VARIABLE:
				case YAML:
				case ALIAS:
				case ASSERT:
				case CONSTANT:
				case DATATYPE:
				case DEBUG:
				case DETAIL:
				case DIAGNOSTICS:
				case ELSEIF:
				case ELSIF:
				case ERRCODE:
				case EXIT:
				case EXCEPTION:
				case FOREACH:
				case GET:
				case HINT:
				case INFO:
				case LOG:
				case LOOP:
				case MESSAGE:
				case NOTICE:
				case OPEN:
				case PERFORM:
				case QUERY:
				case RAISE:
				case RECORD:
				case RETURN:
				case REVERSE:
				case ROWTYPE:
				case SLICE:
				case SQLSTATE:
				case STACKED:
				case WARNING:
				case WHILE:
				case Identifier:
				case QuotedIdentifier:
					{
					setState(2738);
					identifier();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DETERMINISTIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(2741);
				match(DETERMINISTIC);
				setState(2742);
				match(EQUAL);
				setState(2743);
				boolean_value();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_user_mappingContext extends ParserRuleContext {
		public List<TerminalNode> USER() { return getTokens(PLpgSQLParser.USER); }
		public TerminalNode USER(int i) {
			return getToken(PLpgSQLParser.USER, i);
		}
		public TerminalNode MAPPING() { return getToken(PLpgSQLParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(PLpgSQLParser.FOR, 0); }
		public TerminalNode SERVER() { return getToken(PLpgSQLParser.SERVER, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public User_nameContext user_name() {
			return getRuleContext(User_nameContext.class,0);
		}
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public Define_foreign_optionsContext define_foreign_options() {
			return getRuleContext(Define_foreign_optionsContext.class,0);
		}
		public Create_user_mappingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_user_mapping; }
	}

	public final Create_user_mappingContext create_user_mapping() throws RecognitionException {
		Create_user_mappingContext _localctx = new Create_user_mappingContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_create_user_mapping);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2746);
			match(USER);
			setState(2747);
			match(MAPPING);
			setState(2749);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2748);
				if_not_exists();
				}
			}

			setState(2751);
			match(FOR);
			setState(2754);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BY:
			case CACHE:
			case CALL:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COLUMNS:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONFLICT:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CUBE:
			case CURRENT:
			case CURSOR:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DEPENDS:
			case DETACH:
			case DICTIONARY:
			case DISABLE:
			case DISCARD:
			case DOCUMENT:
			case DOMAIN:
			case DOUBLE:
			case DROP:
			case EACH:
			case ENABLE:
			case ENCODING:
			case ENCRYPTED:
			case ENUM:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GENERATED:
			case GLOBAL:
			case GRANTED:
			case GROUPS:
			case HANDLER:
			case HEADER:
			case HOLD:
			case HOUR:
			case IDENTITY:
			case IF:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT:
			case IMPORT:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCKED:
			case LOGGED:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case METHOD:
			case MINUTE:
			case MINVALUE:
			case MODE:
			case MONTH:
			case MOVE:
			case NAME:
			case NAMES:
			case NEW:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS:
			case OBJECT:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OVER:
			case OVERRIDING:
			case OWNED:
			case OWNER:
			case PARALLEL:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POLICY:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROCEDURES:
			case PROGRAM:
			case PUBLICATION:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINES:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMAS:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SKIP_:
			case SNAPSHOT:
			case SQL:
			case STABLE:
			case STANDALONE:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STORED:
			case STRICT:
			case STRIP:
			case SUBSCRIPTION:
			case SUPPORT:
			case SYSID:
			case SYSTEM:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT:
			case TIES:
			case TRANSACTION:
			case TRANSFORM:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE:
			case VARYING:
			case VERSION:
			case VIEW:
			case VIEWS:
			case VOLATILE:
			case WHITESPACE:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML:
			case YEAR:
			case YES:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL:
			case EXISTS:
			case EXTRACT:
			case FLOAT:
			case GREATEST:
			case GROUPING:
			case INOUT:
			case INT:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case CURRENT_USER:
			case SESSION_USER:
			case ALIGNMENT:
			case BASETYPE:
			case BUFFERS:
			case BYPASSRLS:
			case CANONICAL:
			case CATEGORY:
			case COLLATABLE:
			case COMBINEFUNC:
			case COMMUTATOR:
			case CONNECT:
			case COSTS:
			case CREATEDB:
			case CREATEROLE:
			case DESERIALFUNC:
			case DETERMINISTIC:
			case DISABLE_PAGE_SKIPPING:
			case ELEMENT:
			case EXTENDED:
			case FINALFUNC:
			case FINALFUNC_EXTRA:
			case FINALFUNC_MODIFY:
			case FORCE_NOT_NULL:
			case FORCE_NULL:
			case FORCE_QUOTE:
			case FORMAT:
			case GETTOKEN:
			case HASH:
			case HASHES:
			case HEADLINE:
			case HYPOTHETICAL:
			case INDEX_CLEANUP:
			case INIT:
			case INITCOND:
			case INTERNALLENGTH:
			case JSON:
			case LC_COLLATE:
			case LC_CTYPE:
			case LEFTARG:
			case LEXIZE:
			case LEXTYPES:
			case LIST:
			case LOCALE:
			case LOGIN:
			case MAIN:
			case MERGES:
			case MFINALFUNC:
			case MFINALFUNC_EXTRA:
			case MFINALFUNC_MODIFY:
			case MINITCOND:
			case MINVFUNC:
			case MODULUS:
			case MSFUNC:
			case MSSPACE:
			case MSTYPE:
			case NEGATOR:
			case NOBYPASSRLS:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOREPLICATION:
			case NOSUPERUSER:
			case OUTPUT:
			case PASSEDBYVALUE:
			case PATH:
			case PERMISSIVE:
			case PLAIN:
			case PREFERRED:
			case PROVIDER:
			case READ_ONLY:
			case READ_WRITE:
			case RECEIVE:
			case REMAINDER:
			case REPLICATION:
			case RESTRICTED:
			case RESTRICTIVE:
			case RIGHTARG:
			case SAFE:
			case SEND:
			case SERIALFUNC:
			case SETTINGS:
			case SFUNC:
			case SHAREABLE:
			case SKIP_LOCKED:
			case SORTOP:
			case SSPACE:
			case STYPE:
			case SUBTYPE_DIFF:
			case SUBTYPE_OPCLASS:
			case SUBTYPE:
			case SUMMARY:
			case SUPERUSER:
			case TIMING:
			case TYPMOD_IN:
			case TYPMOD_OUT:
			case UNSAFE:
			case USAGE:
			case VARIABLE:
			case YAML:
			case ALIAS:
			case ASSERT:
			case CONSTANT:
			case DATATYPE:
			case DEBUG:
			case DETAIL:
			case DIAGNOSTICS:
			case ELSEIF:
			case ELSIF:
			case ERRCODE:
			case EXIT:
			case EXCEPTION:
			case FOREACH:
			case GET:
			case HINT:
			case INFO:
			case LOG:
			case LOOP:
			case MESSAGE:
			case NOTICE:
			case OPEN:
			case PERFORM:
			case QUERY:
			case RAISE:
			case RECORD:
			case RETURN:
			case REVERSE:
			case ROWTYPE:
			case SLICE:
			case SQLSTATE:
			case STACKED:
			case WARNING:
			case WHILE:
			case Identifier:
			case QuotedIdentifier:
				{
				setState(2752);
				user_name();
				}
				break;
			case USER:
				{
				setState(2753);
				match(USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2756);
			match(SERVER);
			setState(2757);
			identifier();
			setState(2759);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTIONS) {
				{
				setState(2758);
				define_foreign_options();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_user_mappingContext extends ParserRuleContext {
		public List<TerminalNode> USER() { return getTokens(PLpgSQLParser.USER); }
		public TerminalNode USER(int i) {
			return getToken(PLpgSQLParser.USER, i);
		}
		public TerminalNode MAPPING() { return getToken(PLpgSQLParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(PLpgSQLParser.FOR, 0); }
		public TerminalNode SERVER() { return getToken(PLpgSQLParser.SERVER, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public User_nameContext user_name() {
			return getRuleContext(User_nameContext.class,0);
		}
		public Define_foreign_optionsContext define_foreign_options() {
			return getRuleContext(Define_foreign_optionsContext.class,0);
		}
		public Alter_user_mappingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_user_mapping; }
	}

	public final Alter_user_mappingContext alter_user_mapping() throws RecognitionException {
		Alter_user_mappingContext _localctx = new Alter_user_mappingContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_alter_user_mapping);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2761);
			match(USER);
			setState(2762);
			match(MAPPING);
			setState(2763);
			match(FOR);
			setState(2766);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BY:
			case CACHE:
			case CALL:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COLUMNS:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONFLICT:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CUBE:
			case CURRENT:
			case CURSOR:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DEPENDS:
			case DETACH:
			case DICTIONARY:
			case DISABLE:
			case DISCARD:
			case DOCUMENT:
			case DOMAIN:
			case DOUBLE:
			case DROP:
			case EACH:
			case ENABLE:
			case ENCODING:
			case ENCRYPTED:
			case ENUM:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GENERATED:
			case GLOBAL:
			case GRANTED:
			case GROUPS:
			case HANDLER:
			case HEADER:
			case HOLD:
			case HOUR:
			case IDENTITY:
			case IF:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT:
			case IMPORT:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCKED:
			case LOGGED:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case METHOD:
			case MINUTE:
			case MINVALUE:
			case MODE:
			case MONTH:
			case MOVE:
			case NAME:
			case NAMES:
			case NEW:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS:
			case OBJECT:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OVER:
			case OVERRIDING:
			case OWNED:
			case OWNER:
			case PARALLEL:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POLICY:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROCEDURES:
			case PROGRAM:
			case PUBLICATION:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINES:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMAS:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SKIP_:
			case SNAPSHOT:
			case SQL:
			case STABLE:
			case STANDALONE:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STORED:
			case STRICT:
			case STRIP:
			case SUBSCRIPTION:
			case SUPPORT:
			case SYSID:
			case SYSTEM:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT:
			case TIES:
			case TRANSACTION:
			case TRANSFORM:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE:
			case VARYING:
			case VERSION:
			case VIEW:
			case VIEWS:
			case VOLATILE:
			case WHITESPACE:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML:
			case YEAR:
			case YES:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL:
			case EXISTS:
			case EXTRACT:
			case FLOAT:
			case GREATEST:
			case GROUPING:
			case INOUT:
			case INT:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case CURRENT_USER:
			case SESSION_USER:
			case ALIGNMENT:
			case BASETYPE:
			case BUFFERS:
			case BYPASSRLS:
			case CANONICAL:
			case CATEGORY:
			case COLLATABLE:
			case COMBINEFUNC:
			case COMMUTATOR:
			case CONNECT:
			case COSTS:
			case CREATEDB:
			case CREATEROLE:
			case DESERIALFUNC:
			case DETERMINISTIC:
			case DISABLE_PAGE_SKIPPING:
			case ELEMENT:
			case EXTENDED:
			case FINALFUNC:
			case FINALFUNC_EXTRA:
			case FINALFUNC_MODIFY:
			case FORCE_NOT_NULL:
			case FORCE_NULL:
			case FORCE_QUOTE:
			case FORMAT:
			case GETTOKEN:
			case HASH:
			case HASHES:
			case HEADLINE:
			case HYPOTHETICAL:
			case INDEX_CLEANUP:
			case INIT:
			case INITCOND:
			case INTERNALLENGTH:
			case JSON:
			case LC_COLLATE:
			case LC_CTYPE:
			case LEFTARG:
			case LEXIZE:
			case LEXTYPES:
			case LIST:
			case LOCALE:
			case LOGIN:
			case MAIN:
			case MERGES:
			case MFINALFUNC:
			case MFINALFUNC_EXTRA:
			case MFINALFUNC_MODIFY:
			case MINITCOND:
			case MINVFUNC:
			case MODULUS:
			case MSFUNC:
			case MSSPACE:
			case MSTYPE:
			case NEGATOR:
			case NOBYPASSRLS:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOREPLICATION:
			case NOSUPERUSER:
			case OUTPUT:
			case PASSEDBYVALUE:
			case PATH:
			case PERMISSIVE:
			case PLAIN:
			case PREFERRED:
			case PROVIDER:
			case READ_ONLY:
			case READ_WRITE:
			case RECEIVE:
			case REMAINDER:
			case REPLICATION:
			case RESTRICTED:
			case RESTRICTIVE:
			case RIGHTARG:
			case SAFE:
			case SEND:
			case SERIALFUNC:
			case SETTINGS:
			case SFUNC:
			case SHAREABLE:
			case SKIP_LOCKED:
			case SORTOP:
			case SSPACE:
			case STYPE:
			case SUBTYPE_DIFF:
			case SUBTYPE_OPCLASS:
			case SUBTYPE:
			case SUMMARY:
			case SUPERUSER:
			case TIMING:
			case TYPMOD_IN:
			case TYPMOD_OUT:
			case UNSAFE:
			case USAGE:
			case VARIABLE:
			case YAML:
			case ALIAS:
			case ASSERT:
			case CONSTANT:
			case DATATYPE:
			case DEBUG:
			case DETAIL:
			case DIAGNOSTICS:
			case ELSEIF:
			case ELSIF:
			case ERRCODE:
			case EXIT:
			case EXCEPTION:
			case FOREACH:
			case GET:
			case HINT:
			case INFO:
			case LOG:
			case LOOP:
			case MESSAGE:
			case NOTICE:
			case OPEN:
			case PERFORM:
			case QUERY:
			case RAISE:
			case RECORD:
			case RETURN:
			case REVERSE:
			case ROWTYPE:
			case SLICE:
			case SQLSTATE:
			case STACKED:
			case WARNING:
			case WHILE:
			case Identifier:
			case QuotedIdentifier:
				{
				setState(2764);
				user_name();
				}
				break;
			case USER:
				{
				setState(2765);
				match(USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2768);
			match(SERVER);
			setState(2769);
			identifier();
			setState(2771);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTIONS) {
				{
				setState(2770);
				define_foreign_options();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_user_or_roleContext extends ParserRuleContext {
		public TerminalNode USER() { return getToken(PLpgSQLParser.USER, 0); }
		public TerminalNode ROLE() { return getToken(PLpgSQLParser.ROLE, 0); }
		public Alter_user_or_role_set_resetContext alter_user_or_role_set_reset() {
			return getRuleContext(Alter_user_or_role_set_resetContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Rename_toContext rename_to() {
			return getRuleContext(Rename_toContext.class,0);
		}
		public User_nameContext user_name() {
			return getRuleContext(User_nameContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PLpgSQLParser.WITH, 0); }
		public List<User_or_role_option_for_alterContext> user_or_role_option_for_alter() {
			return getRuleContexts(User_or_role_option_for_alterContext.class);
		}
		public User_or_role_option_for_alterContext user_or_role_option_for_alter(int i) {
			return getRuleContext(User_or_role_option_for_alterContext.class,i);
		}
		public Alter_user_or_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_user_or_role; }
	}

	public final Alter_user_or_roleContext alter_user_or_role() throws RecognitionException {
		Alter_user_or_roleContext _localctx = new Alter_user_or_roleContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_alter_user_or_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2773);
			_la = _input.LA(1);
			if ( !(_la==ROLE || _la==USER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2787);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,293,_ctx) ) {
			case 1:
				{
				setState(2774);
				alter_user_or_role_set_reset();
				}
				break;
			case 2:
				{
				setState(2775);
				identifier();
				setState(2776);
				rename_to();
				}
				break;
			case 3:
				{
				setState(2778);
				user_name();
				setState(2780);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2779);
					match(WITH);
					}
				}

				setState(2783); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2782);
					user_or_role_option_for_alter();
					}
					}
					setState(2785); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CONNECTION || _la==ENCRYPTED || _la==INHERIT || _la==PASSWORD || _la==VALID || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (BYPASSRLS - 446)) | (1L << (CREATEDB - 446)) | (1L << (CREATEROLE - 446)) | (1L << (LOGIN - 446)) | (1L << (NOBYPASSRLS - 446)) | (1L << (NOCREATEDB - 446)) | (1L << (NOCREATEROLE - 446)) | (1L << (NOINHERIT - 446)) | (1L << (NOLOGIN - 446)) | (1L << (NOREPLICATION - 446)) | (1L << (NOSUPERUSER - 446)))) != 0) || _la==REPLICATION || _la==SUPERUSER );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_user_or_role_set_resetContext extends ParserRuleContext {
		public User_or_role_set_resetContext user_or_role_set_reset() {
			return getRuleContext(User_or_role_set_resetContext.class,0);
		}
		public User_nameContext user_name() {
			return getRuleContext(User_nameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PLpgSQLParser.ALL, 0); }
		public TerminalNode IN() { return getToken(PLpgSQLParser.IN, 0); }
		public TerminalNode DATABASE() { return getToken(PLpgSQLParser.DATABASE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Alter_user_or_role_set_resetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_user_or_role_set_reset; }
	}

	public final Alter_user_or_role_set_resetContext alter_user_or_role_set_reset() throws RecognitionException {
		Alter_user_or_role_set_resetContext _localctx = new Alter_user_or_role_set_resetContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_alter_user_or_role_set_reset);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2791);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BY:
			case CACHE:
			case CALL:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COLUMNS:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONFLICT:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CUBE:
			case CURRENT:
			case CURSOR:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DEPENDS:
			case DETACH:
			case DICTIONARY:
			case DISABLE:
			case DISCARD:
			case DOCUMENT:
			case DOMAIN:
			case DOUBLE:
			case DROP:
			case EACH:
			case ENABLE:
			case ENCODING:
			case ENCRYPTED:
			case ENUM:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GENERATED:
			case GLOBAL:
			case GRANTED:
			case GROUPS:
			case HANDLER:
			case HEADER:
			case HOLD:
			case HOUR:
			case IDENTITY:
			case IF:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT:
			case IMPORT:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCKED:
			case LOGGED:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case METHOD:
			case MINUTE:
			case MINVALUE:
			case MODE:
			case MONTH:
			case MOVE:
			case NAME:
			case NAMES:
			case NEW:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS:
			case OBJECT:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OVER:
			case OVERRIDING:
			case OWNED:
			case OWNER:
			case PARALLEL:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POLICY:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROCEDURES:
			case PROGRAM:
			case PUBLICATION:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINES:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMAS:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SKIP_:
			case SNAPSHOT:
			case SQL:
			case STABLE:
			case STANDALONE:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STORED:
			case STRICT:
			case STRIP:
			case SUBSCRIPTION:
			case SUPPORT:
			case SYSID:
			case SYSTEM:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT:
			case TIES:
			case TRANSACTION:
			case TRANSFORM:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE:
			case VARYING:
			case VERSION:
			case VIEW:
			case VIEWS:
			case VOLATILE:
			case WHITESPACE:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML:
			case YEAR:
			case YES:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL:
			case EXISTS:
			case EXTRACT:
			case FLOAT:
			case GREATEST:
			case GROUPING:
			case INOUT:
			case INT:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case CURRENT_USER:
			case SESSION_USER:
			case ALIGNMENT:
			case BASETYPE:
			case BUFFERS:
			case BYPASSRLS:
			case CANONICAL:
			case CATEGORY:
			case COLLATABLE:
			case COMBINEFUNC:
			case COMMUTATOR:
			case CONNECT:
			case COSTS:
			case CREATEDB:
			case CREATEROLE:
			case DESERIALFUNC:
			case DETERMINISTIC:
			case DISABLE_PAGE_SKIPPING:
			case ELEMENT:
			case EXTENDED:
			case FINALFUNC:
			case FINALFUNC_EXTRA:
			case FINALFUNC_MODIFY:
			case FORCE_NOT_NULL:
			case FORCE_NULL:
			case FORCE_QUOTE:
			case FORMAT:
			case GETTOKEN:
			case HASH:
			case HASHES:
			case HEADLINE:
			case HYPOTHETICAL:
			case INDEX_CLEANUP:
			case INIT:
			case INITCOND:
			case INTERNALLENGTH:
			case JSON:
			case LC_COLLATE:
			case LC_CTYPE:
			case LEFTARG:
			case LEXIZE:
			case LEXTYPES:
			case LIST:
			case LOCALE:
			case LOGIN:
			case MAIN:
			case MERGES:
			case MFINALFUNC:
			case MFINALFUNC_EXTRA:
			case MFINALFUNC_MODIFY:
			case MINITCOND:
			case MINVFUNC:
			case MODULUS:
			case MSFUNC:
			case MSSPACE:
			case MSTYPE:
			case NEGATOR:
			case NOBYPASSRLS:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOREPLICATION:
			case NOSUPERUSER:
			case OUTPUT:
			case PASSEDBYVALUE:
			case PATH:
			case PERMISSIVE:
			case PLAIN:
			case PREFERRED:
			case PROVIDER:
			case READ_ONLY:
			case READ_WRITE:
			case RECEIVE:
			case REMAINDER:
			case REPLICATION:
			case RESTRICTED:
			case RESTRICTIVE:
			case RIGHTARG:
			case SAFE:
			case SEND:
			case SERIALFUNC:
			case SETTINGS:
			case SFUNC:
			case SHAREABLE:
			case SKIP_LOCKED:
			case SORTOP:
			case SSPACE:
			case STYPE:
			case SUBTYPE_DIFF:
			case SUBTYPE_OPCLASS:
			case SUBTYPE:
			case SUMMARY:
			case SUPERUSER:
			case TIMING:
			case TYPMOD_IN:
			case TYPMOD_OUT:
			case UNSAFE:
			case USAGE:
			case VARIABLE:
			case YAML:
			case ALIAS:
			case ASSERT:
			case CONSTANT:
			case DATATYPE:
			case DEBUG:
			case DETAIL:
			case DIAGNOSTICS:
			case ELSEIF:
			case ELSIF:
			case ERRCODE:
			case EXIT:
			case EXCEPTION:
			case FOREACH:
			case GET:
			case HINT:
			case INFO:
			case LOG:
			case LOOP:
			case MESSAGE:
			case NOTICE:
			case OPEN:
			case PERFORM:
			case QUERY:
			case RAISE:
			case RECORD:
			case RETURN:
			case REVERSE:
			case ROWTYPE:
			case SLICE:
			case SQLSTATE:
			case STACKED:
			case WARNING:
			case WHILE:
			case Identifier:
			case QuotedIdentifier:
				{
				setState(2789);
				user_name();
				}
				break;
			case ALL:
				{
				setState(2790);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2796);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(2793);
				match(IN);
				setState(2794);
				match(DATABASE);
				setState(2795);
				identifier();
				}
			}

			setState(2798);
			user_or_role_set_reset();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class User_or_role_set_resetContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PLpgSQLParser.SET, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public Set_statement_valueContext set_statement_value() {
			return getRuleContext(Set_statement_valueContext.class,0);
		}
		public TerminalNode TO() { return getToken(PLpgSQLParser.TO, 0); }
		public TerminalNode EQUAL() { return getToken(PLpgSQLParser.EQUAL, 0); }
		public TerminalNode DOT() { return getToken(PLpgSQLParser.DOT, 0); }
		public TerminalNode FROM() { return getToken(PLpgSQLParser.FROM, 0); }
		public TerminalNode CURRENT() { return getToken(PLpgSQLParser.CURRENT, 0); }
		public TerminalNode RESET() { return getToken(PLpgSQLParser.RESET, 0); }
		public TerminalNode ALL() { return getToken(PLpgSQLParser.ALL, 0); }
		public User_or_role_set_resetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_or_role_set_reset; }
	}

	public final User_or_role_set_resetContext user_or_role_set_reset() throws RecognitionException {
		User_or_role_set_resetContext _localctx = new User_or_role_set_resetContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_user_or_role_set_reset);
		int _la;
		try {
			setState(2829);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,299,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2800);
				match(SET);
				setState(2804);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,296,_ctx) ) {
				case 1:
					{
					setState(2801);
					identifier();
					setState(2802);
					match(DOT);
					}
					break;
				}
				setState(2806);
				identifier();
				setState(2807);
				_la = _input.LA(1);
				if ( !(_la==TO || _la==EQUAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2808);
				set_statement_value();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2810);
				match(SET);
				setState(2814);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,297,_ctx) ) {
				case 1:
					{
					setState(2811);
					identifier();
					setState(2812);
					match(DOT);
					}
					break;
				}
				setState(2816);
				identifier();
				setState(2817);
				match(FROM);
				setState(2818);
				match(CURRENT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2820);
				match(RESET);
				setState(2824);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,298,_ctx) ) {
				case 1:
					{
					setState(2821);
					identifier();
					setState(2822);
					match(DOT);
					}
					break;
				}
				setState(2826);
				identifier();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2827);
				match(RESET);
				setState(2828);
				match(ALL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_groupContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(PLpgSQLParser.GROUP, 0); }
		public Alter_group_actionContext alter_group_action() {
			return getRuleContext(Alter_group_actionContext.class,0);
		}
		public Alter_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_group; }
	}

	public final Alter_groupContext alter_group() throws RecognitionException {
		Alter_groupContext _localctx = new Alter_groupContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_alter_group);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2831);
			match(GROUP);
			setState(2832);
			alter_group_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_group_actionContext extends ParserRuleContext {
		public IdentifierContext name;
		public Rename_toContext rename_to() {
			return getRuleContext(Rename_toContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public User_nameContext user_name() {
			return getRuleContext(User_nameContext.class,0);
		}
		public TerminalNode USER() { return getToken(PLpgSQLParser.USER, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode ADD() { return getToken(PLpgSQLParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(PLpgSQLParser.DROP, 0); }
		public Alter_group_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_group_action; }
	}

	public final Alter_group_actionContext alter_group_action() throws RecognitionException {
		Alter_group_actionContext _localctx = new Alter_group_actionContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_alter_group_action);
		int _la;
		try {
			setState(2842);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,300,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2834);
				((Alter_group_actionContext)_localctx).name = identifier();
				setState(2835);
				rename_to();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2837);
				user_name();
				setState(2838);
				_la = _input.LA(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2839);
				match(USER);
				setState(2840);
				identifier_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_tablespaceContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode TABLESPACE() { return getToken(PLpgSQLParser.TABLESPACE, 0); }
		public Alter_tablespace_actionContext alter_tablespace_action() {
			return getRuleContext(Alter_tablespace_actionContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Alter_tablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_tablespace; }
	}

	public final Alter_tablespaceContext alter_tablespace() throws RecognitionException {
		Alter_tablespaceContext _localctx = new Alter_tablespaceContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_alter_tablespace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2844);
			match(TABLESPACE);
			setState(2845);
			((Alter_tablespaceContext)_localctx).name = identifier();
			setState(2846);
			alter_tablespace_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_ownerContext extends ParserRuleContext {
		public Schema_qualified_nameContext name;
		public Owner_toContext owner_to() {
			return getRuleContext(Owner_toContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PLpgSQLParser.OPERATOR, 0); }
		public Target_operatorContext target_operator() {
			return getRuleContext(Target_operatorContext.class,0);
		}
		public TerminalNode LARGE() { return getToken(PLpgSQLParser.LARGE, 0); }
		public TerminalNode OBJECT() { return getToken(PLpgSQLParser.OBJECT, 0); }
		public TerminalNode NUMBER_LITERAL() { return getToken(PLpgSQLParser.NUMBER_LITERAL, 0); }
		public Function_argsContext function_args() {
			return getRuleContext(Function_argsContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(PLpgSQLParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(PLpgSQLParser.PROCEDURE, 0); }
		public TerminalNode AGGREGATE() { return getToken(PLpgSQLParser.AGGREGATE, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public TerminalNode TEXT() { return getToken(PLpgSQLParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(PLpgSQLParser.SEARCH, 0); }
		public TerminalNode DICTIONARY() { return getToken(PLpgSQLParser.DICTIONARY, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PLpgSQLParser.CONFIGURATION, 0); }
		public TerminalNode DOMAIN() { return getToken(PLpgSQLParser.DOMAIN, 0); }
		public TerminalNode SCHEMA() { return getToken(PLpgSQLParser.SCHEMA, 0); }
		public TerminalNode SEQUENCE() { return getToken(PLpgSQLParser.SEQUENCE, 0); }
		public TerminalNode TYPE() { return getToken(PLpgSQLParser.TYPE, 0); }
		public TerminalNode VIEW() { return getToken(PLpgSQLParser.VIEW, 0); }
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public TerminalNode MATERIALIZED() { return getToken(PLpgSQLParser.MATERIALIZED, 0); }
		public Alter_ownerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_owner; }
	}

	public final Alter_ownerContext alter_owner() throws RecognitionException {
		Alter_ownerContext _localctx = new Alter_ownerContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_alter_owner);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2877);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPERATOR:
				{
				setState(2848);
				match(OPERATOR);
				setState(2849);
				target_operator();
				}
				break;
			case LARGE:
				{
				setState(2850);
				match(LARGE);
				setState(2851);
				match(OBJECT);
				setState(2852);
				match(NUMBER_LITERAL);
				}
				break;
			case AGGREGATE:
			case FUNCTION:
			case PROCEDURE:
				{
				setState(2853);
				_la = _input.LA(1);
				if ( !(_la==AGGREGATE || _la==FUNCTION || _la==PROCEDURE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2854);
				((Alter_ownerContext)_localctx).name = schema_qualified_name();
				setState(2855);
				function_args();
				}
				break;
			case DOMAIN:
			case MATERIALIZED:
			case SCHEMA:
			case SEQUENCE:
			case TEXT:
			case TYPE:
			case VIEW:
				{
				setState(2871);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,302,_ctx) ) {
				case 1:
					{
					setState(2857);
					match(TEXT);
					setState(2858);
					match(SEARCH);
					setState(2859);
					match(DICTIONARY);
					}
					break;
				case 2:
					{
					setState(2860);
					match(TEXT);
					setState(2861);
					match(SEARCH);
					setState(2862);
					match(CONFIGURATION);
					}
					break;
				case 3:
					{
					setState(2863);
					match(DOMAIN);
					}
					break;
				case 4:
					{
					setState(2864);
					match(SCHEMA);
					}
					break;
				case 5:
					{
					setState(2865);
					match(SEQUENCE);
					}
					break;
				case 6:
					{
					setState(2866);
					match(TYPE);
					}
					break;
				case 7:
					{
					setState(2868);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==MATERIALIZED) {
						{
						setState(2867);
						match(MATERIALIZED);
						}
					}

					setState(2870);
					match(VIEW);
					}
					break;
				}
				setState(2874);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,303,_ctx) ) {
				case 1:
					{
					setState(2873);
					if_exists();
					}
					break;
				}
				setState(2876);
				((Alter_ownerContext)_localctx).name = schema_qualified_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2879);
			owner_to();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_tablespace_actionContext extends ParserRuleContext {
		public Rename_toContext rename_to() {
			return getRuleContext(Rename_toContext.class,0);
		}
		public Owner_toContext owner_to() {
			return getRuleContext(Owner_toContext.class,0);
		}
		public TerminalNode SET() { return getToken(PLpgSQLParser.SET, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public List<Option_with_valueContext> option_with_value() {
			return getRuleContexts(Option_with_valueContext.class);
		}
		public Option_with_valueContext option_with_value(int i) {
			return getRuleContext(Option_with_valueContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public TerminalNode RESET() { return getToken(PLpgSQLParser.RESET, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public Alter_tablespace_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_tablespace_action; }
	}

	public final Alter_tablespace_actionContext alter_tablespace_action() throws RecognitionException {
		Alter_tablespace_actionContext _localctx = new Alter_tablespace_actionContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_alter_tablespace_action);
		int _la;
		try {
			setState(2900);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RENAME:
				enterOuterAlt(_localctx, 1);
				{
				setState(2881);
				rename_to();
				}
				break;
			case OWNER:
				enterOuterAlt(_localctx, 2);
				{
				setState(2882);
				owner_to();
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 3);
				{
				setState(2883);
				match(SET);
				setState(2884);
				match(LEFT_PAREN);
				setState(2885);
				option_with_value();
				setState(2890);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2886);
					match(COMMA);
					setState(2887);
					option_with_value();
					}
					}
					setState(2892);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2893);
				match(RIGHT_PAREN);
				}
				break;
			case RESET:
				enterOuterAlt(_localctx, 4);
				{
				setState(2895);
				match(RESET);
				setState(2896);
				match(LEFT_PAREN);
				setState(2897);
				identifier_list();
				setState(2898);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_statisticsContext extends ParserRuleContext {
		public Schema_qualified_nameContext name;
		public TerminalNode STATISTICS() { return getToken(PLpgSQLParser.STATISTICS, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Rename_toContext rename_to() {
			return getRuleContext(Rename_toContext.class,0);
		}
		public Set_schemaContext set_schema() {
			return getRuleContext(Set_schemaContext.class,0);
		}
		public Owner_toContext owner_to() {
			return getRuleContext(Owner_toContext.class,0);
		}
		public Alter_statisticsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_statistics; }
	}

	public final Alter_statisticsContext alter_statistics() throws RecognitionException {
		Alter_statisticsContext _localctx = new Alter_statisticsContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_alter_statistics);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2902);
			match(STATISTICS);
			setState(2903);
			((Alter_statisticsContext)_localctx).name = schema_qualified_name();
			setState(2907);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RENAME:
				{
				setState(2904);
				rename_to();
				}
				break;
			case SET:
				{
				setState(2905);
				set_schema();
				}
				break;
			case OWNER:
				{
				setState(2906);
				owner_to();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_foreign_data_wrapperContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode FOREIGN() { return getToken(PLpgSQLParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(PLpgSQLParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(PLpgSQLParser.WRAPPER, 0); }
		public Alter_foreign_data_wrapper_actionContext alter_foreign_data_wrapper_action() {
			return getRuleContext(Alter_foreign_data_wrapper_actionContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Alter_foreign_data_wrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_foreign_data_wrapper; }
	}

	public final Alter_foreign_data_wrapperContext alter_foreign_data_wrapper() throws RecognitionException {
		Alter_foreign_data_wrapperContext _localctx = new Alter_foreign_data_wrapperContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_alter_foreign_data_wrapper);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2909);
			match(FOREIGN);
			setState(2910);
			match(DATA);
			setState(2911);
			match(WRAPPER);
			setState(2912);
			((Alter_foreign_data_wrapperContext)_localctx).name = identifier();
			setState(2913);
			alter_foreign_data_wrapper_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_foreign_data_wrapper_actionContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(PLpgSQLParser.HANDLER, 0); }
		public List<Schema_qualified_name_nontypeContext> schema_qualified_name_nontype() {
			return getRuleContexts(Schema_qualified_name_nontypeContext.class);
		}
		public Schema_qualified_name_nontypeContext schema_qualified_name_nontype(int i) {
			return getRuleContext(Schema_qualified_name_nontypeContext.class,i);
		}
		public List<TerminalNode> NO() { return getTokens(PLpgSQLParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(PLpgSQLParser.NO, i);
		}
		public TerminalNode VALIDATOR() { return getToken(PLpgSQLParser.VALIDATOR, 0); }
		public Define_foreign_optionsContext define_foreign_options() {
			return getRuleContext(Define_foreign_optionsContext.class,0);
		}
		public Owner_toContext owner_to() {
			return getRuleContext(Owner_toContext.class,0);
		}
		public Rename_toContext rename_to() {
			return getRuleContext(Rename_toContext.class,0);
		}
		public Alter_foreign_data_wrapper_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_foreign_data_wrapper_action; }
	}

	public final Alter_foreign_data_wrapper_actionContext alter_foreign_data_wrapper_action() throws RecognitionException {
		Alter_foreign_data_wrapper_actionContext _localctx = new Alter_foreign_data_wrapper_actionContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_alter_foreign_data_wrapper_action);
		int _la;
		try {
			setState(2932);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EOF:
			case HANDLER:
			case NO:
			case OPTIONS:
			case VALIDATOR:
			case SEMI_COLON:
				enterOuterAlt(_localctx, 1);
				{
				setState(2919);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,308,_ctx) ) {
				case 1:
					{
					setState(2915);
					match(HANDLER);
					setState(2916);
					schema_qualified_name_nontype();
					}
					break;
				case 2:
					{
					setState(2917);
					match(NO);
					setState(2918);
					match(HANDLER);
					}
					break;
				}
				setState(2925);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case VALIDATOR:
					{
					setState(2921);
					match(VALIDATOR);
					setState(2922);
					schema_qualified_name_nontype();
					}
					break;
				case NO:
					{
					setState(2923);
					match(NO);
					setState(2924);
					match(VALIDATOR);
					}
					break;
				case EOF:
				case OPTIONS:
				case SEMI_COLON:
					break;
				default:
					break;
				}
				setState(2928);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONS) {
					{
					setState(2927);
					define_foreign_options();
					}
				}

				}
				break;
			case OWNER:
				enterOuterAlt(_localctx, 2);
				{
				setState(2930);
				owner_to();
				}
				break;
			case RENAME:
				enterOuterAlt(_localctx, 3);
				{
				setState(2931);
				rename_to();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_operator_statementContext extends ParserRuleContext {
		public TerminalNode OPERATOR() { return getToken(PLpgSQLParser.OPERATOR, 0); }
		public Target_operatorContext target_operator() {
			return getRuleContext(Target_operatorContext.class,0);
		}
		public Alter_operator_actionContext alter_operator_action() {
			return getRuleContext(Alter_operator_actionContext.class,0);
		}
		public Alter_operator_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_operator_statement; }
	}

	public final Alter_operator_statementContext alter_operator_statement() throws RecognitionException {
		Alter_operator_statementContext _localctx = new Alter_operator_statementContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_alter_operator_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2934);
			match(OPERATOR);
			setState(2935);
			target_operator();
			setState(2936);
			alter_operator_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_operator_actionContext extends ParserRuleContext {
		public Set_schemaContext set_schema() {
			return getRuleContext(Set_schemaContext.class,0);
		}
		public TerminalNode SET() { return getToken(PLpgSQLParser.SET, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public List<Operator_set_restrict_joinContext> operator_set_restrict_join() {
			return getRuleContexts(Operator_set_restrict_joinContext.class);
		}
		public Operator_set_restrict_joinContext operator_set_restrict_join(int i) {
			return getRuleContext(Operator_set_restrict_joinContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Alter_operator_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_operator_action; }
	}

	public final Alter_operator_actionContext alter_operator_action() throws RecognitionException {
		Alter_operator_actionContext _localctx = new Alter_operator_actionContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_alter_operator_action);
		int _la;
		try {
			setState(2951);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,313,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2938);
				set_schema();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2939);
				match(SET);
				setState(2940);
				match(LEFT_PAREN);
				setState(2941);
				operator_set_restrict_join();
				setState(2946);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2942);
					match(COMMA);
					setState(2943);
					operator_set_restrict_join();
					}
					}
					setState(2948);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2949);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Operator_set_restrict_joinContext extends ParserRuleContext {
		public TerminalNode EQUAL() { return getToken(PLpgSQLParser.EQUAL, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public TerminalNode RESTRICT() { return getToken(PLpgSQLParser.RESTRICT, 0); }
		public TerminalNode JOIN() { return getToken(PLpgSQLParser.JOIN, 0); }
		public Operator_set_restrict_joinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operator_set_restrict_join; }
	}

	public final Operator_set_restrict_joinContext operator_set_restrict_join() throws RecognitionException {
		Operator_set_restrict_joinContext _localctx = new Operator_set_restrict_joinContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_operator_set_restrict_join);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2953);
			_la = _input.LA(1);
			if ( !(_la==RESTRICT || _la==JOIN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2954);
			match(EQUAL);
			setState(2955);
			schema_qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_user_mappingContext extends ParserRuleContext {
		public List<TerminalNode> USER() { return getTokens(PLpgSQLParser.USER); }
		public TerminalNode USER(int i) {
			return getToken(PLpgSQLParser.USER, i);
		}
		public TerminalNode MAPPING() { return getToken(PLpgSQLParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(PLpgSQLParser.FOR, 0); }
		public TerminalNode SERVER() { return getToken(PLpgSQLParser.SERVER, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public User_nameContext user_name() {
			return getRuleContext(User_nameContext.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Drop_user_mappingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_user_mapping; }
	}

	public final Drop_user_mappingContext drop_user_mapping() throws RecognitionException {
		Drop_user_mappingContext _localctx = new Drop_user_mappingContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_drop_user_mapping);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2957);
			match(USER);
			setState(2958);
			match(MAPPING);
			setState(2960);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2959);
				if_exists();
				}
			}

			setState(2962);
			match(FOR);
			setState(2965);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BY:
			case CACHE:
			case CALL:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COLUMNS:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONFLICT:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CUBE:
			case CURRENT:
			case CURSOR:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DEPENDS:
			case DETACH:
			case DICTIONARY:
			case DISABLE:
			case DISCARD:
			case DOCUMENT:
			case DOMAIN:
			case DOUBLE:
			case DROP:
			case EACH:
			case ENABLE:
			case ENCODING:
			case ENCRYPTED:
			case ENUM:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GENERATED:
			case GLOBAL:
			case GRANTED:
			case GROUPS:
			case HANDLER:
			case HEADER:
			case HOLD:
			case HOUR:
			case IDENTITY:
			case IF:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT:
			case IMPORT:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCKED:
			case LOGGED:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case METHOD:
			case MINUTE:
			case MINVALUE:
			case MODE:
			case MONTH:
			case MOVE:
			case NAME:
			case NAMES:
			case NEW:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS:
			case OBJECT:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OVER:
			case OVERRIDING:
			case OWNED:
			case OWNER:
			case PARALLEL:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POLICY:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROCEDURES:
			case PROGRAM:
			case PUBLICATION:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINES:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMAS:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SKIP_:
			case SNAPSHOT:
			case SQL:
			case STABLE:
			case STANDALONE:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STORED:
			case STRICT:
			case STRIP:
			case SUBSCRIPTION:
			case SUPPORT:
			case SYSID:
			case SYSTEM:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT:
			case TIES:
			case TRANSACTION:
			case TRANSFORM:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE:
			case VARYING:
			case VERSION:
			case VIEW:
			case VIEWS:
			case VOLATILE:
			case WHITESPACE:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML:
			case YEAR:
			case YES:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL:
			case EXISTS:
			case EXTRACT:
			case FLOAT:
			case GREATEST:
			case GROUPING:
			case INOUT:
			case INT:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case CURRENT_USER:
			case SESSION_USER:
			case ALIGNMENT:
			case BASETYPE:
			case BUFFERS:
			case BYPASSRLS:
			case CANONICAL:
			case CATEGORY:
			case COLLATABLE:
			case COMBINEFUNC:
			case COMMUTATOR:
			case CONNECT:
			case COSTS:
			case CREATEDB:
			case CREATEROLE:
			case DESERIALFUNC:
			case DETERMINISTIC:
			case DISABLE_PAGE_SKIPPING:
			case ELEMENT:
			case EXTENDED:
			case FINALFUNC:
			case FINALFUNC_EXTRA:
			case FINALFUNC_MODIFY:
			case FORCE_NOT_NULL:
			case FORCE_NULL:
			case FORCE_QUOTE:
			case FORMAT:
			case GETTOKEN:
			case HASH:
			case HASHES:
			case HEADLINE:
			case HYPOTHETICAL:
			case INDEX_CLEANUP:
			case INIT:
			case INITCOND:
			case INTERNALLENGTH:
			case JSON:
			case LC_COLLATE:
			case LC_CTYPE:
			case LEFTARG:
			case LEXIZE:
			case LEXTYPES:
			case LIST:
			case LOCALE:
			case LOGIN:
			case MAIN:
			case MERGES:
			case MFINALFUNC:
			case MFINALFUNC_EXTRA:
			case MFINALFUNC_MODIFY:
			case MINITCOND:
			case MINVFUNC:
			case MODULUS:
			case MSFUNC:
			case MSSPACE:
			case MSTYPE:
			case NEGATOR:
			case NOBYPASSRLS:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOREPLICATION:
			case NOSUPERUSER:
			case OUTPUT:
			case PASSEDBYVALUE:
			case PATH:
			case PERMISSIVE:
			case PLAIN:
			case PREFERRED:
			case PROVIDER:
			case READ_ONLY:
			case READ_WRITE:
			case RECEIVE:
			case REMAINDER:
			case REPLICATION:
			case RESTRICTED:
			case RESTRICTIVE:
			case RIGHTARG:
			case SAFE:
			case SEND:
			case SERIALFUNC:
			case SETTINGS:
			case SFUNC:
			case SHAREABLE:
			case SKIP_LOCKED:
			case SORTOP:
			case SSPACE:
			case STYPE:
			case SUBTYPE_DIFF:
			case SUBTYPE_OPCLASS:
			case SUBTYPE:
			case SUMMARY:
			case SUPERUSER:
			case TIMING:
			case TYPMOD_IN:
			case TYPMOD_OUT:
			case UNSAFE:
			case USAGE:
			case VARIABLE:
			case YAML:
			case ALIAS:
			case ASSERT:
			case CONSTANT:
			case DATATYPE:
			case DEBUG:
			case DETAIL:
			case DIAGNOSTICS:
			case ELSEIF:
			case ELSIF:
			case ERRCODE:
			case EXIT:
			case EXCEPTION:
			case FOREACH:
			case GET:
			case HINT:
			case INFO:
			case LOG:
			case LOOP:
			case MESSAGE:
			case NOTICE:
			case OPEN:
			case PERFORM:
			case QUERY:
			case RAISE:
			case RECORD:
			case RETURN:
			case REVERSE:
			case ROWTYPE:
			case SLICE:
			case SQLSTATE:
			case STACKED:
			case WARNING:
			case WHILE:
			case Identifier:
			case QuotedIdentifier:
				{
				setState(2963);
				user_name();
				}
				break;
			case USER:
				{
				setState(2964);
				match(USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2967);
			match(SERVER);
			setState(2968);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_ownedContext extends ParserRuleContext {
		public TerminalNode OWNED() { return getToken(PLpgSQLParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(PLpgSQLParser.BY, 0); }
		public List<User_nameContext> user_name() {
			return getRuleContexts(User_nameContext.class);
		}
		public User_nameContext user_name(int i) {
			return getRuleContext(User_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Cascade_restrictContext cascade_restrict() {
			return getRuleContext(Cascade_restrictContext.class,0);
		}
		public Drop_ownedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_owned; }
	}

	public final Drop_ownedContext drop_owned() throws RecognitionException {
		Drop_ownedContext _localctx = new Drop_ownedContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_drop_owned);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2970);
			match(OWNED);
			setState(2971);
			match(BY);
			setState(2972);
			user_name();
			setState(2977);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2973);
				match(COMMA);
				setState(2974);
				user_name();
				}
				}
				setState(2979);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2981);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(2980);
				cascade_restrict();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_operator_statementContext extends ParserRuleContext {
		public TerminalNode OPERATOR() { return getToken(PLpgSQLParser.OPERATOR, 0); }
		public List<Target_operatorContext> target_operator() {
			return getRuleContexts(Target_operatorContext.class);
		}
		public Target_operatorContext target_operator(int i) {
			return getRuleContext(Target_operatorContext.class,i);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Cascade_restrictContext cascade_restrict() {
			return getRuleContext(Cascade_restrictContext.class,0);
		}
		public Drop_operator_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_operator_statement; }
	}

	public final Drop_operator_statementContext drop_operator_statement() throws RecognitionException {
		Drop_operator_statementContext _localctx = new Drop_operator_statementContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_drop_operator_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2983);
			match(OPERATOR);
			setState(2985);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,318,_ctx) ) {
			case 1:
				{
				setState(2984);
				if_exists();
				}
				break;
			}
			setState(2987);
			target_operator();
			setState(2992);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2988);
				match(COMMA);
				setState(2989);
				target_operator();
				}
				}
				setState(2994);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2996);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(2995);
				cascade_restrict();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Target_operatorContext extends ParserRuleContext {
		public Operator_nameContext name;
		public Data_typeContext left_type;
		public Data_typeContext right_type;
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public TerminalNode COMMA() { return getToken(PLpgSQLParser.COMMA, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public Operator_nameContext operator_name() {
			return getRuleContext(Operator_nameContext.class,0);
		}
		public List<TerminalNode> NONE() { return getTokens(PLpgSQLParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(PLpgSQLParser.NONE, i);
		}
		public List<Data_typeContext> data_type() {
			return getRuleContexts(Data_typeContext.class);
		}
		public Data_typeContext data_type(int i) {
			return getRuleContext(Data_typeContext.class,i);
		}
		public Target_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_target_operator; }
	}

	public final Target_operatorContext target_operator() throws RecognitionException {
		Target_operatorContext _localctx = new Target_operatorContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_target_operator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2998);
			((Target_operatorContext)_localctx).name = operator_name();
			setState(2999);
			match(LEFT_PAREN);
			setState(3002);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,321,_ctx) ) {
			case 1:
				{
				setState(3000);
				((Target_operatorContext)_localctx).left_type = data_type();
				}
				break;
			case 2:
				{
				setState(3001);
				match(NONE);
				}
				break;
			}
			setState(3004);
			match(COMMA);
			setState(3007);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,322,_ctx) ) {
			case 1:
				{
				setState(3005);
				((Target_operatorContext)_localctx).right_type = data_type();
				}
				break;
			case 2:
				{
				setState(3006);
				match(NONE);
				}
				break;
			}
			setState(3009);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Domain_constraintContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode CHECK() { return getToken(PLpgSQLParser.CHECK, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public TerminalNode NULL() { return getToken(PLpgSQLParser.NULL, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PLpgSQLParser.CONSTRAINT, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PLpgSQLParser.NOT, 0); }
		public Domain_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_domain_constraint; }
	}

	public final Domain_constraintContext domain_constraint() throws RecognitionException {
		Domain_constraintContext _localctx = new Domain_constraintContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_domain_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3013);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(3011);
				match(CONSTRAINT);
				setState(3012);
				((Domain_constraintContext)_localctx).name = identifier();
				}
			}

			setState(3024);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHECK:
				{
				setState(3015);
				match(CHECK);
				setState(3016);
				match(LEFT_PAREN);
				setState(3017);
				vex(0);
				setState(3018);
				match(RIGHT_PAREN);
				}
				break;
			case NOT:
			case NULL:
				{
				setState(3021);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(3020);
					match(NOT);
					}
				}

				setState(3023);
				match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_transform_statementContext extends ParserRuleContext {
		public TerminalNode TRANSFORM() { return getToken(PLpgSQLParser.TRANSFORM, 0); }
		public TerminalNode FOR() { return getToken(PLpgSQLParser.FOR, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PLpgSQLParser.LANGUAGE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public TerminalNode FROM() { return getToken(PLpgSQLParser.FROM, 0); }
		public List<TerminalNode> SQL() { return getTokens(PLpgSQLParser.SQL); }
		public TerminalNode SQL(int i) {
			return getToken(PLpgSQLParser.SQL, i);
		}
		public List<TerminalNode> WITH() { return getTokens(PLpgSQLParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(PLpgSQLParser.WITH, i);
		}
		public List<TerminalNode> FUNCTION() { return getTokens(PLpgSQLParser.FUNCTION); }
		public TerminalNode FUNCTION(int i) {
			return getToken(PLpgSQLParser.FUNCTION, i);
		}
		public List<Function_parametersContext> function_parameters() {
			return getRuleContexts(Function_parametersContext.class);
		}
		public Function_parametersContext function_parameters(int i) {
			return getRuleContext(Function_parametersContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(PLpgSQLParser.COMMA, 0); }
		public TerminalNode TO() { return getToken(PLpgSQLParser.TO, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public TerminalNode OR() { return getToken(PLpgSQLParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PLpgSQLParser.REPLACE, 0); }
		public Create_transform_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_transform_statement; }
	}

	public final Create_transform_statementContext create_transform_statement() throws RecognitionException {
		Create_transform_statementContext _localctx = new Create_transform_statementContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_create_transform_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3028);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(3026);
				match(OR);
				setState(3027);
				match(REPLACE);
				}
			}

			setState(3030);
			match(TRANSFORM);
			setState(3031);
			match(FOR);
			setState(3032);
			data_type();
			setState(3033);
			match(LANGUAGE);
			setState(3034);
			identifier();
			setState(3035);
			match(LEFT_PAREN);
			setState(3036);
			match(FROM);
			setState(3037);
			match(SQL);
			setState(3038);
			match(WITH);
			setState(3039);
			match(FUNCTION);
			setState(3040);
			function_parameters();
			setState(3041);
			match(COMMA);
			setState(3042);
			match(TO);
			setState(3043);
			match(SQL);
			setState(3044);
			match(WITH);
			setState(3045);
			match(FUNCTION);
			setState(3046);
			function_parameters();
			setState(3047);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_access_methodContext extends ParserRuleContext {
		public TerminalNode ACCESS() { return getToken(PLpgSQLParser.ACCESS, 0); }
		public TerminalNode METHOD() { return getToken(PLpgSQLParser.METHOD, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(PLpgSQLParser.TYPE, 0); }
		public TerminalNode HANDLER() { return getToken(PLpgSQLParser.HANDLER, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PLpgSQLParser.TABLE, 0); }
		public TerminalNode INDEX() { return getToken(PLpgSQLParser.INDEX, 0); }
		public Create_access_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_access_method; }
	}

	public final Create_access_methodContext create_access_method() throws RecognitionException {
		Create_access_methodContext _localctx = new Create_access_methodContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_create_access_method);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3049);
			match(ACCESS);
			setState(3050);
			match(METHOD);
			setState(3051);
			identifier();
			setState(3052);
			match(TYPE);
			setState(3053);
			_la = _input.LA(1);
			if ( !(_la==INDEX || _la==TABLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3054);
			match(HANDLER);
			setState(3055);
			schema_qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_user_or_roleContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode USER() { return getToken(PLpgSQLParser.USER, 0); }
		public TerminalNode ROLE() { return getToken(PLpgSQLParser.ROLE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<User_or_role_optionContext> user_or_role_option() {
			return getRuleContexts(User_or_role_optionContext.class);
		}
		public User_or_role_optionContext user_or_role_option(int i) {
			return getRuleContext(User_or_role_optionContext.class,i);
		}
		public TerminalNode WITH() { return getToken(PLpgSQLParser.WITH, 0); }
		public Create_user_or_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_user_or_role; }
	}

	public final Create_user_or_roleContext create_user_or_role() throws RecognitionException {
		Create_user_or_roleContext _localctx = new Create_user_or_roleContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_create_user_or_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3057);
			_la = _input.LA(1);
			if ( !(_la==ROLE || _la==USER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3058);
			((Create_user_or_roleContext)_localctx).name = identifier();
			setState(3069);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ADMIN || _la==CONNECTION || _la==ENCRYPTED || _la==INHERIT || _la==PASSWORD || _la==ROLE || _la==SYSID || _la==VALID || ((((_la - 405)) & ~0x3f) == 0 && ((1L << (_la - 405)) & ((1L << (IN - 405)) | (1L << (USER - 405)) | (1L << (WITH - 405)) | (1L << (BYPASSRLS - 405)) | (1L << (CREATEDB - 405)) | (1L << (CREATEROLE - 405)))) != 0) || ((((_la - 485)) & ~0x3f) == 0 && ((1L << (_la - 485)) & ((1L << (LOGIN - 485)) | (1L << (NOBYPASSRLS - 485)) | (1L << (NOCREATEDB - 485)) | (1L << (NOCREATEROLE - 485)) | (1L << (NOINHERIT - 485)) | (1L << (NOLOGIN - 485)) | (1L << (NOREPLICATION - 485)) | (1L << (NOSUPERUSER - 485)) | (1L << (REPLICATION - 485)) | (1L << (SUPERUSER - 485)))) != 0)) {
				{
				setState(3060);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(3059);
					match(WITH);
					}
				}

				setState(3062);
				user_or_role_option();
				setState(3066);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ADMIN || _la==CONNECTION || _la==ENCRYPTED || _la==INHERIT || _la==PASSWORD || _la==ROLE || _la==SYSID || _la==VALID || ((((_la - 405)) & ~0x3f) == 0 && ((1L << (_la - 405)) & ((1L << (IN - 405)) | (1L << (USER - 405)) | (1L << (BYPASSRLS - 405)) | (1L << (CREATEDB - 405)) | (1L << (CREATEROLE - 405)))) != 0) || ((((_la - 485)) & ~0x3f) == 0 && ((1L << (_la - 485)) & ((1L << (LOGIN - 485)) | (1L << (NOBYPASSRLS - 485)) | (1L << (NOCREATEDB - 485)) | (1L << (NOCREATEROLE - 485)) | (1L << (NOINHERIT - 485)) | (1L << (NOLOGIN - 485)) | (1L << (NOREPLICATION - 485)) | (1L << (NOSUPERUSER - 485)) | (1L << (REPLICATION - 485)) | (1L << (SUPERUSER - 485)))) != 0)) {
					{
					{
					setState(3063);
					user_or_role_option();
					}
					}
					setState(3068);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class User_or_role_optionContext extends ParserRuleContext {
		public User_or_role_or_group_common_optionContext user_or_role_or_group_common_option() {
			return getRuleContext(User_or_role_or_group_common_optionContext.class,0);
		}
		public User_or_role_common_optionContext user_or_role_common_option() {
			return getRuleContext(User_or_role_common_optionContext.class,0);
		}
		public User_or_role_or_group_option_for_createContext user_or_role_or_group_option_for_create() {
			return getRuleContext(User_or_role_or_group_option_for_createContext.class,0);
		}
		public User_or_role_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_or_role_option; }
	}

	public final User_or_role_optionContext user_or_role_option() throws RecognitionException {
		User_or_role_optionContext _localctx = new User_or_role_optionContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_user_or_role_option);
		try {
			setState(3074);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENCRYPTED:
			case INHERIT:
			case PASSWORD:
			case VALID:
			case CREATEDB:
			case CREATEROLE:
			case LOGIN:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOSUPERUSER:
			case SUPERUSER:
				enterOuterAlt(_localctx, 1);
				{
				setState(3071);
				user_or_role_or_group_common_option();
				}
				break;
			case CONNECTION:
			case BYPASSRLS:
			case NOBYPASSRLS:
			case NOREPLICATION:
			case REPLICATION:
				enterOuterAlt(_localctx, 2);
				{
				setState(3072);
				user_or_role_common_option();
				}
				break;
			case ADMIN:
			case ROLE:
			case SYSID:
			case IN:
			case USER:
				enterOuterAlt(_localctx, 3);
				{
				setState(3073);
				user_or_role_or_group_option_for_create();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class User_or_role_option_for_alterContext extends ParserRuleContext {
		public User_or_role_or_group_common_optionContext user_or_role_or_group_common_option() {
			return getRuleContext(User_or_role_or_group_common_optionContext.class,0);
		}
		public User_or_role_common_optionContext user_or_role_common_option() {
			return getRuleContext(User_or_role_common_optionContext.class,0);
		}
		public User_or_role_option_for_alterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_or_role_option_for_alter; }
	}

	public final User_or_role_option_for_alterContext user_or_role_option_for_alter() throws RecognitionException {
		User_or_role_option_for_alterContext _localctx = new User_or_role_option_for_alterContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_user_or_role_option_for_alter);
		try {
			setState(3078);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENCRYPTED:
			case INHERIT:
			case PASSWORD:
			case VALID:
			case CREATEDB:
			case CREATEROLE:
			case LOGIN:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOSUPERUSER:
			case SUPERUSER:
				enterOuterAlt(_localctx, 1);
				{
				setState(3076);
				user_or_role_or_group_common_option();
				}
				break;
			case CONNECTION:
			case BYPASSRLS:
			case NOBYPASSRLS:
			case NOREPLICATION:
			case REPLICATION:
				enterOuterAlt(_localctx, 2);
				{
				setState(3077);
				user_or_role_common_option();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class User_or_role_or_group_common_optionContext extends ParserRuleContext {
		public Token password;
		public Token date_time;
		public TerminalNode SUPERUSER() { return getToken(PLpgSQLParser.SUPERUSER, 0); }
		public TerminalNode NOSUPERUSER() { return getToken(PLpgSQLParser.NOSUPERUSER, 0); }
		public TerminalNode CREATEDB() { return getToken(PLpgSQLParser.CREATEDB, 0); }
		public TerminalNode NOCREATEDB() { return getToken(PLpgSQLParser.NOCREATEDB, 0); }
		public TerminalNode CREATEROLE() { return getToken(PLpgSQLParser.CREATEROLE, 0); }
		public TerminalNode NOCREATEROLE() { return getToken(PLpgSQLParser.NOCREATEROLE, 0); }
		public TerminalNode INHERIT() { return getToken(PLpgSQLParser.INHERIT, 0); }
		public TerminalNode NOINHERIT() { return getToken(PLpgSQLParser.NOINHERIT, 0); }
		public TerminalNode LOGIN() { return getToken(PLpgSQLParser.LOGIN, 0); }
		public TerminalNode NOLOGIN() { return getToken(PLpgSQLParser.NOLOGIN, 0); }
		public TerminalNode PASSWORD() { return getToken(PLpgSQLParser.PASSWORD, 0); }
		public TerminalNode NULL() { return getToken(PLpgSQLParser.NULL, 0); }
		public TerminalNode ENCRYPTED() { return getToken(PLpgSQLParser.ENCRYPTED, 0); }
		public TerminalNode Character_String_Literal() { return getToken(PLpgSQLParser.Character_String_Literal, 0); }
		public TerminalNode VALID() { return getToken(PLpgSQLParser.VALID, 0); }
		public TerminalNode UNTIL() { return getToken(PLpgSQLParser.UNTIL, 0); }
		public User_or_role_or_group_common_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_or_role_or_group_common_option; }
	}

	public final User_or_role_or_group_common_optionContext user_or_role_or_group_common_option() throws RecognitionException {
		User_or_role_or_group_common_optionContext _localctx = new User_or_role_or_group_common_optionContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_user_or_role_or_group_common_option);
		int _la;
		try {
			setState(3101);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SUPERUSER:
				enterOuterAlt(_localctx, 1);
				{
				setState(3080);
				match(SUPERUSER);
				}
				break;
			case NOSUPERUSER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3081);
				match(NOSUPERUSER);
				}
				break;
			case CREATEDB:
				enterOuterAlt(_localctx, 3);
				{
				setState(3082);
				match(CREATEDB);
				}
				break;
			case NOCREATEDB:
				enterOuterAlt(_localctx, 4);
				{
				setState(3083);
				match(NOCREATEDB);
				}
				break;
			case CREATEROLE:
				enterOuterAlt(_localctx, 5);
				{
				setState(3084);
				match(CREATEROLE);
				}
				break;
			case NOCREATEROLE:
				enterOuterAlt(_localctx, 6);
				{
				setState(3085);
				match(NOCREATEROLE);
				}
				break;
			case INHERIT:
				enterOuterAlt(_localctx, 7);
				{
				setState(3086);
				match(INHERIT);
				}
				break;
			case NOINHERIT:
				enterOuterAlt(_localctx, 8);
				{
				setState(3087);
				match(NOINHERIT);
				}
				break;
			case LOGIN:
				enterOuterAlt(_localctx, 9);
				{
				setState(3088);
				match(LOGIN);
				}
				break;
			case NOLOGIN:
				enterOuterAlt(_localctx, 10);
				{
				setState(3089);
				match(NOLOGIN);
				}
				break;
			case ENCRYPTED:
			case PASSWORD:
				enterOuterAlt(_localctx, 11);
				{
				setState(3091);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENCRYPTED) {
					{
					setState(3090);
					match(ENCRYPTED);
					}
				}

				setState(3093);
				match(PASSWORD);
				setState(3096);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case Character_String_Literal:
					{
					setState(3094);
					((User_or_role_or_group_common_optionContext)_localctx).password = match(Character_String_Literal);
					}
					break;
				case NULL:
					{
					setState(3095);
					match(NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case VALID:
				enterOuterAlt(_localctx, 12);
				{
				setState(3098);
				match(VALID);
				setState(3099);
				match(UNTIL);
				setState(3100);
				((User_or_role_or_group_common_optionContext)_localctx).date_time = match(Character_String_Literal);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class User_or_role_common_optionContext extends ParserRuleContext {
		public TerminalNode REPLICATION() { return getToken(PLpgSQLParser.REPLICATION, 0); }
		public TerminalNode NOREPLICATION() { return getToken(PLpgSQLParser.NOREPLICATION, 0); }
		public TerminalNode BYPASSRLS() { return getToken(PLpgSQLParser.BYPASSRLS, 0); }
		public TerminalNode NOBYPASSRLS() { return getToken(PLpgSQLParser.NOBYPASSRLS, 0); }
		public TerminalNode CONNECTION() { return getToken(PLpgSQLParser.CONNECTION, 0); }
		public TerminalNode LIMIT() { return getToken(PLpgSQLParser.LIMIT, 0); }
		public Signed_number_literalContext signed_number_literal() {
			return getRuleContext(Signed_number_literalContext.class,0);
		}
		public User_or_role_common_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_or_role_common_option; }
	}

	public final User_or_role_common_optionContext user_or_role_common_option() throws RecognitionException {
		User_or_role_common_optionContext _localctx = new User_or_role_common_optionContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_user_or_role_common_option);
		try {
			setState(3110);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REPLICATION:
				enterOuterAlt(_localctx, 1);
				{
				setState(3103);
				match(REPLICATION);
				}
				break;
			case NOREPLICATION:
				enterOuterAlt(_localctx, 2);
				{
				setState(3104);
				match(NOREPLICATION);
				}
				break;
			case BYPASSRLS:
				enterOuterAlt(_localctx, 3);
				{
				setState(3105);
				match(BYPASSRLS);
				}
				break;
			case NOBYPASSRLS:
				enterOuterAlt(_localctx, 4);
				{
				setState(3106);
				match(NOBYPASSRLS);
				}
				break;
			case CONNECTION:
				enterOuterAlt(_localctx, 5);
				{
				setState(3107);
				match(CONNECTION);
				setState(3108);
				match(LIMIT);
				setState(3109);
				signed_number_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class User_or_role_or_group_option_for_createContext extends ParserRuleContext {
		public TerminalNode SYSID() { return getToken(PLpgSQLParser.SYSID, 0); }
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IN() { return getToken(PLpgSQLParser.IN, 0); }
		public TerminalNode ROLE() { return getToken(PLpgSQLParser.ROLE, 0); }
		public TerminalNode GROUP() { return getToken(PLpgSQLParser.GROUP, 0); }
		public TerminalNode ADMIN() { return getToken(PLpgSQLParser.ADMIN, 0); }
		public TerminalNode USER() { return getToken(PLpgSQLParser.USER, 0); }
		public User_or_role_or_group_option_for_createContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_or_role_or_group_option_for_create; }
	}

	public final User_or_role_or_group_option_for_createContext user_or_role_or_group_option_for_create() throws RecognitionException {
		User_or_role_or_group_option_for_createContext _localctx = new User_or_role_or_group_option_for_createContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_user_or_role_or_group_option_for_create);
		try {
			setState(3124);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SYSID:
				enterOuterAlt(_localctx, 1);
				{
				setState(3112);
				match(SYSID);
				setState(3113);
				vex(0);
				}
				break;
			case ADMIN:
			case ROLE:
			case IN:
			case USER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3121);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,336,_ctx) ) {
				case 1:
					{
					setState(3114);
					match(IN);
					setState(3115);
					match(ROLE);
					}
					break;
				case 2:
					{
					setState(3116);
					match(IN);
					setState(3117);
					match(GROUP);
					}
					break;
				case 3:
					{
					setState(3118);
					match(ROLE);
					}
					break;
				case 4:
					{
					setState(3119);
					match(ADMIN);
					}
					break;
				case 5:
					{
					setState(3120);
					match(USER);
					}
					break;
				}
				setState(3123);
				identifier_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_groupContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode GROUP() { return getToken(PLpgSQLParser.GROUP, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PLpgSQLParser.WITH, 0); }
		public List<Group_optionContext> group_option() {
			return getRuleContexts(Group_optionContext.class);
		}
		public Group_optionContext group_option(int i) {
			return getRuleContext(Group_optionContext.class,i);
		}
		public Create_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_group; }
	}

	public final Create_groupContext create_group() throws RecognitionException {
		Create_groupContext _localctx = new Create_groupContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_create_group);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3126);
			match(GROUP);
			setState(3127);
			((Create_groupContext)_localctx).name = identifier();
			setState(3136);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ADMIN || _la==ENCRYPTED || _la==INHERIT || _la==PASSWORD || _la==ROLE || _la==SYSID || _la==VALID || ((((_la - 405)) & ~0x3f) == 0 && ((1L << (_la - 405)) & ((1L << (IN - 405)) | (1L << (USER - 405)) | (1L << (WITH - 405)) | (1L << (CREATEDB - 405)) | (1L << (CREATEROLE - 405)))) != 0) || ((((_la - 485)) & ~0x3f) == 0 && ((1L << (_la - 485)) & ((1L << (LOGIN - 485)) | (1L << (NOCREATEDB - 485)) | (1L << (NOCREATEROLE - 485)) | (1L << (NOINHERIT - 485)) | (1L << (NOLOGIN - 485)) | (1L << (NOSUPERUSER - 485)) | (1L << (SUPERUSER - 485)))) != 0)) {
				{
				setState(3129);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(3128);
					match(WITH);
					}
				}

				setState(3132); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3131);
					group_option();
					}
					}
					setState(3134); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==ADMIN || _la==ENCRYPTED || _la==INHERIT || _la==PASSWORD || _la==ROLE || _la==SYSID || _la==VALID || ((((_la - 405)) & ~0x3f) == 0 && ((1L << (_la - 405)) & ((1L << (IN - 405)) | (1L << (USER - 405)) | (1L << (CREATEDB - 405)) | (1L << (CREATEROLE - 405)))) != 0) || ((((_la - 485)) & ~0x3f) == 0 && ((1L << (_la - 485)) & ((1L << (LOGIN - 485)) | (1L << (NOCREATEDB - 485)) | (1L << (NOCREATEROLE - 485)) | (1L << (NOINHERIT - 485)) | (1L << (NOLOGIN - 485)) | (1L << (NOSUPERUSER - 485)) | (1L << (SUPERUSER - 485)))) != 0) );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_optionContext extends ParserRuleContext {
		public User_or_role_or_group_common_optionContext user_or_role_or_group_common_option() {
			return getRuleContext(User_or_role_or_group_common_optionContext.class,0);
		}
		public User_or_role_or_group_option_for_createContext user_or_role_or_group_option_for_create() {
			return getRuleContext(User_or_role_or_group_option_for_createContext.class,0);
		}
		public Group_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_option; }
	}

	public final Group_optionContext group_option() throws RecognitionException {
		Group_optionContext _localctx = new Group_optionContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_group_option);
		try {
			setState(3140);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENCRYPTED:
			case INHERIT:
			case PASSWORD:
			case VALID:
			case CREATEDB:
			case CREATEROLE:
			case LOGIN:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOSUPERUSER:
			case SUPERUSER:
				enterOuterAlt(_localctx, 1);
				{
				setState(3138);
				user_or_role_or_group_common_option();
				}
				break;
			case ADMIN:
			case ROLE:
			case SYSID:
			case IN:
			case USER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3139);
				user_or_role_or_group_option_for_create();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_tablespaceContext extends ParserRuleContext {
		public IdentifierContext name;
		public Token directory;
		public TerminalNode TABLESPACE() { return getToken(PLpgSQLParser.TABLESPACE, 0); }
		public TerminalNode LOCATION() { return getToken(PLpgSQLParser.LOCATION, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode Character_String_Literal() { return getToken(PLpgSQLParser.Character_String_Literal, 0); }
		public TerminalNode OWNER() { return getToken(PLpgSQLParser.OWNER, 0); }
		public User_nameContext user_name() {
			return getRuleContext(User_nameContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PLpgSQLParser.WITH, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public List<Option_with_valueContext> option_with_value() {
			return getRuleContexts(Option_with_valueContext.class);
		}
		public Option_with_valueContext option_with_value(int i) {
			return getRuleContext(Option_with_valueContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Create_tablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_tablespace; }
	}

	public final Create_tablespaceContext create_tablespace() throws RecognitionException {
		Create_tablespaceContext _localctx = new Create_tablespaceContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_create_tablespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3142);
			match(TABLESPACE);
			setState(3143);
			((Create_tablespaceContext)_localctx).name = identifier();
			setState(3146);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OWNER) {
				{
				setState(3144);
				match(OWNER);
				setState(3145);
				user_name();
				}
			}

			setState(3148);
			match(LOCATION);
			setState(3149);
			((Create_tablespaceContext)_localctx).directory = match(Character_String_Literal);
			setState(3162);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3150);
				match(WITH);
				setState(3151);
				match(LEFT_PAREN);
				setState(3152);
				option_with_value();
				setState(3157);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3153);
					match(COMMA);
					setState(3154);
					option_with_value();
					}
					}
					setState(3159);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3160);
				match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_statisticsContext extends ParserRuleContext {
		public Schema_qualified_nameContext name;
		public TerminalNode STATISTICS() { return getToken(PLpgSQLParser.STATISTICS, 0); }
		public TerminalNode ON() { return getToken(PLpgSQLParser.ON, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PLpgSQLParser.COMMA, 0); }
		public List<Identifier_listContext> identifier_list() {
			return getRuleContexts(Identifier_listContext.class);
		}
		public Identifier_listContext identifier_list(int i) {
			return getRuleContext(Identifier_listContext.class,i);
		}
		public TerminalNode FROM() { return getToken(PLpgSQLParser.FROM, 0); }
		public List<Schema_qualified_nameContext> schema_qualified_name() {
			return getRuleContexts(Schema_qualified_nameContext.class);
		}
		public Schema_qualified_nameContext schema_qualified_name(int i) {
			return getRuleContext(Schema_qualified_nameContext.class,i);
		}
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public Create_statisticsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_statistics; }
	}

	public final Create_statisticsContext create_statistics() throws RecognitionException {
		Create_statisticsContext _localctx = new Create_statisticsContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_create_statistics);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3164);
			match(STATISTICS);
			setState(3166);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,345,_ctx) ) {
			case 1:
				{
				setState(3165);
				if_not_exists();
				}
				break;
			}
			setState(3168);
			((Create_statisticsContext)_localctx).name = schema_qualified_name();
			setState(3173);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(3169);
				match(LEFT_PAREN);
				setState(3170);
				identifier_list();
				setState(3171);
				match(RIGHT_PAREN);
				}
			}

			setState(3175);
			match(ON);
			setState(3176);
			identifier();
			setState(3177);
			match(COMMA);
			setState(3178);
			identifier_list();
			setState(3179);
			match(FROM);
			setState(3180);
			schema_qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_foreign_data_wrapperContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode FOREIGN() { return getToken(PLpgSQLParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(PLpgSQLParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(PLpgSQLParser.WRAPPER, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode HANDLER() { return getToken(PLpgSQLParser.HANDLER, 0); }
		public List<Schema_qualified_name_nontypeContext> schema_qualified_name_nontype() {
			return getRuleContexts(Schema_qualified_name_nontypeContext.class);
		}
		public Schema_qualified_name_nontypeContext schema_qualified_name_nontype(int i) {
			return getRuleContext(Schema_qualified_name_nontypeContext.class,i);
		}
		public List<TerminalNode> NO() { return getTokens(PLpgSQLParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(PLpgSQLParser.NO, i);
		}
		public TerminalNode VALIDATOR() { return getToken(PLpgSQLParser.VALIDATOR, 0); }
		public TerminalNode OPTIONS() { return getToken(PLpgSQLParser.OPTIONS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public List<Option_without_equalContext> option_without_equal() {
			return getRuleContexts(Option_without_equalContext.class);
		}
		public Option_without_equalContext option_without_equal(int i) {
			return getRuleContext(Option_without_equalContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Create_foreign_data_wrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_foreign_data_wrapper; }
	}

	public final Create_foreign_data_wrapperContext create_foreign_data_wrapper() throws RecognitionException {
		Create_foreign_data_wrapperContext _localctx = new Create_foreign_data_wrapperContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_create_foreign_data_wrapper);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3182);
			match(FOREIGN);
			setState(3183);
			match(DATA);
			setState(3184);
			match(WRAPPER);
			setState(3185);
			((Create_foreign_data_wrapperContext)_localctx).name = identifier();
			setState(3190);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,347,_ctx) ) {
			case 1:
				{
				setState(3186);
				match(HANDLER);
				setState(3187);
				schema_qualified_name_nontype();
				}
				break;
			case 2:
				{
				setState(3188);
				match(NO);
				setState(3189);
				match(HANDLER);
				}
				break;
			}
			setState(3196);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VALIDATOR:
				{
				setState(3192);
				match(VALIDATOR);
				setState(3193);
				schema_qualified_name_nontype();
				}
				break;
			case NO:
				{
				setState(3194);
				match(NO);
				setState(3195);
				match(VALIDATOR);
				}
				break;
			case EOF:
			case OPTIONS:
			case SEMI_COLON:
				break;
			default:
				break;
			}
			setState(3210);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTIONS) {
				{
				setState(3198);
				match(OPTIONS);
				setState(3199);
				match(LEFT_PAREN);
				setState(3200);
				option_without_equal();
				setState(3205);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3201);
					match(COMMA);
					setState(3202);
					option_without_equal();
					}
					}
					setState(3207);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3208);
				match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Option_without_equalContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode Character_String_Literal() { return getToken(PLpgSQLParser.Character_String_Literal, 0); }
		public Option_without_equalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_option_without_equal; }
	}

	public final Option_without_equalContext option_without_equal() throws RecognitionException {
		Option_without_equalContext _localctx = new Option_without_equalContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_option_without_equal);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3212);
			identifier();
			setState(3213);
			match(Character_String_Literal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_operator_statementContext extends ParserRuleContext {
		public Operator_nameContext name;
		public TerminalNode OPERATOR() { return getToken(PLpgSQLParser.OPERATOR, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public List<Operator_optionContext> operator_option() {
			return getRuleContexts(Operator_optionContext.class);
		}
		public Operator_optionContext operator_option(int i) {
			return getRuleContext(Operator_optionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public Operator_nameContext operator_name() {
			return getRuleContext(Operator_nameContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Create_operator_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_operator_statement; }
	}

	public final Create_operator_statementContext create_operator_statement() throws RecognitionException {
		Create_operator_statementContext _localctx = new Create_operator_statementContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_create_operator_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3215);
			match(OPERATOR);
			setState(3216);
			((Create_operator_statementContext)_localctx).name = operator_name();
			setState(3217);
			match(LEFT_PAREN);
			setState(3218);
			operator_option();
			setState(3223);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3219);
				match(COMMA);
				setState(3220);
				operator_option();
				}
				}
				setState(3225);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3226);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Operator_nameContext extends ParserRuleContext {
		public IdentifierContext schema_name;
		public All_simple_opContext operator;
		public All_simple_opContext all_simple_op() {
			return getRuleContext(All_simple_opContext.class,0);
		}
		public TerminalNode DOT() { return getToken(PLpgSQLParser.DOT, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Operator_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operator_name; }
	}

	public final Operator_nameContext operator_name() throws RecognitionException {
		Operator_nameContext _localctx = new Operator_nameContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_operator_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3231);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATTACH) | (1L << ATTRIBUTE) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BY) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG) | (1L << CHAIN) | (1L << CHARACTERISTICS) | (1L << CHECKPOINT) | (1L << CLASS) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMENTS) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONFIGURATION) | (1L << CONFLICT) | (1L << CONNECTION) | (1L << CONSTRAINTS) | (1L << CONTENT) | (1L << CONTINUE) | (1L << CONVERSION) | (1L << COPY) | (1L << COST) | (1L << CSV) | (1L << CUBE) | (1L << CURRENT) | (1L << CURSOR) | (1L << CYCLE) | (1L << DATA) | (1L << DATABASE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DEFAULTS) | (1L << DEFERRED) | (1L << DEFINER) | (1L << DELETE) | (1L << DELIMITER) | (1L << DELIMITERS) | (1L << DEPENDS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DETACH - 64)) | (1L << (DICTIONARY - 64)) | (1L << (DISABLE - 64)) | (1L << (DISCARD - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOMAIN - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (EACH - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTED - 64)) | (1L << (ENUM - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVENT - 64)) | (1L << (EXCLUDE - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXCLUSIVE - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTENSION - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FAMILY - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORCE - 64)) | (1L << (FORWARD - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GENERATED - 64)) | (1L << (GLOBAL - 64)) | (1L << (GRANTED - 64)) | (1L << (GROUPS - 64)) | (1L << (HANDLER - 64)) | (1L << (HEADER - 64)) | (1L << (HOLD - 64)) | (1L << (HOUR - 64)) | (1L << (IDENTITY - 64)) | (1L << (IF - 64)) | (1L << (IMMEDIATE - 64)) | (1L << (IMMUTABLE - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPORT - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INCREMENT - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXES - 64)) | (1L << (INHERIT - 64)) | (1L << (INHERITS - 64)) | (1L << (INLINE - 64)) | (1L << (INPUT - 64)) | (1L << (INSENSITIVE - 64)) | (1L << (INSERT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INVOKER - 64)) | (1L << (ISOLATION - 64)) | (1L << (KEY - 64)) | (1L << (LABEL - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LARGE - 64)) | (1L << (LAST - 64)) | (1L << (LEAKPROOF - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LEVEL - 128)) | (1L << (LISTEN - 128)) | (1L << (LOAD - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCATION - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKED - 128)) | (1L << (LOGGED - 128)) | (1L << (MAPPING - 128)) | (1L << (MATCH - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MAXVALUE - 128)) | (1L << (METHOD - 128)) | (1L << (MINUTE - 128)) | (1L << (MINVALUE - 128)) | (1L << (MODE - 128)) | (1L << (MONTH - 128)) | (1L << (MOVE - 128)) | (1L << (NAME - 128)) | (1L << (NAMES - 128)) | (1L << (NEW - 128)) | (1L << (NEXT - 128)) | (1L << (NO - 128)) | (1L << (NOTHING - 128)) | (1L << (NOTIFY - 128)) | (1L << (NOWAIT - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFF - 128)) | (1L << (OIDS - 128)) | (1L << (OLD - 128)) | (1L << (OPERATOR - 128)) | (1L << (OPTION - 128)) | (1L << (OPTIONS - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OTHERS - 128)) | (1L << (OVER - 128)) | (1L << (OVERRIDING - 128)) | (1L << (OWNED - 128)) | (1L << (OWNER - 128)) | (1L << (PARALLEL - 128)) | (1L << (PARSER - 128)) | (1L << (PARTIAL - 128)) | (1L << (PARTITION - 128)) | (1L << (PASSING - 128)) | (1L << (PASSWORD - 128)) | (1L << (PLANS - 128)) | (1L << (POLICY - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PREPARED - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRIOR - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROCEDURAL - 128)) | (1L << (PROCEDURE - 128)) | (1L << (PROCEDURES - 128)) | (1L << (PROGRAM - 128)) | (1L << (PUBLICATION - 128)) | (1L << (QUOTE - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (REASSIGN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (RECHECK - 192)) | (1L << (RECURSIVE - 192)) | (1L << (REF - 192)) | (1L << (REFERENCING - 192)) | (1L << (REFRESH - 192)) | (1L << (REINDEX - 192)) | (1L << (RELATIVE - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (REPLICA - 192)) | (1L << (RESET - 192)) | (1L << (RESTART - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUTINE - 192)) | (1L << (ROUTINES - 192)) | (1L << (ROWS - 192)) | (1L << (RULE - 192)) | (1L << (SAVEPOINT - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SCROLL - 192)) | (1L << (SEARCH - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEQUENCE - 192)) | (1L << (SEQUENCES - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SERVER - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHARE - 192)) | (1L << (SHOW - 192)) | (1L << (SIMPLE - 192)) | (1L << (SKIP_ - 192)) | (1L << (SNAPSHOT - 192)) | (1L << (SQL - 192)) | (1L << (STABLE - 192)) | (1L << (STANDALONE - 192)) | (1L << (START - 192)) | (1L << (STATEMENT - 192)) | (1L << (STATISTICS - 192)) | (1L << (STDIN - 192)) | (1L << (STDOUT - 192)) | (1L << (STORAGE - 192)) | (1L << (STORED - 192)) | (1L << (STRICT - 192)) | (1L << (STRIP - 192)) | (1L << (SUBSCRIPTION - 192)) | (1L << (SUPPORT - 192)) | (1L << (SYSID - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESPACE - 192)) | (1L << (TEMP - 192)) | (1L << (TEMPLATE - 192)) | (1L << (TEMPORARY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TEXT - 256)) | (1L << (TIES - 256)) | (1L << (TRANSACTION - 256)) | (1L << (TRANSFORM - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TRUSTED - 256)) | (1L << (TYPE - 256)) | (1L << (TYPES - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNENCRYPTED - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNLISTEN - 256)) | (1L << (UNLOGGED - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (VACUUM - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALIDATOR - 256)) | (1L << (VALUE - 256)) | (1L << (VARYING - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (VIEWS - 256)) | (1L << (VOLATILE - 256)) | (1L << (WHITESPACE - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (XML - 256)) | (1L << (YEAR - 256)) | (1L << (YES - 256)) | (1L << (ZONE - 256)) | (1L << (BETWEEN - 256)) | (1L << (BIGINT - 256)) | (1L << (BIT - 256)) | (1L << (BOOLEAN - 256)) | (1L << (CHAR - 256)) | (1L << (CHARACTER - 256)) | (1L << (COALESCE - 256)) | (1L << (DEC - 256)) | (1L << (DECIMAL - 256)) | (1L << (EXISTS - 256)) | (1L << (EXTRACT - 256)) | (1L << (FLOAT - 256)) | (1L << (GREATEST - 256)) | (1L << (GROUPING - 256)) | (1L << (INOUT - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERVAL - 256)) | (1L << (LEAST - 256)) | (1L << (NATIONAL - 256)) | (1L << (NCHAR - 256)) | (1L << (NONE - 256)) | (1L << (NULLIF - 256)) | (1L << (NUMERIC - 256)) | (1L << (OUT - 256)) | (1L << (OVERLAY - 256)) | (1L << (POSITION - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRECISION - 320)) | (1L << (REAL - 320)) | (1L << (ROW - 320)) | (1L << (SETOF - 320)) | (1L << (SMALLINT - 320)) | (1L << (SUBSTRING - 320)) | (1L << (TIME - 320)) | (1L << (TIMESTAMP - 320)) | (1L << (TREAT - 320)) | (1L << (TRIM - 320)) | (1L << (VALUES - 320)) | (1L << (VARCHAR - 320)) | (1L << (XMLATTRIBUTES - 320)) | (1L << (XMLCONCAT - 320)) | (1L << (XMLELEMENT - 320)) | (1L << (XMLEXISTS - 320)) | (1L << (XMLFOREST - 320)) | (1L << (XMLNAMESPACES - 320)) | (1L << (XMLPARSE - 320)) | (1L << (XMLPI - 320)) | (1L << (XMLROOT - 320)) | (1L << (XMLSERIALIZE - 320)) | (1L << (XMLTABLE - 320)))) != 0) || ((((_la - 443)) & ~0x3f) == 0 && ((1L << (_la - 443)) & ((1L << (ALIGNMENT - 443)) | (1L << (BASETYPE - 443)) | (1L << (BUFFERS - 443)) | (1L << (BYPASSRLS - 443)) | (1L << (CANONICAL - 443)) | (1L << (CATEGORY - 443)) | (1L << (COLLATABLE - 443)) | (1L << (COMBINEFUNC - 443)) | (1L << (COMMUTATOR - 443)) | (1L << (CONNECT - 443)) | (1L << (COSTS - 443)) | (1L << (CREATEDB - 443)) | (1L << (CREATEROLE - 443)) | (1L << (DESERIALFUNC - 443)) | (1L << (DETERMINISTIC - 443)) | (1L << (DISABLE_PAGE_SKIPPING - 443)) | (1L << (ELEMENT - 443)) | (1L << (EXTENDED - 443)) | (1L << (FINALFUNC - 443)) | (1L << (FINALFUNC_EXTRA - 443)) | (1L << (FINALFUNC_MODIFY - 443)) | (1L << (FORCE_NOT_NULL - 443)) | (1L << (FORCE_NULL - 443)) | (1L << (FORCE_QUOTE - 443)) | (1L << (FORMAT - 443)) | (1L << (GETTOKEN - 443)) | (1L << (HASH - 443)) | (1L << (HASHES - 443)) | (1L << (HEADLINE - 443)) | (1L << (HYPOTHETICAL - 443)) | (1L << (INDEX_CLEANUP - 443)) | (1L << (INIT - 443)) | (1L << (INITCOND - 443)) | (1L << (INTERNALLENGTH - 443)) | (1L << (JSON - 443)) | (1L << (LC_COLLATE - 443)) | (1L << (LC_CTYPE - 443)) | (1L << (LEFTARG - 443)) | (1L << (LEXIZE - 443)) | (1L << (LEXTYPES - 443)) | (1L << (LIST - 443)) | (1L << (LOCALE - 443)) | (1L << (LOGIN - 443)) | (1L << (MAIN - 443)) | (1L << (MERGES - 443)) | (1L << (MFINALFUNC - 443)) | (1L << (MFINALFUNC_EXTRA - 443)) | (1L << (MFINALFUNC_MODIFY - 443)) | (1L << (MINITCOND - 443)) | (1L << (MINVFUNC - 443)) | (1L << (MODULUS - 443)) | (1L << (MSFUNC - 443)) | (1L << (MSSPACE - 443)) | (1L << (MSTYPE - 443)) | (1L << (NEGATOR - 443)) | (1L << (NOBYPASSRLS - 443)) | (1L << (NOCREATEDB - 443)) | (1L << (NOCREATEROLE - 443)) | (1L << (NOINHERIT - 443)) | (1L << (NOLOGIN - 443)) | (1L << (NOREPLICATION - 443)) | (1L << (NOSUPERUSER - 443)) | (1L << (OUTPUT - 443)) | (1L << (PASSEDBYVALUE - 443)))) != 0) || ((((_la - 507)) & ~0x3f) == 0 && ((1L << (_la - 507)) & ((1L << (PATH - 507)) | (1L << (PERMISSIVE - 507)) | (1L << (PLAIN - 507)) | (1L << (PREFERRED - 507)) | (1L << (PROVIDER - 507)) | (1L << (READ_ONLY - 507)) | (1L << (READ_WRITE - 507)) | (1L << (RECEIVE - 507)) | (1L << (REMAINDER - 507)) | (1L << (REPLICATION - 507)) | (1L << (RESTRICTED - 507)) | (1L << (RESTRICTIVE - 507)) | (1L << (RIGHTARG - 507)) | (1L << (SAFE - 507)) | (1L << (SEND - 507)) | (1L << (SERIALFUNC - 507)) | (1L << (SETTINGS - 507)) | (1L << (SFUNC - 507)) | (1L << (SHAREABLE - 507)) | (1L << (SKIP_LOCKED - 507)) | (1L << (SORTOP - 507)) | (1L << (SSPACE - 507)) | (1L << (STYPE - 507)) | (1L << (SUBTYPE_DIFF - 507)) | (1L << (SUBTYPE_OPCLASS - 507)) | (1L << (SUBTYPE - 507)) | (1L << (SUMMARY - 507)) | (1L << (SUPERUSER - 507)) | (1L << (TIMING - 507)) | (1L << (TYPMOD_IN - 507)) | (1L << (TYPMOD_OUT - 507)) | (1L << (UNSAFE - 507)) | (1L << (USAGE - 507)) | (1L << (VARIABLE - 507)) | (1L << (YAML - 507)) | (1L << (ALIAS - 507)) | (1L << (ASSERT - 507)) | (1L << (CONSTANT - 507)) | (1L << (DATATYPE - 507)) | (1L << (DEBUG - 507)) | (1L << (DETAIL - 507)) | (1L << (DIAGNOSTICS - 507)) | (1L << (ELSEIF - 507)) | (1L << (ELSIF - 507)) | (1L << (ERRCODE - 507)) | (1L << (EXIT - 507)) | (1L << (EXCEPTION - 507)) | (1L << (FOREACH - 507)) | (1L << (GET - 507)) | (1L << (HINT - 507)) | (1L << (INFO - 507)) | (1L << (LOG - 507)) | (1L << (LOOP - 507)) | (1L << (MESSAGE - 507)) | (1L << (NOTICE - 507)) | (1L << (OPEN - 507)) | (1L << (PERFORM - 507)) | (1L << (QUERY - 507)) | (1L << (RAISE - 507)) | (1L << (RECORD - 507)) | (1L << (RETURN - 507)) | (1L << (REVERSE - 507)) | (1L << (ROWTYPE - 507)) | (1L << (SLICE - 507)))) != 0) || ((((_la - 571)) & ~0x3f) == 0 && ((1L << (_la - 571)) & ((1L << (SQLSTATE - 571)) | (1L << (STACKED - 571)) | (1L << (WARNING - 571)) | (1L << (WHILE - 571)) | (1L << (Identifier - 571)) | (1L << (QuotedIdentifier - 571)))) != 0)) {
				{
				setState(3228);
				((Operator_nameContext)_localctx).schema_name = identifier();
				setState(3229);
				match(DOT);
				}
			}

			setState(3233);
			((Operator_nameContext)_localctx).operator = all_simple_op();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Operator_optionContext extends ParserRuleContext {
		public Schema_qualified_nameContext func_name;
		public Schema_qualified_nameContext restr_name;
		public Schema_qualified_nameContext join_name;
		public Data_typeContext type;
		public All_op_refContext addition_oper_name;
		public TerminalNode EQUAL() { return getToken(PLpgSQLParser.EQUAL, 0); }
		public TerminalNode FUNCTION() { return getToken(PLpgSQLParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(PLpgSQLParser.PROCEDURE, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public TerminalNode RESTRICT() { return getToken(PLpgSQLParser.RESTRICT, 0); }
		public TerminalNode JOIN() { return getToken(PLpgSQLParser.JOIN, 0); }
		public TerminalNode LEFTARG() { return getToken(PLpgSQLParser.LEFTARG, 0); }
		public TerminalNode RIGHTARG() { return getToken(PLpgSQLParser.RIGHTARG, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode COMMUTATOR() { return getToken(PLpgSQLParser.COMMUTATOR, 0); }
		public TerminalNode NEGATOR() { return getToken(PLpgSQLParser.NEGATOR, 0); }
		public All_op_refContext all_op_ref() {
			return getRuleContext(All_op_refContext.class,0);
		}
		public TerminalNode HASHES() { return getToken(PLpgSQLParser.HASHES, 0); }
		public TerminalNode MERGES() { return getToken(PLpgSQLParser.MERGES, 0); }
		public Operator_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operator_option; }
	}

	public final Operator_optionContext operator_option() throws RecognitionException {
		Operator_optionContext _localctx = new Operator_optionContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_operator_option);
		int _la;
		try {
			setState(3252);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FUNCTION:
			case PROCEDURE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3235);
				_la = _input.LA(1);
				if ( !(_la==FUNCTION || _la==PROCEDURE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3236);
				match(EQUAL);
				setState(3237);
				((Operator_optionContext)_localctx).func_name = schema_qualified_name();
				}
				break;
			case RESTRICT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3238);
				match(RESTRICT);
				setState(3239);
				match(EQUAL);
				setState(3240);
				((Operator_optionContext)_localctx).restr_name = schema_qualified_name();
				}
				break;
			case JOIN:
				enterOuterAlt(_localctx, 3);
				{
				setState(3241);
				match(JOIN);
				setState(3242);
				match(EQUAL);
				setState(3243);
				((Operator_optionContext)_localctx).join_name = schema_qualified_name();
				}
				break;
			case LEFTARG:
			case RIGHTARG:
				enterOuterAlt(_localctx, 4);
				{
				setState(3244);
				_la = _input.LA(1);
				if ( !(_la==LEFTARG || _la==RIGHTARG) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3245);
				match(EQUAL);
				setState(3246);
				((Operator_optionContext)_localctx).type = data_type();
				}
				break;
			case COMMUTATOR:
			case NEGATOR:
				enterOuterAlt(_localctx, 5);
				{
				setState(3247);
				_la = _input.LA(1);
				if ( !(_la==COMMUTATOR || _la==NEGATOR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3248);
				match(EQUAL);
				setState(3249);
				((Operator_optionContext)_localctx).addition_oper_name = all_op_ref();
				}
				break;
			case HASHES:
				enterOuterAlt(_localctx, 6);
				{
				setState(3250);
				match(HASHES);
				}
				break;
			case MERGES:
				enterOuterAlt(_localctx, 7);
				{
				setState(3251);
				match(MERGES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_aggregate_statementContext extends ParserRuleContext {
		public Schema_qualified_nameContext name;
		public Data_typeContext base_type;
		public Schema_qualified_nameContext sfunc_name;
		public Data_typeContext type;
		public TerminalNode AGGREGATE() { return getToken(PLpgSQLParser.AGGREGATE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public TerminalNode SFUNC() { return getToken(PLpgSQLParser.SFUNC, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(PLpgSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(PLpgSQLParser.EQUAL, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public TerminalNode STYPE() { return getToken(PLpgSQLParser.STYPE, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public List<Schema_qualified_nameContext> schema_qualified_name() {
			return getRuleContexts(Schema_qualified_nameContext.class);
		}
		public Schema_qualified_nameContext schema_qualified_name(int i) {
			return getRuleContext(Schema_qualified_nameContext.class,i);
		}
		public List<Data_typeContext> data_type() {
			return getRuleContexts(Data_typeContext.class);
		}
		public Data_typeContext data_type(int i) {
			return getRuleContext(Data_typeContext.class,i);
		}
		public TerminalNode OR() { return getToken(PLpgSQLParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PLpgSQLParser.REPLACE, 0); }
		public Function_argsContext function_args() {
			return getRuleContext(Function_argsContext.class,0);
		}
		public TerminalNode BASETYPE() { return getToken(PLpgSQLParser.BASETYPE, 0); }
		public List<Aggregate_paramContext> aggregate_param() {
			return getRuleContexts(Aggregate_paramContext.class);
		}
		public Aggregate_paramContext aggregate_param(int i) {
			return getRuleContext(Aggregate_paramContext.class,i);
		}
		public Create_aggregate_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_aggregate_statement; }
	}

	public final Create_aggregate_statementContext create_aggregate_statement() throws RecognitionException {
		Create_aggregate_statementContext _localctx = new Create_aggregate_statementContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_create_aggregate_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3256);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(3254);
				match(OR);
				setState(3255);
				match(REPLACE);
				}
			}

			setState(3258);
			match(AGGREGATE);
			setState(3259);
			((Create_aggregate_statementContext)_localctx).name = schema_qualified_name();
			setState(3261);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,355,_ctx) ) {
			case 1:
				{
				setState(3260);
				function_args();
				}
				break;
			}
			setState(3263);
			match(LEFT_PAREN);
			setState(3269);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BASETYPE) {
				{
				setState(3264);
				match(BASETYPE);
				setState(3265);
				match(EQUAL);
				setState(3266);
				((Create_aggregate_statementContext)_localctx).base_type = data_type();
				setState(3267);
				match(COMMA);
				}
			}

			setState(3271);
			match(SFUNC);
			setState(3272);
			match(EQUAL);
			setState(3273);
			((Create_aggregate_statementContext)_localctx).sfunc_name = schema_qualified_name();
			setState(3274);
			match(COMMA);
			setState(3275);
			match(STYPE);
			setState(3276);
			match(EQUAL);
			setState(3277);
			((Create_aggregate_statementContext)_localctx).type = data_type();
			setState(3282);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3278);
				match(COMMA);
				setState(3279);
				aggregate_param();
				}
				}
				setState(3284);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3285);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggregate_paramContext extends ParserRuleContext {
		public Token s_space;
		public Schema_qualified_nameContext final_func;
		public Schema_qualified_nameContext combine_func;
		public Schema_qualified_nameContext serial_func;
		public Schema_qualified_nameContext deserial_func;
		public VexContext init_cond;
		public Schema_qualified_nameContext ms_func;
		public Schema_qualified_nameContext minv_func;
		public Data_typeContext ms_type;
		public Token ms_space;
		public Schema_qualified_nameContext mfinal_func;
		public VexContext minit_cond;
		public TerminalNode SSPACE() { return getToken(PLpgSQLParser.SSPACE, 0); }
		public TerminalNode EQUAL() { return getToken(PLpgSQLParser.EQUAL, 0); }
		public TerminalNode NUMBER_LITERAL() { return getToken(PLpgSQLParser.NUMBER_LITERAL, 0); }
		public TerminalNode FINALFUNC() { return getToken(PLpgSQLParser.FINALFUNC, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public TerminalNode FINALFUNC_EXTRA() { return getToken(PLpgSQLParser.FINALFUNC_EXTRA, 0); }
		public TerminalNode FINALFUNC_MODIFY() { return getToken(PLpgSQLParser.FINALFUNC_MODIFY, 0); }
		public TerminalNode READ_ONLY() { return getToken(PLpgSQLParser.READ_ONLY, 0); }
		public TerminalNode SHAREABLE() { return getToken(PLpgSQLParser.SHAREABLE, 0); }
		public TerminalNode READ_WRITE() { return getToken(PLpgSQLParser.READ_WRITE, 0); }
		public TerminalNode COMBINEFUNC() { return getToken(PLpgSQLParser.COMBINEFUNC, 0); }
		public TerminalNode SERIALFUNC() { return getToken(PLpgSQLParser.SERIALFUNC, 0); }
		public TerminalNode DESERIALFUNC() { return getToken(PLpgSQLParser.DESERIALFUNC, 0); }
		public TerminalNode INITCOND() { return getToken(PLpgSQLParser.INITCOND, 0); }
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public TerminalNode MSFUNC() { return getToken(PLpgSQLParser.MSFUNC, 0); }
		public TerminalNode MINVFUNC() { return getToken(PLpgSQLParser.MINVFUNC, 0); }
		public TerminalNode MSTYPE() { return getToken(PLpgSQLParser.MSTYPE, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode MSSPACE() { return getToken(PLpgSQLParser.MSSPACE, 0); }
		public TerminalNode MFINALFUNC() { return getToken(PLpgSQLParser.MFINALFUNC, 0); }
		public TerminalNode MFINALFUNC_EXTRA() { return getToken(PLpgSQLParser.MFINALFUNC_EXTRA, 0); }
		public TerminalNode MFINALFUNC_MODIFY() { return getToken(PLpgSQLParser.MFINALFUNC_MODIFY, 0); }
		public TerminalNode MINITCOND() { return getToken(PLpgSQLParser.MINITCOND, 0); }
		public TerminalNode SORTOP() { return getToken(PLpgSQLParser.SORTOP, 0); }
		public All_op_refContext all_op_ref() {
			return getRuleContext(All_op_refContext.class,0);
		}
		public TerminalNode PARALLEL() { return getToken(PLpgSQLParser.PARALLEL, 0); }
		public TerminalNode SAFE() { return getToken(PLpgSQLParser.SAFE, 0); }
		public TerminalNode RESTRICTED() { return getToken(PLpgSQLParser.RESTRICTED, 0); }
		public TerminalNode UNSAFE() { return getToken(PLpgSQLParser.UNSAFE, 0); }
		public TerminalNode HYPOTHETICAL() { return getToken(PLpgSQLParser.HYPOTHETICAL, 0); }
		public Aggregate_paramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_param; }
	}

	public final Aggregate_paramContext aggregate_param() throws RecognitionException {
		Aggregate_paramContext _localctx = new Aggregate_paramContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_aggregate_param);
		int _la;
		try {
			setState(3338);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SSPACE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3287);
				match(SSPACE);
				setState(3288);
				match(EQUAL);
				setState(3289);
				((Aggregate_paramContext)_localctx).s_space = match(NUMBER_LITERAL);
				}
				break;
			case FINALFUNC:
				enterOuterAlt(_localctx, 2);
				{
				setState(3290);
				match(FINALFUNC);
				setState(3291);
				match(EQUAL);
				setState(3292);
				((Aggregate_paramContext)_localctx).final_func = schema_qualified_name();
				}
				break;
			case FINALFUNC_EXTRA:
				enterOuterAlt(_localctx, 3);
				{
				setState(3293);
				match(FINALFUNC_EXTRA);
				}
				break;
			case FINALFUNC_MODIFY:
				enterOuterAlt(_localctx, 4);
				{
				setState(3294);
				match(FINALFUNC_MODIFY);
				setState(3295);
				match(EQUAL);
				setState(3296);
				_la = _input.LA(1);
				if ( !(((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (READ_ONLY - 512)) | (1L << (READ_WRITE - 512)) | (1L << (SHAREABLE - 512)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case COMBINEFUNC:
				enterOuterAlt(_localctx, 5);
				{
				setState(3297);
				match(COMBINEFUNC);
				setState(3298);
				match(EQUAL);
				setState(3299);
				((Aggregate_paramContext)_localctx).combine_func = schema_qualified_name();
				}
				break;
			case SERIALFUNC:
				enterOuterAlt(_localctx, 6);
				{
				setState(3300);
				match(SERIALFUNC);
				setState(3301);
				match(EQUAL);
				setState(3302);
				((Aggregate_paramContext)_localctx).serial_func = schema_qualified_name();
				}
				break;
			case DESERIALFUNC:
				enterOuterAlt(_localctx, 7);
				{
				setState(3303);
				match(DESERIALFUNC);
				setState(3304);
				match(EQUAL);
				setState(3305);
				((Aggregate_paramContext)_localctx).deserial_func = schema_qualified_name();
				}
				break;
			case INITCOND:
				enterOuterAlt(_localctx, 8);
				{
				setState(3306);
				match(INITCOND);
				setState(3307);
				match(EQUAL);
				setState(3308);
				((Aggregate_paramContext)_localctx).init_cond = vex(0);
				}
				break;
			case MSFUNC:
				enterOuterAlt(_localctx, 9);
				{
				setState(3309);
				match(MSFUNC);
				setState(3310);
				match(EQUAL);
				setState(3311);
				((Aggregate_paramContext)_localctx).ms_func = schema_qualified_name();
				}
				break;
			case MINVFUNC:
				enterOuterAlt(_localctx, 10);
				{
				setState(3312);
				match(MINVFUNC);
				setState(3313);
				match(EQUAL);
				setState(3314);
				((Aggregate_paramContext)_localctx).minv_func = schema_qualified_name();
				}
				break;
			case MSTYPE:
				enterOuterAlt(_localctx, 11);
				{
				setState(3315);
				match(MSTYPE);
				setState(3316);
				match(EQUAL);
				setState(3317);
				((Aggregate_paramContext)_localctx).ms_type = data_type();
				}
				break;
			case MSSPACE:
				enterOuterAlt(_localctx, 12);
				{
				setState(3318);
				match(MSSPACE);
				setState(3319);
				match(EQUAL);
				setState(3320);
				((Aggregate_paramContext)_localctx).ms_space = match(NUMBER_LITERAL);
				}
				break;
			case MFINALFUNC:
				enterOuterAlt(_localctx, 13);
				{
				setState(3321);
				match(MFINALFUNC);
				setState(3322);
				match(EQUAL);
				setState(3323);
				((Aggregate_paramContext)_localctx).mfinal_func = schema_qualified_name();
				}
				break;
			case MFINALFUNC_EXTRA:
				enterOuterAlt(_localctx, 14);
				{
				setState(3324);
				match(MFINALFUNC_EXTRA);
				}
				break;
			case MFINALFUNC_MODIFY:
				enterOuterAlt(_localctx, 15);
				{
				setState(3325);
				match(MFINALFUNC_MODIFY);
				setState(3326);
				match(EQUAL);
				setState(3327);
				_la = _input.LA(1);
				if ( !(((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (READ_ONLY - 512)) | (1L << (READ_WRITE - 512)) | (1L << (SHAREABLE - 512)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case MINITCOND:
				enterOuterAlt(_localctx, 16);
				{
				setState(3328);
				match(MINITCOND);
				setState(3329);
				match(EQUAL);
				setState(3330);
				((Aggregate_paramContext)_localctx).minit_cond = vex(0);
				}
				break;
			case SORTOP:
				enterOuterAlt(_localctx, 17);
				{
				setState(3331);
				match(SORTOP);
				setState(3332);
				match(EQUAL);
				setState(3333);
				all_op_ref();
				}
				break;
			case PARALLEL:
				enterOuterAlt(_localctx, 18);
				{
				setState(3334);
				match(PARALLEL);
				setState(3335);
				match(EQUAL);
				setState(3336);
				_la = _input.LA(1);
				if ( !(((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (RESTRICTED - 517)) | (1L << (SAFE - 517)) | (1L << (UNSAFE - 517)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case HYPOTHETICAL:
				enterOuterAlt(_localctx, 19);
				{
				setState(3337);
				match(HYPOTHETICAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_statementContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PLpgSQLParser.SET, 0); }
		public Set_actionContext set_action() {
			return getRuleContext(Set_actionContext.class,0);
		}
		public Set_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_statement; }
	}

	public final Set_statementContext set_statement() throws RecognitionException {
		Set_statementContext _localctx = new Set_statementContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_set_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3340);
			match(SET);
			setState(3341);
			set_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_actionContext extends ParserRuleContext {
		public TerminalNode CONSTRAINTS() { return getToken(PLpgSQLParser.CONSTRAINTS, 0); }
		public TerminalNode DEFERRED() { return getToken(PLpgSQLParser.DEFERRED, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PLpgSQLParser.IMMEDIATE, 0); }
		public TerminalNode ALL() { return getToken(PLpgSQLParser.ALL, 0); }
		public Names_referencesContext names_references() {
			return getRuleContext(Names_referencesContext.class,0);
		}
		public TerminalNode TRANSACTION() { return getToken(PLpgSQLParser.TRANSACTION, 0); }
		public List<Transaction_modeContext> transaction_mode() {
			return getRuleContexts(Transaction_modeContext.class);
		}
		public Transaction_modeContext transaction_mode(int i) {
			return getRuleContext(Transaction_modeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public TerminalNode SNAPSHOT() { return getToken(PLpgSQLParser.SNAPSHOT, 0); }
		public TerminalNode Character_String_Literal() { return getToken(PLpgSQLParser.Character_String_Literal, 0); }
		public TerminalNode SESSION() { return getToken(PLpgSQLParser.SESSION, 0); }
		public TerminalNode CHARACTERISTICS() { return getToken(PLpgSQLParser.CHARACTERISTICS, 0); }
		public TerminalNode AS() { return getToken(PLpgSQLParser.AS, 0); }
		public Session_local_optionContext session_local_option() {
			return getRuleContext(Session_local_optionContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(PLpgSQLParser.LOCAL, 0); }
		public TerminalNode XML() { return getToken(PLpgSQLParser.XML, 0); }
		public TerminalNode OPTION() { return getToken(PLpgSQLParser.OPTION, 0); }
		public TerminalNode DOCUMENT() { return getToken(PLpgSQLParser.DOCUMENT, 0); }
		public TerminalNode CONTENT() { return getToken(PLpgSQLParser.CONTENT, 0); }
		public Set_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_action; }
	}

	public final Set_actionContext set_action() throws RecognitionException {
		Set_actionContext _localctx = new Set_actionContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_set_action);
		int _la;
		try {
			setState(3380);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,363,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3343);
				match(CONSTRAINTS);
				setState(3346);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALL:
					{
					setState(3344);
					match(ALL);
					}
					break;
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BY:
				case CACHE:
				case CALL:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COLUMNS:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONFLICT:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CUBE:
				case CURRENT:
				case CURSOR:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DEPENDS:
				case DETACH:
				case DICTIONARY:
				case DISABLE:
				case DISCARD:
				case DOCUMENT:
				case DOMAIN:
				case DOUBLE:
				case DROP:
				case EACH:
				case ENABLE:
				case ENCODING:
				case ENCRYPTED:
				case ENUM:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GENERATED:
				case GLOBAL:
				case GRANTED:
				case GROUPS:
				case HANDLER:
				case HEADER:
				case HOLD:
				case HOUR:
				case IDENTITY:
				case IF:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT:
				case IMPORT:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCKED:
				case LOGGED:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case METHOD:
				case MINUTE:
				case MINVALUE:
				case MODE:
				case MONTH:
				case MOVE:
				case NAME:
				case NAMES:
				case NEW:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS:
				case OBJECT:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDINALITY:
				case OTHERS:
				case OVER:
				case OVERRIDING:
				case OWNED:
				case OWNER:
				case PARALLEL:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case POLICY:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROCEDURES:
				case PROGRAM:
				case PUBLICATION:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINES:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMAS:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SKIP_:
				case SNAPSHOT:
				case SQL:
				case STABLE:
				case STANDALONE:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STORED:
				case STRICT:
				case STRIP:
				case SUBSCRIPTION:
				case SUPPORT:
				case SYSID:
				case SYSTEM:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT:
				case TIES:
				case TRANSACTION:
				case TRANSFORM:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case TYPES:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VALUE:
				case VARYING:
				case VERSION:
				case VIEW:
				case VIEWS:
				case VOLATILE:
				case WHITESPACE:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML:
				case YEAR:
				case YES:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN:
				case CHAR:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL:
				case EXISTS:
				case EXTRACT:
				case FLOAT:
				case GREATEST:
				case GROUPING:
				case INOUT:
				case INT:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OUT:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case ALIGNMENT:
				case BASETYPE:
				case BUFFERS:
				case BYPASSRLS:
				case CANONICAL:
				case CATEGORY:
				case COLLATABLE:
				case COMBINEFUNC:
				case COMMUTATOR:
				case CONNECT:
				case COSTS:
				case CREATEDB:
				case CREATEROLE:
				case DESERIALFUNC:
				case DETERMINISTIC:
				case DISABLE_PAGE_SKIPPING:
				case ELEMENT:
				case EXTENDED:
				case FINALFUNC:
				case FINALFUNC_EXTRA:
				case FINALFUNC_MODIFY:
				case FORCE_NOT_NULL:
				case FORCE_NULL:
				case FORCE_QUOTE:
				case FORMAT:
				case GETTOKEN:
				case HASH:
				case HASHES:
				case HEADLINE:
				case HYPOTHETICAL:
				case INDEX_CLEANUP:
				case INIT:
				case INITCOND:
				case INTERNALLENGTH:
				case JSON:
				case LC_COLLATE:
				case LC_CTYPE:
				case LEFTARG:
				case LEXIZE:
				case LEXTYPES:
				case LIST:
				case LOCALE:
				case LOGIN:
				case MAIN:
				case MERGES:
				case MFINALFUNC:
				case MFINALFUNC_EXTRA:
				case MFINALFUNC_MODIFY:
				case MINITCOND:
				case MINVFUNC:
				case MODULUS:
				case MSFUNC:
				case MSSPACE:
				case MSTYPE:
				case NEGATOR:
				case NOBYPASSRLS:
				case NOCREATEDB:
				case NOCREATEROLE:
				case NOINHERIT:
				case NOLOGIN:
				case NOREPLICATION:
				case NOSUPERUSER:
				case OUTPUT:
				case PASSEDBYVALUE:
				case PATH:
				case PERMISSIVE:
				case PLAIN:
				case PREFERRED:
				case PROVIDER:
				case READ_ONLY:
				case READ_WRITE:
				case RECEIVE:
				case REMAINDER:
				case REPLICATION:
				case RESTRICTED:
				case RESTRICTIVE:
				case RIGHTARG:
				case SAFE:
				case SEND:
				case SERIALFUNC:
				case SETTINGS:
				case SFUNC:
				case SHAREABLE:
				case SKIP_LOCKED:
				case SORTOP:
				case SSPACE:
				case STYPE:
				case SUBTYPE_DIFF:
				case SUBTYPE_OPCLASS:
				case SUBTYPE:
				case SUMMARY:
				case SUPERUSER:
				case TIMING:
				case TYPMOD_IN:
				case TYPMOD_OUT:
				case UNSAFE:
				case USAGE:
				case VARIABLE:
				case YAML:
				case ALIAS:
				case ASSERT:
				case CONSTANT:
				case DATATYPE:
				case DEBUG:
				case DETAIL:
				case DIAGNOSTICS:
				case ELSEIF:
				case ELSIF:
				case ERRCODE:
				case EXIT:
				case EXCEPTION:
				case FOREACH:
				case GET:
				case HINT:
				case INFO:
				case LOG:
				case LOOP:
				case MESSAGE:
				case NOTICE:
				case OPEN:
				case PERFORM:
				case QUERY:
				case RAISE:
				case RECORD:
				case RETURN:
				case REVERSE:
				case ROWTYPE:
				case SLICE:
				case SQLSTATE:
				case STACKED:
				case WARNING:
				case WHILE:
				case Identifier:
				case QuotedIdentifier:
					{
					setState(3345);
					names_references();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3348);
				_la = _input.LA(1);
				if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3349);
				match(TRANSACTION);
				setState(3350);
				transaction_mode();
				setState(3355);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3351);
					match(COMMA);
					setState(3352);
					transaction_mode();
					}
					}
					setState(3357);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3358);
				match(TRANSACTION);
				setState(3359);
				match(SNAPSHOT);
				setState(3360);
				match(Character_String_Literal);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3361);
				match(SESSION);
				setState(3362);
				match(CHARACTERISTICS);
				setState(3363);
				match(AS);
				setState(3364);
				match(TRANSACTION);
				setState(3365);
				transaction_mode();
				setState(3370);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3366);
					match(COMMA);
					setState(3367);
					transaction_mode();
					}
					}
					setState(3372);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3374);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,362,_ctx) ) {
				case 1:
					{
					setState(3373);
					_la = _input.LA(1);
					if ( !(_la==LOCAL || _la==SESSION) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(3376);
				session_local_option();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3377);
				match(XML);
				setState(3378);
				match(OPTION);
				setState(3379);
				_la = _input.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Session_local_optionContext extends ParserRuleContext {
		public IdentifierContext config_param;
		public TerminalNode SESSION() { return getToken(PLpgSQLParser.SESSION, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(PLpgSQLParser.AUTHORIZATION, 0); }
		public TerminalNode Character_String_Literal() { return getToken(PLpgSQLParser.Character_String_Literal, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode DEFAULT() { return getToken(PLpgSQLParser.DEFAULT, 0); }
		public TerminalNode TIME() { return getToken(PLpgSQLParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PLpgSQLParser.ZONE, 0); }
		public Signed_numerical_literalContext signed_numerical_literal() {
			return getRuleContext(Signed_numerical_literalContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(PLpgSQLParser.LOCAL, 0); }
		public Set_statement_valueContext set_statement_value() {
			return getRuleContext(Set_statement_valueContext.class,0);
		}
		public TerminalNode TO() { return getToken(PLpgSQLParser.TO, 0); }
		public TerminalNode EQUAL() { return getToken(PLpgSQLParser.EQUAL, 0); }
		public TerminalNode DOT() { return getToken(PLpgSQLParser.DOT, 0); }
		public TerminalNode ROLE() { return getToken(PLpgSQLParser.ROLE, 0); }
		public TerminalNode NONE() { return getToken(PLpgSQLParser.NONE, 0); }
		public Session_local_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_session_local_option; }
	}

	public final Session_local_optionContext session_local_option() throws RecognitionException {
		Session_local_optionContext _localctx = new Session_local_optionContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_session_local_option);
		int _la;
		try {
			setState(3411);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,368,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3382);
				match(SESSION);
				setState(3383);
				match(AUTHORIZATION);
				setState(3387);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case Character_String_Literal:
					{
					setState(3384);
					match(Character_String_Literal);
					}
					break;
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BY:
				case CACHE:
				case CALL:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COLUMNS:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONFLICT:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CUBE:
				case CURRENT:
				case CURSOR:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DEPENDS:
				case DETACH:
				case DICTIONARY:
				case DISABLE:
				case DISCARD:
				case DOCUMENT:
				case DOMAIN:
				case DOUBLE:
				case DROP:
				case EACH:
				case ENABLE:
				case ENCODING:
				case ENCRYPTED:
				case ENUM:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GENERATED:
				case GLOBAL:
				case GRANTED:
				case GROUPS:
				case HANDLER:
				case HEADER:
				case HOLD:
				case HOUR:
				case IDENTITY:
				case IF:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT:
				case IMPORT:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCKED:
				case LOGGED:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case METHOD:
				case MINUTE:
				case MINVALUE:
				case MODE:
				case MONTH:
				case MOVE:
				case NAME:
				case NAMES:
				case NEW:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS:
				case OBJECT:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDINALITY:
				case OTHERS:
				case OVER:
				case OVERRIDING:
				case OWNED:
				case OWNER:
				case PARALLEL:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case POLICY:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROCEDURES:
				case PROGRAM:
				case PUBLICATION:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINES:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMAS:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SKIP_:
				case SNAPSHOT:
				case SQL:
				case STABLE:
				case STANDALONE:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STORED:
				case STRICT:
				case STRIP:
				case SUBSCRIPTION:
				case SUPPORT:
				case SYSID:
				case SYSTEM:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT:
				case TIES:
				case TRANSACTION:
				case TRANSFORM:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case TYPES:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VALUE:
				case VARYING:
				case VERSION:
				case VIEW:
				case VIEWS:
				case VOLATILE:
				case WHITESPACE:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML:
				case YEAR:
				case YES:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN:
				case CHAR:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL:
				case EXISTS:
				case EXTRACT:
				case FLOAT:
				case GREATEST:
				case GROUPING:
				case INOUT:
				case INT:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OUT:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case ALIGNMENT:
				case BASETYPE:
				case BUFFERS:
				case BYPASSRLS:
				case CANONICAL:
				case CATEGORY:
				case COLLATABLE:
				case COMBINEFUNC:
				case COMMUTATOR:
				case CONNECT:
				case COSTS:
				case CREATEDB:
				case CREATEROLE:
				case DESERIALFUNC:
				case DETERMINISTIC:
				case DISABLE_PAGE_SKIPPING:
				case ELEMENT:
				case EXTENDED:
				case FINALFUNC:
				case FINALFUNC_EXTRA:
				case FINALFUNC_MODIFY:
				case FORCE_NOT_NULL:
				case FORCE_NULL:
				case FORCE_QUOTE:
				case FORMAT:
				case GETTOKEN:
				case HASH:
				case HASHES:
				case HEADLINE:
				case HYPOTHETICAL:
				case INDEX_CLEANUP:
				case INIT:
				case INITCOND:
				case INTERNALLENGTH:
				case JSON:
				case LC_COLLATE:
				case LC_CTYPE:
				case LEFTARG:
				case LEXIZE:
				case LEXTYPES:
				case LIST:
				case LOCALE:
				case LOGIN:
				case MAIN:
				case MERGES:
				case MFINALFUNC:
				case MFINALFUNC_EXTRA:
				case MFINALFUNC_MODIFY:
				case MINITCOND:
				case MINVFUNC:
				case MODULUS:
				case MSFUNC:
				case MSSPACE:
				case MSTYPE:
				case NEGATOR:
				case NOBYPASSRLS:
				case NOCREATEDB:
				case NOCREATEROLE:
				case NOINHERIT:
				case NOLOGIN:
				case NOREPLICATION:
				case NOSUPERUSER:
				case OUTPUT:
				case PASSEDBYVALUE:
				case PATH:
				case PERMISSIVE:
				case PLAIN:
				case PREFERRED:
				case PROVIDER:
				case READ_ONLY:
				case READ_WRITE:
				case RECEIVE:
				case REMAINDER:
				case REPLICATION:
				case RESTRICTED:
				case RESTRICTIVE:
				case RIGHTARG:
				case SAFE:
				case SEND:
				case SERIALFUNC:
				case SETTINGS:
				case SFUNC:
				case SHAREABLE:
				case SKIP_LOCKED:
				case SORTOP:
				case SSPACE:
				case STYPE:
				case SUBTYPE_DIFF:
				case SUBTYPE_OPCLASS:
				case SUBTYPE:
				case SUMMARY:
				case SUPERUSER:
				case TIMING:
				case TYPMOD_IN:
				case TYPMOD_OUT:
				case UNSAFE:
				case USAGE:
				case VARIABLE:
				case YAML:
				case ALIAS:
				case ASSERT:
				case CONSTANT:
				case DATATYPE:
				case DEBUG:
				case DETAIL:
				case DIAGNOSTICS:
				case ELSEIF:
				case ELSIF:
				case ERRCODE:
				case EXIT:
				case EXCEPTION:
				case FOREACH:
				case GET:
				case HINT:
				case INFO:
				case LOG:
				case LOOP:
				case MESSAGE:
				case NOTICE:
				case OPEN:
				case PERFORM:
				case QUERY:
				case RAISE:
				case RECORD:
				case RETURN:
				case REVERSE:
				case ROWTYPE:
				case SLICE:
				case SQLSTATE:
				case STACKED:
				case WARNING:
				case WHILE:
				case Identifier:
				case QuotedIdentifier:
					{
					setState(3385);
					identifier();
					}
					break;
				case DEFAULT:
					{
					setState(3386);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3389);
				match(TIME);
				setState(3390);
				match(ZONE);
				setState(3395);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case Character_String_Literal:
					{
					setState(3391);
					match(Character_String_Literal);
					}
					break;
				case PLUS:
				case MINUS:
				case NUMBER_LITERAL:
				case REAL_NUMBER:
					{
					setState(3392);
					signed_numerical_literal();
					}
					break;
				case LOCAL:
					{
					setState(3393);
					match(LOCAL);
					}
					break;
				case DEFAULT:
					{
					setState(3394);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3400);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,366,_ctx) ) {
				case 1:
					{
					setState(3397);
					identifier();
					setState(3398);
					match(DOT);
					}
					break;
				}
				setState(3402);
				((Session_local_optionContext)_localctx).config_param = identifier();
				setState(3403);
				_la = _input.LA(1);
				if ( !(_la==TO || _la==EQUAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3404);
				set_statement_value();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3406);
				match(ROLE);
				setState(3409);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,367,_ctx) ) {
				case 1:
					{
					setState(3407);
					identifier();
					}
					break;
				case 2:
					{
					setState(3408);
					match(NONE);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_statement_valueContext extends ParserRuleContext {
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public TerminalNode DEFAULT() { return getToken(PLpgSQLParser.DEFAULT, 0); }
		public Set_statement_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_statement_value; }
	}

	public final Set_statement_valueContext set_statement_value() throws RecognitionException {
		Set_statement_valueContext _localctx = new Set_statement_valueContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_set_statement_value);
		int _la;
		try {
			setState(3422);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BY:
			case CACHE:
			case CALL:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COLUMNS:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONFLICT:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CUBE:
			case CURRENT:
			case CURSOR:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DEPENDS:
			case DETACH:
			case DICTIONARY:
			case DISABLE:
			case DISCARD:
			case DOCUMENT:
			case DOMAIN:
			case DOUBLE:
			case DROP:
			case EACH:
			case ENABLE:
			case ENCODING:
			case ENCRYPTED:
			case ENUM:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GENERATED:
			case GLOBAL:
			case GRANTED:
			case GROUPS:
			case HANDLER:
			case HEADER:
			case HOLD:
			case HOUR:
			case IDENTITY:
			case IF:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT:
			case IMPORT:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCKED:
			case LOGGED:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case METHOD:
			case MINUTE:
			case MINVALUE:
			case MODE:
			case MONTH:
			case MOVE:
			case NAME:
			case NAMES:
			case NEW:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS:
			case OBJECT:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OVER:
			case OVERRIDING:
			case OWNED:
			case OWNER:
			case PARALLEL:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POLICY:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROCEDURES:
			case PROGRAM:
			case PUBLICATION:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINES:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMAS:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SKIP_:
			case SNAPSHOT:
			case SQL:
			case STABLE:
			case STANDALONE:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STORED:
			case STRICT:
			case STRIP:
			case SUBSCRIPTION:
			case SUPPORT:
			case SYSID:
			case SYSTEM:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT:
			case TIES:
			case TRANSACTION:
			case TRANSFORM:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE:
			case VARYING:
			case VERSION:
			case VIEW:
			case VIEWS:
			case VOLATILE:
			case WHITESPACE:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML:
			case YEAR:
			case YES:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL:
			case EXISTS:
			case EXTRACT:
			case FLOAT:
			case GREATEST:
			case GROUPING:
			case INOUT:
			case INT:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case TABLESAMPLE:
			case VERBOSE:
			case ALL:
			case ANY:
			case ARRAY:
			case CASE:
			case CAST:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case FALSE:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL:
			case ON:
			case SESSION_USER:
			case SOME:
			case TRUE:
			case USER:
			case ALIGNMENT:
			case BASETYPE:
			case BUFFERS:
			case BYPASSRLS:
			case CANONICAL:
			case CATEGORY:
			case COLLATABLE:
			case COMBINEFUNC:
			case COMMUTATOR:
			case CONNECT:
			case COSTS:
			case CREATEDB:
			case CREATEROLE:
			case DESERIALFUNC:
			case DETERMINISTIC:
			case DISABLE_PAGE_SKIPPING:
			case ELEMENT:
			case EXTENDED:
			case FINALFUNC:
			case FINALFUNC_EXTRA:
			case FINALFUNC_MODIFY:
			case FORCE_NOT_NULL:
			case FORCE_NULL:
			case FORCE_QUOTE:
			case FORMAT:
			case GETTOKEN:
			case HASH:
			case HASHES:
			case HEADLINE:
			case HYPOTHETICAL:
			case INDEX_CLEANUP:
			case INIT:
			case INITCOND:
			case INTERNALLENGTH:
			case JSON:
			case LC_COLLATE:
			case LC_CTYPE:
			case LEFTARG:
			case LEXIZE:
			case LEXTYPES:
			case LIST:
			case LOCALE:
			case LOGIN:
			case MAIN:
			case MERGES:
			case MFINALFUNC:
			case MFINALFUNC_EXTRA:
			case MFINALFUNC_MODIFY:
			case MINITCOND:
			case MINVFUNC:
			case MODULUS:
			case MSFUNC:
			case MSSPACE:
			case MSTYPE:
			case NEGATOR:
			case NOBYPASSRLS:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOREPLICATION:
			case NOSUPERUSER:
			case OUTPUT:
			case PASSEDBYVALUE:
			case PATH:
			case PERMISSIVE:
			case PLAIN:
			case PREFERRED:
			case PROVIDER:
			case READ_ONLY:
			case READ_WRITE:
			case RECEIVE:
			case REMAINDER:
			case REPLICATION:
			case RESTRICTED:
			case RESTRICTIVE:
			case RIGHTARG:
			case SAFE:
			case SEND:
			case SERIALFUNC:
			case SETTINGS:
			case SFUNC:
			case SHAREABLE:
			case SKIP_LOCKED:
			case SORTOP:
			case SSPACE:
			case STYPE:
			case SUBTYPE_DIFF:
			case SUBTYPE_OPCLASS:
			case SUBTYPE:
			case SUMMARY:
			case SUPERUSER:
			case TIMING:
			case TYPMOD_IN:
			case TYPMOD_OUT:
			case UNSAFE:
			case USAGE:
			case VARIABLE:
			case YAML:
			case ALIAS:
			case ASSERT:
			case CONSTANT:
			case DATATYPE:
			case DEBUG:
			case DETAIL:
			case DIAGNOSTICS:
			case ELSEIF:
			case ELSIF:
			case ERRCODE:
			case EXIT:
			case EXCEPTION:
			case FOREACH:
			case GET:
			case HINT:
			case INFO:
			case LOG:
			case LOOP:
			case MESSAGE:
			case NOTICE:
			case OPEN:
			case PERFORM:
			case QUERY:
			case RAISE:
			case RECORD:
			case RETURN:
			case REVERSE:
			case ROWTYPE:
			case SLICE:
			case SQLSTATE:
			case STACKED:
			case WARNING:
			case WHILE:
			case LEFT_PAREN:
			case PLUS:
			case MINUS:
			case MULTIPLY:
			case LESS_LESS:
			case GREATER_GREATER:
			case HASH_SIGN:
			case OP_CHARS:
			case NUMBER_LITERAL:
			case REAL_NUMBER:
			case DOLLAR_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case Character_String_Literal:
			case BeginDollarStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(3413);
				vex(0);
				setState(3418);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3414);
					match(COMMA);
					setState(3415);
					vex(0);
					}
					}
					setState(3420);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3421);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_rewrite_statementContext extends ParserRuleContext {
		public IdentifierContext name;
		public Token event;
		public Schema_qualified_nameContext table_name;
		public TerminalNode RULE() { return getToken(PLpgSQLParser.RULE, 0); }
		public TerminalNode AS() { return getToken(PLpgSQLParser.AS, 0); }
		public TerminalNode ON() { return getToken(PLpgSQLParser.ON, 0); }
		public TerminalNode TO() { return getToken(PLpgSQLParser.TO, 0); }
		public TerminalNode DO() { return getToken(PLpgSQLParser.DO, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public TerminalNode SELECT() { return getToken(PLpgSQLParser.SELECT, 0); }
		public TerminalNode INSERT() { return getToken(PLpgSQLParser.INSERT, 0); }
		public TerminalNode DELETE() { return getToken(PLpgSQLParser.DELETE, 0); }
		public TerminalNode UPDATE() { return getToken(PLpgSQLParser.UPDATE, 0); }
		public TerminalNode NOTHING() { return getToken(PLpgSQLParser.NOTHING, 0); }
		public List<Rewrite_commandContext> rewrite_command() {
			return getRuleContexts(Rewrite_commandContext.class);
		}
		public Rewrite_commandContext rewrite_command(int i) {
			return getRuleContext(Rewrite_commandContext.class,i);
		}
		public TerminalNode OR() { return getToken(PLpgSQLParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PLpgSQLParser.REPLACE, 0); }
		public TerminalNode WHERE() { return getToken(PLpgSQLParser.WHERE, 0); }
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public TerminalNode ALSO() { return getToken(PLpgSQLParser.ALSO, 0); }
		public TerminalNode INSTEAD() { return getToken(PLpgSQLParser.INSTEAD, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> SEMI_COLON() { return getTokens(PLpgSQLParser.SEMI_COLON); }
		public TerminalNode SEMI_COLON(int i) {
			return getToken(PLpgSQLParser.SEMI_COLON, i);
		}
		public Create_rewrite_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_rewrite_statement; }
	}

	public final Create_rewrite_statementContext create_rewrite_statement() throws RecognitionException {
		Create_rewrite_statementContext _localctx = new Create_rewrite_statementContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_create_rewrite_statement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3426);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(3424);
				match(OR);
				setState(3425);
				match(REPLACE);
				}
			}

			setState(3428);
			match(RULE);
			setState(3429);
			((Create_rewrite_statementContext)_localctx).name = identifier();
			setState(3430);
			match(AS);
			setState(3431);
			match(ON);
			setState(3432);
			((Create_rewrite_statementContext)_localctx).event = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE || _la==SELECT) ) {
				((Create_rewrite_statementContext)_localctx).event = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3433);
			match(TO);
			setState(3434);
			((Create_rewrite_statementContext)_localctx).table_name = schema_qualified_name();
			setState(3437);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3435);
				match(WHERE);
				setState(3436);
				vex(0);
				}
			}

			setState(3439);
			match(DO);
			setState(3441);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALSO || _la==INSTEAD) {
				{
				setState(3440);
				_la = _input.LA(1);
				if ( !(_la==ALSO || _la==INSTEAD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3460);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,376,_ctx) ) {
			case 1:
				{
				setState(3443);
				match(NOTHING);
				}
				break;
			case 2:
				{
				setState(3444);
				rewrite_command();
				}
				break;
			case 3:
				{
				{
				setState(3445);
				match(LEFT_PAREN);
				setState(3451);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,374,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3446);
						rewrite_command();
						setState(3447);
						match(SEMI_COLON);
						}
						} 
					}
					setState(3453);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,374,_ctx);
				}
				setState(3454);
				rewrite_command();
				setState(3456);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEMI_COLON) {
					{
					setState(3455);
					match(SEMI_COLON);
					}
				}

				setState(3458);
				match(RIGHT_PAREN);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rewrite_commandContext extends ParserRuleContext {
		public Select_stmtContext select_stmt() {
			return getRuleContext(Select_stmtContext.class,0);
		}
		public Insert_stmt_for_psqlContext insert_stmt_for_psql() {
			return getRuleContext(Insert_stmt_for_psqlContext.class,0);
		}
		public Update_stmt_for_psqlContext update_stmt_for_psql() {
			return getRuleContext(Update_stmt_for_psqlContext.class,0);
		}
		public Delete_stmt_for_psqlContext delete_stmt_for_psql() {
			return getRuleContext(Delete_stmt_for_psqlContext.class,0);
		}
		public Notify_stmtContext notify_stmt() {
			return getRuleContext(Notify_stmtContext.class,0);
		}
		public Rewrite_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rewrite_command; }
	}

	public final Rewrite_commandContext rewrite_command() throws RecognitionException {
		Rewrite_commandContext _localctx = new Rewrite_commandContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_rewrite_command);
		try {
			setState(3467);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,377,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3462);
				select_stmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3463);
				insert_stmt_for_psql();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3464);
				update_stmt_for_psql();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3465);
				delete_stmt_for_psql();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3466);
				notify_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_trigger_statementContext extends ParserRuleContext {
		public IdentifierContext name;
		public Token before_true;
		public Token insert_true;
		public Token delete_true;
		public Token truncate_true;
		public Token update_true;
		public Schema_qualified_nameContext table_name;
		public Schema_qualified_nameContext referenced_table_name;
		public Token for_each_true;
		public Function_callContext func_name;
		public TerminalNode TRIGGER() { return getToken(PLpgSQLParser.TRIGGER, 0); }
		public TerminalNode ON() { return getToken(PLpgSQLParser.ON, 0); }
		public TerminalNode EXECUTE() { return getToken(PLpgSQLParser.EXECUTE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<Schema_qualified_nameContext> schema_qualified_name() {
			return getRuleContexts(Schema_qualified_nameContext.class);
		}
		public Schema_qualified_nameContext schema_qualified_name(int i) {
			return getRuleContext(Schema_qualified_nameContext.class,i);
		}
		public TerminalNode FUNCTION() { return getToken(PLpgSQLParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(PLpgSQLParser.PROCEDURE, 0); }
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public TerminalNode AFTER() { return getToken(PLpgSQLParser.AFTER, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PLpgSQLParser.CONSTRAINT, 0); }
		public TerminalNode BEFORE() { return getToken(PLpgSQLParser.BEFORE, 0); }
		public TerminalNode FROM() { return getToken(PLpgSQLParser.FROM, 0); }
		public Table_deferrableContext table_deferrable() {
			return getRuleContext(Table_deferrableContext.class,0);
		}
		public Table_initialy_immedContext table_initialy_immed() {
			return getRuleContext(Table_initialy_immedContext.class,0);
		}
		public TerminalNode REFERENCING() { return getToken(PLpgSQLParser.REFERENCING, 0); }
		public List<Trigger_referencingContext> trigger_referencing() {
			return getRuleContexts(Trigger_referencingContext.class);
		}
		public Trigger_referencingContext trigger_referencing(int i) {
			return getRuleContext(Trigger_referencingContext.class,i);
		}
		public When_triggerContext when_trigger() {
			return getRuleContext(When_triggerContext.class,0);
		}
		public TerminalNode INSTEAD() { return getToken(PLpgSQLParser.INSTEAD, 0); }
		public List<TerminalNode> OF() { return getTokens(PLpgSQLParser.OF); }
		public TerminalNode OF(int i) {
			return getToken(PLpgSQLParser.OF, i);
		}
		public TerminalNode FOR() { return getToken(PLpgSQLParser.FOR, 0); }
		public TerminalNode ROW() { return getToken(PLpgSQLParser.ROW, 0); }
		public TerminalNode STATEMENT() { return getToken(PLpgSQLParser.STATEMENT, 0); }
		public List<TerminalNode> UPDATE() { return getTokens(PLpgSQLParser.UPDATE); }
		public TerminalNode UPDATE(int i) {
			return getToken(PLpgSQLParser.UPDATE, i);
		}
		public List<TerminalNode> OR() { return getTokens(PLpgSQLParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(PLpgSQLParser.OR, i);
		}
		public TerminalNode EACH() { return getToken(PLpgSQLParser.EACH, 0); }
		public List<TerminalNode> INSERT() { return getTokens(PLpgSQLParser.INSERT); }
		public TerminalNode INSERT(int i) {
			return getToken(PLpgSQLParser.INSERT, i);
		}
		public List<TerminalNode> DELETE() { return getTokens(PLpgSQLParser.DELETE); }
		public TerminalNode DELETE(int i) {
			return getToken(PLpgSQLParser.DELETE, i);
		}
		public List<TerminalNode> TRUNCATE() { return getTokens(PLpgSQLParser.TRUNCATE); }
		public TerminalNode TRUNCATE(int i) {
			return getToken(PLpgSQLParser.TRUNCATE, i);
		}
		public List<Identifier_listContext> identifier_list() {
			return getRuleContexts(Identifier_listContext.class);
		}
		public Identifier_listContext identifier_list(int i) {
			return getRuleContext(Identifier_listContext.class,i);
		}
		public Create_trigger_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_trigger_statement; }
	}

	public final Create_trigger_statementContext create_trigger_statement() throws RecognitionException {
		Create_trigger_statementContext _localctx = new Create_trigger_statementContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_create_trigger_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3470);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(3469);
				match(CONSTRAINT);
				}
			}

			setState(3472);
			match(TRIGGER);
			setState(3473);
			((Create_trigger_statementContext)_localctx).name = identifier();
			setState(3478);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BEFORE:
				{
				setState(3474);
				((Create_trigger_statementContext)_localctx).before_true = match(BEFORE);
				}
				break;
			case INSTEAD:
				{
				{
				setState(3475);
				match(INSTEAD);
				setState(3476);
				match(OF);
				}
				}
				break;
			case AFTER:
				{
				setState(3477);
				match(AFTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3495); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3490);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DELETE:
				case INSERT:
				case TRUNCATE:
					{
					setState(3483);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case INSERT:
						{
						setState(3480);
						((Create_trigger_statementContext)_localctx).insert_true = match(INSERT);
						}
						break;
					case DELETE:
						{
						setState(3481);
						((Create_trigger_statementContext)_localctx).delete_true = match(DELETE);
						}
						break;
					case TRUNCATE:
						{
						setState(3482);
						((Create_trigger_statementContext)_localctx).truncate_true = match(TRUNCATE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case UPDATE:
					{
					setState(3485);
					((Create_trigger_statementContext)_localctx).update_true = match(UPDATE);
					setState(3488);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OF) {
						{
						setState(3486);
						match(OF);
						setState(3487);
						identifier_list();
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3493);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(3492);
					match(OR);
					}
				}

				}
				}
				setState(3497); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==DELETE || _la==INSERT || _la==TRUNCATE || _la==UPDATE );
			setState(3499);
			match(ON);
			setState(3500);
			((Create_trigger_statementContext)_localctx).table_name = schema_qualified_name();
			setState(3503);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(3501);
				match(FROM);
				setState(3502);
				((Create_trigger_statementContext)_localctx).referenced_table_name = schema_qualified_name();
				}
			}

			setState(3506);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFERRABLE || _la==NOT) {
				{
				setState(3505);
				table_deferrable();
				}
			}

			setState(3509);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIALLY) {
				{
				setState(3508);
				table_initialy_immed();
				}
			}

			setState(3516);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REFERENCING) {
				{
				setState(3511);
				match(REFERENCING);
				setState(3512);
				trigger_referencing();
				setState(3514);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NEW || _la==OLD) {
					{
					setState(3513);
					trigger_referencing();
					}
				}

				}
			}

			setState(3523);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3518);
				((Create_trigger_statementContext)_localctx).for_each_true = match(FOR);
				setState(3520);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EACH) {
					{
					setState(3519);
					match(EACH);
					}
				}

				setState(3522);
				_la = _input.LA(1);
				if ( !(_la==STATEMENT || _la==ROW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3526);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(3525);
				when_trigger();
				}
			}

			setState(3528);
			match(EXECUTE);
			setState(3529);
			_la = _input.LA(1);
			if ( !(_la==FUNCTION || _la==PROCEDURE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3530);
			((Create_trigger_statementContext)_localctx).func_name = function_call();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_referencingContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(PLpgSQLParser.TABLE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode OLD() { return getToken(PLpgSQLParser.OLD, 0); }
		public TerminalNode NEW() { return getToken(PLpgSQLParser.NEW, 0); }
		public TerminalNode AS() { return getToken(PLpgSQLParser.AS, 0); }
		public Trigger_referencingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_referencing; }
	}

	public final Trigger_referencingContext trigger_referencing() throws RecognitionException {
		Trigger_referencingContext _localctx = new Trigger_referencingContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_trigger_referencing);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3532);
			_la = _input.LA(1);
			if ( !(_la==NEW || _la==OLD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3533);
			match(TABLE);
			setState(3535);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(3534);
				match(AS);
				}
			}

			setState(3537);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class When_triggerContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PLpgSQLParser.WHEN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public When_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_when_trigger; }
	}

	public final When_triggerContext when_trigger() throws RecognitionException {
		When_triggerContext _localctx = new When_triggerContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_when_trigger);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3539);
			match(WHEN);
			setState(3540);
			match(LEFT_PAREN);
			setState(3541);
			vex(0);
			setState(3542);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rule_commonContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PLpgSQLParser.ON, 0); }
		public Rule_member_objectContext rule_member_object() {
			return getRuleContext(Rule_member_objectContext.class,0);
		}
		public Roles_namesContext roles_names() {
			return getRuleContext(Roles_namesContext.class,0);
		}
		public TerminalNode TO() { return getToken(PLpgSQLParser.TO, 0); }
		public TerminalNode FROM() { return getToken(PLpgSQLParser.FROM, 0); }
		public List<TerminalNode> GRANT() { return getTokens(PLpgSQLParser.GRANT); }
		public TerminalNode GRANT(int i) {
			return getToken(PLpgSQLParser.GRANT, i);
		}
		public TerminalNode REVOKE() { return getToken(PLpgSQLParser.REVOKE, 0); }
		public PermissionsContext permissions() {
			return getRuleContext(PermissionsContext.class,0);
		}
		public Columns_permissionsContext columns_permissions() {
			return getRuleContext(Columns_permissionsContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PLpgSQLParser.WITH, 0); }
		public TerminalNode OPTION() { return getToken(PLpgSQLParser.OPTION, 0); }
		public Cascade_restrictContext cascade_restrict() {
			return getRuleContext(Cascade_restrictContext.class,0);
		}
		public Grant_option_forContext grant_option_for() {
			return getRuleContext(Grant_option_forContext.class,0);
		}
		public Other_rulesContext other_rules() {
			return getRuleContext(Other_rulesContext.class,0);
		}
		public Rule_commonContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rule_common; }
	}

	public final Rule_commonContext rule_common() throws RecognitionException {
		Rule_commonContext _localctx = new Rule_commonContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_rule_common);
		int _la;
		try {
			setState(3566);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,398,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3549);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case GRANT:
					{
					setState(3544);
					match(GRANT);
					}
					break;
				case REVOKE:
					{
					setState(3545);
					match(REVOKE);
					setState(3547);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==GRANT) {
						{
						setState(3546);
						grant_option_for();
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3553);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,396,_ctx) ) {
				case 1:
					{
					setState(3551);
					permissions();
					}
					break;
				case 2:
					{
					setState(3552);
					columns_permissions();
					}
					break;
				}
				setState(3555);
				match(ON);
				setState(3556);
				rule_member_object();
				setState(3557);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==TO) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3558);
				roles_names();
				setState(3563);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WITH:
					{
					setState(3559);
					match(WITH);
					setState(3560);
					match(GRANT);
					setState(3561);
					match(OPTION);
					}
					break;
				case CASCADE:
				case RESTRICT:
					{
					setState(3562);
					cascade_restrict();
					}
					break;
				case EOF:
				case SEMI_COLON:
					break;
				default:
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3565);
				other_rules();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rule_member_objectContext extends ParserRuleContext {
		public Names_referencesContext table_names;
		public Function_parametersContext function_parameters;
		public List<Function_parametersContext> func_name = new ArrayList<Function_parametersContext>();
		public Names_referencesContext schema_names;
		public Names_referencesContext names_references() {
			return getRuleContext(Names_referencesContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PLpgSQLParser.TABLE, 0); }
		public TerminalNode SEQUENCE() { return getToken(PLpgSQLParser.SEQUENCE, 0); }
		public TerminalNode DATABASE() { return getToken(PLpgSQLParser.DATABASE, 0); }
		public TerminalNode DOMAIN() { return getToken(PLpgSQLParser.DOMAIN, 0); }
		public TerminalNode FOREIGN() { return getToken(PLpgSQLParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(PLpgSQLParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(PLpgSQLParser.WRAPPER, 0); }
		public TerminalNode SERVER() { return getToken(PLpgSQLParser.SERVER, 0); }
		public TerminalNode FUNCTION() { return getToken(PLpgSQLParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(PLpgSQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PLpgSQLParser.ROUTINE, 0); }
		public List<Function_parametersContext> function_parameters() {
			return getRuleContexts(Function_parametersContext.class);
		}
		public Function_parametersContext function_parameters(int i) {
			return getRuleContext(Function_parametersContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public TerminalNode LARGE() { return getToken(PLpgSQLParser.LARGE, 0); }
		public TerminalNode OBJECT() { return getToken(PLpgSQLParser.OBJECT, 0); }
		public List<TerminalNode> NUMBER_LITERAL() { return getTokens(PLpgSQLParser.NUMBER_LITERAL); }
		public TerminalNode NUMBER_LITERAL(int i) {
			return getToken(PLpgSQLParser.NUMBER_LITERAL, i);
		}
		public TerminalNode LANGUAGE() { return getToken(PLpgSQLParser.LANGUAGE, 0); }
		public TerminalNode SCHEMA() { return getToken(PLpgSQLParser.SCHEMA, 0); }
		public TerminalNode TABLESPACE() { return getToken(PLpgSQLParser.TABLESPACE, 0); }
		public TerminalNode TYPE() { return getToken(PLpgSQLParser.TYPE, 0); }
		public TerminalNode ALL() { return getToken(PLpgSQLParser.ALL, 0); }
		public TerminalNode IN() { return getToken(PLpgSQLParser.IN, 0); }
		public TerminalNode TABLES() { return getToken(PLpgSQLParser.TABLES, 0); }
		public TerminalNode SEQUENCES() { return getToken(PLpgSQLParser.SEQUENCES, 0); }
		public TerminalNode FUNCTIONS() { return getToken(PLpgSQLParser.FUNCTIONS, 0); }
		public TerminalNode PROCEDURES() { return getToken(PLpgSQLParser.PROCEDURES, 0); }
		public TerminalNode ROUTINES() { return getToken(PLpgSQLParser.ROUTINES, 0); }
		public Rule_member_objectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rule_member_object; }
	}

	public final Rule_member_objectContext rule_member_object() throws RecognitionException {
		Rule_member_objectContext _localctx = new Rule_member_objectContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_rule_member_object);
		int _la;
		try {
			setState(3617);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,402,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3569);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(3568);
					match(TABLE);
					}
				}

				setState(3571);
				((Rule_member_objectContext)_localctx).table_names = names_references();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3572);
				match(SEQUENCE);
				setState(3573);
				names_references();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3574);
				match(DATABASE);
				setState(3575);
				names_references();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3576);
				match(DOMAIN);
				setState(3577);
				names_references();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3578);
				match(FOREIGN);
				setState(3579);
				match(DATA);
				setState(3580);
				match(WRAPPER);
				setState(3581);
				names_references();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3582);
				match(FOREIGN);
				setState(3583);
				match(SERVER);
				setState(3584);
				names_references();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3585);
				_la = _input.LA(1);
				if ( !(_la==FUNCTION || _la==PROCEDURE || _la==ROUTINE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3586);
				((Rule_member_objectContext)_localctx).function_parameters = function_parameters();
				((Rule_member_objectContext)_localctx).func_name.add(((Rule_member_objectContext)_localctx).function_parameters);
				setState(3591);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3587);
					match(COMMA);
					setState(3588);
					((Rule_member_objectContext)_localctx).function_parameters = function_parameters();
					((Rule_member_objectContext)_localctx).func_name.add(((Rule_member_objectContext)_localctx).function_parameters);
					}
					}
					setState(3593);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3594);
				match(LARGE);
				setState(3595);
				match(OBJECT);
				setState(3596);
				match(NUMBER_LITERAL);
				setState(3601);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3597);
					match(COMMA);
					setState(3598);
					match(NUMBER_LITERAL);
					}
					}
					setState(3603);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3604);
				match(LANGUAGE);
				setState(3605);
				names_references();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3606);
				match(SCHEMA);
				setState(3607);
				((Rule_member_objectContext)_localctx).schema_names = names_references();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3608);
				match(TABLESPACE);
				setState(3609);
				names_references();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3610);
				match(TYPE);
				setState(3611);
				names_references();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(3612);
				match(ALL);
				setState(3613);
				_la = _input.LA(1);
				if ( !(_la==FUNCTIONS || ((((_la - 185)) & ~0x3f) == 0 && ((1L << (_la - 185)) & ((1L << (PROCEDURES - 185)) | (1L << (ROUTINES - 185)) | (1L << (SEQUENCES - 185)))) != 0) || _la==TABLES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3614);
				match(IN);
				setState(3615);
				match(SCHEMA);
				setState(3616);
				names_references();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Columns_permissionsContext extends ParserRuleContext {
		public List<Table_column_privilegesContext> table_column_privileges() {
			return getRuleContexts(Table_column_privilegesContext.class);
		}
		public Table_column_privilegesContext table_column_privileges(int i) {
			return getRuleContext(Table_column_privilegesContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Columns_permissionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columns_permissions; }
	}

	public final Columns_permissionsContext columns_permissions() throws RecognitionException {
		Columns_permissionsContext _localctx = new Columns_permissionsContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_columns_permissions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3619);
			table_column_privileges();
			setState(3624);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3620);
				match(COMMA);
				setState(3621);
				table_column_privileges();
				}
				}
				setState(3626);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_column_privilegesContext extends ParserRuleContext {
		public Table_column_privilegeContext table_column_privilege() {
			return getRuleContext(Table_column_privilegeContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public Table_column_privilegesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_column_privileges; }
	}

	public final Table_column_privilegesContext table_column_privileges() throws RecognitionException {
		Table_column_privilegesContext _localctx = new Table_column_privilegesContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_table_column_privileges);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3627);
			table_column_privilege();
			setState(3628);
			match(LEFT_PAREN);
			setState(3629);
			identifier_list();
			setState(3630);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PermissionsContext extends ParserRuleContext {
		public List<PermissionContext> permission() {
			return getRuleContexts(PermissionContext.class);
		}
		public PermissionContext permission(int i) {
			return getRuleContext(PermissionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public PermissionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_permissions; }
	}

	public final PermissionsContext permissions() throws RecognitionException {
		PermissionsContext _localctx = new PermissionsContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_permissions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3632);
			permission();
			setState(3637);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3633);
				match(COMMA);
				setState(3634);
				permission();
				}
				}
				setState(3639);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PermissionContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PLpgSQLParser.ALL, 0); }
		public TerminalNode PRIVILEGES() { return getToken(PLpgSQLParser.PRIVILEGES, 0); }
		public TerminalNode CONNECT() { return getToken(PLpgSQLParser.CONNECT, 0); }
		public TerminalNode CREATE() { return getToken(PLpgSQLParser.CREATE, 0); }
		public TerminalNode DELETE() { return getToken(PLpgSQLParser.DELETE, 0); }
		public TerminalNode EXECUTE() { return getToken(PLpgSQLParser.EXECUTE, 0); }
		public TerminalNode INSERT() { return getToken(PLpgSQLParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(PLpgSQLParser.UPDATE, 0); }
		public TerminalNode REFERENCES() { return getToken(PLpgSQLParser.REFERENCES, 0); }
		public TerminalNode SELECT() { return getToken(PLpgSQLParser.SELECT, 0); }
		public TerminalNode TEMP() { return getToken(PLpgSQLParser.TEMP, 0); }
		public TerminalNode TRIGGER() { return getToken(PLpgSQLParser.TRIGGER, 0); }
		public TerminalNode TRUNCATE() { return getToken(PLpgSQLParser.TRUNCATE, 0); }
		public TerminalNode USAGE() { return getToken(PLpgSQLParser.USAGE, 0); }
		public PermissionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_permission; }
	}

	public final PermissionContext permission() throws RecognitionException {
		PermissionContext _localctx = new PermissionContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_permission);
		int _la;
		try {
			setState(3656);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3640);
				match(ALL);
				setState(3642);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIVILEGES) {
					{
					setState(3641);
					match(PRIVILEGES);
					}
				}

				}
				break;
			case CONNECT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3644);
				match(CONNECT);
				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(3645);
				match(CREATE);
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 4);
				{
				setState(3646);
				match(DELETE);
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 5);
				{
				setState(3647);
				match(EXECUTE);
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 6);
				{
				setState(3648);
				match(INSERT);
				}
				break;
			case UPDATE:
				enterOuterAlt(_localctx, 7);
				{
				setState(3649);
				match(UPDATE);
				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 8);
				{
				setState(3650);
				match(REFERENCES);
				}
				break;
			case SELECT:
				enterOuterAlt(_localctx, 9);
				{
				setState(3651);
				match(SELECT);
				}
				break;
			case TEMP:
				enterOuterAlt(_localctx, 10);
				{
				setState(3652);
				match(TEMP);
				}
				break;
			case TRIGGER:
				enterOuterAlt(_localctx, 11);
				{
				setState(3653);
				match(TRIGGER);
				}
				break;
			case TRUNCATE:
				enterOuterAlt(_localctx, 12);
				{
				setState(3654);
				match(TRUNCATE);
				}
				break;
			case USAGE:
				enterOuterAlt(_localctx, 13);
				{
				setState(3655);
				match(USAGE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Other_rulesContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(PLpgSQLParser.GRANT, 0); }
		public List<Names_referencesContext> names_references() {
			return getRuleContexts(Names_referencesContext.class);
		}
		public Names_referencesContext names_references(int i) {
			return getRuleContext(Names_referencesContext.class,i);
		}
		public TerminalNode TO() { return getToken(PLpgSQLParser.TO, 0); }
		public TerminalNode WITH() { return getToken(PLpgSQLParser.WITH, 0); }
		public TerminalNode ADMIN() { return getToken(PLpgSQLParser.ADMIN, 0); }
		public TerminalNode OPTION() { return getToken(PLpgSQLParser.OPTION, 0); }
		public TerminalNode REVOKE() { return getToken(PLpgSQLParser.REVOKE, 0); }
		public TerminalNode FROM() { return getToken(PLpgSQLParser.FROM, 0); }
		public TerminalNode FOR() { return getToken(PLpgSQLParser.FOR, 0); }
		public Cascade_restrictContext cascade_restrict() {
			return getRuleContext(Cascade_restrictContext.class,0);
		}
		public Other_rulesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_other_rules; }
	}

	public final Other_rulesContext other_rules() throws RecognitionException {
		Other_rulesContext _localctx = new Other_rulesContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_other_rules);
		int _la;
		try {
			setState(3679);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GRANT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3658);
				match(GRANT);
				setState(3659);
				names_references();
				setState(3660);
				match(TO);
				setState(3661);
				names_references();
				setState(3665);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(3662);
					match(WITH);
					setState(3663);
					match(ADMIN);
					setState(3664);
					match(OPTION);
					}
				}

				}
				break;
			case REVOKE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3667);
				match(REVOKE);
				setState(3671);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,408,_ctx) ) {
				case 1:
					{
					setState(3668);
					match(ADMIN);
					setState(3669);
					match(OPTION);
					setState(3670);
					match(FOR);
					}
					break;
				}
				setState(3673);
				names_references();
				setState(3674);
				match(FROM);
				setState(3675);
				names_references();
				setState(3677);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(3676);
					cascade_restrict();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_to_ruleContext extends ParserRuleContext {
		public TerminalNode TO() { return getToken(PLpgSQLParser.TO, 0); }
		public Roles_namesContext roles_names() {
			return getRuleContext(Roles_namesContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PLpgSQLParser.WITH, 0); }
		public TerminalNode GRANT() { return getToken(PLpgSQLParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(PLpgSQLParser.OPTION, 0); }
		public Grant_to_ruleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_to_rule; }
	}

	public final Grant_to_ruleContext grant_to_rule() throws RecognitionException {
		Grant_to_ruleContext _localctx = new Grant_to_ruleContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_grant_to_rule);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3681);
			match(TO);
			setState(3682);
			roles_names();
			setState(3686);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3683);
				match(WITH);
				setState(3684);
				match(GRANT);
				setState(3685);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Revoke_from_cascade_restrictContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PLpgSQLParser.FROM, 0); }
		public Roles_namesContext roles_names() {
			return getRuleContext(Roles_namesContext.class,0);
		}
		public Cascade_restrictContext cascade_restrict() {
			return getRuleContext(Cascade_restrictContext.class,0);
		}
		public Revoke_from_cascade_restrictContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_from_cascade_restrict; }
	}

	public final Revoke_from_cascade_restrictContext revoke_from_cascade_restrict() throws RecognitionException {
		Revoke_from_cascade_restrictContext _localctx = new Revoke_from_cascade_restrictContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_revoke_from_cascade_restrict);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3688);
			match(FROM);
			setState(3689);
			roles_names();
			setState(3691);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3690);
				cascade_restrict();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Roles_namesContext extends ParserRuleContext {
		public List<Role_name_with_groupContext> role_name_with_group() {
			return getRuleContexts(Role_name_with_groupContext.class);
		}
		public Role_name_with_groupContext role_name_with_group(int i) {
			return getRuleContext(Role_name_with_groupContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Roles_namesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roles_names; }
	}

	public final Roles_namesContext roles_names() throws RecognitionException {
		Roles_namesContext _localctx = new Roles_namesContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_roles_names);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3693);
			role_name_with_group();
			setState(3698);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3694);
				match(COMMA);
				setState(3695);
				role_name_with_group();
				}
				}
				setState(3700);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Role_name_with_groupContext extends ParserRuleContext {
		public User_nameContext user_name() {
			return getRuleContext(User_nameContext.class,0);
		}
		public TerminalNode GROUP() { return getToken(PLpgSQLParser.GROUP, 0); }
		public Role_name_with_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_role_name_with_group; }
	}

	public final Role_name_with_groupContext role_name_with_group() throws RecognitionException {
		Role_name_with_groupContext _localctx = new Role_name_with_groupContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_role_name_with_group);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3702);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GROUP) {
				{
				setState(3701);
				match(GROUP);
				}
			}

			setState(3704);
			user_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_on_statementContext extends ParserRuleContext {
		public TerminalNode COMMENT() { return getToken(PLpgSQLParser.COMMENT, 0); }
		public TerminalNode ON() { return getToken(PLpgSQLParser.ON, 0); }
		public Comment_member_objectContext comment_member_object() {
			return getRuleContext(Comment_member_objectContext.class,0);
		}
		public TerminalNode IS() { return getToken(PLpgSQLParser.IS, 0); }
		public Character_stringContext character_string() {
			return getRuleContext(Character_stringContext.class,0);
		}
		public TerminalNode NULL() { return getToken(PLpgSQLParser.NULL, 0); }
		public Comment_on_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_statement; }
	}

	public final Comment_on_statementContext comment_on_statement() throws RecognitionException {
		Comment_on_statementContext _localctx = new Comment_on_statementContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_comment_on_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3706);
			match(COMMENT);
			setState(3707);
			match(ON);
			setState(3708);
			comment_member_object();
			setState(3709);
			match(IS);
			setState(3712);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Character_String_Literal:
			case BeginDollarStringConstant:
				{
				setState(3710);
				character_string();
				}
				break;
			case NULL:
				{
				setState(3711);
				match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Security_labelContext extends ParserRuleContext {
		public TerminalNode SECURITY() { return getToken(PLpgSQLParser.SECURITY, 0); }
		public TerminalNode LABEL() { return getToken(PLpgSQLParser.LABEL, 0); }
		public TerminalNode ON() { return getToken(PLpgSQLParser.ON, 0); }
		public Label_member_objectContext label_member_object() {
			return getRuleContext(Label_member_objectContext.class,0);
		}
		public TerminalNode IS() { return getToken(PLpgSQLParser.IS, 0); }
		public List<Character_stringContext> character_string() {
			return getRuleContexts(Character_stringContext.class);
		}
		public Character_stringContext character_string(int i) {
			return getRuleContext(Character_stringContext.class,i);
		}
		public TerminalNode NULL() { return getToken(PLpgSQLParser.NULL, 0); }
		public TerminalNode FOR() { return getToken(PLpgSQLParser.FOR, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Security_labelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_security_label; }
	}

	public final Security_labelContext security_label() throws RecognitionException {
		Security_labelContext _localctx = new Security_labelContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_security_label);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3714);
			match(SECURITY);
			setState(3715);
			match(LABEL);
			setState(3721);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3716);
				match(FOR);
				setState(3719);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BY:
				case CACHE:
				case CALL:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COLUMNS:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONFLICT:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CUBE:
				case CURRENT:
				case CURSOR:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DEPENDS:
				case DETACH:
				case DICTIONARY:
				case DISABLE:
				case DISCARD:
				case DOCUMENT:
				case DOMAIN:
				case DOUBLE:
				case DROP:
				case EACH:
				case ENABLE:
				case ENCODING:
				case ENCRYPTED:
				case ENUM:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GENERATED:
				case GLOBAL:
				case GRANTED:
				case GROUPS:
				case HANDLER:
				case HEADER:
				case HOLD:
				case HOUR:
				case IDENTITY:
				case IF:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT:
				case IMPORT:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCKED:
				case LOGGED:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case METHOD:
				case MINUTE:
				case MINVALUE:
				case MODE:
				case MONTH:
				case MOVE:
				case NAME:
				case NAMES:
				case NEW:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS:
				case OBJECT:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDINALITY:
				case OTHERS:
				case OVER:
				case OVERRIDING:
				case OWNED:
				case OWNER:
				case PARALLEL:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case POLICY:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROCEDURES:
				case PROGRAM:
				case PUBLICATION:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINES:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMAS:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SKIP_:
				case SNAPSHOT:
				case SQL:
				case STABLE:
				case STANDALONE:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STORED:
				case STRICT:
				case STRIP:
				case SUBSCRIPTION:
				case SUPPORT:
				case SYSID:
				case SYSTEM:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT:
				case TIES:
				case TRANSACTION:
				case TRANSFORM:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case TYPES:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VALUE:
				case VARYING:
				case VERSION:
				case VIEW:
				case VIEWS:
				case VOLATILE:
				case WHITESPACE:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML:
				case YEAR:
				case YES:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN:
				case CHAR:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL:
				case EXISTS:
				case EXTRACT:
				case FLOAT:
				case GREATEST:
				case GROUPING:
				case INOUT:
				case INT:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OUT:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case ALIGNMENT:
				case BASETYPE:
				case BUFFERS:
				case BYPASSRLS:
				case CANONICAL:
				case CATEGORY:
				case COLLATABLE:
				case COMBINEFUNC:
				case COMMUTATOR:
				case CONNECT:
				case COSTS:
				case CREATEDB:
				case CREATEROLE:
				case DESERIALFUNC:
				case DETERMINISTIC:
				case DISABLE_PAGE_SKIPPING:
				case ELEMENT:
				case EXTENDED:
				case FINALFUNC:
				case FINALFUNC_EXTRA:
				case FINALFUNC_MODIFY:
				case FORCE_NOT_NULL:
				case FORCE_NULL:
				case FORCE_QUOTE:
				case FORMAT:
				case GETTOKEN:
				case HASH:
				case HASHES:
				case HEADLINE:
				case HYPOTHETICAL:
				case INDEX_CLEANUP:
				case INIT:
				case INITCOND:
				case INTERNALLENGTH:
				case JSON:
				case LC_COLLATE:
				case LC_CTYPE:
				case LEFTARG:
				case LEXIZE:
				case LEXTYPES:
				case LIST:
				case LOCALE:
				case LOGIN:
				case MAIN:
				case MERGES:
				case MFINALFUNC:
				case MFINALFUNC_EXTRA:
				case MFINALFUNC_MODIFY:
				case MINITCOND:
				case MINVFUNC:
				case MODULUS:
				case MSFUNC:
				case MSSPACE:
				case MSTYPE:
				case NEGATOR:
				case NOBYPASSRLS:
				case NOCREATEDB:
				case NOCREATEROLE:
				case NOINHERIT:
				case NOLOGIN:
				case NOREPLICATION:
				case NOSUPERUSER:
				case OUTPUT:
				case PASSEDBYVALUE:
				case PATH:
				case PERMISSIVE:
				case PLAIN:
				case PREFERRED:
				case PROVIDER:
				case READ_ONLY:
				case READ_WRITE:
				case RECEIVE:
				case REMAINDER:
				case REPLICATION:
				case RESTRICTED:
				case RESTRICTIVE:
				case RIGHTARG:
				case SAFE:
				case SEND:
				case SERIALFUNC:
				case SETTINGS:
				case SFUNC:
				case SHAREABLE:
				case SKIP_LOCKED:
				case SORTOP:
				case SSPACE:
				case STYPE:
				case SUBTYPE_DIFF:
				case SUBTYPE_OPCLASS:
				case SUBTYPE:
				case SUMMARY:
				case SUPERUSER:
				case TIMING:
				case TYPMOD_IN:
				case TYPMOD_OUT:
				case UNSAFE:
				case USAGE:
				case VARIABLE:
				case YAML:
				case ALIAS:
				case ASSERT:
				case CONSTANT:
				case DATATYPE:
				case DEBUG:
				case DETAIL:
				case DIAGNOSTICS:
				case ELSEIF:
				case ELSIF:
				case ERRCODE:
				case EXIT:
				case EXCEPTION:
				case FOREACH:
				case GET:
				case HINT:
				case INFO:
				case LOG:
				case LOOP:
				case MESSAGE:
				case NOTICE:
				case OPEN:
				case PERFORM:
				case QUERY:
				case RAISE:
				case RECORD:
				case RETURN:
				case REVERSE:
				case ROWTYPE:
				case SLICE:
				case SQLSTATE:
				case STACKED:
				case WARNING:
				case WHILE:
				case Identifier:
				case QuotedIdentifier:
					{
					setState(3717);
					identifier();
					}
					break;
				case Character_String_Literal:
				case BeginDollarStringConstant:
					{
					setState(3718);
					character_string();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(3723);
			match(ON);
			setState(3724);
			label_member_object();
			setState(3725);
			match(IS);
			setState(3728);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Character_String_Literal:
			case BeginDollarStringConstant:
				{
				setState(3726);
				character_string();
				}
				break;
			case NULL:
				{
				setState(3727);
				match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_member_objectContext extends ParserRuleContext {
		public Schema_qualified_nameContext name;
		public Data_typeContext source;
		public Data_typeContext target;
		public Schema_qualified_nameContext table_name;
		public IdentifierContext index_method;
		public TerminalNode ACCESS() { return getToken(PLpgSQLParser.ACCESS, 0); }
		public TerminalNode METHOD() { return getToken(PLpgSQLParser.METHOD, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Function_argsContext function_args() {
			return getRuleContext(Function_argsContext.class,0);
		}
		public TerminalNode AGGREGATE() { return getToken(PLpgSQLParser.AGGREGATE, 0); }
		public TerminalNode PROCEDURE() { return getToken(PLpgSQLParser.PROCEDURE, 0); }
		public TerminalNode FUNCTION() { return getToken(PLpgSQLParser.FUNCTION, 0); }
		public TerminalNode ROUTINE() { return getToken(PLpgSQLParser.ROUTINE, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public TerminalNode CAST() { return getToken(PLpgSQLParser.CAST, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public TerminalNode AS() { return getToken(PLpgSQLParser.AS, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public List<Data_typeContext> data_type() {
			return getRuleContexts(Data_typeContext.class);
		}
		public Data_typeContext data_type(int i) {
			return getRuleContext(Data_typeContext.class,i);
		}
		public TerminalNode COLLATION() { return getToken(PLpgSQLParser.COLLATION, 0); }
		public TerminalNode COLUMN() { return getToken(PLpgSQLParser.COLUMN, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PLpgSQLParser.CONSTRAINT, 0); }
		public TerminalNode ON() { return getToken(PLpgSQLParser.ON, 0); }
		public TerminalNode DOMAIN() { return getToken(PLpgSQLParser.DOMAIN, 0); }
		public TerminalNode CONVERSION() { return getToken(PLpgSQLParser.CONVERSION, 0); }
		public TerminalNode DATABASE() { return getToken(PLpgSQLParser.DATABASE, 0); }
		public TerminalNode EXTENSION() { return getToken(PLpgSQLParser.EXTENSION, 0); }
		public TerminalNode EVENT() { return getToken(PLpgSQLParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(PLpgSQLParser.TRIGGER, 0); }
		public TerminalNode FOREIGN() { return getToken(PLpgSQLParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(PLpgSQLParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(PLpgSQLParser.WRAPPER, 0); }
		public TerminalNode TABLE() { return getToken(PLpgSQLParser.TABLE, 0); }
		public TerminalNode INDEX() { return getToken(PLpgSQLParser.INDEX, 0); }
		public TerminalNode LARGE() { return getToken(PLpgSQLParser.LARGE, 0); }
		public TerminalNode OBJECT() { return getToken(PLpgSQLParser.OBJECT, 0); }
		public TerminalNode NUMBER_LITERAL() { return getToken(PLpgSQLParser.NUMBER_LITERAL, 0); }
		public TerminalNode VIEW() { return getToken(PLpgSQLParser.VIEW, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PLpgSQLParser.MATERIALIZED, 0); }
		public TerminalNode OPERATOR() { return getToken(PLpgSQLParser.OPERATOR, 0); }
		public Target_operatorContext target_operator() {
			return getRuleContext(Target_operatorContext.class,0);
		}
		public TerminalNode USING() { return getToken(PLpgSQLParser.USING, 0); }
		public TerminalNode FAMILY() { return getToken(PLpgSQLParser.FAMILY, 0); }
		public TerminalNode CLASS() { return getToken(PLpgSQLParser.CLASS, 0); }
		public TerminalNode POLICY() { return getToken(PLpgSQLParser.POLICY, 0); }
		public TerminalNode LANGUAGE() { return getToken(PLpgSQLParser.LANGUAGE, 0); }
		public TerminalNode PROCEDURAL() { return getToken(PLpgSQLParser.PROCEDURAL, 0); }
		public TerminalNode PUBLICATION() { return getToken(PLpgSQLParser.PUBLICATION, 0); }
		public TerminalNode ROLE() { return getToken(PLpgSQLParser.ROLE, 0); }
		public TerminalNode RULE() { return getToken(PLpgSQLParser.RULE, 0); }
		public TerminalNode SCHEMA() { return getToken(PLpgSQLParser.SCHEMA, 0); }
		public TerminalNode SEQUENCE() { return getToken(PLpgSQLParser.SEQUENCE, 0); }
		public TerminalNode SERVER() { return getToken(PLpgSQLParser.SERVER, 0); }
		public TerminalNode STATISTICS() { return getToken(PLpgSQLParser.STATISTICS, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PLpgSQLParser.SUBSCRIPTION, 0); }
		public TerminalNode TABLESPACE() { return getToken(PLpgSQLParser.TABLESPACE, 0); }
		public TerminalNode TEXT() { return getToken(PLpgSQLParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(PLpgSQLParser.SEARCH, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PLpgSQLParser.CONFIGURATION, 0); }
		public TerminalNode DICTIONARY() { return getToken(PLpgSQLParser.DICTIONARY, 0); }
		public TerminalNode PARSER() { return getToken(PLpgSQLParser.PARSER, 0); }
		public TerminalNode TEMPLATE() { return getToken(PLpgSQLParser.TEMPLATE, 0); }
		public TerminalNode TRANSFORM() { return getToken(PLpgSQLParser.TRANSFORM, 0); }
		public TerminalNode FOR() { return getToken(PLpgSQLParser.FOR, 0); }
		public TerminalNode TYPE() { return getToken(PLpgSQLParser.TYPE, 0); }
		public Comment_member_objectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_member_object; }
	}

	public final Comment_member_objectContext comment_member_object() throws RecognitionException {
		Comment_member_objectContext _localctx = new Comment_member_objectContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_comment_member_object);
		int _la;
		try {
			setState(3854);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,423,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3730);
				match(ACCESS);
				setState(3731);
				match(METHOD);
				setState(3732);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3733);
				_la = _input.LA(1);
				if ( !(_la==AGGREGATE || _la==FUNCTION || _la==PROCEDURE || _la==ROUTINE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3734);
				((Comment_member_objectContext)_localctx).name = schema_qualified_name();
				setState(3735);
				function_args();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3737);
				match(CAST);
				setState(3738);
				match(LEFT_PAREN);
				setState(3739);
				((Comment_member_objectContext)_localctx).source = data_type();
				setState(3740);
				match(AS);
				setState(3741);
				((Comment_member_objectContext)_localctx).target = data_type();
				setState(3742);
				match(RIGHT_PAREN);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3744);
				match(COLLATION);
				setState(3745);
				identifier();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3746);
				match(COLUMN);
				setState(3747);
				((Comment_member_objectContext)_localctx).name = schema_qualified_name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3748);
				match(CONSTRAINT);
				setState(3749);
				identifier();
				setState(3750);
				match(ON);
				setState(3752);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,419,_ctx) ) {
				case 1:
					{
					setState(3751);
					match(DOMAIN);
					}
					break;
				}
				setState(3754);
				((Comment_member_objectContext)_localctx).table_name = schema_qualified_name();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3756);
				match(CONVERSION);
				setState(3757);
				((Comment_member_objectContext)_localctx).name = schema_qualified_name();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3758);
				match(DATABASE);
				setState(3759);
				identifier();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3760);
				match(DOMAIN);
				setState(3761);
				((Comment_member_objectContext)_localctx).name = schema_qualified_name();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3762);
				match(EXTENSION);
				setState(3763);
				identifier();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3764);
				match(EVENT);
				setState(3765);
				match(TRIGGER);
				setState(3766);
				identifier();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3767);
				match(FOREIGN);
				setState(3768);
				match(DATA);
				setState(3769);
				match(WRAPPER);
				setState(3770);
				identifier();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(3772);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOREIGN) {
					{
					setState(3771);
					match(FOREIGN);
					}
				}

				setState(3774);
				match(TABLE);
				setState(3775);
				((Comment_member_objectContext)_localctx).name = schema_qualified_name();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(3776);
				match(INDEX);
				setState(3777);
				((Comment_member_objectContext)_localctx).name = schema_qualified_name();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(3778);
				match(LARGE);
				setState(3779);
				match(OBJECT);
				setState(3780);
				match(NUMBER_LITERAL);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(3782);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MATERIALIZED) {
					{
					setState(3781);
					match(MATERIALIZED);
					}
				}

				setState(3784);
				match(VIEW);
				setState(3785);
				((Comment_member_objectContext)_localctx).name = schema_qualified_name();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(3786);
				match(OPERATOR);
				setState(3787);
				target_operator();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(3788);
				match(OPERATOR);
				setState(3789);
				_la = _input.LA(1);
				if ( !(_la==CLASS || _la==FAMILY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3790);
				((Comment_member_objectContext)_localctx).name = schema_qualified_name();
				setState(3791);
				match(USING);
				setState(3792);
				((Comment_member_objectContext)_localctx).index_method = identifier();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(3794);
				match(POLICY);
				setState(3795);
				identifier();
				setState(3796);
				match(ON);
				setState(3797);
				((Comment_member_objectContext)_localctx).table_name = schema_qualified_name();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(3800);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROCEDURAL) {
					{
					setState(3799);
					match(PROCEDURAL);
					}
				}

				setState(3802);
				match(LANGUAGE);
				setState(3803);
				((Comment_member_objectContext)_localctx).name = schema_qualified_name();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(3804);
				match(PUBLICATION);
				setState(3805);
				identifier();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(3806);
				match(ROLE);
				setState(3807);
				identifier();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(3808);
				match(RULE);
				setState(3809);
				identifier();
				setState(3810);
				match(ON);
				setState(3811);
				((Comment_member_objectContext)_localctx).table_name = schema_qualified_name();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(3813);
				match(SCHEMA);
				setState(3814);
				identifier();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(3815);
				match(SEQUENCE);
				setState(3816);
				((Comment_member_objectContext)_localctx).name = schema_qualified_name();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(3817);
				match(SERVER);
				setState(3818);
				identifier();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(3819);
				match(STATISTICS);
				setState(3820);
				((Comment_member_objectContext)_localctx).name = schema_qualified_name();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(3821);
				match(SUBSCRIPTION);
				setState(3822);
				identifier();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(3823);
				match(TABLESPACE);
				setState(3824);
				identifier();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(3825);
				match(TEXT);
				setState(3826);
				match(SEARCH);
				setState(3827);
				match(CONFIGURATION);
				setState(3828);
				((Comment_member_objectContext)_localctx).name = schema_qualified_name();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(3829);
				match(TEXT);
				setState(3830);
				match(SEARCH);
				setState(3831);
				match(DICTIONARY);
				setState(3832);
				((Comment_member_objectContext)_localctx).name = schema_qualified_name();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(3833);
				match(TEXT);
				setState(3834);
				match(SEARCH);
				setState(3835);
				match(PARSER);
				setState(3836);
				((Comment_member_objectContext)_localctx).name = schema_qualified_name();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(3837);
				match(TEXT);
				setState(3838);
				match(SEARCH);
				setState(3839);
				match(TEMPLATE);
				setState(3840);
				((Comment_member_objectContext)_localctx).name = schema_qualified_name();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(3841);
				match(TRANSFORM);
				setState(3842);
				match(FOR);
				setState(3843);
				((Comment_member_objectContext)_localctx).name = schema_qualified_name();
				setState(3844);
				match(LANGUAGE);
				setState(3845);
				identifier();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(3847);
				match(TRIGGER);
				setState(3848);
				identifier();
				setState(3849);
				match(ON);
				setState(3850);
				((Comment_member_objectContext)_localctx).table_name = schema_qualified_name();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(3852);
				match(TYPE);
				setState(3853);
				((Comment_member_objectContext)_localctx).name = schema_qualified_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Label_member_objectContext extends ParserRuleContext {
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Function_argsContext function_args() {
			return getRuleContext(Function_argsContext.class,0);
		}
		public TerminalNode AGGREGATE() { return getToken(PLpgSQLParser.AGGREGATE, 0); }
		public TerminalNode PROCEDURE() { return getToken(PLpgSQLParser.PROCEDURE, 0); }
		public TerminalNode FUNCTION() { return getToken(PLpgSQLParser.FUNCTION, 0); }
		public TerminalNode ROUTINE() { return getToken(PLpgSQLParser.ROUTINE, 0); }
		public TerminalNode COLUMN() { return getToken(PLpgSQLParser.COLUMN, 0); }
		public TerminalNode DATABASE() { return getToken(PLpgSQLParser.DATABASE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode DOMAIN() { return getToken(PLpgSQLParser.DOMAIN, 0); }
		public TerminalNode EVENT() { return getToken(PLpgSQLParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(PLpgSQLParser.TRIGGER, 0); }
		public TerminalNode TABLE() { return getToken(PLpgSQLParser.TABLE, 0); }
		public TerminalNode FOREIGN() { return getToken(PLpgSQLParser.FOREIGN, 0); }
		public TerminalNode LARGE() { return getToken(PLpgSQLParser.LARGE, 0); }
		public TerminalNode OBJECT() { return getToken(PLpgSQLParser.OBJECT, 0); }
		public TerminalNode NUMBER_LITERAL() { return getToken(PLpgSQLParser.NUMBER_LITERAL, 0); }
		public TerminalNode VIEW() { return getToken(PLpgSQLParser.VIEW, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PLpgSQLParser.MATERIALIZED, 0); }
		public TerminalNode LANGUAGE() { return getToken(PLpgSQLParser.LANGUAGE, 0); }
		public TerminalNode PROCEDURAL() { return getToken(PLpgSQLParser.PROCEDURAL, 0); }
		public TerminalNode PUBLICATION() { return getToken(PLpgSQLParser.PUBLICATION, 0); }
		public TerminalNode ROLE() { return getToken(PLpgSQLParser.ROLE, 0); }
		public TerminalNode SCHEMA() { return getToken(PLpgSQLParser.SCHEMA, 0); }
		public TerminalNode SEQUENCE() { return getToken(PLpgSQLParser.SEQUENCE, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PLpgSQLParser.SUBSCRIPTION, 0); }
		public TerminalNode TABLESPACE() { return getToken(PLpgSQLParser.TABLESPACE, 0); }
		public TerminalNode TYPE() { return getToken(PLpgSQLParser.TYPE, 0); }
		public Label_member_objectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_label_member_object; }
	}

	public final Label_member_objectContext label_member_object() throws RecognitionException {
		Label_member_objectContext _localctx = new Label_member_objectContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_label_member_object);
		int _la;
		try {
			setState(3901);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AGGREGATE:
			case FUNCTION:
			case PROCEDURE:
			case ROUTINE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3856);
				_la = _input.LA(1);
				if ( !(_la==AGGREGATE || _la==FUNCTION || _la==PROCEDURE || _la==ROUTINE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3857);
				schema_qualified_name();
				setState(3858);
				function_args();
				}
				break;
			case COLUMN:
				enterOuterAlt(_localctx, 2);
				{
				setState(3860);
				match(COLUMN);
				setState(3861);
				schema_qualified_name();
				}
				break;
			case DATABASE:
				enterOuterAlt(_localctx, 3);
				{
				setState(3862);
				match(DATABASE);
				setState(3863);
				identifier();
				}
				break;
			case DOMAIN:
				enterOuterAlt(_localctx, 4);
				{
				setState(3864);
				match(DOMAIN);
				setState(3865);
				schema_qualified_name();
				}
				break;
			case EVENT:
				enterOuterAlt(_localctx, 5);
				{
				setState(3866);
				match(EVENT);
				setState(3867);
				match(TRIGGER);
				setState(3868);
				identifier();
				}
				break;
			case FOREIGN:
			case TABLE:
				enterOuterAlt(_localctx, 6);
				{
				setState(3870);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOREIGN) {
					{
					setState(3869);
					match(FOREIGN);
					}
				}

				setState(3872);
				match(TABLE);
				setState(3873);
				schema_qualified_name();
				}
				break;
			case LARGE:
				enterOuterAlt(_localctx, 7);
				{
				setState(3874);
				match(LARGE);
				setState(3875);
				match(OBJECT);
				setState(3876);
				match(NUMBER_LITERAL);
				}
				break;
			case MATERIALIZED:
			case VIEW:
				enterOuterAlt(_localctx, 8);
				{
				setState(3878);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MATERIALIZED) {
					{
					setState(3877);
					match(MATERIALIZED);
					}
				}

				setState(3880);
				match(VIEW);
				setState(3881);
				schema_qualified_name();
				}
				break;
			case LANGUAGE:
			case PROCEDURAL:
				enterOuterAlt(_localctx, 9);
				{
				setState(3883);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROCEDURAL) {
					{
					setState(3882);
					match(PROCEDURAL);
					}
				}

				setState(3885);
				match(LANGUAGE);
				setState(3886);
				schema_qualified_name();
				}
				break;
			case PUBLICATION:
				enterOuterAlt(_localctx, 10);
				{
				setState(3887);
				match(PUBLICATION);
				setState(3888);
				identifier();
				}
				break;
			case ROLE:
				enterOuterAlt(_localctx, 11);
				{
				setState(3889);
				match(ROLE);
				setState(3890);
				identifier();
				}
				break;
			case SCHEMA:
				enterOuterAlt(_localctx, 12);
				{
				setState(3891);
				match(SCHEMA);
				setState(3892);
				identifier();
				}
				break;
			case SEQUENCE:
				enterOuterAlt(_localctx, 13);
				{
				setState(3893);
				match(SEQUENCE);
				setState(3894);
				schema_qualified_name();
				}
				break;
			case SUBSCRIPTION:
				enterOuterAlt(_localctx, 14);
				{
				setState(3895);
				match(SUBSCRIPTION);
				setState(3896);
				identifier();
				}
				break;
			case TABLESPACE:
				enterOuterAlt(_localctx, 15);
				{
				setState(3897);
				match(TABLESPACE);
				setState(3898);
				identifier();
				}
				break;
			case TYPE:
				enterOuterAlt(_localctx, 16);
				{
				setState(3899);
				match(TYPE);
				setState(3900);
				schema_qualified_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_function_statementContext extends ParserRuleContext {
		public Data_typeContext rettype_data;
		public Function_ret_tableContext ret_table;
		public Function_parametersContext function_parameters() {
			return getRuleContext(Function_parametersContext.class,0);
		}
		public Create_funct_paramsContext create_funct_params() {
			return getRuleContext(Create_funct_paramsContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(PLpgSQLParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(PLpgSQLParser.PROCEDURE, 0); }
		public TerminalNode OR() { return getToken(PLpgSQLParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PLpgSQLParser.REPLACE, 0); }
		public TerminalNode RETURNS() { return getToken(PLpgSQLParser.RETURNS, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public Function_ret_tableContext function_ret_table() {
			return getRuleContext(Function_ret_tableContext.class,0);
		}
		public Create_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_function_statement; }
	}

	public final Create_function_statementContext create_function_statement() throws RecognitionException {
		Create_function_statementContext _localctx = new Create_function_statementContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_create_function_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3905);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(3903);
				match(OR);
				setState(3904);
				match(REPLACE);
				}
			}

			setState(3907);
			_la = _input.LA(1);
			if ( !(_la==FUNCTION || _la==PROCEDURE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3908);
			function_parameters();
			setState(3914);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,430,_ctx) ) {
			case 1:
				{
				setState(3909);
				match(RETURNS);
				setState(3912);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BY:
				case CACHE:
				case CALL:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COLUMNS:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONFLICT:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CUBE:
				case CURRENT:
				case CURSOR:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DEPENDS:
				case DETACH:
				case DICTIONARY:
				case DISABLE:
				case DISCARD:
				case DOCUMENT:
				case DOMAIN:
				case DOUBLE:
				case DROP:
				case EACH:
				case ENABLE:
				case ENCODING:
				case ENCRYPTED:
				case ENUM:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GENERATED:
				case GLOBAL:
				case GRANTED:
				case GROUPS:
				case HANDLER:
				case HEADER:
				case HOLD:
				case HOUR:
				case IDENTITY:
				case IF:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT:
				case IMPORT:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCKED:
				case LOGGED:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case METHOD:
				case MINUTE:
				case MINVALUE:
				case MODE:
				case MONTH:
				case MOVE:
				case NAME:
				case NAMES:
				case NEW:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS:
				case OBJECT:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDINALITY:
				case OTHERS:
				case OVER:
				case OVERRIDING:
				case OWNED:
				case OWNER:
				case PARALLEL:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case POLICY:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROCEDURES:
				case PROGRAM:
				case PUBLICATION:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINES:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMAS:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SKIP_:
				case SNAPSHOT:
				case SQL:
				case STABLE:
				case STANDALONE:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STORED:
				case STRICT:
				case STRIP:
				case SUBSCRIPTION:
				case SUPPORT:
				case SYSID:
				case SYSTEM:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT:
				case TIES:
				case TRANSACTION:
				case TRANSFORM:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case TYPES:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VALUE:
				case VARYING:
				case VERSION:
				case VIEW:
				case VIEWS:
				case VOLATILE:
				case WHITESPACE:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML:
				case YEAR:
				case YES:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN:
				case CHAR:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL:
				case EXISTS:
				case EXTRACT:
				case FLOAT:
				case GREATEST:
				case GROUPING:
				case INOUT:
				case INT:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OUT:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case AUTHORIZATION:
				case BINARY:
				case COLLATION:
				case CONCURRENTLY:
				case CROSS:
				case CURRENT_SCHEMA:
				case FREEZE:
				case FULL:
				case ILIKE:
				case INNER:
				case IS:
				case ISNULL:
				case JOIN:
				case LEFT:
				case LIKE:
				case NATURAL:
				case NOTNULL:
				case OUTER:
				case OVERLAPS:
				case RIGHT:
				case SIMILAR:
				case TABLESAMPLE:
				case VERBOSE:
				case ALIGNMENT:
				case BASETYPE:
				case BUFFERS:
				case BYPASSRLS:
				case CANONICAL:
				case CATEGORY:
				case COLLATABLE:
				case COMBINEFUNC:
				case COMMUTATOR:
				case CONNECT:
				case COSTS:
				case CREATEDB:
				case CREATEROLE:
				case DESERIALFUNC:
				case DETERMINISTIC:
				case DISABLE_PAGE_SKIPPING:
				case ELEMENT:
				case EXTENDED:
				case FINALFUNC:
				case FINALFUNC_EXTRA:
				case FINALFUNC_MODIFY:
				case FORCE_NOT_NULL:
				case FORCE_NULL:
				case FORCE_QUOTE:
				case FORMAT:
				case GETTOKEN:
				case HASH:
				case HASHES:
				case HEADLINE:
				case HYPOTHETICAL:
				case INDEX_CLEANUP:
				case INIT:
				case INITCOND:
				case INTERNALLENGTH:
				case JSON:
				case LC_COLLATE:
				case LC_CTYPE:
				case LEFTARG:
				case LEXIZE:
				case LEXTYPES:
				case LIST:
				case LOCALE:
				case LOGIN:
				case MAIN:
				case MERGES:
				case MFINALFUNC:
				case MFINALFUNC_EXTRA:
				case MFINALFUNC_MODIFY:
				case MINITCOND:
				case MINVFUNC:
				case MODULUS:
				case MSFUNC:
				case MSSPACE:
				case MSTYPE:
				case NEGATOR:
				case NOBYPASSRLS:
				case NOCREATEDB:
				case NOCREATEROLE:
				case NOINHERIT:
				case NOLOGIN:
				case NOREPLICATION:
				case NOSUPERUSER:
				case OUTPUT:
				case PASSEDBYVALUE:
				case PATH:
				case PERMISSIVE:
				case PLAIN:
				case PREFERRED:
				case PROVIDER:
				case READ_ONLY:
				case READ_WRITE:
				case RECEIVE:
				case REMAINDER:
				case REPLICATION:
				case RESTRICTED:
				case RESTRICTIVE:
				case RIGHTARG:
				case SAFE:
				case SEND:
				case SERIALFUNC:
				case SETTINGS:
				case SFUNC:
				case SHAREABLE:
				case SKIP_LOCKED:
				case SORTOP:
				case SSPACE:
				case STYPE:
				case SUBTYPE_DIFF:
				case SUBTYPE_OPCLASS:
				case SUBTYPE:
				case SUMMARY:
				case SUPERUSER:
				case TIMING:
				case TYPMOD_IN:
				case TYPMOD_OUT:
				case UNSAFE:
				case USAGE:
				case VARIABLE:
				case YAML:
				case ALIAS:
				case ASSERT:
				case CONSTANT:
				case DATATYPE:
				case DEBUG:
				case DETAIL:
				case DIAGNOSTICS:
				case ELSEIF:
				case ELSIF:
				case ERRCODE:
				case EXIT:
				case EXCEPTION:
				case FOREACH:
				case GET:
				case HINT:
				case INFO:
				case LOG:
				case LOOP:
				case MESSAGE:
				case NOTICE:
				case OPEN:
				case PERFORM:
				case QUERY:
				case RAISE:
				case RECORD:
				case RETURN:
				case REVERSE:
				case ROWTYPE:
				case SLICE:
				case SQLSTATE:
				case STACKED:
				case WARNING:
				case WHILE:
				case Identifier:
				case QuotedIdentifier:
					{
					setState(3910);
					((Create_function_statementContext)_localctx).rettype_data = data_type();
					}
					break;
				case TABLE:
					{
					setState(3911);
					((Create_function_statementContext)_localctx).ret_table = function_ret_table();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			setState(3916);
			create_funct_params();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_funct_paramsContext extends ParserRuleContext {
		public List<Function_actions_commonContext> function_actions_common() {
			return getRuleContexts(Function_actions_commonContext.class);
		}
		public Function_actions_commonContext function_actions_common(int i) {
			return getRuleContext(Function_actions_commonContext.class,i);
		}
		public With_storage_parameterContext with_storage_parameter() {
			return getRuleContext(With_storage_parameterContext.class,0);
		}
		public Create_funct_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_funct_params; }
	}

	public final Create_funct_paramsContext create_funct_params() throws RecognitionException {
		Create_funct_paramsContext _localctx = new Create_funct_paramsContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_create_funct_params);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3919); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3918);
				function_actions_common();
				}
				}
				setState(3921); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CALLED || _la==COST || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (EXTERNAL - 85)) | (1L << (IMMUTABLE - 85)) | (1L << (LANGUAGE - 85)) | (1L << (LEAKPROOF - 85)))) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & ((1L << (PARALLEL - 169)) | (1L << (RETURNS - 169)) | (1L << (ROWS - 169)) | (1L << (SECURITY - 169)) | (1L << (SET - 169)))) != 0) || ((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & ((1L << (STABLE - 236)) | (1L << (STRICT - 236)) | (1L << (SUPPORT - 236)) | (1L << (TRANSFORM - 236)) | (1L << (VOLATILE - 236)))) != 0) || _la==AS || _la==NOT || _la==WINDOW );
			setState(3924);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3923);
				with_storage_parameter();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transform_for_typeContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PLpgSQLParser.FOR, 0); }
		public TerminalNode TYPE() { return getToken(PLpgSQLParser.TYPE, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public Transform_for_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transform_for_type; }
	}

	public final Transform_for_typeContext transform_for_type() throws RecognitionException {
		Transform_for_typeContext _localctx = new Transform_for_typeContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_transform_for_type);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3926);
			match(FOR);
			setState(3927);
			match(TYPE);
			setState(3928);
			data_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_ret_tableContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(PLpgSQLParser.TABLE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public List<Function_column_name_typeContext> function_column_name_type() {
			return getRuleContexts(Function_column_name_typeContext.class);
		}
		public Function_column_name_typeContext function_column_name_type(int i) {
			return getRuleContext(Function_column_name_typeContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Function_ret_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_ret_table; }
	}

	public final Function_ret_tableContext function_ret_table() throws RecognitionException {
		Function_ret_tableContext _localctx = new Function_ret_tableContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_function_ret_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3930);
			match(TABLE);
			setState(3931);
			match(LEFT_PAREN);
			setState(3932);
			function_column_name_type();
			setState(3937);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3933);
				match(COMMA);
				setState(3934);
				function_column_name_type();
				}
				}
				setState(3939);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3940);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_column_name_typeContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public Function_column_name_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_column_name_type; }
	}

	public final Function_column_name_typeContext function_column_name_type() throws RecognitionException {
		Function_column_name_typeContext _localctx = new Function_column_name_typeContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_function_column_name_type);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3942);
			identifier();
			setState(3943);
			data_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_parametersContext extends ParserRuleContext {
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Function_argsContext function_args() {
			return getRuleContext(Function_argsContext.class,0);
		}
		public Function_parametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_parameters; }
	}

	public final Function_parametersContext function_parameters() throws RecognitionException {
		Function_parametersContext _localctx = new Function_parametersContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_function_parameters);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3945);
			schema_qualified_name();
			setState(3946);
			function_args();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_argsContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public TerminalNode MULTIPLY() { return getToken(PLpgSQLParser.MULTIPLY, 0); }
		public List<Function_argumentsContext> function_arguments() {
			return getRuleContexts(Function_argumentsContext.class);
		}
		public Function_argumentsContext function_arguments(int i) {
			return getRuleContext(Function_argumentsContext.class,i);
		}
		public Agg_orderContext agg_order() {
			return getRuleContext(Agg_orderContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Function_argsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_args; }
	}

	public final Function_argsContext function_args() throws RecognitionException {
		Function_argsContext _localctx = new Function_argsContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_function_args);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3948);
			match(LEFT_PAREN);
			setState(3963);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BY:
			case CACHE:
			case CALL:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COLUMNS:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONFLICT:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CUBE:
			case CURRENT:
			case CURSOR:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DEPENDS:
			case DETACH:
			case DICTIONARY:
			case DISABLE:
			case DISCARD:
			case DOCUMENT:
			case DOMAIN:
			case DOUBLE:
			case DROP:
			case EACH:
			case ENABLE:
			case ENCODING:
			case ENCRYPTED:
			case ENUM:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GENERATED:
			case GLOBAL:
			case GRANTED:
			case GROUPS:
			case HANDLER:
			case HEADER:
			case HOLD:
			case HOUR:
			case IDENTITY:
			case IF:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT:
			case IMPORT:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCKED:
			case LOGGED:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case METHOD:
			case MINUTE:
			case MINVALUE:
			case MODE:
			case MONTH:
			case MOVE:
			case NAME:
			case NAMES:
			case NEW:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS:
			case OBJECT:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OVER:
			case OVERRIDING:
			case OWNED:
			case OWNER:
			case PARALLEL:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POLICY:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROCEDURES:
			case PROGRAM:
			case PUBLICATION:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINES:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMAS:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SKIP_:
			case SNAPSHOT:
			case SQL:
			case STABLE:
			case STANDALONE:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STORED:
			case STRICT:
			case STRIP:
			case SUBSCRIPTION:
			case SUPPORT:
			case SYSID:
			case SYSTEM:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT:
			case TIES:
			case TRANSACTION:
			case TRANSFORM:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE:
			case VARYING:
			case VERSION:
			case VIEW:
			case VIEWS:
			case VOLATILE:
			case WHITESPACE:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML:
			case YEAR:
			case YES:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL:
			case EXISTS:
			case EXTRACT:
			case FLOAT:
			case GREATEST:
			case GROUPING:
			case INOUT:
			case INT:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case TABLESAMPLE:
			case VERBOSE:
			case IN:
			case ORDER:
			case VARIADIC:
			case ALIGNMENT:
			case BASETYPE:
			case BUFFERS:
			case BYPASSRLS:
			case CANONICAL:
			case CATEGORY:
			case COLLATABLE:
			case COMBINEFUNC:
			case COMMUTATOR:
			case CONNECT:
			case COSTS:
			case CREATEDB:
			case CREATEROLE:
			case DESERIALFUNC:
			case DETERMINISTIC:
			case DISABLE_PAGE_SKIPPING:
			case ELEMENT:
			case EXTENDED:
			case FINALFUNC:
			case FINALFUNC_EXTRA:
			case FINALFUNC_MODIFY:
			case FORCE_NOT_NULL:
			case FORCE_NULL:
			case FORCE_QUOTE:
			case FORMAT:
			case GETTOKEN:
			case HASH:
			case HASHES:
			case HEADLINE:
			case HYPOTHETICAL:
			case INDEX_CLEANUP:
			case INIT:
			case INITCOND:
			case INTERNALLENGTH:
			case JSON:
			case LC_COLLATE:
			case LC_CTYPE:
			case LEFTARG:
			case LEXIZE:
			case LEXTYPES:
			case LIST:
			case LOCALE:
			case LOGIN:
			case MAIN:
			case MERGES:
			case MFINALFUNC:
			case MFINALFUNC_EXTRA:
			case MFINALFUNC_MODIFY:
			case MINITCOND:
			case MINVFUNC:
			case MODULUS:
			case MSFUNC:
			case MSSPACE:
			case MSTYPE:
			case NEGATOR:
			case NOBYPASSRLS:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOREPLICATION:
			case NOSUPERUSER:
			case OUTPUT:
			case PASSEDBYVALUE:
			case PATH:
			case PERMISSIVE:
			case PLAIN:
			case PREFERRED:
			case PROVIDER:
			case READ_ONLY:
			case READ_WRITE:
			case RECEIVE:
			case REMAINDER:
			case REPLICATION:
			case RESTRICTED:
			case RESTRICTIVE:
			case RIGHTARG:
			case SAFE:
			case SEND:
			case SERIALFUNC:
			case SETTINGS:
			case SFUNC:
			case SHAREABLE:
			case SKIP_LOCKED:
			case SORTOP:
			case SSPACE:
			case STYPE:
			case SUBTYPE_DIFF:
			case SUBTYPE_OPCLASS:
			case SUBTYPE:
			case SUMMARY:
			case SUPERUSER:
			case TIMING:
			case TYPMOD_IN:
			case TYPMOD_OUT:
			case UNSAFE:
			case USAGE:
			case VARIABLE:
			case YAML:
			case ALIAS:
			case ASSERT:
			case CONSTANT:
			case DATATYPE:
			case DEBUG:
			case DETAIL:
			case DIAGNOSTICS:
			case ELSEIF:
			case ELSIF:
			case ERRCODE:
			case EXIT:
			case EXCEPTION:
			case FOREACH:
			case GET:
			case HINT:
			case INFO:
			case LOG:
			case LOOP:
			case MESSAGE:
			case NOTICE:
			case OPEN:
			case PERFORM:
			case QUERY:
			case RAISE:
			case RECORD:
			case RETURN:
			case REVERSE:
			case ROWTYPE:
			case SLICE:
			case SQLSTATE:
			case STACKED:
			case WARNING:
			case WHILE:
			case RIGHT_PAREN:
			case Identifier:
			case QuotedIdentifier:
				{
				setState(3957);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATTACH) | (1L << ATTRIBUTE) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BY) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG) | (1L << CHAIN) | (1L << CHARACTERISTICS) | (1L << CHECKPOINT) | (1L << CLASS) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMENTS) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONFIGURATION) | (1L << CONFLICT) | (1L << CONNECTION) | (1L << CONSTRAINTS) | (1L << CONTENT) | (1L << CONTINUE) | (1L << CONVERSION) | (1L << COPY) | (1L << COST) | (1L << CSV) | (1L << CUBE) | (1L << CURRENT) | (1L << CURSOR) | (1L << CYCLE) | (1L << DATA) | (1L << DATABASE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DEFAULTS) | (1L << DEFERRED) | (1L << DEFINER) | (1L << DELETE) | (1L << DELIMITER) | (1L << DELIMITERS) | (1L << DEPENDS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DETACH - 64)) | (1L << (DICTIONARY - 64)) | (1L << (DISABLE - 64)) | (1L << (DISCARD - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOMAIN - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (EACH - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTED - 64)) | (1L << (ENUM - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVENT - 64)) | (1L << (EXCLUDE - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXCLUSIVE - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTENSION - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FAMILY - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORCE - 64)) | (1L << (FORWARD - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GENERATED - 64)) | (1L << (GLOBAL - 64)) | (1L << (GRANTED - 64)) | (1L << (GROUPS - 64)) | (1L << (HANDLER - 64)) | (1L << (HEADER - 64)) | (1L << (HOLD - 64)) | (1L << (HOUR - 64)) | (1L << (IDENTITY - 64)) | (1L << (IF - 64)) | (1L << (IMMEDIATE - 64)) | (1L << (IMMUTABLE - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPORT - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INCREMENT - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXES - 64)) | (1L << (INHERIT - 64)) | (1L << (INHERITS - 64)) | (1L << (INLINE - 64)) | (1L << (INPUT - 64)) | (1L << (INSENSITIVE - 64)) | (1L << (INSERT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INVOKER - 64)) | (1L << (ISOLATION - 64)) | (1L << (KEY - 64)) | (1L << (LABEL - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LARGE - 64)) | (1L << (LAST - 64)) | (1L << (LEAKPROOF - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LEVEL - 128)) | (1L << (LISTEN - 128)) | (1L << (LOAD - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCATION - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKED - 128)) | (1L << (LOGGED - 128)) | (1L << (MAPPING - 128)) | (1L << (MATCH - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MAXVALUE - 128)) | (1L << (METHOD - 128)) | (1L << (MINUTE - 128)) | (1L << (MINVALUE - 128)) | (1L << (MODE - 128)) | (1L << (MONTH - 128)) | (1L << (MOVE - 128)) | (1L << (NAME - 128)) | (1L << (NAMES - 128)) | (1L << (NEW - 128)) | (1L << (NEXT - 128)) | (1L << (NO - 128)) | (1L << (NOTHING - 128)) | (1L << (NOTIFY - 128)) | (1L << (NOWAIT - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFF - 128)) | (1L << (OIDS - 128)) | (1L << (OLD - 128)) | (1L << (OPERATOR - 128)) | (1L << (OPTION - 128)) | (1L << (OPTIONS - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OTHERS - 128)) | (1L << (OVER - 128)) | (1L << (OVERRIDING - 128)) | (1L << (OWNED - 128)) | (1L << (OWNER - 128)) | (1L << (PARALLEL - 128)) | (1L << (PARSER - 128)) | (1L << (PARTIAL - 128)) | (1L << (PARTITION - 128)) | (1L << (PASSING - 128)) | (1L << (PASSWORD - 128)) | (1L << (PLANS - 128)) | (1L << (POLICY - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PREPARED - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRIOR - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROCEDURAL - 128)) | (1L << (PROCEDURE - 128)) | (1L << (PROCEDURES - 128)) | (1L << (PROGRAM - 128)) | (1L << (PUBLICATION - 128)) | (1L << (QUOTE - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (REASSIGN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (RECHECK - 192)) | (1L << (RECURSIVE - 192)) | (1L << (REF - 192)) | (1L << (REFERENCING - 192)) | (1L << (REFRESH - 192)) | (1L << (REINDEX - 192)) | (1L << (RELATIVE - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (REPLICA - 192)) | (1L << (RESET - 192)) | (1L << (RESTART - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUTINE - 192)) | (1L << (ROUTINES - 192)) | (1L << (ROWS - 192)) | (1L << (RULE - 192)) | (1L << (SAVEPOINT - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SCROLL - 192)) | (1L << (SEARCH - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEQUENCE - 192)) | (1L << (SEQUENCES - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SERVER - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHARE - 192)) | (1L << (SHOW - 192)) | (1L << (SIMPLE - 192)) | (1L << (SKIP_ - 192)) | (1L << (SNAPSHOT - 192)) | (1L << (SQL - 192)) | (1L << (STABLE - 192)) | (1L << (STANDALONE - 192)) | (1L << (START - 192)) | (1L << (STATEMENT - 192)) | (1L << (STATISTICS - 192)) | (1L << (STDIN - 192)) | (1L << (STDOUT - 192)) | (1L << (STORAGE - 192)) | (1L << (STORED - 192)) | (1L << (STRICT - 192)) | (1L << (STRIP - 192)) | (1L << (SUBSCRIPTION - 192)) | (1L << (SUPPORT - 192)) | (1L << (SYSID - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESPACE - 192)) | (1L << (TEMP - 192)) | (1L << (TEMPLATE - 192)) | (1L << (TEMPORARY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TEXT - 256)) | (1L << (TIES - 256)) | (1L << (TRANSACTION - 256)) | (1L << (TRANSFORM - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TRUSTED - 256)) | (1L << (TYPE - 256)) | (1L << (TYPES - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNENCRYPTED - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNLISTEN - 256)) | (1L << (UNLOGGED - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (VACUUM - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALIDATOR - 256)) | (1L << (VALUE - 256)) | (1L << (VARYING - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (VIEWS - 256)) | (1L << (VOLATILE - 256)) | (1L << (WHITESPACE - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (XML - 256)) | (1L << (YEAR - 256)) | (1L << (YES - 256)) | (1L << (ZONE - 256)) | (1L << (BETWEEN - 256)) | (1L << (BIGINT - 256)) | (1L << (BIT - 256)) | (1L << (BOOLEAN - 256)) | (1L << (CHAR - 256)) | (1L << (CHARACTER - 256)) | (1L << (COALESCE - 256)) | (1L << (DEC - 256)) | (1L << (DECIMAL - 256)) | (1L << (EXISTS - 256)) | (1L << (EXTRACT - 256)) | (1L << (FLOAT - 256)) | (1L << (GREATEST - 256)) | (1L << (GROUPING - 256)) | (1L << (INOUT - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERVAL - 256)) | (1L << (LEAST - 256)) | (1L << (NATIONAL - 256)) | (1L << (NCHAR - 256)) | (1L << (NONE - 256)) | (1L << (NULLIF - 256)) | (1L << (NUMERIC - 256)) | (1L << (OUT - 256)) | (1L << (OVERLAY - 256)) | (1L << (POSITION - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRECISION - 320)) | (1L << (REAL - 320)) | (1L << (ROW - 320)) | (1L << (SETOF - 320)) | (1L << (SMALLINT - 320)) | (1L << (SUBSTRING - 320)) | (1L << (TIME - 320)) | (1L << (TIMESTAMP - 320)) | (1L << (TREAT - 320)) | (1L << (TRIM - 320)) | (1L << (VALUES - 320)) | (1L << (VARCHAR - 320)) | (1L << (XMLATTRIBUTES - 320)) | (1L << (XMLCONCAT - 320)) | (1L << (XMLELEMENT - 320)) | (1L << (XMLEXISTS - 320)) | (1L << (XMLFOREST - 320)) | (1L << (XMLNAMESPACES - 320)) | (1L << (XMLPARSE - 320)) | (1L << (XMLPI - 320)) | (1L << (XMLROOT - 320)) | (1L << (XMLSERIALIZE - 320)) | (1L << (XMLTABLE - 320)) | (1L << (AUTHORIZATION - 320)) | (1L << (BINARY - 320)) | (1L << (COLLATION - 320)) | (1L << (CONCURRENTLY - 320)) | (1L << (CROSS - 320)) | (1L << (CURRENT_SCHEMA - 320)) | (1L << (FREEZE - 320)) | (1L << (FULL - 320)) | (1L << (ILIKE - 320)) | (1L << (INNER - 320)) | (1L << (IS - 320)) | (1L << (ISNULL - 320)) | (1L << (JOIN - 320)) | (1L << (LEFT - 320)) | (1L << (LIKE - 320)) | (1L << (NATURAL - 320)) | (1L << (NOTNULL - 320)) | (1L << (OUTER - 320)) | (1L << (OVERLAPS - 320)) | (1L << (RIGHT - 320)) | (1L << (SIMILAR - 320)) | (1L << (TABLESAMPLE - 320)) | (1L << (VERBOSE - 320)))) != 0) || ((((_la - 405)) & ~0x3f) == 0 && ((1L << (_la - 405)) & ((1L << (IN - 405)) | (1L << (VARIADIC - 405)) | (1L << (ALIGNMENT - 405)) | (1L << (BASETYPE - 405)) | (1L << (BUFFERS - 405)) | (1L << (BYPASSRLS - 405)) | (1L << (CANONICAL - 405)) | (1L << (CATEGORY - 405)) | (1L << (COLLATABLE - 405)) | (1L << (COMBINEFUNC - 405)) | (1L << (COMMUTATOR - 405)) | (1L << (CONNECT - 405)) | (1L << (COSTS - 405)) | (1L << (CREATEDB - 405)) | (1L << (CREATEROLE - 405)) | (1L << (DESERIALFUNC - 405)) | (1L << (DETERMINISTIC - 405)) | (1L << (DISABLE_PAGE_SKIPPING - 405)) | (1L << (ELEMENT - 405)) | (1L << (EXTENDED - 405)) | (1L << (FINALFUNC - 405)) | (1L << (FINALFUNC_EXTRA - 405)) | (1L << (FINALFUNC_MODIFY - 405)) | (1L << (FORCE_NOT_NULL - 405)) | (1L << (FORCE_NULL - 405)) | (1L << (FORCE_QUOTE - 405)) | (1L << (FORMAT - 405)) | (1L << (GETTOKEN - 405)))) != 0) || ((((_la - 469)) & ~0x3f) == 0 && ((1L << (_la - 469)) & ((1L << (HASH - 469)) | (1L << (HASHES - 469)) | (1L << (HEADLINE - 469)) | (1L << (HYPOTHETICAL - 469)) | (1L << (INDEX_CLEANUP - 469)) | (1L << (INIT - 469)) | (1L << (INITCOND - 469)) | (1L << (INTERNALLENGTH - 469)) | (1L << (JSON - 469)) | (1L << (LC_COLLATE - 469)) | (1L << (LC_CTYPE - 469)) | (1L << (LEFTARG - 469)) | (1L << (LEXIZE - 469)) | (1L << (LEXTYPES - 469)) | (1L << (LIST - 469)) | (1L << (LOCALE - 469)) | (1L << (LOGIN - 469)) | (1L << (MAIN - 469)) | (1L << (MERGES - 469)) | (1L << (MFINALFUNC - 469)) | (1L << (MFINALFUNC_EXTRA - 469)) | (1L << (MFINALFUNC_MODIFY - 469)) | (1L << (MINITCOND - 469)) | (1L << (MINVFUNC - 469)) | (1L << (MODULUS - 469)) | (1L << (MSFUNC - 469)) | (1L << (MSSPACE - 469)) | (1L << (MSTYPE - 469)) | (1L << (NEGATOR - 469)) | (1L << (NOBYPASSRLS - 469)) | (1L << (NOCREATEDB - 469)) | (1L << (NOCREATEROLE - 469)) | (1L << (NOINHERIT - 469)) | (1L << (NOLOGIN - 469)) | (1L << (NOREPLICATION - 469)) | (1L << (NOSUPERUSER - 469)) | (1L << (OUTPUT - 469)) | (1L << (PASSEDBYVALUE - 469)) | (1L << (PATH - 469)) | (1L << (PERMISSIVE - 469)) | (1L << (PLAIN - 469)) | (1L << (PREFERRED - 469)) | (1L << (PROVIDER - 469)) | (1L << (READ_ONLY - 469)) | (1L << (READ_WRITE - 469)) | (1L << (RECEIVE - 469)) | (1L << (REMAINDER - 469)) | (1L << (REPLICATION - 469)) | (1L << (RESTRICTED - 469)) | (1L << (RESTRICTIVE - 469)) | (1L << (RIGHTARG - 469)) | (1L << (SAFE - 469)) | (1L << (SEND - 469)) | (1L << (SERIALFUNC - 469)) | (1L << (SETTINGS - 469)) | (1L << (SFUNC - 469)) | (1L << (SHAREABLE - 469)) | (1L << (SKIP_LOCKED - 469)) | (1L << (SORTOP - 469)) | (1L << (SSPACE - 469)) | (1L << (STYPE - 469)) | (1L << (SUBTYPE_DIFF - 469)) | (1L << (SUBTYPE_OPCLASS - 469)) | (1L << (SUBTYPE - 469)))) != 0) || ((((_la - 533)) & ~0x3f) == 0 && ((1L << (_la - 533)) & ((1L << (SUMMARY - 533)) | (1L << (SUPERUSER - 533)) | (1L << (TIMING - 533)) | (1L << (TYPMOD_IN - 533)) | (1L << (TYPMOD_OUT - 533)) | (1L << (UNSAFE - 533)) | (1L << (USAGE - 533)) | (1L << (VARIABLE - 533)) | (1L << (YAML - 533)) | (1L << (ALIAS - 533)) | (1L << (ASSERT - 533)) | (1L << (CONSTANT - 533)) | (1L << (DATATYPE - 533)) | (1L << (DEBUG - 533)) | (1L << (DETAIL - 533)) | (1L << (DIAGNOSTICS - 533)) | (1L << (ELSEIF - 533)) | (1L << (ELSIF - 533)) | (1L << (ERRCODE - 533)) | (1L << (EXIT - 533)) | (1L << (EXCEPTION - 533)) | (1L << (FOREACH - 533)) | (1L << (GET - 533)) | (1L << (HINT - 533)) | (1L << (INFO - 533)) | (1L << (LOG - 533)) | (1L << (LOOP - 533)) | (1L << (MESSAGE - 533)) | (1L << (NOTICE - 533)) | (1L << (OPEN - 533)) | (1L << (PERFORM - 533)) | (1L << (QUERY - 533)) | (1L << (RAISE - 533)) | (1L << (RECORD - 533)) | (1L << (RETURN - 533)) | (1L << (REVERSE - 533)) | (1L << (ROWTYPE - 533)) | (1L << (SLICE - 533)) | (1L << (SQLSTATE - 533)) | (1L << (STACKED - 533)) | (1L << (WARNING - 533)) | (1L << (WHILE - 533)))) != 0) || _la==Identifier || _la==QuotedIdentifier) {
					{
					setState(3949);
					function_arguments();
					setState(3954);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3950);
						match(COMMA);
						setState(3951);
						function_arguments();
						}
						}
						setState(3956);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(3960);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(3959);
					agg_order();
					}
				}

				}
				break;
			case MULTIPLY:
				{
				setState(3962);
				match(MULTIPLY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3965);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Agg_orderContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(PLpgSQLParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PLpgSQLParser.BY, 0); }
		public List<Function_argumentsContext> function_arguments() {
			return getRuleContexts(Function_argumentsContext.class);
		}
		public Function_argumentsContext function_arguments(int i) {
			return getRuleContext(Function_argumentsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Agg_orderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_agg_order; }
	}

	public final Agg_orderContext agg_order() throws RecognitionException {
		Agg_orderContext _localctx = new Agg_orderContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_agg_order);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3967);
			match(ORDER);
			setState(3968);
			match(BY);
			setState(3969);
			function_arguments();
			setState(3974);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3970);
				match(COMMA);
				setState(3971);
				function_arguments();
				}
				}
				setState(3976);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_stringContext extends ParserRuleContext {
		public TerminalNode BeginDollarStringConstant() { return getToken(PLpgSQLParser.BeginDollarStringConstant, 0); }
		public TerminalNode EndDollarStringConstant() { return getToken(PLpgSQLParser.EndDollarStringConstant, 0); }
		public List<TerminalNode> Text_between_Dollar() { return getTokens(PLpgSQLParser.Text_between_Dollar); }
		public TerminalNode Text_between_Dollar(int i) {
			return getToken(PLpgSQLParser.Text_between_Dollar, i);
		}
		public TerminalNode Character_String_Literal() { return getToken(PLpgSQLParser.Character_String_Literal, 0); }
		public Character_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_string; }
	}

	public final Character_stringContext character_string() throws RecognitionException {
		Character_stringContext _localctx = new Character_stringContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_character_string);
		int _la;
		try {
			setState(3986);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BeginDollarStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(3977);
				match(BeginDollarStringConstant);
				setState(3981);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==Text_between_Dollar) {
					{
					{
					setState(3978);
					match(Text_between_Dollar);
					}
					}
					setState(3983);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3984);
				match(EndDollarStringConstant);
				}
				break;
			case Character_String_Literal:
				enterOuterAlt(_localctx, 2);
				{
				setState(3985);
				match(Character_String_Literal);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_argumentsContext extends ParserRuleContext {
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public ArgmodeContext argmode() {
			return getRuleContext(ArgmodeContext.class,0);
		}
		public Identifier_nontypeContext identifier_nontype() {
			return getRuleContext(Identifier_nontypeContext.class,0);
		}
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PLpgSQLParser.DEFAULT, 0); }
		public TerminalNode EQUAL() { return getToken(PLpgSQLParser.EQUAL, 0); }
		public Function_argumentsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_arguments; }
	}

	public final Function_argumentsContext function_arguments() throws RecognitionException {
		Function_argumentsContext _localctx = new Function_argumentsContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_function_arguments);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3989);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,441,_ctx) ) {
			case 1:
				{
				setState(3988);
				argmode();
				}
				break;
			}
			setState(3992);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,442,_ctx) ) {
			case 1:
				{
				setState(3991);
				identifier_nontype();
				}
				break;
			}
			setState(3994);
			data_type();
			setState(3997);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==EQUAL) {
				{
				setState(3995);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==EQUAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3996);
				vex(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArgmodeContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(PLpgSQLParser.IN, 0); }
		public TerminalNode OUT() { return getToken(PLpgSQLParser.OUT, 0); }
		public TerminalNode INOUT() { return getToken(PLpgSQLParser.INOUT, 0); }
		public TerminalNode VARIADIC() { return getToken(PLpgSQLParser.VARIADIC, 0); }
		public ArgmodeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_argmode; }
	}

	public final ArgmodeContext argmode() throws RecognitionException {
		ArgmodeContext _localctx = new ArgmodeContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_argmode);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3999);
			_la = _input.LA(1);
			if ( !(_la==INOUT || _la==OUT || _la==IN || _la==VARIADIC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_sequence_statementContext extends ParserRuleContext {
		public Schema_qualified_nameContext name;
		public TerminalNode SEQUENCE() { return getToken(PLpgSQLParser.SEQUENCE, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public List<Sequence_bodyContext> sequence_body() {
			return getRuleContexts(Sequence_bodyContext.class);
		}
		public Sequence_bodyContext sequence_body(int i) {
			return getRuleContext(Sequence_bodyContext.class,i);
		}
		public TerminalNode TEMPORARY() { return getToken(PLpgSQLParser.TEMPORARY, 0); }
		public TerminalNode TEMP() { return getToken(PLpgSQLParser.TEMP, 0); }
		public Create_sequence_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_sequence_statement; }
	}

	public final Create_sequence_statementContext create_sequence_statement() throws RecognitionException {
		Create_sequence_statementContext _localctx = new Create_sequence_statementContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_create_sequence_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4002);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				setState(4001);
				_la = _input.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4004);
			match(SEQUENCE);
			setState(4006);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,445,_ctx) ) {
			case 1:
				{
				setState(4005);
				if_not_exists();
				}
				break;
			}
			setState(4008);
			((Create_sequence_statementContext)_localctx).name = schema_qualified_name();
			setState(4012);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CACHE || _la==CYCLE || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (INCREMENT - 110)) | (1L << (MAXVALUE - 110)) | (1L << (MINVALUE - 110)) | (1L << (NO - 110)) | (1L << (OWNED - 110)))) != 0) || _la==SEQUENCE || _la==START || _la==AS) {
				{
				{
				setState(4009);
				sequence_body();
				}
				}
				setState(4014);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sequence_bodyContext extends ParserRuleContext {
		public Token type;
		public Schema_qualified_nameContext name;
		public Signed_numerical_literalContext incr;
		public Signed_numerical_literalContext minval;
		public Signed_numerical_literalContext maxval;
		public Signed_numerical_literalContext start_val;
		public Signed_numerical_literalContext cache_val;
		public Token cycle_true;
		public Token cycle_val;
		public Schema_qualified_nameContext col_name;
		public TerminalNode AS() { return getToken(PLpgSQLParser.AS, 0); }
		public TerminalNode SMALLINT() { return getToken(PLpgSQLParser.SMALLINT, 0); }
		public TerminalNode INTEGER() { return getToken(PLpgSQLParser.INTEGER, 0); }
		public TerminalNode BIGINT() { return getToken(PLpgSQLParser.BIGINT, 0); }
		public TerminalNode SEQUENCE() { return getToken(PLpgSQLParser.SEQUENCE, 0); }
		public TerminalNode NAME() { return getToken(PLpgSQLParser.NAME, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public TerminalNode INCREMENT() { return getToken(PLpgSQLParser.INCREMENT, 0); }
		public Signed_numerical_literalContext signed_numerical_literal() {
			return getRuleContext(Signed_numerical_literalContext.class,0);
		}
		public TerminalNode BY() { return getToken(PLpgSQLParser.BY, 0); }
		public TerminalNode MINVALUE() { return getToken(PLpgSQLParser.MINVALUE, 0); }
		public TerminalNode NO() { return getToken(PLpgSQLParser.NO, 0); }
		public TerminalNode MAXVALUE() { return getToken(PLpgSQLParser.MAXVALUE, 0); }
		public TerminalNode START() { return getToken(PLpgSQLParser.START, 0); }
		public TerminalNode WITH() { return getToken(PLpgSQLParser.WITH, 0); }
		public TerminalNode CACHE() { return getToken(PLpgSQLParser.CACHE, 0); }
		public TerminalNode CYCLE() { return getToken(PLpgSQLParser.CYCLE, 0); }
		public TerminalNode OWNED() { return getToken(PLpgSQLParser.OWNED, 0); }
		public Sequence_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_body; }
	}

	public final Sequence_bodyContext sequence_body() throws RecognitionException {
		Sequence_bodyContext _localctx = new Sequence_bodyContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_sequence_body);
		int _la;
		try {
			setState(4051);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,452,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4015);
				match(AS);
				setState(4016);
				((Sequence_bodyContext)_localctx).type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 294)) & ~0x3f) == 0 && ((1L << (_la - 294)) & ((1L << (BIGINT - 294)) | (1L << (INTEGER - 294)) | (1L << (SMALLINT - 294)))) != 0)) ) {
					((Sequence_bodyContext)_localctx).type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4017);
				match(SEQUENCE);
				setState(4018);
				match(NAME);
				setState(4019);
				((Sequence_bodyContext)_localctx).name = schema_qualified_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4020);
				match(INCREMENT);
				setState(4022);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BY) {
					{
					setState(4021);
					match(BY);
					}
				}

				setState(4024);
				((Sequence_bodyContext)_localctx).incr = signed_numerical_literal();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4029);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case MINVALUE:
					{
					setState(4025);
					match(MINVALUE);
					setState(4026);
					((Sequence_bodyContext)_localctx).minval = signed_numerical_literal();
					}
					break;
				case NO:
					{
					setState(4027);
					match(NO);
					setState(4028);
					match(MINVALUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4035);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case MAXVALUE:
					{
					setState(4031);
					match(MAXVALUE);
					setState(4032);
					((Sequence_bodyContext)_localctx).maxval = signed_numerical_literal();
					}
					break;
				case NO:
					{
					setState(4033);
					match(NO);
					setState(4034);
					match(MAXVALUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4037);
				match(START);
				setState(4039);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4038);
					match(WITH);
					}
				}

				setState(4041);
				((Sequence_bodyContext)_localctx).start_val = signed_numerical_literal();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4042);
				match(CACHE);
				setState(4043);
				((Sequence_bodyContext)_localctx).cache_val = signed_numerical_literal();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4045);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(4044);
					((Sequence_bodyContext)_localctx).cycle_true = match(NO);
					}
				}

				setState(4047);
				((Sequence_bodyContext)_localctx).cycle_val = match(CYCLE);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4048);
				match(OWNED);
				setState(4049);
				match(BY);
				setState(4050);
				((Sequence_bodyContext)_localctx).col_name = schema_qualified_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Signed_number_literalContext extends ParserRuleContext {
		public TerminalNode NUMBER_LITERAL() { return getToken(PLpgSQLParser.NUMBER_LITERAL, 0); }
		public SignContext sign() {
			return getRuleContext(SignContext.class,0);
		}
		public Signed_number_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signed_number_literal; }
	}

	public final Signed_number_literalContext signed_number_literal() throws RecognitionException {
		Signed_number_literalContext _localctx = new Signed_number_literalContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_signed_number_literal);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4054);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				setState(4053);
				sign();
				}
			}

			setState(4056);
			match(NUMBER_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Signed_numerical_literalContext extends ParserRuleContext {
		public Unsigned_numeric_literalContext unsigned_numeric_literal() {
			return getRuleContext(Unsigned_numeric_literalContext.class,0);
		}
		public SignContext sign() {
			return getRuleContext(SignContext.class,0);
		}
		public Signed_numerical_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signed_numerical_literal; }
	}

	public final Signed_numerical_literalContext signed_numerical_literal() throws RecognitionException {
		Signed_numerical_literalContext _localctx = new Signed_numerical_literalContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_signed_numerical_literal);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4059);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				setState(4058);
				sign();
				}
			}

			setState(4061);
			unsigned_numeric_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignContext extends ParserRuleContext {
		public TerminalNode PLUS() { return getToken(PLpgSQLParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(PLpgSQLParser.MINUS, 0); }
		public SignContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sign; }
	}

	public final SignContext sign() throws RecognitionException {
		SignContext _localctx = new SignContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_sign);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4063);
			_la = _input.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_schema_statementContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode SCHEMA() { return getToken(PLpgSQLParser.SCHEMA, 0); }
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public TerminalNode AUTHORIZATION() { return getToken(PLpgSQLParser.AUTHORIZATION, 0); }
		public User_nameContext user_name() {
			return getRuleContext(User_nameContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Create_schema_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_schema_statement; }
	}

	public final Create_schema_statementContext create_schema_statement() throws RecognitionException {
		Create_schema_statementContext _localctx = new Create_schema_statementContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_create_schema_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4065);
			match(SCHEMA);
			setState(4067);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,455,_ctx) ) {
			case 1:
				{
				setState(4066);
				if_not_exists();
				}
				break;
			}
			setState(4070);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATTACH) | (1L << ATTRIBUTE) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BY) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG) | (1L << CHAIN) | (1L << CHARACTERISTICS) | (1L << CHECKPOINT) | (1L << CLASS) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMENTS) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONFIGURATION) | (1L << CONFLICT) | (1L << CONNECTION) | (1L << CONSTRAINTS) | (1L << CONTENT) | (1L << CONTINUE) | (1L << CONVERSION) | (1L << COPY) | (1L << COST) | (1L << CSV) | (1L << CUBE) | (1L << CURRENT) | (1L << CURSOR) | (1L << CYCLE) | (1L << DATA) | (1L << DATABASE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DEFAULTS) | (1L << DEFERRED) | (1L << DEFINER) | (1L << DELETE) | (1L << DELIMITER) | (1L << DELIMITERS) | (1L << DEPENDS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DETACH - 64)) | (1L << (DICTIONARY - 64)) | (1L << (DISABLE - 64)) | (1L << (DISCARD - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOMAIN - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (EACH - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTED - 64)) | (1L << (ENUM - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVENT - 64)) | (1L << (EXCLUDE - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXCLUSIVE - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTENSION - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FAMILY - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORCE - 64)) | (1L << (FORWARD - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GENERATED - 64)) | (1L << (GLOBAL - 64)) | (1L << (GRANTED - 64)) | (1L << (GROUPS - 64)) | (1L << (HANDLER - 64)) | (1L << (HEADER - 64)) | (1L << (HOLD - 64)) | (1L << (HOUR - 64)) | (1L << (IDENTITY - 64)) | (1L << (IF - 64)) | (1L << (IMMEDIATE - 64)) | (1L << (IMMUTABLE - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPORT - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INCREMENT - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXES - 64)) | (1L << (INHERIT - 64)) | (1L << (INHERITS - 64)) | (1L << (INLINE - 64)) | (1L << (INPUT - 64)) | (1L << (INSENSITIVE - 64)) | (1L << (INSERT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INVOKER - 64)) | (1L << (ISOLATION - 64)) | (1L << (KEY - 64)) | (1L << (LABEL - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LARGE - 64)) | (1L << (LAST - 64)) | (1L << (LEAKPROOF - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LEVEL - 128)) | (1L << (LISTEN - 128)) | (1L << (LOAD - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCATION - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKED - 128)) | (1L << (LOGGED - 128)) | (1L << (MAPPING - 128)) | (1L << (MATCH - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MAXVALUE - 128)) | (1L << (METHOD - 128)) | (1L << (MINUTE - 128)) | (1L << (MINVALUE - 128)) | (1L << (MODE - 128)) | (1L << (MONTH - 128)) | (1L << (MOVE - 128)) | (1L << (NAME - 128)) | (1L << (NAMES - 128)) | (1L << (NEW - 128)) | (1L << (NEXT - 128)) | (1L << (NO - 128)) | (1L << (NOTHING - 128)) | (1L << (NOTIFY - 128)) | (1L << (NOWAIT - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFF - 128)) | (1L << (OIDS - 128)) | (1L << (OLD - 128)) | (1L << (OPERATOR - 128)) | (1L << (OPTION - 128)) | (1L << (OPTIONS - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OTHERS - 128)) | (1L << (OVER - 128)) | (1L << (OVERRIDING - 128)) | (1L << (OWNED - 128)) | (1L << (OWNER - 128)) | (1L << (PARALLEL - 128)) | (1L << (PARSER - 128)) | (1L << (PARTIAL - 128)) | (1L << (PARTITION - 128)) | (1L << (PASSING - 128)) | (1L << (PASSWORD - 128)) | (1L << (PLANS - 128)) | (1L << (POLICY - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PREPARED - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRIOR - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROCEDURAL - 128)) | (1L << (PROCEDURE - 128)) | (1L << (PROCEDURES - 128)) | (1L << (PROGRAM - 128)) | (1L << (PUBLICATION - 128)) | (1L << (QUOTE - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (REASSIGN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (RECHECK - 192)) | (1L << (RECURSIVE - 192)) | (1L << (REF - 192)) | (1L << (REFERENCING - 192)) | (1L << (REFRESH - 192)) | (1L << (REINDEX - 192)) | (1L << (RELATIVE - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (REPLICA - 192)) | (1L << (RESET - 192)) | (1L << (RESTART - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUTINE - 192)) | (1L << (ROUTINES - 192)) | (1L << (ROWS - 192)) | (1L << (RULE - 192)) | (1L << (SAVEPOINT - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SCROLL - 192)) | (1L << (SEARCH - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEQUENCE - 192)) | (1L << (SEQUENCES - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SERVER - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHARE - 192)) | (1L << (SHOW - 192)) | (1L << (SIMPLE - 192)) | (1L << (SKIP_ - 192)) | (1L << (SNAPSHOT - 192)) | (1L << (SQL - 192)) | (1L << (STABLE - 192)) | (1L << (STANDALONE - 192)) | (1L << (START - 192)) | (1L << (STATEMENT - 192)) | (1L << (STATISTICS - 192)) | (1L << (STDIN - 192)) | (1L << (STDOUT - 192)) | (1L << (STORAGE - 192)) | (1L << (STORED - 192)) | (1L << (STRICT - 192)) | (1L << (STRIP - 192)) | (1L << (SUBSCRIPTION - 192)) | (1L << (SUPPORT - 192)) | (1L << (SYSID - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESPACE - 192)) | (1L << (TEMP - 192)) | (1L << (TEMPLATE - 192)) | (1L << (TEMPORARY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TEXT - 256)) | (1L << (TIES - 256)) | (1L << (TRANSACTION - 256)) | (1L << (TRANSFORM - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TRUSTED - 256)) | (1L << (TYPE - 256)) | (1L << (TYPES - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNENCRYPTED - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNLISTEN - 256)) | (1L << (UNLOGGED - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (VACUUM - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALIDATOR - 256)) | (1L << (VALUE - 256)) | (1L << (VARYING - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (VIEWS - 256)) | (1L << (VOLATILE - 256)) | (1L << (WHITESPACE - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (XML - 256)) | (1L << (YEAR - 256)) | (1L << (YES - 256)) | (1L << (ZONE - 256)) | (1L << (BETWEEN - 256)) | (1L << (BIGINT - 256)) | (1L << (BIT - 256)) | (1L << (BOOLEAN - 256)) | (1L << (CHAR - 256)) | (1L << (CHARACTER - 256)) | (1L << (COALESCE - 256)) | (1L << (DEC - 256)) | (1L << (DECIMAL - 256)) | (1L << (EXISTS - 256)) | (1L << (EXTRACT - 256)) | (1L << (FLOAT - 256)) | (1L << (GREATEST - 256)) | (1L << (GROUPING - 256)) | (1L << (INOUT - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERVAL - 256)) | (1L << (LEAST - 256)) | (1L << (NATIONAL - 256)) | (1L << (NCHAR - 256)) | (1L << (NONE - 256)) | (1L << (NULLIF - 256)) | (1L << (NUMERIC - 256)) | (1L << (OUT - 256)) | (1L << (OVERLAY - 256)) | (1L << (POSITION - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRECISION - 320)) | (1L << (REAL - 320)) | (1L << (ROW - 320)) | (1L << (SETOF - 320)) | (1L << (SMALLINT - 320)) | (1L << (SUBSTRING - 320)) | (1L << (TIME - 320)) | (1L << (TIMESTAMP - 320)) | (1L << (TREAT - 320)) | (1L << (TRIM - 320)) | (1L << (VALUES - 320)) | (1L << (VARCHAR - 320)) | (1L << (XMLATTRIBUTES - 320)) | (1L << (XMLCONCAT - 320)) | (1L << (XMLELEMENT - 320)) | (1L << (XMLEXISTS - 320)) | (1L << (XMLFOREST - 320)) | (1L << (XMLNAMESPACES - 320)) | (1L << (XMLPARSE - 320)) | (1L << (XMLPI - 320)) | (1L << (XMLROOT - 320)) | (1L << (XMLSERIALIZE - 320)) | (1L << (XMLTABLE - 320)))) != 0) || ((((_la - 443)) & ~0x3f) == 0 && ((1L << (_la - 443)) & ((1L << (ALIGNMENT - 443)) | (1L << (BASETYPE - 443)) | (1L << (BUFFERS - 443)) | (1L << (BYPASSRLS - 443)) | (1L << (CANONICAL - 443)) | (1L << (CATEGORY - 443)) | (1L << (COLLATABLE - 443)) | (1L << (COMBINEFUNC - 443)) | (1L << (COMMUTATOR - 443)) | (1L << (CONNECT - 443)) | (1L << (COSTS - 443)) | (1L << (CREATEDB - 443)) | (1L << (CREATEROLE - 443)) | (1L << (DESERIALFUNC - 443)) | (1L << (DETERMINISTIC - 443)) | (1L << (DISABLE_PAGE_SKIPPING - 443)) | (1L << (ELEMENT - 443)) | (1L << (EXTENDED - 443)) | (1L << (FINALFUNC - 443)) | (1L << (FINALFUNC_EXTRA - 443)) | (1L << (FINALFUNC_MODIFY - 443)) | (1L << (FORCE_NOT_NULL - 443)) | (1L << (FORCE_NULL - 443)) | (1L << (FORCE_QUOTE - 443)) | (1L << (FORMAT - 443)) | (1L << (GETTOKEN - 443)) | (1L << (HASH - 443)) | (1L << (HASHES - 443)) | (1L << (HEADLINE - 443)) | (1L << (HYPOTHETICAL - 443)) | (1L << (INDEX_CLEANUP - 443)) | (1L << (INIT - 443)) | (1L << (INITCOND - 443)) | (1L << (INTERNALLENGTH - 443)) | (1L << (JSON - 443)) | (1L << (LC_COLLATE - 443)) | (1L << (LC_CTYPE - 443)) | (1L << (LEFTARG - 443)) | (1L << (LEXIZE - 443)) | (1L << (LEXTYPES - 443)) | (1L << (LIST - 443)) | (1L << (LOCALE - 443)) | (1L << (LOGIN - 443)) | (1L << (MAIN - 443)) | (1L << (MERGES - 443)) | (1L << (MFINALFUNC - 443)) | (1L << (MFINALFUNC_EXTRA - 443)) | (1L << (MFINALFUNC_MODIFY - 443)) | (1L << (MINITCOND - 443)) | (1L << (MINVFUNC - 443)) | (1L << (MODULUS - 443)) | (1L << (MSFUNC - 443)) | (1L << (MSSPACE - 443)) | (1L << (MSTYPE - 443)) | (1L << (NEGATOR - 443)) | (1L << (NOBYPASSRLS - 443)) | (1L << (NOCREATEDB - 443)) | (1L << (NOCREATEROLE - 443)) | (1L << (NOINHERIT - 443)) | (1L << (NOLOGIN - 443)) | (1L << (NOREPLICATION - 443)) | (1L << (NOSUPERUSER - 443)) | (1L << (OUTPUT - 443)) | (1L << (PASSEDBYVALUE - 443)))) != 0) || ((((_la - 507)) & ~0x3f) == 0 && ((1L << (_la - 507)) & ((1L << (PATH - 507)) | (1L << (PERMISSIVE - 507)) | (1L << (PLAIN - 507)) | (1L << (PREFERRED - 507)) | (1L << (PROVIDER - 507)) | (1L << (READ_ONLY - 507)) | (1L << (READ_WRITE - 507)) | (1L << (RECEIVE - 507)) | (1L << (REMAINDER - 507)) | (1L << (REPLICATION - 507)) | (1L << (RESTRICTED - 507)) | (1L << (RESTRICTIVE - 507)) | (1L << (RIGHTARG - 507)) | (1L << (SAFE - 507)) | (1L << (SEND - 507)) | (1L << (SERIALFUNC - 507)) | (1L << (SETTINGS - 507)) | (1L << (SFUNC - 507)) | (1L << (SHAREABLE - 507)) | (1L << (SKIP_LOCKED - 507)) | (1L << (SORTOP - 507)) | (1L << (SSPACE - 507)) | (1L << (STYPE - 507)) | (1L << (SUBTYPE_DIFF - 507)) | (1L << (SUBTYPE_OPCLASS - 507)) | (1L << (SUBTYPE - 507)) | (1L << (SUMMARY - 507)) | (1L << (SUPERUSER - 507)) | (1L << (TIMING - 507)) | (1L << (TYPMOD_IN - 507)) | (1L << (TYPMOD_OUT - 507)) | (1L << (UNSAFE - 507)) | (1L << (USAGE - 507)) | (1L << (VARIABLE - 507)) | (1L << (YAML - 507)) | (1L << (ALIAS - 507)) | (1L << (ASSERT - 507)) | (1L << (CONSTANT - 507)) | (1L << (DATATYPE - 507)) | (1L << (DEBUG - 507)) | (1L << (DETAIL - 507)) | (1L << (DIAGNOSTICS - 507)) | (1L << (ELSEIF - 507)) | (1L << (ELSIF - 507)) | (1L << (ERRCODE - 507)) | (1L << (EXIT - 507)) | (1L << (EXCEPTION - 507)) | (1L << (FOREACH - 507)) | (1L << (GET - 507)) | (1L << (HINT - 507)) | (1L << (INFO - 507)) | (1L << (LOG - 507)) | (1L << (LOOP - 507)) | (1L << (MESSAGE - 507)) | (1L << (NOTICE - 507)) | (1L << (OPEN - 507)) | (1L << (PERFORM - 507)) | (1L << (QUERY - 507)) | (1L << (RAISE - 507)) | (1L << (RECORD - 507)) | (1L << (RETURN - 507)) | (1L << (REVERSE - 507)) | (1L << (ROWTYPE - 507)) | (1L << (SLICE - 507)))) != 0) || ((((_la - 571)) & ~0x3f) == 0 && ((1L << (_la - 571)) & ((1L << (SQLSTATE - 571)) | (1L << (STACKED - 571)) | (1L << (WARNING - 571)) | (1L << (WHILE - 571)) | (1L << (Identifier - 571)) | (1L << (QuotedIdentifier - 571)))) != 0)) {
				{
				setState(4069);
				((Create_schema_statementContext)_localctx).name = identifier();
				}
			}

			setState(4074);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(4072);
				match(AUTHORIZATION);
				setState(4073);
				user_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_policy_statementContext extends ParserRuleContext {
		public Token event;
		public VexContext using;
		public VexContext check;
		public TerminalNode POLICY() { return getToken(PLpgSQLParser.POLICY, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode ON() { return getToken(PLpgSQLParser.ON, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PLpgSQLParser.AS, 0); }
		public TerminalNode FOR() { return getToken(PLpgSQLParser.FOR, 0); }
		public TerminalNode TO() { return getToken(PLpgSQLParser.TO, 0); }
		public List<User_nameContext> user_name() {
			return getRuleContexts(User_nameContext.class);
		}
		public User_nameContext user_name(int i) {
			return getRuleContext(User_nameContext.class,i);
		}
		public TerminalNode USING() { return getToken(PLpgSQLParser.USING, 0); }
		public TerminalNode WITH() { return getToken(PLpgSQLParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(PLpgSQLParser.CHECK, 0); }
		public TerminalNode PERMISSIVE() { return getToken(PLpgSQLParser.PERMISSIVE, 0); }
		public TerminalNode RESTRICTIVE() { return getToken(PLpgSQLParser.RESTRICTIVE, 0); }
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public TerminalNode ALL() { return getToken(PLpgSQLParser.ALL, 0); }
		public TerminalNode SELECT() { return getToken(PLpgSQLParser.SELECT, 0); }
		public TerminalNode INSERT() { return getToken(PLpgSQLParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(PLpgSQLParser.UPDATE, 0); }
		public TerminalNode DELETE() { return getToken(PLpgSQLParser.DELETE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Create_policy_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_policy_statement; }
	}

	public final Create_policy_statementContext create_policy_statement() throws RecognitionException {
		Create_policy_statementContext _localctx = new Create_policy_statementContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_create_policy_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4076);
			match(POLICY);
			setState(4077);
			identifier();
			setState(4078);
			match(ON);
			setState(4079);
			schema_qualified_name();
			setState(4082);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(4080);
				match(AS);
				setState(4081);
				_la = _input.LA(1);
				if ( !(_la==PERMISSIVE || _la==RESTRICTIVE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4086);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4084);
				match(FOR);
				setState(4085);
				((Create_policy_statementContext)_localctx).event = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DELETE || _la==INSERT || _la==UPDATE || _la==ALL || _la==SELECT) ) {
					((Create_policy_statementContext)_localctx).event = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4097);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TO) {
				{
				setState(4088);
				match(TO);
				setState(4089);
				user_name();
				setState(4094);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4090);
					match(COMMA);
					setState(4091);
					user_name();
					}
					}
					setState(4096);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(4101);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(4099);
				match(USING);
				setState(4100);
				((Create_policy_statementContext)_localctx).using = vex(0);
				}
			}

			setState(4106);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4103);
				match(WITH);
				setState(4104);
				match(CHECK);
				setState(4105);
				((Create_policy_statementContext)_localctx).check = vex(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_policy_statementContext extends ParserRuleContext {
		public TerminalNode POLICY() { return getToken(PLpgSQLParser.POLICY, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode ON() { return getToken(PLpgSQLParser.ON, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Rename_toContext rename_to() {
			return getRuleContext(Rename_toContext.class,0);
		}
		public TerminalNode TO() { return getToken(PLpgSQLParser.TO, 0); }
		public List<User_nameContext> user_name() {
			return getRuleContexts(User_nameContext.class);
		}
		public User_nameContext user_name(int i) {
			return getRuleContext(User_nameContext.class,i);
		}
		public TerminalNode USING() { return getToken(PLpgSQLParser.USING, 0); }
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public TerminalNode WITH() { return getToken(PLpgSQLParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(PLpgSQLParser.CHECK, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Alter_policy_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_policy_statement; }
	}

	public final Alter_policy_statementContext alter_policy_statement() throws RecognitionException {
		Alter_policy_statementContext _localctx = new Alter_policy_statementContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_alter_policy_statement);
		int _la;
		try {
			setState(4138);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,468,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4108);
				match(POLICY);
				setState(4109);
				identifier();
				setState(4110);
				match(ON);
				setState(4111);
				schema_qualified_name();
				setState(4112);
				rename_to();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4114);
				match(POLICY);
				setState(4115);
				identifier();
				setState(4116);
				match(ON);
				setState(4117);
				schema_qualified_name();
				setState(4127);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TO) {
					{
					setState(4118);
					match(TO);
					setState(4119);
					user_name();
					setState(4124);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(4120);
						match(COMMA);
						setState(4121);
						user_name();
						}
						}
						setState(4126);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(4131);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(4129);
					match(USING);
					setState(4130);
					vex(0);
					}
				}

				setState(4136);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4133);
					match(WITH);
					setState(4134);
					match(CHECK);
					setState(4135);
					vex(0);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_policy_statementContext extends ParserRuleContext {
		public TerminalNode POLICY() { return getToken(PLpgSQLParser.POLICY, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode ON() { return getToken(PLpgSQLParser.ON, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Cascade_restrictContext cascade_restrict() {
			return getRuleContext(Cascade_restrictContext.class,0);
		}
		public Drop_policy_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_policy_statement; }
	}

	public final Drop_policy_statementContext drop_policy_statement() throws RecognitionException {
		Drop_policy_statementContext _localctx = new Drop_policy_statementContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_drop_policy_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4140);
			match(POLICY);
			setState(4142);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,469,_ctx) ) {
			case 1:
				{
				setState(4141);
				if_exists();
				}
				break;
			}
			setState(4144);
			identifier();
			setState(4145);
			match(ON);
			setState(4146);
			schema_qualified_name();
			setState(4148);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(4147);
				cascade_restrict();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_subscription_statementContext extends ParserRuleContext {
		public TerminalNode SUBSCRIPTION() { return getToken(PLpgSQLParser.SUBSCRIPTION, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode CONNECTION() { return getToken(PLpgSQLParser.CONNECTION, 0); }
		public TerminalNode Character_String_Literal() { return getToken(PLpgSQLParser.Character_String_Literal, 0); }
		public TerminalNode PUBLICATION() { return getToken(PLpgSQLParser.PUBLICATION, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public With_storage_parameterContext with_storage_parameter() {
			return getRuleContext(With_storage_parameterContext.class,0);
		}
		public Create_subscription_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_subscription_statement; }
	}

	public final Create_subscription_statementContext create_subscription_statement() throws RecognitionException {
		Create_subscription_statementContext _localctx = new Create_subscription_statementContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_create_subscription_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4150);
			match(SUBSCRIPTION);
			setState(4151);
			identifier();
			setState(4152);
			match(CONNECTION);
			setState(4153);
			match(Character_String_Literal);
			setState(4154);
			match(PUBLICATION);
			setState(4155);
			identifier_list();
			setState(4157);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4156);
				with_storage_parameter();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_subscription_statementContext extends ParserRuleContext {
		public TerminalNode SUBSCRIPTION() { return getToken(PLpgSQLParser.SUBSCRIPTION, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Alter_subscription_actionContext alter_subscription_action() {
			return getRuleContext(Alter_subscription_actionContext.class,0);
		}
		public Alter_subscription_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_subscription_statement; }
	}

	public final Alter_subscription_statementContext alter_subscription_statement() throws RecognitionException {
		Alter_subscription_statementContext _localctx = new Alter_subscription_statementContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_alter_subscription_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4159);
			match(SUBSCRIPTION);
			setState(4160);
			identifier();
			setState(4161);
			alter_subscription_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_subscription_actionContext extends ParserRuleContext {
		public TerminalNode CONNECTION() { return getToken(PLpgSQLParser.CONNECTION, 0); }
		public Character_stringContext character_string() {
			return getRuleContext(Character_stringContext.class,0);
		}
		public TerminalNode SET() { return getToken(PLpgSQLParser.SET, 0); }
		public TerminalNode PUBLICATION() { return getToken(PLpgSQLParser.PUBLICATION, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public With_storage_parameterContext with_storage_parameter() {
			return getRuleContext(With_storage_parameterContext.class,0);
		}
		public TerminalNode REFRESH() { return getToken(PLpgSQLParser.REFRESH, 0); }
		public TerminalNode ENABLE() { return getToken(PLpgSQLParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(PLpgSQLParser.DISABLE, 0); }
		public Storage_parameterContext storage_parameter() {
			return getRuleContext(Storage_parameterContext.class,0);
		}
		public Owner_toContext owner_to() {
			return getRuleContext(Owner_toContext.class,0);
		}
		public Rename_toContext rename_to() {
			return getRuleContext(Rename_toContext.class,0);
		}
		public Alter_subscription_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_subscription_action; }
	}

	public final Alter_subscription_actionContext alter_subscription_action() throws RecognitionException {
		Alter_subscription_actionContext _localctx = new Alter_subscription_actionContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_alter_subscription_action);
		int _la;
		try {
			setState(4182);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,474,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4163);
				match(CONNECTION);
				setState(4164);
				character_string();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4165);
				match(SET);
				setState(4166);
				match(PUBLICATION);
				setState(4167);
				identifier_list();
				setState(4169);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4168);
					with_storage_parameter();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4171);
				match(REFRESH);
				setState(4172);
				match(PUBLICATION);
				setState(4174);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4173);
					with_storage_parameter();
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4176);
				match(ENABLE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4177);
				match(DISABLE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4178);
				match(SET);
				setState(4179);
				storage_parameter();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4180);
				owner_to();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4181);
				rename_to();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_cast_statementContext extends ParserRuleContext {
		public Data_typeContext source;
		public Data_typeContext target;
		public Schema_qualified_nameContext func_name;
		public TerminalNode CAST() { return getToken(PLpgSQLParser.CAST, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public List<TerminalNode> AS() { return getTokens(PLpgSQLParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(PLpgSQLParser.AS, i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public List<Data_typeContext> data_type() {
			return getRuleContexts(Data_typeContext.class);
		}
		public Data_typeContext data_type(int i) {
			return getRuleContext(Data_typeContext.class,i);
		}
		public TerminalNode WITH() { return getToken(PLpgSQLParser.WITH, 0); }
		public TerminalNode FUNCTION() { return getToken(PLpgSQLParser.FUNCTION, 0); }
		public Function_argsContext function_args() {
			return getRuleContext(Function_argsContext.class,0);
		}
		public TerminalNode WITHOUT() { return getToken(PLpgSQLParser.WITHOUT, 0); }
		public TerminalNode INOUT() { return getToken(PLpgSQLParser.INOUT, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public TerminalNode ASSIGNMENT() { return getToken(PLpgSQLParser.ASSIGNMENT, 0); }
		public TerminalNode IMPLICIT() { return getToken(PLpgSQLParser.IMPLICIT, 0); }
		public Create_cast_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_cast_statement; }
	}

	public final Create_cast_statementContext create_cast_statement() throws RecognitionException {
		Create_cast_statementContext _localctx = new Create_cast_statementContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_create_cast_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4184);
			match(CAST);
			setState(4185);
			match(LEFT_PAREN);
			setState(4186);
			((Create_cast_statementContext)_localctx).source = data_type();
			setState(4187);
			match(AS);
			setState(4188);
			((Create_cast_statementContext)_localctx).target = data_type();
			setState(4189);
			match(RIGHT_PAREN);
			setState(4199);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,475,_ctx) ) {
			case 1:
				{
				setState(4190);
				match(WITH);
				setState(4191);
				match(FUNCTION);
				setState(4192);
				((Create_cast_statementContext)_localctx).func_name = schema_qualified_name();
				setState(4193);
				function_args();
				}
				break;
			case 2:
				{
				setState(4195);
				match(WITHOUT);
				setState(4196);
				match(FUNCTION);
				}
				break;
			case 3:
				{
				setState(4197);
				match(WITH);
				setState(4198);
				match(INOUT);
				}
				break;
			}
			setState(4205);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,476,_ctx) ) {
			case 1:
				{
				setState(4201);
				match(AS);
				setState(4202);
				match(ASSIGNMENT);
				}
				break;
			case 2:
				{
				setState(4203);
				match(AS);
				setState(4204);
				match(IMPLICIT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_cast_statementContext extends ParserRuleContext {
		public Data_typeContext source;
		public Data_typeContext target;
		public TerminalNode CAST() { return getToken(PLpgSQLParser.CAST, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public TerminalNode AS() { return getToken(PLpgSQLParser.AS, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public List<Data_typeContext> data_type() {
			return getRuleContexts(Data_typeContext.class);
		}
		public Data_typeContext data_type(int i) {
			return getRuleContext(Data_typeContext.class,i);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Cascade_restrictContext cascade_restrict() {
			return getRuleContext(Cascade_restrictContext.class,0);
		}
		public Drop_cast_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_cast_statement; }
	}

	public final Drop_cast_statementContext drop_cast_statement() throws RecognitionException {
		Drop_cast_statementContext _localctx = new Drop_cast_statementContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_drop_cast_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4207);
			match(CAST);
			setState(4209);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(4208);
				if_exists();
				}
			}

			setState(4211);
			match(LEFT_PAREN);
			setState(4212);
			((Drop_cast_statementContext)_localctx).source = data_type();
			setState(4213);
			match(AS);
			setState(4214);
			((Drop_cast_statementContext)_localctx).target = data_type();
			setState(4215);
			match(RIGHT_PAREN);
			setState(4217);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(4216);
				cascade_restrict();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_operator_family_statementContext extends ParserRuleContext {
		public TerminalNode OPERATOR() { return getToken(PLpgSQLParser.OPERATOR, 0); }
		public TerminalNode FAMILY() { return getToken(PLpgSQLParser.FAMILY, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PLpgSQLParser.USING, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Create_operator_family_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_operator_family_statement; }
	}

	public final Create_operator_family_statementContext create_operator_family_statement() throws RecognitionException {
		Create_operator_family_statementContext _localctx = new Create_operator_family_statementContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_create_operator_family_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4219);
			match(OPERATOR);
			setState(4220);
			match(FAMILY);
			setState(4221);
			schema_qualified_name();
			setState(4222);
			match(USING);
			setState(4223);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_operator_family_statementContext extends ParserRuleContext {
		public TerminalNode OPERATOR() { return getToken(PLpgSQLParser.OPERATOR, 0); }
		public TerminalNode FAMILY() { return getToken(PLpgSQLParser.FAMILY, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PLpgSQLParser.USING, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Operator_family_actionContext operator_family_action() {
			return getRuleContext(Operator_family_actionContext.class,0);
		}
		public Alter_operator_family_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_operator_family_statement; }
	}

	public final Alter_operator_family_statementContext alter_operator_family_statement() throws RecognitionException {
		Alter_operator_family_statementContext _localctx = new Alter_operator_family_statementContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_alter_operator_family_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4225);
			match(OPERATOR);
			setState(4226);
			match(FAMILY);
			setState(4227);
			schema_qualified_name();
			setState(4228);
			match(USING);
			setState(4229);
			identifier();
			setState(4230);
			operator_family_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Operator_family_actionContext extends ParserRuleContext {
		public Rename_toContext rename_to() {
			return getRuleContext(Rename_toContext.class,0);
		}
		public Owner_toContext owner_to() {
			return getRuleContext(Owner_toContext.class,0);
		}
		public Set_schemaContext set_schema() {
			return getRuleContext(Set_schemaContext.class,0);
		}
		public TerminalNode ADD() { return getToken(PLpgSQLParser.ADD, 0); }
		public List<Add_operator_to_familyContext> add_operator_to_family() {
			return getRuleContexts(Add_operator_to_familyContext.class);
		}
		public Add_operator_to_familyContext add_operator_to_family(int i) {
			return getRuleContext(Add_operator_to_familyContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public TerminalNode DROP() { return getToken(PLpgSQLParser.DROP, 0); }
		public List<Drop_operator_from_familyContext> drop_operator_from_family() {
			return getRuleContexts(Drop_operator_from_familyContext.class);
		}
		public Drop_operator_from_familyContext drop_operator_from_family(int i) {
			return getRuleContext(Drop_operator_from_familyContext.class,i);
		}
		public Operator_family_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operator_family_action; }
	}

	public final Operator_family_actionContext operator_family_action() throws RecognitionException {
		Operator_family_actionContext _localctx = new Operator_family_actionContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_operator_family_action);
		int _la;
		try {
			setState(4253);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RENAME:
				enterOuterAlt(_localctx, 1);
				{
				setState(4232);
				rename_to();
				}
				break;
			case OWNER:
				enterOuterAlt(_localctx, 2);
				{
				setState(4233);
				owner_to();
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 3);
				{
				setState(4234);
				set_schema();
				}
				break;
			case ADD:
				enterOuterAlt(_localctx, 4);
				{
				setState(4235);
				match(ADD);
				setState(4236);
				add_operator_to_family();
				setState(4241);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4237);
					match(COMMA);
					setState(4238);
					add_operator_to_family();
					}
					}
					setState(4243);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 5);
				{
				setState(4244);
				match(DROP);
				setState(4245);
				drop_operator_from_family();
				setState(4250);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4246);
					match(COMMA);
					setState(4247);
					drop_operator_from_family();
					}
					}
					setState(4252);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Add_operator_to_familyContext extends ParserRuleContext {
		public TerminalNode OPERATOR() { return getToken(PLpgSQLParser.OPERATOR, 0); }
		public Unsigned_numeric_literalContext unsigned_numeric_literal() {
			return getRuleContext(Unsigned_numeric_literalContext.class,0);
		}
		public Target_operatorContext target_operator() {
			return getRuleContext(Target_operatorContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PLpgSQLParser.FOR, 0); }
		public TerminalNode SEARCH() { return getToken(PLpgSQLParser.SEARCH, 0); }
		public TerminalNode ORDER() { return getToken(PLpgSQLParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PLpgSQLParser.BY, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(PLpgSQLParser.FUNCTION, 0); }
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public List<Data_typeContext> data_type() {
			return getRuleContexts(Data_typeContext.class);
		}
		public Data_typeContext data_type(int i) {
			return getRuleContext(Data_typeContext.class,i);
		}
		public List<TerminalNode> NONE() { return getTokens(PLpgSQLParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(PLpgSQLParser.NONE, i);
		}
		public TerminalNode COMMA() { return getToken(PLpgSQLParser.COMMA, 0); }
		public Add_operator_to_familyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_operator_to_family; }
	}

	public final Add_operator_to_familyContext add_operator_to_family() throws RecognitionException {
		Add_operator_to_familyContext _localctx = new Add_operator_to_familyContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_add_operator_to_family);
		int _la;
		try {
			setState(4285);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPERATOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4255);
				match(OPERATOR);
				setState(4256);
				unsigned_numeric_literal();
				setState(4257);
				target_operator();
				setState(4264);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,482,_ctx) ) {
				case 1:
					{
					setState(4258);
					match(FOR);
					setState(4259);
					match(SEARCH);
					}
					break;
				case 2:
					{
					setState(4260);
					match(FOR);
					setState(4261);
					match(ORDER);
					setState(4262);
					match(BY);
					setState(4263);
					schema_qualified_name();
					}
					break;
				}
				}
				break;
			case FUNCTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(4266);
				match(FUNCTION);
				setState(4267);
				unsigned_numeric_literal();
				setState(4281);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(4268);
					match(LEFT_PAREN);
					setState(4271);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,483,_ctx) ) {
					case 1:
						{
						setState(4269);
						data_type();
						}
						break;
					case 2:
						{
						setState(4270);
						match(NONE);
						}
						break;
					}
					setState(4278);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4273);
						match(COMMA);
						setState(4276);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,484,_ctx) ) {
						case 1:
							{
							setState(4274);
							data_type();
							}
							break;
						case 2:
							{
							setState(4275);
							match(NONE);
							}
							break;
						}
						}
					}

					setState(4280);
					match(RIGHT_PAREN);
					}
				}

				setState(4283);
				function_call();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_operator_from_familyContext extends ParserRuleContext {
		public Unsigned_numeric_literalContext unsigned_numeric_literal() {
			return getRuleContext(Unsigned_numeric_literalContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public TerminalNode OPERATOR() { return getToken(PLpgSQLParser.OPERATOR, 0); }
		public TerminalNode FUNCTION() { return getToken(PLpgSQLParser.FUNCTION, 0); }
		public List<Data_typeContext> data_type() {
			return getRuleContexts(Data_typeContext.class);
		}
		public Data_typeContext data_type(int i) {
			return getRuleContext(Data_typeContext.class,i);
		}
		public List<TerminalNode> NONE() { return getTokens(PLpgSQLParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(PLpgSQLParser.NONE, i);
		}
		public TerminalNode COMMA() { return getToken(PLpgSQLParser.COMMA, 0); }
		public Drop_operator_from_familyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_operator_from_family; }
	}

	public final Drop_operator_from_familyContext drop_operator_from_family() throws RecognitionException {
		Drop_operator_from_familyContext _localctx = new Drop_operator_from_familyContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_drop_operator_from_family);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4287);
			_la = _input.LA(1);
			if ( !(_la==FUNCTION || _la==OPERATOR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4288);
			unsigned_numeric_literal();
			setState(4289);
			match(LEFT_PAREN);
			setState(4292);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,488,_ctx) ) {
			case 1:
				{
				setState(4290);
				data_type();
				}
				break;
			case 2:
				{
				setState(4291);
				match(NONE);
				}
				break;
			}
			setState(4299);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4294);
				match(COMMA);
				setState(4297);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,489,_ctx) ) {
				case 1:
					{
					setState(4295);
					data_type();
					}
					break;
				case 2:
					{
					setState(4296);
					match(NONE);
					}
					break;
				}
				}
			}

			setState(4301);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_operator_family_statementContext extends ParserRuleContext {
		public TerminalNode OPERATOR() { return getToken(PLpgSQLParser.OPERATOR, 0); }
		public TerminalNode FAMILY() { return getToken(PLpgSQLParser.FAMILY, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PLpgSQLParser.USING, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Cascade_restrictContext cascade_restrict() {
			return getRuleContext(Cascade_restrictContext.class,0);
		}
		public Drop_operator_family_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_operator_family_statement; }
	}

	public final Drop_operator_family_statementContext drop_operator_family_statement() throws RecognitionException {
		Drop_operator_family_statementContext _localctx = new Drop_operator_family_statementContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_drop_operator_family_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4303);
			match(OPERATOR);
			setState(4304);
			match(FAMILY);
			setState(4306);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,491,_ctx) ) {
			case 1:
				{
				setState(4305);
				if_exists();
				}
				break;
			}
			setState(4308);
			schema_qualified_name();
			setState(4309);
			match(USING);
			setState(4310);
			identifier();
			setState(4312);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(4311);
				cascade_restrict();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_operator_class_statementContext extends ParserRuleContext {
		public TerminalNode OPERATOR() { return getToken(PLpgSQLParser.OPERATOR, 0); }
		public TerminalNode CLASS() { return getToken(PLpgSQLParser.CLASS, 0); }
		public List<Schema_qualified_nameContext> schema_qualified_name() {
			return getRuleContexts(Schema_qualified_nameContext.class);
		}
		public Schema_qualified_nameContext schema_qualified_name(int i) {
			return getRuleContext(Schema_qualified_nameContext.class,i);
		}
		public TerminalNode FOR() { return getToken(PLpgSQLParser.FOR, 0); }
		public TerminalNode TYPE() { return getToken(PLpgSQLParser.TYPE, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode USING() { return getToken(PLpgSQLParser.USING, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode AS() { return getToken(PLpgSQLParser.AS, 0); }
		public List<Create_operator_class_optionContext> create_operator_class_option() {
			return getRuleContexts(Create_operator_class_optionContext.class);
		}
		public Create_operator_class_optionContext create_operator_class_option(int i) {
			return getRuleContext(Create_operator_class_optionContext.class,i);
		}
		public TerminalNode DEFAULT() { return getToken(PLpgSQLParser.DEFAULT, 0); }
		public TerminalNode FAMILY() { return getToken(PLpgSQLParser.FAMILY, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Create_operator_class_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_operator_class_statement; }
	}

	public final Create_operator_class_statementContext create_operator_class_statement() throws RecognitionException {
		Create_operator_class_statementContext _localctx = new Create_operator_class_statementContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_create_operator_class_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4314);
			match(OPERATOR);
			setState(4315);
			match(CLASS);
			setState(4316);
			schema_qualified_name();
			setState(4318);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(4317);
				match(DEFAULT);
				}
			}

			setState(4320);
			match(FOR);
			setState(4321);
			match(TYPE);
			setState(4322);
			data_type();
			setState(4323);
			match(USING);
			setState(4324);
			identifier();
			setState(4327);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FAMILY) {
				{
				setState(4325);
				match(FAMILY);
				setState(4326);
				schema_qualified_name();
				}
			}

			setState(4329);
			match(AS);
			setState(4330);
			create_operator_class_option();
			setState(4335);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4331);
				match(COMMA);
				setState(4332);
				create_operator_class_option();
				}
				}
				setState(4337);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_operator_class_optionContext extends ParserRuleContext {
		public Operator_nameContext name;
		public TerminalNode OPERATOR() { return getToken(PLpgSQLParser.OPERATOR, 0); }
		public Unsigned_numeric_literalContext unsigned_numeric_literal() {
			return getRuleContext(Unsigned_numeric_literalContext.class,0);
		}
		public Operator_nameContext operator_name() {
			return getRuleContext(Operator_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public TerminalNode COMMA() { return getToken(PLpgSQLParser.COMMA, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public TerminalNode FOR() { return getToken(PLpgSQLParser.FOR, 0); }
		public TerminalNode SEARCH() { return getToken(PLpgSQLParser.SEARCH, 0); }
		public TerminalNode ORDER() { return getToken(PLpgSQLParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PLpgSQLParser.BY, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public List<Data_typeContext> data_type() {
			return getRuleContexts(Data_typeContext.class);
		}
		public Data_typeContext data_type(int i) {
			return getRuleContext(Data_typeContext.class,i);
		}
		public List<TerminalNode> NONE() { return getTokens(PLpgSQLParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(PLpgSQLParser.NONE, i);
		}
		public TerminalNode FUNCTION() { return getToken(PLpgSQLParser.FUNCTION, 0); }
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public TerminalNode STORAGE() { return getToken(PLpgSQLParser.STORAGE, 0); }
		public Create_operator_class_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_operator_class_option; }
	}

	public final Create_operator_class_optionContext create_operator_class_option() throws RecognitionException {
		Create_operator_class_optionContext _localctx = new Create_operator_class_optionContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_create_operator_class_option);
		int _la;
		try {
			setState(4383);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPERATOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4338);
				match(OPERATOR);
				setState(4339);
				unsigned_numeric_literal();
				setState(4340);
				((Create_operator_class_optionContext)_localctx).name = operator_name();
				setState(4352);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(4341);
					match(LEFT_PAREN);
					setState(4344);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,496,_ctx) ) {
					case 1:
						{
						setState(4342);
						data_type();
						}
						break;
					case 2:
						{
						setState(4343);
						match(NONE);
						}
						break;
					}
					setState(4346);
					match(COMMA);
					setState(4349);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,497,_ctx) ) {
					case 1:
						{
						setState(4347);
						data_type();
						}
						break;
					case 2:
						{
						setState(4348);
						match(NONE);
						}
						break;
					}
					setState(4351);
					match(RIGHT_PAREN);
					}
				}

				setState(4360);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,499,_ctx) ) {
				case 1:
					{
					setState(4354);
					match(FOR);
					setState(4355);
					match(SEARCH);
					}
					break;
				case 2:
					{
					setState(4356);
					match(FOR);
					setState(4357);
					match(ORDER);
					setState(4358);
					match(BY);
					setState(4359);
					schema_qualified_name();
					}
					break;
				}
				}
				break;
			case FUNCTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(4362);
				match(FUNCTION);
				setState(4363);
				unsigned_numeric_literal();
				setState(4377);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(4364);
					match(LEFT_PAREN);
					setState(4367);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,500,_ctx) ) {
					case 1:
						{
						setState(4365);
						data_type();
						}
						break;
					case 2:
						{
						setState(4366);
						match(NONE);
						}
						break;
					}
					setState(4374);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4369);
						match(COMMA);
						setState(4372);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,501,_ctx) ) {
						case 1:
							{
							setState(4370);
							data_type();
							}
							break;
						case 2:
							{
							setState(4371);
							match(NONE);
							}
							break;
						}
						}
					}

					setState(4376);
					match(RIGHT_PAREN);
					}
				}

				setState(4379);
				function_call();
				}
				break;
			case STORAGE:
				enterOuterAlt(_localctx, 3);
				{
				setState(4381);
				match(STORAGE);
				setState(4382);
				data_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_operator_class_statementContext extends ParserRuleContext {
		public TerminalNode OPERATOR() { return getToken(PLpgSQLParser.OPERATOR, 0); }
		public TerminalNode CLASS() { return getToken(PLpgSQLParser.CLASS, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PLpgSQLParser.USING, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Rename_toContext rename_to() {
			return getRuleContext(Rename_toContext.class,0);
		}
		public Owner_toContext owner_to() {
			return getRuleContext(Owner_toContext.class,0);
		}
		public Set_schemaContext set_schema() {
			return getRuleContext(Set_schemaContext.class,0);
		}
		public Alter_operator_class_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_operator_class_statement; }
	}

	public final Alter_operator_class_statementContext alter_operator_class_statement() throws RecognitionException {
		Alter_operator_class_statementContext _localctx = new Alter_operator_class_statementContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_alter_operator_class_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4385);
			match(OPERATOR);
			setState(4386);
			match(CLASS);
			setState(4387);
			schema_qualified_name();
			setState(4388);
			match(USING);
			setState(4389);
			identifier();
			setState(4393);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RENAME:
				{
				setState(4390);
				rename_to();
				}
				break;
			case OWNER:
				{
				setState(4391);
				owner_to();
				}
				break;
			case SET:
				{
				setState(4392);
				set_schema();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_operator_class_statementContext extends ParserRuleContext {
		public TerminalNode OPERATOR() { return getToken(PLpgSQLParser.OPERATOR, 0); }
		public TerminalNode CLASS() { return getToken(PLpgSQLParser.CLASS, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PLpgSQLParser.USING, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Cascade_restrictContext cascade_restrict() {
			return getRuleContext(Cascade_restrictContext.class,0);
		}
		public Drop_operator_class_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_operator_class_statement; }
	}

	public final Drop_operator_class_statementContext drop_operator_class_statement() throws RecognitionException {
		Drop_operator_class_statementContext _localctx = new Drop_operator_class_statementContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_drop_operator_class_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4395);
			match(OPERATOR);
			setState(4396);
			match(CLASS);
			setState(4398);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,506,_ctx) ) {
			case 1:
				{
				setState(4397);
				if_exists();
				}
				break;
			}
			setState(4400);
			schema_qualified_name();
			setState(4401);
			match(USING);
			setState(4402);
			identifier();
			setState(4404);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(4403);
				cascade_restrict();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_conversion_statementContext extends ParserRuleContext {
		public TerminalNode CONVERSION() { return getToken(PLpgSQLParser.CONVERSION, 0); }
		public List<Schema_qualified_nameContext> schema_qualified_name() {
			return getRuleContexts(Schema_qualified_nameContext.class);
		}
		public Schema_qualified_nameContext schema_qualified_name(int i) {
			return getRuleContext(Schema_qualified_nameContext.class,i);
		}
		public TerminalNode FOR() { return getToken(PLpgSQLParser.FOR, 0); }
		public List<TerminalNode> Character_String_Literal() { return getTokens(PLpgSQLParser.Character_String_Literal); }
		public TerminalNode Character_String_Literal(int i) {
			return getToken(PLpgSQLParser.Character_String_Literal, i);
		}
		public TerminalNode TO() { return getToken(PLpgSQLParser.TO, 0); }
		public TerminalNode FROM() { return getToken(PLpgSQLParser.FROM, 0); }
		public TerminalNode DEFAULT() { return getToken(PLpgSQLParser.DEFAULT, 0); }
		public Create_conversion_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_conversion_statement; }
	}

	public final Create_conversion_statementContext create_conversion_statement() throws RecognitionException {
		Create_conversion_statementContext _localctx = new Create_conversion_statementContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_create_conversion_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4407);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(4406);
				match(DEFAULT);
				}
			}

			setState(4409);
			match(CONVERSION);
			setState(4410);
			schema_qualified_name();
			setState(4411);
			match(FOR);
			setState(4412);
			match(Character_String_Literal);
			setState(4413);
			match(TO);
			setState(4414);
			match(Character_String_Literal);
			setState(4415);
			match(FROM);
			setState(4416);
			schema_qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_conversion_statementContext extends ParserRuleContext {
		public TerminalNode CONVERSION() { return getToken(PLpgSQLParser.CONVERSION, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Rename_toContext rename_to() {
			return getRuleContext(Rename_toContext.class,0);
		}
		public Owner_toContext owner_to() {
			return getRuleContext(Owner_toContext.class,0);
		}
		public Set_schemaContext set_schema() {
			return getRuleContext(Set_schemaContext.class,0);
		}
		public Alter_conversion_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_conversion_statement; }
	}

	public final Alter_conversion_statementContext alter_conversion_statement() throws RecognitionException {
		Alter_conversion_statementContext _localctx = new Alter_conversion_statementContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_alter_conversion_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4418);
			match(CONVERSION);
			setState(4419);
			schema_qualified_name();
			setState(4423);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RENAME:
				{
				setState(4420);
				rename_to();
				}
				break;
			case OWNER:
				{
				setState(4421);
				owner_to();
				}
				break;
			case SET:
				{
				setState(4422);
				set_schema();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_publication_statementContext extends ParserRuleContext {
		public TerminalNode PUBLICATION() { return getToken(PLpgSQLParser.PUBLICATION, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PLpgSQLParser.FOR, 0); }
		public TerminalNode TABLE() { return getToken(PLpgSQLParser.TABLE, 0); }
		public List<Only_table_multiplyContext> only_table_multiply() {
			return getRuleContexts(Only_table_multiplyContext.class);
		}
		public Only_table_multiplyContext only_table_multiply(int i) {
			return getRuleContext(Only_table_multiplyContext.class,i);
		}
		public TerminalNode ALL() { return getToken(PLpgSQLParser.ALL, 0); }
		public TerminalNode TABLES() { return getToken(PLpgSQLParser.TABLES, 0); }
		public With_storage_parameterContext with_storage_parameter() {
			return getRuleContext(With_storage_parameterContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Create_publication_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_publication_statement; }
	}

	public final Create_publication_statementContext create_publication_statement() throws RecognitionException {
		Create_publication_statementContext _localctx = new Create_publication_statementContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_create_publication_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4425);
			match(PUBLICATION);
			setState(4426);
			identifier();
			setState(4440);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,511,_ctx) ) {
			case 1:
				{
				setState(4427);
				match(FOR);
				setState(4428);
				match(TABLE);
				setState(4429);
				only_table_multiply();
				setState(4434);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4430);
					match(COMMA);
					setState(4431);
					only_table_multiply();
					}
					}
					setState(4436);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				{
				setState(4437);
				match(FOR);
				setState(4438);
				match(ALL);
				setState(4439);
				match(TABLES);
				}
				break;
			}
			setState(4443);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4442);
				with_storage_parameter();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_publication_statementContext extends ParserRuleContext {
		public TerminalNode PUBLICATION() { return getToken(PLpgSQLParser.PUBLICATION, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Alter_publication_actionContext alter_publication_action() {
			return getRuleContext(Alter_publication_actionContext.class,0);
		}
		public Alter_publication_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_publication_statement; }
	}

	public final Alter_publication_statementContext alter_publication_statement() throws RecognitionException {
		Alter_publication_statementContext _localctx = new Alter_publication_statementContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_alter_publication_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4445);
			match(PUBLICATION);
			setState(4446);
			identifier();
			setState(4447);
			alter_publication_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_publication_actionContext extends ParserRuleContext {
		public Rename_toContext rename_to() {
			return getRuleContext(Rename_toContext.class,0);
		}
		public Owner_toContext owner_to() {
			return getRuleContext(Owner_toContext.class,0);
		}
		public TerminalNode SET() { return getToken(PLpgSQLParser.SET, 0); }
		public Storage_parameterContext storage_parameter() {
			return getRuleContext(Storage_parameterContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PLpgSQLParser.TABLE, 0); }
		public List<Only_table_multiplyContext> only_table_multiply() {
			return getRuleContexts(Only_table_multiplyContext.class);
		}
		public Only_table_multiplyContext only_table_multiply(int i) {
			return getRuleContext(Only_table_multiplyContext.class,i);
		}
		public TerminalNode ADD() { return getToken(PLpgSQLParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(PLpgSQLParser.DROP, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Alter_publication_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_publication_action; }
	}

	public final Alter_publication_actionContext alter_publication_action() throws RecognitionException {
		Alter_publication_actionContext _localctx = new Alter_publication_actionContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_alter_publication_action);
		int _la;
		try {
			setState(4463);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,514,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4449);
				rename_to();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4450);
				owner_to();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4451);
				match(SET);
				setState(4452);
				storage_parameter();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4453);
				_la = _input.LA(1);
				if ( !(_la==ADD || _la==DROP || _la==SET) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4454);
				match(TABLE);
				setState(4455);
				only_table_multiply();
				setState(4460);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4456);
					match(COMMA);
					setState(4457);
					only_table_multiply();
					}
					}
					setState(4462);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Only_table_multiplyContext extends ParserRuleContext {
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(PLpgSQLParser.ONLY, 0); }
		public TerminalNode MULTIPLY() { return getToken(PLpgSQLParser.MULTIPLY, 0); }
		public Only_table_multiplyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_only_table_multiply; }
	}

	public final Only_table_multiplyContext only_table_multiply() throws RecognitionException {
		Only_table_multiplyContext _localctx = new Only_table_multiplyContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_only_table_multiply);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4466);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ONLY) {
				{
				setState(4465);
				match(ONLY);
				}
			}

			setState(4468);
			schema_qualified_name();
			setState(4470);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MULTIPLY) {
				{
				setState(4469);
				match(MULTIPLY);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_trigger_statementContext extends ParserRuleContext {
		public TerminalNode TRIGGER() { return getToken(PLpgSQLParser.TRIGGER, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> ON() { return getTokens(PLpgSQLParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(PLpgSQLParser.ON, i);
		}
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Rename_toContext rename_to() {
			return getRuleContext(Rename_toContext.class,0);
		}
		public TerminalNode DEPENDS() { return getToken(PLpgSQLParser.DEPENDS, 0); }
		public TerminalNode EXTENSION() { return getToken(PLpgSQLParser.EXTENSION, 0); }
		public Alter_trigger_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_trigger_statement; }
	}

	public final Alter_trigger_statementContext alter_trigger_statement() throws RecognitionException {
		Alter_trigger_statementContext _localctx = new Alter_trigger_statementContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_alter_trigger_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4472);
			match(TRIGGER);
			setState(4473);
			identifier();
			setState(4474);
			match(ON);
			setState(4475);
			schema_qualified_name();
			setState(4481);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RENAME:
				{
				setState(4476);
				rename_to();
				}
				break;
			case DEPENDS:
				{
				setState(4477);
				match(DEPENDS);
				setState(4478);
				match(ON);
				setState(4479);
				match(EXTENSION);
				setState(4480);
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_rule_statementContext extends ParserRuleContext {
		public TerminalNode RULE() { return getToken(PLpgSQLParser.RULE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode ON() { return getToken(PLpgSQLParser.ON, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Rename_toContext rename_to() {
			return getRuleContext(Rename_toContext.class,0);
		}
		public Alter_rule_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_rule_statement; }
	}

	public final Alter_rule_statementContext alter_rule_statement() throws RecognitionException {
		Alter_rule_statementContext _localctx = new Alter_rule_statementContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_alter_rule_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4483);
			match(RULE);
			setState(4484);
			identifier();
			setState(4485);
			match(ON);
			setState(4486);
			schema_qualified_name();
			setState(4487);
			rename_to();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_statementContext extends ParserRuleContext {
		public Copy_to_statementContext copy_to_statement() {
			return getRuleContext(Copy_to_statementContext.class,0);
		}
		public Copy_from_statementContext copy_from_statement() {
			return getRuleContext(Copy_from_statementContext.class,0);
		}
		public Copy_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_statement; }
	}

	public final Copy_statementContext copy_statement() throws RecognitionException {
		Copy_statementContext _localctx = new Copy_statementContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_copy_statement);
		try {
			setState(4491);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,518,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4489);
				copy_to_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4490);
				copy_from_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_from_statementContext extends ParserRuleContext {
		public TerminalNode COPY() { return getToken(PLpgSQLParser.COPY, 0); }
		public Table_colsContext table_cols() {
			return getRuleContext(Table_colsContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PLpgSQLParser.FROM, 0); }
		public TerminalNode Character_String_Literal() { return getToken(PLpgSQLParser.Character_String_Literal, 0); }
		public TerminalNode STDIN() { return getToken(PLpgSQLParser.STDIN, 0); }
		public TerminalNode WHERE() { return getToken(PLpgSQLParser.WHERE, 0); }
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public TerminalNode PROGRAM() { return getToken(PLpgSQLParser.PROGRAM, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public Copy_option_listContext copy_option_list() {
			return getRuleContext(Copy_option_listContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public TerminalNode WITH() { return getToken(PLpgSQLParser.WITH, 0); }
		public Copy_from_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_from_statement; }
	}

	public final Copy_from_statementContext copy_from_statement() throws RecognitionException {
		Copy_from_statementContext _localctx = new Copy_from_statementContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_copy_from_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4493);
			match(COPY);
			setState(4494);
			table_cols();
			setState(4495);
			match(FROM);
			setState(4501);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PROGRAM:
			case Character_String_Literal:
				{
				setState(4497);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROGRAM) {
					{
					setState(4496);
					match(PROGRAM);
					}
				}

				setState(4499);
				match(Character_String_Literal);
				}
				break;
			case STDIN:
				{
				setState(4500);
				match(STDIN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4513);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 47)) & ~0x3f) == 0 && ((1L << (_la - 47)) & ((1L << (CSV - 47)) | (1L << (DELIMITER - 47)) | (1L << (ENCODING - 47)) | (1L << (ESCAPE - 47)) | (1L << (FORCE - 47)) | (1L << (HEADER - 47)))) != 0) || _la==OIDS || _la==QUOTE || _la==TEXT || _la==BINARY || _la==FREEZE || ((((_la - 415)) & ~0x3f) == 0 && ((1L << (_la - 415)) & ((1L << (NULL - 415)) | (1L << (WITH - 415)) | (1L << (FORCE_NOT_NULL - 415)) | (1L << (FORCE_NULL - 415)) | (1L << (FORCE_QUOTE - 415)) | (1L << (FORMAT - 415)))) != 0) || _la==LEFT_PAREN) {
				{
				setState(4504);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4503);
					match(WITH);
					}
				}

				setState(4511);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LEFT_PAREN:
					{
					setState(4506);
					match(LEFT_PAREN);
					setState(4507);
					copy_option_list();
					setState(4508);
					match(RIGHT_PAREN);
					}
					break;
				case CSV:
				case DELIMITER:
				case ENCODING:
				case ESCAPE:
				case FORCE:
				case HEADER:
				case OIDS:
				case QUOTE:
				case TEXT:
				case BINARY:
				case FREEZE:
				case NULL:
				case FORCE_NOT_NULL:
				case FORCE_NULL:
				case FORCE_QUOTE:
				case FORMAT:
					{
					setState(4510);
					copy_option_list();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(4517);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(4515);
				match(WHERE);
				setState(4516);
				vex(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_to_statementContext extends ParserRuleContext {
		public TerminalNode COPY() { return getToken(PLpgSQLParser.COPY, 0); }
		public TerminalNode TO() { return getToken(PLpgSQLParser.TO, 0); }
		public Table_colsContext table_cols() {
			return getRuleContext(Table_colsContext.class,0);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PLpgSQLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PLpgSQLParser.LEFT_PAREN, i);
		}
		public Data_statementContext data_statement() {
			return getRuleContext(Data_statementContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PLpgSQLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PLpgSQLParser.RIGHT_PAREN, i);
		}
		public TerminalNode Character_String_Literal() { return getToken(PLpgSQLParser.Character_String_Literal, 0); }
		public TerminalNode STDOUT() { return getToken(PLpgSQLParser.STDOUT, 0); }
		public TerminalNode PROGRAM() { return getToken(PLpgSQLParser.PROGRAM, 0); }
		public Copy_option_listContext copy_option_list() {
			return getRuleContext(Copy_option_listContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PLpgSQLParser.WITH, 0); }
		public Copy_to_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_to_statement; }
	}

	public final Copy_to_statementContext copy_to_statement() throws RecognitionException {
		Copy_to_statementContext _localctx = new Copy_to_statementContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_copy_to_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4519);
			match(COPY);
			setState(4525);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BY:
			case CACHE:
			case CALL:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COLUMNS:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONFLICT:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CUBE:
			case CURRENT:
			case CURSOR:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DEPENDS:
			case DETACH:
			case DICTIONARY:
			case DISABLE:
			case DISCARD:
			case DOCUMENT:
			case DOMAIN:
			case DOUBLE:
			case DROP:
			case EACH:
			case ENABLE:
			case ENCODING:
			case ENCRYPTED:
			case ENUM:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GENERATED:
			case GLOBAL:
			case GRANTED:
			case GROUPS:
			case HANDLER:
			case HEADER:
			case HOLD:
			case HOUR:
			case IDENTITY:
			case IF:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT:
			case IMPORT:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCKED:
			case LOGGED:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case METHOD:
			case MINUTE:
			case MINVALUE:
			case MODE:
			case MONTH:
			case MOVE:
			case NAME:
			case NAMES:
			case NEW:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS:
			case OBJECT:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OVER:
			case OVERRIDING:
			case OWNED:
			case OWNER:
			case PARALLEL:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POLICY:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROCEDURES:
			case PROGRAM:
			case PUBLICATION:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINES:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMAS:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SKIP_:
			case SNAPSHOT:
			case SQL:
			case STABLE:
			case STANDALONE:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STORED:
			case STRICT:
			case STRIP:
			case SUBSCRIPTION:
			case SUPPORT:
			case SYSID:
			case SYSTEM:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT:
			case TIES:
			case TRANSACTION:
			case TRANSFORM:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE:
			case VARYING:
			case VERSION:
			case VIEW:
			case VIEWS:
			case VOLATILE:
			case WHITESPACE:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML:
			case YEAR:
			case YES:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL:
			case EXISTS:
			case EXTRACT:
			case FLOAT:
			case GREATEST:
			case GROUPING:
			case INOUT:
			case INT:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case ALIGNMENT:
			case BASETYPE:
			case BUFFERS:
			case BYPASSRLS:
			case CANONICAL:
			case CATEGORY:
			case COLLATABLE:
			case COMBINEFUNC:
			case COMMUTATOR:
			case CONNECT:
			case COSTS:
			case CREATEDB:
			case CREATEROLE:
			case DESERIALFUNC:
			case DETERMINISTIC:
			case DISABLE_PAGE_SKIPPING:
			case ELEMENT:
			case EXTENDED:
			case FINALFUNC:
			case FINALFUNC_EXTRA:
			case FINALFUNC_MODIFY:
			case FORCE_NOT_NULL:
			case FORCE_NULL:
			case FORCE_QUOTE:
			case FORMAT:
			case GETTOKEN:
			case HASH:
			case HASHES:
			case HEADLINE:
			case HYPOTHETICAL:
			case INDEX_CLEANUP:
			case INIT:
			case INITCOND:
			case INTERNALLENGTH:
			case JSON:
			case LC_COLLATE:
			case LC_CTYPE:
			case LEFTARG:
			case LEXIZE:
			case LEXTYPES:
			case LIST:
			case LOCALE:
			case LOGIN:
			case MAIN:
			case MERGES:
			case MFINALFUNC:
			case MFINALFUNC_EXTRA:
			case MFINALFUNC_MODIFY:
			case MINITCOND:
			case MINVFUNC:
			case MODULUS:
			case MSFUNC:
			case MSSPACE:
			case MSTYPE:
			case NEGATOR:
			case NOBYPASSRLS:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOREPLICATION:
			case NOSUPERUSER:
			case OUTPUT:
			case PASSEDBYVALUE:
			case PATH:
			case PERMISSIVE:
			case PLAIN:
			case PREFERRED:
			case PROVIDER:
			case READ_ONLY:
			case READ_WRITE:
			case RECEIVE:
			case REMAINDER:
			case REPLICATION:
			case RESTRICTED:
			case RESTRICTIVE:
			case RIGHTARG:
			case SAFE:
			case SEND:
			case SERIALFUNC:
			case SETTINGS:
			case SFUNC:
			case SHAREABLE:
			case SKIP_LOCKED:
			case SORTOP:
			case SSPACE:
			case STYPE:
			case SUBTYPE_DIFF:
			case SUBTYPE_OPCLASS:
			case SUBTYPE:
			case SUMMARY:
			case SUPERUSER:
			case TIMING:
			case TYPMOD_IN:
			case TYPMOD_OUT:
			case UNSAFE:
			case USAGE:
			case VARIABLE:
			case YAML:
			case ALIAS:
			case ASSERT:
			case CONSTANT:
			case DATATYPE:
			case DEBUG:
			case DETAIL:
			case DIAGNOSTICS:
			case ELSEIF:
			case ELSIF:
			case ERRCODE:
			case EXIT:
			case EXCEPTION:
			case FOREACH:
			case GET:
			case HINT:
			case INFO:
			case LOG:
			case LOOP:
			case MESSAGE:
			case NOTICE:
			case OPEN:
			case PERFORM:
			case QUERY:
			case RAISE:
			case RECORD:
			case RETURN:
			case REVERSE:
			case ROWTYPE:
			case SLICE:
			case SQLSTATE:
			case STACKED:
			case WARNING:
			case WHILE:
			case Identifier:
			case QuotedIdentifier:
				{
				setState(4520);
				table_cols();
				}
				break;
			case LEFT_PAREN:
				{
				setState(4521);
				match(LEFT_PAREN);
				setState(4522);
				data_statement();
				setState(4523);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4527);
			match(TO);
			setState(4533);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PROGRAM:
			case Character_String_Literal:
				{
				setState(4529);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROGRAM) {
					{
					setState(4528);
					match(PROGRAM);
					}
				}

				setState(4531);
				match(Character_String_Literal);
				}
				break;
			case STDOUT:
				{
				setState(4532);
				match(STDOUT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4545);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 47)) & ~0x3f) == 0 && ((1L << (_la - 47)) & ((1L << (CSV - 47)) | (1L << (DELIMITER - 47)) | (1L << (ENCODING - 47)) | (1L << (ESCAPE - 47)) | (1L << (FORCE - 47)) | (1L << (HEADER - 47)))) != 0) || _la==OIDS || _la==QUOTE || _la==TEXT || _la==BINARY || _la==FREEZE || ((((_la - 415)) & ~0x3f) == 0 && ((1L << (_la - 415)) & ((1L << (NULL - 415)) | (1L << (WITH - 415)) | (1L << (FORCE_NOT_NULL - 415)) | (1L << (FORCE_NULL - 415)) | (1L << (FORCE_QUOTE - 415)) | (1L << (FORMAT - 415)))) != 0) || _la==LEFT_PAREN) {
				{
				setState(4536);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4535);
					match(WITH);
					}
				}

				setState(4543);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LEFT_PAREN:
					{
					setState(4538);
					match(LEFT_PAREN);
					setState(4539);
					copy_option_list();
					setState(4540);
					match(RIGHT_PAREN);
					}
					break;
				case CSV:
				case DELIMITER:
				case ENCODING:
				case ESCAPE:
				case FORCE:
				case HEADER:
				case OIDS:
				case QUOTE:
				case TEXT:
				case BINARY:
				case FREEZE:
				case NULL:
				case FORCE_NOT_NULL:
				case FORCE_NULL:
				case FORCE_QUOTE:
				case FORMAT:
					{
					setState(4542);
					copy_option_list();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_option_listContext extends ParserRuleContext {
		public List<Copy_optionContext> copy_option() {
			return getRuleContexts(Copy_optionContext.class);
		}
		public Copy_optionContext copy_option(int i) {
			return getRuleContext(Copy_optionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Copy_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_option_list; }
	}

	public final Copy_option_listContext copy_option_list() throws RecognitionException {
		Copy_option_listContext _localctx = new Copy_option_listContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_copy_option_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4547);
			copy_option();
			setState(4554);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 47)) & ~0x3f) == 0 && ((1L << (_la - 47)) & ((1L << (CSV - 47)) | (1L << (DELIMITER - 47)) | (1L << (ENCODING - 47)) | (1L << (ESCAPE - 47)) | (1L << (FORCE - 47)) | (1L << (HEADER - 47)))) != 0) || _la==OIDS || _la==QUOTE || _la==TEXT || _la==BINARY || _la==FREEZE || ((((_la - 415)) & ~0x3f) == 0 && ((1L << (_la - 415)) & ((1L << (NULL - 415)) | (1L << (FORCE_NOT_NULL - 415)) | (1L << (FORCE_NULL - 415)) | (1L << (FORCE_QUOTE - 415)) | (1L << (FORMAT - 415)))) != 0) || _la==COMMA) {
				{
				{
				setState(4549);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4548);
					match(COMMA);
					}
				}

				setState(4551);
				copy_option();
				}
				}
				setState(4556);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_optionContext extends ParserRuleContext {
		public TerminalNode TEXT() { return getToken(PLpgSQLParser.TEXT, 0); }
		public TerminalNode CSV() { return getToken(PLpgSQLParser.CSV, 0); }
		public TerminalNode BINARY() { return getToken(PLpgSQLParser.BINARY, 0); }
		public TerminalNode FORMAT() { return getToken(PLpgSQLParser.FORMAT, 0); }
		public TerminalNode OIDS() { return getToken(PLpgSQLParser.OIDS, 0); }
		public Truth_valueContext truth_value() {
			return getRuleContext(Truth_valueContext.class,0);
		}
		public TerminalNode FREEZE() { return getToken(PLpgSQLParser.FREEZE, 0); }
		public TerminalNode DELIMITER() { return getToken(PLpgSQLParser.DELIMITER, 0); }
		public TerminalNode Character_String_Literal() { return getToken(PLpgSQLParser.Character_String_Literal, 0); }
		public TerminalNode AS() { return getToken(PLpgSQLParser.AS, 0); }
		public TerminalNode NULL() { return getToken(PLpgSQLParser.NULL, 0); }
		public TerminalNode HEADER() { return getToken(PLpgSQLParser.HEADER, 0); }
		public TerminalNode QUOTE() { return getToken(PLpgSQLParser.QUOTE, 0); }
		public TerminalNode ESCAPE() { return getToken(PLpgSQLParser.ESCAPE, 0); }
		public TerminalNode FORCE() { return getToken(PLpgSQLParser.FORCE, 0); }
		public TerminalNode MULTIPLY() { return getToken(PLpgSQLParser.MULTIPLY, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode FORCE_QUOTE() { return getToken(PLpgSQLParser.FORCE_QUOTE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public TerminalNode NOT() { return getToken(PLpgSQLParser.NOT, 0); }
		public TerminalNode FORCE_NOT_NULL() { return getToken(PLpgSQLParser.FORCE_NOT_NULL, 0); }
		public TerminalNode FORCE_NULL() { return getToken(PLpgSQLParser.FORCE_NULL, 0); }
		public TerminalNode ENCODING() { return getToken(PLpgSQLParser.ENCODING, 0); }
		public Copy_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_option; }
	}

	public final Copy_optionContext copy_option() throws RecognitionException {
		Copy_optionContext _localctx = new Copy_optionContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_copy_option);
		int _la;
		try {
			setState(4617);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,541,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4558);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FORMAT) {
					{
					setState(4557);
					match(FORMAT);
					}
				}

				setState(4560);
				_la = _input.LA(1);
				if ( !(_la==CSV || _la==TEXT || _la==BINARY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4561);
				match(OIDS);
				setState(4563);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 397)) & ~0x3f) == 0 && ((1L << (_la - 397)) & ((1L << (FALSE - 397)) | (1L << (ON - 397)) | (1L << (TRUE - 397)))) != 0)) {
					{
					setState(4562);
					truth_value();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4565);
				match(FREEZE);
				setState(4567);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 397)) & ~0x3f) == 0 && ((1L << (_la - 397)) & ((1L << (FALSE - 397)) | (1L << (ON - 397)) | (1L << (TRUE - 397)))) != 0)) {
					{
					setState(4566);
					truth_value();
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4569);
				match(DELIMITER);
				setState(4571);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(4570);
					match(AS);
					}
				}

				setState(4573);
				match(Character_String_Literal);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4574);
				match(NULL);
				setState(4576);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(4575);
					match(AS);
					}
				}

				setState(4578);
				match(Character_String_Literal);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4579);
				match(HEADER);
				setState(4581);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 397)) & ~0x3f) == 0 && ((1L << (_la - 397)) & ((1L << (FALSE - 397)) | (1L << (ON - 397)) | (1L << (TRUE - 397)))) != 0)) {
					{
					setState(4580);
					truth_value();
					}
				}

				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4583);
				match(QUOTE);
				setState(4584);
				match(Character_String_Literal);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4585);
				match(ESCAPE);
				setState(4586);
				match(Character_String_Literal);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4587);
				match(FORCE);
				setState(4588);
				match(QUOTE);
				setState(4591);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case MULTIPLY:
					{
					setState(4589);
					match(MULTIPLY);
					}
					break;
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BY:
				case CACHE:
				case CALL:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COLUMNS:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONFLICT:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CUBE:
				case CURRENT:
				case CURSOR:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DEPENDS:
				case DETACH:
				case DICTIONARY:
				case DISABLE:
				case DISCARD:
				case DOCUMENT:
				case DOMAIN:
				case DOUBLE:
				case DROP:
				case EACH:
				case ENABLE:
				case ENCODING:
				case ENCRYPTED:
				case ENUM:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GENERATED:
				case GLOBAL:
				case GRANTED:
				case GROUPS:
				case HANDLER:
				case HEADER:
				case HOLD:
				case HOUR:
				case IDENTITY:
				case IF:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT:
				case IMPORT:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCKED:
				case LOGGED:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case METHOD:
				case MINUTE:
				case MINVALUE:
				case MODE:
				case MONTH:
				case MOVE:
				case NAME:
				case NAMES:
				case NEW:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS:
				case OBJECT:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDINALITY:
				case OTHERS:
				case OVER:
				case OVERRIDING:
				case OWNED:
				case OWNER:
				case PARALLEL:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case POLICY:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROCEDURES:
				case PROGRAM:
				case PUBLICATION:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINES:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMAS:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SKIP_:
				case SNAPSHOT:
				case SQL:
				case STABLE:
				case STANDALONE:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STORED:
				case STRICT:
				case STRIP:
				case SUBSCRIPTION:
				case SUPPORT:
				case SYSID:
				case SYSTEM:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT:
				case TIES:
				case TRANSACTION:
				case TRANSFORM:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case TYPES:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VALUE:
				case VARYING:
				case VERSION:
				case VIEW:
				case VIEWS:
				case VOLATILE:
				case WHITESPACE:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML:
				case YEAR:
				case YES:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN:
				case CHAR:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL:
				case EXISTS:
				case EXTRACT:
				case FLOAT:
				case GREATEST:
				case GROUPING:
				case INOUT:
				case INT:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OUT:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case ALIGNMENT:
				case BASETYPE:
				case BUFFERS:
				case BYPASSRLS:
				case CANONICAL:
				case CATEGORY:
				case COLLATABLE:
				case COMBINEFUNC:
				case COMMUTATOR:
				case CONNECT:
				case COSTS:
				case CREATEDB:
				case CREATEROLE:
				case DESERIALFUNC:
				case DETERMINISTIC:
				case DISABLE_PAGE_SKIPPING:
				case ELEMENT:
				case EXTENDED:
				case FINALFUNC:
				case FINALFUNC_EXTRA:
				case FINALFUNC_MODIFY:
				case FORCE_NOT_NULL:
				case FORCE_NULL:
				case FORCE_QUOTE:
				case FORMAT:
				case GETTOKEN:
				case HASH:
				case HASHES:
				case HEADLINE:
				case HYPOTHETICAL:
				case INDEX_CLEANUP:
				case INIT:
				case INITCOND:
				case INTERNALLENGTH:
				case JSON:
				case LC_COLLATE:
				case LC_CTYPE:
				case LEFTARG:
				case LEXIZE:
				case LEXTYPES:
				case LIST:
				case LOCALE:
				case LOGIN:
				case MAIN:
				case MERGES:
				case MFINALFUNC:
				case MFINALFUNC_EXTRA:
				case MFINALFUNC_MODIFY:
				case MINITCOND:
				case MINVFUNC:
				case MODULUS:
				case MSFUNC:
				case MSSPACE:
				case MSTYPE:
				case NEGATOR:
				case NOBYPASSRLS:
				case NOCREATEDB:
				case NOCREATEROLE:
				case NOINHERIT:
				case NOLOGIN:
				case NOREPLICATION:
				case NOSUPERUSER:
				case OUTPUT:
				case PASSEDBYVALUE:
				case PATH:
				case PERMISSIVE:
				case PLAIN:
				case PREFERRED:
				case PROVIDER:
				case READ_ONLY:
				case READ_WRITE:
				case RECEIVE:
				case REMAINDER:
				case REPLICATION:
				case RESTRICTED:
				case RESTRICTIVE:
				case RIGHTARG:
				case SAFE:
				case SEND:
				case SERIALFUNC:
				case SETTINGS:
				case SFUNC:
				case SHAREABLE:
				case SKIP_LOCKED:
				case SORTOP:
				case SSPACE:
				case STYPE:
				case SUBTYPE_DIFF:
				case SUBTYPE_OPCLASS:
				case SUBTYPE:
				case SUMMARY:
				case SUPERUSER:
				case TIMING:
				case TYPMOD_IN:
				case TYPMOD_OUT:
				case UNSAFE:
				case USAGE:
				case VARIABLE:
				case YAML:
				case ALIAS:
				case ASSERT:
				case CONSTANT:
				case DATATYPE:
				case DEBUG:
				case DETAIL:
				case DIAGNOSTICS:
				case ELSEIF:
				case ELSIF:
				case ERRCODE:
				case EXIT:
				case EXCEPTION:
				case FOREACH:
				case GET:
				case HINT:
				case INFO:
				case LOG:
				case LOOP:
				case MESSAGE:
				case NOTICE:
				case OPEN:
				case PERFORM:
				case QUERY:
				case RAISE:
				case RECORD:
				case RETURN:
				case REVERSE:
				case ROWTYPE:
				case SLICE:
				case SQLSTATE:
				case STACKED:
				case WARNING:
				case WHILE:
				case Identifier:
				case QuotedIdentifier:
					{
					setState(4590);
					identifier_list();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4593);
				match(FORCE_QUOTE);
				setState(4599);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case MULTIPLY:
					{
					setState(4594);
					match(MULTIPLY);
					}
					break;
				case LEFT_PAREN:
					{
					setState(4595);
					match(LEFT_PAREN);
					setState(4596);
					identifier_list();
					setState(4597);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4601);
				match(FORCE);
				setState(4602);
				match(NOT);
				setState(4603);
				match(NULL);
				setState(4604);
				identifier_list();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4605);
				match(FORCE_NOT_NULL);
				setState(4606);
				match(LEFT_PAREN);
				setState(4607);
				identifier_list();
				setState(4608);
				match(RIGHT_PAREN);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4610);
				match(FORCE_NULL);
				setState(4611);
				match(LEFT_PAREN);
				setState(4612);
				identifier_list();
				setState(4613);
				match(RIGHT_PAREN);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4615);
				match(ENCODING);
				setState(4616);
				match(Character_String_Literal);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_view_statementContext extends ParserRuleContext {
		public Schema_qualified_nameContext name;
		public View_columnsContext column_names;
		public Select_stmtContext v_query;
		public TerminalNode VIEW() { return getToken(PLpgSQLParser.VIEW, 0); }
		public TerminalNode AS() { return getToken(PLpgSQLParser.AS, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Select_stmtContext select_stmt() {
			return getRuleContext(Select_stmtContext.class,0);
		}
		public TerminalNode OR() { return getToken(PLpgSQLParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PLpgSQLParser.REPLACE, 0); }
		public TerminalNode RECURSIVE() { return getToken(PLpgSQLParser.RECURSIVE, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PLpgSQLParser.MATERIALIZED, 0); }
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public TerminalNode USING() { return getToken(PLpgSQLParser.USING, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<TerminalNode> WITH() { return getTokens(PLpgSQLParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(PLpgSQLParser.WITH, i);
		}
		public Storage_parameterContext storage_parameter() {
			return getRuleContext(Storage_parameterContext.class,0);
		}
		public Table_spaceContext table_space() {
			return getRuleContext(Table_spaceContext.class,0);
		}
		public With_check_optionContext with_check_option() {
			return getRuleContext(With_check_optionContext.class,0);
		}
		public TerminalNode DATA() { return getToken(PLpgSQLParser.DATA, 0); }
		public TerminalNode TEMP() { return getToken(PLpgSQLParser.TEMP, 0); }
		public TerminalNode TEMPORARY() { return getToken(PLpgSQLParser.TEMPORARY, 0); }
		public View_columnsContext view_columns() {
			return getRuleContext(View_columnsContext.class,0);
		}
		public TerminalNode NO() { return getToken(PLpgSQLParser.NO, 0); }
		public Create_view_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_view_statement; }
	}

	public final Create_view_statementContext create_view_statement() throws RecognitionException {
		Create_view_statementContext _localctx = new Create_view_statementContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_create_view_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4621);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(4619);
				match(OR);
				setState(4620);
				match(REPLACE);
				}
			}

			setState(4624);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				setState(4623);
				_la = _input.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4627);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RECURSIVE) {
				{
				setState(4626);
				match(RECURSIVE);
				}
			}

			setState(4630);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MATERIALIZED) {
				{
				setState(4629);
				match(MATERIALIZED);
				}
			}

			setState(4632);
			match(VIEW);
			setState(4634);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,546,_ctx) ) {
			case 1:
				{
				setState(4633);
				if_not_exists();
				}
				break;
			}
			setState(4636);
			((Create_view_statementContext)_localctx).name = schema_qualified_name();
			setState(4638);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(4637);
				((Create_view_statementContext)_localctx).column_names = view_columns();
				}
			}

			setState(4642);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(4640);
				match(USING);
				setState(4641);
				identifier();
				}
			}

			setState(4646);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4644);
				match(WITH);
				setState(4645);
				storage_parameter();
				}
			}

			setState(4649);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLESPACE) {
				{
				setState(4648);
				table_space();
				}
			}

			setState(4651);
			match(AS);
			setState(4652);
			((Create_view_statementContext)_localctx).v_query = select_stmt();
			setState(4654);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,551,_ctx) ) {
			case 1:
				{
				setState(4653);
				with_check_option();
				}
				break;
			}
			setState(4661);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4656);
				match(WITH);
				setState(4658);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(4657);
					match(NO);
					}
				}

				setState(4660);
				match(DATA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class If_existsContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(PLpgSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PLpgSQLParser.EXISTS, 0); }
		public If_existsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_if_exists; }
	}

	public final If_existsContext if_exists() throws RecognitionException {
		If_existsContext _localctx = new If_existsContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_if_exists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4663);
			match(IF);
			setState(4664);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class If_not_existsContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(PLpgSQLParser.IF, 0); }
		public TerminalNode NOT() { return getToken(PLpgSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PLpgSQLParser.EXISTS, 0); }
		public If_not_existsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_if_not_exists; }
	}

	public final If_not_existsContext if_not_exists() throws RecognitionException {
		If_not_existsContext _localctx = new If_not_existsContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_if_not_exists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4666);
			match(IF);
			setState(4667);
			match(NOT);
			setState(4668);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class View_columnsContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public View_columnsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_view_columns; }
	}

	public final View_columnsContext view_columns() throws RecognitionException {
		View_columnsContext _localctx = new View_columnsContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_view_columns);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4670);
			match(LEFT_PAREN);
			setState(4671);
			identifier();
			setState(4676);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4672);
				match(COMMA);
				setState(4673);
				identifier();
				}
				}
				setState(4678);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4679);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_check_optionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PLpgSQLParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(PLpgSQLParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(PLpgSQLParser.OPTION, 0); }
		public TerminalNode CASCADED() { return getToken(PLpgSQLParser.CASCADED, 0); }
		public TerminalNode LOCAL() { return getToken(PLpgSQLParser.LOCAL, 0); }
		public With_check_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_check_option; }
	}

	public final With_check_optionContext with_check_option() throws RecognitionException {
		With_check_optionContext _localctx = new With_check_optionContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_with_check_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4681);
			match(WITH);
			setState(4683);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADED || _la==LOCAL) {
				{
				setState(4682);
				_la = _input.LA(1);
				if ( !(_la==CASCADED || _la==LOCAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4685);
			match(CHECK);
			setState(4686);
			match(OPTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_table_statementContext extends ParserRuleContext {
		public Schema_qualified_nameContext name;
		public TerminalNode TABLE() { return getToken(PLpgSQLParser.TABLE, 0); }
		public Define_tableContext define_table() {
			return getRuleContext(Define_tableContext.class,0);
		}
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public TerminalNode UNLOGGED() { return getToken(PLpgSQLParser.UNLOGGED, 0); }
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public Partition_byContext partition_by() {
			return getRuleContext(Partition_byContext.class,0);
		}
		public TerminalNode USING() { return getToken(PLpgSQLParser.USING, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Storage_parameter_oidContext storage_parameter_oid() {
			return getRuleContext(Storage_parameter_oidContext.class,0);
		}
		public On_commitContext on_commit() {
			return getRuleContext(On_commitContext.class,0);
		}
		public Table_spaceContext table_space() {
			return getRuleContext(Table_spaceContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(PLpgSQLParser.TEMPORARY, 0); }
		public TerminalNode TEMP() { return getToken(PLpgSQLParser.TEMP, 0); }
		public TerminalNode GLOBAL() { return getToken(PLpgSQLParser.GLOBAL, 0); }
		public TerminalNode LOCAL() { return getToken(PLpgSQLParser.LOCAL, 0); }
		public Create_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table_statement; }
	}

	public final Create_table_statementContext create_table_statement() throws RecognitionException {
		Create_table_statementContext _localctx = new Create_table_statementContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_create_table_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4693);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GLOBAL:
			case LOCAL:
			case TEMP:
			case TEMPORARY:
				{
				setState(4689);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GLOBAL || _la==LOCAL) {
					{
					setState(4688);
					_la = _input.LA(1);
					if ( !(_la==GLOBAL || _la==LOCAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(4691);
				_la = _input.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case UNLOGGED:
				{
				setState(4692);
				match(UNLOGGED);
				}
				break;
			case TABLE:
				break;
			default:
				break;
			}
			setState(4695);
			match(TABLE);
			setState(4697);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,558,_ctx) ) {
			case 1:
				{
				setState(4696);
				if_not_exists();
				}
				break;
			}
			setState(4699);
			((Create_table_statementContext)_localctx).name = schema_qualified_name();
			setState(4700);
			define_table();
			setState(4702);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(4701);
				partition_by();
				}
			}

			setState(4706);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(4704);
				match(USING);
				setState(4705);
				identifier();
				}
			}

			setState(4709);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITHOUT || _la==WITH) {
				{
				setState(4708);
				storage_parameter_oid();
				}
			}

			setState(4712);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(4711);
				on_commit();
				}
			}

			setState(4715);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLESPACE) {
				{
				setState(4714);
				table_space();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_table_as_statementContext extends ParserRuleContext {
		public Schema_qualified_nameContext name;
		public TerminalNode TABLE() { return getToken(PLpgSQLParser.TABLE, 0); }
		public TerminalNode AS() { return getToken(PLpgSQLParser.AS, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Select_stmtContext select_stmt() {
			return getRuleContext(Select_stmtContext.class,0);
		}
		public TerminalNode EXECUTE() { return getToken(PLpgSQLParser.EXECUTE, 0); }
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public TerminalNode UNLOGGED() { return getToken(PLpgSQLParser.UNLOGGED, 0); }
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public Names_in_parensContext names_in_parens() {
			return getRuleContext(Names_in_parensContext.class,0);
		}
		public TerminalNode USING() { return getToken(PLpgSQLParser.USING, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Storage_parameter_oidContext storage_parameter_oid() {
			return getRuleContext(Storage_parameter_oidContext.class,0);
		}
		public On_commitContext on_commit() {
			return getRuleContext(On_commitContext.class,0);
		}
		public Table_spaceContext table_space() {
			return getRuleContext(Table_spaceContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PLpgSQLParser.WITH, 0); }
		public TerminalNode DATA() { return getToken(PLpgSQLParser.DATA, 0); }
		public TerminalNode TEMPORARY() { return getToken(PLpgSQLParser.TEMPORARY, 0); }
		public TerminalNode TEMP() { return getToken(PLpgSQLParser.TEMP, 0); }
		public TerminalNode NO() { return getToken(PLpgSQLParser.NO, 0); }
		public TerminalNode GLOBAL() { return getToken(PLpgSQLParser.GLOBAL, 0); }
		public TerminalNode LOCAL() { return getToken(PLpgSQLParser.LOCAL, 0); }
		public Create_table_as_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table_as_statement; }
	}

	public final Create_table_as_statementContext create_table_as_statement() throws RecognitionException {
		Create_table_as_statementContext _localctx = new Create_table_as_statementContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_create_table_as_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4722);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GLOBAL:
			case LOCAL:
			case TEMP:
			case TEMPORARY:
				{
				setState(4718);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GLOBAL || _la==LOCAL) {
					{
					setState(4717);
					_la = _input.LA(1);
					if ( !(_la==GLOBAL || _la==LOCAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(4720);
				_la = _input.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case UNLOGGED:
				{
				setState(4721);
				match(UNLOGGED);
				}
				break;
			case TABLE:
				break;
			default:
				break;
			}
			setState(4724);
			match(TABLE);
			setState(4726);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,566,_ctx) ) {
			case 1:
				{
				setState(4725);
				if_not_exists();
				}
				break;
			}
			setState(4728);
			((Create_table_as_statementContext)_localctx).name = schema_qualified_name();
			setState(4730);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(4729);
				names_in_parens();
				}
			}

			setState(4734);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(4732);
				match(USING);
				setState(4733);
				identifier();
				}
			}

			setState(4737);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITHOUT || _la==WITH) {
				{
				setState(4736);
				storage_parameter_oid();
				}
			}

			setState(4740);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(4739);
				on_commit();
				}
			}

			setState(4743);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLESPACE) {
				{
				setState(4742);
				table_space();
				}
			}

			setState(4745);
			match(AS);
			setState(4749);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VALUES:
			case SELECT:
			case TABLE:
			case WITH:
			case LEFT_PAREN:
				{
				setState(4746);
				select_stmt();
				}
				break;
			case EXECUTE:
				{
				setState(4747);
				match(EXECUTE);
				setState(4748);
				function_call();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4756);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4751);
				match(WITH);
				setState(4753);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(4752);
					match(NO);
					}
				}

				setState(4755);
				match(DATA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_foreign_table_statementContext extends ParserRuleContext {
		public Schema_qualified_nameContext name;
		public TerminalNode FOREIGN() { return getToken(PLpgSQLParser.FOREIGN, 0); }
		public TerminalNode TABLE() { return getToken(PLpgSQLParser.TABLE, 0); }
		public Define_serverContext define_server() {
			return getRuleContext(Define_serverContext.class,0);
		}
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Define_columnsContext define_columns() {
			return getRuleContext(Define_columnsContext.class,0);
		}
		public Define_partitionContext define_partition() {
			return getRuleContext(Define_partitionContext.class,0);
		}
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public Create_foreign_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_foreign_table_statement; }
	}

	public final Create_foreign_table_statementContext create_foreign_table_statement() throws RecognitionException {
		Create_foreign_table_statementContext _localctx = new Create_foreign_table_statementContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_create_foreign_table_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4758);
			match(FOREIGN);
			setState(4759);
			match(TABLE);
			setState(4761);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,575,_ctx) ) {
			case 1:
				{
				setState(4760);
				if_not_exists();
				}
				break;
			}
			setState(4763);
			((Create_foreign_table_statementContext)_localctx).name = schema_qualified_name();
			setState(4766);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_PAREN:
				{
				setState(4764);
				define_columns();
				}
				break;
			case PARTITION:
				{
				setState(4765);
				define_partition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4768);
			define_server();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Define_tableContext extends ParserRuleContext {
		public Define_columnsContext define_columns() {
			return getRuleContext(Define_columnsContext.class,0);
		}
		public Define_typeContext define_type() {
			return getRuleContext(Define_typeContext.class,0);
		}
		public Define_partitionContext define_partition() {
			return getRuleContext(Define_partitionContext.class,0);
		}
		public Define_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_define_table; }
	}

	public final Define_tableContext define_table() throws RecognitionException {
		Define_tableContext _localctx = new Define_tableContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_define_table);
		try {
			setState(4773);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 1);
				{
				setState(4770);
				define_columns();
				}
				break;
			case OF:
				enterOuterAlt(_localctx, 2);
				{
				setState(4771);
				define_type();
				}
				break;
			case PARTITION:
				enterOuterAlt(_localctx, 3);
				{
				setState(4772);
				define_partition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Define_partitionContext extends ParserRuleContext {
		public Schema_qualified_nameContext parent_table;
		public TerminalNode PARTITION() { return getToken(PLpgSQLParser.PARTITION, 0); }
		public TerminalNode OF() { return getToken(PLpgSQLParser.OF, 0); }
		public For_values_boundContext for_values_bound() {
			return getRuleContext(For_values_boundContext.class,0);
		}
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public List_of_type_column_defContext list_of_type_column_def() {
			return getRuleContext(List_of_type_column_defContext.class,0);
		}
		public Define_partitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_define_partition; }
	}

	public final Define_partitionContext define_partition() throws RecognitionException {
		Define_partitionContext _localctx = new Define_partitionContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_define_partition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4775);
			match(PARTITION);
			setState(4776);
			match(OF);
			setState(4777);
			((Define_partitionContext)_localctx).parent_table = schema_qualified_name();
			setState(4779);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(4778);
				list_of_type_column_def();
				}
			}

			setState(4781);
			for_values_bound();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_values_boundContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PLpgSQLParser.FOR, 0); }
		public TerminalNode VALUES() { return getToken(PLpgSQLParser.VALUES, 0); }
		public Partition_bound_specContext partition_bound_spec() {
			return getRuleContext(Partition_bound_specContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PLpgSQLParser.DEFAULT, 0); }
		public For_values_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_values_bound; }
	}

	public final For_values_boundContext for_values_bound() throws RecognitionException {
		For_values_boundContext _localctx = new For_values_boundContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_for_values_bound);
		try {
			setState(4787);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4783);
				match(FOR);
				setState(4784);
				match(VALUES);
				setState(4785);
				partition_bound_spec();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4786);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_bound_specContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(PLpgSQLParser.IN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public TerminalNode FROM() { return getToken(PLpgSQLParser.FROM, 0); }
		public List<Partition_bound_partContext> partition_bound_part() {
			return getRuleContexts(Partition_bound_partContext.class);
		}
		public Partition_bound_partContext partition_bound_part(int i) {
			return getRuleContext(Partition_bound_partContext.class,i);
		}
		public TerminalNode TO() { return getToken(PLpgSQLParser.TO, 0); }
		public TerminalNode WITH() { return getToken(PLpgSQLParser.WITH, 0); }
		public TerminalNode MODULUS() { return getToken(PLpgSQLParser.MODULUS, 0); }
		public List<TerminalNode> NUMBER_LITERAL() { return getTokens(PLpgSQLParser.NUMBER_LITERAL); }
		public TerminalNode NUMBER_LITERAL(int i) {
			return getToken(PLpgSQLParser.NUMBER_LITERAL, i);
		}
		public TerminalNode REMAINDER() { return getToken(PLpgSQLParser.REMAINDER, 0); }
		public Partition_bound_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_bound_spec; }
	}

	public final Partition_bound_specContext partition_bound_spec() throws RecognitionException {
		Partition_bound_specContext _localctx = new Partition_bound_specContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_partition_bound_spec);
		int _la;
		try {
			setState(4814);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IN:
				enterOuterAlt(_localctx, 1);
				{
				setState(4789);
				match(IN);
				setState(4790);
				match(LEFT_PAREN);
				setState(4791);
				vex(0);
				setState(4796);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4792);
					match(COMMA);
					setState(4793);
					vex(0);
					}
					}
					setState(4798);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4799);
				match(RIGHT_PAREN);
				}
				break;
			case FROM:
				enterOuterAlt(_localctx, 2);
				{
				setState(4801);
				match(FROM);
				setState(4802);
				partition_bound_part();
				setState(4803);
				match(TO);
				setState(4804);
				partition_bound_part();
				}
				break;
			case WITH:
				enterOuterAlt(_localctx, 3);
				{
				setState(4806);
				match(WITH);
				setState(4807);
				match(LEFT_PAREN);
				setState(4808);
				match(MODULUS);
				setState(4809);
				match(NUMBER_LITERAL);
				setState(4810);
				match(COMMA);
				setState(4811);
				match(REMAINDER);
				setState(4812);
				match(NUMBER_LITERAL);
				setState(4813);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_bound_partContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Partition_bound_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_bound_part; }
	}

	public final Partition_bound_partContext partition_bound_part() throws RecognitionException {
		Partition_bound_partContext _localctx = new Partition_bound_partContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_partition_bound_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4816);
			match(LEFT_PAREN);
			setState(4817);
			vex(0);
			setState(4822);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4818);
				match(COMMA);
				setState(4819);
				vex(0);
				}
				}
				setState(4824);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4825);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Define_columnsContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public List<Table_column_defContext> table_column_def() {
			return getRuleContexts(Table_column_defContext.class);
		}
		public Table_column_defContext table_column_def(int i) {
			return getRuleContext(Table_column_defContext.class,i);
		}
		public TerminalNode INHERITS() { return getToken(PLpgSQLParser.INHERITS, 0); }
		public Names_in_parensContext names_in_parens() {
			return getRuleContext(Names_in_parensContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Define_columnsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_define_columns; }
	}

	public final Define_columnsContext define_columns() throws RecognitionException {
		Define_columnsContext _localctx = new Define_columnsContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_define_columns);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4827);
			match(LEFT_PAREN);
			setState(4836);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATTACH) | (1L << ATTRIBUTE) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BY) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG) | (1L << CHAIN) | (1L << CHARACTERISTICS) | (1L << CHECKPOINT) | (1L << CLASS) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMENTS) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONFIGURATION) | (1L << CONFLICT) | (1L << CONNECTION) | (1L << CONSTRAINTS) | (1L << CONTENT) | (1L << CONTINUE) | (1L << CONVERSION) | (1L << COPY) | (1L << COST) | (1L << CSV) | (1L << CUBE) | (1L << CURRENT) | (1L << CURSOR) | (1L << CYCLE) | (1L << DATA) | (1L << DATABASE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DEFAULTS) | (1L << DEFERRED) | (1L << DEFINER) | (1L << DELETE) | (1L << DELIMITER) | (1L << DELIMITERS) | (1L << DEPENDS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DETACH - 64)) | (1L << (DICTIONARY - 64)) | (1L << (DISABLE - 64)) | (1L << (DISCARD - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOMAIN - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (EACH - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTED - 64)) | (1L << (ENUM - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVENT - 64)) | (1L << (EXCLUDE - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXCLUSIVE - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTENSION - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FAMILY - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORCE - 64)) | (1L << (FORWARD - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GENERATED - 64)) | (1L << (GLOBAL - 64)) | (1L << (GRANTED - 64)) | (1L << (GROUPS - 64)) | (1L << (HANDLER - 64)) | (1L << (HEADER - 64)) | (1L << (HOLD - 64)) | (1L << (HOUR - 64)) | (1L << (IDENTITY - 64)) | (1L << (IF - 64)) | (1L << (IMMEDIATE - 64)) | (1L << (IMMUTABLE - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPORT - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INCREMENT - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXES - 64)) | (1L << (INHERIT - 64)) | (1L << (INHERITS - 64)) | (1L << (INLINE - 64)) | (1L << (INPUT - 64)) | (1L << (INSENSITIVE - 64)) | (1L << (INSERT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INVOKER - 64)) | (1L << (ISOLATION - 64)) | (1L << (KEY - 64)) | (1L << (LABEL - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LARGE - 64)) | (1L << (LAST - 64)) | (1L << (LEAKPROOF - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LEVEL - 128)) | (1L << (LISTEN - 128)) | (1L << (LOAD - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCATION - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKED - 128)) | (1L << (LOGGED - 128)) | (1L << (MAPPING - 128)) | (1L << (MATCH - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MAXVALUE - 128)) | (1L << (METHOD - 128)) | (1L << (MINUTE - 128)) | (1L << (MINVALUE - 128)) | (1L << (MODE - 128)) | (1L << (MONTH - 128)) | (1L << (MOVE - 128)) | (1L << (NAME - 128)) | (1L << (NAMES - 128)) | (1L << (NEW - 128)) | (1L << (NEXT - 128)) | (1L << (NO - 128)) | (1L << (NOTHING - 128)) | (1L << (NOTIFY - 128)) | (1L << (NOWAIT - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFF - 128)) | (1L << (OIDS - 128)) | (1L << (OLD - 128)) | (1L << (OPERATOR - 128)) | (1L << (OPTION - 128)) | (1L << (OPTIONS - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OTHERS - 128)) | (1L << (OVER - 128)) | (1L << (OVERRIDING - 128)) | (1L << (OWNED - 128)) | (1L << (OWNER - 128)) | (1L << (PARALLEL - 128)) | (1L << (PARSER - 128)) | (1L << (PARTIAL - 128)) | (1L << (PARTITION - 128)) | (1L << (PASSING - 128)) | (1L << (PASSWORD - 128)) | (1L << (PLANS - 128)) | (1L << (POLICY - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PREPARED - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRIOR - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROCEDURAL - 128)) | (1L << (PROCEDURE - 128)) | (1L << (PROCEDURES - 128)) | (1L << (PROGRAM - 128)) | (1L << (PUBLICATION - 128)) | (1L << (QUOTE - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (REASSIGN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (RECHECK - 192)) | (1L << (RECURSIVE - 192)) | (1L << (REF - 192)) | (1L << (REFERENCING - 192)) | (1L << (REFRESH - 192)) | (1L << (REINDEX - 192)) | (1L << (RELATIVE - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (REPLICA - 192)) | (1L << (RESET - 192)) | (1L << (RESTART - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUTINE - 192)) | (1L << (ROUTINES - 192)) | (1L << (ROWS - 192)) | (1L << (RULE - 192)) | (1L << (SAVEPOINT - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SCROLL - 192)) | (1L << (SEARCH - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEQUENCE - 192)) | (1L << (SEQUENCES - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SERVER - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHARE - 192)) | (1L << (SHOW - 192)) | (1L << (SIMPLE - 192)) | (1L << (SKIP_ - 192)) | (1L << (SNAPSHOT - 192)) | (1L << (SQL - 192)) | (1L << (STABLE - 192)) | (1L << (STANDALONE - 192)) | (1L << (START - 192)) | (1L << (STATEMENT - 192)) | (1L << (STATISTICS - 192)) | (1L << (STDIN - 192)) | (1L << (STDOUT - 192)) | (1L << (STORAGE - 192)) | (1L << (STORED - 192)) | (1L << (STRICT - 192)) | (1L << (STRIP - 192)) | (1L << (SUBSCRIPTION - 192)) | (1L << (SUPPORT - 192)) | (1L << (SYSID - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESPACE - 192)) | (1L << (TEMP - 192)) | (1L << (TEMPLATE - 192)) | (1L << (TEMPORARY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TEXT - 256)) | (1L << (TIES - 256)) | (1L << (TRANSACTION - 256)) | (1L << (TRANSFORM - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TRUSTED - 256)) | (1L << (TYPE - 256)) | (1L << (TYPES - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNENCRYPTED - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNLISTEN - 256)) | (1L << (UNLOGGED - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (VACUUM - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALIDATOR - 256)) | (1L << (VALUE - 256)) | (1L << (VARYING - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (VIEWS - 256)) | (1L << (VOLATILE - 256)) | (1L << (WHITESPACE - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (XML - 256)) | (1L << (YEAR - 256)) | (1L << (YES - 256)) | (1L << (ZONE - 256)) | (1L << (BETWEEN - 256)) | (1L << (BIGINT - 256)) | (1L << (BIT - 256)) | (1L << (BOOLEAN - 256)) | (1L << (CHAR - 256)) | (1L << (CHARACTER - 256)) | (1L << (COALESCE - 256)) | (1L << (DEC - 256)) | (1L << (DECIMAL - 256)) | (1L << (EXISTS - 256)) | (1L << (EXTRACT - 256)) | (1L << (FLOAT - 256)) | (1L << (GREATEST - 256)) | (1L << (GROUPING - 256)) | (1L << (INOUT - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERVAL - 256)) | (1L << (LEAST - 256)) | (1L << (NATIONAL - 256)) | (1L << (NCHAR - 256)) | (1L << (NONE - 256)) | (1L << (NULLIF - 256)) | (1L << (NUMERIC - 256)) | (1L << (OUT - 256)) | (1L << (OVERLAY - 256)) | (1L << (POSITION - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRECISION - 320)) | (1L << (REAL - 320)) | (1L << (ROW - 320)) | (1L << (SETOF - 320)) | (1L << (SMALLINT - 320)) | (1L << (SUBSTRING - 320)) | (1L << (TIME - 320)) | (1L << (TIMESTAMP - 320)) | (1L << (TREAT - 320)) | (1L << (TRIM - 320)) | (1L << (VALUES - 320)) | (1L << (VARCHAR - 320)) | (1L << (XMLATTRIBUTES - 320)) | (1L << (XMLCONCAT - 320)) | (1L << (XMLELEMENT - 320)) | (1L << (XMLEXISTS - 320)) | (1L << (XMLFOREST - 320)) | (1L << (XMLNAMESPACES - 320)) | (1L << (XMLPARSE - 320)) | (1L << (XMLPI - 320)) | (1L << (XMLROOT - 320)) | (1L << (XMLSERIALIZE - 320)) | (1L << (XMLTABLE - 320)) | (1L << (LIKE - 320)) | (1L << (CHECK - 320)) | (1L << (CONSTRAINT - 320)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (DEFAULT - 389)) | (1L << (FOREIGN - 389)) | (1L << (NOT - 389)) | (1L << (NULL - 389)) | (1L << (PRIMARY - 389)) | (1L << (REFERENCES - 389)) | (1L << (UNIQUE - 389)) | (1L << (ALIGNMENT - 389)) | (1L << (BASETYPE - 389)) | (1L << (BUFFERS - 389)) | (1L << (BYPASSRLS - 389)) | (1L << (CANONICAL - 389)) | (1L << (CATEGORY - 389)) | (1L << (COLLATABLE - 389)) | (1L << (COMBINEFUNC - 389)) | (1L << (COMMUTATOR - 389)) | (1L << (CONNECT - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (COSTS - 453)) | (1L << (CREATEDB - 453)) | (1L << (CREATEROLE - 453)) | (1L << (DESERIALFUNC - 453)) | (1L << (DETERMINISTIC - 453)) | (1L << (DISABLE_PAGE_SKIPPING - 453)) | (1L << (ELEMENT - 453)) | (1L << (EXTENDED - 453)) | (1L << (FINALFUNC - 453)) | (1L << (FINALFUNC_EXTRA - 453)) | (1L << (FINALFUNC_MODIFY - 453)) | (1L << (FORCE_NOT_NULL - 453)) | (1L << (FORCE_NULL - 453)) | (1L << (FORCE_QUOTE - 453)) | (1L << (FORMAT - 453)) | (1L << (GETTOKEN - 453)) | (1L << (HASH - 453)) | (1L << (HASHES - 453)) | (1L << (HEADLINE - 453)) | (1L << (HYPOTHETICAL - 453)) | (1L << (INDEX_CLEANUP - 453)) | (1L << (INIT - 453)) | (1L << (INITCOND - 453)) | (1L << (INTERNALLENGTH - 453)) | (1L << (JSON - 453)) | (1L << (LC_COLLATE - 453)) | (1L << (LC_CTYPE - 453)) | (1L << (LEFTARG - 453)) | (1L << (LEXIZE - 453)) | (1L << (LEXTYPES - 453)) | (1L << (LIST - 453)) | (1L << (LOCALE - 453)) | (1L << (LOGIN - 453)) | (1L << (MAIN - 453)) | (1L << (MERGES - 453)) | (1L << (MFINALFUNC - 453)) | (1L << (MFINALFUNC_EXTRA - 453)) | (1L << (MFINALFUNC_MODIFY - 453)) | (1L << (MINITCOND - 453)) | (1L << (MINVFUNC - 453)) | (1L << (MODULUS - 453)) | (1L << (MSFUNC - 453)) | (1L << (MSSPACE - 453)) | (1L << (MSTYPE - 453)) | (1L << (NEGATOR - 453)) | (1L << (NOBYPASSRLS - 453)) | (1L << (NOCREATEDB - 453)) | (1L << (NOCREATEROLE - 453)) | (1L << (NOINHERIT - 453)) | (1L << (NOLOGIN - 453)) | (1L << (NOREPLICATION - 453)) | (1L << (NOSUPERUSER - 453)) | (1L << (OUTPUT - 453)) | (1L << (PASSEDBYVALUE - 453)) | (1L << (PATH - 453)) | (1L << (PERMISSIVE - 453)) | (1L << (PLAIN - 453)) | (1L << (PREFERRED - 453)) | (1L << (PROVIDER - 453)) | (1L << (READ_ONLY - 453)) | (1L << (READ_WRITE - 453)) | (1L << (RECEIVE - 453)) | (1L << (REMAINDER - 453)) | (1L << (REPLICATION - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (RESTRICTED - 517)) | (1L << (RESTRICTIVE - 517)) | (1L << (RIGHTARG - 517)) | (1L << (SAFE - 517)) | (1L << (SEND - 517)) | (1L << (SERIALFUNC - 517)) | (1L << (SETTINGS - 517)) | (1L << (SFUNC - 517)) | (1L << (SHAREABLE - 517)) | (1L << (SKIP_LOCKED - 517)) | (1L << (SORTOP - 517)) | (1L << (SSPACE - 517)) | (1L << (STYPE - 517)) | (1L << (SUBTYPE_DIFF - 517)) | (1L << (SUBTYPE_OPCLASS - 517)) | (1L << (SUBTYPE - 517)) | (1L << (SUMMARY - 517)) | (1L << (SUPERUSER - 517)) | (1L << (TIMING - 517)) | (1L << (TYPMOD_IN - 517)) | (1L << (TYPMOD_OUT - 517)) | (1L << (UNSAFE - 517)) | (1L << (USAGE - 517)) | (1L << (VARIABLE - 517)) | (1L << (YAML - 517)) | (1L << (ALIAS - 517)) | (1L << (ASSERT - 517)) | (1L << (CONSTANT - 517)) | (1L << (DATATYPE - 517)) | (1L << (DEBUG - 517)) | (1L << (DETAIL - 517)) | (1L << (DIAGNOSTICS - 517)) | (1L << (ELSEIF - 517)) | (1L << (ELSIF - 517)) | (1L << (ERRCODE - 517)) | (1L << (EXIT - 517)) | (1L << (EXCEPTION - 517)) | (1L << (FOREACH - 517)) | (1L << (GET - 517)) | (1L << (HINT - 517)) | (1L << (INFO - 517)) | (1L << (LOG - 517)) | (1L << (LOOP - 517)) | (1L << (MESSAGE - 517)) | (1L << (NOTICE - 517)) | (1L << (OPEN - 517)) | (1L << (PERFORM - 517)) | (1L << (QUERY - 517)) | (1L << (RAISE - 517)) | (1L << (RECORD - 517)) | (1L << (RETURN - 517)) | (1L << (REVERSE - 517)) | (1L << (ROWTYPE - 517)) | (1L << (SLICE - 517)) | (1L << (SQLSTATE - 517)) | (1L << (STACKED - 517)) | (1L << (WARNING - 517)) | (1L << (WHILE - 517)))) != 0) || _la==Identifier || _la==QuotedIdentifier) {
				{
				setState(4828);
				table_column_def();
				setState(4833);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4829);
					match(COMMA);
					setState(4830);
					table_column_def();
					}
					}
					setState(4835);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(4838);
			match(RIGHT_PAREN);
			setState(4841);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INHERITS) {
				{
				setState(4839);
				match(INHERITS);
				setState(4840);
				names_in_parens();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Define_typeContext extends ParserRuleContext {
		public Data_typeContext type_name;
		public TerminalNode OF() { return getToken(PLpgSQLParser.OF, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public List_of_type_column_defContext list_of_type_column_def() {
			return getRuleContext(List_of_type_column_defContext.class,0);
		}
		public Define_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_define_type; }
	}

	public final Define_typeContext define_type() throws RecognitionException {
		Define_typeContext _localctx = new Define_typeContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_define_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4843);
			match(OF);
			setState(4844);
			((Define_typeContext)_localctx).type_name = data_type();
			setState(4846);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(4845);
				list_of_type_column_def();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_byContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PLpgSQLParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PLpgSQLParser.BY, 0); }
		public Partition_methodContext partition_method() {
			return getRuleContext(Partition_methodContext.class,0);
		}
		public Partition_byContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_by; }
	}

	public final Partition_byContext partition_by() throws RecognitionException {
		Partition_byContext _localctx = new Partition_byContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_partition_by);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4848);
			match(PARTITION);
			setState(4849);
			match(BY);
			setState(4850);
			partition_method();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_methodContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public List<Partition_columnContext> partition_column() {
			return getRuleContexts(Partition_columnContext.class);
		}
		public Partition_columnContext partition_column(int i) {
			return getRuleContext(Partition_columnContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public TerminalNode RANGE() { return getToken(PLpgSQLParser.RANGE, 0); }
		public TerminalNode LIST() { return getToken(PLpgSQLParser.LIST, 0); }
		public TerminalNode HASH() { return getToken(PLpgSQLParser.HASH, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Partition_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_method; }
	}

	public final Partition_methodContext partition_method() throws RecognitionException {
		Partition_methodContext _localctx = new Partition_methodContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_partition_method);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4852);
			_la = _input.LA(1);
			if ( !(_la==RANGE || _la==HASH || _la==LIST) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4853);
			match(LEFT_PAREN);
			setState(4854);
			partition_column();
			setState(4859);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4855);
				match(COMMA);
				setState(4856);
				partition_column();
				}
				}
				setState(4861);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4862);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_columnContext extends ParserRuleContext {
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Partition_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_column; }
	}

	public final Partition_columnContext partition_column() throws RecognitionException {
		Partition_columnContext _localctx = new Partition_columnContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_partition_column);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4864);
			vex(0);
			setState(4866);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATTACH) | (1L << ATTRIBUTE) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BY) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG) | (1L << CHAIN) | (1L << CHARACTERISTICS) | (1L << CHECKPOINT) | (1L << CLASS) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMENTS) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONFIGURATION) | (1L << CONFLICT) | (1L << CONNECTION) | (1L << CONSTRAINTS) | (1L << CONTENT) | (1L << CONTINUE) | (1L << CONVERSION) | (1L << COPY) | (1L << COST) | (1L << CSV) | (1L << CUBE) | (1L << CURRENT) | (1L << CURSOR) | (1L << CYCLE) | (1L << DATA) | (1L << DATABASE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DEFAULTS) | (1L << DEFERRED) | (1L << DEFINER) | (1L << DELETE) | (1L << DELIMITER) | (1L << DELIMITERS) | (1L << DEPENDS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DETACH - 64)) | (1L << (DICTIONARY - 64)) | (1L << (DISABLE - 64)) | (1L << (DISCARD - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOMAIN - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (EACH - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTED - 64)) | (1L << (ENUM - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVENT - 64)) | (1L << (EXCLUDE - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXCLUSIVE - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTENSION - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FAMILY - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORCE - 64)) | (1L << (FORWARD - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GENERATED - 64)) | (1L << (GLOBAL - 64)) | (1L << (GRANTED - 64)) | (1L << (GROUPS - 64)) | (1L << (HANDLER - 64)) | (1L << (HEADER - 64)) | (1L << (HOLD - 64)) | (1L << (HOUR - 64)) | (1L << (IDENTITY - 64)) | (1L << (IF - 64)) | (1L << (IMMEDIATE - 64)) | (1L << (IMMUTABLE - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPORT - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INCREMENT - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXES - 64)) | (1L << (INHERIT - 64)) | (1L << (INHERITS - 64)) | (1L << (INLINE - 64)) | (1L << (INPUT - 64)) | (1L << (INSENSITIVE - 64)) | (1L << (INSERT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INVOKER - 64)) | (1L << (ISOLATION - 64)) | (1L << (KEY - 64)) | (1L << (LABEL - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LARGE - 64)) | (1L << (LAST - 64)) | (1L << (LEAKPROOF - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LEVEL - 128)) | (1L << (LISTEN - 128)) | (1L << (LOAD - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCATION - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKED - 128)) | (1L << (LOGGED - 128)) | (1L << (MAPPING - 128)) | (1L << (MATCH - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MAXVALUE - 128)) | (1L << (METHOD - 128)) | (1L << (MINUTE - 128)) | (1L << (MINVALUE - 128)) | (1L << (MODE - 128)) | (1L << (MONTH - 128)) | (1L << (MOVE - 128)) | (1L << (NAME - 128)) | (1L << (NAMES - 128)) | (1L << (NEW - 128)) | (1L << (NEXT - 128)) | (1L << (NO - 128)) | (1L << (NOTHING - 128)) | (1L << (NOTIFY - 128)) | (1L << (NOWAIT - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFF - 128)) | (1L << (OIDS - 128)) | (1L << (OLD - 128)) | (1L << (OPERATOR - 128)) | (1L << (OPTION - 128)) | (1L << (OPTIONS - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OTHERS - 128)) | (1L << (OVER - 128)) | (1L << (OVERRIDING - 128)) | (1L << (OWNED - 128)) | (1L << (OWNER - 128)) | (1L << (PARALLEL - 128)) | (1L << (PARSER - 128)) | (1L << (PARTIAL - 128)) | (1L << (PARTITION - 128)) | (1L << (PASSING - 128)) | (1L << (PASSWORD - 128)) | (1L << (PLANS - 128)) | (1L << (POLICY - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PREPARED - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRIOR - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROCEDURAL - 128)) | (1L << (PROCEDURE - 128)) | (1L << (PROCEDURES - 128)) | (1L << (PROGRAM - 128)) | (1L << (PUBLICATION - 128)) | (1L << (QUOTE - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (REASSIGN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (RECHECK - 192)) | (1L << (RECURSIVE - 192)) | (1L << (REF - 192)) | (1L << (REFERENCING - 192)) | (1L << (REFRESH - 192)) | (1L << (REINDEX - 192)) | (1L << (RELATIVE - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (REPLICA - 192)) | (1L << (RESET - 192)) | (1L << (RESTART - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUTINE - 192)) | (1L << (ROUTINES - 192)) | (1L << (ROWS - 192)) | (1L << (RULE - 192)) | (1L << (SAVEPOINT - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SCROLL - 192)) | (1L << (SEARCH - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEQUENCE - 192)) | (1L << (SEQUENCES - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SERVER - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHARE - 192)) | (1L << (SHOW - 192)) | (1L << (SIMPLE - 192)) | (1L << (SKIP_ - 192)) | (1L << (SNAPSHOT - 192)) | (1L << (SQL - 192)) | (1L << (STABLE - 192)) | (1L << (STANDALONE - 192)) | (1L << (START - 192)) | (1L << (STATEMENT - 192)) | (1L << (STATISTICS - 192)) | (1L << (STDIN - 192)) | (1L << (STDOUT - 192)) | (1L << (STORAGE - 192)) | (1L << (STORED - 192)) | (1L << (STRICT - 192)) | (1L << (STRIP - 192)) | (1L << (SUBSCRIPTION - 192)) | (1L << (SUPPORT - 192)) | (1L << (SYSID - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESPACE - 192)) | (1L << (TEMP - 192)) | (1L << (TEMPLATE - 192)) | (1L << (TEMPORARY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TEXT - 256)) | (1L << (TIES - 256)) | (1L << (TRANSACTION - 256)) | (1L << (TRANSFORM - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TRUSTED - 256)) | (1L << (TYPE - 256)) | (1L << (TYPES - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNENCRYPTED - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNLISTEN - 256)) | (1L << (UNLOGGED - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (VACUUM - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALIDATOR - 256)) | (1L << (VALUE - 256)) | (1L << (VARYING - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (VIEWS - 256)) | (1L << (VOLATILE - 256)) | (1L << (WHITESPACE - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (XML - 256)) | (1L << (YEAR - 256)) | (1L << (YES - 256)) | (1L << (ZONE - 256)) | (1L << (BETWEEN - 256)) | (1L << (BIGINT - 256)) | (1L << (BIT - 256)) | (1L << (BOOLEAN - 256)) | (1L << (CHAR - 256)) | (1L << (CHARACTER - 256)) | (1L << (COALESCE - 256)) | (1L << (DEC - 256)) | (1L << (DECIMAL - 256)) | (1L << (EXISTS - 256)) | (1L << (EXTRACT - 256)) | (1L << (FLOAT - 256)) | (1L << (GREATEST - 256)) | (1L << (GROUPING - 256)) | (1L << (INOUT - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERVAL - 256)) | (1L << (LEAST - 256)) | (1L << (NATIONAL - 256)) | (1L << (NCHAR - 256)) | (1L << (NONE - 256)) | (1L << (NULLIF - 256)) | (1L << (NUMERIC - 256)) | (1L << (OUT - 256)) | (1L << (OVERLAY - 256)) | (1L << (POSITION - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRECISION - 320)) | (1L << (REAL - 320)) | (1L << (ROW - 320)) | (1L << (SETOF - 320)) | (1L << (SMALLINT - 320)) | (1L << (SUBSTRING - 320)) | (1L << (TIME - 320)) | (1L << (TIMESTAMP - 320)) | (1L << (TREAT - 320)) | (1L << (TRIM - 320)) | (1L << (VALUES - 320)) | (1L << (VARCHAR - 320)) | (1L << (XMLATTRIBUTES - 320)) | (1L << (XMLCONCAT - 320)) | (1L << (XMLELEMENT - 320)) | (1L << (XMLEXISTS - 320)) | (1L << (XMLFOREST - 320)) | (1L << (XMLNAMESPACES - 320)) | (1L << (XMLPARSE - 320)) | (1L << (XMLPI - 320)) | (1L << (XMLROOT - 320)) | (1L << (XMLSERIALIZE - 320)) | (1L << (XMLTABLE - 320)))) != 0) || ((((_la - 443)) & ~0x3f) == 0 && ((1L << (_la - 443)) & ((1L << (ALIGNMENT - 443)) | (1L << (BASETYPE - 443)) | (1L << (BUFFERS - 443)) | (1L << (BYPASSRLS - 443)) | (1L << (CANONICAL - 443)) | (1L << (CATEGORY - 443)) | (1L << (COLLATABLE - 443)) | (1L << (COMBINEFUNC - 443)) | (1L << (COMMUTATOR - 443)) | (1L << (CONNECT - 443)) | (1L << (COSTS - 443)) | (1L << (CREATEDB - 443)) | (1L << (CREATEROLE - 443)) | (1L << (DESERIALFUNC - 443)) | (1L << (DETERMINISTIC - 443)) | (1L << (DISABLE_PAGE_SKIPPING - 443)) | (1L << (ELEMENT - 443)) | (1L << (EXTENDED - 443)) | (1L << (FINALFUNC - 443)) | (1L << (FINALFUNC_EXTRA - 443)) | (1L << (FINALFUNC_MODIFY - 443)) | (1L << (FORCE_NOT_NULL - 443)) | (1L << (FORCE_NULL - 443)) | (1L << (FORCE_QUOTE - 443)) | (1L << (FORMAT - 443)) | (1L << (GETTOKEN - 443)) | (1L << (HASH - 443)) | (1L << (HASHES - 443)) | (1L << (HEADLINE - 443)) | (1L << (HYPOTHETICAL - 443)) | (1L << (INDEX_CLEANUP - 443)) | (1L << (INIT - 443)) | (1L << (INITCOND - 443)) | (1L << (INTERNALLENGTH - 443)) | (1L << (JSON - 443)) | (1L << (LC_COLLATE - 443)) | (1L << (LC_CTYPE - 443)) | (1L << (LEFTARG - 443)) | (1L << (LEXIZE - 443)) | (1L << (LEXTYPES - 443)) | (1L << (LIST - 443)) | (1L << (LOCALE - 443)) | (1L << (LOGIN - 443)) | (1L << (MAIN - 443)) | (1L << (MERGES - 443)) | (1L << (MFINALFUNC - 443)) | (1L << (MFINALFUNC_EXTRA - 443)) | (1L << (MFINALFUNC_MODIFY - 443)) | (1L << (MINITCOND - 443)) | (1L << (MINVFUNC - 443)) | (1L << (MODULUS - 443)) | (1L << (MSFUNC - 443)) | (1L << (MSSPACE - 443)) | (1L << (MSTYPE - 443)) | (1L << (NEGATOR - 443)) | (1L << (NOBYPASSRLS - 443)) | (1L << (NOCREATEDB - 443)) | (1L << (NOCREATEROLE - 443)) | (1L << (NOINHERIT - 443)) | (1L << (NOLOGIN - 443)) | (1L << (NOREPLICATION - 443)) | (1L << (NOSUPERUSER - 443)) | (1L << (OUTPUT - 443)) | (1L << (PASSEDBYVALUE - 443)))) != 0) || ((((_la - 507)) & ~0x3f) == 0 && ((1L << (_la - 507)) & ((1L << (PATH - 507)) | (1L << (PERMISSIVE - 507)) | (1L << (PLAIN - 507)) | (1L << (PREFERRED - 507)) | (1L << (PROVIDER - 507)) | (1L << (READ_ONLY - 507)) | (1L << (READ_WRITE - 507)) | (1L << (RECEIVE - 507)) | (1L << (REMAINDER - 507)) | (1L << (REPLICATION - 507)) | (1L << (RESTRICTED - 507)) | (1L << (RESTRICTIVE - 507)) | (1L << (RIGHTARG - 507)) | (1L << (SAFE - 507)) | (1L << (SEND - 507)) | (1L << (SERIALFUNC - 507)) | (1L << (SETTINGS - 507)) | (1L << (SFUNC - 507)) | (1L << (SHAREABLE - 507)) | (1L << (SKIP_LOCKED - 507)) | (1L << (SORTOP - 507)) | (1L << (SSPACE - 507)) | (1L << (STYPE - 507)) | (1L << (SUBTYPE_DIFF - 507)) | (1L << (SUBTYPE_OPCLASS - 507)) | (1L << (SUBTYPE - 507)) | (1L << (SUMMARY - 507)) | (1L << (SUPERUSER - 507)) | (1L << (TIMING - 507)) | (1L << (TYPMOD_IN - 507)) | (1L << (TYPMOD_OUT - 507)) | (1L << (UNSAFE - 507)) | (1L << (USAGE - 507)) | (1L << (VARIABLE - 507)) | (1L << (YAML - 507)) | (1L << (ALIAS - 507)) | (1L << (ASSERT - 507)) | (1L << (CONSTANT - 507)) | (1L << (DATATYPE - 507)) | (1L << (DEBUG - 507)) | (1L << (DETAIL - 507)) | (1L << (DIAGNOSTICS - 507)) | (1L << (ELSEIF - 507)) | (1L << (ELSIF - 507)) | (1L << (ERRCODE - 507)) | (1L << (EXIT - 507)) | (1L << (EXCEPTION - 507)) | (1L << (FOREACH - 507)) | (1L << (GET - 507)) | (1L << (HINT - 507)) | (1L << (INFO - 507)) | (1L << (LOG - 507)) | (1L << (LOOP - 507)) | (1L << (MESSAGE - 507)) | (1L << (NOTICE - 507)) | (1L << (OPEN - 507)) | (1L << (PERFORM - 507)) | (1L << (QUERY - 507)) | (1L << (RAISE - 507)) | (1L << (RECORD - 507)) | (1L << (RETURN - 507)) | (1L << (REVERSE - 507)) | (1L << (ROWTYPE - 507)) | (1L << (SLICE - 507)))) != 0) || ((((_la - 571)) & ~0x3f) == 0 && ((1L << (_la - 571)) & ((1L << (SQLSTATE - 571)) | (1L << (STACKED - 571)) | (1L << (WARNING - 571)) | (1L << (WHILE - 571)) | (1L << (Identifier - 571)) | (1L << (QuotedIdentifier - 571)))) != 0)) {
				{
				setState(4865);
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Define_serverContext extends ParserRuleContext {
		public TerminalNode SERVER() { return getToken(PLpgSQLParser.SERVER, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Define_foreign_optionsContext define_foreign_options() {
			return getRuleContext(Define_foreign_optionsContext.class,0);
		}
		public Define_serverContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_define_server; }
	}

	public final Define_serverContext define_server() throws RecognitionException {
		Define_serverContext _localctx = new Define_serverContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_define_server);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4868);
			match(SERVER);
			setState(4869);
			identifier();
			setState(4871);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTIONS) {
				{
				setState(4870);
				define_foreign_options();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Define_foreign_optionsContext extends ParserRuleContext {
		public TerminalNode OPTIONS() { return getToken(PLpgSQLParser.OPTIONS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public List<Foreign_optionContext> foreign_option() {
			return getRuleContexts(Foreign_optionContext.class);
		}
		public Foreign_optionContext foreign_option(int i) {
			return getRuleContext(Foreign_optionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Define_foreign_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_define_foreign_options; }
	}

	public final Define_foreign_optionsContext define_foreign_options() throws RecognitionException {
		Define_foreign_optionsContext _localctx = new Define_foreign_optionsContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_define_foreign_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4873);
			match(OPTIONS);
			setState(4874);
			match(LEFT_PAREN);
			{
			setState(4875);
			foreign_option();
			setState(4880);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4876);
				match(COMMA);
				setState(4877);
				foreign_option();
				}
				}
				setState(4882);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
			setState(4883);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Foreign_optionContext extends ParserRuleContext {
		public Foreign_option_nameContext foreign_option_name() {
			return getRuleContext(Foreign_option_nameContext.class,0);
		}
		public Character_stringContext character_string() {
			return getRuleContext(Character_stringContext.class,0);
		}
		public TerminalNode ADD() { return getToken(PLpgSQLParser.ADD, 0); }
		public TerminalNode SET() { return getToken(PLpgSQLParser.SET, 0); }
		public TerminalNode DROP() { return getToken(PLpgSQLParser.DROP, 0); }
		public Foreign_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreign_option; }
	}

	public final Foreign_optionContext foreign_option() throws RecognitionException {
		Foreign_optionContext _localctx = new Foreign_optionContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_foreign_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4886);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,591,_ctx) ) {
			case 1:
				{
				setState(4885);
				_la = _input.LA(1);
				if ( !(_la==ADD || _la==DROP || _la==SET) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(4888);
			foreign_option_name();
			setState(4890);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==Character_String_Literal || _la==BeginDollarStringConstant) {
				{
				setState(4889);
				character_string();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Foreign_option_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode USER() { return getToken(PLpgSQLParser.USER, 0); }
		public Foreign_option_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreign_option_name; }
	}

	public final Foreign_option_nameContext foreign_option_name() throws RecognitionException {
		Foreign_option_nameContext _localctx = new Foreign_option_nameContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_foreign_option_name);
		try {
			setState(4894);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BY:
			case CACHE:
			case CALL:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COLUMNS:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONFLICT:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CUBE:
			case CURRENT:
			case CURSOR:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DEPENDS:
			case DETACH:
			case DICTIONARY:
			case DISABLE:
			case DISCARD:
			case DOCUMENT:
			case DOMAIN:
			case DOUBLE:
			case DROP:
			case EACH:
			case ENABLE:
			case ENCODING:
			case ENCRYPTED:
			case ENUM:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GENERATED:
			case GLOBAL:
			case GRANTED:
			case GROUPS:
			case HANDLER:
			case HEADER:
			case HOLD:
			case HOUR:
			case IDENTITY:
			case IF:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT:
			case IMPORT:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCKED:
			case LOGGED:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case METHOD:
			case MINUTE:
			case MINVALUE:
			case MODE:
			case MONTH:
			case MOVE:
			case NAME:
			case NAMES:
			case NEW:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS:
			case OBJECT:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OVER:
			case OVERRIDING:
			case OWNED:
			case OWNER:
			case PARALLEL:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POLICY:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROCEDURES:
			case PROGRAM:
			case PUBLICATION:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINES:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMAS:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SKIP_:
			case SNAPSHOT:
			case SQL:
			case STABLE:
			case STANDALONE:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STORED:
			case STRICT:
			case STRIP:
			case SUBSCRIPTION:
			case SUPPORT:
			case SYSID:
			case SYSTEM:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT:
			case TIES:
			case TRANSACTION:
			case TRANSFORM:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE:
			case VARYING:
			case VERSION:
			case VIEW:
			case VIEWS:
			case VOLATILE:
			case WHITESPACE:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML:
			case YEAR:
			case YES:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL:
			case EXISTS:
			case EXTRACT:
			case FLOAT:
			case GREATEST:
			case GROUPING:
			case INOUT:
			case INT:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case ALIGNMENT:
			case BASETYPE:
			case BUFFERS:
			case BYPASSRLS:
			case CANONICAL:
			case CATEGORY:
			case COLLATABLE:
			case COMBINEFUNC:
			case COMMUTATOR:
			case CONNECT:
			case COSTS:
			case CREATEDB:
			case CREATEROLE:
			case DESERIALFUNC:
			case DETERMINISTIC:
			case DISABLE_PAGE_SKIPPING:
			case ELEMENT:
			case EXTENDED:
			case FINALFUNC:
			case FINALFUNC_EXTRA:
			case FINALFUNC_MODIFY:
			case FORCE_NOT_NULL:
			case FORCE_NULL:
			case FORCE_QUOTE:
			case FORMAT:
			case GETTOKEN:
			case HASH:
			case HASHES:
			case HEADLINE:
			case HYPOTHETICAL:
			case INDEX_CLEANUP:
			case INIT:
			case INITCOND:
			case INTERNALLENGTH:
			case JSON:
			case LC_COLLATE:
			case LC_CTYPE:
			case LEFTARG:
			case LEXIZE:
			case LEXTYPES:
			case LIST:
			case LOCALE:
			case LOGIN:
			case MAIN:
			case MERGES:
			case MFINALFUNC:
			case MFINALFUNC_EXTRA:
			case MFINALFUNC_MODIFY:
			case MINITCOND:
			case MINVFUNC:
			case MODULUS:
			case MSFUNC:
			case MSSPACE:
			case MSTYPE:
			case NEGATOR:
			case NOBYPASSRLS:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOREPLICATION:
			case NOSUPERUSER:
			case OUTPUT:
			case PASSEDBYVALUE:
			case PATH:
			case PERMISSIVE:
			case PLAIN:
			case PREFERRED:
			case PROVIDER:
			case READ_ONLY:
			case READ_WRITE:
			case RECEIVE:
			case REMAINDER:
			case REPLICATION:
			case RESTRICTED:
			case RESTRICTIVE:
			case RIGHTARG:
			case SAFE:
			case SEND:
			case SERIALFUNC:
			case SETTINGS:
			case SFUNC:
			case SHAREABLE:
			case SKIP_LOCKED:
			case SORTOP:
			case SSPACE:
			case STYPE:
			case SUBTYPE_DIFF:
			case SUBTYPE_OPCLASS:
			case SUBTYPE:
			case SUMMARY:
			case SUPERUSER:
			case TIMING:
			case TYPMOD_IN:
			case TYPMOD_OUT:
			case UNSAFE:
			case USAGE:
			case VARIABLE:
			case YAML:
			case ALIAS:
			case ASSERT:
			case CONSTANT:
			case DATATYPE:
			case DEBUG:
			case DETAIL:
			case DIAGNOSTICS:
			case ELSEIF:
			case ELSIF:
			case ERRCODE:
			case EXIT:
			case EXCEPTION:
			case FOREACH:
			case GET:
			case HINT:
			case INFO:
			case LOG:
			case LOOP:
			case MESSAGE:
			case NOTICE:
			case OPEN:
			case PERFORM:
			case QUERY:
			case RAISE:
			case RECORD:
			case RETURN:
			case REVERSE:
			case ROWTYPE:
			case SLICE:
			case SQLSTATE:
			case STACKED:
			case WARNING:
			case WHILE:
			case Identifier:
			case QuotedIdentifier:
				enterOuterAlt(_localctx, 1);
				{
				setState(4892);
				identifier();
				}
				break;
			case USER:
				enterOuterAlt(_localctx, 2);
				{
				setState(4893);
				match(USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class List_of_type_column_defContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public List<Table_of_type_column_defContext> table_of_type_column_def() {
			return getRuleContexts(Table_of_type_column_defContext.class);
		}
		public Table_of_type_column_defContext table_of_type_column_def(int i) {
			return getRuleContext(Table_of_type_column_defContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public List_of_type_column_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_list_of_type_column_def; }
	}

	public final List_of_type_column_defContext list_of_type_column_def() throws RecognitionException {
		List_of_type_column_defContext _localctx = new List_of_type_column_defContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_list_of_type_column_def);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4896);
			match(LEFT_PAREN);
			{
			setState(4897);
			table_of_type_column_def();
			setState(4902);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4898);
				match(COMMA);
				setState(4899);
				table_of_type_column_def();
				}
				}
				setState(4904);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
			setState(4905);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_column_defContext extends ParserRuleContext {
		public Constraint_commonContext tabl_constraint;
		public Table_column_definitionContext table_column_definition() {
			return getRuleContext(Table_column_definitionContext.class,0);
		}
		public Constraint_commonContext constraint_common() {
			return getRuleContext(Constraint_commonContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(PLpgSQLParser.LIKE, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public List<Like_optionContext> like_option() {
			return getRuleContexts(Like_optionContext.class);
		}
		public Like_optionContext like_option(int i) {
			return getRuleContext(Like_optionContext.class,i);
		}
		public Table_column_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_column_def; }
	}

	public final Table_column_defContext table_column_def() throws RecognitionException {
		Table_column_defContext _localctx = new Table_column_defContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_table_column_def);
		int _la;
		try {
			setState(4917);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,596,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4907);
				table_column_definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4908);
				((Table_column_defContext)_localctx).tabl_constraint = constraint_common();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4909);
				match(LIKE);
				setState(4910);
				schema_qualified_name();
				setState(4914);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==EXCLUDING || _la==INCLUDING) {
					{
					{
					setState(4911);
					like_option();
					}
					}
					setState(4916);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_of_type_column_defContext extends ParserRuleContext {
		public Constraint_commonContext tabl_constraint;
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PLpgSQLParser.WITH, 0); }
		public TerminalNode OPTIONS() { return getToken(PLpgSQLParser.OPTIONS, 0); }
		public List<Constraint_commonContext> constraint_common() {
			return getRuleContexts(Constraint_commonContext.class);
		}
		public Constraint_commonContext constraint_common(int i) {
			return getRuleContext(Constraint_commonContext.class,i);
		}
		public Table_of_type_column_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_of_type_column_def; }
	}

	public final Table_of_type_column_defContext table_of_type_column_def() throws RecognitionException {
		Table_of_type_column_defContext _localctx = new Table_of_type_column_defContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_table_of_type_column_def);
		int _la;
		try {
			setState(4931);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,599,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4919);
				identifier();
				setState(4922);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4920);
					match(WITH);
					setState(4921);
					match(OPTIONS);
					}
				}

				setState(4927);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==EXCLUDE || _la==GENERATED || ((((_la - 378)) & ~0x3f) == 0 && ((1L << (_la - 378)) & ((1L << (CHECK - 378)) | (1L << (CONSTRAINT - 378)) | (1L << (DEFAULT - 378)) | (1L << (FOREIGN - 378)) | (1L << (NOT - 378)) | (1L << (NULL - 378)) | (1L << (PRIMARY - 378)) | (1L << (REFERENCES - 378)) | (1L << (UNIQUE - 378)))) != 0)) {
					{
					{
					setState(4924);
					constraint_common();
					}
					}
					setState(4929);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4930);
				((Table_of_type_column_defContext)_localctx).tabl_constraint = constraint_common();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_column_definitionContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public Define_foreign_optionsContext define_foreign_options() {
			return getRuleContext(Define_foreign_optionsContext.class,0);
		}
		public Collate_identifierContext collate_identifier() {
			return getRuleContext(Collate_identifierContext.class,0);
		}
		public List<Constraint_commonContext> constraint_common() {
			return getRuleContexts(Constraint_commonContext.class);
		}
		public Constraint_commonContext constraint_common(int i) {
			return getRuleContext(Constraint_commonContext.class,i);
		}
		public Table_column_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_column_definition; }
	}

	public final Table_column_definitionContext table_column_definition() throws RecognitionException {
		Table_column_definitionContext _localctx = new Table_column_definitionContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_table_column_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4933);
			identifier();
			setState(4934);
			data_type();
			setState(4936);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTIONS) {
				{
				setState(4935);
				define_foreign_options();
				}
			}

			setState(4939);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLLATE) {
				{
				setState(4938);
				collate_identifier();
				}
			}

			setState(4944);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==EXCLUDE || _la==GENERATED || ((((_la - 378)) & ~0x3f) == 0 && ((1L << (_la - 378)) & ((1L << (CHECK - 378)) | (1L << (CONSTRAINT - 378)) | (1L << (DEFAULT - 378)) | (1L << (FOREIGN - 378)) | (1L << (NOT - 378)) | (1L << (NULL - 378)) | (1L << (PRIMARY - 378)) | (1L << (REFERENCES - 378)) | (1L << (UNIQUE - 378)))) != 0)) {
				{
				{
				setState(4941);
				constraint_common();
				}
				}
				setState(4946);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Like_optionContext extends ParserRuleContext {
		public TerminalNode INCLUDING() { return getToken(PLpgSQLParser.INCLUDING, 0); }
		public TerminalNode EXCLUDING() { return getToken(PLpgSQLParser.EXCLUDING, 0); }
		public TerminalNode COMMENTS() { return getToken(PLpgSQLParser.COMMENTS, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PLpgSQLParser.CONSTRAINTS, 0); }
		public TerminalNode DEFAULTS() { return getToken(PLpgSQLParser.DEFAULTS, 0); }
		public TerminalNode GENERATED() { return getToken(PLpgSQLParser.GENERATED, 0); }
		public TerminalNode IDENTITY() { return getToken(PLpgSQLParser.IDENTITY, 0); }
		public TerminalNode INDEXES() { return getToken(PLpgSQLParser.INDEXES, 0); }
		public TerminalNode STORAGE() { return getToken(PLpgSQLParser.STORAGE, 0); }
		public TerminalNode ALL() { return getToken(PLpgSQLParser.ALL, 0); }
		public Like_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_like_option; }
	}

	public final Like_optionContext like_option() throws RecognitionException {
		Like_optionContext _localctx = new Like_optionContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_like_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4947);
			_la = _input.LA(1);
			if ( !(_la==EXCLUDING || _la==INCLUDING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4948);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COMMENTS) | (1L << CONSTRAINTS) | (1L << DEFAULTS))) != 0) || ((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & ((1L << (GENERATED - 94)) | (1L << (IDENTITY - 94)) | (1L << (INDEXES - 94)))) != 0) || _la==STORAGE || _la==ALL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraint_commonContext extends ParserRuleContext {
		public Constr_bodyContext constr_body() {
			return getRuleContext(Constr_bodyContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(PLpgSQLParser.CONSTRAINT, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Table_deferrableContext table_deferrable() {
			return getRuleContext(Table_deferrableContext.class,0);
		}
		public Table_initialy_immedContext table_initialy_immed() {
			return getRuleContext(Table_initialy_immedContext.class,0);
		}
		public Constraint_commonContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint_common; }
	}

	public final Constraint_commonContext constraint_common() throws RecognitionException {
		Constraint_commonContext _localctx = new Constraint_commonContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_constraint_common);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4952);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(4950);
				match(CONSTRAINT);
				setState(4951);
				identifier();
				}
			}

			setState(4954);
			constr_body();
			setState(4956);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,604,_ctx) ) {
			case 1:
				{
				setState(4955);
				table_deferrable();
				}
				break;
			}
			setState(4959);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIALLY) {
				{
				setState(4958);
				table_initialy_immed();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constr_bodyContext extends ParserRuleContext {
		public IdentifierContext index_method;
		public Token where;
		public VexContext exp;
		public Names_in_parensContext ref;
		public VexContext expression;
		public Names_in_parensContext col;
		public VexContext default_expr;
		public TerminalNode EXCLUDE() { return getToken(PLpgSQLParser.EXCLUDE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public List<Sort_specifierContext> sort_specifier() {
			return getRuleContexts(Sort_specifierContext.class);
		}
		public Sort_specifierContext sort_specifier(int i) {
			return getRuleContext(Sort_specifierContext.class,i);
		}
		public List<TerminalNode> WITH() { return getTokens(PLpgSQLParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(PLpgSQLParser.WITH, i);
		}
		public List<All_opContext> all_op() {
			return getRuleContexts(All_opContext.class);
		}
		public All_opContext all_op(int i) {
			return getRuleContext(All_opContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public Index_parametersContext index_parameters() {
			return getRuleContext(Index_parametersContext.class,0);
		}
		public TerminalNode USING() { return getToken(PLpgSQLParser.USING, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(PLpgSQLParser.WHERE, 0); }
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public TerminalNode REFERENCES() { return getToken(PLpgSQLParser.REFERENCES, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public TerminalNode FOREIGN() { return getToken(PLpgSQLParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(PLpgSQLParser.KEY, 0); }
		public List<Names_in_parensContext> names_in_parens() {
			return getRuleContexts(Names_in_parensContext.class);
		}
		public Names_in_parensContext names_in_parens(int i) {
			return getRuleContext(Names_in_parensContext.class,i);
		}
		public List<TerminalNode> MATCH() { return getTokens(PLpgSQLParser.MATCH); }
		public TerminalNode MATCH(int i) {
			return getToken(PLpgSQLParser.MATCH, i);
		}
		public List<TerminalNode> ON() { return getTokens(PLpgSQLParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(PLpgSQLParser.ON, i);
		}
		public List<ActionContext> action() {
			return getRuleContexts(ActionContext.class);
		}
		public ActionContext action(int i) {
			return getRuleContext(ActionContext.class,i);
		}
		public List<TerminalNode> FULL() { return getTokens(PLpgSQLParser.FULL); }
		public TerminalNode FULL(int i) {
			return getToken(PLpgSQLParser.FULL, i);
		}
		public List<TerminalNode> PARTIAL() { return getTokens(PLpgSQLParser.PARTIAL); }
		public TerminalNode PARTIAL(int i) {
			return getToken(PLpgSQLParser.PARTIAL, i);
		}
		public List<TerminalNode> SIMPLE() { return getTokens(PLpgSQLParser.SIMPLE); }
		public TerminalNode SIMPLE(int i) {
			return getToken(PLpgSQLParser.SIMPLE, i);
		}
		public List<TerminalNode> DELETE() { return getTokens(PLpgSQLParser.DELETE); }
		public TerminalNode DELETE(int i) {
			return getToken(PLpgSQLParser.DELETE, i);
		}
		public List<TerminalNode> UPDATE() { return getTokens(PLpgSQLParser.UPDATE); }
		public TerminalNode UPDATE(int i) {
			return getToken(PLpgSQLParser.UPDATE, i);
		}
		public TerminalNode CHECK() { return getToken(PLpgSQLParser.CHECK, 0); }
		public TerminalNode NO() { return getToken(PLpgSQLParser.NO, 0); }
		public TerminalNode INHERIT() { return getToken(PLpgSQLParser.INHERIT, 0); }
		public TerminalNode NULL() { return getToken(PLpgSQLParser.NULL, 0); }
		public TerminalNode NOT() { return getToken(PLpgSQLParser.NOT, 0); }
		public TerminalNode UNIQUE() { return getToken(PLpgSQLParser.UNIQUE, 0); }
		public TerminalNode PRIMARY() { return getToken(PLpgSQLParser.PRIMARY, 0); }
		public TerminalNode DEFAULT() { return getToken(PLpgSQLParser.DEFAULT, 0); }
		public Identity_bodyContext identity_body() {
			return getRuleContext(Identity_bodyContext.class,0);
		}
		public TerminalNode GENERATED() { return getToken(PLpgSQLParser.GENERATED, 0); }
		public TerminalNode ALWAYS() { return getToken(PLpgSQLParser.ALWAYS, 0); }
		public TerminalNode AS() { return getToken(PLpgSQLParser.AS, 0); }
		public TerminalNode STORED() { return getToken(PLpgSQLParser.STORED, 0); }
		public Constr_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constr_body; }
	}

	public final Constr_bodyContext constr_body() throws RecognitionException {
		Constr_bodyContext _localctx = new Constr_bodyContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_constr_body);
		int _la;
		try {
			setState(5038);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,617,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4961);
				match(EXCLUDE);
				setState(4964);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(4962);
					match(USING);
					setState(4963);
					((Constr_bodyContext)_localctx).index_method = identifier();
					}
				}

				setState(4966);
				match(LEFT_PAREN);
				setState(4967);
				sort_specifier();
				setState(4968);
				match(WITH);
				setState(4969);
				all_op();
				setState(4977);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4970);
					match(COMMA);
					setState(4971);
					sort_specifier();
					setState(4972);
					match(WITH);
					setState(4973);
					all_op();
					}
					}
					setState(4979);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4980);
				match(RIGHT_PAREN);
				setState(4981);
				index_parameters();
				setState(4984);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(4982);
					((Constr_bodyContext)_localctx).where = match(WHERE);
					setState(4983);
					((Constr_bodyContext)_localctx).exp = vex(0);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4989);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOREIGN) {
					{
					setState(4986);
					match(FOREIGN);
					setState(4987);
					match(KEY);
					setState(4988);
					names_in_parens();
					}
				}

				setState(4991);
				match(REFERENCES);
				setState(4992);
				schema_qualified_name();
				setState(4994);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(4993);
					((Constr_bodyContext)_localctx).ref = names_in_parens();
					}
				}

				setState(5003);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==MATCH || _la==ON) {
					{
					setState(5001);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case MATCH:
						{
						setState(4996);
						match(MATCH);
						setState(4997);
						_la = _input.LA(1);
						if ( !(_la==PARTIAL || _la==SIMPLE || _la==FULL) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case ON:
						{
						setState(4998);
						match(ON);
						setState(4999);
						_la = _input.LA(1);
						if ( !(_la==DELETE || _la==UPDATE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5000);
						action();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(5005);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5006);
				match(CHECK);
				setState(5007);
				match(LEFT_PAREN);
				setState(5008);
				((Constr_bodyContext)_localctx).expression = vex(0);
				setState(5009);
				match(RIGHT_PAREN);
				setState(5012);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(5010);
					match(NO);
					setState(5011);
					match(INHERIT);
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5015);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(5014);
					match(NOT);
					}
				}

				setState(5017);
				match(NULL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5021);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case UNIQUE:
					{
					setState(5018);
					match(UNIQUE);
					}
					break;
				case PRIMARY:
					{
					setState(5019);
					match(PRIMARY);
					setState(5020);
					match(KEY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5024);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(5023);
					((Constr_bodyContext)_localctx).col = names_in_parens();
					}
				}

				setState(5026);
				index_parameters();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5027);
				match(DEFAULT);
				setState(5028);
				((Constr_bodyContext)_localctx).default_expr = vex(0);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5029);
				identity_body();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5030);
				match(GENERATED);
				setState(5031);
				match(ALWAYS);
				setState(5032);
				match(AS);
				setState(5033);
				match(LEFT_PAREN);
				setState(5034);
				vex(0);
				setState(5035);
				match(RIGHT_PAREN);
				setState(5036);
				match(STORED);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class All_opContext extends ParserRuleContext {
		public OpContext op() {
			return getRuleContext(OpContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(PLpgSQLParser.EQUAL, 0); }
		public TerminalNode NOT_EQUAL() { return getToken(PLpgSQLParser.NOT_EQUAL, 0); }
		public TerminalNode LTH() { return getToken(PLpgSQLParser.LTH, 0); }
		public TerminalNode LEQ() { return getToken(PLpgSQLParser.LEQ, 0); }
		public TerminalNode GTH() { return getToken(PLpgSQLParser.GTH, 0); }
		public TerminalNode GEQ() { return getToken(PLpgSQLParser.GEQ, 0); }
		public TerminalNode PLUS() { return getToken(PLpgSQLParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(PLpgSQLParser.MINUS, 0); }
		public TerminalNode MULTIPLY() { return getToken(PLpgSQLParser.MULTIPLY, 0); }
		public TerminalNode DIVIDE() { return getToken(PLpgSQLParser.DIVIDE, 0); }
		public TerminalNode MODULAR() { return getToken(PLpgSQLParser.MODULAR, 0); }
		public TerminalNode EXP() { return getToken(PLpgSQLParser.EXP, 0); }
		public All_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_all_op; }
	}

	public final All_opContext all_op() throws RecognitionException {
		All_opContext _localctx = new All_opContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_all_op);
		try {
			setState(5053);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPERATOR:
			case LESS_LESS:
			case GREATER_GREATER:
			case HASH_SIGN:
			case OP_CHARS:
				enterOuterAlt(_localctx, 1);
				{
				setState(5040);
				op();
				}
				break;
			case EQUAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5041);
				match(EQUAL);
				}
				break;
			case NOT_EQUAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5042);
				match(NOT_EQUAL);
				}
				break;
			case LTH:
				enterOuterAlt(_localctx, 4);
				{
				setState(5043);
				match(LTH);
				}
				break;
			case LEQ:
				enterOuterAlt(_localctx, 5);
				{
				setState(5044);
				match(LEQ);
				}
				break;
			case GTH:
				enterOuterAlt(_localctx, 6);
				{
				setState(5045);
				match(GTH);
				}
				break;
			case GEQ:
				enterOuterAlt(_localctx, 7);
				{
				setState(5046);
				match(GEQ);
				}
				break;
			case PLUS:
				enterOuterAlt(_localctx, 8);
				{
				setState(5047);
				match(PLUS);
				}
				break;
			case MINUS:
				enterOuterAlt(_localctx, 9);
				{
				setState(5048);
				match(MINUS);
				}
				break;
			case MULTIPLY:
				enterOuterAlt(_localctx, 10);
				{
				setState(5049);
				match(MULTIPLY);
				}
				break;
			case DIVIDE:
				enterOuterAlt(_localctx, 11);
				{
				setState(5050);
				match(DIVIDE);
				}
				break;
			case MODULAR:
				enterOuterAlt(_localctx, 12);
				{
				setState(5051);
				match(MODULAR);
				}
				break;
			case EXP:
				enterOuterAlt(_localctx, 13);
				{
				setState(5052);
				match(EXP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class All_simple_opContext extends ParserRuleContext {
		public Op_charsContext op_chars() {
			return getRuleContext(Op_charsContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(PLpgSQLParser.EQUAL, 0); }
		public TerminalNode NOT_EQUAL() { return getToken(PLpgSQLParser.NOT_EQUAL, 0); }
		public TerminalNode LTH() { return getToken(PLpgSQLParser.LTH, 0); }
		public TerminalNode LEQ() { return getToken(PLpgSQLParser.LEQ, 0); }
		public TerminalNode GTH() { return getToken(PLpgSQLParser.GTH, 0); }
		public TerminalNode GEQ() { return getToken(PLpgSQLParser.GEQ, 0); }
		public TerminalNode PLUS() { return getToken(PLpgSQLParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(PLpgSQLParser.MINUS, 0); }
		public TerminalNode MULTIPLY() { return getToken(PLpgSQLParser.MULTIPLY, 0); }
		public TerminalNode DIVIDE() { return getToken(PLpgSQLParser.DIVIDE, 0); }
		public TerminalNode MODULAR() { return getToken(PLpgSQLParser.MODULAR, 0); }
		public TerminalNode EXP() { return getToken(PLpgSQLParser.EXP, 0); }
		public All_simple_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_all_simple_op; }
	}

	public final All_simple_opContext all_simple_op() throws RecognitionException {
		All_simple_opContext _localctx = new All_simple_opContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_all_simple_op);
		try {
			setState(5068);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LESS_LESS:
			case GREATER_GREATER:
			case HASH_SIGN:
			case OP_CHARS:
				enterOuterAlt(_localctx, 1);
				{
				setState(5055);
				op_chars();
				}
				break;
			case EQUAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5056);
				match(EQUAL);
				}
				break;
			case NOT_EQUAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5057);
				match(NOT_EQUAL);
				}
				break;
			case LTH:
				enterOuterAlt(_localctx, 4);
				{
				setState(5058);
				match(LTH);
				}
				break;
			case LEQ:
				enterOuterAlt(_localctx, 5);
				{
				setState(5059);
				match(LEQ);
				}
				break;
			case GTH:
				enterOuterAlt(_localctx, 6);
				{
				setState(5060);
				match(GTH);
				}
				break;
			case GEQ:
				enterOuterAlt(_localctx, 7);
				{
				setState(5061);
				match(GEQ);
				}
				break;
			case PLUS:
				enterOuterAlt(_localctx, 8);
				{
				setState(5062);
				match(PLUS);
				}
				break;
			case MINUS:
				enterOuterAlt(_localctx, 9);
				{
				setState(5063);
				match(MINUS);
				}
				break;
			case MULTIPLY:
				enterOuterAlt(_localctx, 10);
				{
				setState(5064);
				match(MULTIPLY);
				}
				break;
			case DIVIDE:
				enterOuterAlt(_localctx, 11);
				{
				setState(5065);
				match(DIVIDE);
				}
				break;
			case MODULAR:
				enterOuterAlt(_localctx, 12);
				{
				setState(5066);
				match(MODULAR);
				}
				break;
			case EXP:
				enterOuterAlt(_localctx, 13);
				{
				setState(5067);
				match(EXP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Op_charsContext extends ParserRuleContext {
		public TerminalNode OP_CHARS() { return getToken(PLpgSQLParser.OP_CHARS, 0); }
		public TerminalNode LESS_LESS() { return getToken(PLpgSQLParser.LESS_LESS, 0); }
		public TerminalNode GREATER_GREATER() { return getToken(PLpgSQLParser.GREATER_GREATER, 0); }
		public TerminalNode HASH_SIGN() { return getToken(PLpgSQLParser.HASH_SIGN, 0); }
		public Op_charsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_op_chars; }
	}

	public final Op_charsContext op_chars() throws RecognitionException {
		Op_charsContext _localctx = new Op_charsContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_op_chars);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5070);
			_la = _input.LA(1);
			if ( !(((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (LESS_LESS - 601)) | (1L << (GREATER_GREATER - 601)) | (1L << (HASH_SIGN - 601)) | (1L << (OP_CHARS - 601)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_parametersContext extends ParserRuleContext {
		public Including_indexContext including_index() {
			return getRuleContext(Including_indexContext.class,0);
		}
		public With_storage_parameterContext with_storage_parameter() {
			return getRuleContext(With_storage_parameterContext.class,0);
		}
		public TerminalNode USING() { return getToken(PLpgSQLParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(PLpgSQLParser.INDEX, 0); }
		public Table_spaceContext table_space() {
			return getRuleContext(Table_spaceContext.class,0);
		}
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Index_parametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_parameters; }
	}

	public final Index_parametersContext index_parameters() throws RecognitionException {
		Index_parametersContext _localctx = new Index_parametersContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_index_parameters);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5073);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCLUDE) {
				{
				setState(5072);
				including_index();
				}
			}

			setState(5076);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5075);
				with_storage_parameter();
				}
			}

			setState(5084);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(5078);
				match(USING);
				setState(5079);
				match(INDEX);
				setState(5082);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,622,_ctx) ) {
				case 1:
					{
					setState(5080);
					table_space();
					}
					break;
				case 2:
					{
					setState(5081);
					schema_qualified_name();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Names_in_parensContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public Names_referencesContext names_references() {
			return getRuleContext(Names_referencesContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public Names_in_parensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_names_in_parens; }
	}

	public final Names_in_parensContext names_in_parens() throws RecognitionException {
		Names_in_parensContext _localctx = new Names_in_parensContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_names_in_parens);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5086);
			match(LEFT_PAREN);
			setState(5087);
			names_references();
			setState(5088);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Names_referencesContext extends ParserRuleContext {
		public List<Schema_qualified_nameContext> schema_qualified_name() {
			return getRuleContexts(Schema_qualified_nameContext.class);
		}
		public Schema_qualified_nameContext schema_qualified_name(int i) {
			return getRuleContext(Schema_qualified_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Names_referencesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_names_references; }
	}

	public final Names_referencesContext names_references() throws RecognitionException {
		Names_referencesContext _localctx = new Names_referencesContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_names_references);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5090);
			schema_qualified_name();
			setState(5095);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5091);
				match(COMMA);
				setState(5092);
				schema_qualified_name();
				}
				}
				setState(5097);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Storage_parameterContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public List<Storage_parameter_optionContext> storage_parameter_option() {
			return getRuleContexts(Storage_parameter_optionContext.class);
		}
		public Storage_parameter_optionContext storage_parameter_option(int i) {
			return getRuleContext(Storage_parameter_optionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Storage_parameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_storage_parameter; }
	}

	public final Storage_parameterContext storage_parameter() throws RecognitionException {
		Storage_parameterContext _localctx = new Storage_parameterContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_storage_parameter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5098);
			match(LEFT_PAREN);
			setState(5099);
			storage_parameter_option();
			setState(5104);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5100);
				match(COMMA);
				setState(5101);
				storage_parameter_option();
				}
				}
				setState(5106);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5107);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Storage_parameter_optionContext extends ParserRuleContext {
		public Storage_parameter_nameContext storage_parameter_name() {
			return getRuleContext(Storage_parameter_nameContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(PLpgSQLParser.EQUAL, 0); }
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public Storage_parameter_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_storage_parameter_option; }
	}

	public final Storage_parameter_optionContext storage_parameter_option() throws RecognitionException {
		Storage_parameter_optionContext _localctx = new Storage_parameter_optionContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_storage_parameter_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5109);
			storage_parameter_name();
			setState(5112);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL) {
				{
				setState(5110);
				match(EQUAL);
				setState(5111);
				vex(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Storage_parameter_nameContext extends ParserRuleContext {
		public List<Col_labelContext> col_label() {
			return getRuleContexts(Col_labelContext.class);
		}
		public Col_labelContext col_label(int i) {
			return getRuleContext(Col_labelContext.class,i);
		}
		public TerminalNode DOT() { return getToken(PLpgSQLParser.DOT, 0); }
		public Storage_parameter_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_storage_parameter_name; }
	}

	public final Storage_parameter_nameContext storage_parameter_name() throws RecognitionException {
		Storage_parameter_nameContext _localctx = new Storage_parameter_nameContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_storage_parameter_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5114);
			col_label();
			setState(5117);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DOT) {
				{
				setState(5115);
				match(DOT);
				setState(5116);
				col_label();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_storage_parameterContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PLpgSQLParser.WITH, 0); }
		public Storage_parameterContext storage_parameter() {
			return getRuleContext(Storage_parameterContext.class,0);
		}
		public With_storage_parameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_storage_parameter; }
	}

	public final With_storage_parameterContext with_storage_parameter() throws RecognitionException {
		With_storage_parameterContext _localctx = new With_storage_parameterContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_with_storage_parameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5119);
			match(WITH);
			setState(5120);
			storage_parameter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Storage_parameter_oidContext extends ParserRuleContext {
		public With_storage_parameterContext with_storage_parameter() {
			return getRuleContext(With_storage_parameterContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PLpgSQLParser.WITH, 0); }
		public TerminalNode OIDS() { return getToken(PLpgSQLParser.OIDS, 0); }
		public TerminalNode WITHOUT() { return getToken(PLpgSQLParser.WITHOUT, 0); }
		public Storage_parameter_oidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_storage_parameter_oid; }
	}

	public final Storage_parameter_oidContext storage_parameter_oid() throws RecognitionException {
		Storage_parameter_oidContext _localctx = new Storage_parameter_oidContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_storage_parameter_oid);
		try {
			setState(5127);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,628,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5122);
				with_storage_parameter();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(5123);
				match(WITH);
				setState(5124);
				match(OIDS);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(5125);
				match(WITHOUT);
				setState(5126);
				match(OIDS);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_commitContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PLpgSQLParser.ON, 0); }
		public TerminalNode COMMIT() { return getToken(PLpgSQLParser.COMMIT, 0); }
		public TerminalNode PRESERVE() { return getToken(PLpgSQLParser.PRESERVE, 0); }
		public TerminalNode ROWS() { return getToken(PLpgSQLParser.ROWS, 0); }
		public TerminalNode DELETE() { return getToken(PLpgSQLParser.DELETE, 0); }
		public TerminalNode DROP() { return getToken(PLpgSQLParser.DROP, 0); }
		public On_commitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_commit; }
	}

	public final On_commitContext on_commit() throws RecognitionException {
		On_commitContext _localctx = new On_commitContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_on_commit);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5129);
			match(ON);
			setState(5130);
			match(COMMIT);
			setState(5136);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRESERVE:
				{
				setState(5131);
				match(PRESERVE);
				setState(5132);
				match(ROWS);
				}
				break;
			case DELETE:
				{
				setState(5133);
				match(DELETE);
				setState(5134);
				match(ROWS);
				}
				break;
			case DROP:
				{
				setState(5135);
				match(DROP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_spaceContext extends ParserRuleContext {
		public TerminalNode TABLESPACE() { return getToken(PLpgSQLParser.TABLESPACE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Table_spaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_space; }
	}

	public final Table_spaceContext table_space() throws RecognitionException {
		Table_spaceContext _localctx = new Table_spaceContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_table_space);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5138);
			match(TABLESPACE);
			setState(5139);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ActionContext extends ParserRuleContext {
		public Cascade_restrictContext cascade_restrict() {
			return getRuleContext(Cascade_restrictContext.class,0);
		}
		public TerminalNode SET() { return getToken(PLpgSQLParser.SET, 0); }
		public TerminalNode NULL() { return getToken(PLpgSQLParser.NULL, 0); }
		public TerminalNode DEFAULT() { return getToken(PLpgSQLParser.DEFAULT, 0); }
		public TerminalNode NO() { return getToken(PLpgSQLParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(PLpgSQLParser.ACTION, 0); }
		public ActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_action; }
	}

	public final ActionContext action() throws RecognitionException {
		ActionContext _localctx = new ActionContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_action);
		int _la;
		try {
			setState(5146);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CASCADE:
			case RESTRICT:
				enterOuterAlt(_localctx, 1);
				{
				setState(5141);
				cascade_restrict();
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 2);
				{
				setState(5142);
				match(SET);
				setState(5143);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==NULL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 3);
				{
				setState(5144);
				match(NO);
				setState(5145);
				match(ACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Owner_toContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode OWNER() { return getToken(PLpgSQLParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(PLpgSQLParser.TO, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PLpgSQLParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(PLpgSQLParser.SESSION_USER, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Owner_toContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_owner_to; }
	}

	public final Owner_toContext owner_to() throws RecognitionException {
		Owner_toContext _localctx = new Owner_toContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_owner_to);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5148);
			match(OWNER);
			setState(5149);
			match(TO);
			setState(5153);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BY:
			case CACHE:
			case CALL:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COLUMNS:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONFLICT:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CUBE:
			case CURRENT:
			case CURSOR:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DEPENDS:
			case DETACH:
			case DICTIONARY:
			case DISABLE:
			case DISCARD:
			case DOCUMENT:
			case DOMAIN:
			case DOUBLE:
			case DROP:
			case EACH:
			case ENABLE:
			case ENCODING:
			case ENCRYPTED:
			case ENUM:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GENERATED:
			case GLOBAL:
			case GRANTED:
			case GROUPS:
			case HANDLER:
			case HEADER:
			case HOLD:
			case HOUR:
			case IDENTITY:
			case IF:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT:
			case IMPORT:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCKED:
			case LOGGED:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case METHOD:
			case MINUTE:
			case MINVALUE:
			case MODE:
			case MONTH:
			case MOVE:
			case NAME:
			case NAMES:
			case NEW:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS:
			case OBJECT:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OVER:
			case OVERRIDING:
			case OWNED:
			case OWNER:
			case PARALLEL:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POLICY:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROCEDURES:
			case PROGRAM:
			case PUBLICATION:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINES:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMAS:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SKIP_:
			case SNAPSHOT:
			case SQL:
			case STABLE:
			case STANDALONE:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STORED:
			case STRICT:
			case STRIP:
			case SUBSCRIPTION:
			case SUPPORT:
			case SYSID:
			case SYSTEM:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT:
			case TIES:
			case TRANSACTION:
			case TRANSFORM:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE:
			case VARYING:
			case VERSION:
			case VIEW:
			case VIEWS:
			case VOLATILE:
			case WHITESPACE:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML:
			case YEAR:
			case YES:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL:
			case EXISTS:
			case EXTRACT:
			case FLOAT:
			case GREATEST:
			case GROUPING:
			case INOUT:
			case INT:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case ALIGNMENT:
			case BASETYPE:
			case BUFFERS:
			case BYPASSRLS:
			case CANONICAL:
			case CATEGORY:
			case COLLATABLE:
			case COMBINEFUNC:
			case COMMUTATOR:
			case CONNECT:
			case COSTS:
			case CREATEDB:
			case CREATEROLE:
			case DESERIALFUNC:
			case DETERMINISTIC:
			case DISABLE_PAGE_SKIPPING:
			case ELEMENT:
			case EXTENDED:
			case FINALFUNC:
			case FINALFUNC_EXTRA:
			case FINALFUNC_MODIFY:
			case FORCE_NOT_NULL:
			case FORCE_NULL:
			case FORCE_QUOTE:
			case FORMAT:
			case GETTOKEN:
			case HASH:
			case HASHES:
			case HEADLINE:
			case HYPOTHETICAL:
			case INDEX_CLEANUP:
			case INIT:
			case INITCOND:
			case INTERNALLENGTH:
			case JSON:
			case LC_COLLATE:
			case LC_CTYPE:
			case LEFTARG:
			case LEXIZE:
			case LEXTYPES:
			case LIST:
			case LOCALE:
			case LOGIN:
			case MAIN:
			case MERGES:
			case MFINALFUNC:
			case MFINALFUNC_EXTRA:
			case MFINALFUNC_MODIFY:
			case MINITCOND:
			case MINVFUNC:
			case MODULUS:
			case MSFUNC:
			case MSSPACE:
			case MSTYPE:
			case NEGATOR:
			case NOBYPASSRLS:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOREPLICATION:
			case NOSUPERUSER:
			case OUTPUT:
			case PASSEDBYVALUE:
			case PATH:
			case PERMISSIVE:
			case PLAIN:
			case PREFERRED:
			case PROVIDER:
			case READ_ONLY:
			case READ_WRITE:
			case RECEIVE:
			case REMAINDER:
			case REPLICATION:
			case RESTRICTED:
			case RESTRICTIVE:
			case RIGHTARG:
			case SAFE:
			case SEND:
			case SERIALFUNC:
			case SETTINGS:
			case SFUNC:
			case SHAREABLE:
			case SKIP_LOCKED:
			case SORTOP:
			case SSPACE:
			case STYPE:
			case SUBTYPE_DIFF:
			case SUBTYPE_OPCLASS:
			case SUBTYPE:
			case SUMMARY:
			case SUPERUSER:
			case TIMING:
			case TYPMOD_IN:
			case TYPMOD_OUT:
			case UNSAFE:
			case USAGE:
			case VARIABLE:
			case YAML:
			case ALIAS:
			case ASSERT:
			case CONSTANT:
			case DATATYPE:
			case DEBUG:
			case DETAIL:
			case DIAGNOSTICS:
			case ELSEIF:
			case ELSIF:
			case ERRCODE:
			case EXIT:
			case EXCEPTION:
			case FOREACH:
			case GET:
			case HINT:
			case INFO:
			case LOG:
			case LOOP:
			case MESSAGE:
			case NOTICE:
			case OPEN:
			case PERFORM:
			case QUERY:
			case RAISE:
			case RECORD:
			case RETURN:
			case REVERSE:
			case ROWTYPE:
			case SLICE:
			case SQLSTATE:
			case STACKED:
			case WARNING:
			case WHILE:
			case Identifier:
			case QuotedIdentifier:
				{
				setState(5150);
				((Owner_toContext)_localctx).name = identifier();
				}
				break;
			case CURRENT_USER:
				{
				setState(5151);
				match(CURRENT_USER);
				}
				break;
			case SESSION_USER:
				{
				setState(5152);
				match(SESSION_USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rename_toContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode RENAME() { return getToken(PLpgSQLParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PLpgSQLParser.TO, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Rename_toContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rename_to; }
	}

	public final Rename_toContext rename_to() throws RecognitionException {
		Rename_toContext _localctx = new Rename_toContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_rename_to);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5155);
			match(RENAME);
			setState(5156);
			match(TO);
			setState(5157);
			((Rename_toContext)_localctx).name = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_schemaContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PLpgSQLParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PLpgSQLParser.SCHEMA, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Set_schemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_schema; }
	}

	public final Set_schemaContext set_schema() throws RecognitionException {
		Set_schemaContext _localctx = new Set_schemaContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_set_schema);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5159);
			match(SET);
			setState(5160);
			match(SCHEMA);
			setState(5161);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_column_privilegeContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(PLpgSQLParser.SELECT, 0); }
		public TerminalNode INSERT() { return getToken(PLpgSQLParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(PLpgSQLParser.UPDATE, 0); }
		public TerminalNode DELETE() { return getToken(PLpgSQLParser.DELETE, 0); }
		public TerminalNode TRUNCATE() { return getToken(PLpgSQLParser.TRUNCATE, 0); }
		public TerminalNode REFERENCES() { return getToken(PLpgSQLParser.REFERENCES, 0); }
		public TerminalNode TRIGGER() { return getToken(PLpgSQLParser.TRIGGER, 0); }
		public TerminalNode ALL() { return getToken(PLpgSQLParser.ALL, 0); }
		public TerminalNode PRIVILEGES() { return getToken(PLpgSQLParser.PRIVILEGES, 0); }
		public Table_column_privilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_column_privilege; }
	}

	public final Table_column_privilegeContext table_column_privilege() throws RecognitionException {
		Table_column_privilegeContext _localctx = new Table_column_privilegeContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_table_column_privilege);
		int _la;
		try {
			setState(5174);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(5163);
				match(SELECT);
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 2);
				{
				setState(5164);
				match(INSERT);
				}
				break;
			case UPDATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(5165);
				match(UPDATE);
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 4);
				{
				setState(5166);
				match(DELETE);
				}
				break;
			case TRUNCATE:
				enterOuterAlt(_localctx, 5);
				{
				setState(5167);
				match(TRUNCATE);
				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 6);
				{
				setState(5168);
				match(REFERENCES);
				}
				break;
			case TRIGGER:
				enterOuterAlt(_localctx, 7);
				{
				setState(5169);
				match(TRIGGER);
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 8);
				{
				setState(5170);
				match(ALL);
				setState(5172);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIVILEGES) {
					{
					setState(5171);
					match(PRIVILEGES);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Usage_select_updateContext extends ParserRuleContext {
		public TerminalNode USAGE() { return getToken(PLpgSQLParser.USAGE, 0); }
		public TerminalNode SELECT() { return getToken(PLpgSQLParser.SELECT, 0); }
		public TerminalNode UPDATE() { return getToken(PLpgSQLParser.UPDATE, 0); }
		public Usage_select_updateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_usage_select_update; }
	}

	public final Usage_select_updateContext usage_select_update() throws RecognitionException {
		Usage_select_updateContext _localctx = new Usage_select_updateContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_usage_select_update);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5176);
			_la = _input.LA(1);
			if ( !(_la==UPDATE || _la==SELECT || _la==USAGE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_by_columnsContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PLpgSQLParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PLpgSQLParser.BY, 0); }
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Partition_by_columnsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_by_columns; }
	}

	public final Partition_by_columnsContext partition_by_columns() throws RecognitionException {
		Partition_by_columnsContext _localctx = new Partition_by_columnsContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_partition_by_columns);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5178);
			match(PARTITION);
			setState(5179);
			match(BY);
			setState(5180);
			vex(0);
			setState(5185);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5181);
				match(COMMA);
				setState(5182);
				vex(0);
				}
				}
				setState(5187);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cascade_restrictContext extends ParserRuleContext {
		public TerminalNode CASCADE() { return getToken(PLpgSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PLpgSQLParser.RESTRICT, 0); }
		public Cascade_restrictContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cascade_restrict; }
	}

	public final Cascade_restrictContext cascade_restrict() throws RecognitionException {
		Cascade_restrictContext _localctx = new Cascade_restrictContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_cascade_restrict);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5188);
			_la = _input.LA(1);
			if ( !(_la==CASCADE || _la==RESTRICT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collate_identifierContext extends ParserRuleContext {
		public Schema_qualified_nameContext collation;
		public TerminalNode COLLATE() { return getToken(PLpgSQLParser.COLLATE, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Collate_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collate_identifier; }
	}

	public final Collate_identifierContext collate_identifier() throws RecognitionException {
		Collate_identifierContext _localctx = new Collate_identifierContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_collate_identifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5190);
			match(COLLATE);
			setState(5191);
			((Collate_identifierContext)_localctx).collation = schema_qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Indirection_varContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Dollar_numberContext dollar_number() {
			return getRuleContext(Dollar_numberContext.class,0);
		}
		public Indirection_listContext indirection_list() {
			return getRuleContext(Indirection_listContext.class,0);
		}
		public Indirection_varContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indirection_var; }
	}

	public final Indirection_varContext indirection_var() throws RecognitionException {
		Indirection_varContext _localctx = new Indirection_varContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_indirection_var);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5195);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BY:
			case CACHE:
			case CALL:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COLUMNS:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONFLICT:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CUBE:
			case CURRENT:
			case CURSOR:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DEPENDS:
			case DETACH:
			case DICTIONARY:
			case DISABLE:
			case DISCARD:
			case DOCUMENT:
			case DOMAIN:
			case DOUBLE:
			case DROP:
			case EACH:
			case ENABLE:
			case ENCODING:
			case ENCRYPTED:
			case ENUM:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GENERATED:
			case GLOBAL:
			case GRANTED:
			case GROUPS:
			case HANDLER:
			case HEADER:
			case HOLD:
			case HOUR:
			case IDENTITY:
			case IF:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT:
			case IMPORT:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCKED:
			case LOGGED:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case METHOD:
			case MINUTE:
			case MINVALUE:
			case MODE:
			case MONTH:
			case MOVE:
			case NAME:
			case NAMES:
			case NEW:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS:
			case OBJECT:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OVER:
			case OVERRIDING:
			case OWNED:
			case OWNER:
			case PARALLEL:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POLICY:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROCEDURES:
			case PROGRAM:
			case PUBLICATION:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINES:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMAS:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SKIP_:
			case SNAPSHOT:
			case SQL:
			case STABLE:
			case STANDALONE:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STORED:
			case STRICT:
			case STRIP:
			case SUBSCRIPTION:
			case SUPPORT:
			case SYSID:
			case SYSTEM:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT:
			case TIES:
			case TRANSACTION:
			case TRANSFORM:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE:
			case VARYING:
			case VERSION:
			case VIEW:
			case VIEWS:
			case VOLATILE:
			case WHITESPACE:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML:
			case YEAR:
			case YES:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL:
			case EXISTS:
			case EXTRACT:
			case FLOAT:
			case GREATEST:
			case GROUPING:
			case INOUT:
			case INT:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case ALIGNMENT:
			case BASETYPE:
			case BUFFERS:
			case BYPASSRLS:
			case CANONICAL:
			case CATEGORY:
			case COLLATABLE:
			case COMBINEFUNC:
			case COMMUTATOR:
			case CONNECT:
			case COSTS:
			case CREATEDB:
			case CREATEROLE:
			case DESERIALFUNC:
			case DETERMINISTIC:
			case DISABLE_PAGE_SKIPPING:
			case ELEMENT:
			case EXTENDED:
			case FINALFUNC:
			case FINALFUNC_EXTRA:
			case FINALFUNC_MODIFY:
			case FORCE_NOT_NULL:
			case FORCE_NULL:
			case FORCE_QUOTE:
			case FORMAT:
			case GETTOKEN:
			case HASH:
			case HASHES:
			case HEADLINE:
			case HYPOTHETICAL:
			case INDEX_CLEANUP:
			case INIT:
			case INITCOND:
			case INTERNALLENGTH:
			case JSON:
			case LC_COLLATE:
			case LC_CTYPE:
			case LEFTARG:
			case LEXIZE:
			case LEXTYPES:
			case LIST:
			case LOCALE:
			case LOGIN:
			case MAIN:
			case MERGES:
			case MFINALFUNC:
			case MFINALFUNC_EXTRA:
			case MFINALFUNC_MODIFY:
			case MINITCOND:
			case MINVFUNC:
			case MODULUS:
			case MSFUNC:
			case MSSPACE:
			case MSTYPE:
			case NEGATOR:
			case NOBYPASSRLS:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOREPLICATION:
			case NOSUPERUSER:
			case OUTPUT:
			case PASSEDBYVALUE:
			case PATH:
			case PERMISSIVE:
			case PLAIN:
			case PREFERRED:
			case PROVIDER:
			case READ_ONLY:
			case READ_WRITE:
			case RECEIVE:
			case REMAINDER:
			case REPLICATION:
			case RESTRICTED:
			case RESTRICTIVE:
			case RIGHTARG:
			case SAFE:
			case SEND:
			case SERIALFUNC:
			case SETTINGS:
			case SFUNC:
			case SHAREABLE:
			case SKIP_LOCKED:
			case SORTOP:
			case SSPACE:
			case STYPE:
			case SUBTYPE_DIFF:
			case SUBTYPE_OPCLASS:
			case SUBTYPE:
			case SUMMARY:
			case SUPERUSER:
			case TIMING:
			case TYPMOD_IN:
			case TYPMOD_OUT:
			case UNSAFE:
			case USAGE:
			case VARIABLE:
			case YAML:
			case ALIAS:
			case ASSERT:
			case CONSTANT:
			case DATATYPE:
			case DEBUG:
			case DETAIL:
			case DIAGNOSTICS:
			case ELSEIF:
			case ELSIF:
			case ERRCODE:
			case EXIT:
			case EXCEPTION:
			case FOREACH:
			case GET:
			case HINT:
			case INFO:
			case LOG:
			case LOOP:
			case MESSAGE:
			case NOTICE:
			case OPEN:
			case PERFORM:
			case QUERY:
			case RAISE:
			case RECORD:
			case RETURN:
			case REVERSE:
			case ROWTYPE:
			case SLICE:
			case SQLSTATE:
			case STACKED:
			case WARNING:
			case WHILE:
			case Identifier:
			case QuotedIdentifier:
				{
				setState(5193);
				identifier();
				}
				break;
			case DOLLAR_NUMBER:
				{
				setState(5194);
				dollar_number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5198);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,636,_ctx) ) {
			case 1:
				{
				setState(5197);
				indirection_list();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dollar_numberContext extends ParserRuleContext {
		public TerminalNode DOLLAR_NUMBER() { return getToken(PLpgSQLParser.DOLLAR_NUMBER, 0); }
		public Dollar_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dollar_number; }
	}

	public final Dollar_numberContext dollar_number() throws RecognitionException {
		Dollar_numberContext _localctx = new Dollar_numberContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_dollar_number);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5200);
			match(DOLLAR_NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Indirection_listContext extends ParserRuleContext {
		public List<IndirectionContext> indirection() {
			return getRuleContexts(IndirectionContext.class);
		}
		public IndirectionContext indirection(int i) {
			return getRuleContext(IndirectionContext.class,i);
		}
		public TerminalNode DOT() { return getToken(PLpgSQLParser.DOT, 0); }
		public TerminalNode MULTIPLY() { return getToken(PLpgSQLParser.MULTIPLY, 0); }
		public Indirection_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indirection_list; }
	}

	public final Indirection_listContext indirection_list() throws RecognitionException {
		Indirection_listContext _localctx = new Indirection_listContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_indirection_list);
		try {
			int _alt;
			setState(5215);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,639,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5203); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(5202);
						indirection();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5205); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,637,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5210);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,638,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(5207);
						indirection();
						}
						} 
					}
					setState(5212);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,638,_ctx);
				}
				setState(5213);
				match(DOT);
				setState(5214);
				match(MULTIPLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndirectionContext extends ParserRuleContext {
		public TerminalNode DOT() { return getToken(PLpgSQLParser.DOT, 0); }
		public Col_labelContext col_label() {
			return getRuleContext(Col_labelContext.class,0);
		}
		public TerminalNode LEFT_BRACKET() { return getToken(PLpgSQLParser.LEFT_BRACKET, 0); }
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public TerminalNode RIGHT_BRACKET() { return getToken(PLpgSQLParser.RIGHT_BRACKET, 0); }
		public TerminalNode COLON() { return getToken(PLpgSQLParser.COLON, 0); }
		public IndirectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indirection; }
	}

	public final IndirectionContext indirection() throws RecognitionException {
		IndirectionContext _localctx = new IndirectionContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_indirection);
		int _la;
		try {
			setState(5232);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,642,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5217);
				match(DOT);
				setState(5218);
				col_label();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5219);
				match(LEFT_BRACKET);
				setState(5220);
				vex(0);
				setState(5221);
				match(RIGHT_BRACKET);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5223);
				match(LEFT_BRACKET);
				setState(5225);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATTACH) | (1L << ATTRIBUTE) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BY) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG) | (1L << CHAIN) | (1L << CHARACTERISTICS) | (1L << CHECKPOINT) | (1L << CLASS) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMENTS) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONFIGURATION) | (1L << CONFLICT) | (1L << CONNECTION) | (1L << CONSTRAINTS) | (1L << CONTENT) | (1L << CONTINUE) | (1L << CONVERSION) | (1L << COPY) | (1L << COST) | (1L << CSV) | (1L << CUBE) | (1L << CURRENT) | (1L << CURSOR) | (1L << CYCLE) | (1L << DATA) | (1L << DATABASE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DEFAULTS) | (1L << DEFERRED) | (1L << DEFINER) | (1L << DELETE) | (1L << DELIMITER) | (1L << DELIMITERS) | (1L << DEPENDS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DETACH - 64)) | (1L << (DICTIONARY - 64)) | (1L << (DISABLE - 64)) | (1L << (DISCARD - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOMAIN - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (EACH - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTED - 64)) | (1L << (ENUM - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVENT - 64)) | (1L << (EXCLUDE - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXCLUSIVE - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTENSION - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FAMILY - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORCE - 64)) | (1L << (FORWARD - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GENERATED - 64)) | (1L << (GLOBAL - 64)) | (1L << (GRANTED - 64)) | (1L << (GROUPS - 64)) | (1L << (HANDLER - 64)) | (1L << (HEADER - 64)) | (1L << (HOLD - 64)) | (1L << (HOUR - 64)) | (1L << (IDENTITY - 64)) | (1L << (IF - 64)) | (1L << (IMMEDIATE - 64)) | (1L << (IMMUTABLE - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPORT - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INCREMENT - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXES - 64)) | (1L << (INHERIT - 64)) | (1L << (INHERITS - 64)) | (1L << (INLINE - 64)) | (1L << (INPUT - 64)) | (1L << (INSENSITIVE - 64)) | (1L << (INSERT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INVOKER - 64)) | (1L << (ISOLATION - 64)) | (1L << (KEY - 64)) | (1L << (LABEL - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LARGE - 64)) | (1L << (LAST - 64)) | (1L << (LEAKPROOF - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LEVEL - 128)) | (1L << (LISTEN - 128)) | (1L << (LOAD - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCATION - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKED - 128)) | (1L << (LOGGED - 128)) | (1L << (MAPPING - 128)) | (1L << (MATCH - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MAXVALUE - 128)) | (1L << (METHOD - 128)) | (1L << (MINUTE - 128)) | (1L << (MINVALUE - 128)) | (1L << (MODE - 128)) | (1L << (MONTH - 128)) | (1L << (MOVE - 128)) | (1L << (NAME - 128)) | (1L << (NAMES - 128)) | (1L << (NEW - 128)) | (1L << (NEXT - 128)) | (1L << (NO - 128)) | (1L << (NOTHING - 128)) | (1L << (NOTIFY - 128)) | (1L << (NOWAIT - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFF - 128)) | (1L << (OIDS - 128)) | (1L << (OLD - 128)) | (1L << (OPERATOR - 128)) | (1L << (OPTION - 128)) | (1L << (OPTIONS - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OTHERS - 128)) | (1L << (OVER - 128)) | (1L << (OVERRIDING - 128)) | (1L << (OWNED - 128)) | (1L << (OWNER - 128)) | (1L << (PARALLEL - 128)) | (1L << (PARSER - 128)) | (1L << (PARTIAL - 128)) | (1L << (PARTITION - 128)) | (1L << (PASSING - 128)) | (1L << (PASSWORD - 128)) | (1L << (PLANS - 128)) | (1L << (POLICY - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PREPARED - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRIOR - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROCEDURAL - 128)) | (1L << (PROCEDURE - 128)) | (1L << (PROCEDURES - 128)) | (1L << (PROGRAM - 128)) | (1L << (PUBLICATION - 128)) | (1L << (QUOTE - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (REASSIGN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (RECHECK - 192)) | (1L << (RECURSIVE - 192)) | (1L << (REF - 192)) | (1L << (REFERENCING - 192)) | (1L << (REFRESH - 192)) | (1L << (REINDEX - 192)) | (1L << (RELATIVE - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (REPLICA - 192)) | (1L << (RESET - 192)) | (1L << (RESTART - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUTINE - 192)) | (1L << (ROUTINES - 192)) | (1L << (ROWS - 192)) | (1L << (RULE - 192)) | (1L << (SAVEPOINT - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SCROLL - 192)) | (1L << (SEARCH - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEQUENCE - 192)) | (1L << (SEQUENCES - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SERVER - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHARE - 192)) | (1L << (SHOW - 192)) | (1L << (SIMPLE - 192)) | (1L << (SKIP_ - 192)) | (1L << (SNAPSHOT - 192)) | (1L << (SQL - 192)) | (1L << (STABLE - 192)) | (1L << (STANDALONE - 192)) | (1L << (START - 192)) | (1L << (STATEMENT - 192)) | (1L << (STATISTICS - 192)) | (1L << (STDIN - 192)) | (1L << (STDOUT - 192)) | (1L << (STORAGE - 192)) | (1L << (STORED - 192)) | (1L << (STRICT - 192)) | (1L << (STRIP - 192)) | (1L << (SUBSCRIPTION - 192)) | (1L << (SUPPORT - 192)) | (1L << (SYSID - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESPACE - 192)) | (1L << (TEMP - 192)) | (1L << (TEMPLATE - 192)) | (1L << (TEMPORARY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TEXT - 256)) | (1L << (TIES - 256)) | (1L << (TRANSACTION - 256)) | (1L << (TRANSFORM - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TRUSTED - 256)) | (1L << (TYPE - 256)) | (1L << (TYPES - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNENCRYPTED - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNLISTEN - 256)) | (1L << (UNLOGGED - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (VACUUM - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALIDATOR - 256)) | (1L << (VALUE - 256)) | (1L << (VARYING - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (VIEWS - 256)) | (1L << (VOLATILE - 256)) | (1L << (WHITESPACE - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (XML - 256)) | (1L << (YEAR - 256)) | (1L << (YES - 256)) | (1L << (ZONE - 256)) | (1L << (BETWEEN - 256)) | (1L << (BIGINT - 256)) | (1L << (BIT - 256)) | (1L << (BOOLEAN - 256)) | (1L << (CHAR - 256)) | (1L << (CHARACTER - 256)) | (1L << (COALESCE - 256)) | (1L << (DEC - 256)) | (1L << (DECIMAL - 256)) | (1L << (EXISTS - 256)) | (1L << (EXTRACT - 256)) | (1L << (FLOAT - 256)) | (1L << (GREATEST - 256)) | (1L << (GROUPING - 256)) | (1L << (INOUT - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERVAL - 256)) | (1L << (LEAST - 256)) | (1L << (NATIONAL - 256)) | (1L << (NCHAR - 256)) | (1L << (NONE - 256)) | (1L << (NULLIF - 256)) | (1L << (NUMERIC - 256)) | (1L << (OUT - 256)) | (1L << (OVERLAY - 256)) | (1L << (POSITION - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRECISION - 320)) | (1L << (REAL - 320)) | (1L << (ROW - 320)) | (1L << (SETOF - 320)) | (1L << (SMALLINT - 320)) | (1L << (SUBSTRING - 320)) | (1L << (TIME - 320)) | (1L << (TIMESTAMP - 320)) | (1L << (TREAT - 320)) | (1L << (TRIM - 320)) | (1L << (VALUES - 320)) | (1L << (VARCHAR - 320)) | (1L << (XMLATTRIBUTES - 320)) | (1L << (XMLCONCAT - 320)) | (1L << (XMLELEMENT - 320)) | (1L << (XMLEXISTS - 320)) | (1L << (XMLFOREST - 320)) | (1L << (XMLNAMESPACES - 320)) | (1L << (XMLPARSE - 320)) | (1L << (XMLPI - 320)) | (1L << (XMLROOT - 320)) | (1L << (XMLSERIALIZE - 320)) | (1L << (XMLTABLE - 320)) | (1L << (AUTHORIZATION - 320)) | (1L << (BINARY - 320)) | (1L << (COLLATION - 320)) | (1L << (CONCURRENTLY - 320)) | (1L << (CROSS - 320)) | (1L << (CURRENT_SCHEMA - 320)) | (1L << (FREEZE - 320)) | (1L << (FULL - 320)) | (1L << (ILIKE - 320)) | (1L << (INNER - 320)) | (1L << (IS - 320)) | (1L << (ISNULL - 320)) | (1L << (JOIN - 320)) | (1L << (LEFT - 320)) | (1L << (LIKE - 320)) | (1L << (NATURAL - 320)) | (1L << (NOTNULL - 320)) | (1L << (OUTER - 320)) | (1L << (OVERLAPS - 320)) | (1L << (RIGHT - 320)) | (1L << (SIMILAR - 320)) | (1L << (TABLESAMPLE - 320)) | (1L << (VERBOSE - 320)) | (1L << (ALL - 320)) | (1L << (ANY - 320)) | (1L << (ARRAY - 320)) | (1L << (CASE - 320)) | (1L << (CAST - 320)) | (1L << (CURRENT_CATALOG - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (CURRENT_DATE - 384)) | (1L << (CURRENT_TIME - 384)) | (1L << (CURRENT_TIMESTAMP - 384)) | (1L << (CURRENT_USER - 384)) | (1L << (FALSE - 384)) | (1L << (LOCALTIME - 384)) | (1L << (LOCALTIMESTAMP - 384)) | (1L << (NOT - 384)) | (1L << (NULL - 384)) | (1L << (ON - 384)) | (1L << (SESSION_USER - 384)) | (1L << (SOME - 384)) | (1L << (TRUE - 384)) | (1L << (USER - 384)) | (1L << (ALIGNMENT - 384)) | (1L << (BASETYPE - 384)) | (1L << (BUFFERS - 384)) | (1L << (BYPASSRLS - 384)) | (1L << (CANONICAL - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (CATEGORY - 448)) | (1L << (COLLATABLE - 448)) | (1L << (COMBINEFUNC - 448)) | (1L << (COMMUTATOR - 448)) | (1L << (CONNECT - 448)) | (1L << (COSTS - 448)) | (1L << (CREATEDB - 448)) | (1L << (CREATEROLE - 448)) | (1L << (DESERIALFUNC - 448)) | (1L << (DETERMINISTIC - 448)) | (1L << (DISABLE_PAGE_SKIPPING - 448)) | (1L << (ELEMENT - 448)) | (1L << (EXTENDED - 448)) | (1L << (FINALFUNC - 448)) | (1L << (FINALFUNC_EXTRA - 448)) | (1L << (FINALFUNC_MODIFY - 448)) | (1L << (FORCE_NOT_NULL - 448)) | (1L << (FORCE_NULL - 448)) | (1L << (FORCE_QUOTE - 448)) | (1L << (FORMAT - 448)) | (1L << (GETTOKEN - 448)) | (1L << (HASH - 448)) | (1L << (HASHES - 448)) | (1L << (HEADLINE - 448)) | (1L << (HYPOTHETICAL - 448)) | (1L << (INDEX_CLEANUP - 448)) | (1L << (INIT - 448)) | (1L << (INITCOND - 448)) | (1L << (INTERNALLENGTH - 448)) | (1L << (JSON - 448)) | (1L << (LC_COLLATE - 448)) | (1L << (LC_CTYPE - 448)) | (1L << (LEFTARG - 448)) | (1L << (LEXIZE - 448)) | (1L << (LEXTYPES - 448)) | (1L << (LIST - 448)) | (1L << (LOCALE - 448)) | (1L << (LOGIN - 448)) | (1L << (MAIN - 448)) | (1L << (MERGES - 448)) | (1L << (MFINALFUNC - 448)) | (1L << (MFINALFUNC_EXTRA - 448)) | (1L << (MFINALFUNC_MODIFY - 448)) | (1L << (MINITCOND - 448)) | (1L << (MINVFUNC - 448)) | (1L << (MODULUS - 448)) | (1L << (MSFUNC - 448)) | (1L << (MSSPACE - 448)) | (1L << (MSTYPE - 448)) | (1L << (NEGATOR - 448)) | (1L << (NOBYPASSRLS - 448)) | (1L << (NOCREATEDB - 448)) | (1L << (NOCREATEROLE - 448)) | (1L << (NOINHERIT - 448)) | (1L << (NOLOGIN - 448)) | (1L << (NOREPLICATION - 448)) | (1L << (NOSUPERUSER - 448)) | (1L << (OUTPUT - 448)) | (1L << (PASSEDBYVALUE - 448)) | (1L << (PATH - 448)) | (1L << (PERMISSIVE - 448)) | (1L << (PLAIN - 448)) | (1L << (PREFERRED - 448)) | (1L << (PROVIDER - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (READ_ONLY - 512)) | (1L << (READ_WRITE - 512)) | (1L << (RECEIVE - 512)) | (1L << (REMAINDER - 512)) | (1L << (REPLICATION - 512)) | (1L << (RESTRICTED - 512)) | (1L << (RESTRICTIVE - 512)) | (1L << (RIGHTARG - 512)) | (1L << (SAFE - 512)) | (1L << (SEND - 512)) | (1L << (SERIALFUNC - 512)) | (1L << (SETTINGS - 512)) | (1L << (SFUNC - 512)) | (1L << (SHAREABLE - 512)) | (1L << (SKIP_LOCKED - 512)) | (1L << (SORTOP - 512)) | (1L << (SSPACE - 512)) | (1L << (STYPE - 512)) | (1L << (SUBTYPE_DIFF - 512)) | (1L << (SUBTYPE_OPCLASS - 512)) | (1L << (SUBTYPE - 512)) | (1L << (SUMMARY - 512)) | (1L << (SUPERUSER - 512)) | (1L << (TIMING - 512)) | (1L << (TYPMOD_IN - 512)) | (1L << (TYPMOD_OUT - 512)) | (1L << (UNSAFE - 512)) | (1L << (USAGE - 512)) | (1L << (VARIABLE - 512)) | (1L << (YAML - 512)) | (1L << (ALIAS - 512)) | (1L << (ASSERT - 512)) | (1L << (CONSTANT - 512)) | (1L << (DATATYPE - 512)) | (1L << (DEBUG - 512)) | (1L << (DETAIL - 512)) | (1L << (DIAGNOSTICS - 512)) | (1L << (ELSEIF - 512)) | (1L << (ELSIF - 512)) | (1L << (ERRCODE - 512)) | (1L << (EXIT - 512)) | (1L << (EXCEPTION - 512)) | (1L << (FOREACH - 512)) | (1L << (GET - 512)) | (1L << (HINT - 512)) | (1L << (INFO - 512)) | (1L << (LOG - 512)) | (1L << (LOOP - 512)) | (1L << (MESSAGE - 512)) | (1L << (NOTICE - 512)) | (1L << (OPEN - 512)) | (1L << (PERFORM - 512)) | (1L << (QUERY - 512)) | (1L << (RAISE - 512)) | (1L << (RECORD - 512)) | (1L << (RETURN - 512)) | (1L << (REVERSE - 512)) | (1L << (ROWTYPE - 512)) | (1L << (SLICE - 512)) | (1L << (SQLSTATE - 512)) | (1L << (STACKED - 512)) | (1L << (WARNING - 512)) | (1L << (WHILE - 512)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (LEFT_PAREN - 585)) | (1L << (PLUS - 585)) | (1L << (MINUS - 585)) | (1L << (MULTIPLY - 585)) | (1L << (LESS_LESS - 585)) | (1L << (GREATER_GREATER - 585)) | (1L << (HASH_SIGN - 585)) | (1L << (OP_CHARS - 585)) | (1L << (NUMBER_LITERAL - 585)) | (1L << (REAL_NUMBER - 585)) | (1L << (DOLLAR_NUMBER - 585)) | (1L << (Identifier - 585)) | (1L << (QuotedIdentifier - 585)) | (1L << (Character_String_Literal - 585)) | (1L << (BeginDollarStringConstant - 585)))) != 0)) {
					{
					setState(5224);
					vex(0);
					}
				}

				setState(5227);
				match(COLON);
				setState(5229);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATTACH) | (1L << ATTRIBUTE) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BY) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG) | (1L << CHAIN) | (1L << CHARACTERISTICS) | (1L << CHECKPOINT) | (1L << CLASS) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMENTS) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONFIGURATION) | (1L << CONFLICT) | (1L << CONNECTION) | (1L << CONSTRAINTS) | (1L << CONTENT) | (1L << CONTINUE) | (1L << CONVERSION) | (1L << COPY) | (1L << COST) | (1L << CSV) | (1L << CUBE) | (1L << CURRENT) | (1L << CURSOR) | (1L << CYCLE) | (1L << DATA) | (1L << DATABASE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DEFAULTS) | (1L << DEFERRED) | (1L << DEFINER) | (1L << DELETE) | (1L << DELIMITER) | (1L << DELIMITERS) | (1L << DEPENDS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DETACH - 64)) | (1L << (DICTIONARY - 64)) | (1L << (DISABLE - 64)) | (1L << (DISCARD - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOMAIN - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (EACH - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTED - 64)) | (1L << (ENUM - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVENT - 64)) | (1L << (EXCLUDE - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXCLUSIVE - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTENSION - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FAMILY - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORCE - 64)) | (1L << (FORWARD - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GENERATED - 64)) | (1L << (GLOBAL - 64)) | (1L << (GRANTED - 64)) | (1L << (GROUPS - 64)) | (1L << (HANDLER - 64)) | (1L << (HEADER - 64)) | (1L << (HOLD - 64)) | (1L << (HOUR - 64)) | (1L << (IDENTITY - 64)) | (1L << (IF - 64)) | (1L << (IMMEDIATE - 64)) | (1L << (IMMUTABLE - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPORT - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INCREMENT - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXES - 64)) | (1L << (INHERIT - 64)) | (1L << (INHERITS - 64)) | (1L << (INLINE - 64)) | (1L << (INPUT - 64)) | (1L << (INSENSITIVE - 64)) | (1L << (INSERT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INVOKER - 64)) | (1L << (ISOLATION - 64)) | (1L << (KEY - 64)) | (1L << (LABEL - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LARGE - 64)) | (1L << (LAST - 64)) | (1L << (LEAKPROOF - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LEVEL - 128)) | (1L << (LISTEN - 128)) | (1L << (LOAD - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCATION - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKED - 128)) | (1L << (LOGGED - 128)) | (1L << (MAPPING - 128)) | (1L << (MATCH - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MAXVALUE - 128)) | (1L << (METHOD - 128)) | (1L << (MINUTE - 128)) | (1L << (MINVALUE - 128)) | (1L << (MODE - 128)) | (1L << (MONTH - 128)) | (1L << (MOVE - 128)) | (1L << (NAME - 128)) | (1L << (NAMES - 128)) | (1L << (NEW - 128)) | (1L << (NEXT - 128)) | (1L << (NO - 128)) | (1L << (NOTHING - 128)) | (1L << (NOTIFY - 128)) | (1L << (NOWAIT - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFF - 128)) | (1L << (OIDS - 128)) | (1L << (OLD - 128)) | (1L << (OPERATOR - 128)) | (1L << (OPTION - 128)) | (1L << (OPTIONS - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OTHERS - 128)) | (1L << (OVER - 128)) | (1L << (OVERRIDING - 128)) | (1L << (OWNED - 128)) | (1L << (OWNER - 128)) | (1L << (PARALLEL - 128)) | (1L << (PARSER - 128)) | (1L << (PARTIAL - 128)) | (1L << (PARTITION - 128)) | (1L << (PASSING - 128)) | (1L << (PASSWORD - 128)) | (1L << (PLANS - 128)) | (1L << (POLICY - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PREPARED - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRIOR - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROCEDURAL - 128)) | (1L << (PROCEDURE - 128)) | (1L << (PROCEDURES - 128)) | (1L << (PROGRAM - 128)) | (1L << (PUBLICATION - 128)) | (1L << (QUOTE - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (REASSIGN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (RECHECK - 192)) | (1L << (RECURSIVE - 192)) | (1L << (REF - 192)) | (1L << (REFERENCING - 192)) | (1L << (REFRESH - 192)) | (1L << (REINDEX - 192)) | (1L << (RELATIVE - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (REPLICA - 192)) | (1L << (RESET - 192)) | (1L << (RESTART - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUTINE - 192)) | (1L << (ROUTINES - 192)) | (1L << (ROWS - 192)) | (1L << (RULE - 192)) | (1L << (SAVEPOINT - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SCROLL - 192)) | (1L << (SEARCH - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEQUENCE - 192)) | (1L << (SEQUENCES - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SERVER - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHARE - 192)) | (1L << (SHOW - 192)) | (1L << (SIMPLE - 192)) | (1L << (SKIP_ - 192)) | (1L << (SNAPSHOT - 192)) | (1L << (SQL - 192)) | (1L << (STABLE - 192)) | (1L << (STANDALONE - 192)) | (1L << (START - 192)) | (1L << (STATEMENT - 192)) | (1L << (STATISTICS - 192)) | (1L << (STDIN - 192)) | (1L << (STDOUT - 192)) | (1L << (STORAGE - 192)) | (1L << (STORED - 192)) | (1L << (STRICT - 192)) | (1L << (STRIP - 192)) | (1L << (SUBSCRIPTION - 192)) | (1L << (SUPPORT - 192)) | (1L << (SYSID - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESPACE - 192)) | (1L << (TEMP - 192)) | (1L << (TEMPLATE - 192)) | (1L << (TEMPORARY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TEXT - 256)) | (1L << (TIES - 256)) | (1L << (TRANSACTION - 256)) | (1L << (TRANSFORM - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TRUSTED - 256)) | (1L << (TYPE - 256)) | (1L << (TYPES - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNENCRYPTED - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNLISTEN - 256)) | (1L << (UNLOGGED - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (VACUUM - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALIDATOR - 256)) | (1L << (VALUE - 256)) | (1L << (VARYING - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (VIEWS - 256)) | (1L << (VOLATILE - 256)) | (1L << (WHITESPACE - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (XML - 256)) | (1L << (YEAR - 256)) | (1L << (YES - 256)) | (1L << (ZONE - 256)) | (1L << (BETWEEN - 256)) | (1L << (BIGINT - 256)) | (1L << (BIT - 256)) | (1L << (BOOLEAN - 256)) | (1L << (CHAR - 256)) | (1L << (CHARACTER - 256)) | (1L << (COALESCE - 256)) | (1L << (DEC - 256)) | (1L << (DECIMAL - 256)) | (1L << (EXISTS - 256)) | (1L << (EXTRACT - 256)) | (1L << (FLOAT - 256)) | (1L << (GREATEST - 256)) | (1L << (GROUPING - 256)) | (1L << (INOUT - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERVAL - 256)) | (1L << (LEAST - 256)) | (1L << (NATIONAL - 256)) | (1L << (NCHAR - 256)) | (1L << (NONE - 256)) | (1L << (NULLIF - 256)) | (1L << (NUMERIC - 256)) | (1L << (OUT - 256)) | (1L << (OVERLAY - 256)) | (1L << (POSITION - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRECISION - 320)) | (1L << (REAL - 320)) | (1L << (ROW - 320)) | (1L << (SETOF - 320)) | (1L << (SMALLINT - 320)) | (1L << (SUBSTRING - 320)) | (1L << (TIME - 320)) | (1L << (TIMESTAMP - 320)) | (1L << (TREAT - 320)) | (1L << (TRIM - 320)) | (1L << (VALUES - 320)) | (1L << (VARCHAR - 320)) | (1L << (XMLATTRIBUTES - 320)) | (1L << (XMLCONCAT - 320)) | (1L << (XMLELEMENT - 320)) | (1L << (XMLEXISTS - 320)) | (1L << (XMLFOREST - 320)) | (1L << (XMLNAMESPACES - 320)) | (1L << (XMLPARSE - 320)) | (1L << (XMLPI - 320)) | (1L << (XMLROOT - 320)) | (1L << (XMLSERIALIZE - 320)) | (1L << (XMLTABLE - 320)) | (1L << (AUTHORIZATION - 320)) | (1L << (BINARY - 320)) | (1L << (COLLATION - 320)) | (1L << (CONCURRENTLY - 320)) | (1L << (CROSS - 320)) | (1L << (CURRENT_SCHEMA - 320)) | (1L << (FREEZE - 320)) | (1L << (FULL - 320)) | (1L << (ILIKE - 320)) | (1L << (INNER - 320)) | (1L << (IS - 320)) | (1L << (ISNULL - 320)) | (1L << (JOIN - 320)) | (1L << (LEFT - 320)) | (1L << (LIKE - 320)) | (1L << (NATURAL - 320)) | (1L << (NOTNULL - 320)) | (1L << (OUTER - 320)) | (1L << (OVERLAPS - 320)) | (1L << (RIGHT - 320)) | (1L << (SIMILAR - 320)) | (1L << (TABLESAMPLE - 320)) | (1L << (VERBOSE - 320)) | (1L << (ALL - 320)) | (1L << (ANY - 320)) | (1L << (ARRAY - 320)) | (1L << (CASE - 320)) | (1L << (CAST - 320)) | (1L << (CURRENT_CATALOG - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (CURRENT_DATE - 384)) | (1L << (CURRENT_TIME - 384)) | (1L << (CURRENT_TIMESTAMP - 384)) | (1L << (CURRENT_USER - 384)) | (1L << (FALSE - 384)) | (1L << (LOCALTIME - 384)) | (1L << (LOCALTIMESTAMP - 384)) | (1L << (NOT - 384)) | (1L << (NULL - 384)) | (1L << (ON - 384)) | (1L << (SESSION_USER - 384)) | (1L << (SOME - 384)) | (1L << (TRUE - 384)) | (1L << (USER - 384)) | (1L << (ALIGNMENT - 384)) | (1L << (BASETYPE - 384)) | (1L << (BUFFERS - 384)) | (1L << (BYPASSRLS - 384)) | (1L << (CANONICAL - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (CATEGORY - 448)) | (1L << (COLLATABLE - 448)) | (1L << (COMBINEFUNC - 448)) | (1L << (COMMUTATOR - 448)) | (1L << (CONNECT - 448)) | (1L << (COSTS - 448)) | (1L << (CREATEDB - 448)) | (1L << (CREATEROLE - 448)) | (1L << (DESERIALFUNC - 448)) | (1L << (DETERMINISTIC - 448)) | (1L << (DISABLE_PAGE_SKIPPING - 448)) | (1L << (ELEMENT - 448)) | (1L << (EXTENDED - 448)) | (1L << (FINALFUNC - 448)) | (1L << (FINALFUNC_EXTRA - 448)) | (1L << (FINALFUNC_MODIFY - 448)) | (1L << (FORCE_NOT_NULL - 448)) | (1L << (FORCE_NULL - 448)) | (1L << (FORCE_QUOTE - 448)) | (1L << (FORMAT - 448)) | (1L << (GETTOKEN - 448)) | (1L << (HASH - 448)) | (1L << (HASHES - 448)) | (1L << (HEADLINE - 448)) | (1L << (HYPOTHETICAL - 448)) | (1L << (INDEX_CLEANUP - 448)) | (1L << (INIT - 448)) | (1L << (INITCOND - 448)) | (1L << (INTERNALLENGTH - 448)) | (1L << (JSON - 448)) | (1L << (LC_COLLATE - 448)) | (1L << (LC_CTYPE - 448)) | (1L << (LEFTARG - 448)) | (1L << (LEXIZE - 448)) | (1L << (LEXTYPES - 448)) | (1L << (LIST - 448)) | (1L << (LOCALE - 448)) | (1L << (LOGIN - 448)) | (1L << (MAIN - 448)) | (1L << (MERGES - 448)) | (1L << (MFINALFUNC - 448)) | (1L << (MFINALFUNC_EXTRA - 448)) | (1L << (MFINALFUNC_MODIFY - 448)) | (1L << (MINITCOND - 448)) | (1L << (MINVFUNC - 448)) | (1L << (MODULUS - 448)) | (1L << (MSFUNC - 448)) | (1L << (MSSPACE - 448)) | (1L << (MSTYPE - 448)) | (1L << (NEGATOR - 448)) | (1L << (NOBYPASSRLS - 448)) | (1L << (NOCREATEDB - 448)) | (1L << (NOCREATEROLE - 448)) | (1L << (NOINHERIT - 448)) | (1L << (NOLOGIN - 448)) | (1L << (NOREPLICATION - 448)) | (1L << (NOSUPERUSER - 448)) | (1L << (OUTPUT - 448)) | (1L << (PASSEDBYVALUE - 448)) | (1L << (PATH - 448)) | (1L << (PERMISSIVE - 448)) | (1L << (PLAIN - 448)) | (1L << (PREFERRED - 448)) | (1L << (PROVIDER - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (READ_ONLY - 512)) | (1L << (READ_WRITE - 512)) | (1L << (RECEIVE - 512)) | (1L << (REMAINDER - 512)) | (1L << (REPLICATION - 512)) | (1L << (RESTRICTED - 512)) | (1L << (RESTRICTIVE - 512)) | (1L << (RIGHTARG - 512)) | (1L << (SAFE - 512)) | (1L << (SEND - 512)) | (1L << (SERIALFUNC - 512)) | (1L << (SETTINGS - 512)) | (1L << (SFUNC - 512)) | (1L << (SHAREABLE - 512)) | (1L << (SKIP_LOCKED - 512)) | (1L << (SORTOP - 512)) | (1L << (SSPACE - 512)) | (1L << (STYPE - 512)) | (1L << (SUBTYPE_DIFF - 512)) | (1L << (SUBTYPE_OPCLASS - 512)) | (1L << (SUBTYPE - 512)) | (1L << (SUMMARY - 512)) | (1L << (SUPERUSER - 512)) | (1L << (TIMING - 512)) | (1L << (TYPMOD_IN - 512)) | (1L << (TYPMOD_OUT - 512)) | (1L << (UNSAFE - 512)) | (1L << (USAGE - 512)) | (1L << (VARIABLE - 512)) | (1L << (YAML - 512)) | (1L << (ALIAS - 512)) | (1L << (ASSERT - 512)) | (1L << (CONSTANT - 512)) | (1L << (DATATYPE - 512)) | (1L << (DEBUG - 512)) | (1L << (DETAIL - 512)) | (1L << (DIAGNOSTICS - 512)) | (1L << (ELSEIF - 512)) | (1L << (ELSIF - 512)) | (1L << (ERRCODE - 512)) | (1L << (EXIT - 512)) | (1L << (EXCEPTION - 512)) | (1L << (FOREACH - 512)) | (1L << (GET - 512)) | (1L << (HINT - 512)) | (1L << (INFO - 512)) | (1L << (LOG - 512)) | (1L << (LOOP - 512)) | (1L << (MESSAGE - 512)) | (1L << (NOTICE - 512)) | (1L << (OPEN - 512)) | (1L << (PERFORM - 512)) | (1L << (QUERY - 512)) | (1L << (RAISE - 512)) | (1L << (RECORD - 512)) | (1L << (RETURN - 512)) | (1L << (REVERSE - 512)) | (1L << (ROWTYPE - 512)) | (1L << (SLICE - 512)) | (1L << (SQLSTATE - 512)) | (1L << (STACKED - 512)) | (1L << (WARNING - 512)) | (1L << (WHILE - 512)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (LEFT_PAREN - 585)) | (1L << (PLUS - 585)) | (1L << (MINUS - 585)) | (1L << (MULTIPLY - 585)) | (1L << (LESS_LESS - 585)) | (1L << (GREATER_GREATER - 585)) | (1L << (HASH_SIGN - 585)) | (1L << (OP_CHARS - 585)) | (1L << (NUMBER_LITERAL - 585)) | (1L << (REAL_NUMBER - 585)) | (1L << (DOLLAR_NUMBER - 585)) | (1L << (Identifier - 585)) | (1L << (QuotedIdentifier - 585)) | (1L << (Character_String_Literal - 585)) | (1L << (BeginDollarStringConstant - 585)))) != 0)) {
					{
					setState(5228);
					vex(0);
					}
				}

				setState(5231);
				match(RIGHT_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_function_statementContext extends ParserRuleContext {
		public Schema_qualified_nameContext name;
		public TerminalNode FUNCTION() { return getToken(PLpgSQLParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(PLpgSQLParser.PROCEDURE, 0); }
		public TerminalNode AGGREGATE() { return getToken(PLpgSQLParser.AGGREGATE, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Function_argsContext function_args() {
			return getRuleContext(Function_argsContext.class,0);
		}
		public Cascade_restrictContext cascade_restrict() {
			return getRuleContext(Cascade_restrictContext.class,0);
		}
		public Drop_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_function_statement; }
	}

	public final Drop_function_statementContext drop_function_statement() throws RecognitionException {
		Drop_function_statementContext _localctx = new Drop_function_statementContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_drop_function_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5234);
			_la = _input.LA(1);
			if ( !(_la==AGGREGATE || _la==FUNCTION || _la==PROCEDURE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5236);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,643,_ctx) ) {
			case 1:
				{
				setState(5235);
				if_exists();
				}
				break;
			}
			setState(5238);
			((Drop_function_statementContext)_localctx).name = schema_qualified_name();
			setState(5240);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(5239);
				function_args();
				}
			}

			setState(5243);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5242);
				cascade_restrict();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_trigger_statementContext extends ParserRuleContext {
		public IdentifierContext name;
		public Schema_qualified_nameContext table_name;
		public TerminalNode TRIGGER() { return getToken(PLpgSQLParser.TRIGGER, 0); }
		public TerminalNode ON() { return getToken(PLpgSQLParser.ON, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Cascade_restrictContext cascade_restrict() {
			return getRuleContext(Cascade_restrictContext.class,0);
		}
		public Drop_trigger_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_trigger_statement; }
	}

	public final Drop_trigger_statementContext drop_trigger_statement() throws RecognitionException {
		Drop_trigger_statementContext _localctx = new Drop_trigger_statementContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_drop_trigger_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5245);
			match(TRIGGER);
			setState(5247);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,646,_ctx) ) {
			case 1:
				{
				setState(5246);
				if_exists();
				}
				break;
			}
			setState(5249);
			((Drop_trigger_statementContext)_localctx).name = identifier();
			setState(5250);
			match(ON);
			setState(5251);
			((Drop_trigger_statementContext)_localctx).table_name = schema_qualified_name();
			setState(5253);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5252);
				cascade_restrict();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_rule_statementContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode RULE() { return getToken(PLpgSQLParser.RULE, 0); }
		public TerminalNode ON() { return getToken(PLpgSQLParser.ON, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Cascade_restrictContext cascade_restrict() {
			return getRuleContext(Cascade_restrictContext.class,0);
		}
		public Drop_rule_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_rule_statement; }
	}

	public final Drop_rule_statementContext drop_rule_statement() throws RecognitionException {
		Drop_rule_statementContext _localctx = new Drop_rule_statementContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_drop_rule_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5255);
			match(RULE);
			setState(5257);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,648,_ctx) ) {
			case 1:
				{
				setState(5256);
				if_exists();
				}
				break;
			}
			setState(5259);
			((Drop_rule_statementContext)_localctx).name = identifier();
			setState(5260);
			match(ON);
			setState(5261);
			schema_qualified_name();
			setState(5263);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5262);
				cascade_restrict();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_statementsContext extends ParserRuleContext {
		public If_exist_names_restrict_cascadeContext if_exist_names_restrict_cascade() {
			return getRuleContext(If_exist_names_restrict_cascadeContext.class,0);
		}
		public TerminalNode ACCESS() { return getToken(PLpgSQLParser.ACCESS, 0); }
		public TerminalNode METHOD() { return getToken(PLpgSQLParser.METHOD, 0); }
		public TerminalNode COLLATION() { return getToken(PLpgSQLParser.COLLATION, 0); }
		public TerminalNode CONVERSION() { return getToken(PLpgSQLParser.CONVERSION, 0); }
		public TerminalNode DATABASE() { return getToken(PLpgSQLParser.DATABASE, 0); }
		public TerminalNode DOMAIN() { return getToken(PLpgSQLParser.DOMAIN, 0); }
		public TerminalNode EVENT() { return getToken(PLpgSQLParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(PLpgSQLParser.TRIGGER, 0); }
		public TerminalNode EXTENSION() { return getToken(PLpgSQLParser.EXTENSION, 0); }
		public TerminalNode GROUP() { return getToken(PLpgSQLParser.GROUP, 0); }
		public TerminalNode TABLE() { return getToken(PLpgSQLParser.TABLE, 0); }
		public TerminalNode FOREIGN() { return getToken(PLpgSQLParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(PLpgSQLParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(PLpgSQLParser.WRAPPER, 0); }
		public TerminalNode INDEX() { return getToken(PLpgSQLParser.INDEX, 0); }
		public TerminalNode VIEW() { return getToken(PLpgSQLParser.VIEW, 0); }
		public TerminalNode LANGUAGE() { return getToken(PLpgSQLParser.LANGUAGE, 0); }
		public TerminalNode PUBLICATION() { return getToken(PLpgSQLParser.PUBLICATION, 0); }
		public TerminalNode ROLE() { return getToken(PLpgSQLParser.ROLE, 0); }
		public TerminalNode SCHEMA() { return getToken(PLpgSQLParser.SCHEMA, 0); }
		public TerminalNode SEQUENCE() { return getToken(PLpgSQLParser.SEQUENCE, 0); }
		public TerminalNode SERVER() { return getToken(PLpgSQLParser.SERVER, 0); }
		public TerminalNode STATISTICS() { return getToken(PLpgSQLParser.STATISTICS, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PLpgSQLParser.SUBSCRIPTION, 0); }
		public TerminalNode TABLESPACE() { return getToken(PLpgSQLParser.TABLESPACE, 0); }
		public TerminalNode TYPE() { return getToken(PLpgSQLParser.TYPE, 0); }
		public TerminalNode TEXT() { return getToken(PLpgSQLParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(PLpgSQLParser.SEARCH, 0); }
		public TerminalNode USER() { return getToken(PLpgSQLParser.USER, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PLpgSQLParser.CONFIGURATION, 0); }
		public TerminalNode DICTIONARY() { return getToken(PLpgSQLParser.DICTIONARY, 0); }
		public TerminalNode PARSER() { return getToken(PLpgSQLParser.PARSER, 0); }
		public TerminalNode TEMPLATE() { return getToken(PLpgSQLParser.TEMPLATE, 0); }
		public TerminalNode CONCURRENTLY() { return getToken(PLpgSQLParser.CONCURRENTLY, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PLpgSQLParser.MATERIALIZED, 0); }
		public TerminalNode PROCEDURAL() { return getToken(PLpgSQLParser.PROCEDURAL, 0); }
		public Drop_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_statements; }
	}

	public final Drop_statementsContext drop_statements() throws RecognitionException {
		Drop_statementsContext _localctx = new Drop_statementsContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_drop_statements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5307);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,654,_ctx) ) {
			case 1:
				{
				setState(5265);
				match(ACCESS);
				setState(5266);
				match(METHOD);
				}
				break;
			case 2:
				{
				setState(5267);
				match(COLLATION);
				}
				break;
			case 3:
				{
				setState(5268);
				match(CONVERSION);
				}
				break;
			case 4:
				{
				setState(5269);
				match(DATABASE);
				}
				break;
			case 5:
				{
				setState(5270);
				match(DOMAIN);
				}
				break;
			case 6:
				{
				setState(5271);
				match(EVENT);
				setState(5272);
				match(TRIGGER);
				}
				break;
			case 7:
				{
				setState(5273);
				match(EXTENSION);
				}
				break;
			case 8:
				{
				setState(5274);
				match(GROUP);
				}
				break;
			case 9:
				{
				setState(5276);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOREIGN) {
					{
					setState(5275);
					match(FOREIGN);
					}
				}

				setState(5278);
				match(TABLE);
				}
				break;
			case 10:
				{
				setState(5279);
				match(FOREIGN);
				setState(5280);
				match(DATA);
				setState(5281);
				match(WRAPPER);
				}
				break;
			case 11:
				{
				setState(5282);
				match(INDEX);
				setState(5284);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONCURRENTLY) {
					{
					setState(5283);
					match(CONCURRENTLY);
					}
				}

				}
				break;
			case 12:
				{
				setState(5287);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MATERIALIZED) {
					{
					setState(5286);
					match(MATERIALIZED);
					}
				}

				setState(5289);
				match(VIEW);
				}
				break;
			case 13:
				{
				setState(5291);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROCEDURAL) {
					{
					setState(5290);
					match(PROCEDURAL);
					}
				}

				setState(5293);
				match(LANGUAGE);
				}
				break;
			case 14:
				{
				setState(5294);
				match(PUBLICATION);
				}
				break;
			case 15:
				{
				setState(5295);
				match(ROLE);
				}
				break;
			case 16:
				{
				setState(5296);
				match(SCHEMA);
				}
				break;
			case 17:
				{
				setState(5297);
				match(SEQUENCE);
				}
				break;
			case 18:
				{
				setState(5298);
				match(SERVER);
				}
				break;
			case 19:
				{
				setState(5299);
				match(STATISTICS);
				}
				break;
			case 20:
				{
				setState(5300);
				match(SUBSCRIPTION);
				}
				break;
			case 21:
				{
				setState(5301);
				match(TABLESPACE);
				}
				break;
			case 22:
				{
				setState(5302);
				match(TYPE);
				}
				break;
			case 23:
				{
				setState(5303);
				match(TEXT);
				setState(5304);
				match(SEARCH);
				setState(5305);
				_la = _input.LA(1);
				if ( !(_la==CONFIGURATION || _la==DICTIONARY || _la==PARSER || _la==TEMPLATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 24:
				{
				setState(5306);
				match(USER);
				}
				break;
			}
			setState(5309);
			if_exist_names_restrict_cascade();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class If_exist_names_restrict_cascadeContext extends ParserRuleContext {
		public Names_referencesContext names_references() {
			return getRuleContext(Names_referencesContext.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Cascade_restrictContext cascade_restrict() {
			return getRuleContext(Cascade_restrictContext.class,0);
		}
		public If_exist_names_restrict_cascadeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_if_exist_names_restrict_cascade; }
	}

	public final If_exist_names_restrict_cascadeContext if_exist_names_restrict_cascade() throws RecognitionException {
		If_exist_names_restrict_cascadeContext _localctx = new If_exist_names_restrict_cascadeContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_if_exist_names_restrict_cascade);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5312);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,655,_ctx) ) {
			case 1:
				{
				setState(5311);
				if_exists();
				}
				break;
			}
			setState(5314);
			names_references();
			setState(5316);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5315);
				cascade_restrict();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Id_tokenContext extends ParserRuleContext {
		public TerminalNode Identifier() { return getToken(PLpgSQLParser.Identifier, 0); }
		public TerminalNode QuotedIdentifier() { return getToken(PLpgSQLParser.QuotedIdentifier, 0); }
		public Tokens_nonkeywordContext tokens_nonkeyword() {
			return getRuleContext(Tokens_nonkeywordContext.class,0);
		}
		public Id_tokenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id_token; }
	}

	public final Id_tokenContext id_token() throws RecognitionException {
		Id_tokenContext _localctx = new Id_tokenContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_id_token);
		try {
			setState(5321);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Identifier:
				enterOuterAlt(_localctx, 1);
				{
				setState(5318);
				match(Identifier);
				}
				break;
			case QuotedIdentifier:
				enterOuterAlt(_localctx, 2);
				{
				setState(5319);
				match(QuotedIdentifier);
				}
				break;
			case ALIGNMENT:
			case BASETYPE:
			case BUFFERS:
			case BYPASSRLS:
			case CANONICAL:
			case CATEGORY:
			case COLLATABLE:
			case COMBINEFUNC:
			case COMMUTATOR:
			case CONNECT:
			case COSTS:
			case CREATEDB:
			case CREATEROLE:
			case DESERIALFUNC:
			case DETERMINISTIC:
			case DISABLE_PAGE_SKIPPING:
			case ELEMENT:
			case EXTENDED:
			case FINALFUNC:
			case FINALFUNC_EXTRA:
			case FINALFUNC_MODIFY:
			case FORCE_NOT_NULL:
			case FORCE_NULL:
			case FORCE_QUOTE:
			case FORMAT:
			case GETTOKEN:
			case HASH:
			case HASHES:
			case HEADLINE:
			case HYPOTHETICAL:
			case INDEX_CLEANUP:
			case INIT:
			case INITCOND:
			case INTERNALLENGTH:
			case JSON:
			case LC_COLLATE:
			case LC_CTYPE:
			case LEFTARG:
			case LEXIZE:
			case LEXTYPES:
			case LIST:
			case LOCALE:
			case LOGIN:
			case MAIN:
			case MERGES:
			case MFINALFUNC:
			case MFINALFUNC_EXTRA:
			case MFINALFUNC_MODIFY:
			case MINITCOND:
			case MINVFUNC:
			case MODULUS:
			case MSFUNC:
			case MSSPACE:
			case MSTYPE:
			case NEGATOR:
			case NOBYPASSRLS:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOREPLICATION:
			case NOSUPERUSER:
			case OUTPUT:
			case PASSEDBYVALUE:
			case PATH:
			case PERMISSIVE:
			case PLAIN:
			case PREFERRED:
			case PROVIDER:
			case READ_ONLY:
			case READ_WRITE:
			case RECEIVE:
			case REMAINDER:
			case REPLICATION:
			case RESTRICTED:
			case RESTRICTIVE:
			case RIGHTARG:
			case SAFE:
			case SEND:
			case SERIALFUNC:
			case SETTINGS:
			case SFUNC:
			case SHAREABLE:
			case SKIP_LOCKED:
			case SORTOP:
			case SSPACE:
			case STYPE:
			case SUBTYPE_DIFF:
			case SUBTYPE_OPCLASS:
			case SUBTYPE:
			case SUMMARY:
			case SUPERUSER:
			case TIMING:
			case TYPMOD_IN:
			case TYPMOD_OUT:
			case UNSAFE:
			case USAGE:
			case VARIABLE:
			case YAML:
			case ALIAS:
			case ASSERT:
			case CONSTANT:
			case DATATYPE:
			case DEBUG:
			case DETAIL:
			case DIAGNOSTICS:
			case ELSEIF:
			case ELSIF:
			case ERRCODE:
			case EXIT:
			case EXCEPTION:
			case FOREACH:
			case GET:
			case HINT:
			case INFO:
			case LOG:
			case LOOP:
			case MESSAGE:
			case NOTICE:
			case OPEN:
			case PERFORM:
			case QUERY:
			case RAISE:
			case RECORD:
			case RETURN:
			case REVERSE:
			case ROWTYPE:
			case SLICE:
			case SQLSTATE:
			case STACKED:
			case WARNING:
			case WHILE:
				enterOuterAlt(_localctx, 3);
				{
				setState(5320);
				tokens_nonkeyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierContext extends ParserRuleContext {
		public Id_tokenContext id_token() {
			return getRuleContext(Id_tokenContext.class,0);
		}
		public Tokens_nonreservedContext tokens_nonreserved() {
			return getRuleContext(Tokens_nonreservedContext.class,0);
		}
		public Tokens_nonreserved_except_function_typeContext tokens_nonreserved_except_function_type() {
			return getRuleContext(Tokens_nonreserved_except_function_typeContext.class,0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_identifier);
		try {
			setState(5326);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALIGNMENT:
			case BASETYPE:
			case BUFFERS:
			case BYPASSRLS:
			case CANONICAL:
			case CATEGORY:
			case COLLATABLE:
			case COMBINEFUNC:
			case COMMUTATOR:
			case CONNECT:
			case COSTS:
			case CREATEDB:
			case CREATEROLE:
			case DESERIALFUNC:
			case DETERMINISTIC:
			case DISABLE_PAGE_SKIPPING:
			case ELEMENT:
			case EXTENDED:
			case FINALFUNC:
			case FINALFUNC_EXTRA:
			case FINALFUNC_MODIFY:
			case FORCE_NOT_NULL:
			case FORCE_NULL:
			case FORCE_QUOTE:
			case FORMAT:
			case GETTOKEN:
			case HASH:
			case HASHES:
			case HEADLINE:
			case HYPOTHETICAL:
			case INDEX_CLEANUP:
			case INIT:
			case INITCOND:
			case INTERNALLENGTH:
			case JSON:
			case LC_COLLATE:
			case LC_CTYPE:
			case LEFTARG:
			case LEXIZE:
			case LEXTYPES:
			case LIST:
			case LOCALE:
			case LOGIN:
			case MAIN:
			case MERGES:
			case MFINALFUNC:
			case MFINALFUNC_EXTRA:
			case MFINALFUNC_MODIFY:
			case MINITCOND:
			case MINVFUNC:
			case MODULUS:
			case MSFUNC:
			case MSSPACE:
			case MSTYPE:
			case NEGATOR:
			case NOBYPASSRLS:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOREPLICATION:
			case NOSUPERUSER:
			case OUTPUT:
			case PASSEDBYVALUE:
			case PATH:
			case PERMISSIVE:
			case PLAIN:
			case PREFERRED:
			case PROVIDER:
			case READ_ONLY:
			case READ_WRITE:
			case RECEIVE:
			case REMAINDER:
			case REPLICATION:
			case RESTRICTED:
			case RESTRICTIVE:
			case RIGHTARG:
			case SAFE:
			case SEND:
			case SERIALFUNC:
			case SETTINGS:
			case SFUNC:
			case SHAREABLE:
			case SKIP_LOCKED:
			case SORTOP:
			case SSPACE:
			case STYPE:
			case SUBTYPE_DIFF:
			case SUBTYPE_OPCLASS:
			case SUBTYPE:
			case SUMMARY:
			case SUPERUSER:
			case TIMING:
			case TYPMOD_IN:
			case TYPMOD_OUT:
			case UNSAFE:
			case USAGE:
			case VARIABLE:
			case YAML:
			case ALIAS:
			case ASSERT:
			case CONSTANT:
			case DATATYPE:
			case DEBUG:
			case DETAIL:
			case DIAGNOSTICS:
			case ELSEIF:
			case ELSIF:
			case ERRCODE:
			case EXIT:
			case EXCEPTION:
			case FOREACH:
			case GET:
			case HINT:
			case INFO:
			case LOG:
			case LOOP:
			case MESSAGE:
			case NOTICE:
			case OPEN:
			case PERFORM:
			case QUERY:
			case RAISE:
			case RECORD:
			case RETURN:
			case REVERSE:
			case ROWTYPE:
			case SLICE:
			case SQLSTATE:
			case STACKED:
			case WARNING:
			case WHILE:
			case Identifier:
			case QuotedIdentifier:
				enterOuterAlt(_localctx, 1);
				{
				setState(5323);
				id_token();
				}
				break;
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BY:
			case CACHE:
			case CALL:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COLUMNS:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONFLICT:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CUBE:
			case CURRENT:
			case CURSOR:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DEPENDS:
			case DETACH:
			case DICTIONARY:
			case DISABLE:
			case DISCARD:
			case DOCUMENT:
			case DOMAIN:
			case DOUBLE:
			case DROP:
			case EACH:
			case ENABLE:
			case ENCODING:
			case ENCRYPTED:
			case ENUM:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GENERATED:
			case GLOBAL:
			case GRANTED:
			case GROUPS:
			case HANDLER:
			case HEADER:
			case HOLD:
			case HOUR:
			case IDENTITY:
			case IF:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT:
			case IMPORT:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCKED:
			case LOGGED:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case METHOD:
			case MINUTE:
			case MINVALUE:
			case MODE:
			case MONTH:
			case MOVE:
			case NAME:
			case NAMES:
			case NEW:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS:
			case OBJECT:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OVER:
			case OVERRIDING:
			case OWNED:
			case OWNER:
			case PARALLEL:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POLICY:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROCEDURES:
			case PROGRAM:
			case PUBLICATION:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINES:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMAS:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SKIP_:
			case SNAPSHOT:
			case SQL:
			case STABLE:
			case STANDALONE:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STORED:
			case STRICT:
			case STRIP:
			case SUBSCRIPTION:
			case SUPPORT:
			case SYSID:
			case SYSTEM:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT:
			case TIES:
			case TRANSACTION:
			case TRANSFORM:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE:
			case VARYING:
			case VERSION:
			case VIEW:
			case VIEWS:
			case VOLATILE:
			case WHITESPACE:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML:
			case YEAR:
			case YES:
			case ZONE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5324);
				tokens_nonreserved();
				}
				break;
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL:
			case EXISTS:
			case EXTRACT:
			case FLOAT:
			case GREATEST:
			case GROUPING:
			case INOUT:
			case INT:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
				enterOuterAlt(_localctx, 3);
				{
				setState(5325);
				tokens_nonreserved_except_function_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Identifier_nontypeContext extends ParserRuleContext {
		public Id_tokenContext id_token() {
			return getRuleContext(Id_tokenContext.class,0);
		}
		public Tokens_nonreservedContext tokens_nonreserved() {
			return getRuleContext(Tokens_nonreservedContext.class,0);
		}
		public Tokens_reserved_except_function_typeContext tokens_reserved_except_function_type() {
			return getRuleContext(Tokens_reserved_except_function_typeContext.class,0);
		}
		public Identifier_nontypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier_nontype; }
	}

	public final Identifier_nontypeContext identifier_nontype() throws RecognitionException {
		Identifier_nontypeContext _localctx = new Identifier_nontypeContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_identifier_nontype);
		try {
			setState(5331);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALIGNMENT:
			case BASETYPE:
			case BUFFERS:
			case BYPASSRLS:
			case CANONICAL:
			case CATEGORY:
			case COLLATABLE:
			case COMBINEFUNC:
			case COMMUTATOR:
			case CONNECT:
			case COSTS:
			case CREATEDB:
			case CREATEROLE:
			case DESERIALFUNC:
			case DETERMINISTIC:
			case DISABLE_PAGE_SKIPPING:
			case ELEMENT:
			case EXTENDED:
			case FINALFUNC:
			case FINALFUNC_EXTRA:
			case FINALFUNC_MODIFY:
			case FORCE_NOT_NULL:
			case FORCE_NULL:
			case FORCE_QUOTE:
			case FORMAT:
			case GETTOKEN:
			case HASH:
			case HASHES:
			case HEADLINE:
			case HYPOTHETICAL:
			case INDEX_CLEANUP:
			case INIT:
			case INITCOND:
			case INTERNALLENGTH:
			case JSON:
			case LC_COLLATE:
			case LC_CTYPE:
			case LEFTARG:
			case LEXIZE:
			case LEXTYPES:
			case LIST:
			case LOCALE:
			case LOGIN:
			case MAIN:
			case MERGES:
			case MFINALFUNC:
			case MFINALFUNC_EXTRA:
			case MFINALFUNC_MODIFY:
			case MINITCOND:
			case MINVFUNC:
			case MODULUS:
			case MSFUNC:
			case MSSPACE:
			case MSTYPE:
			case NEGATOR:
			case NOBYPASSRLS:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOREPLICATION:
			case NOSUPERUSER:
			case OUTPUT:
			case PASSEDBYVALUE:
			case PATH:
			case PERMISSIVE:
			case PLAIN:
			case PREFERRED:
			case PROVIDER:
			case READ_ONLY:
			case READ_WRITE:
			case RECEIVE:
			case REMAINDER:
			case REPLICATION:
			case RESTRICTED:
			case RESTRICTIVE:
			case RIGHTARG:
			case SAFE:
			case SEND:
			case SERIALFUNC:
			case SETTINGS:
			case SFUNC:
			case SHAREABLE:
			case SKIP_LOCKED:
			case SORTOP:
			case SSPACE:
			case STYPE:
			case SUBTYPE_DIFF:
			case SUBTYPE_OPCLASS:
			case SUBTYPE:
			case SUMMARY:
			case SUPERUSER:
			case TIMING:
			case TYPMOD_IN:
			case TYPMOD_OUT:
			case UNSAFE:
			case USAGE:
			case VARIABLE:
			case YAML:
			case ALIAS:
			case ASSERT:
			case CONSTANT:
			case DATATYPE:
			case DEBUG:
			case DETAIL:
			case DIAGNOSTICS:
			case ELSEIF:
			case ELSIF:
			case ERRCODE:
			case EXIT:
			case EXCEPTION:
			case FOREACH:
			case GET:
			case HINT:
			case INFO:
			case LOG:
			case LOOP:
			case MESSAGE:
			case NOTICE:
			case OPEN:
			case PERFORM:
			case QUERY:
			case RAISE:
			case RECORD:
			case RETURN:
			case REVERSE:
			case ROWTYPE:
			case SLICE:
			case SQLSTATE:
			case STACKED:
			case WARNING:
			case WHILE:
			case Identifier:
			case QuotedIdentifier:
				enterOuterAlt(_localctx, 1);
				{
				setState(5328);
				id_token();
				}
				break;
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BY:
			case CACHE:
			case CALL:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COLUMNS:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONFLICT:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CUBE:
			case CURRENT:
			case CURSOR:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DEPENDS:
			case DETACH:
			case DICTIONARY:
			case DISABLE:
			case DISCARD:
			case DOCUMENT:
			case DOMAIN:
			case DOUBLE:
			case DROP:
			case EACH:
			case ENABLE:
			case ENCODING:
			case ENCRYPTED:
			case ENUM:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GENERATED:
			case GLOBAL:
			case GRANTED:
			case GROUPS:
			case HANDLER:
			case HEADER:
			case HOLD:
			case HOUR:
			case IDENTITY:
			case IF:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT:
			case IMPORT:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCKED:
			case LOGGED:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case METHOD:
			case MINUTE:
			case MINVALUE:
			case MODE:
			case MONTH:
			case MOVE:
			case NAME:
			case NAMES:
			case NEW:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS:
			case OBJECT:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OVER:
			case OVERRIDING:
			case OWNED:
			case OWNER:
			case PARALLEL:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POLICY:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROCEDURES:
			case PROGRAM:
			case PUBLICATION:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINES:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMAS:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SKIP_:
			case SNAPSHOT:
			case SQL:
			case STABLE:
			case STANDALONE:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STORED:
			case STRICT:
			case STRIP:
			case SUBSCRIPTION:
			case SUPPORT:
			case SYSID:
			case SYSTEM:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT:
			case TIES:
			case TRANSACTION:
			case TRANSFORM:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE:
			case VARYING:
			case VERSION:
			case VIEW:
			case VIEWS:
			case VOLATILE:
			case WHITESPACE:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML:
			case YEAR:
			case YES:
			case ZONE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5329);
				tokens_nonreserved();
				}
				break;
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case TABLESAMPLE:
			case VERBOSE:
				enterOuterAlt(_localctx, 3);
				{
				setState(5330);
				tokens_reserved_except_function_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Col_labelContext extends ParserRuleContext {
		public Id_tokenContext id_token() {
			return getRuleContext(Id_tokenContext.class,0);
		}
		public Tokens_reservedContext tokens_reserved() {
			return getRuleContext(Tokens_reservedContext.class,0);
		}
		public Tokens_nonreservedContext tokens_nonreserved() {
			return getRuleContext(Tokens_nonreservedContext.class,0);
		}
		public Tokens_reserved_except_function_typeContext tokens_reserved_except_function_type() {
			return getRuleContext(Tokens_reserved_except_function_typeContext.class,0);
		}
		public Tokens_nonreserved_except_function_typeContext tokens_nonreserved_except_function_type() {
			return getRuleContext(Tokens_nonreserved_except_function_typeContext.class,0);
		}
		public Col_labelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_col_label; }
	}

	public final Col_labelContext col_label() throws RecognitionException {
		Col_labelContext _localctx = new Col_labelContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_col_label);
		try {
			setState(5338);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALIGNMENT:
			case BASETYPE:
			case BUFFERS:
			case BYPASSRLS:
			case CANONICAL:
			case CATEGORY:
			case COLLATABLE:
			case COMBINEFUNC:
			case COMMUTATOR:
			case CONNECT:
			case COSTS:
			case CREATEDB:
			case CREATEROLE:
			case DESERIALFUNC:
			case DETERMINISTIC:
			case DISABLE_PAGE_SKIPPING:
			case ELEMENT:
			case EXTENDED:
			case FINALFUNC:
			case FINALFUNC_EXTRA:
			case FINALFUNC_MODIFY:
			case FORCE_NOT_NULL:
			case FORCE_NULL:
			case FORCE_QUOTE:
			case FORMAT:
			case GETTOKEN:
			case HASH:
			case HASHES:
			case HEADLINE:
			case HYPOTHETICAL:
			case INDEX_CLEANUP:
			case INIT:
			case INITCOND:
			case INTERNALLENGTH:
			case JSON:
			case LC_COLLATE:
			case LC_CTYPE:
			case LEFTARG:
			case LEXIZE:
			case LEXTYPES:
			case LIST:
			case LOCALE:
			case LOGIN:
			case MAIN:
			case MERGES:
			case MFINALFUNC:
			case MFINALFUNC_EXTRA:
			case MFINALFUNC_MODIFY:
			case MINITCOND:
			case MINVFUNC:
			case MODULUS:
			case MSFUNC:
			case MSSPACE:
			case MSTYPE:
			case NEGATOR:
			case NOBYPASSRLS:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOREPLICATION:
			case NOSUPERUSER:
			case OUTPUT:
			case PASSEDBYVALUE:
			case PATH:
			case PERMISSIVE:
			case PLAIN:
			case PREFERRED:
			case PROVIDER:
			case READ_ONLY:
			case READ_WRITE:
			case RECEIVE:
			case REMAINDER:
			case REPLICATION:
			case RESTRICTED:
			case RESTRICTIVE:
			case RIGHTARG:
			case SAFE:
			case SEND:
			case SERIALFUNC:
			case SETTINGS:
			case SFUNC:
			case SHAREABLE:
			case SKIP_LOCKED:
			case SORTOP:
			case SSPACE:
			case STYPE:
			case SUBTYPE_DIFF:
			case SUBTYPE_OPCLASS:
			case SUBTYPE:
			case SUMMARY:
			case SUPERUSER:
			case TIMING:
			case TYPMOD_IN:
			case TYPMOD_OUT:
			case UNSAFE:
			case USAGE:
			case VARIABLE:
			case YAML:
			case ALIAS:
			case ASSERT:
			case CONSTANT:
			case DATATYPE:
			case DEBUG:
			case DETAIL:
			case DIAGNOSTICS:
			case ELSEIF:
			case ELSIF:
			case ERRCODE:
			case EXIT:
			case EXCEPTION:
			case FOREACH:
			case GET:
			case HINT:
			case INFO:
			case LOG:
			case LOOP:
			case MESSAGE:
			case NOTICE:
			case OPEN:
			case PERFORM:
			case QUERY:
			case RAISE:
			case RECORD:
			case RETURN:
			case REVERSE:
			case ROWTYPE:
			case SLICE:
			case SQLSTATE:
			case STACKED:
			case WARNING:
			case WHILE:
			case Identifier:
			case QuotedIdentifier:
				enterOuterAlt(_localctx, 1);
				{
				setState(5333);
				id_token();
				}
				break;
			case ALL:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASYMMETRIC:
			case BOTH:
			case CASE:
			case CAST:
			case CHECK:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CREATE:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DEFERRABLE:
			case DESC:
			case DISTINCT:
			case DO:
			case ELSE:
			case END:
			case EXCEPT:
			case FALSE:
			case FETCH:
			case FOR:
			case FOREIGN:
			case FROM:
			case GRANT:
			case GROUP:
			case HAVING:
			case IN:
			case INITIALLY:
			case INTERSECT:
			case INTO:
			case LATERAL:
			case LEADING:
			case LIMIT:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL:
			case OFFSET:
			case ON:
			case ONLY:
			case OR:
			case ORDER:
			case PLACING:
			case PRIMARY:
			case REFERENCES:
			case RETURNING:
			case SELECT:
			case SESSION_USER:
			case SOME:
			case SYMMETRIC:
			case TABLE:
			case THEN:
			case TO:
			case TRAILING:
			case TRUE:
			case UNION:
			case UNIQUE:
			case USER:
			case USING:
			case VARIADIC:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
				enterOuterAlt(_localctx, 2);
				{
				setState(5334);
				tokens_reserved();
				}
				break;
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BY:
			case CACHE:
			case CALL:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COLUMNS:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONFLICT:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CUBE:
			case CURRENT:
			case CURSOR:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DEPENDS:
			case DETACH:
			case DICTIONARY:
			case DISABLE:
			case DISCARD:
			case DOCUMENT:
			case DOMAIN:
			case DOUBLE:
			case DROP:
			case EACH:
			case ENABLE:
			case ENCODING:
			case ENCRYPTED:
			case ENUM:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GENERATED:
			case GLOBAL:
			case GRANTED:
			case GROUPS:
			case HANDLER:
			case HEADER:
			case HOLD:
			case HOUR:
			case IDENTITY:
			case IF:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT:
			case IMPORT:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCKED:
			case LOGGED:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case METHOD:
			case MINUTE:
			case MINVALUE:
			case MODE:
			case MONTH:
			case MOVE:
			case NAME:
			case NAMES:
			case NEW:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS:
			case OBJECT:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OVER:
			case OVERRIDING:
			case OWNED:
			case OWNER:
			case PARALLEL:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POLICY:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROCEDURES:
			case PROGRAM:
			case PUBLICATION:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINES:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMAS:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SKIP_:
			case SNAPSHOT:
			case SQL:
			case STABLE:
			case STANDALONE:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STORED:
			case STRICT:
			case STRIP:
			case SUBSCRIPTION:
			case SUPPORT:
			case SYSID:
			case SYSTEM:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT:
			case TIES:
			case TRANSACTION:
			case TRANSFORM:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE:
			case VARYING:
			case VERSION:
			case VIEW:
			case VIEWS:
			case VOLATILE:
			case WHITESPACE:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML:
			case YEAR:
			case YES:
			case ZONE:
				enterOuterAlt(_localctx, 3);
				{
				setState(5335);
				tokens_nonreserved();
				}
				break;
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case TABLESAMPLE:
			case VERBOSE:
				enterOuterAlt(_localctx, 4);
				{
				setState(5336);
				tokens_reserved_except_function_type();
				}
				break;
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL:
			case EXISTS:
			case EXTRACT:
			case FLOAT:
			case GREATEST:
			case GROUPING:
			case INOUT:
			case INT:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
				enterOuterAlt(_localctx, 5);
				{
				setState(5337);
				tokens_nonreserved_except_function_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tokens_nonreservedContext extends ParserRuleContext {
		public TerminalNode ABORT() { return getToken(PLpgSQLParser.ABORT, 0); }
		public TerminalNode ABSOLUTE() { return getToken(PLpgSQLParser.ABSOLUTE, 0); }
		public TerminalNode ACCESS() { return getToken(PLpgSQLParser.ACCESS, 0); }
		public TerminalNode ACTION() { return getToken(PLpgSQLParser.ACTION, 0); }
		public TerminalNode ADD() { return getToken(PLpgSQLParser.ADD, 0); }
		public TerminalNode ADMIN() { return getToken(PLpgSQLParser.ADMIN, 0); }
		public TerminalNode AFTER() { return getToken(PLpgSQLParser.AFTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(PLpgSQLParser.AGGREGATE, 0); }
		public TerminalNode ALSO() { return getToken(PLpgSQLParser.ALSO, 0); }
		public TerminalNode ALTER() { return getToken(PLpgSQLParser.ALTER, 0); }
		public TerminalNode ALWAYS() { return getToken(PLpgSQLParser.ALWAYS, 0); }
		public TerminalNode ASSERTION() { return getToken(PLpgSQLParser.ASSERTION, 0); }
		public TerminalNode ASSIGNMENT() { return getToken(PLpgSQLParser.ASSIGNMENT, 0); }
		public TerminalNode AT() { return getToken(PLpgSQLParser.AT, 0); }
		public TerminalNode ATTACH() { return getToken(PLpgSQLParser.ATTACH, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(PLpgSQLParser.ATTRIBUTE, 0); }
		public TerminalNode BACKWARD() { return getToken(PLpgSQLParser.BACKWARD, 0); }
		public TerminalNode BEFORE() { return getToken(PLpgSQLParser.BEFORE, 0); }
		public TerminalNode BEGIN() { return getToken(PLpgSQLParser.BEGIN, 0); }
		public TerminalNode BY() { return getToken(PLpgSQLParser.BY, 0); }
		public TerminalNode CACHE() { return getToken(PLpgSQLParser.CACHE, 0); }
		public TerminalNode CALL() { return getToken(PLpgSQLParser.CALL, 0); }
		public TerminalNode CALLED() { return getToken(PLpgSQLParser.CALLED, 0); }
		public TerminalNode CASCADE() { return getToken(PLpgSQLParser.CASCADE, 0); }
		public TerminalNode CASCADED() { return getToken(PLpgSQLParser.CASCADED, 0); }
		public TerminalNode CATALOG() { return getToken(PLpgSQLParser.CATALOG, 0); }
		public TerminalNode CHAIN() { return getToken(PLpgSQLParser.CHAIN, 0); }
		public TerminalNode CHARACTERISTICS() { return getToken(PLpgSQLParser.CHARACTERISTICS, 0); }
		public TerminalNode CHECKPOINT() { return getToken(PLpgSQLParser.CHECKPOINT, 0); }
		public TerminalNode CLASS() { return getToken(PLpgSQLParser.CLASS, 0); }
		public TerminalNode CLOSE() { return getToken(PLpgSQLParser.CLOSE, 0); }
		public TerminalNode CLUSTER() { return getToken(PLpgSQLParser.CLUSTER, 0); }
		public TerminalNode COLUMNS() { return getToken(PLpgSQLParser.COLUMNS, 0); }
		public TerminalNode COMMENT() { return getToken(PLpgSQLParser.COMMENT, 0); }
		public TerminalNode COMMENTS() { return getToken(PLpgSQLParser.COMMENTS, 0); }
		public TerminalNode COMMIT() { return getToken(PLpgSQLParser.COMMIT, 0); }
		public TerminalNode COMMITTED() { return getToken(PLpgSQLParser.COMMITTED, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PLpgSQLParser.CONFIGURATION, 0); }
		public TerminalNode CONFLICT() { return getToken(PLpgSQLParser.CONFLICT, 0); }
		public TerminalNode CONNECTION() { return getToken(PLpgSQLParser.CONNECTION, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PLpgSQLParser.CONSTRAINTS, 0); }
		public TerminalNode CONTENT() { return getToken(PLpgSQLParser.CONTENT, 0); }
		public TerminalNode CONTINUE() { return getToken(PLpgSQLParser.CONTINUE, 0); }
		public TerminalNode CONVERSION() { return getToken(PLpgSQLParser.CONVERSION, 0); }
		public TerminalNode COPY() { return getToken(PLpgSQLParser.COPY, 0); }
		public TerminalNode COST() { return getToken(PLpgSQLParser.COST, 0); }
		public TerminalNode CSV() { return getToken(PLpgSQLParser.CSV, 0); }
		public TerminalNode CUBE() { return getToken(PLpgSQLParser.CUBE, 0); }
		public TerminalNode CURRENT() { return getToken(PLpgSQLParser.CURRENT, 0); }
		public TerminalNode CURSOR() { return getToken(PLpgSQLParser.CURSOR, 0); }
		public TerminalNode CYCLE() { return getToken(PLpgSQLParser.CYCLE, 0); }
		public TerminalNode DATA() { return getToken(PLpgSQLParser.DATA, 0); }
		public TerminalNode DATABASE() { return getToken(PLpgSQLParser.DATABASE, 0); }
		public TerminalNode DAY() { return getToken(PLpgSQLParser.DAY, 0); }
		public TerminalNode DEALLOCATE() { return getToken(PLpgSQLParser.DEALLOCATE, 0); }
		public TerminalNode DECLARE() { return getToken(PLpgSQLParser.DECLARE, 0); }
		public TerminalNode DEFAULTS() { return getToken(PLpgSQLParser.DEFAULTS, 0); }
		public TerminalNode DEFERRED() { return getToken(PLpgSQLParser.DEFERRED, 0); }
		public TerminalNode DEFINER() { return getToken(PLpgSQLParser.DEFINER, 0); }
		public TerminalNode DELETE() { return getToken(PLpgSQLParser.DELETE, 0); }
		public TerminalNode DELIMITER() { return getToken(PLpgSQLParser.DELIMITER, 0); }
		public TerminalNode DELIMITERS() { return getToken(PLpgSQLParser.DELIMITERS, 0); }
		public TerminalNode DEPENDS() { return getToken(PLpgSQLParser.DEPENDS, 0); }
		public TerminalNode DETACH() { return getToken(PLpgSQLParser.DETACH, 0); }
		public TerminalNode DICTIONARY() { return getToken(PLpgSQLParser.DICTIONARY, 0); }
		public TerminalNode DISABLE() { return getToken(PLpgSQLParser.DISABLE, 0); }
		public TerminalNode DISCARD() { return getToken(PLpgSQLParser.DISCARD, 0); }
		public TerminalNode DOCUMENT() { return getToken(PLpgSQLParser.DOCUMENT, 0); }
		public TerminalNode DOMAIN() { return getToken(PLpgSQLParser.DOMAIN, 0); }
		public TerminalNode DOUBLE() { return getToken(PLpgSQLParser.DOUBLE, 0); }
		public TerminalNode DROP() { return getToken(PLpgSQLParser.DROP, 0); }
		public TerminalNode EACH() { return getToken(PLpgSQLParser.EACH, 0); }
		public TerminalNode ENABLE() { return getToken(PLpgSQLParser.ENABLE, 0); }
		public TerminalNode ENCODING() { return getToken(PLpgSQLParser.ENCODING, 0); }
		public TerminalNode ENCRYPTED() { return getToken(PLpgSQLParser.ENCRYPTED, 0); }
		public TerminalNode ENUM() { return getToken(PLpgSQLParser.ENUM, 0); }
		public TerminalNode ESCAPE() { return getToken(PLpgSQLParser.ESCAPE, 0); }
		public TerminalNode EVENT() { return getToken(PLpgSQLParser.EVENT, 0); }
		public TerminalNode EXCLUDE() { return getToken(PLpgSQLParser.EXCLUDE, 0); }
		public TerminalNode EXCLUDING() { return getToken(PLpgSQLParser.EXCLUDING, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(PLpgSQLParser.EXCLUSIVE, 0); }
		public TerminalNode EXECUTE() { return getToken(PLpgSQLParser.EXECUTE, 0); }
		public TerminalNode EXPLAIN() { return getToken(PLpgSQLParser.EXPLAIN, 0); }
		public TerminalNode EXTENSION() { return getToken(PLpgSQLParser.EXTENSION, 0); }
		public TerminalNode EXTERNAL() { return getToken(PLpgSQLParser.EXTERNAL, 0); }
		public TerminalNode FAMILY() { return getToken(PLpgSQLParser.FAMILY, 0); }
		public TerminalNode FILTER() { return getToken(PLpgSQLParser.FILTER, 0); }
		public TerminalNode FIRST() { return getToken(PLpgSQLParser.FIRST, 0); }
		public TerminalNode FOLLOWING() { return getToken(PLpgSQLParser.FOLLOWING, 0); }
		public TerminalNode FORCE() { return getToken(PLpgSQLParser.FORCE, 0); }
		public TerminalNode FORWARD() { return getToken(PLpgSQLParser.FORWARD, 0); }
		public TerminalNode FUNCTION() { return getToken(PLpgSQLParser.FUNCTION, 0); }
		public TerminalNode FUNCTIONS() { return getToken(PLpgSQLParser.FUNCTIONS, 0); }
		public TerminalNode GENERATED() { return getToken(PLpgSQLParser.GENERATED, 0); }
		public TerminalNode GLOBAL() { return getToken(PLpgSQLParser.GLOBAL, 0); }
		public TerminalNode GRANTED() { return getToken(PLpgSQLParser.GRANTED, 0); }
		public TerminalNode GROUPS() { return getToken(PLpgSQLParser.GROUPS, 0); }
		public TerminalNode HANDLER() { return getToken(PLpgSQLParser.HANDLER, 0); }
		public TerminalNode HEADER() { return getToken(PLpgSQLParser.HEADER, 0); }
		public TerminalNode HOLD() { return getToken(PLpgSQLParser.HOLD, 0); }
		public TerminalNode HOUR() { return getToken(PLpgSQLParser.HOUR, 0); }
		public TerminalNode IDENTITY() { return getToken(PLpgSQLParser.IDENTITY, 0); }
		public TerminalNode IF() { return getToken(PLpgSQLParser.IF, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PLpgSQLParser.IMMEDIATE, 0); }
		public TerminalNode IMMUTABLE() { return getToken(PLpgSQLParser.IMMUTABLE, 0); }
		public TerminalNode IMPLICIT() { return getToken(PLpgSQLParser.IMPLICIT, 0); }
		public TerminalNode IMPORT() { return getToken(PLpgSQLParser.IMPORT, 0); }
		public TerminalNode INCLUDE() { return getToken(PLpgSQLParser.INCLUDE, 0); }
		public TerminalNode INCLUDING() { return getToken(PLpgSQLParser.INCLUDING, 0); }
		public TerminalNode INCREMENT() { return getToken(PLpgSQLParser.INCREMENT, 0); }
		public TerminalNode INDEX() { return getToken(PLpgSQLParser.INDEX, 0); }
		public TerminalNode INDEXES() { return getToken(PLpgSQLParser.INDEXES, 0); }
		public TerminalNode INHERIT() { return getToken(PLpgSQLParser.INHERIT, 0); }
		public TerminalNode INHERITS() { return getToken(PLpgSQLParser.INHERITS, 0); }
		public TerminalNode INLINE() { return getToken(PLpgSQLParser.INLINE, 0); }
		public TerminalNode INPUT() { return getToken(PLpgSQLParser.INPUT, 0); }
		public TerminalNode INSENSITIVE() { return getToken(PLpgSQLParser.INSENSITIVE, 0); }
		public TerminalNode INSERT() { return getToken(PLpgSQLParser.INSERT, 0); }
		public TerminalNode INSTEAD() { return getToken(PLpgSQLParser.INSTEAD, 0); }
		public TerminalNode INVOKER() { return getToken(PLpgSQLParser.INVOKER, 0); }
		public TerminalNode ISOLATION() { return getToken(PLpgSQLParser.ISOLATION, 0); }
		public TerminalNode KEY() { return getToken(PLpgSQLParser.KEY, 0); }
		public TerminalNode LABEL() { return getToken(PLpgSQLParser.LABEL, 0); }
		public TerminalNode LANGUAGE() { return getToken(PLpgSQLParser.LANGUAGE, 0); }
		public TerminalNode LARGE() { return getToken(PLpgSQLParser.LARGE, 0); }
		public TerminalNode LAST() { return getToken(PLpgSQLParser.LAST, 0); }
		public TerminalNode LEAKPROOF() { return getToken(PLpgSQLParser.LEAKPROOF, 0); }
		public TerminalNode LEVEL() { return getToken(PLpgSQLParser.LEVEL, 0); }
		public TerminalNode LISTEN() { return getToken(PLpgSQLParser.LISTEN, 0); }
		public TerminalNode LOAD() { return getToken(PLpgSQLParser.LOAD, 0); }
		public TerminalNode LOCAL() { return getToken(PLpgSQLParser.LOCAL, 0); }
		public TerminalNode LOCATION() { return getToken(PLpgSQLParser.LOCATION, 0); }
		public TerminalNode LOCK() { return getToken(PLpgSQLParser.LOCK, 0); }
		public TerminalNode LOCKED() { return getToken(PLpgSQLParser.LOCKED, 0); }
		public TerminalNode LOGGED() { return getToken(PLpgSQLParser.LOGGED, 0); }
		public TerminalNode MAPPING() { return getToken(PLpgSQLParser.MAPPING, 0); }
		public TerminalNode MATCH() { return getToken(PLpgSQLParser.MATCH, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PLpgSQLParser.MATERIALIZED, 0); }
		public TerminalNode MAXVALUE() { return getToken(PLpgSQLParser.MAXVALUE, 0); }
		public TerminalNode METHOD() { return getToken(PLpgSQLParser.METHOD, 0); }
		public TerminalNode MINUTE() { return getToken(PLpgSQLParser.MINUTE, 0); }
		public TerminalNode MINVALUE() { return getToken(PLpgSQLParser.MINVALUE, 0); }
		public TerminalNode MODE() { return getToken(PLpgSQLParser.MODE, 0); }
		public TerminalNode MONTH() { return getToken(PLpgSQLParser.MONTH, 0); }
		public TerminalNode MOVE() { return getToken(PLpgSQLParser.MOVE, 0); }
		public TerminalNode NAME() { return getToken(PLpgSQLParser.NAME, 0); }
		public TerminalNode NAMES() { return getToken(PLpgSQLParser.NAMES, 0); }
		public TerminalNode NEW() { return getToken(PLpgSQLParser.NEW, 0); }
		public TerminalNode NEXT() { return getToken(PLpgSQLParser.NEXT, 0); }
		public TerminalNode NO() { return getToken(PLpgSQLParser.NO, 0); }
		public TerminalNode NOTHING() { return getToken(PLpgSQLParser.NOTHING, 0); }
		public TerminalNode NOTIFY() { return getToken(PLpgSQLParser.NOTIFY, 0); }
		public TerminalNode NOWAIT() { return getToken(PLpgSQLParser.NOWAIT, 0); }
		public TerminalNode NULLS() { return getToken(PLpgSQLParser.NULLS, 0); }
		public TerminalNode OBJECT() { return getToken(PLpgSQLParser.OBJECT, 0); }
		public TerminalNode OF() { return getToken(PLpgSQLParser.OF, 0); }
		public TerminalNode OFF() { return getToken(PLpgSQLParser.OFF, 0); }
		public TerminalNode OIDS() { return getToken(PLpgSQLParser.OIDS, 0); }
		public TerminalNode OLD() { return getToken(PLpgSQLParser.OLD, 0); }
		public TerminalNode OPERATOR() { return getToken(PLpgSQLParser.OPERATOR, 0); }
		public TerminalNode OPTION() { return getToken(PLpgSQLParser.OPTION, 0); }
		public TerminalNode OPTIONS() { return getToken(PLpgSQLParser.OPTIONS, 0); }
		public TerminalNode ORDINALITY() { return getToken(PLpgSQLParser.ORDINALITY, 0); }
		public TerminalNode OTHERS() { return getToken(PLpgSQLParser.OTHERS, 0); }
		public TerminalNode OVER() { return getToken(PLpgSQLParser.OVER, 0); }
		public TerminalNode OVERRIDING() { return getToken(PLpgSQLParser.OVERRIDING, 0); }
		public TerminalNode OWNED() { return getToken(PLpgSQLParser.OWNED, 0); }
		public TerminalNode OWNER() { return getToken(PLpgSQLParser.OWNER, 0); }
		public TerminalNode PARALLEL() { return getToken(PLpgSQLParser.PARALLEL, 0); }
		public TerminalNode PARSER() { return getToken(PLpgSQLParser.PARSER, 0); }
		public TerminalNode PARTIAL() { return getToken(PLpgSQLParser.PARTIAL, 0); }
		public TerminalNode PARTITION() { return getToken(PLpgSQLParser.PARTITION, 0); }
		public TerminalNode PASSING() { return getToken(PLpgSQLParser.PASSING, 0); }
		public TerminalNode PASSWORD() { return getToken(PLpgSQLParser.PASSWORD, 0); }
		public TerminalNode PLANS() { return getToken(PLpgSQLParser.PLANS, 0); }
		public TerminalNode POLICY() { return getToken(PLpgSQLParser.POLICY, 0); }
		public TerminalNode PRECEDING() { return getToken(PLpgSQLParser.PRECEDING, 0); }
		public TerminalNode PREPARE() { return getToken(PLpgSQLParser.PREPARE, 0); }
		public TerminalNode PREPARED() { return getToken(PLpgSQLParser.PREPARED, 0); }
		public TerminalNode PRESERVE() { return getToken(PLpgSQLParser.PRESERVE, 0); }
		public TerminalNode PRIOR() { return getToken(PLpgSQLParser.PRIOR, 0); }
		public TerminalNode PRIVILEGES() { return getToken(PLpgSQLParser.PRIVILEGES, 0); }
		public TerminalNode PROCEDURAL() { return getToken(PLpgSQLParser.PROCEDURAL, 0); }
		public TerminalNode PROCEDURE() { return getToken(PLpgSQLParser.PROCEDURE, 0); }
		public TerminalNode PROCEDURES() { return getToken(PLpgSQLParser.PROCEDURES, 0); }
		public TerminalNode PROGRAM() { return getToken(PLpgSQLParser.PROGRAM, 0); }
		public TerminalNode PUBLICATION() { return getToken(PLpgSQLParser.PUBLICATION, 0); }
		public TerminalNode QUOTE() { return getToken(PLpgSQLParser.QUOTE, 0); }
		public TerminalNode RANGE() { return getToken(PLpgSQLParser.RANGE, 0); }
		public TerminalNode READ() { return getToken(PLpgSQLParser.READ, 0); }
		public TerminalNode REASSIGN() { return getToken(PLpgSQLParser.REASSIGN, 0); }
		public TerminalNode RECHECK() { return getToken(PLpgSQLParser.RECHECK, 0); }
		public TerminalNode RECURSIVE() { return getToken(PLpgSQLParser.RECURSIVE, 0); }
		public TerminalNode REF() { return getToken(PLpgSQLParser.REF, 0); }
		public TerminalNode REFERENCING() { return getToken(PLpgSQLParser.REFERENCING, 0); }
		public TerminalNode REFRESH() { return getToken(PLpgSQLParser.REFRESH, 0); }
		public TerminalNode REINDEX() { return getToken(PLpgSQLParser.REINDEX, 0); }
		public TerminalNode RELATIVE() { return getToken(PLpgSQLParser.RELATIVE, 0); }
		public TerminalNode RELEASE() { return getToken(PLpgSQLParser.RELEASE, 0); }
		public TerminalNode RENAME() { return getToken(PLpgSQLParser.RENAME, 0); }
		public TerminalNode REPEATABLE() { return getToken(PLpgSQLParser.REPEATABLE, 0); }
		public TerminalNode REPLACE() { return getToken(PLpgSQLParser.REPLACE, 0); }
		public TerminalNode REPLICA() { return getToken(PLpgSQLParser.REPLICA, 0); }
		public TerminalNode RESET() { return getToken(PLpgSQLParser.RESET, 0); }
		public TerminalNode RESTART() { return getToken(PLpgSQLParser.RESTART, 0); }
		public TerminalNode RESTRICT() { return getToken(PLpgSQLParser.RESTRICT, 0); }
		public TerminalNode RETURNS() { return getToken(PLpgSQLParser.RETURNS, 0); }
		public TerminalNode REVOKE() { return getToken(PLpgSQLParser.REVOKE, 0); }
		public TerminalNode ROLE() { return getToken(PLpgSQLParser.ROLE, 0); }
		public TerminalNode ROLLBACK() { return getToken(PLpgSQLParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(PLpgSQLParser.ROLLUP, 0); }
		public TerminalNode ROUTINE() { return getToken(PLpgSQLParser.ROUTINE, 0); }
		public TerminalNode ROUTINES() { return getToken(PLpgSQLParser.ROUTINES, 0); }
		public TerminalNode ROWS() { return getToken(PLpgSQLParser.ROWS, 0); }
		public TerminalNode RULE() { return getToken(PLpgSQLParser.RULE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(PLpgSQLParser.SAVEPOINT, 0); }
		public TerminalNode SCHEMA() { return getToken(PLpgSQLParser.SCHEMA, 0); }
		public TerminalNode SCHEMAS() { return getToken(PLpgSQLParser.SCHEMAS, 0); }
		public TerminalNode SCROLL() { return getToken(PLpgSQLParser.SCROLL, 0); }
		public TerminalNode SEARCH() { return getToken(PLpgSQLParser.SEARCH, 0); }
		public TerminalNode SECOND() { return getToken(PLpgSQLParser.SECOND, 0); }
		public TerminalNode SECURITY() { return getToken(PLpgSQLParser.SECURITY, 0); }
		public TerminalNode SEQUENCE() { return getToken(PLpgSQLParser.SEQUENCE, 0); }
		public TerminalNode SEQUENCES() { return getToken(PLpgSQLParser.SEQUENCES, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(PLpgSQLParser.SERIALIZABLE, 0); }
		public TerminalNode SERVER() { return getToken(PLpgSQLParser.SERVER, 0); }
		public TerminalNode SESSION() { return getToken(PLpgSQLParser.SESSION, 0); }
		public TerminalNode SET() { return getToken(PLpgSQLParser.SET, 0); }
		public TerminalNode SETS() { return getToken(PLpgSQLParser.SETS, 0); }
		public TerminalNode SHARE() { return getToken(PLpgSQLParser.SHARE, 0); }
		public TerminalNode SHOW() { return getToken(PLpgSQLParser.SHOW, 0); }
		public TerminalNode SIMPLE() { return getToken(PLpgSQLParser.SIMPLE, 0); }
		public TerminalNode SKIP_() { return getToken(PLpgSQLParser.SKIP_, 0); }
		public TerminalNode SNAPSHOT() { return getToken(PLpgSQLParser.SNAPSHOT, 0); }
		public TerminalNode SQL() { return getToken(PLpgSQLParser.SQL, 0); }
		public TerminalNode STABLE() { return getToken(PLpgSQLParser.STABLE, 0); }
		public TerminalNode STANDALONE() { return getToken(PLpgSQLParser.STANDALONE, 0); }
		public TerminalNode START() { return getToken(PLpgSQLParser.START, 0); }
		public TerminalNode STATEMENT() { return getToken(PLpgSQLParser.STATEMENT, 0); }
		public TerminalNode STATISTICS() { return getToken(PLpgSQLParser.STATISTICS, 0); }
		public TerminalNode STDIN() { return getToken(PLpgSQLParser.STDIN, 0); }
		public TerminalNode STDOUT() { return getToken(PLpgSQLParser.STDOUT, 0); }
		public TerminalNode STORAGE() { return getToken(PLpgSQLParser.STORAGE, 0); }
		public TerminalNode STORED() { return getToken(PLpgSQLParser.STORED, 0); }
		public TerminalNode STRICT() { return getToken(PLpgSQLParser.STRICT, 0); }
		public TerminalNode STRIP() { return getToken(PLpgSQLParser.STRIP, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PLpgSQLParser.SUBSCRIPTION, 0); }
		public TerminalNode SUPPORT() { return getToken(PLpgSQLParser.SUPPORT, 0); }
		public TerminalNode SYSID() { return getToken(PLpgSQLParser.SYSID, 0); }
		public TerminalNode SYSTEM() { return getToken(PLpgSQLParser.SYSTEM, 0); }
		public TerminalNode TABLES() { return getToken(PLpgSQLParser.TABLES, 0); }
		public TerminalNode TABLESPACE() { return getToken(PLpgSQLParser.TABLESPACE, 0); }
		public TerminalNode TEMP() { return getToken(PLpgSQLParser.TEMP, 0); }
		public TerminalNode TEMPLATE() { return getToken(PLpgSQLParser.TEMPLATE, 0); }
		public TerminalNode TEMPORARY() { return getToken(PLpgSQLParser.TEMPORARY, 0); }
		public TerminalNode TEXT() { return getToken(PLpgSQLParser.TEXT, 0); }
		public TerminalNode TIES() { return getToken(PLpgSQLParser.TIES, 0); }
		public TerminalNode TRANSACTION() { return getToken(PLpgSQLParser.TRANSACTION, 0); }
		public TerminalNode TRANSFORM() { return getToken(PLpgSQLParser.TRANSFORM, 0); }
		public TerminalNode TRIGGER() { return getToken(PLpgSQLParser.TRIGGER, 0); }
		public TerminalNode TRUNCATE() { return getToken(PLpgSQLParser.TRUNCATE, 0); }
		public TerminalNode TRUSTED() { return getToken(PLpgSQLParser.TRUSTED, 0); }
		public TerminalNode TYPE() { return getToken(PLpgSQLParser.TYPE, 0); }
		public TerminalNode TYPES() { return getToken(PLpgSQLParser.TYPES, 0); }
		public TerminalNode UNBOUNDED() { return getToken(PLpgSQLParser.UNBOUNDED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(PLpgSQLParser.UNCOMMITTED, 0); }
		public TerminalNode UNENCRYPTED() { return getToken(PLpgSQLParser.UNENCRYPTED, 0); }
		public TerminalNode UNKNOWN() { return getToken(PLpgSQLParser.UNKNOWN, 0); }
		public TerminalNode UNLISTEN() { return getToken(PLpgSQLParser.UNLISTEN, 0); }
		public TerminalNode UNLOGGED() { return getToken(PLpgSQLParser.UNLOGGED, 0); }
		public TerminalNode UNTIL() { return getToken(PLpgSQLParser.UNTIL, 0); }
		public TerminalNode UPDATE() { return getToken(PLpgSQLParser.UPDATE, 0); }
		public TerminalNode VACUUM() { return getToken(PLpgSQLParser.VACUUM, 0); }
		public TerminalNode VALID() { return getToken(PLpgSQLParser.VALID, 0); }
		public TerminalNode VALIDATE() { return getToken(PLpgSQLParser.VALIDATE, 0); }
		public TerminalNode VALIDATOR() { return getToken(PLpgSQLParser.VALIDATOR, 0); }
		public TerminalNode VALUE() { return getToken(PLpgSQLParser.VALUE, 0); }
		public TerminalNode VARYING() { return getToken(PLpgSQLParser.VARYING, 0); }
		public TerminalNode VERSION() { return getToken(PLpgSQLParser.VERSION, 0); }
		public TerminalNode VIEW() { return getToken(PLpgSQLParser.VIEW, 0); }
		public TerminalNode VIEWS() { return getToken(PLpgSQLParser.VIEWS, 0); }
		public TerminalNode VOLATILE() { return getToken(PLpgSQLParser.VOLATILE, 0); }
		public TerminalNode WHITESPACE() { return getToken(PLpgSQLParser.WHITESPACE, 0); }
		public TerminalNode WITHIN() { return getToken(PLpgSQLParser.WITHIN, 0); }
		public TerminalNode WITHOUT() { return getToken(PLpgSQLParser.WITHOUT, 0); }
		public TerminalNode WORK() { return getToken(PLpgSQLParser.WORK, 0); }
		public TerminalNode WRAPPER() { return getToken(PLpgSQLParser.WRAPPER, 0); }
		public TerminalNode WRITE() { return getToken(PLpgSQLParser.WRITE, 0); }
		public TerminalNode XML() { return getToken(PLpgSQLParser.XML, 0); }
		public TerminalNode YEAR() { return getToken(PLpgSQLParser.YEAR, 0); }
		public TerminalNode YES() { return getToken(PLpgSQLParser.YES, 0); }
		public TerminalNode ZONE() { return getToken(PLpgSQLParser.ZONE, 0); }
		public Tokens_nonreservedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tokens_nonreserved; }
	}

	public final Tokens_nonreservedContext tokens_nonreserved() throws RecognitionException {
		Tokens_nonreservedContext _localctx = new Tokens_nonreservedContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_tokens_nonreserved);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5340);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATTACH) | (1L << ATTRIBUTE) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BY) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG) | (1L << CHAIN) | (1L << CHARACTERISTICS) | (1L << CHECKPOINT) | (1L << CLASS) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMENTS) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONFIGURATION) | (1L << CONFLICT) | (1L << CONNECTION) | (1L << CONSTRAINTS) | (1L << CONTENT) | (1L << CONTINUE) | (1L << CONVERSION) | (1L << COPY) | (1L << COST) | (1L << CSV) | (1L << CUBE) | (1L << CURRENT) | (1L << CURSOR) | (1L << CYCLE) | (1L << DATA) | (1L << DATABASE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DEFAULTS) | (1L << DEFERRED) | (1L << DEFINER) | (1L << DELETE) | (1L << DELIMITER) | (1L << DELIMITERS) | (1L << DEPENDS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DETACH - 64)) | (1L << (DICTIONARY - 64)) | (1L << (DISABLE - 64)) | (1L << (DISCARD - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOMAIN - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (EACH - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTED - 64)) | (1L << (ENUM - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVENT - 64)) | (1L << (EXCLUDE - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXCLUSIVE - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTENSION - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FAMILY - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORCE - 64)) | (1L << (FORWARD - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GENERATED - 64)) | (1L << (GLOBAL - 64)) | (1L << (GRANTED - 64)) | (1L << (GROUPS - 64)) | (1L << (HANDLER - 64)) | (1L << (HEADER - 64)) | (1L << (HOLD - 64)) | (1L << (HOUR - 64)) | (1L << (IDENTITY - 64)) | (1L << (IF - 64)) | (1L << (IMMEDIATE - 64)) | (1L << (IMMUTABLE - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPORT - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INCREMENT - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXES - 64)) | (1L << (INHERIT - 64)) | (1L << (INHERITS - 64)) | (1L << (INLINE - 64)) | (1L << (INPUT - 64)) | (1L << (INSENSITIVE - 64)) | (1L << (INSERT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INVOKER - 64)) | (1L << (ISOLATION - 64)) | (1L << (KEY - 64)) | (1L << (LABEL - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LARGE - 64)) | (1L << (LAST - 64)) | (1L << (LEAKPROOF - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LEVEL - 128)) | (1L << (LISTEN - 128)) | (1L << (LOAD - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCATION - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKED - 128)) | (1L << (LOGGED - 128)) | (1L << (MAPPING - 128)) | (1L << (MATCH - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MAXVALUE - 128)) | (1L << (METHOD - 128)) | (1L << (MINUTE - 128)) | (1L << (MINVALUE - 128)) | (1L << (MODE - 128)) | (1L << (MONTH - 128)) | (1L << (MOVE - 128)) | (1L << (NAME - 128)) | (1L << (NAMES - 128)) | (1L << (NEW - 128)) | (1L << (NEXT - 128)) | (1L << (NO - 128)) | (1L << (NOTHING - 128)) | (1L << (NOTIFY - 128)) | (1L << (NOWAIT - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFF - 128)) | (1L << (OIDS - 128)) | (1L << (OLD - 128)) | (1L << (OPERATOR - 128)) | (1L << (OPTION - 128)) | (1L << (OPTIONS - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OTHERS - 128)) | (1L << (OVER - 128)) | (1L << (OVERRIDING - 128)) | (1L << (OWNED - 128)) | (1L << (OWNER - 128)) | (1L << (PARALLEL - 128)) | (1L << (PARSER - 128)) | (1L << (PARTIAL - 128)) | (1L << (PARTITION - 128)) | (1L << (PASSING - 128)) | (1L << (PASSWORD - 128)) | (1L << (PLANS - 128)) | (1L << (POLICY - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PREPARED - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRIOR - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROCEDURAL - 128)) | (1L << (PROCEDURE - 128)) | (1L << (PROCEDURES - 128)) | (1L << (PROGRAM - 128)) | (1L << (PUBLICATION - 128)) | (1L << (QUOTE - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (REASSIGN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (RECHECK - 192)) | (1L << (RECURSIVE - 192)) | (1L << (REF - 192)) | (1L << (REFERENCING - 192)) | (1L << (REFRESH - 192)) | (1L << (REINDEX - 192)) | (1L << (RELATIVE - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (REPLICA - 192)) | (1L << (RESET - 192)) | (1L << (RESTART - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUTINE - 192)) | (1L << (ROUTINES - 192)) | (1L << (ROWS - 192)) | (1L << (RULE - 192)) | (1L << (SAVEPOINT - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SCROLL - 192)) | (1L << (SEARCH - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEQUENCE - 192)) | (1L << (SEQUENCES - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SERVER - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHARE - 192)) | (1L << (SHOW - 192)) | (1L << (SIMPLE - 192)) | (1L << (SKIP_ - 192)) | (1L << (SNAPSHOT - 192)) | (1L << (SQL - 192)) | (1L << (STABLE - 192)) | (1L << (STANDALONE - 192)) | (1L << (START - 192)) | (1L << (STATEMENT - 192)) | (1L << (STATISTICS - 192)) | (1L << (STDIN - 192)) | (1L << (STDOUT - 192)) | (1L << (STORAGE - 192)) | (1L << (STORED - 192)) | (1L << (STRICT - 192)) | (1L << (STRIP - 192)) | (1L << (SUBSCRIPTION - 192)) | (1L << (SUPPORT - 192)) | (1L << (SYSID - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESPACE - 192)) | (1L << (TEMP - 192)) | (1L << (TEMPLATE - 192)) | (1L << (TEMPORARY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TEXT - 256)) | (1L << (TIES - 256)) | (1L << (TRANSACTION - 256)) | (1L << (TRANSFORM - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TRUSTED - 256)) | (1L << (TYPE - 256)) | (1L << (TYPES - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNENCRYPTED - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNLISTEN - 256)) | (1L << (UNLOGGED - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (VACUUM - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALIDATOR - 256)) | (1L << (VALUE - 256)) | (1L << (VARYING - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (VIEWS - 256)) | (1L << (VOLATILE - 256)) | (1L << (WHITESPACE - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (XML - 256)) | (1L << (YEAR - 256)) | (1L << (YES - 256)) | (1L << (ZONE - 256)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tokens_nonreserved_except_function_typeContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(PLpgSQLParser.BETWEEN, 0); }
		public TerminalNode BIGINT() { return getToken(PLpgSQLParser.BIGINT, 0); }
		public TerminalNode BIT() { return getToken(PLpgSQLParser.BIT, 0); }
		public TerminalNode BOOLEAN() { return getToken(PLpgSQLParser.BOOLEAN, 0); }
		public TerminalNode CHAR() { return getToken(PLpgSQLParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(PLpgSQLParser.CHARACTER, 0); }
		public TerminalNode COALESCE() { return getToken(PLpgSQLParser.COALESCE, 0); }
		public TerminalNode DEC() { return getToken(PLpgSQLParser.DEC, 0); }
		public TerminalNode DECIMAL() { return getToken(PLpgSQLParser.DECIMAL, 0); }
		public TerminalNode EXISTS() { return getToken(PLpgSQLParser.EXISTS, 0); }
		public TerminalNode EXTRACT() { return getToken(PLpgSQLParser.EXTRACT, 0); }
		public TerminalNode FLOAT() { return getToken(PLpgSQLParser.FLOAT, 0); }
		public TerminalNode GREATEST() { return getToken(PLpgSQLParser.GREATEST, 0); }
		public TerminalNode GROUPING() { return getToken(PLpgSQLParser.GROUPING, 0); }
		public TerminalNode INOUT() { return getToken(PLpgSQLParser.INOUT, 0); }
		public TerminalNode INT() { return getToken(PLpgSQLParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(PLpgSQLParser.INTEGER, 0); }
		public TerminalNode INTERVAL() { return getToken(PLpgSQLParser.INTERVAL, 0); }
		public TerminalNode LEAST() { return getToken(PLpgSQLParser.LEAST, 0); }
		public TerminalNode NATIONAL() { return getToken(PLpgSQLParser.NATIONAL, 0); }
		public TerminalNode NCHAR() { return getToken(PLpgSQLParser.NCHAR, 0); }
		public TerminalNode NONE() { return getToken(PLpgSQLParser.NONE, 0); }
		public TerminalNode NULLIF() { return getToken(PLpgSQLParser.NULLIF, 0); }
		public TerminalNode NUMERIC() { return getToken(PLpgSQLParser.NUMERIC, 0); }
		public TerminalNode OUT() { return getToken(PLpgSQLParser.OUT, 0); }
		public TerminalNode OVERLAY() { return getToken(PLpgSQLParser.OVERLAY, 0); }
		public TerminalNode POSITION() { return getToken(PLpgSQLParser.POSITION, 0); }
		public TerminalNode PRECISION() { return getToken(PLpgSQLParser.PRECISION, 0); }
		public TerminalNode REAL() { return getToken(PLpgSQLParser.REAL, 0); }
		public TerminalNode ROW() { return getToken(PLpgSQLParser.ROW, 0); }
		public TerminalNode SETOF() { return getToken(PLpgSQLParser.SETOF, 0); }
		public TerminalNode SMALLINT() { return getToken(PLpgSQLParser.SMALLINT, 0); }
		public TerminalNode SUBSTRING() { return getToken(PLpgSQLParser.SUBSTRING, 0); }
		public TerminalNode TIME() { return getToken(PLpgSQLParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(PLpgSQLParser.TIMESTAMP, 0); }
		public TerminalNode TREAT() { return getToken(PLpgSQLParser.TREAT, 0); }
		public TerminalNode TRIM() { return getToken(PLpgSQLParser.TRIM, 0); }
		public TerminalNode VALUES() { return getToken(PLpgSQLParser.VALUES, 0); }
		public TerminalNode VARCHAR() { return getToken(PLpgSQLParser.VARCHAR, 0); }
		public TerminalNode XMLATTRIBUTES() { return getToken(PLpgSQLParser.XMLATTRIBUTES, 0); }
		public TerminalNode XMLCONCAT() { return getToken(PLpgSQLParser.XMLCONCAT, 0); }
		public TerminalNode XMLELEMENT() { return getToken(PLpgSQLParser.XMLELEMENT, 0); }
		public TerminalNode XMLEXISTS() { return getToken(PLpgSQLParser.XMLEXISTS, 0); }
		public TerminalNode XMLFOREST() { return getToken(PLpgSQLParser.XMLFOREST, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(PLpgSQLParser.XMLNAMESPACES, 0); }
		public TerminalNode XMLPARSE() { return getToken(PLpgSQLParser.XMLPARSE, 0); }
		public TerminalNode XMLPI() { return getToken(PLpgSQLParser.XMLPI, 0); }
		public TerminalNode XMLROOT() { return getToken(PLpgSQLParser.XMLROOT, 0); }
		public TerminalNode XMLSERIALIZE() { return getToken(PLpgSQLParser.XMLSERIALIZE, 0); }
		public TerminalNode XMLTABLE() { return getToken(PLpgSQLParser.XMLTABLE, 0); }
		public Tokens_nonreserved_except_function_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tokens_nonreserved_except_function_type; }
	}

	public final Tokens_nonreserved_except_function_typeContext tokens_nonreserved_except_function_type() throws RecognitionException {
		Tokens_nonreserved_except_function_typeContext _localctx = new Tokens_nonreserved_except_function_typeContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_tokens_nonreserved_except_function_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5342);
			_la = _input.LA(1);
			if ( !(((((_la - 293)) & ~0x3f) == 0 && ((1L << (_la - 293)) & ((1L << (BETWEEN - 293)) | (1L << (BIGINT - 293)) | (1L << (BIT - 293)) | (1L << (BOOLEAN - 293)) | (1L << (CHAR - 293)) | (1L << (CHARACTER - 293)) | (1L << (COALESCE - 293)) | (1L << (DEC - 293)) | (1L << (DECIMAL - 293)) | (1L << (EXISTS - 293)) | (1L << (EXTRACT - 293)) | (1L << (FLOAT - 293)) | (1L << (GREATEST - 293)) | (1L << (GROUPING - 293)) | (1L << (INOUT - 293)) | (1L << (INT - 293)) | (1L << (INTEGER - 293)) | (1L << (INTERVAL - 293)) | (1L << (LEAST - 293)) | (1L << (NATIONAL - 293)) | (1L << (NCHAR - 293)) | (1L << (NONE - 293)) | (1L << (NULLIF - 293)) | (1L << (NUMERIC - 293)) | (1L << (OUT - 293)) | (1L << (OVERLAY - 293)) | (1L << (POSITION - 293)) | (1L << (PRECISION - 293)) | (1L << (REAL - 293)) | (1L << (ROW - 293)) | (1L << (SETOF - 293)) | (1L << (SMALLINT - 293)) | (1L << (SUBSTRING - 293)) | (1L << (TIME - 293)) | (1L << (TIMESTAMP - 293)) | (1L << (TREAT - 293)) | (1L << (TRIM - 293)) | (1L << (VALUES - 293)) | (1L << (VARCHAR - 293)) | (1L << (XMLATTRIBUTES - 293)) | (1L << (XMLCONCAT - 293)) | (1L << (XMLELEMENT - 293)) | (1L << (XMLEXISTS - 293)) | (1L << (XMLFOREST - 293)) | (1L << (XMLNAMESPACES - 293)) | (1L << (XMLPARSE - 293)) | (1L << (XMLPI - 293)) | (1L << (XMLROOT - 293)) | (1L << (XMLSERIALIZE - 293)) | (1L << (XMLTABLE - 293)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tokens_reserved_except_function_typeContext extends ParserRuleContext {
		public TerminalNode AUTHORIZATION() { return getToken(PLpgSQLParser.AUTHORIZATION, 0); }
		public TerminalNode BINARY() { return getToken(PLpgSQLParser.BINARY, 0); }
		public TerminalNode COLLATION() { return getToken(PLpgSQLParser.COLLATION, 0); }
		public TerminalNode CONCURRENTLY() { return getToken(PLpgSQLParser.CONCURRENTLY, 0); }
		public TerminalNode CROSS() { return getToken(PLpgSQLParser.CROSS, 0); }
		public TerminalNode CURRENT_SCHEMA() { return getToken(PLpgSQLParser.CURRENT_SCHEMA, 0); }
		public TerminalNode FREEZE() { return getToken(PLpgSQLParser.FREEZE, 0); }
		public TerminalNode FULL() { return getToken(PLpgSQLParser.FULL, 0); }
		public TerminalNode ILIKE() { return getToken(PLpgSQLParser.ILIKE, 0); }
		public TerminalNode INNER() { return getToken(PLpgSQLParser.INNER, 0); }
		public TerminalNode IS() { return getToken(PLpgSQLParser.IS, 0); }
		public TerminalNode ISNULL() { return getToken(PLpgSQLParser.ISNULL, 0); }
		public TerminalNode JOIN() { return getToken(PLpgSQLParser.JOIN, 0); }
		public TerminalNode LEFT() { return getToken(PLpgSQLParser.LEFT, 0); }
		public TerminalNode LIKE() { return getToken(PLpgSQLParser.LIKE, 0); }
		public TerminalNode NATURAL() { return getToken(PLpgSQLParser.NATURAL, 0); }
		public TerminalNode NOTNULL() { return getToken(PLpgSQLParser.NOTNULL, 0); }
		public TerminalNode OUTER() { return getToken(PLpgSQLParser.OUTER, 0); }
		public TerminalNode OVERLAPS() { return getToken(PLpgSQLParser.OVERLAPS, 0); }
		public TerminalNode RIGHT() { return getToken(PLpgSQLParser.RIGHT, 0); }
		public TerminalNode SIMILAR() { return getToken(PLpgSQLParser.SIMILAR, 0); }
		public TerminalNode TABLESAMPLE() { return getToken(PLpgSQLParser.TABLESAMPLE, 0); }
		public TerminalNode VERBOSE() { return getToken(PLpgSQLParser.VERBOSE, 0); }
		public Tokens_reserved_except_function_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tokens_reserved_except_function_type; }
	}

	public final Tokens_reserved_except_function_typeContext tokens_reserved_except_function_type() throws RecognitionException {
		Tokens_reserved_except_function_typeContext _localctx = new Tokens_reserved_except_function_typeContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_tokens_reserved_except_function_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5344);
			_la = _input.LA(1);
			if ( !(((((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & ((1L << (AUTHORIZATION - 343)) | (1L << (BINARY - 343)) | (1L << (COLLATION - 343)) | (1L << (CONCURRENTLY - 343)) | (1L << (CROSS - 343)) | (1L << (CURRENT_SCHEMA - 343)) | (1L << (FREEZE - 343)) | (1L << (FULL - 343)) | (1L << (ILIKE - 343)) | (1L << (INNER - 343)) | (1L << (IS - 343)) | (1L << (ISNULL - 343)) | (1L << (JOIN - 343)) | (1L << (LEFT - 343)) | (1L << (LIKE - 343)) | (1L << (NATURAL - 343)) | (1L << (NOTNULL - 343)) | (1L << (OUTER - 343)) | (1L << (OVERLAPS - 343)) | (1L << (RIGHT - 343)) | (1L << (SIMILAR - 343)) | (1L << (TABLESAMPLE - 343)) | (1L << (VERBOSE - 343)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tokens_reservedContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PLpgSQLParser.ALL, 0); }
		public TerminalNode ANALYSE() { return getToken(PLpgSQLParser.ANALYSE, 0); }
		public TerminalNode ANALYZE() { return getToken(PLpgSQLParser.ANALYZE, 0); }
		public TerminalNode AND() { return getToken(PLpgSQLParser.AND, 0); }
		public TerminalNode ANY() { return getToken(PLpgSQLParser.ANY, 0); }
		public TerminalNode ARRAY() { return getToken(PLpgSQLParser.ARRAY, 0); }
		public TerminalNode AS() { return getToken(PLpgSQLParser.AS, 0); }
		public TerminalNode ASC() { return getToken(PLpgSQLParser.ASC, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(PLpgSQLParser.ASYMMETRIC, 0); }
		public TerminalNode BOTH() { return getToken(PLpgSQLParser.BOTH, 0); }
		public TerminalNode CASE() { return getToken(PLpgSQLParser.CASE, 0); }
		public TerminalNode CAST() { return getToken(PLpgSQLParser.CAST, 0); }
		public TerminalNode CHECK() { return getToken(PLpgSQLParser.CHECK, 0); }
		public TerminalNode COLLATE() { return getToken(PLpgSQLParser.COLLATE, 0); }
		public TerminalNode COLUMN() { return getToken(PLpgSQLParser.COLUMN, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PLpgSQLParser.CONSTRAINT, 0); }
		public TerminalNode CREATE() { return getToken(PLpgSQLParser.CREATE, 0); }
		public TerminalNode CURRENT_CATALOG() { return getToken(PLpgSQLParser.CURRENT_CATALOG, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(PLpgSQLParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_ROLE() { return getToken(PLpgSQLParser.CURRENT_ROLE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(PLpgSQLParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(PLpgSQLParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PLpgSQLParser.CURRENT_USER, 0); }
		public TerminalNode DEFAULT() { return getToken(PLpgSQLParser.DEFAULT, 0); }
		public TerminalNode DEFERRABLE() { return getToken(PLpgSQLParser.DEFERRABLE, 0); }
		public TerminalNode DESC() { return getToken(PLpgSQLParser.DESC, 0); }
		public TerminalNode DISTINCT() { return getToken(PLpgSQLParser.DISTINCT, 0); }
		public TerminalNode DO() { return getToken(PLpgSQLParser.DO, 0); }
		public TerminalNode ELSE() { return getToken(PLpgSQLParser.ELSE, 0); }
		public TerminalNode END() { return getToken(PLpgSQLParser.END, 0); }
		public TerminalNode EXCEPT() { return getToken(PLpgSQLParser.EXCEPT, 0); }
		public TerminalNode FALSE() { return getToken(PLpgSQLParser.FALSE, 0); }
		public TerminalNode FETCH() { return getToken(PLpgSQLParser.FETCH, 0); }
		public TerminalNode FOR() { return getToken(PLpgSQLParser.FOR, 0); }
		public TerminalNode FOREIGN() { return getToken(PLpgSQLParser.FOREIGN, 0); }
		public TerminalNode FROM() { return getToken(PLpgSQLParser.FROM, 0); }
		public TerminalNode GRANT() { return getToken(PLpgSQLParser.GRANT, 0); }
		public TerminalNode GROUP() { return getToken(PLpgSQLParser.GROUP, 0); }
		public TerminalNode HAVING() { return getToken(PLpgSQLParser.HAVING, 0); }
		public TerminalNode IN() { return getToken(PLpgSQLParser.IN, 0); }
		public TerminalNode INITIALLY() { return getToken(PLpgSQLParser.INITIALLY, 0); }
		public TerminalNode INTERSECT() { return getToken(PLpgSQLParser.INTERSECT, 0); }
		public TerminalNode INTO() { return getToken(PLpgSQLParser.INTO, 0); }
		public TerminalNode LATERAL() { return getToken(PLpgSQLParser.LATERAL, 0); }
		public TerminalNode LEADING() { return getToken(PLpgSQLParser.LEADING, 0); }
		public TerminalNode LIMIT() { return getToken(PLpgSQLParser.LIMIT, 0); }
		public TerminalNode LOCALTIME() { return getToken(PLpgSQLParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(PLpgSQLParser.LOCALTIMESTAMP, 0); }
		public TerminalNode NOT() { return getToken(PLpgSQLParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PLpgSQLParser.NULL, 0); }
		public TerminalNode OFFSET() { return getToken(PLpgSQLParser.OFFSET, 0); }
		public TerminalNode ON() { return getToken(PLpgSQLParser.ON, 0); }
		public TerminalNode ONLY() { return getToken(PLpgSQLParser.ONLY, 0); }
		public TerminalNode OR() { return getToken(PLpgSQLParser.OR, 0); }
		public TerminalNode ORDER() { return getToken(PLpgSQLParser.ORDER, 0); }
		public TerminalNode PLACING() { return getToken(PLpgSQLParser.PLACING, 0); }
		public TerminalNode PRIMARY() { return getToken(PLpgSQLParser.PRIMARY, 0); }
		public TerminalNode REFERENCES() { return getToken(PLpgSQLParser.REFERENCES, 0); }
		public TerminalNode RETURNING() { return getToken(PLpgSQLParser.RETURNING, 0); }
		public TerminalNode SELECT() { return getToken(PLpgSQLParser.SELECT, 0); }
		public TerminalNode SESSION_USER() { return getToken(PLpgSQLParser.SESSION_USER, 0); }
		public TerminalNode SOME() { return getToken(PLpgSQLParser.SOME, 0); }
		public TerminalNode SYMMETRIC() { return getToken(PLpgSQLParser.SYMMETRIC, 0); }
		public TerminalNode TABLE() { return getToken(PLpgSQLParser.TABLE, 0); }
		public TerminalNode THEN() { return getToken(PLpgSQLParser.THEN, 0); }
		public TerminalNode TO() { return getToken(PLpgSQLParser.TO, 0); }
		public TerminalNode TRAILING() { return getToken(PLpgSQLParser.TRAILING, 0); }
		public TerminalNode TRUE() { return getToken(PLpgSQLParser.TRUE, 0); }
		public TerminalNode UNION() { return getToken(PLpgSQLParser.UNION, 0); }
		public TerminalNode UNIQUE() { return getToken(PLpgSQLParser.UNIQUE, 0); }
		public TerminalNode USER() { return getToken(PLpgSQLParser.USER, 0); }
		public TerminalNode USING() { return getToken(PLpgSQLParser.USING, 0); }
		public TerminalNode VARIADIC() { return getToken(PLpgSQLParser.VARIADIC, 0); }
		public TerminalNode WHEN() { return getToken(PLpgSQLParser.WHEN, 0); }
		public TerminalNode WHERE() { return getToken(PLpgSQLParser.WHERE, 0); }
		public TerminalNode WINDOW() { return getToken(PLpgSQLParser.WINDOW, 0); }
		public TerminalNode WITH() { return getToken(PLpgSQLParser.WITH, 0); }
		public Tokens_reservedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tokens_reserved; }
	}

	public final Tokens_reservedContext tokens_reserved() throws RecognitionException {
		Tokens_reservedContext _localctx = new Tokens_reservedContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_tokens_reserved);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5346);
			_la = _input.LA(1);
			if ( !(((((_la - 366)) & ~0x3f) == 0 && ((1L << (_la - 366)) & ((1L << (ALL - 366)) | (1L << (ANALYSE - 366)) | (1L << (ANALYZE - 366)) | (1L << (AND - 366)) | (1L << (ANY - 366)) | (1L << (ARRAY - 366)) | (1L << (AS - 366)) | (1L << (ASC - 366)) | (1L << (ASYMMETRIC - 366)) | (1L << (BOTH - 366)) | (1L << (CASE - 366)) | (1L << (CAST - 366)) | (1L << (CHECK - 366)) | (1L << (COLLATE - 366)) | (1L << (COLUMN - 366)) | (1L << (CONSTRAINT - 366)) | (1L << (CREATE - 366)) | (1L << (CURRENT_CATALOG - 366)) | (1L << (CURRENT_DATE - 366)) | (1L << (CURRENT_ROLE - 366)) | (1L << (CURRENT_TIME - 366)) | (1L << (CURRENT_TIMESTAMP - 366)) | (1L << (CURRENT_USER - 366)) | (1L << (DEFAULT - 366)) | (1L << (DEFERRABLE - 366)) | (1L << (DESC - 366)) | (1L << (DISTINCT - 366)) | (1L << (DO - 366)) | (1L << (ELSE - 366)) | (1L << (END - 366)) | (1L << (EXCEPT - 366)) | (1L << (FALSE - 366)) | (1L << (FETCH - 366)) | (1L << (FOR - 366)) | (1L << (FOREIGN - 366)) | (1L << (FROM - 366)) | (1L << (GRANT - 366)) | (1L << (GROUP - 366)) | (1L << (HAVING - 366)) | (1L << (IN - 366)) | (1L << (INITIALLY - 366)) | (1L << (INTERSECT - 366)) | (1L << (INTO - 366)) | (1L << (LATERAL - 366)) | (1L << (LEADING - 366)) | (1L << (LIMIT - 366)) | (1L << (LOCALTIME - 366)) | (1L << (LOCALTIMESTAMP - 366)) | (1L << (NOT - 366)) | (1L << (NULL - 366)) | (1L << (OFFSET - 366)) | (1L << (ON - 366)) | (1L << (ONLY - 366)) | (1L << (OR - 366)) | (1L << (ORDER - 366)) | (1L << (PLACING - 366)) | (1L << (PRIMARY - 366)) | (1L << (REFERENCES - 366)) | (1L << (RETURNING - 366)) | (1L << (SELECT - 366)) | (1L << (SESSION_USER - 366)) | (1L << (SOME - 366)) | (1L << (SYMMETRIC - 366)) | (1L << (TABLE - 366)))) != 0) || ((((_la - 430)) & ~0x3f) == 0 && ((1L << (_la - 430)) & ((1L << (THEN - 430)) | (1L << (TO - 430)) | (1L << (TRAILING - 430)) | (1L << (TRUE - 430)) | (1L << (UNION - 430)) | (1L << (UNIQUE - 430)) | (1L << (USER - 430)) | (1L << (USING - 430)) | (1L << (VARIADIC - 430)) | (1L << (WHEN - 430)) | (1L << (WHERE - 430)) | (1L << (WINDOW - 430)) | (1L << (WITH - 430)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tokens_nonkeywordContext extends ParserRuleContext {
		public TerminalNode ALIGNMENT() { return getToken(PLpgSQLParser.ALIGNMENT, 0); }
		public TerminalNode BASETYPE() { return getToken(PLpgSQLParser.BASETYPE, 0); }
		public TerminalNode BUFFERS() { return getToken(PLpgSQLParser.BUFFERS, 0); }
		public TerminalNode BYPASSRLS() { return getToken(PLpgSQLParser.BYPASSRLS, 0); }
		public TerminalNode CANONICAL() { return getToken(PLpgSQLParser.CANONICAL, 0); }
		public TerminalNode CATEGORY() { return getToken(PLpgSQLParser.CATEGORY, 0); }
		public TerminalNode COLLATABLE() { return getToken(PLpgSQLParser.COLLATABLE, 0); }
		public TerminalNode COMBINEFUNC() { return getToken(PLpgSQLParser.COMBINEFUNC, 0); }
		public TerminalNode COMMUTATOR() { return getToken(PLpgSQLParser.COMMUTATOR, 0); }
		public TerminalNode CONNECT() { return getToken(PLpgSQLParser.CONNECT, 0); }
		public TerminalNode COSTS() { return getToken(PLpgSQLParser.COSTS, 0); }
		public TerminalNode CREATEDB() { return getToken(PLpgSQLParser.CREATEDB, 0); }
		public TerminalNode CREATEROLE() { return getToken(PLpgSQLParser.CREATEROLE, 0); }
		public TerminalNode DESERIALFUNC() { return getToken(PLpgSQLParser.DESERIALFUNC, 0); }
		public TerminalNode DETERMINISTIC() { return getToken(PLpgSQLParser.DETERMINISTIC, 0); }
		public TerminalNode DISABLE_PAGE_SKIPPING() { return getToken(PLpgSQLParser.DISABLE_PAGE_SKIPPING, 0); }
		public TerminalNode ELEMENT() { return getToken(PLpgSQLParser.ELEMENT, 0); }
		public TerminalNode EXTENDED() { return getToken(PLpgSQLParser.EXTENDED, 0); }
		public TerminalNode FINALFUNC() { return getToken(PLpgSQLParser.FINALFUNC, 0); }
		public TerminalNode FINALFUNC_EXTRA() { return getToken(PLpgSQLParser.FINALFUNC_EXTRA, 0); }
		public TerminalNode FINALFUNC_MODIFY() { return getToken(PLpgSQLParser.FINALFUNC_MODIFY, 0); }
		public TerminalNode FORCE_NOT_NULL() { return getToken(PLpgSQLParser.FORCE_NOT_NULL, 0); }
		public TerminalNode FORCE_NULL() { return getToken(PLpgSQLParser.FORCE_NULL, 0); }
		public TerminalNode FORCE_QUOTE() { return getToken(PLpgSQLParser.FORCE_QUOTE, 0); }
		public TerminalNode FORMAT() { return getToken(PLpgSQLParser.FORMAT, 0); }
		public TerminalNode GETTOKEN() { return getToken(PLpgSQLParser.GETTOKEN, 0); }
		public TerminalNode HASH() { return getToken(PLpgSQLParser.HASH, 0); }
		public TerminalNode HASHES() { return getToken(PLpgSQLParser.HASHES, 0); }
		public TerminalNode HEADLINE() { return getToken(PLpgSQLParser.HEADLINE, 0); }
		public TerminalNode HYPOTHETICAL() { return getToken(PLpgSQLParser.HYPOTHETICAL, 0); }
		public TerminalNode INDEX_CLEANUP() { return getToken(PLpgSQLParser.INDEX_CLEANUP, 0); }
		public TerminalNode INIT() { return getToken(PLpgSQLParser.INIT, 0); }
		public TerminalNode INITCOND() { return getToken(PLpgSQLParser.INITCOND, 0); }
		public TerminalNode INTERNALLENGTH() { return getToken(PLpgSQLParser.INTERNALLENGTH, 0); }
		public TerminalNode JSON() { return getToken(PLpgSQLParser.JSON, 0); }
		public TerminalNode LC_COLLATE() { return getToken(PLpgSQLParser.LC_COLLATE, 0); }
		public TerminalNode LC_CTYPE() { return getToken(PLpgSQLParser.LC_CTYPE, 0); }
		public TerminalNode LEFTARG() { return getToken(PLpgSQLParser.LEFTARG, 0); }
		public TerminalNode LEXIZE() { return getToken(PLpgSQLParser.LEXIZE, 0); }
		public TerminalNode LEXTYPES() { return getToken(PLpgSQLParser.LEXTYPES, 0); }
		public TerminalNode LIST() { return getToken(PLpgSQLParser.LIST, 0); }
		public TerminalNode LOCALE() { return getToken(PLpgSQLParser.LOCALE, 0); }
		public TerminalNode LOGIN() { return getToken(PLpgSQLParser.LOGIN, 0); }
		public TerminalNode MAIN() { return getToken(PLpgSQLParser.MAIN, 0); }
		public TerminalNode MERGES() { return getToken(PLpgSQLParser.MERGES, 0); }
		public TerminalNode MFINALFUNC() { return getToken(PLpgSQLParser.MFINALFUNC, 0); }
		public TerminalNode MFINALFUNC_EXTRA() { return getToken(PLpgSQLParser.MFINALFUNC_EXTRA, 0); }
		public TerminalNode MFINALFUNC_MODIFY() { return getToken(PLpgSQLParser.MFINALFUNC_MODIFY, 0); }
		public TerminalNode MINITCOND() { return getToken(PLpgSQLParser.MINITCOND, 0); }
		public TerminalNode MINVFUNC() { return getToken(PLpgSQLParser.MINVFUNC, 0); }
		public TerminalNode MODULUS() { return getToken(PLpgSQLParser.MODULUS, 0); }
		public TerminalNode MSFUNC() { return getToken(PLpgSQLParser.MSFUNC, 0); }
		public TerminalNode MSSPACE() { return getToken(PLpgSQLParser.MSSPACE, 0); }
		public TerminalNode MSTYPE() { return getToken(PLpgSQLParser.MSTYPE, 0); }
		public TerminalNode NEGATOR() { return getToken(PLpgSQLParser.NEGATOR, 0); }
		public TerminalNode NOBYPASSRLS() { return getToken(PLpgSQLParser.NOBYPASSRLS, 0); }
		public TerminalNode NOCREATEDB() { return getToken(PLpgSQLParser.NOCREATEDB, 0); }
		public TerminalNode NOCREATEROLE() { return getToken(PLpgSQLParser.NOCREATEROLE, 0); }
		public TerminalNode NOINHERIT() { return getToken(PLpgSQLParser.NOINHERIT, 0); }
		public TerminalNode NOLOGIN() { return getToken(PLpgSQLParser.NOLOGIN, 0); }
		public TerminalNode NOREPLICATION() { return getToken(PLpgSQLParser.NOREPLICATION, 0); }
		public TerminalNode NOSUPERUSER() { return getToken(PLpgSQLParser.NOSUPERUSER, 0); }
		public TerminalNode OUTPUT() { return getToken(PLpgSQLParser.OUTPUT, 0); }
		public TerminalNode PASSEDBYVALUE() { return getToken(PLpgSQLParser.PASSEDBYVALUE, 0); }
		public TerminalNode PATH() { return getToken(PLpgSQLParser.PATH, 0); }
		public TerminalNode PERMISSIVE() { return getToken(PLpgSQLParser.PERMISSIVE, 0); }
		public TerminalNode PLAIN() { return getToken(PLpgSQLParser.PLAIN, 0); }
		public TerminalNode PREFERRED() { return getToken(PLpgSQLParser.PREFERRED, 0); }
		public TerminalNode PROVIDER() { return getToken(PLpgSQLParser.PROVIDER, 0); }
		public TerminalNode READ_ONLY() { return getToken(PLpgSQLParser.READ_ONLY, 0); }
		public TerminalNode READ_WRITE() { return getToken(PLpgSQLParser.READ_WRITE, 0); }
		public TerminalNode RECEIVE() { return getToken(PLpgSQLParser.RECEIVE, 0); }
		public TerminalNode REPLICATION() { return getToken(PLpgSQLParser.REPLICATION, 0); }
		public TerminalNode REMAINDER() { return getToken(PLpgSQLParser.REMAINDER, 0); }
		public TerminalNode RESTRICTED() { return getToken(PLpgSQLParser.RESTRICTED, 0); }
		public TerminalNode RESTRICTIVE() { return getToken(PLpgSQLParser.RESTRICTIVE, 0); }
		public TerminalNode RIGHTARG() { return getToken(PLpgSQLParser.RIGHTARG, 0); }
		public TerminalNode SAFE() { return getToken(PLpgSQLParser.SAFE, 0); }
		public TerminalNode SEND() { return getToken(PLpgSQLParser.SEND, 0); }
		public TerminalNode SERIALFUNC() { return getToken(PLpgSQLParser.SERIALFUNC, 0); }
		public TerminalNode SETTINGS() { return getToken(PLpgSQLParser.SETTINGS, 0); }
		public TerminalNode SFUNC() { return getToken(PLpgSQLParser.SFUNC, 0); }
		public TerminalNode SHAREABLE() { return getToken(PLpgSQLParser.SHAREABLE, 0); }
		public TerminalNode SKIP_LOCKED() { return getToken(PLpgSQLParser.SKIP_LOCKED, 0); }
		public TerminalNode SORTOP() { return getToken(PLpgSQLParser.SORTOP, 0); }
		public TerminalNode SSPACE() { return getToken(PLpgSQLParser.SSPACE, 0); }
		public TerminalNode STYPE() { return getToken(PLpgSQLParser.STYPE, 0); }
		public TerminalNode SUBTYPE() { return getToken(PLpgSQLParser.SUBTYPE, 0); }
		public TerminalNode SUBTYPE_DIFF() { return getToken(PLpgSQLParser.SUBTYPE_DIFF, 0); }
		public TerminalNode SUBTYPE_OPCLASS() { return getToken(PLpgSQLParser.SUBTYPE_OPCLASS, 0); }
		public TerminalNode SUMMARY() { return getToken(PLpgSQLParser.SUMMARY, 0); }
		public TerminalNode SUPERUSER() { return getToken(PLpgSQLParser.SUPERUSER, 0); }
		public TerminalNode TIMING() { return getToken(PLpgSQLParser.TIMING, 0); }
		public TerminalNode TYPMOD_IN() { return getToken(PLpgSQLParser.TYPMOD_IN, 0); }
		public TerminalNode TYPMOD_OUT() { return getToken(PLpgSQLParser.TYPMOD_OUT, 0); }
		public TerminalNode UNSAFE() { return getToken(PLpgSQLParser.UNSAFE, 0); }
		public TerminalNode USAGE() { return getToken(PLpgSQLParser.USAGE, 0); }
		public TerminalNode VARIABLE() { return getToken(PLpgSQLParser.VARIABLE, 0); }
		public TerminalNode YAML() { return getToken(PLpgSQLParser.YAML, 0); }
		public TerminalNode ALIAS() { return getToken(PLpgSQLParser.ALIAS, 0); }
		public TerminalNode ASSERT() { return getToken(PLpgSQLParser.ASSERT, 0); }
		public TerminalNode CONSTANT() { return getToken(PLpgSQLParser.CONSTANT, 0); }
		public TerminalNode DATATYPE() { return getToken(PLpgSQLParser.DATATYPE, 0); }
		public TerminalNode DEBUG() { return getToken(PLpgSQLParser.DEBUG, 0); }
		public TerminalNode DETAIL() { return getToken(PLpgSQLParser.DETAIL, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(PLpgSQLParser.DIAGNOSTICS, 0); }
		public TerminalNode ELSEIF() { return getToken(PLpgSQLParser.ELSEIF, 0); }
		public TerminalNode ELSIF() { return getToken(PLpgSQLParser.ELSIF, 0); }
		public TerminalNode ERRCODE() { return getToken(PLpgSQLParser.ERRCODE, 0); }
		public TerminalNode EXIT() { return getToken(PLpgSQLParser.EXIT, 0); }
		public TerminalNode EXCEPTION() { return getToken(PLpgSQLParser.EXCEPTION, 0); }
		public TerminalNode FOREACH() { return getToken(PLpgSQLParser.FOREACH, 0); }
		public TerminalNode GET() { return getToken(PLpgSQLParser.GET, 0); }
		public TerminalNode HINT() { return getToken(PLpgSQLParser.HINT, 0); }
		public TerminalNode INFO() { return getToken(PLpgSQLParser.INFO, 0); }
		public TerminalNode LOG() { return getToken(PLpgSQLParser.LOG, 0); }
		public TerminalNode LOOP() { return getToken(PLpgSQLParser.LOOP, 0); }
		public TerminalNode MESSAGE() { return getToken(PLpgSQLParser.MESSAGE, 0); }
		public TerminalNode NOTICE() { return getToken(PLpgSQLParser.NOTICE, 0); }
		public TerminalNode OPEN() { return getToken(PLpgSQLParser.OPEN, 0); }
		public TerminalNode PERFORM() { return getToken(PLpgSQLParser.PERFORM, 0); }
		public TerminalNode QUERY() { return getToken(PLpgSQLParser.QUERY, 0); }
		public TerminalNode RAISE() { return getToken(PLpgSQLParser.RAISE, 0); }
		public TerminalNode RECORD() { return getToken(PLpgSQLParser.RECORD, 0); }
		public TerminalNode RETURN() { return getToken(PLpgSQLParser.RETURN, 0); }
		public TerminalNode REVERSE() { return getToken(PLpgSQLParser.REVERSE, 0); }
		public TerminalNode ROWTYPE() { return getToken(PLpgSQLParser.ROWTYPE, 0); }
		public TerminalNode SLICE() { return getToken(PLpgSQLParser.SLICE, 0); }
		public TerminalNode SQLSTATE() { return getToken(PLpgSQLParser.SQLSTATE, 0); }
		public TerminalNode STACKED() { return getToken(PLpgSQLParser.STACKED, 0); }
		public TerminalNode WARNING() { return getToken(PLpgSQLParser.WARNING, 0); }
		public TerminalNode WHILE() { return getToken(PLpgSQLParser.WHILE, 0); }
		public Tokens_nonkeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tokens_nonkeyword; }
	}

	public final Tokens_nonkeywordContext tokens_nonkeyword() throws RecognitionException {
		Tokens_nonkeywordContext _localctx = new Tokens_nonkeywordContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_tokens_nonkeyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5348);
			_la = _input.LA(1);
			if ( !(((((_la - 443)) & ~0x3f) == 0 && ((1L << (_la - 443)) & ((1L << (ALIGNMENT - 443)) | (1L << (BASETYPE - 443)) | (1L << (BUFFERS - 443)) | (1L << (BYPASSRLS - 443)) | (1L << (CANONICAL - 443)) | (1L << (CATEGORY - 443)) | (1L << (COLLATABLE - 443)) | (1L << (COMBINEFUNC - 443)) | (1L << (COMMUTATOR - 443)) | (1L << (CONNECT - 443)) | (1L << (COSTS - 443)) | (1L << (CREATEDB - 443)) | (1L << (CREATEROLE - 443)) | (1L << (DESERIALFUNC - 443)) | (1L << (DETERMINISTIC - 443)) | (1L << (DISABLE_PAGE_SKIPPING - 443)) | (1L << (ELEMENT - 443)) | (1L << (EXTENDED - 443)) | (1L << (FINALFUNC - 443)) | (1L << (FINALFUNC_EXTRA - 443)) | (1L << (FINALFUNC_MODIFY - 443)) | (1L << (FORCE_NOT_NULL - 443)) | (1L << (FORCE_NULL - 443)) | (1L << (FORCE_QUOTE - 443)) | (1L << (FORMAT - 443)) | (1L << (GETTOKEN - 443)) | (1L << (HASH - 443)) | (1L << (HASHES - 443)) | (1L << (HEADLINE - 443)) | (1L << (HYPOTHETICAL - 443)) | (1L << (INDEX_CLEANUP - 443)) | (1L << (INIT - 443)) | (1L << (INITCOND - 443)) | (1L << (INTERNALLENGTH - 443)) | (1L << (JSON - 443)) | (1L << (LC_COLLATE - 443)) | (1L << (LC_CTYPE - 443)) | (1L << (LEFTARG - 443)) | (1L << (LEXIZE - 443)) | (1L << (LEXTYPES - 443)) | (1L << (LIST - 443)) | (1L << (LOCALE - 443)) | (1L << (LOGIN - 443)) | (1L << (MAIN - 443)) | (1L << (MERGES - 443)) | (1L << (MFINALFUNC - 443)) | (1L << (MFINALFUNC_EXTRA - 443)) | (1L << (MFINALFUNC_MODIFY - 443)) | (1L << (MINITCOND - 443)) | (1L << (MINVFUNC - 443)) | (1L << (MODULUS - 443)) | (1L << (MSFUNC - 443)) | (1L << (MSSPACE - 443)) | (1L << (MSTYPE - 443)) | (1L << (NEGATOR - 443)) | (1L << (NOBYPASSRLS - 443)) | (1L << (NOCREATEDB - 443)) | (1L << (NOCREATEROLE - 443)) | (1L << (NOINHERIT - 443)) | (1L << (NOLOGIN - 443)) | (1L << (NOREPLICATION - 443)) | (1L << (NOSUPERUSER - 443)) | (1L << (OUTPUT - 443)) | (1L << (PASSEDBYVALUE - 443)))) != 0) || ((((_la - 507)) & ~0x3f) == 0 && ((1L << (_la - 507)) & ((1L << (PATH - 507)) | (1L << (PERMISSIVE - 507)) | (1L << (PLAIN - 507)) | (1L << (PREFERRED - 507)) | (1L << (PROVIDER - 507)) | (1L << (READ_ONLY - 507)) | (1L << (READ_WRITE - 507)) | (1L << (RECEIVE - 507)) | (1L << (REMAINDER - 507)) | (1L << (REPLICATION - 507)) | (1L << (RESTRICTED - 507)) | (1L << (RESTRICTIVE - 507)) | (1L << (RIGHTARG - 507)) | (1L << (SAFE - 507)) | (1L << (SEND - 507)) | (1L << (SERIALFUNC - 507)) | (1L << (SETTINGS - 507)) | (1L << (SFUNC - 507)) | (1L << (SHAREABLE - 507)) | (1L << (SKIP_LOCKED - 507)) | (1L << (SORTOP - 507)) | (1L << (SSPACE - 507)) | (1L << (STYPE - 507)) | (1L << (SUBTYPE_DIFF - 507)) | (1L << (SUBTYPE_OPCLASS - 507)) | (1L << (SUBTYPE - 507)) | (1L << (SUMMARY - 507)) | (1L << (SUPERUSER - 507)) | (1L << (TIMING - 507)) | (1L << (TYPMOD_IN - 507)) | (1L << (TYPMOD_OUT - 507)) | (1L << (UNSAFE - 507)) | (1L << (USAGE - 507)) | (1L << (VARIABLE - 507)) | (1L << (YAML - 507)) | (1L << (ALIAS - 507)) | (1L << (ASSERT - 507)) | (1L << (CONSTANT - 507)) | (1L << (DATATYPE - 507)) | (1L << (DEBUG - 507)) | (1L << (DETAIL - 507)) | (1L << (DIAGNOSTICS - 507)) | (1L << (ELSEIF - 507)) | (1L << (ELSIF - 507)) | (1L << (ERRCODE - 507)) | (1L << (EXIT - 507)) | (1L << (EXCEPTION - 507)) | (1L << (FOREACH - 507)) | (1L << (GET - 507)) | (1L << (HINT - 507)) | (1L << (INFO - 507)) | (1L << (LOG - 507)) | (1L << (LOOP - 507)) | (1L << (MESSAGE - 507)) | (1L << (NOTICE - 507)) | (1L << (OPEN - 507)) | (1L << (PERFORM - 507)) | (1L << (QUERY - 507)) | (1L << (RAISE - 507)) | (1L << (RECORD - 507)) | (1L << (RETURN - 507)) | (1L << (REVERSE - 507)) | (1L << (ROWTYPE - 507)) | (1L << (SLICE - 507)))) != 0) || ((((_la - 571)) & ~0x3f) == 0 && ((1L << (_la - 571)) & ((1L << (SQLSTATE - 571)) | (1L << (STACKED - 571)) | (1L << (WARNING - 571)) | (1L << (WHILE - 571)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_qualified_name_nontypeContext extends ParserRuleContext {
		public IdentifierContext schema;
		public Identifier_nontypeContext identifier_nontype() {
			return getRuleContext(Identifier_nontypeContext.class,0);
		}
		public TerminalNode DOT() { return getToken(PLpgSQLParser.DOT, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Schema_qualified_name_nontypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_qualified_name_nontype; }
	}

	public final Schema_qualified_name_nontypeContext schema_qualified_name_nontype() throws RecognitionException {
		Schema_qualified_name_nontypeContext _localctx = new Schema_qualified_name_nontypeContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_schema_qualified_name_nontype);
		try {
			setState(5355);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,661,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5350);
				identifier_nontype();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5351);
				((Schema_qualified_name_nontypeContext)_localctx).schema = identifier();
				setState(5352);
				match(DOT);
				setState(5353);
				identifier_nontype();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_listContext extends ParserRuleContext {
		public List<Data_typeContext> data_type() {
			return getRuleContexts(Data_typeContext.class);
		}
		public Data_typeContext data_type(int i) {
			return getRuleContext(Data_typeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Type_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_list; }
	}

	public final Type_listContext type_list() throws RecognitionException {
		Type_listContext _localctx = new Type_listContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_type_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5357);
			data_type();
			setState(5362);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5358);
				match(COMMA);
				setState(5359);
				data_type();
				}
				}
				setState(5364);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_typeContext extends ParserRuleContext {
		public Predefined_typeContext predefined_type() {
			return getRuleContext(Predefined_typeContext.class,0);
		}
		public TerminalNode SETOF() { return getToken(PLpgSQLParser.SETOF, 0); }
		public TerminalNode ARRAY() { return getToken(PLpgSQLParser.ARRAY, 0); }
		public List<Array_typeContext> array_type() {
			return getRuleContexts(Array_typeContext.class);
		}
		public Array_typeContext array_type(int i) {
			return getRuleContext(Array_typeContext.class,i);
		}
		public Data_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_type; }
	}

	public final Data_typeContext data_type() throws RecognitionException {
		Data_typeContext _localctx = new Data_typeContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_data_type);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5366);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,663,_ctx) ) {
			case 1:
				{
				setState(5365);
				match(SETOF);
				}
				break;
			}
			setState(5368);
			predefined_type();
			setState(5378);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,666,_ctx) ) {
			case 1:
				{
				setState(5369);
				match(ARRAY);
				setState(5371);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,664,_ctx) ) {
				case 1:
					{
					setState(5370);
					array_type();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(5374); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(5373);
						array_type();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5376); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,665,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Array_typeContext extends ParserRuleContext {
		public TerminalNode LEFT_BRACKET() { return getToken(PLpgSQLParser.LEFT_BRACKET, 0); }
		public TerminalNode RIGHT_BRACKET() { return getToken(PLpgSQLParser.RIGHT_BRACKET, 0); }
		public TerminalNode NUMBER_LITERAL() { return getToken(PLpgSQLParser.NUMBER_LITERAL, 0); }
		public Array_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_array_type; }
	}

	public final Array_typeContext array_type() throws RecognitionException {
		Array_typeContext _localctx = new Array_typeContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_array_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5380);
			match(LEFT_BRACKET);
			setState(5382);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NUMBER_LITERAL) {
				{
				setState(5381);
				match(NUMBER_LITERAL);
				}
			}

			setState(5384);
			match(RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Predefined_typeContext extends ParserRuleContext {
		public TerminalNode BIGINT() { return getToken(PLpgSQLParser.BIGINT, 0); }
		public TerminalNode BIT() { return getToken(PLpgSQLParser.BIT, 0); }
		public TerminalNode VARYING() { return getToken(PLpgSQLParser.VARYING, 0); }
		public Type_lengthContext type_length() {
			return getRuleContext(Type_lengthContext.class,0);
		}
		public TerminalNode BOOLEAN() { return getToken(PLpgSQLParser.BOOLEAN, 0); }
		public TerminalNode DEC() { return getToken(PLpgSQLParser.DEC, 0); }
		public Precision_paramContext precision_param() {
			return getRuleContext(Precision_paramContext.class,0);
		}
		public TerminalNode DECIMAL() { return getToken(PLpgSQLParser.DECIMAL, 0); }
		public TerminalNode DOUBLE() { return getToken(PLpgSQLParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(PLpgSQLParser.PRECISION, 0); }
		public TerminalNode FLOAT() { return getToken(PLpgSQLParser.FLOAT, 0); }
		public TerminalNode INT() { return getToken(PLpgSQLParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(PLpgSQLParser.INTEGER, 0); }
		public TerminalNode INTERVAL() { return getToken(PLpgSQLParser.INTERVAL, 0); }
		public Interval_fieldContext interval_field() {
			return getRuleContext(Interval_fieldContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(PLpgSQLParser.CHARACTER, 0); }
		public TerminalNode CHAR() { return getToken(PLpgSQLParser.CHAR, 0); }
		public TerminalNode NATIONAL() { return getToken(PLpgSQLParser.NATIONAL, 0); }
		public TerminalNode NCHAR() { return getToken(PLpgSQLParser.NCHAR, 0); }
		public TerminalNode NUMERIC() { return getToken(PLpgSQLParser.NUMERIC, 0); }
		public TerminalNode REAL() { return getToken(PLpgSQLParser.REAL, 0); }
		public TerminalNode SMALLINT() { return getToken(PLpgSQLParser.SMALLINT, 0); }
		public List<TerminalNode> TIME() { return getTokens(PLpgSQLParser.TIME); }
		public TerminalNode TIME(int i) {
			return getToken(PLpgSQLParser.TIME, i);
		}
		public TerminalNode ZONE() { return getToken(PLpgSQLParser.ZONE, 0); }
		public TerminalNode WITH() { return getToken(PLpgSQLParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(PLpgSQLParser.WITHOUT, 0); }
		public TerminalNode TIMESTAMP() { return getToken(PLpgSQLParser.TIMESTAMP, 0); }
		public TerminalNode VARCHAR() { return getToken(PLpgSQLParser.VARCHAR, 0); }
		public Schema_qualified_name_nontypeContext schema_qualified_name_nontype() {
			return getRuleContext(Schema_qualified_name_nontypeContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Predefined_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predefined_type; }
	}

	public final Predefined_typeContext predefined_type() throws RecognitionException {
		Predefined_typeContext _localctx = new Predefined_typeContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_predefined_type);
		int _la;
		try {
			setState(5477);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,688,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5386);
				match(BIGINT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5387);
				match(BIT);
				setState(5389);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,668,_ctx) ) {
				case 1:
					{
					setState(5388);
					match(VARYING);
					}
					break;
				}
				setState(5392);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,669,_ctx) ) {
				case 1:
					{
					setState(5391);
					type_length();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5394);
				match(BOOLEAN);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5395);
				match(DEC);
				setState(5397);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,670,_ctx) ) {
				case 1:
					{
					setState(5396);
					precision_param();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5399);
				match(DECIMAL);
				setState(5401);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,671,_ctx) ) {
				case 1:
					{
					setState(5400);
					precision_param();
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5403);
				match(DOUBLE);
				setState(5404);
				match(PRECISION);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5405);
				match(FLOAT);
				setState(5407);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,672,_ctx) ) {
				case 1:
					{
					setState(5406);
					precision_param();
					}
					break;
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5409);
				match(INT);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5410);
				match(INTEGER);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5411);
				match(INTERVAL);
				setState(5413);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,673,_ctx) ) {
				case 1:
					{
					setState(5412);
					interval_field();
					}
					break;
				}
				setState(5416);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,674,_ctx) ) {
				case 1:
					{
					setState(5415);
					type_length();
					}
					break;
				}
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5419);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NATIONAL) {
					{
					setState(5418);
					match(NATIONAL);
					}
				}

				setState(5421);
				_la = _input.LA(1);
				if ( !(_la==CHAR || _la==CHARACTER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5423);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,676,_ctx) ) {
				case 1:
					{
					setState(5422);
					match(VARYING);
					}
					break;
				}
				setState(5426);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,677,_ctx) ) {
				case 1:
					{
					setState(5425);
					type_length();
					}
					break;
				}
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5428);
				match(NCHAR);
				setState(5430);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,678,_ctx) ) {
				case 1:
					{
					setState(5429);
					match(VARYING);
					}
					break;
				}
				setState(5433);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,679,_ctx) ) {
				case 1:
					{
					setState(5432);
					type_length();
					}
					break;
				}
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5435);
				match(NUMERIC);
				setState(5437);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,680,_ctx) ) {
				case 1:
					{
					setState(5436);
					precision_param();
					}
					break;
				}
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5439);
				match(REAL);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(5440);
				match(SMALLINT);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(5441);
				match(TIME);
				setState(5443);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,681,_ctx) ) {
				case 1:
					{
					setState(5442);
					type_length();
					}
					break;
				}
				setState(5448);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,682,_ctx) ) {
				case 1:
					{
					setState(5445);
					_la = _input.LA(1);
					if ( !(_la==WITHOUT || _la==WITH) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5446);
					match(TIME);
					setState(5447);
					match(ZONE);
					}
					break;
				}
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(5450);
				match(TIMESTAMP);
				setState(5452);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,683,_ctx) ) {
				case 1:
					{
					setState(5451);
					type_length();
					}
					break;
				}
				setState(5457);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,684,_ctx) ) {
				case 1:
					{
					setState(5454);
					_la = _input.LA(1);
					if ( !(_la==WITHOUT || _la==WITH) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5455);
					match(TIME);
					setState(5456);
					match(ZONE);
					}
					break;
				}
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(5459);
				match(VARCHAR);
				setState(5461);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,685,_ctx) ) {
				case 1:
					{
					setState(5460);
					type_length();
					}
					break;
				}
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(5463);
				schema_qualified_name_nontype();
				setState(5475);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,687,_ctx) ) {
				case 1:
					{
					setState(5464);
					match(LEFT_PAREN);
					setState(5465);
					vex(0);
					setState(5470);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(5466);
						match(COMMA);
						setState(5467);
						vex(0);
						}
						}
						setState(5472);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(5473);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interval_fieldContext extends ParserRuleContext {
		public TerminalNode YEAR() { return getToken(PLpgSQLParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(PLpgSQLParser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(PLpgSQLParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(PLpgSQLParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(PLpgSQLParser.MINUTE, 0); }
		public TerminalNode SECOND() { return getToken(PLpgSQLParser.SECOND, 0); }
		public TerminalNode TO() { return getToken(PLpgSQLParser.TO, 0); }
		public Interval_fieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_field; }
	}

	public final Interval_fieldContext interval_field() throws RecognitionException {
		Interval_fieldContext _localctx = new Interval_fieldContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_interval_field);
		try {
			setState(5506);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,689,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5479);
				match(YEAR);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5480);
				match(MONTH);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5481);
				match(DAY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5482);
				match(HOUR);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5483);
				match(MINUTE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5484);
				match(SECOND);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5485);
				match(YEAR);
				setState(5486);
				match(TO);
				setState(5487);
				match(MONTH);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5488);
				match(DAY);
				setState(5489);
				match(TO);
				setState(5490);
				match(HOUR);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5491);
				match(DAY);
				setState(5492);
				match(TO);
				setState(5493);
				match(MINUTE);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5494);
				match(DAY);
				setState(5495);
				match(TO);
				setState(5496);
				match(SECOND);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5497);
				match(HOUR);
				setState(5498);
				match(TO);
				setState(5499);
				match(MINUTE);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5500);
				match(HOUR);
				setState(5501);
				match(TO);
				setState(5502);
				match(SECOND);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5503);
				match(MINUTE);
				setState(5504);
				match(TO);
				setState(5505);
				match(SECOND);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_lengthContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public TerminalNode NUMBER_LITERAL() { return getToken(PLpgSQLParser.NUMBER_LITERAL, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public Type_lengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_length; }
	}

	public final Type_lengthContext type_length() throws RecognitionException {
		Type_lengthContext _localctx = new Type_lengthContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_type_length);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5508);
			match(LEFT_PAREN);
			setState(5509);
			match(NUMBER_LITERAL);
			setState(5510);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Precision_paramContext extends ParserRuleContext {
		public Token precision;
		public Token scale;
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> NUMBER_LITERAL() { return getTokens(PLpgSQLParser.NUMBER_LITERAL); }
		public TerminalNode NUMBER_LITERAL(int i) {
			return getToken(PLpgSQLParser.NUMBER_LITERAL, i);
		}
		public TerminalNode COMMA() { return getToken(PLpgSQLParser.COMMA, 0); }
		public Precision_paramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precision_param; }
	}

	public final Precision_paramContext precision_param() throws RecognitionException {
		Precision_paramContext _localctx = new Precision_paramContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_precision_param);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5512);
			match(LEFT_PAREN);
			setState(5513);
			((Precision_paramContext)_localctx).precision = match(NUMBER_LITERAL);
			setState(5516);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5514);
				match(COMMA);
				setState(5515);
				((Precision_paramContext)_localctx).scale = match(NUMBER_LITERAL);
				}
			}

			setState(5518);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VexContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public Indirection_listContext indirection_list() {
			return getRuleContext(Indirection_listContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public TerminalNode PLUS() { return getToken(PLpgSQLParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(PLpgSQLParser.MINUS, 0); }
		public OpContext op() {
			return getRuleContext(OpContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PLpgSQLParser.NOT, 0); }
		public Value_expression_primaryContext value_expression_primary() {
			return getRuleContext(Value_expression_primaryContext.class,0);
		}
		public TerminalNode AT() { return getToken(PLpgSQLParser.AT, 0); }
		public TerminalNode TIME() { return getToken(PLpgSQLParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PLpgSQLParser.ZONE, 0); }
		public TerminalNode EXP() { return getToken(PLpgSQLParser.EXP, 0); }
		public TerminalNode MULTIPLY() { return getToken(PLpgSQLParser.MULTIPLY, 0); }
		public TerminalNode DIVIDE() { return getToken(PLpgSQLParser.DIVIDE, 0); }
		public TerminalNode MODULAR() { return getToken(PLpgSQLParser.MODULAR, 0); }
		public TerminalNode BETWEEN() { return getToken(PLpgSQLParser.BETWEEN, 0); }
		public Vex_bContext vex_b() {
			return getRuleContext(Vex_bContext.class,0);
		}
		public TerminalNode AND() { return getToken(PLpgSQLParser.AND, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(PLpgSQLParser.ASYMMETRIC, 0); }
		public TerminalNode SYMMETRIC() { return getToken(PLpgSQLParser.SYMMETRIC, 0); }
		public TerminalNode LIKE() { return getToken(PLpgSQLParser.LIKE, 0); }
		public TerminalNode ILIKE() { return getToken(PLpgSQLParser.ILIKE, 0); }
		public TerminalNode SIMILAR() { return getToken(PLpgSQLParser.SIMILAR, 0); }
		public TerminalNode TO() { return getToken(PLpgSQLParser.TO, 0); }
		public TerminalNode ESCAPE() { return getToken(PLpgSQLParser.ESCAPE, 0); }
		public TerminalNode LTH() { return getToken(PLpgSQLParser.LTH, 0); }
		public TerminalNode GTH() { return getToken(PLpgSQLParser.GTH, 0); }
		public TerminalNode LEQ() { return getToken(PLpgSQLParser.LEQ, 0); }
		public TerminalNode GEQ() { return getToken(PLpgSQLParser.GEQ, 0); }
		public TerminalNode EQUAL() { return getToken(PLpgSQLParser.EQUAL, 0); }
		public TerminalNode NOT_EQUAL() { return getToken(PLpgSQLParser.NOT_EQUAL, 0); }
		public TerminalNode IS() { return getToken(PLpgSQLParser.IS, 0); }
		public TerminalNode DISTINCT() { return getToken(PLpgSQLParser.DISTINCT, 0); }
		public TerminalNode FROM() { return getToken(PLpgSQLParser.FROM, 0); }
		public TerminalNode OR() { return getToken(PLpgSQLParser.OR, 0); }
		public TerminalNode CAST_EXPRESSION() { return getToken(PLpgSQLParser.CAST_EXPRESSION, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public Collate_identifierContext collate_identifier() {
			return getRuleContext(Collate_identifierContext.class,0);
		}
		public TerminalNode IN() { return getToken(PLpgSQLParser.IN, 0); }
		public Select_stmt_no_parensContext select_stmt_no_parens() {
			return getRuleContext(Select_stmt_no_parensContext.class,0);
		}
		public Truth_valueContext truth_value() {
			return getRuleContext(Truth_valueContext.class,0);
		}
		public TerminalNode NULL() { return getToken(PLpgSQLParser.NULL, 0); }
		public TerminalNode DOCUMENT() { return getToken(PLpgSQLParser.DOCUMENT, 0); }
		public TerminalNode UNKNOWN() { return getToken(PLpgSQLParser.UNKNOWN, 0); }
		public TerminalNode OF() { return getToken(PLpgSQLParser.OF, 0); }
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public TerminalNode ISNULL() { return getToken(PLpgSQLParser.ISNULL, 0); }
		public TerminalNode NOTNULL() { return getToken(PLpgSQLParser.NOTNULL, 0); }
		public VexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vex; }
	}

	public final VexContext vex() throws RecognitionException {
		return vex(0);
	}

	private VexContext vex(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		VexContext _localctx = new VexContext(_ctx, _parentState);
		VexContext _prevctx = _localctx;
		int _startState = 558;
		enterRecursionRule(_localctx, 558, RULE_vex, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5545);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,693,_ctx) ) {
			case 1:
				{
				setState(5521);
				match(LEFT_PAREN);
				setState(5522);
				vex(0);
				setState(5523);
				match(RIGHT_PAREN);
				setState(5525);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,691,_ctx) ) {
				case 1:
					{
					setState(5524);
					indirection_list();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(5527);
				match(LEFT_PAREN);
				setState(5528);
				vex(0);
				setState(5531); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5529);
					match(COMMA);
					setState(5530);
					vex(0);
					}
					}
					setState(5533); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(5535);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				{
				setState(5537);
				_la = _input.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5538);
				vex(24);
				}
				break;
			case 4:
				{
				setState(5539);
				op();
				setState(5540);
				vex(18);
				}
				break;
			case 5:
				{
				setState(5542);
				match(NOT);
				setState(5543);
				vex(4);
				}
				break;
			case 6:
				{
				setState(5544);
				value_expression_primary();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(5682);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,710,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(5680);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,709,_ctx) ) {
					case 1:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex);
						setState(5547);
						if (!(precpred(_ctx, 23))) throw new FailedPredicateException(this, "precpred(_ctx, 23)");
						setState(5548);
						match(AT);
						setState(5549);
						match(TIME);
						setState(5550);
						match(ZONE);
						setState(5551);
						vex(24);
						}
						break;
					case 2:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex);
						setState(5552);
						if (!(precpred(_ctx, 22))) throw new FailedPredicateException(this, "precpred(_ctx, 22)");
						setState(5553);
						match(EXP);
						setState(5554);
						vex(23);
						}
						break;
					case 3:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex);
						setState(5555);
						if (!(precpred(_ctx, 21))) throw new FailedPredicateException(this, "precpred(_ctx, 21)");
						setState(5556);
						_la = _input.LA(1);
						if ( !(((((_la - 589)) & ~0x3f) == 0 && ((1L << (_la - 589)) & ((1L << (MULTIPLY - 589)) | (1L << (DIVIDE - 589)) | (1L << (MODULAR - 589)))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5557);
						vex(22);
						}
						break;
					case 4:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex);
						setState(5558);
						if (!(precpred(_ctx, 20))) throw new FailedPredicateException(this, "precpred(_ctx, 20)");
						setState(5559);
						_la = _input.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5560);
						vex(21);
						}
						break;
					case 5:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex);
						setState(5561);
						if (!(precpred(_ctx, 19))) throw new FailedPredicateException(this, "precpred(_ctx, 19)");
						setState(5562);
						op();
						setState(5563);
						vex(20);
						}
						break;
					case 6:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex);
						setState(5565);
						if (!(precpred(_ctx, 15))) throw new FailedPredicateException(this, "precpred(_ctx, 15)");
						setState(5567);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(5566);
							match(NOT);
							}
						}

						setState(5569);
						match(BETWEEN);
						setState(5571);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==ASYMMETRIC || _la==SYMMETRIC) {
							{
							setState(5570);
							_la = _input.LA(1);
							if ( !(_la==ASYMMETRIC || _la==SYMMETRIC) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
						}

						setState(5573);
						vex_b(0);
						setState(5574);
						match(AND);
						setState(5575);
						vex(16);
						}
						break;
					case 7:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex);
						setState(5577);
						if (!(precpred(_ctx, 14))) throw new FailedPredicateException(this, "precpred(_ctx, 14)");
						setState(5579);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(5578);
							match(NOT);
							}
						}

						setState(5585);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case LIKE:
							{
							setState(5581);
							match(LIKE);
							}
							break;
						case ILIKE:
							{
							setState(5582);
							match(ILIKE);
							}
							break;
						case SIMILAR:
							{
							setState(5583);
							match(SIMILAR);
							setState(5584);
							match(TO);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(5587);
						vex(15);
						}
						break;
					case 8:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex);
						setState(5588);
						if (!(precpred(_ctx, 13))) throw new FailedPredicateException(this, "precpred(_ctx, 13)");
						setState(5590);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(5589);
							match(NOT);
							}
						}

						setState(5596);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case LIKE:
							{
							setState(5592);
							match(LIKE);
							}
							break;
						case ILIKE:
							{
							setState(5593);
							match(ILIKE);
							}
							break;
						case SIMILAR:
							{
							setState(5594);
							match(SIMILAR);
							setState(5595);
							match(TO);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(5598);
						vex(0);
						setState(5599);
						match(ESCAPE);
						setState(5600);
						vex(14);
						}
						break;
					case 9:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex);
						setState(5602);
						if (!(precpred(_ctx, 12))) throw new FailedPredicateException(this, "precpred(_ctx, 12)");
						setState(5603);
						_la = _input.LA(1);
						if ( !(((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (EQUAL - 576)) | (1L << (NOT_EQUAL - 576)) | (1L << (LTH - 576)) | (1L << (LEQ - 576)) | (1L << (GTH - 576)) | (1L << (GEQ - 576)))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5604);
						vex(13);
						}
						break;
					case 10:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex);
						setState(5605);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(5606);
						match(IS);
						setState(5608);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(5607);
							match(NOT);
							}
						}

						setState(5610);
						match(DISTINCT);
						setState(5611);
						match(FROM);
						setState(5612);
						vex(11);
						}
						break;
					case 11:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex);
						setState(5613);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(5614);
						match(AND);
						setState(5615);
						vex(4);
						}
						break;
					case 12:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex);
						setState(5616);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(5617);
						match(OR);
						setState(5618);
						vex(3);
						}
						break;
					case 13:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex);
						setState(5619);
						if (!(precpred(_ctx, 28))) throw new FailedPredicateException(this, "precpred(_ctx, 28)");
						setState(5620);
						match(CAST_EXPRESSION);
						setState(5621);
						data_type();
						}
						break;
					case 14:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex);
						setState(5622);
						if (!(precpred(_ctx, 25))) throw new FailedPredicateException(this, "precpred(_ctx, 25)");
						setState(5623);
						collate_identifier();
						}
						break;
					case 15:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex);
						setState(5624);
						if (!(precpred(_ctx, 17))) throw new FailedPredicateException(this, "precpred(_ctx, 17)");
						setState(5625);
						op();
						}
						break;
					case 16:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex);
						setState(5626);
						if (!(precpred(_ctx, 16))) throw new FailedPredicateException(this, "precpred(_ctx, 16)");
						setState(5628);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(5627);
							match(NOT);
							}
						}

						setState(5630);
						match(IN);
						setState(5631);
						match(LEFT_PAREN);
						setState(5641);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,703,_ctx) ) {
						case 1:
							{
							setState(5632);
							select_stmt_no_parens();
							}
							break;
						case 2:
							{
							setState(5633);
							vex(0);
							setState(5638);
							_errHandler.sync(this);
							_la = _input.LA(1);
							while (_la==COMMA) {
								{
								{
								setState(5634);
								match(COMMA);
								setState(5635);
								vex(0);
								}
								}
								setState(5640);
								_errHandler.sync(this);
								_la = _input.LA(1);
							}
							}
							break;
						}
						setState(5643);
						match(RIGHT_PAREN);
						}
						break;
					case 17:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex);
						setState(5645);
						if (!(precpred(_ctx, 11))) throw new FailedPredicateException(this, "precpred(_ctx, 11)");
						setState(5646);
						match(IS);
						setState(5648);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(5647);
							match(NOT);
							}
						}

						setState(5652);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case FALSE:
						case ON:
						case TRUE:
							{
							setState(5650);
							truth_value();
							}
							break;
						case NULL:
							{
							setState(5651);
							match(NULL);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 18:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex);
						setState(5654);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(5655);
						match(IS);
						setState(5657);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(5656);
							match(NOT);
							}
						}

						setState(5659);
						match(DOCUMENT);
						}
						break;
					case 19:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex);
						setState(5660);
						if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
						setState(5661);
						match(IS);
						setState(5663);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(5662);
							match(NOT);
							}
						}

						setState(5665);
						match(UNKNOWN);
						}
						break;
					case 20:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex);
						setState(5666);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(5667);
						match(IS);
						setState(5669);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(5668);
							match(NOT);
							}
						}

						setState(5671);
						match(OF);
						setState(5672);
						match(LEFT_PAREN);
						setState(5673);
						type_list();
						setState(5674);
						match(RIGHT_PAREN);
						}
						break;
					case 21:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex);
						setState(5676);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(5677);
						match(ISNULL);
						}
						break;
					case 22:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex);
						setState(5678);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(5679);
						match(NOTNULL);
						}
						break;
					}
					} 
				}
				setState(5684);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,710,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Vex_bContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public Indirection_listContext indirection_list() {
			return getRuleContext(Indirection_listContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public List<Vex_bContext> vex_b() {
			return getRuleContexts(Vex_bContext.class);
		}
		public Vex_bContext vex_b(int i) {
			return getRuleContext(Vex_bContext.class,i);
		}
		public TerminalNode PLUS() { return getToken(PLpgSQLParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(PLpgSQLParser.MINUS, 0); }
		public OpContext op() {
			return getRuleContext(OpContext.class,0);
		}
		public Value_expression_primaryContext value_expression_primary() {
			return getRuleContext(Value_expression_primaryContext.class,0);
		}
		public TerminalNode EXP() { return getToken(PLpgSQLParser.EXP, 0); }
		public TerminalNode MULTIPLY() { return getToken(PLpgSQLParser.MULTIPLY, 0); }
		public TerminalNode DIVIDE() { return getToken(PLpgSQLParser.DIVIDE, 0); }
		public TerminalNode MODULAR() { return getToken(PLpgSQLParser.MODULAR, 0); }
		public TerminalNode LTH() { return getToken(PLpgSQLParser.LTH, 0); }
		public TerminalNode GTH() { return getToken(PLpgSQLParser.GTH, 0); }
		public TerminalNode LEQ() { return getToken(PLpgSQLParser.LEQ, 0); }
		public TerminalNode GEQ() { return getToken(PLpgSQLParser.GEQ, 0); }
		public TerminalNode EQUAL() { return getToken(PLpgSQLParser.EQUAL, 0); }
		public TerminalNode NOT_EQUAL() { return getToken(PLpgSQLParser.NOT_EQUAL, 0); }
		public TerminalNode IS() { return getToken(PLpgSQLParser.IS, 0); }
		public TerminalNode DISTINCT() { return getToken(PLpgSQLParser.DISTINCT, 0); }
		public TerminalNode FROM() { return getToken(PLpgSQLParser.FROM, 0); }
		public TerminalNode NOT() { return getToken(PLpgSQLParser.NOT, 0); }
		public TerminalNode CAST_EXPRESSION() { return getToken(PLpgSQLParser.CAST_EXPRESSION, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode DOCUMENT() { return getToken(PLpgSQLParser.DOCUMENT, 0); }
		public TerminalNode UNKNOWN() { return getToken(PLpgSQLParser.UNKNOWN, 0); }
		public TerminalNode OF() { return getToken(PLpgSQLParser.OF, 0); }
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public Vex_bContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vex_b; }
	}

	public final Vex_bContext vex_b() throws RecognitionException {
		return vex_b(0);
	}

	private Vex_bContext vex_b(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Vex_bContext _localctx = new Vex_bContext(_ctx, _parentState);
		Vex_bContext _prevctx = _localctx;
		int _startState = 560;
		enterRecursionRule(_localctx, 560, RULE_vex_b, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5708);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,713,_ctx) ) {
			case 1:
				{
				setState(5686);
				match(LEFT_PAREN);
				setState(5687);
				vex(0);
				setState(5688);
				match(RIGHT_PAREN);
				setState(5690);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,711,_ctx) ) {
				case 1:
					{
					setState(5689);
					indirection_list();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(5692);
				match(LEFT_PAREN);
				setState(5693);
				vex(0);
				setState(5696); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5694);
					match(COMMA);
					setState(5695);
					vex(0);
					}
					}
					setState(5698); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(5700);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				{
				setState(5702);
				_la = _input.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5703);
				vex_b(13);
				}
				break;
			case 4:
				{
				setState(5704);
				op();
				setState(5705);
				vex_b(8);
				}
				break;
			case 5:
				{
				setState(5707);
				value_expression_primary();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(5763);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,719,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(5761);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,718,_ctx) ) {
					case 1:
						{
						_localctx = new Vex_bContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex_b);
						setState(5710);
						if (!(precpred(_ctx, 12))) throw new FailedPredicateException(this, "precpred(_ctx, 12)");
						setState(5711);
						match(EXP);
						setState(5712);
						vex_b(13);
						}
						break;
					case 2:
						{
						_localctx = new Vex_bContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex_b);
						setState(5713);
						if (!(precpred(_ctx, 11))) throw new FailedPredicateException(this, "precpred(_ctx, 11)");
						setState(5714);
						_la = _input.LA(1);
						if ( !(((((_la - 589)) & ~0x3f) == 0 && ((1L << (_la - 589)) & ((1L << (MULTIPLY - 589)) | (1L << (DIVIDE - 589)) | (1L << (MODULAR - 589)))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5715);
						vex_b(12);
						}
						break;
					case 3:
						{
						_localctx = new Vex_bContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex_b);
						setState(5716);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(5717);
						_la = _input.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5718);
						vex_b(11);
						}
						break;
					case 4:
						{
						_localctx = new Vex_bContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex_b);
						setState(5719);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(5720);
						op();
						setState(5721);
						vex_b(10);
						}
						break;
					case 5:
						{
						_localctx = new Vex_bContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex_b);
						setState(5723);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(5724);
						_la = _input.LA(1);
						if ( !(((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (EQUAL - 576)) | (1L << (NOT_EQUAL - 576)) | (1L << (LTH - 576)) | (1L << (LEQ - 576)) | (1L << (GTH - 576)) | (1L << (GEQ - 576)))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5725);
						vex_b(7);
						}
						break;
					case 6:
						{
						_localctx = new Vex_bContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex_b);
						setState(5726);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(5727);
						match(IS);
						setState(5729);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(5728);
							match(NOT);
							}
						}

						setState(5731);
						match(DISTINCT);
						setState(5732);
						match(FROM);
						setState(5733);
						vex_b(6);
						}
						break;
					case 7:
						{
						_localctx = new Vex_bContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex_b);
						setState(5734);
						if (!(precpred(_ctx, 16))) throw new FailedPredicateException(this, "precpred(_ctx, 16)");
						setState(5735);
						match(CAST_EXPRESSION);
						setState(5736);
						data_type();
						}
						break;
					case 8:
						{
						_localctx = new Vex_bContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex_b);
						setState(5737);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(5738);
						op();
						}
						break;
					case 9:
						{
						_localctx = new Vex_bContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex_b);
						setState(5739);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(5740);
						match(IS);
						setState(5742);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(5741);
							match(NOT);
							}
						}

						setState(5744);
						match(DOCUMENT);
						}
						break;
					case 10:
						{
						_localctx = new Vex_bContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex_b);
						setState(5745);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(5746);
						match(IS);
						setState(5748);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(5747);
							match(NOT);
							}
						}

						setState(5750);
						match(UNKNOWN);
						}
						break;
					case 11:
						{
						_localctx = new Vex_bContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex_b);
						setState(5751);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(5752);
						match(IS);
						setState(5754);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(5753);
							match(NOT);
							}
						}

						setState(5756);
						match(OF);
						setState(5757);
						match(LEFT_PAREN);
						setState(5758);
						type_list();
						setState(5759);
						match(RIGHT_PAREN);
						}
						break;
					}
					} 
				}
				setState(5765);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,719,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class OpContext extends ParserRuleContext {
		public Op_charsContext op_chars() {
			return getRuleContext(Op_charsContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PLpgSQLParser.OPERATOR, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode DOT() { return getToken(PLpgSQLParser.DOT, 0); }
		public All_simple_opContext all_simple_op() {
			return getRuleContext(All_simple_opContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public OpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_op; }
	}

	public final OpContext op() throws RecognitionException {
		OpContext _localctx = new OpContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_op);
		try {
			setState(5774);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LESS_LESS:
			case GREATER_GREATER:
			case HASH_SIGN:
			case OP_CHARS:
				enterOuterAlt(_localctx, 1);
				{
				setState(5766);
				op_chars();
				}
				break;
			case OPERATOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(5767);
				match(OPERATOR);
				setState(5768);
				match(LEFT_PAREN);
				setState(5769);
				identifier();
				setState(5770);
				match(DOT);
				setState(5771);
				all_simple_op();
				setState(5772);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class All_op_refContext extends ParserRuleContext {
		public All_simple_opContext all_simple_op() {
			return getRuleContext(All_simple_opContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PLpgSQLParser.OPERATOR, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode DOT() { return getToken(PLpgSQLParser.DOT, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public All_op_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_all_op_ref; }
	}

	public final All_op_refContext all_op_ref() throws RecognitionException {
		All_op_refContext _localctx = new All_op_refContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_all_op_ref);
		try {
			setState(5784);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EQUAL:
			case NOT_EQUAL:
			case LTH:
			case LEQ:
			case GTH:
			case GEQ:
			case PLUS:
			case MINUS:
			case MULTIPLY:
			case DIVIDE:
			case MODULAR:
			case EXP:
			case LESS_LESS:
			case GREATER_GREATER:
			case HASH_SIGN:
			case OP_CHARS:
				enterOuterAlt(_localctx, 1);
				{
				setState(5776);
				all_simple_op();
				}
				break;
			case OPERATOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(5777);
				match(OPERATOR);
				setState(5778);
				match(LEFT_PAREN);
				setState(5779);
				identifier();
				setState(5780);
				match(DOT);
				setState(5781);
				all_simple_op();
				setState(5782);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Datetime_overlapsContext extends ParserRuleContext {
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PLpgSQLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PLpgSQLParser.LEFT_PAREN, i);
		}
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PLpgSQLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PLpgSQLParser.RIGHT_PAREN, i);
		}
		public TerminalNode OVERLAPS() { return getToken(PLpgSQLParser.OVERLAPS, 0); }
		public Datetime_overlapsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetime_overlaps; }
	}

	public final Datetime_overlapsContext datetime_overlaps() throws RecognitionException {
		Datetime_overlapsContext _localctx = new Datetime_overlapsContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_datetime_overlaps);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5786);
			match(LEFT_PAREN);
			setState(5787);
			vex(0);
			setState(5788);
			match(COMMA);
			setState(5789);
			vex(0);
			setState(5790);
			match(RIGHT_PAREN);
			setState(5791);
			match(OVERLAPS);
			setState(5792);
			match(LEFT_PAREN);
			setState(5793);
			vex(0);
			setState(5794);
			match(COMMA);
			setState(5795);
			vex(0);
			setState(5796);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Value_expression_primaryContext extends ParserRuleContext {
		public Unsigned_value_specificationContext unsigned_value_specification() {
			return getRuleContext(Unsigned_value_specificationContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public Select_stmt_no_parensContext select_stmt_no_parens() {
			return getRuleContext(Select_stmt_no_parensContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public Indirection_listContext indirection_list() {
			return getRuleContext(Indirection_listContext.class,0);
		}
		public Case_expressionContext case_expression() {
			return getRuleContext(Case_expressionContext.class,0);
		}
		public TerminalNode NULL() { return getToken(PLpgSQLParser.NULL, 0); }
		public TerminalNode MULTIPLY() { return getToken(PLpgSQLParser.MULTIPLY, 0); }
		public Comparison_modContext comparison_mod() {
			return getRuleContext(Comparison_modContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(PLpgSQLParser.EXISTS, 0); }
		public Table_subqueryContext table_subquery() {
			return getRuleContext(Table_subqueryContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public Indirection_varContext indirection_var() {
			return getRuleContext(Indirection_varContext.class,0);
		}
		public Array_expressionContext array_expression() {
			return getRuleContext(Array_expressionContext.class,0);
		}
		public Type_coercionContext type_coercion() {
			return getRuleContext(Type_coercionContext.class,0);
		}
		public Datetime_overlapsContext datetime_overlaps() {
			return getRuleContext(Datetime_overlapsContext.class,0);
		}
		public Value_expression_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value_expression_primary; }
	}

	public final Value_expression_primaryContext value_expression_primary() throws RecognitionException {
		Value_expression_primaryContext _localctx = new Value_expression_primaryContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_value_expression_primary);
		try {
			setState(5816);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,723,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5798);
				unsigned_value_specification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5799);
				match(LEFT_PAREN);
				setState(5800);
				select_stmt_no_parens();
				setState(5801);
				match(RIGHT_PAREN);
				setState(5803);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,722,_ctx) ) {
				case 1:
					{
					setState(5802);
					indirection_list();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5805);
				case_expression();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5806);
				match(NULL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5807);
				match(MULTIPLY);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5808);
				comparison_mod();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5809);
				match(EXISTS);
				setState(5810);
				table_subquery();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5811);
				function_call();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5812);
				indirection_var();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5813);
				array_expression();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5814);
				type_coercion();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5815);
				datetime_overlaps();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unsigned_value_specificationContext extends ParserRuleContext {
		public Unsigned_numeric_literalContext unsigned_numeric_literal() {
			return getRuleContext(Unsigned_numeric_literalContext.class,0);
		}
		public Character_stringContext character_string() {
			return getRuleContext(Character_stringContext.class,0);
		}
		public Truth_valueContext truth_value() {
			return getRuleContext(Truth_valueContext.class,0);
		}
		public Unsigned_value_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unsigned_value_specification; }
	}

	public final Unsigned_value_specificationContext unsigned_value_specification() throws RecognitionException {
		Unsigned_value_specificationContext _localctx = new Unsigned_value_specificationContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_unsigned_value_specification);
		try {
			setState(5821);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NUMBER_LITERAL:
			case REAL_NUMBER:
				enterOuterAlt(_localctx, 1);
				{
				setState(5818);
				unsigned_numeric_literal();
				}
				break;
			case Character_String_Literal:
			case BeginDollarStringConstant:
				enterOuterAlt(_localctx, 2);
				{
				setState(5819);
				character_string();
				}
				break;
			case FALSE:
			case ON:
			case TRUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(5820);
				truth_value();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unsigned_numeric_literalContext extends ParserRuleContext {
		public TerminalNode NUMBER_LITERAL() { return getToken(PLpgSQLParser.NUMBER_LITERAL, 0); }
		public TerminalNode REAL_NUMBER() { return getToken(PLpgSQLParser.REAL_NUMBER, 0); }
		public Unsigned_numeric_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unsigned_numeric_literal; }
	}

	public final Unsigned_numeric_literalContext unsigned_numeric_literal() throws RecognitionException {
		Unsigned_numeric_literalContext _localctx = new Unsigned_numeric_literalContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_unsigned_numeric_literal);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5823);
			_la = _input.LA(1);
			if ( !(_la==NUMBER_LITERAL || _la==REAL_NUMBER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Truth_valueContext extends ParserRuleContext {
		public TerminalNode TRUE() { return getToken(PLpgSQLParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(PLpgSQLParser.FALSE, 0); }
		public TerminalNode ON() { return getToken(PLpgSQLParser.ON, 0); }
		public Truth_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truth_value; }
	}

	public final Truth_valueContext truth_value() throws RecognitionException {
		Truth_valueContext _localctx = new Truth_valueContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_truth_value);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5825);
			_la = _input.LA(1);
			if ( !(((((_la - 397)) & ~0x3f) == 0 && ((1L << (_la - 397)) & ((1L << (FALSE - 397)) | (1L << (ON - 397)) | (1L << (TRUE - 397)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_expressionContext extends ParserRuleContext {
		public VexContext vex;
		public List<VexContext> r = new ArrayList<VexContext>();
		public TerminalNode CASE() { return getToken(PLpgSQLParser.CASE, 0); }
		public TerminalNode END() { return getToken(PLpgSQLParser.END, 0); }
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public List<TerminalNode> WHEN() { return getTokens(PLpgSQLParser.WHEN); }
		public TerminalNode WHEN(int i) {
			return getToken(PLpgSQLParser.WHEN, i);
		}
		public List<TerminalNode> THEN() { return getTokens(PLpgSQLParser.THEN); }
		public TerminalNode THEN(int i) {
			return getToken(PLpgSQLParser.THEN, i);
		}
		public TerminalNode ELSE() { return getToken(PLpgSQLParser.ELSE, 0); }
		public Case_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_expression; }
	}

	public final Case_expressionContext case_expression() throws RecognitionException {
		Case_expressionContext _localctx = new Case_expressionContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_case_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5827);
			match(CASE);
			setState(5829);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATTACH) | (1L << ATTRIBUTE) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BY) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG) | (1L << CHAIN) | (1L << CHARACTERISTICS) | (1L << CHECKPOINT) | (1L << CLASS) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMENTS) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONFIGURATION) | (1L << CONFLICT) | (1L << CONNECTION) | (1L << CONSTRAINTS) | (1L << CONTENT) | (1L << CONTINUE) | (1L << CONVERSION) | (1L << COPY) | (1L << COST) | (1L << CSV) | (1L << CUBE) | (1L << CURRENT) | (1L << CURSOR) | (1L << CYCLE) | (1L << DATA) | (1L << DATABASE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DEFAULTS) | (1L << DEFERRED) | (1L << DEFINER) | (1L << DELETE) | (1L << DELIMITER) | (1L << DELIMITERS) | (1L << DEPENDS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DETACH - 64)) | (1L << (DICTIONARY - 64)) | (1L << (DISABLE - 64)) | (1L << (DISCARD - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOMAIN - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (EACH - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTED - 64)) | (1L << (ENUM - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVENT - 64)) | (1L << (EXCLUDE - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXCLUSIVE - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTENSION - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FAMILY - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORCE - 64)) | (1L << (FORWARD - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GENERATED - 64)) | (1L << (GLOBAL - 64)) | (1L << (GRANTED - 64)) | (1L << (GROUPS - 64)) | (1L << (HANDLER - 64)) | (1L << (HEADER - 64)) | (1L << (HOLD - 64)) | (1L << (HOUR - 64)) | (1L << (IDENTITY - 64)) | (1L << (IF - 64)) | (1L << (IMMEDIATE - 64)) | (1L << (IMMUTABLE - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPORT - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INCREMENT - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXES - 64)) | (1L << (INHERIT - 64)) | (1L << (INHERITS - 64)) | (1L << (INLINE - 64)) | (1L << (INPUT - 64)) | (1L << (INSENSITIVE - 64)) | (1L << (INSERT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INVOKER - 64)) | (1L << (ISOLATION - 64)) | (1L << (KEY - 64)) | (1L << (LABEL - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LARGE - 64)) | (1L << (LAST - 64)) | (1L << (LEAKPROOF - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LEVEL - 128)) | (1L << (LISTEN - 128)) | (1L << (LOAD - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCATION - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKED - 128)) | (1L << (LOGGED - 128)) | (1L << (MAPPING - 128)) | (1L << (MATCH - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MAXVALUE - 128)) | (1L << (METHOD - 128)) | (1L << (MINUTE - 128)) | (1L << (MINVALUE - 128)) | (1L << (MODE - 128)) | (1L << (MONTH - 128)) | (1L << (MOVE - 128)) | (1L << (NAME - 128)) | (1L << (NAMES - 128)) | (1L << (NEW - 128)) | (1L << (NEXT - 128)) | (1L << (NO - 128)) | (1L << (NOTHING - 128)) | (1L << (NOTIFY - 128)) | (1L << (NOWAIT - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFF - 128)) | (1L << (OIDS - 128)) | (1L << (OLD - 128)) | (1L << (OPERATOR - 128)) | (1L << (OPTION - 128)) | (1L << (OPTIONS - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OTHERS - 128)) | (1L << (OVER - 128)) | (1L << (OVERRIDING - 128)) | (1L << (OWNED - 128)) | (1L << (OWNER - 128)) | (1L << (PARALLEL - 128)) | (1L << (PARSER - 128)) | (1L << (PARTIAL - 128)) | (1L << (PARTITION - 128)) | (1L << (PASSING - 128)) | (1L << (PASSWORD - 128)) | (1L << (PLANS - 128)) | (1L << (POLICY - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PREPARED - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRIOR - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROCEDURAL - 128)) | (1L << (PROCEDURE - 128)) | (1L << (PROCEDURES - 128)) | (1L << (PROGRAM - 128)) | (1L << (PUBLICATION - 128)) | (1L << (QUOTE - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (REASSIGN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (RECHECK - 192)) | (1L << (RECURSIVE - 192)) | (1L << (REF - 192)) | (1L << (REFERENCING - 192)) | (1L << (REFRESH - 192)) | (1L << (REINDEX - 192)) | (1L << (RELATIVE - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (REPLICA - 192)) | (1L << (RESET - 192)) | (1L << (RESTART - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUTINE - 192)) | (1L << (ROUTINES - 192)) | (1L << (ROWS - 192)) | (1L << (RULE - 192)) | (1L << (SAVEPOINT - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SCROLL - 192)) | (1L << (SEARCH - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEQUENCE - 192)) | (1L << (SEQUENCES - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SERVER - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHARE - 192)) | (1L << (SHOW - 192)) | (1L << (SIMPLE - 192)) | (1L << (SKIP_ - 192)) | (1L << (SNAPSHOT - 192)) | (1L << (SQL - 192)) | (1L << (STABLE - 192)) | (1L << (STANDALONE - 192)) | (1L << (START - 192)) | (1L << (STATEMENT - 192)) | (1L << (STATISTICS - 192)) | (1L << (STDIN - 192)) | (1L << (STDOUT - 192)) | (1L << (STORAGE - 192)) | (1L << (STORED - 192)) | (1L << (STRICT - 192)) | (1L << (STRIP - 192)) | (1L << (SUBSCRIPTION - 192)) | (1L << (SUPPORT - 192)) | (1L << (SYSID - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESPACE - 192)) | (1L << (TEMP - 192)) | (1L << (TEMPLATE - 192)) | (1L << (TEMPORARY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TEXT - 256)) | (1L << (TIES - 256)) | (1L << (TRANSACTION - 256)) | (1L << (TRANSFORM - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TRUSTED - 256)) | (1L << (TYPE - 256)) | (1L << (TYPES - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNENCRYPTED - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNLISTEN - 256)) | (1L << (UNLOGGED - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (VACUUM - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALIDATOR - 256)) | (1L << (VALUE - 256)) | (1L << (VARYING - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (VIEWS - 256)) | (1L << (VOLATILE - 256)) | (1L << (WHITESPACE - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (XML - 256)) | (1L << (YEAR - 256)) | (1L << (YES - 256)) | (1L << (ZONE - 256)) | (1L << (BETWEEN - 256)) | (1L << (BIGINT - 256)) | (1L << (BIT - 256)) | (1L << (BOOLEAN - 256)) | (1L << (CHAR - 256)) | (1L << (CHARACTER - 256)) | (1L << (COALESCE - 256)) | (1L << (DEC - 256)) | (1L << (DECIMAL - 256)) | (1L << (EXISTS - 256)) | (1L << (EXTRACT - 256)) | (1L << (FLOAT - 256)) | (1L << (GREATEST - 256)) | (1L << (GROUPING - 256)) | (1L << (INOUT - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERVAL - 256)) | (1L << (LEAST - 256)) | (1L << (NATIONAL - 256)) | (1L << (NCHAR - 256)) | (1L << (NONE - 256)) | (1L << (NULLIF - 256)) | (1L << (NUMERIC - 256)) | (1L << (OUT - 256)) | (1L << (OVERLAY - 256)) | (1L << (POSITION - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRECISION - 320)) | (1L << (REAL - 320)) | (1L << (ROW - 320)) | (1L << (SETOF - 320)) | (1L << (SMALLINT - 320)) | (1L << (SUBSTRING - 320)) | (1L << (TIME - 320)) | (1L << (TIMESTAMP - 320)) | (1L << (TREAT - 320)) | (1L << (TRIM - 320)) | (1L << (VALUES - 320)) | (1L << (VARCHAR - 320)) | (1L << (XMLATTRIBUTES - 320)) | (1L << (XMLCONCAT - 320)) | (1L << (XMLELEMENT - 320)) | (1L << (XMLEXISTS - 320)) | (1L << (XMLFOREST - 320)) | (1L << (XMLNAMESPACES - 320)) | (1L << (XMLPARSE - 320)) | (1L << (XMLPI - 320)) | (1L << (XMLROOT - 320)) | (1L << (XMLSERIALIZE - 320)) | (1L << (XMLTABLE - 320)) | (1L << (AUTHORIZATION - 320)) | (1L << (BINARY - 320)) | (1L << (COLLATION - 320)) | (1L << (CONCURRENTLY - 320)) | (1L << (CROSS - 320)) | (1L << (CURRENT_SCHEMA - 320)) | (1L << (FREEZE - 320)) | (1L << (FULL - 320)) | (1L << (ILIKE - 320)) | (1L << (INNER - 320)) | (1L << (IS - 320)) | (1L << (ISNULL - 320)) | (1L << (JOIN - 320)) | (1L << (LEFT - 320)) | (1L << (LIKE - 320)) | (1L << (NATURAL - 320)) | (1L << (NOTNULL - 320)) | (1L << (OUTER - 320)) | (1L << (OVERLAPS - 320)) | (1L << (RIGHT - 320)) | (1L << (SIMILAR - 320)) | (1L << (TABLESAMPLE - 320)) | (1L << (VERBOSE - 320)) | (1L << (ALL - 320)) | (1L << (ANY - 320)) | (1L << (ARRAY - 320)) | (1L << (CASE - 320)) | (1L << (CAST - 320)) | (1L << (CURRENT_CATALOG - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (CURRENT_DATE - 384)) | (1L << (CURRENT_TIME - 384)) | (1L << (CURRENT_TIMESTAMP - 384)) | (1L << (CURRENT_USER - 384)) | (1L << (FALSE - 384)) | (1L << (LOCALTIME - 384)) | (1L << (LOCALTIMESTAMP - 384)) | (1L << (NOT - 384)) | (1L << (NULL - 384)) | (1L << (ON - 384)) | (1L << (SESSION_USER - 384)) | (1L << (SOME - 384)) | (1L << (TRUE - 384)) | (1L << (USER - 384)) | (1L << (ALIGNMENT - 384)) | (1L << (BASETYPE - 384)) | (1L << (BUFFERS - 384)) | (1L << (BYPASSRLS - 384)) | (1L << (CANONICAL - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (CATEGORY - 448)) | (1L << (COLLATABLE - 448)) | (1L << (COMBINEFUNC - 448)) | (1L << (COMMUTATOR - 448)) | (1L << (CONNECT - 448)) | (1L << (COSTS - 448)) | (1L << (CREATEDB - 448)) | (1L << (CREATEROLE - 448)) | (1L << (DESERIALFUNC - 448)) | (1L << (DETERMINISTIC - 448)) | (1L << (DISABLE_PAGE_SKIPPING - 448)) | (1L << (ELEMENT - 448)) | (1L << (EXTENDED - 448)) | (1L << (FINALFUNC - 448)) | (1L << (FINALFUNC_EXTRA - 448)) | (1L << (FINALFUNC_MODIFY - 448)) | (1L << (FORCE_NOT_NULL - 448)) | (1L << (FORCE_NULL - 448)) | (1L << (FORCE_QUOTE - 448)) | (1L << (FORMAT - 448)) | (1L << (GETTOKEN - 448)) | (1L << (HASH - 448)) | (1L << (HASHES - 448)) | (1L << (HEADLINE - 448)) | (1L << (HYPOTHETICAL - 448)) | (1L << (INDEX_CLEANUP - 448)) | (1L << (INIT - 448)) | (1L << (INITCOND - 448)) | (1L << (INTERNALLENGTH - 448)) | (1L << (JSON - 448)) | (1L << (LC_COLLATE - 448)) | (1L << (LC_CTYPE - 448)) | (1L << (LEFTARG - 448)) | (1L << (LEXIZE - 448)) | (1L << (LEXTYPES - 448)) | (1L << (LIST - 448)) | (1L << (LOCALE - 448)) | (1L << (LOGIN - 448)) | (1L << (MAIN - 448)) | (1L << (MERGES - 448)) | (1L << (MFINALFUNC - 448)) | (1L << (MFINALFUNC_EXTRA - 448)) | (1L << (MFINALFUNC_MODIFY - 448)) | (1L << (MINITCOND - 448)) | (1L << (MINVFUNC - 448)) | (1L << (MODULUS - 448)) | (1L << (MSFUNC - 448)) | (1L << (MSSPACE - 448)) | (1L << (MSTYPE - 448)) | (1L << (NEGATOR - 448)) | (1L << (NOBYPASSRLS - 448)) | (1L << (NOCREATEDB - 448)) | (1L << (NOCREATEROLE - 448)) | (1L << (NOINHERIT - 448)) | (1L << (NOLOGIN - 448)) | (1L << (NOREPLICATION - 448)) | (1L << (NOSUPERUSER - 448)) | (1L << (OUTPUT - 448)) | (1L << (PASSEDBYVALUE - 448)) | (1L << (PATH - 448)) | (1L << (PERMISSIVE - 448)) | (1L << (PLAIN - 448)) | (1L << (PREFERRED - 448)) | (1L << (PROVIDER - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (READ_ONLY - 512)) | (1L << (READ_WRITE - 512)) | (1L << (RECEIVE - 512)) | (1L << (REMAINDER - 512)) | (1L << (REPLICATION - 512)) | (1L << (RESTRICTED - 512)) | (1L << (RESTRICTIVE - 512)) | (1L << (RIGHTARG - 512)) | (1L << (SAFE - 512)) | (1L << (SEND - 512)) | (1L << (SERIALFUNC - 512)) | (1L << (SETTINGS - 512)) | (1L << (SFUNC - 512)) | (1L << (SHAREABLE - 512)) | (1L << (SKIP_LOCKED - 512)) | (1L << (SORTOP - 512)) | (1L << (SSPACE - 512)) | (1L << (STYPE - 512)) | (1L << (SUBTYPE_DIFF - 512)) | (1L << (SUBTYPE_OPCLASS - 512)) | (1L << (SUBTYPE - 512)) | (1L << (SUMMARY - 512)) | (1L << (SUPERUSER - 512)) | (1L << (TIMING - 512)) | (1L << (TYPMOD_IN - 512)) | (1L << (TYPMOD_OUT - 512)) | (1L << (UNSAFE - 512)) | (1L << (USAGE - 512)) | (1L << (VARIABLE - 512)) | (1L << (YAML - 512)) | (1L << (ALIAS - 512)) | (1L << (ASSERT - 512)) | (1L << (CONSTANT - 512)) | (1L << (DATATYPE - 512)) | (1L << (DEBUG - 512)) | (1L << (DETAIL - 512)) | (1L << (DIAGNOSTICS - 512)) | (1L << (ELSEIF - 512)) | (1L << (ELSIF - 512)) | (1L << (ERRCODE - 512)) | (1L << (EXIT - 512)) | (1L << (EXCEPTION - 512)) | (1L << (FOREACH - 512)) | (1L << (GET - 512)) | (1L << (HINT - 512)) | (1L << (INFO - 512)) | (1L << (LOG - 512)) | (1L << (LOOP - 512)) | (1L << (MESSAGE - 512)) | (1L << (NOTICE - 512)) | (1L << (OPEN - 512)) | (1L << (PERFORM - 512)) | (1L << (QUERY - 512)) | (1L << (RAISE - 512)) | (1L << (RECORD - 512)) | (1L << (RETURN - 512)) | (1L << (REVERSE - 512)) | (1L << (ROWTYPE - 512)) | (1L << (SLICE - 512)) | (1L << (SQLSTATE - 512)) | (1L << (STACKED - 512)) | (1L << (WARNING - 512)) | (1L << (WHILE - 512)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (LEFT_PAREN - 585)) | (1L << (PLUS - 585)) | (1L << (MINUS - 585)) | (1L << (MULTIPLY - 585)) | (1L << (LESS_LESS - 585)) | (1L << (GREATER_GREATER - 585)) | (1L << (HASH_SIGN - 585)) | (1L << (OP_CHARS - 585)) | (1L << (NUMBER_LITERAL - 585)) | (1L << (REAL_NUMBER - 585)) | (1L << (DOLLAR_NUMBER - 585)) | (1L << (Identifier - 585)) | (1L << (QuotedIdentifier - 585)) | (1L << (Character_String_Literal - 585)) | (1L << (BeginDollarStringConstant - 585)))) != 0)) {
				{
				setState(5828);
				vex(0);
				}
			}

			setState(5836); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5831);
				match(WHEN);
				setState(5832);
				vex(0);
				setState(5833);
				match(THEN);
				setState(5834);
				((Case_expressionContext)_localctx).vex = vex(0);
				((Case_expressionContext)_localctx).r.add(((Case_expressionContext)_localctx).vex);
				}
				}
				setState(5838); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(5842);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(5840);
				match(ELSE);
				setState(5841);
				((Case_expressionContext)_localctx).vex = vex(0);
				((Case_expressionContext)_localctx).r.add(((Case_expressionContext)_localctx).vex);
				}
			}

			setState(5844);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cast_specificationContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public TerminalNode AS() { return getToken(PLpgSQLParser.AS, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public TerminalNode CAST() { return getToken(PLpgSQLParser.CAST, 0); }
		public TerminalNode TREAT() { return getToken(PLpgSQLParser.TREAT, 0); }
		public Cast_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cast_specification; }
	}

	public final Cast_specificationContext cast_specification() throws RecognitionException {
		Cast_specificationContext _localctx = new Cast_specificationContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_cast_specification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5846);
			_la = _input.LA(1);
			if ( !(_la==TREAT || _la==CAST) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5847);
			match(LEFT_PAREN);
			setState(5848);
			vex(0);
			setState(5849);
			match(AS);
			setState(5850);
			data_type();
			setState(5851);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_callContext extends ParserRuleContext {
		public Schema_qualified_name_nontypeContext schema_qualified_name_nontype() {
			return getRuleContext(Schema_qualified_name_nontypeContext.class,0);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PLpgSQLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PLpgSQLParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PLpgSQLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PLpgSQLParser.RIGHT_PAREN, i);
		}
		public List<Vex_or_named_notationContext> vex_or_named_notation() {
			return getRuleContexts(Vex_or_named_notationContext.class);
		}
		public Vex_or_named_notationContext vex_or_named_notation(int i) {
			return getRuleContext(Vex_or_named_notationContext.class,i);
		}
		public TerminalNode WITHIN() { return getToken(PLpgSQLParser.WITHIN, 0); }
		public TerminalNode GROUP() { return getToken(PLpgSQLParser.GROUP, 0); }
		public List<Orderby_clauseContext> orderby_clause() {
			return getRuleContexts(Orderby_clauseContext.class);
		}
		public Orderby_clauseContext orderby_clause(int i) {
			return getRuleContext(Orderby_clauseContext.class,i);
		}
		public Filter_clauseContext filter_clause() {
			return getRuleContext(Filter_clauseContext.class,0);
		}
		public TerminalNode OVER() { return getToken(PLpgSQLParser.OVER, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Window_definitionContext window_definition() {
			return getRuleContext(Window_definitionContext.class,0);
		}
		public Set_qualifierContext set_qualifier() {
			return getRuleContext(Set_qualifierContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Function_constructContext function_construct() {
			return getRuleContext(Function_constructContext.class,0);
		}
		public Extract_functionContext extract_function() {
			return getRuleContext(Extract_functionContext.class,0);
		}
		public System_functionContext system_function() {
			return getRuleContext(System_functionContext.class,0);
		}
		public Date_time_functionContext date_time_function() {
			return getRuleContext(Date_time_functionContext.class,0);
		}
		public String_value_functionContext string_value_function() {
			return getRuleContext(String_value_functionContext.class,0);
		}
		public Xml_functionContext xml_function() {
			return getRuleContext(Xml_functionContext.class,0);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_call; }
	}

	public final Function_callContext function_call() throws RecognitionException {
		Function_callContext _localctx = new Function_callContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_function_call);
		int _la;
		try {
			setState(5896);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,736,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5853);
				schema_qualified_name_nontype();
				setState(5854);
				match(LEFT_PAREN);
				setState(5869);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATTACH) | (1L << ATTRIBUTE) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BY) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG) | (1L << CHAIN) | (1L << CHARACTERISTICS) | (1L << CHECKPOINT) | (1L << CLASS) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMENTS) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONFIGURATION) | (1L << CONFLICT) | (1L << CONNECTION) | (1L << CONSTRAINTS) | (1L << CONTENT) | (1L << CONTINUE) | (1L << CONVERSION) | (1L << COPY) | (1L << COST) | (1L << CSV) | (1L << CUBE) | (1L << CURRENT) | (1L << CURSOR) | (1L << CYCLE) | (1L << DATA) | (1L << DATABASE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DEFAULTS) | (1L << DEFERRED) | (1L << DEFINER) | (1L << DELETE) | (1L << DELIMITER) | (1L << DELIMITERS) | (1L << DEPENDS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DETACH - 64)) | (1L << (DICTIONARY - 64)) | (1L << (DISABLE - 64)) | (1L << (DISCARD - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOMAIN - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (EACH - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTED - 64)) | (1L << (ENUM - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVENT - 64)) | (1L << (EXCLUDE - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXCLUSIVE - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTENSION - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FAMILY - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORCE - 64)) | (1L << (FORWARD - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GENERATED - 64)) | (1L << (GLOBAL - 64)) | (1L << (GRANTED - 64)) | (1L << (GROUPS - 64)) | (1L << (HANDLER - 64)) | (1L << (HEADER - 64)) | (1L << (HOLD - 64)) | (1L << (HOUR - 64)) | (1L << (IDENTITY - 64)) | (1L << (IF - 64)) | (1L << (IMMEDIATE - 64)) | (1L << (IMMUTABLE - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPORT - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INCREMENT - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXES - 64)) | (1L << (INHERIT - 64)) | (1L << (INHERITS - 64)) | (1L << (INLINE - 64)) | (1L << (INPUT - 64)) | (1L << (INSENSITIVE - 64)) | (1L << (INSERT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INVOKER - 64)) | (1L << (ISOLATION - 64)) | (1L << (KEY - 64)) | (1L << (LABEL - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LARGE - 64)) | (1L << (LAST - 64)) | (1L << (LEAKPROOF - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LEVEL - 128)) | (1L << (LISTEN - 128)) | (1L << (LOAD - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCATION - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKED - 128)) | (1L << (LOGGED - 128)) | (1L << (MAPPING - 128)) | (1L << (MATCH - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MAXVALUE - 128)) | (1L << (METHOD - 128)) | (1L << (MINUTE - 128)) | (1L << (MINVALUE - 128)) | (1L << (MODE - 128)) | (1L << (MONTH - 128)) | (1L << (MOVE - 128)) | (1L << (NAME - 128)) | (1L << (NAMES - 128)) | (1L << (NEW - 128)) | (1L << (NEXT - 128)) | (1L << (NO - 128)) | (1L << (NOTHING - 128)) | (1L << (NOTIFY - 128)) | (1L << (NOWAIT - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFF - 128)) | (1L << (OIDS - 128)) | (1L << (OLD - 128)) | (1L << (OPERATOR - 128)) | (1L << (OPTION - 128)) | (1L << (OPTIONS - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OTHERS - 128)) | (1L << (OVER - 128)) | (1L << (OVERRIDING - 128)) | (1L << (OWNED - 128)) | (1L << (OWNER - 128)) | (1L << (PARALLEL - 128)) | (1L << (PARSER - 128)) | (1L << (PARTIAL - 128)) | (1L << (PARTITION - 128)) | (1L << (PASSING - 128)) | (1L << (PASSWORD - 128)) | (1L << (PLANS - 128)) | (1L << (POLICY - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PREPARED - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRIOR - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROCEDURAL - 128)) | (1L << (PROCEDURE - 128)) | (1L << (PROCEDURES - 128)) | (1L << (PROGRAM - 128)) | (1L << (PUBLICATION - 128)) | (1L << (QUOTE - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (REASSIGN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (RECHECK - 192)) | (1L << (RECURSIVE - 192)) | (1L << (REF - 192)) | (1L << (REFERENCING - 192)) | (1L << (REFRESH - 192)) | (1L << (REINDEX - 192)) | (1L << (RELATIVE - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (REPLICA - 192)) | (1L << (RESET - 192)) | (1L << (RESTART - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUTINE - 192)) | (1L << (ROUTINES - 192)) | (1L << (ROWS - 192)) | (1L << (RULE - 192)) | (1L << (SAVEPOINT - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SCROLL - 192)) | (1L << (SEARCH - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEQUENCE - 192)) | (1L << (SEQUENCES - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SERVER - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHARE - 192)) | (1L << (SHOW - 192)) | (1L << (SIMPLE - 192)) | (1L << (SKIP_ - 192)) | (1L << (SNAPSHOT - 192)) | (1L << (SQL - 192)) | (1L << (STABLE - 192)) | (1L << (STANDALONE - 192)) | (1L << (START - 192)) | (1L << (STATEMENT - 192)) | (1L << (STATISTICS - 192)) | (1L << (STDIN - 192)) | (1L << (STDOUT - 192)) | (1L << (STORAGE - 192)) | (1L << (STORED - 192)) | (1L << (STRICT - 192)) | (1L << (STRIP - 192)) | (1L << (SUBSCRIPTION - 192)) | (1L << (SUPPORT - 192)) | (1L << (SYSID - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESPACE - 192)) | (1L << (TEMP - 192)) | (1L << (TEMPLATE - 192)) | (1L << (TEMPORARY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TEXT - 256)) | (1L << (TIES - 256)) | (1L << (TRANSACTION - 256)) | (1L << (TRANSFORM - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TRUSTED - 256)) | (1L << (TYPE - 256)) | (1L << (TYPES - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNENCRYPTED - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNLISTEN - 256)) | (1L << (UNLOGGED - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (VACUUM - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALIDATOR - 256)) | (1L << (VALUE - 256)) | (1L << (VARYING - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (VIEWS - 256)) | (1L << (VOLATILE - 256)) | (1L << (WHITESPACE - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (XML - 256)) | (1L << (YEAR - 256)) | (1L << (YES - 256)) | (1L << (ZONE - 256)) | (1L << (BETWEEN - 256)) | (1L << (BIGINT - 256)) | (1L << (BIT - 256)) | (1L << (BOOLEAN - 256)) | (1L << (CHAR - 256)) | (1L << (CHARACTER - 256)) | (1L << (COALESCE - 256)) | (1L << (DEC - 256)) | (1L << (DECIMAL - 256)) | (1L << (EXISTS - 256)) | (1L << (EXTRACT - 256)) | (1L << (FLOAT - 256)) | (1L << (GREATEST - 256)) | (1L << (GROUPING - 256)) | (1L << (INOUT - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERVAL - 256)) | (1L << (LEAST - 256)) | (1L << (NATIONAL - 256)) | (1L << (NCHAR - 256)) | (1L << (NONE - 256)) | (1L << (NULLIF - 256)) | (1L << (NUMERIC - 256)) | (1L << (OUT - 256)) | (1L << (OVERLAY - 256)) | (1L << (POSITION - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRECISION - 320)) | (1L << (REAL - 320)) | (1L << (ROW - 320)) | (1L << (SETOF - 320)) | (1L << (SMALLINT - 320)) | (1L << (SUBSTRING - 320)) | (1L << (TIME - 320)) | (1L << (TIMESTAMP - 320)) | (1L << (TREAT - 320)) | (1L << (TRIM - 320)) | (1L << (VALUES - 320)) | (1L << (VARCHAR - 320)) | (1L << (XMLATTRIBUTES - 320)) | (1L << (XMLCONCAT - 320)) | (1L << (XMLELEMENT - 320)) | (1L << (XMLEXISTS - 320)) | (1L << (XMLFOREST - 320)) | (1L << (XMLNAMESPACES - 320)) | (1L << (XMLPARSE - 320)) | (1L << (XMLPI - 320)) | (1L << (XMLROOT - 320)) | (1L << (XMLSERIALIZE - 320)) | (1L << (XMLTABLE - 320)) | (1L << (AUTHORIZATION - 320)) | (1L << (BINARY - 320)) | (1L << (COLLATION - 320)) | (1L << (CONCURRENTLY - 320)) | (1L << (CROSS - 320)) | (1L << (CURRENT_SCHEMA - 320)) | (1L << (FREEZE - 320)) | (1L << (FULL - 320)) | (1L << (ILIKE - 320)) | (1L << (INNER - 320)) | (1L << (IS - 320)) | (1L << (ISNULL - 320)) | (1L << (JOIN - 320)) | (1L << (LEFT - 320)) | (1L << (LIKE - 320)) | (1L << (NATURAL - 320)) | (1L << (NOTNULL - 320)) | (1L << (OUTER - 320)) | (1L << (OVERLAPS - 320)) | (1L << (RIGHT - 320)) | (1L << (SIMILAR - 320)) | (1L << (TABLESAMPLE - 320)) | (1L << (VERBOSE - 320)) | (1L << (ALL - 320)) | (1L << (ANY - 320)) | (1L << (ARRAY - 320)) | (1L << (CASE - 320)) | (1L << (CAST - 320)) | (1L << (CURRENT_CATALOG - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (CURRENT_DATE - 384)) | (1L << (CURRENT_TIME - 384)) | (1L << (CURRENT_TIMESTAMP - 384)) | (1L << (CURRENT_USER - 384)) | (1L << (DISTINCT - 384)) | (1L << (FALSE - 384)) | (1L << (LOCALTIME - 384)) | (1L << (LOCALTIMESTAMP - 384)) | (1L << (NOT - 384)) | (1L << (NULL - 384)) | (1L << (ON - 384)) | (1L << (SESSION_USER - 384)) | (1L << (SOME - 384)) | (1L << (TRUE - 384)) | (1L << (USER - 384)) | (1L << (VARIADIC - 384)) | (1L << (ALIGNMENT - 384)) | (1L << (BASETYPE - 384)) | (1L << (BUFFERS - 384)) | (1L << (BYPASSRLS - 384)) | (1L << (CANONICAL - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (CATEGORY - 448)) | (1L << (COLLATABLE - 448)) | (1L << (COMBINEFUNC - 448)) | (1L << (COMMUTATOR - 448)) | (1L << (CONNECT - 448)) | (1L << (COSTS - 448)) | (1L << (CREATEDB - 448)) | (1L << (CREATEROLE - 448)) | (1L << (DESERIALFUNC - 448)) | (1L << (DETERMINISTIC - 448)) | (1L << (DISABLE_PAGE_SKIPPING - 448)) | (1L << (ELEMENT - 448)) | (1L << (EXTENDED - 448)) | (1L << (FINALFUNC - 448)) | (1L << (FINALFUNC_EXTRA - 448)) | (1L << (FINALFUNC_MODIFY - 448)) | (1L << (FORCE_NOT_NULL - 448)) | (1L << (FORCE_NULL - 448)) | (1L << (FORCE_QUOTE - 448)) | (1L << (FORMAT - 448)) | (1L << (GETTOKEN - 448)) | (1L << (HASH - 448)) | (1L << (HASHES - 448)) | (1L << (HEADLINE - 448)) | (1L << (HYPOTHETICAL - 448)) | (1L << (INDEX_CLEANUP - 448)) | (1L << (INIT - 448)) | (1L << (INITCOND - 448)) | (1L << (INTERNALLENGTH - 448)) | (1L << (JSON - 448)) | (1L << (LC_COLLATE - 448)) | (1L << (LC_CTYPE - 448)) | (1L << (LEFTARG - 448)) | (1L << (LEXIZE - 448)) | (1L << (LEXTYPES - 448)) | (1L << (LIST - 448)) | (1L << (LOCALE - 448)) | (1L << (LOGIN - 448)) | (1L << (MAIN - 448)) | (1L << (MERGES - 448)) | (1L << (MFINALFUNC - 448)) | (1L << (MFINALFUNC_EXTRA - 448)) | (1L << (MFINALFUNC_MODIFY - 448)) | (1L << (MINITCOND - 448)) | (1L << (MINVFUNC - 448)) | (1L << (MODULUS - 448)) | (1L << (MSFUNC - 448)) | (1L << (MSSPACE - 448)) | (1L << (MSTYPE - 448)) | (1L << (NEGATOR - 448)) | (1L << (NOBYPASSRLS - 448)) | (1L << (NOCREATEDB - 448)) | (1L << (NOCREATEROLE - 448)) | (1L << (NOINHERIT - 448)) | (1L << (NOLOGIN - 448)) | (1L << (NOREPLICATION - 448)) | (1L << (NOSUPERUSER - 448)) | (1L << (OUTPUT - 448)) | (1L << (PASSEDBYVALUE - 448)) | (1L << (PATH - 448)) | (1L << (PERMISSIVE - 448)) | (1L << (PLAIN - 448)) | (1L << (PREFERRED - 448)) | (1L << (PROVIDER - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (READ_ONLY - 512)) | (1L << (READ_WRITE - 512)) | (1L << (RECEIVE - 512)) | (1L << (REMAINDER - 512)) | (1L << (REPLICATION - 512)) | (1L << (RESTRICTED - 512)) | (1L << (RESTRICTIVE - 512)) | (1L << (RIGHTARG - 512)) | (1L << (SAFE - 512)) | (1L << (SEND - 512)) | (1L << (SERIALFUNC - 512)) | (1L << (SETTINGS - 512)) | (1L << (SFUNC - 512)) | (1L << (SHAREABLE - 512)) | (1L << (SKIP_LOCKED - 512)) | (1L << (SORTOP - 512)) | (1L << (SSPACE - 512)) | (1L << (STYPE - 512)) | (1L << (SUBTYPE_DIFF - 512)) | (1L << (SUBTYPE_OPCLASS - 512)) | (1L << (SUBTYPE - 512)) | (1L << (SUMMARY - 512)) | (1L << (SUPERUSER - 512)) | (1L << (TIMING - 512)) | (1L << (TYPMOD_IN - 512)) | (1L << (TYPMOD_OUT - 512)) | (1L << (UNSAFE - 512)) | (1L << (USAGE - 512)) | (1L << (VARIABLE - 512)) | (1L << (YAML - 512)) | (1L << (ALIAS - 512)) | (1L << (ASSERT - 512)) | (1L << (CONSTANT - 512)) | (1L << (DATATYPE - 512)) | (1L << (DEBUG - 512)) | (1L << (DETAIL - 512)) | (1L << (DIAGNOSTICS - 512)) | (1L << (ELSEIF - 512)) | (1L << (ELSIF - 512)) | (1L << (ERRCODE - 512)) | (1L << (EXIT - 512)) | (1L << (EXCEPTION - 512)) | (1L << (FOREACH - 512)) | (1L << (GET - 512)) | (1L << (HINT - 512)) | (1L << (INFO - 512)) | (1L << (LOG - 512)) | (1L << (LOOP - 512)) | (1L << (MESSAGE - 512)) | (1L << (NOTICE - 512)) | (1L << (OPEN - 512)) | (1L << (PERFORM - 512)) | (1L << (QUERY - 512)) | (1L << (RAISE - 512)) | (1L << (RECORD - 512)) | (1L << (RETURN - 512)) | (1L << (REVERSE - 512)) | (1L << (ROWTYPE - 512)) | (1L << (SLICE - 512)) | (1L << (SQLSTATE - 512)) | (1L << (STACKED - 512)) | (1L << (WARNING - 512)) | (1L << (WHILE - 512)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (LEFT_PAREN - 585)) | (1L << (PLUS - 585)) | (1L << (MINUS - 585)) | (1L << (MULTIPLY - 585)) | (1L << (LESS_LESS - 585)) | (1L << (GREATER_GREATER - 585)) | (1L << (HASH_SIGN - 585)) | (1L << (OP_CHARS - 585)) | (1L << (NUMBER_LITERAL - 585)) | (1L << (REAL_NUMBER - 585)) | (1L << (DOLLAR_NUMBER - 585)) | (1L << (Identifier - 585)) | (1L << (QuotedIdentifier - 585)) | (1L << (Character_String_Literal - 585)) | (1L << (BeginDollarStringConstant - 585)))) != 0)) {
					{
					setState(5856);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,728,_ctx) ) {
					case 1:
						{
						setState(5855);
						set_qualifier();
						}
						break;
					}
					setState(5858);
					vex_or_named_notation();
					setState(5863);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(5859);
						match(COMMA);
						setState(5860);
						vex_or_named_notation();
						}
						}
						setState(5865);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(5867);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ORDER) {
						{
						setState(5866);
						orderby_clause();
						}
					}

					}
				}

				setState(5871);
				match(RIGHT_PAREN);
				setState(5878);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,732,_ctx) ) {
				case 1:
					{
					setState(5872);
					match(WITHIN);
					setState(5873);
					match(GROUP);
					setState(5874);
					match(LEFT_PAREN);
					setState(5875);
					orderby_clause();
					setState(5876);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5881);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,733,_ctx) ) {
				case 1:
					{
					setState(5880);
					filter_clause();
					}
					break;
				}
				setState(5888);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,735,_ctx) ) {
				case 1:
					{
					setState(5883);
					match(OVER);
					setState(5886);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ABORT:
					case ABSOLUTE:
					case ACCESS:
					case ACTION:
					case ADD:
					case ADMIN:
					case AFTER:
					case AGGREGATE:
					case ALSO:
					case ALTER:
					case ALWAYS:
					case ASSERTION:
					case ASSIGNMENT:
					case AT:
					case ATTACH:
					case ATTRIBUTE:
					case BACKWARD:
					case BEFORE:
					case BEGIN:
					case BY:
					case CACHE:
					case CALL:
					case CALLED:
					case CASCADE:
					case CASCADED:
					case CATALOG:
					case CHAIN:
					case CHARACTERISTICS:
					case CHECKPOINT:
					case CLASS:
					case CLOSE:
					case CLUSTER:
					case COLUMNS:
					case COMMENT:
					case COMMENTS:
					case COMMIT:
					case COMMITTED:
					case CONFIGURATION:
					case CONFLICT:
					case CONNECTION:
					case CONSTRAINTS:
					case CONTENT:
					case CONTINUE:
					case CONVERSION:
					case COPY:
					case COST:
					case CSV:
					case CUBE:
					case CURRENT:
					case CURSOR:
					case CYCLE:
					case DATA:
					case DATABASE:
					case DAY:
					case DEALLOCATE:
					case DECLARE:
					case DEFAULTS:
					case DEFERRED:
					case DEFINER:
					case DELETE:
					case DELIMITER:
					case DELIMITERS:
					case DEPENDS:
					case DETACH:
					case DICTIONARY:
					case DISABLE:
					case DISCARD:
					case DOCUMENT:
					case DOMAIN:
					case DOUBLE:
					case DROP:
					case EACH:
					case ENABLE:
					case ENCODING:
					case ENCRYPTED:
					case ENUM:
					case ESCAPE:
					case EVENT:
					case EXCLUDE:
					case EXCLUDING:
					case EXCLUSIVE:
					case EXECUTE:
					case EXPLAIN:
					case EXTENSION:
					case EXTERNAL:
					case FAMILY:
					case FILTER:
					case FIRST:
					case FOLLOWING:
					case FORCE:
					case FORWARD:
					case FUNCTION:
					case FUNCTIONS:
					case GENERATED:
					case GLOBAL:
					case GRANTED:
					case GROUPS:
					case HANDLER:
					case HEADER:
					case HOLD:
					case HOUR:
					case IDENTITY:
					case IF:
					case IMMEDIATE:
					case IMMUTABLE:
					case IMPLICIT:
					case IMPORT:
					case INCLUDE:
					case INCLUDING:
					case INCREMENT:
					case INDEX:
					case INDEXES:
					case INHERIT:
					case INHERITS:
					case INLINE:
					case INPUT:
					case INSENSITIVE:
					case INSERT:
					case INSTEAD:
					case INVOKER:
					case ISOLATION:
					case KEY:
					case LABEL:
					case LANGUAGE:
					case LARGE:
					case LAST:
					case LEAKPROOF:
					case LEVEL:
					case LISTEN:
					case LOAD:
					case LOCAL:
					case LOCATION:
					case LOCK:
					case LOCKED:
					case LOGGED:
					case MAPPING:
					case MATCH:
					case MATERIALIZED:
					case MAXVALUE:
					case METHOD:
					case MINUTE:
					case MINVALUE:
					case MODE:
					case MONTH:
					case MOVE:
					case NAME:
					case NAMES:
					case NEW:
					case NEXT:
					case NO:
					case NOTHING:
					case NOTIFY:
					case NOWAIT:
					case NULLS:
					case OBJECT:
					case OF:
					case OFF:
					case OIDS:
					case OLD:
					case OPERATOR:
					case OPTION:
					case OPTIONS:
					case ORDINALITY:
					case OTHERS:
					case OVER:
					case OVERRIDING:
					case OWNED:
					case OWNER:
					case PARALLEL:
					case PARSER:
					case PARTIAL:
					case PARTITION:
					case PASSING:
					case PASSWORD:
					case PLANS:
					case POLICY:
					case PRECEDING:
					case PREPARE:
					case PREPARED:
					case PRESERVE:
					case PRIOR:
					case PRIVILEGES:
					case PROCEDURAL:
					case PROCEDURE:
					case PROCEDURES:
					case PROGRAM:
					case PUBLICATION:
					case QUOTE:
					case RANGE:
					case READ:
					case REASSIGN:
					case RECHECK:
					case RECURSIVE:
					case REF:
					case REFERENCING:
					case REFRESH:
					case REINDEX:
					case RELATIVE:
					case RELEASE:
					case RENAME:
					case REPEATABLE:
					case REPLACE:
					case REPLICA:
					case RESET:
					case RESTART:
					case RESTRICT:
					case RETURNS:
					case REVOKE:
					case ROLE:
					case ROLLBACK:
					case ROLLUP:
					case ROUTINE:
					case ROUTINES:
					case ROWS:
					case RULE:
					case SAVEPOINT:
					case SCHEMA:
					case SCHEMAS:
					case SCROLL:
					case SEARCH:
					case SECOND:
					case SECURITY:
					case SEQUENCE:
					case SEQUENCES:
					case SERIALIZABLE:
					case SERVER:
					case SESSION:
					case SET:
					case SETS:
					case SHARE:
					case SHOW:
					case SIMPLE:
					case SKIP_:
					case SNAPSHOT:
					case SQL:
					case STABLE:
					case STANDALONE:
					case START:
					case STATEMENT:
					case STATISTICS:
					case STDIN:
					case STDOUT:
					case STORAGE:
					case STORED:
					case STRICT:
					case STRIP:
					case SUBSCRIPTION:
					case SUPPORT:
					case SYSID:
					case SYSTEM:
					case TABLES:
					case TABLESPACE:
					case TEMP:
					case TEMPLATE:
					case TEMPORARY:
					case TEXT:
					case TIES:
					case TRANSACTION:
					case TRANSFORM:
					case TRIGGER:
					case TRUNCATE:
					case TRUSTED:
					case TYPE:
					case TYPES:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNENCRYPTED:
					case UNKNOWN:
					case UNLISTEN:
					case UNLOGGED:
					case UNTIL:
					case UPDATE:
					case VACUUM:
					case VALID:
					case VALIDATE:
					case VALIDATOR:
					case VALUE:
					case VARYING:
					case VERSION:
					case VIEW:
					case VIEWS:
					case VOLATILE:
					case WHITESPACE:
					case WITHIN:
					case WITHOUT:
					case WORK:
					case WRAPPER:
					case WRITE:
					case XML:
					case YEAR:
					case YES:
					case ZONE:
					case BETWEEN:
					case BIGINT:
					case BIT:
					case BOOLEAN:
					case CHAR:
					case CHARACTER:
					case COALESCE:
					case DEC:
					case DECIMAL:
					case EXISTS:
					case EXTRACT:
					case FLOAT:
					case GREATEST:
					case GROUPING:
					case INOUT:
					case INT:
					case INTEGER:
					case INTERVAL:
					case LEAST:
					case NATIONAL:
					case NCHAR:
					case NONE:
					case NULLIF:
					case NUMERIC:
					case OUT:
					case OVERLAY:
					case POSITION:
					case PRECISION:
					case REAL:
					case ROW:
					case SETOF:
					case SMALLINT:
					case SUBSTRING:
					case TIME:
					case TIMESTAMP:
					case TREAT:
					case TRIM:
					case VALUES:
					case VARCHAR:
					case XMLATTRIBUTES:
					case XMLCONCAT:
					case XMLELEMENT:
					case XMLEXISTS:
					case XMLFOREST:
					case XMLNAMESPACES:
					case XMLPARSE:
					case XMLPI:
					case XMLROOT:
					case XMLSERIALIZE:
					case XMLTABLE:
					case ALIGNMENT:
					case BASETYPE:
					case BUFFERS:
					case BYPASSRLS:
					case CANONICAL:
					case CATEGORY:
					case COLLATABLE:
					case COMBINEFUNC:
					case COMMUTATOR:
					case CONNECT:
					case COSTS:
					case CREATEDB:
					case CREATEROLE:
					case DESERIALFUNC:
					case DETERMINISTIC:
					case DISABLE_PAGE_SKIPPING:
					case ELEMENT:
					case EXTENDED:
					case FINALFUNC:
					case FINALFUNC_EXTRA:
					case FINALFUNC_MODIFY:
					case FORCE_NOT_NULL:
					case FORCE_NULL:
					case FORCE_QUOTE:
					case FORMAT:
					case GETTOKEN:
					case HASH:
					case HASHES:
					case HEADLINE:
					case HYPOTHETICAL:
					case INDEX_CLEANUP:
					case INIT:
					case INITCOND:
					case INTERNALLENGTH:
					case JSON:
					case LC_COLLATE:
					case LC_CTYPE:
					case LEFTARG:
					case LEXIZE:
					case LEXTYPES:
					case LIST:
					case LOCALE:
					case LOGIN:
					case MAIN:
					case MERGES:
					case MFINALFUNC:
					case MFINALFUNC_EXTRA:
					case MFINALFUNC_MODIFY:
					case MINITCOND:
					case MINVFUNC:
					case MODULUS:
					case MSFUNC:
					case MSSPACE:
					case MSTYPE:
					case NEGATOR:
					case NOBYPASSRLS:
					case NOCREATEDB:
					case NOCREATEROLE:
					case NOINHERIT:
					case NOLOGIN:
					case NOREPLICATION:
					case NOSUPERUSER:
					case OUTPUT:
					case PASSEDBYVALUE:
					case PATH:
					case PERMISSIVE:
					case PLAIN:
					case PREFERRED:
					case PROVIDER:
					case READ_ONLY:
					case READ_WRITE:
					case RECEIVE:
					case REMAINDER:
					case REPLICATION:
					case RESTRICTED:
					case RESTRICTIVE:
					case RIGHTARG:
					case SAFE:
					case SEND:
					case SERIALFUNC:
					case SETTINGS:
					case SFUNC:
					case SHAREABLE:
					case SKIP_LOCKED:
					case SORTOP:
					case SSPACE:
					case STYPE:
					case SUBTYPE_DIFF:
					case SUBTYPE_OPCLASS:
					case SUBTYPE:
					case SUMMARY:
					case SUPERUSER:
					case TIMING:
					case TYPMOD_IN:
					case TYPMOD_OUT:
					case UNSAFE:
					case USAGE:
					case VARIABLE:
					case YAML:
					case ALIAS:
					case ASSERT:
					case CONSTANT:
					case DATATYPE:
					case DEBUG:
					case DETAIL:
					case DIAGNOSTICS:
					case ELSEIF:
					case ELSIF:
					case ERRCODE:
					case EXIT:
					case EXCEPTION:
					case FOREACH:
					case GET:
					case HINT:
					case INFO:
					case LOG:
					case LOOP:
					case MESSAGE:
					case NOTICE:
					case OPEN:
					case PERFORM:
					case QUERY:
					case RAISE:
					case RECORD:
					case RETURN:
					case REVERSE:
					case ROWTYPE:
					case SLICE:
					case SQLSTATE:
					case STACKED:
					case WARNING:
					case WHILE:
					case Identifier:
					case QuotedIdentifier:
						{
						setState(5884);
						identifier();
						}
						break;
					case LEFT_PAREN:
						{
						setState(5885);
						window_definition();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5890);
				function_construct();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5891);
				extract_function();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5892);
				system_function();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5893);
				date_time_function();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5894);
				string_value_function();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5895);
				xml_function();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vex_or_named_notationContext extends ParserRuleContext {
		public IdentifierContext argname;
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public TerminalNode VARIADIC() { return getToken(PLpgSQLParser.VARIADIC, 0); }
		public PointerContext pointer() {
			return getRuleContext(PointerContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Vex_or_named_notationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vex_or_named_notation; }
	}

	public final Vex_or_named_notationContext vex_or_named_notation() throws RecognitionException {
		Vex_or_named_notationContext _localctx = new Vex_or_named_notationContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_vex_or_named_notation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5899);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VARIADIC) {
				{
				setState(5898);
				match(VARIADIC);
				}
			}

			setState(5904);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,738,_ctx) ) {
			case 1:
				{
				setState(5901);
				((Vex_or_named_notationContext)_localctx).argname = identifier();
				setState(5902);
				pointer();
				}
				break;
			}
			setState(5906);
			vex(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PointerContext extends ParserRuleContext {
		public TerminalNode EQUAL_GTH() { return getToken(PLpgSQLParser.EQUAL_GTH, 0); }
		public TerminalNode COLON_EQUAL() { return getToken(PLpgSQLParser.COLON_EQUAL, 0); }
		public PointerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pointer; }
	}

	public final PointerContext pointer() throws RecognitionException {
		PointerContext _localctx = new PointerContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_pointer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5908);
			_la = _input.LA(1);
			if ( !(_la==EQUAL_GTH || _la==COLON_EQUAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_constructContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public TerminalNode COALESCE() { return getToken(PLpgSQLParser.COALESCE, 0); }
		public TerminalNode GREATEST() { return getToken(PLpgSQLParser.GREATEST, 0); }
		public TerminalNode GROUPING() { return getToken(PLpgSQLParser.GROUPING, 0); }
		public TerminalNode LEAST() { return getToken(PLpgSQLParser.LEAST, 0); }
		public TerminalNode NULLIF() { return getToken(PLpgSQLParser.NULLIF, 0); }
		public TerminalNode XMLCONCAT() { return getToken(PLpgSQLParser.XMLCONCAT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public TerminalNode ROW() { return getToken(PLpgSQLParser.ROW, 0); }
		public Function_constructContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_construct; }
	}

	public final Function_constructContext function_construct() throws RecognitionException {
		Function_constructContext _localctx = new Function_constructContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_function_construct);
		int _la;
		try {
			setState(5935);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COALESCE:
			case GREATEST:
			case GROUPING:
			case LEAST:
			case NULLIF:
			case XMLCONCAT:
				enterOuterAlt(_localctx, 1);
				{
				setState(5910);
				_la = _input.LA(1);
				if ( !(((((_la - 299)) & ~0x3f) == 0 && ((1L << (_la - 299)) & ((1L << (COALESCE - 299)) | (1L << (GREATEST - 299)) | (1L << (GROUPING - 299)) | (1L << (LEAST - 299)) | (1L << (NULLIF - 299)) | (1L << (XMLCONCAT - 299)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5911);
				match(LEFT_PAREN);
				setState(5912);
				vex(0);
				setState(5917);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5913);
					match(COMMA);
					setState(5914);
					vex(0);
					}
					}
					setState(5919);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5920);
				match(RIGHT_PAREN);
				}
				break;
			case ROW:
				enterOuterAlt(_localctx, 2);
				{
				setState(5922);
				match(ROW);
				setState(5923);
				match(LEFT_PAREN);
				setState(5932);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATTACH) | (1L << ATTRIBUTE) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BY) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG) | (1L << CHAIN) | (1L << CHARACTERISTICS) | (1L << CHECKPOINT) | (1L << CLASS) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMENTS) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONFIGURATION) | (1L << CONFLICT) | (1L << CONNECTION) | (1L << CONSTRAINTS) | (1L << CONTENT) | (1L << CONTINUE) | (1L << CONVERSION) | (1L << COPY) | (1L << COST) | (1L << CSV) | (1L << CUBE) | (1L << CURRENT) | (1L << CURSOR) | (1L << CYCLE) | (1L << DATA) | (1L << DATABASE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DEFAULTS) | (1L << DEFERRED) | (1L << DEFINER) | (1L << DELETE) | (1L << DELIMITER) | (1L << DELIMITERS) | (1L << DEPENDS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DETACH - 64)) | (1L << (DICTIONARY - 64)) | (1L << (DISABLE - 64)) | (1L << (DISCARD - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOMAIN - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (EACH - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTED - 64)) | (1L << (ENUM - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVENT - 64)) | (1L << (EXCLUDE - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXCLUSIVE - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTENSION - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FAMILY - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORCE - 64)) | (1L << (FORWARD - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GENERATED - 64)) | (1L << (GLOBAL - 64)) | (1L << (GRANTED - 64)) | (1L << (GROUPS - 64)) | (1L << (HANDLER - 64)) | (1L << (HEADER - 64)) | (1L << (HOLD - 64)) | (1L << (HOUR - 64)) | (1L << (IDENTITY - 64)) | (1L << (IF - 64)) | (1L << (IMMEDIATE - 64)) | (1L << (IMMUTABLE - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPORT - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INCREMENT - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXES - 64)) | (1L << (INHERIT - 64)) | (1L << (INHERITS - 64)) | (1L << (INLINE - 64)) | (1L << (INPUT - 64)) | (1L << (INSENSITIVE - 64)) | (1L << (INSERT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INVOKER - 64)) | (1L << (ISOLATION - 64)) | (1L << (KEY - 64)) | (1L << (LABEL - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LARGE - 64)) | (1L << (LAST - 64)) | (1L << (LEAKPROOF - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LEVEL - 128)) | (1L << (LISTEN - 128)) | (1L << (LOAD - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCATION - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKED - 128)) | (1L << (LOGGED - 128)) | (1L << (MAPPING - 128)) | (1L << (MATCH - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MAXVALUE - 128)) | (1L << (METHOD - 128)) | (1L << (MINUTE - 128)) | (1L << (MINVALUE - 128)) | (1L << (MODE - 128)) | (1L << (MONTH - 128)) | (1L << (MOVE - 128)) | (1L << (NAME - 128)) | (1L << (NAMES - 128)) | (1L << (NEW - 128)) | (1L << (NEXT - 128)) | (1L << (NO - 128)) | (1L << (NOTHING - 128)) | (1L << (NOTIFY - 128)) | (1L << (NOWAIT - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFF - 128)) | (1L << (OIDS - 128)) | (1L << (OLD - 128)) | (1L << (OPERATOR - 128)) | (1L << (OPTION - 128)) | (1L << (OPTIONS - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OTHERS - 128)) | (1L << (OVER - 128)) | (1L << (OVERRIDING - 128)) | (1L << (OWNED - 128)) | (1L << (OWNER - 128)) | (1L << (PARALLEL - 128)) | (1L << (PARSER - 128)) | (1L << (PARTIAL - 128)) | (1L << (PARTITION - 128)) | (1L << (PASSING - 128)) | (1L << (PASSWORD - 128)) | (1L << (PLANS - 128)) | (1L << (POLICY - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PREPARED - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRIOR - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROCEDURAL - 128)) | (1L << (PROCEDURE - 128)) | (1L << (PROCEDURES - 128)) | (1L << (PROGRAM - 128)) | (1L << (PUBLICATION - 128)) | (1L << (QUOTE - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (REASSIGN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (RECHECK - 192)) | (1L << (RECURSIVE - 192)) | (1L << (REF - 192)) | (1L << (REFERENCING - 192)) | (1L << (REFRESH - 192)) | (1L << (REINDEX - 192)) | (1L << (RELATIVE - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (REPLICA - 192)) | (1L << (RESET - 192)) | (1L << (RESTART - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUTINE - 192)) | (1L << (ROUTINES - 192)) | (1L << (ROWS - 192)) | (1L << (RULE - 192)) | (1L << (SAVEPOINT - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SCROLL - 192)) | (1L << (SEARCH - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEQUENCE - 192)) | (1L << (SEQUENCES - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SERVER - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHARE - 192)) | (1L << (SHOW - 192)) | (1L << (SIMPLE - 192)) | (1L << (SKIP_ - 192)) | (1L << (SNAPSHOT - 192)) | (1L << (SQL - 192)) | (1L << (STABLE - 192)) | (1L << (STANDALONE - 192)) | (1L << (START - 192)) | (1L << (STATEMENT - 192)) | (1L << (STATISTICS - 192)) | (1L << (STDIN - 192)) | (1L << (STDOUT - 192)) | (1L << (STORAGE - 192)) | (1L << (STORED - 192)) | (1L << (STRICT - 192)) | (1L << (STRIP - 192)) | (1L << (SUBSCRIPTION - 192)) | (1L << (SUPPORT - 192)) | (1L << (SYSID - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESPACE - 192)) | (1L << (TEMP - 192)) | (1L << (TEMPLATE - 192)) | (1L << (TEMPORARY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TEXT - 256)) | (1L << (TIES - 256)) | (1L << (TRANSACTION - 256)) | (1L << (TRANSFORM - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TRUSTED - 256)) | (1L << (TYPE - 256)) | (1L << (TYPES - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNENCRYPTED - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNLISTEN - 256)) | (1L << (UNLOGGED - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (VACUUM - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALIDATOR - 256)) | (1L << (VALUE - 256)) | (1L << (VARYING - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (VIEWS - 256)) | (1L << (VOLATILE - 256)) | (1L << (WHITESPACE - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (XML - 256)) | (1L << (YEAR - 256)) | (1L << (YES - 256)) | (1L << (ZONE - 256)) | (1L << (BETWEEN - 256)) | (1L << (BIGINT - 256)) | (1L << (BIT - 256)) | (1L << (BOOLEAN - 256)) | (1L << (CHAR - 256)) | (1L << (CHARACTER - 256)) | (1L << (COALESCE - 256)) | (1L << (DEC - 256)) | (1L << (DECIMAL - 256)) | (1L << (EXISTS - 256)) | (1L << (EXTRACT - 256)) | (1L << (FLOAT - 256)) | (1L << (GREATEST - 256)) | (1L << (GROUPING - 256)) | (1L << (INOUT - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERVAL - 256)) | (1L << (LEAST - 256)) | (1L << (NATIONAL - 256)) | (1L << (NCHAR - 256)) | (1L << (NONE - 256)) | (1L << (NULLIF - 256)) | (1L << (NUMERIC - 256)) | (1L << (OUT - 256)) | (1L << (OVERLAY - 256)) | (1L << (POSITION - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRECISION - 320)) | (1L << (REAL - 320)) | (1L << (ROW - 320)) | (1L << (SETOF - 320)) | (1L << (SMALLINT - 320)) | (1L << (SUBSTRING - 320)) | (1L << (TIME - 320)) | (1L << (TIMESTAMP - 320)) | (1L << (TREAT - 320)) | (1L << (TRIM - 320)) | (1L << (VALUES - 320)) | (1L << (VARCHAR - 320)) | (1L << (XMLATTRIBUTES - 320)) | (1L << (XMLCONCAT - 320)) | (1L << (XMLELEMENT - 320)) | (1L << (XMLEXISTS - 320)) | (1L << (XMLFOREST - 320)) | (1L << (XMLNAMESPACES - 320)) | (1L << (XMLPARSE - 320)) | (1L << (XMLPI - 320)) | (1L << (XMLROOT - 320)) | (1L << (XMLSERIALIZE - 320)) | (1L << (XMLTABLE - 320)) | (1L << (AUTHORIZATION - 320)) | (1L << (BINARY - 320)) | (1L << (COLLATION - 320)) | (1L << (CONCURRENTLY - 320)) | (1L << (CROSS - 320)) | (1L << (CURRENT_SCHEMA - 320)) | (1L << (FREEZE - 320)) | (1L << (FULL - 320)) | (1L << (ILIKE - 320)) | (1L << (INNER - 320)) | (1L << (IS - 320)) | (1L << (ISNULL - 320)) | (1L << (JOIN - 320)) | (1L << (LEFT - 320)) | (1L << (LIKE - 320)) | (1L << (NATURAL - 320)) | (1L << (NOTNULL - 320)) | (1L << (OUTER - 320)) | (1L << (OVERLAPS - 320)) | (1L << (RIGHT - 320)) | (1L << (SIMILAR - 320)) | (1L << (TABLESAMPLE - 320)) | (1L << (VERBOSE - 320)) | (1L << (ALL - 320)) | (1L << (ANY - 320)) | (1L << (ARRAY - 320)) | (1L << (CASE - 320)) | (1L << (CAST - 320)) | (1L << (CURRENT_CATALOG - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (CURRENT_DATE - 384)) | (1L << (CURRENT_TIME - 384)) | (1L << (CURRENT_TIMESTAMP - 384)) | (1L << (CURRENT_USER - 384)) | (1L << (FALSE - 384)) | (1L << (LOCALTIME - 384)) | (1L << (LOCALTIMESTAMP - 384)) | (1L << (NOT - 384)) | (1L << (NULL - 384)) | (1L << (ON - 384)) | (1L << (SESSION_USER - 384)) | (1L << (SOME - 384)) | (1L << (TRUE - 384)) | (1L << (USER - 384)) | (1L << (ALIGNMENT - 384)) | (1L << (BASETYPE - 384)) | (1L << (BUFFERS - 384)) | (1L << (BYPASSRLS - 384)) | (1L << (CANONICAL - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (CATEGORY - 448)) | (1L << (COLLATABLE - 448)) | (1L << (COMBINEFUNC - 448)) | (1L << (COMMUTATOR - 448)) | (1L << (CONNECT - 448)) | (1L << (COSTS - 448)) | (1L << (CREATEDB - 448)) | (1L << (CREATEROLE - 448)) | (1L << (DESERIALFUNC - 448)) | (1L << (DETERMINISTIC - 448)) | (1L << (DISABLE_PAGE_SKIPPING - 448)) | (1L << (ELEMENT - 448)) | (1L << (EXTENDED - 448)) | (1L << (FINALFUNC - 448)) | (1L << (FINALFUNC_EXTRA - 448)) | (1L << (FINALFUNC_MODIFY - 448)) | (1L << (FORCE_NOT_NULL - 448)) | (1L << (FORCE_NULL - 448)) | (1L << (FORCE_QUOTE - 448)) | (1L << (FORMAT - 448)) | (1L << (GETTOKEN - 448)) | (1L << (HASH - 448)) | (1L << (HASHES - 448)) | (1L << (HEADLINE - 448)) | (1L << (HYPOTHETICAL - 448)) | (1L << (INDEX_CLEANUP - 448)) | (1L << (INIT - 448)) | (1L << (INITCOND - 448)) | (1L << (INTERNALLENGTH - 448)) | (1L << (JSON - 448)) | (1L << (LC_COLLATE - 448)) | (1L << (LC_CTYPE - 448)) | (1L << (LEFTARG - 448)) | (1L << (LEXIZE - 448)) | (1L << (LEXTYPES - 448)) | (1L << (LIST - 448)) | (1L << (LOCALE - 448)) | (1L << (LOGIN - 448)) | (1L << (MAIN - 448)) | (1L << (MERGES - 448)) | (1L << (MFINALFUNC - 448)) | (1L << (MFINALFUNC_EXTRA - 448)) | (1L << (MFINALFUNC_MODIFY - 448)) | (1L << (MINITCOND - 448)) | (1L << (MINVFUNC - 448)) | (1L << (MODULUS - 448)) | (1L << (MSFUNC - 448)) | (1L << (MSSPACE - 448)) | (1L << (MSTYPE - 448)) | (1L << (NEGATOR - 448)) | (1L << (NOBYPASSRLS - 448)) | (1L << (NOCREATEDB - 448)) | (1L << (NOCREATEROLE - 448)) | (1L << (NOINHERIT - 448)) | (1L << (NOLOGIN - 448)) | (1L << (NOREPLICATION - 448)) | (1L << (NOSUPERUSER - 448)) | (1L << (OUTPUT - 448)) | (1L << (PASSEDBYVALUE - 448)) | (1L << (PATH - 448)) | (1L << (PERMISSIVE - 448)) | (1L << (PLAIN - 448)) | (1L << (PREFERRED - 448)) | (1L << (PROVIDER - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (READ_ONLY - 512)) | (1L << (READ_WRITE - 512)) | (1L << (RECEIVE - 512)) | (1L << (REMAINDER - 512)) | (1L << (REPLICATION - 512)) | (1L << (RESTRICTED - 512)) | (1L << (RESTRICTIVE - 512)) | (1L << (RIGHTARG - 512)) | (1L << (SAFE - 512)) | (1L << (SEND - 512)) | (1L << (SERIALFUNC - 512)) | (1L << (SETTINGS - 512)) | (1L << (SFUNC - 512)) | (1L << (SHAREABLE - 512)) | (1L << (SKIP_LOCKED - 512)) | (1L << (SORTOP - 512)) | (1L << (SSPACE - 512)) | (1L << (STYPE - 512)) | (1L << (SUBTYPE_DIFF - 512)) | (1L << (SUBTYPE_OPCLASS - 512)) | (1L << (SUBTYPE - 512)) | (1L << (SUMMARY - 512)) | (1L << (SUPERUSER - 512)) | (1L << (TIMING - 512)) | (1L << (TYPMOD_IN - 512)) | (1L << (TYPMOD_OUT - 512)) | (1L << (UNSAFE - 512)) | (1L << (USAGE - 512)) | (1L << (VARIABLE - 512)) | (1L << (YAML - 512)) | (1L << (ALIAS - 512)) | (1L << (ASSERT - 512)) | (1L << (CONSTANT - 512)) | (1L << (DATATYPE - 512)) | (1L << (DEBUG - 512)) | (1L << (DETAIL - 512)) | (1L << (DIAGNOSTICS - 512)) | (1L << (ELSEIF - 512)) | (1L << (ELSIF - 512)) | (1L << (ERRCODE - 512)) | (1L << (EXIT - 512)) | (1L << (EXCEPTION - 512)) | (1L << (FOREACH - 512)) | (1L << (GET - 512)) | (1L << (HINT - 512)) | (1L << (INFO - 512)) | (1L << (LOG - 512)) | (1L << (LOOP - 512)) | (1L << (MESSAGE - 512)) | (1L << (NOTICE - 512)) | (1L << (OPEN - 512)) | (1L << (PERFORM - 512)) | (1L << (QUERY - 512)) | (1L << (RAISE - 512)) | (1L << (RECORD - 512)) | (1L << (RETURN - 512)) | (1L << (REVERSE - 512)) | (1L << (ROWTYPE - 512)) | (1L << (SLICE - 512)) | (1L << (SQLSTATE - 512)) | (1L << (STACKED - 512)) | (1L << (WARNING - 512)) | (1L << (WHILE - 512)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (LEFT_PAREN - 585)) | (1L << (PLUS - 585)) | (1L << (MINUS - 585)) | (1L << (MULTIPLY - 585)) | (1L << (LESS_LESS - 585)) | (1L << (GREATER_GREATER - 585)) | (1L << (HASH_SIGN - 585)) | (1L << (OP_CHARS - 585)) | (1L << (NUMBER_LITERAL - 585)) | (1L << (REAL_NUMBER - 585)) | (1L << (DOLLAR_NUMBER - 585)) | (1L << (Identifier - 585)) | (1L << (QuotedIdentifier - 585)) | (1L << (Character_String_Literal - 585)) | (1L << (BeginDollarStringConstant - 585)))) != 0)) {
					{
					setState(5924);
					vex(0);
					setState(5929);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(5925);
						match(COMMA);
						setState(5926);
						vex(0);
						}
						}
						setState(5931);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(5934);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Extract_functionContext extends ParserRuleContext {
		public TerminalNode EXTRACT() { return getToken(PLpgSQLParser.EXTRACT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public TerminalNode FROM() { return getToken(PLpgSQLParser.FROM, 0); }
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Character_stringContext character_string() {
			return getRuleContext(Character_stringContext.class,0);
		}
		public Extract_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extract_function; }
	}

	public final Extract_functionContext extract_function() throws RecognitionException {
		Extract_functionContext _localctx = new Extract_functionContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_extract_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5937);
			match(EXTRACT);
			setState(5938);
			match(LEFT_PAREN);
			setState(5941);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BY:
			case CACHE:
			case CALL:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COLUMNS:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONFLICT:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CUBE:
			case CURRENT:
			case CURSOR:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DEPENDS:
			case DETACH:
			case DICTIONARY:
			case DISABLE:
			case DISCARD:
			case DOCUMENT:
			case DOMAIN:
			case DOUBLE:
			case DROP:
			case EACH:
			case ENABLE:
			case ENCODING:
			case ENCRYPTED:
			case ENUM:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GENERATED:
			case GLOBAL:
			case GRANTED:
			case GROUPS:
			case HANDLER:
			case HEADER:
			case HOLD:
			case HOUR:
			case IDENTITY:
			case IF:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT:
			case IMPORT:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCKED:
			case LOGGED:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case METHOD:
			case MINUTE:
			case MINVALUE:
			case MODE:
			case MONTH:
			case MOVE:
			case NAME:
			case NAMES:
			case NEW:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS:
			case OBJECT:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OVER:
			case OVERRIDING:
			case OWNED:
			case OWNER:
			case PARALLEL:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POLICY:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROCEDURES:
			case PROGRAM:
			case PUBLICATION:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINES:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMAS:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SKIP_:
			case SNAPSHOT:
			case SQL:
			case STABLE:
			case STANDALONE:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STORED:
			case STRICT:
			case STRIP:
			case SUBSCRIPTION:
			case SUPPORT:
			case SYSID:
			case SYSTEM:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT:
			case TIES:
			case TRANSACTION:
			case TRANSFORM:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE:
			case VARYING:
			case VERSION:
			case VIEW:
			case VIEWS:
			case VOLATILE:
			case WHITESPACE:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML:
			case YEAR:
			case YES:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL:
			case EXISTS:
			case EXTRACT:
			case FLOAT:
			case GREATEST:
			case GROUPING:
			case INOUT:
			case INT:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case ALIGNMENT:
			case BASETYPE:
			case BUFFERS:
			case BYPASSRLS:
			case CANONICAL:
			case CATEGORY:
			case COLLATABLE:
			case COMBINEFUNC:
			case COMMUTATOR:
			case CONNECT:
			case COSTS:
			case CREATEDB:
			case CREATEROLE:
			case DESERIALFUNC:
			case DETERMINISTIC:
			case DISABLE_PAGE_SKIPPING:
			case ELEMENT:
			case EXTENDED:
			case FINALFUNC:
			case FINALFUNC_EXTRA:
			case FINALFUNC_MODIFY:
			case FORCE_NOT_NULL:
			case FORCE_NULL:
			case FORCE_QUOTE:
			case FORMAT:
			case GETTOKEN:
			case HASH:
			case HASHES:
			case HEADLINE:
			case HYPOTHETICAL:
			case INDEX_CLEANUP:
			case INIT:
			case INITCOND:
			case INTERNALLENGTH:
			case JSON:
			case LC_COLLATE:
			case LC_CTYPE:
			case LEFTARG:
			case LEXIZE:
			case LEXTYPES:
			case LIST:
			case LOCALE:
			case LOGIN:
			case MAIN:
			case MERGES:
			case MFINALFUNC:
			case MFINALFUNC_EXTRA:
			case MFINALFUNC_MODIFY:
			case MINITCOND:
			case MINVFUNC:
			case MODULUS:
			case MSFUNC:
			case MSSPACE:
			case MSTYPE:
			case NEGATOR:
			case NOBYPASSRLS:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOREPLICATION:
			case NOSUPERUSER:
			case OUTPUT:
			case PASSEDBYVALUE:
			case PATH:
			case PERMISSIVE:
			case PLAIN:
			case PREFERRED:
			case PROVIDER:
			case READ_ONLY:
			case READ_WRITE:
			case RECEIVE:
			case REMAINDER:
			case REPLICATION:
			case RESTRICTED:
			case RESTRICTIVE:
			case RIGHTARG:
			case SAFE:
			case SEND:
			case SERIALFUNC:
			case SETTINGS:
			case SFUNC:
			case SHAREABLE:
			case SKIP_LOCKED:
			case SORTOP:
			case SSPACE:
			case STYPE:
			case SUBTYPE_DIFF:
			case SUBTYPE_OPCLASS:
			case SUBTYPE:
			case SUMMARY:
			case SUPERUSER:
			case TIMING:
			case TYPMOD_IN:
			case TYPMOD_OUT:
			case UNSAFE:
			case USAGE:
			case VARIABLE:
			case YAML:
			case ALIAS:
			case ASSERT:
			case CONSTANT:
			case DATATYPE:
			case DEBUG:
			case DETAIL:
			case DIAGNOSTICS:
			case ELSEIF:
			case ELSIF:
			case ERRCODE:
			case EXIT:
			case EXCEPTION:
			case FOREACH:
			case GET:
			case HINT:
			case INFO:
			case LOG:
			case LOOP:
			case MESSAGE:
			case NOTICE:
			case OPEN:
			case PERFORM:
			case QUERY:
			case RAISE:
			case RECORD:
			case RETURN:
			case REVERSE:
			case ROWTYPE:
			case SLICE:
			case SQLSTATE:
			case STACKED:
			case WARNING:
			case WHILE:
			case Identifier:
			case QuotedIdentifier:
				{
				setState(5939);
				identifier();
				}
				break;
			case Character_String_Literal:
			case BeginDollarStringConstant:
				{
				setState(5940);
				character_string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5943);
			match(FROM);
			setState(5944);
			vex(0);
			setState(5945);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class System_functionContext extends ParserRuleContext {
		public TerminalNode CURRENT_CATALOG() { return getToken(PLpgSQLParser.CURRENT_CATALOG, 0); }
		public TerminalNode CURRENT_SCHEMA() { return getToken(PLpgSQLParser.CURRENT_SCHEMA, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PLpgSQLParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(PLpgSQLParser.SESSION_USER, 0); }
		public TerminalNode USER() { return getToken(PLpgSQLParser.USER, 0); }
		public Cast_specificationContext cast_specification() {
			return getRuleContext(Cast_specificationContext.class,0);
		}
		public System_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_system_function; }
	}

	public final System_functionContext system_function() throws RecognitionException {
		System_functionContext _localctx = new System_functionContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_system_function);
		try {
			setState(5953);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT_CATALOG:
				enterOuterAlt(_localctx, 1);
				{
				setState(5947);
				match(CURRENT_CATALOG);
				}
				break;
			case CURRENT_SCHEMA:
				enterOuterAlt(_localctx, 2);
				{
				setState(5948);
				match(CURRENT_SCHEMA);
				}
				break;
			case CURRENT_USER:
				enterOuterAlt(_localctx, 3);
				{
				setState(5949);
				match(CURRENT_USER);
				}
				break;
			case SESSION_USER:
				enterOuterAlt(_localctx, 4);
				{
				setState(5950);
				match(SESSION_USER);
				}
				break;
			case USER:
				enterOuterAlt(_localctx, 5);
				{
				setState(5951);
				match(USER);
				}
				break;
			case TREAT:
			case CAST:
				enterOuterAlt(_localctx, 6);
				{
				setState(5952);
				cast_specification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Date_time_functionContext extends ParserRuleContext {
		public TerminalNode CURRENT_DATE() { return getToken(PLpgSQLParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(PLpgSQLParser.CURRENT_TIME, 0); }
		public Type_lengthContext type_length() {
			return getRuleContext(Type_lengthContext.class,0);
		}
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(PLpgSQLParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode LOCALTIME() { return getToken(PLpgSQLParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(PLpgSQLParser.LOCALTIMESTAMP, 0); }
		public Date_time_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_date_time_function; }
	}

	public final Date_time_functionContext date_time_function() throws RecognitionException {
		Date_time_functionContext _localctx = new Date_time_functionContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_date_time_function);
		try {
			setState(5972);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT_DATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5955);
				match(CURRENT_DATE);
				}
				break;
			case CURRENT_TIME:
				enterOuterAlt(_localctx, 2);
				{
				setState(5956);
				match(CURRENT_TIME);
				setState(5958);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,745,_ctx) ) {
				case 1:
					{
					setState(5957);
					type_length();
					}
					break;
				}
				}
				break;
			case CURRENT_TIMESTAMP:
				enterOuterAlt(_localctx, 3);
				{
				setState(5960);
				match(CURRENT_TIMESTAMP);
				setState(5962);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,746,_ctx) ) {
				case 1:
					{
					setState(5961);
					type_length();
					}
					break;
				}
				}
				break;
			case LOCALTIME:
				enterOuterAlt(_localctx, 4);
				{
				setState(5964);
				match(LOCALTIME);
				setState(5966);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,747,_ctx) ) {
				case 1:
					{
					setState(5965);
					type_length();
					}
					break;
				}
				}
				break;
			case LOCALTIMESTAMP:
				enterOuterAlt(_localctx, 5);
				{
				setState(5968);
				match(LOCALTIMESTAMP);
				setState(5970);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,748,_ctx) ) {
				case 1:
					{
					setState(5969);
					type_length();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class String_value_functionContext extends ParserRuleContext {
		public VexContext chars;
		public VexContext str;
		public TerminalNode TRIM() { return getToken(PLpgSQLParser.TRIM, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public TerminalNode FROM() { return getToken(PLpgSQLParser.FROM, 0); }
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public TerminalNode LEADING() { return getToken(PLpgSQLParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(PLpgSQLParser.TRAILING, 0); }
		public TerminalNode BOTH() { return getToken(PLpgSQLParser.BOTH, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public TerminalNode SUBSTRING() { return getToken(PLpgSQLParser.SUBSTRING, 0); }
		public TerminalNode FOR() { return getToken(PLpgSQLParser.FOR, 0); }
		public TerminalNode POSITION() { return getToken(PLpgSQLParser.POSITION, 0); }
		public Vex_bContext vex_b() {
			return getRuleContext(Vex_bContext.class,0);
		}
		public TerminalNode IN() { return getToken(PLpgSQLParser.IN, 0); }
		public TerminalNode OVERLAY() { return getToken(PLpgSQLParser.OVERLAY, 0); }
		public TerminalNode PLACING() { return getToken(PLpgSQLParser.PLACING, 0); }
		public TerminalNode COLLATION() { return getToken(PLpgSQLParser.COLLATION, 0); }
		public String_value_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string_value_function; }
	}

	public final String_value_functionContext string_value_function() throws RecognitionException {
		String_value_functionContext _localctx = new String_value_functionContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_string_value_function);
		int _la;
		try {
			setState(6041);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TRIM:
				enterOuterAlt(_localctx, 1);
				{
				setState(5974);
				match(TRIM);
				setState(5975);
				match(LEFT_PAREN);
				setState(5977);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 375)) & ~0x3f) == 0 && ((1L << (_la - 375)) & ((1L << (BOTH - 375)) | (1L << (LEADING - 375)) | (1L << (TRAILING - 375)))) != 0)) {
					{
					setState(5976);
					_la = _input.LA(1);
					if ( !(((((_la - 375)) & ~0x3f) == 0 && ((1L << (_la - 375)) & ((1L << (BOTH - 375)) | (1L << (LEADING - 375)) | (1L << (TRAILING - 375)))) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5991);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,753,_ctx) ) {
				case 1:
					{
					setState(5979);
					((String_value_functionContext)_localctx).chars = vex(0);
					setState(5980);
					match(FROM);
					setState(5981);
					((String_value_functionContext)_localctx).str = vex(0);
					}
					break;
				case 2:
					{
					setState(5984);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==FROM) {
						{
						setState(5983);
						match(FROM);
						}
					}

					setState(5986);
					((String_value_functionContext)_localctx).str = vex(0);
					setState(5989);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5987);
						match(COMMA);
						setState(5988);
						((String_value_functionContext)_localctx).chars = vex(0);
						}
					}

					}
					break;
				}
				setState(5993);
				match(RIGHT_PAREN);
				}
				break;
			case SUBSTRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(5995);
				match(SUBSTRING);
				setState(5996);
				match(LEFT_PAREN);
				setState(5997);
				vex(0);
				setState(6002);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5998);
					match(COMMA);
					setState(5999);
					vex(0);
					}
					}
					setState(6004);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6007);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM) {
					{
					setState(6005);
					match(FROM);
					setState(6006);
					vex(0);
					}
				}

				setState(6011);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(6009);
					match(FOR);
					setState(6010);
					vex(0);
					}
				}

				setState(6013);
				match(RIGHT_PAREN);
				}
				break;
			case POSITION:
				enterOuterAlt(_localctx, 3);
				{
				setState(6015);
				match(POSITION);
				setState(6016);
				match(LEFT_PAREN);
				setState(6017);
				vex_b(0);
				setState(6018);
				match(IN);
				setState(6019);
				vex(0);
				setState(6020);
				match(RIGHT_PAREN);
				}
				break;
			case OVERLAY:
				enterOuterAlt(_localctx, 4);
				{
				setState(6022);
				match(OVERLAY);
				setState(6023);
				match(LEFT_PAREN);
				setState(6024);
				vex(0);
				setState(6025);
				match(PLACING);
				setState(6026);
				vex(0);
				setState(6027);
				match(FROM);
				setState(6028);
				vex(0);
				setState(6031);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(6029);
					match(FOR);
					setState(6030);
					vex(0);
					}
				}

				setState(6033);
				match(RIGHT_PAREN);
				}
				break;
			case COLLATION:
				enterOuterAlt(_localctx, 5);
				{
				setState(6035);
				match(COLLATION);
				setState(6036);
				match(FOR);
				setState(6037);
				match(LEFT_PAREN);
				setState(6038);
				vex(0);
				setState(6039);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_functionContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext attname;
		public TerminalNode XMLELEMENT() { return getToken(PLpgSQLParser.XMLELEMENT, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PLpgSQLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PLpgSQLParser.LEFT_PAREN, i);
		}
		public TerminalNode NAME() { return getToken(PLpgSQLParser.NAME, 0); }
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PLpgSQLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PLpgSQLParser.RIGHT_PAREN, i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public TerminalNode XMLATTRIBUTES() { return getToken(PLpgSQLParser.XMLATTRIBUTES, 0); }
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public List<TerminalNode> AS() { return getTokens(PLpgSQLParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(PLpgSQLParser.AS, i);
		}
		public TerminalNode XMLFOREST() { return getToken(PLpgSQLParser.XMLFOREST, 0); }
		public TerminalNode XMLPI() { return getToken(PLpgSQLParser.XMLPI, 0); }
		public TerminalNode XMLROOT() { return getToken(PLpgSQLParser.XMLROOT, 0); }
		public TerminalNode VERSION() { return getToken(PLpgSQLParser.VERSION, 0); }
		public List<TerminalNode> NO() { return getTokens(PLpgSQLParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(PLpgSQLParser.NO, i);
		}
		public List<TerminalNode> VALUE() { return getTokens(PLpgSQLParser.VALUE); }
		public TerminalNode VALUE(int i) {
			return getToken(PLpgSQLParser.VALUE, i);
		}
		public TerminalNode STANDALONE() { return getToken(PLpgSQLParser.STANDALONE, 0); }
		public TerminalNode YES() { return getToken(PLpgSQLParser.YES, 0); }
		public TerminalNode XMLEXISTS() { return getToken(PLpgSQLParser.XMLEXISTS, 0); }
		public TerminalNode PASSING() { return getToken(PLpgSQLParser.PASSING, 0); }
		public List<TerminalNode> BY() { return getTokens(PLpgSQLParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(PLpgSQLParser.BY, i);
		}
		public List<TerminalNode> REF() { return getTokens(PLpgSQLParser.REF); }
		public TerminalNode REF(int i) {
			return getToken(PLpgSQLParser.REF, i);
		}
		public TerminalNode XMLPARSE() { return getToken(PLpgSQLParser.XMLPARSE, 0); }
		public TerminalNode DOCUMENT() { return getToken(PLpgSQLParser.DOCUMENT, 0); }
		public TerminalNode CONTENT() { return getToken(PLpgSQLParser.CONTENT, 0); }
		public TerminalNode XMLSERIALIZE() { return getToken(PLpgSQLParser.XMLSERIALIZE, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode XMLTABLE() { return getToken(PLpgSQLParser.XMLTABLE, 0); }
		public TerminalNode COLUMNS() { return getToken(PLpgSQLParser.COLUMNS, 0); }
		public List<Xml_table_columnContext> xml_table_column() {
			return getRuleContexts(Xml_table_columnContext.class);
		}
		public Xml_table_columnContext xml_table_column(int i) {
			return getRuleContext(Xml_table_columnContext.class,i);
		}
		public TerminalNode XMLNAMESPACES() { return getToken(PLpgSQLParser.XMLNAMESPACES, 0); }
		public Xml_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_function; }
	}

	public final Xml_functionContext xml_function() throws RecognitionException {
		Xml_functionContext _localctx = new Xml_functionContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_xml_function);
		int _la;
		try {
			setState(6204);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case XMLELEMENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(6043);
				match(XMLELEMENT);
				setState(6044);
				match(LEFT_PAREN);
				setState(6045);
				match(NAME);
				setState(6046);
				((Xml_functionContext)_localctx).name = identifier();
				setState(6068);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,762,_ctx) ) {
				case 1:
					{
					setState(6047);
					match(COMMA);
					setState(6048);
					match(XMLATTRIBUTES);
					setState(6049);
					match(LEFT_PAREN);
					setState(6050);
					vex(0);
					setState(6053);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(6051);
						match(AS);
						setState(6052);
						((Xml_functionContext)_localctx).attname = identifier();
						}
					}

					setState(6063);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(6055);
						match(COMMA);
						setState(6056);
						vex(0);
						setState(6059);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==AS) {
							{
							setState(6057);
							match(AS);
							setState(6058);
							((Xml_functionContext)_localctx).attname = identifier();
							}
						}

						}
						}
						setState(6065);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(6066);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(6074);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6070);
					match(COMMA);
					setState(6071);
					vex(0);
					}
					}
					setState(6076);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6077);
				match(RIGHT_PAREN);
				}
				break;
			case XMLFOREST:
				enterOuterAlt(_localctx, 2);
				{
				setState(6079);
				match(XMLFOREST);
				setState(6080);
				match(LEFT_PAREN);
				setState(6081);
				vex(0);
				setState(6084);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(6082);
					match(AS);
					setState(6083);
					((Xml_functionContext)_localctx).name = identifier();
					}
				}

				setState(6094);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6086);
					match(COMMA);
					setState(6087);
					vex(0);
					setState(6090);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(6088);
						match(AS);
						setState(6089);
						((Xml_functionContext)_localctx).name = identifier();
						}
					}

					}
					}
					setState(6096);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6097);
				match(RIGHT_PAREN);
				}
				break;
			case XMLPI:
				enterOuterAlt(_localctx, 3);
				{
				setState(6099);
				match(XMLPI);
				setState(6100);
				match(LEFT_PAREN);
				setState(6101);
				match(NAME);
				setState(6102);
				((Xml_functionContext)_localctx).name = identifier();
				setState(6105);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(6103);
					match(COMMA);
					setState(6104);
					vex(0);
					}
				}

				setState(6107);
				match(RIGHT_PAREN);
				}
				break;
			case XMLROOT:
				enterOuterAlt(_localctx, 4);
				{
				setState(6109);
				match(XMLROOT);
				setState(6110);
				match(LEFT_PAREN);
				setState(6111);
				vex(0);
				setState(6112);
				match(COMMA);
				setState(6113);
				match(VERSION);
				setState(6117);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,768,_ctx) ) {
				case 1:
					{
					setState(6114);
					vex(0);
					}
					break;
				case 2:
					{
					setState(6115);
					match(NO);
					setState(6116);
					match(VALUE);
					}
					break;
				}
				setState(6127);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(6119);
					match(COMMA);
					setState(6120);
					match(STANDALONE);
					setState(6125);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,769,_ctx) ) {
					case 1:
						{
						setState(6121);
						match(YES);
						}
						break;
					case 2:
						{
						setState(6122);
						match(NO);
						}
						break;
					case 3:
						{
						setState(6123);
						match(NO);
						setState(6124);
						match(VALUE);
						}
						break;
					}
					}
				}

				setState(6129);
				match(RIGHT_PAREN);
				}
				break;
			case XMLEXISTS:
				enterOuterAlt(_localctx, 5);
				{
				setState(6131);
				match(XMLEXISTS);
				setState(6132);
				match(LEFT_PAREN);
				setState(6133);
				vex(0);
				setState(6134);
				match(PASSING);
				setState(6137);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,771,_ctx) ) {
				case 1:
					{
					setState(6135);
					match(BY);
					setState(6136);
					match(REF);
					}
					break;
				}
				setState(6139);
				vex(0);
				setState(6142);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BY) {
					{
					setState(6140);
					match(BY);
					setState(6141);
					match(REF);
					}
				}

				setState(6144);
				match(RIGHT_PAREN);
				}
				break;
			case XMLPARSE:
				enterOuterAlt(_localctx, 6);
				{
				setState(6146);
				match(XMLPARSE);
				setState(6147);
				match(LEFT_PAREN);
				setState(6148);
				_la = _input.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6149);
				vex(0);
				setState(6150);
				match(RIGHT_PAREN);
				}
				break;
			case XMLSERIALIZE:
				enterOuterAlt(_localctx, 7);
				{
				setState(6152);
				match(XMLSERIALIZE);
				setState(6153);
				match(LEFT_PAREN);
				setState(6154);
				_la = _input.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6155);
				vex(0);
				setState(6156);
				match(AS);
				setState(6157);
				data_type();
				setState(6158);
				match(RIGHT_PAREN);
				}
				break;
			case XMLTABLE:
				enterOuterAlt(_localctx, 8);
				{
				setState(6160);
				match(XMLTABLE);
				setState(6161);
				match(LEFT_PAREN);
				setState(6180);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,774,_ctx) ) {
				case 1:
					{
					setState(6162);
					match(XMLNAMESPACES);
					setState(6163);
					match(LEFT_PAREN);
					setState(6164);
					vex(0);
					setState(6165);
					match(AS);
					setState(6166);
					((Xml_functionContext)_localctx).name = identifier();
					setState(6174);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(6167);
						match(COMMA);
						setState(6168);
						vex(0);
						setState(6169);
						match(AS);
						setState(6170);
						((Xml_functionContext)_localctx).name = identifier();
						}
						}
						setState(6176);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(6177);
					match(RIGHT_PAREN);
					setState(6178);
					match(COMMA);
					}
					break;
				}
				setState(6182);
				vex(0);
				setState(6183);
				match(PASSING);
				setState(6186);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,775,_ctx) ) {
				case 1:
					{
					setState(6184);
					match(BY);
					setState(6185);
					match(REF);
					}
					break;
				}
				setState(6188);
				vex(0);
				setState(6191);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BY) {
					{
					setState(6189);
					match(BY);
					setState(6190);
					match(REF);
					}
				}

				setState(6193);
				match(COLUMNS);
				setState(6194);
				xml_table_column();
				setState(6199);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6195);
					match(COMMA);
					setState(6196);
					xml_table_column();
					}
					}
					setState(6201);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6202);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_table_columnContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PLpgSQLParser.FOR, 0); }
		public TerminalNode ORDINALITY() { return getToken(PLpgSQLParser.ORDINALITY, 0); }
		public TerminalNode PATH() { return getToken(PLpgSQLParser.PATH, 0); }
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public TerminalNode DEFAULT() { return getToken(PLpgSQLParser.DEFAULT, 0); }
		public TerminalNode NULL() { return getToken(PLpgSQLParser.NULL, 0); }
		public TerminalNode NOT() { return getToken(PLpgSQLParser.NOT, 0); }
		public Xml_table_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_table_column; }
	}

	public final Xml_table_columnContext xml_table_column() throws RecognitionException {
		Xml_table_columnContext _localctx = new Xml_table_columnContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_xml_table_column);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6206);
			((Xml_table_columnContext)_localctx).name = identifier();
			setState(6224);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BY:
			case CACHE:
			case CALL:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COLUMNS:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONFLICT:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CUBE:
			case CURRENT:
			case CURSOR:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DEPENDS:
			case DETACH:
			case DICTIONARY:
			case DISABLE:
			case DISCARD:
			case DOCUMENT:
			case DOMAIN:
			case DOUBLE:
			case DROP:
			case EACH:
			case ENABLE:
			case ENCODING:
			case ENCRYPTED:
			case ENUM:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GENERATED:
			case GLOBAL:
			case GRANTED:
			case GROUPS:
			case HANDLER:
			case HEADER:
			case HOLD:
			case HOUR:
			case IDENTITY:
			case IF:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT:
			case IMPORT:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCKED:
			case LOGGED:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case METHOD:
			case MINUTE:
			case MINVALUE:
			case MODE:
			case MONTH:
			case MOVE:
			case NAME:
			case NAMES:
			case NEW:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS:
			case OBJECT:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OVER:
			case OVERRIDING:
			case OWNED:
			case OWNER:
			case PARALLEL:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POLICY:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROCEDURES:
			case PROGRAM:
			case PUBLICATION:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINES:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMAS:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SKIP_:
			case SNAPSHOT:
			case SQL:
			case STABLE:
			case STANDALONE:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STORED:
			case STRICT:
			case STRIP:
			case SUBSCRIPTION:
			case SUPPORT:
			case SYSID:
			case SYSTEM:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT:
			case TIES:
			case TRANSACTION:
			case TRANSFORM:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE:
			case VARYING:
			case VERSION:
			case VIEW:
			case VIEWS:
			case VOLATILE:
			case WHITESPACE:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML:
			case YEAR:
			case YES:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL:
			case EXISTS:
			case EXTRACT:
			case FLOAT:
			case GREATEST:
			case GROUPING:
			case INOUT:
			case INT:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case TABLESAMPLE:
			case VERBOSE:
			case ALIGNMENT:
			case BASETYPE:
			case BUFFERS:
			case BYPASSRLS:
			case CANONICAL:
			case CATEGORY:
			case COLLATABLE:
			case COMBINEFUNC:
			case COMMUTATOR:
			case CONNECT:
			case COSTS:
			case CREATEDB:
			case CREATEROLE:
			case DESERIALFUNC:
			case DETERMINISTIC:
			case DISABLE_PAGE_SKIPPING:
			case ELEMENT:
			case EXTENDED:
			case FINALFUNC:
			case FINALFUNC_EXTRA:
			case FINALFUNC_MODIFY:
			case FORCE_NOT_NULL:
			case FORCE_NULL:
			case FORCE_QUOTE:
			case FORMAT:
			case GETTOKEN:
			case HASH:
			case HASHES:
			case HEADLINE:
			case HYPOTHETICAL:
			case INDEX_CLEANUP:
			case INIT:
			case INITCOND:
			case INTERNALLENGTH:
			case JSON:
			case LC_COLLATE:
			case LC_CTYPE:
			case LEFTARG:
			case LEXIZE:
			case LEXTYPES:
			case LIST:
			case LOCALE:
			case LOGIN:
			case MAIN:
			case MERGES:
			case MFINALFUNC:
			case MFINALFUNC_EXTRA:
			case MFINALFUNC_MODIFY:
			case MINITCOND:
			case MINVFUNC:
			case MODULUS:
			case MSFUNC:
			case MSSPACE:
			case MSTYPE:
			case NEGATOR:
			case NOBYPASSRLS:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOREPLICATION:
			case NOSUPERUSER:
			case OUTPUT:
			case PASSEDBYVALUE:
			case PATH:
			case PERMISSIVE:
			case PLAIN:
			case PREFERRED:
			case PROVIDER:
			case READ_ONLY:
			case READ_WRITE:
			case RECEIVE:
			case REMAINDER:
			case REPLICATION:
			case RESTRICTED:
			case RESTRICTIVE:
			case RIGHTARG:
			case SAFE:
			case SEND:
			case SERIALFUNC:
			case SETTINGS:
			case SFUNC:
			case SHAREABLE:
			case SKIP_LOCKED:
			case SORTOP:
			case SSPACE:
			case STYPE:
			case SUBTYPE_DIFF:
			case SUBTYPE_OPCLASS:
			case SUBTYPE:
			case SUMMARY:
			case SUPERUSER:
			case TIMING:
			case TYPMOD_IN:
			case TYPMOD_OUT:
			case UNSAFE:
			case USAGE:
			case VARIABLE:
			case YAML:
			case ALIAS:
			case ASSERT:
			case CONSTANT:
			case DATATYPE:
			case DEBUG:
			case DETAIL:
			case DIAGNOSTICS:
			case ELSEIF:
			case ELSIF:
			case ERRCODE:
			case EXIT:
			case EXCEPTION:
			case FOREACH:
			case GET:
			case HINT:
			case INFO:
			case LOG:
			case LOOP:
			case MESSAGE:
			case NOTICE:
			case OPEN:
			case PERFORM:
			case QUERY:
			case RAISE:
			case RECORD:
			case RETURN:
			case REVERSE:
			case ROWTYPE:
			case SLICE:
			case SQLSTATE:
			case STACKED:
			case WARNING:
			case WHILE:
			case Identifier:
			case QuotedIdentifier:
				{
				setState(6207);
				data_type();
				setState(6210);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PATH) {
					{
					setState(6208);
					match(PATH);
					setState(6209);
					vex(0);
					}
				}

				setState(6214);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(6212);
					match(DEFAULT);
					setState(6213);
					vex(0);
					}
				}

				setState(6220);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT || _la==NULL) {
					{
					setState(6217);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NOT) {
						{
						setState(6216);
						match(NOT);
						}
					}

					setState(6219);
					match(NULL);
					}
				}

				}
				break;
			case FOR:
				{
				setState(6222);
				match(FOR);
				setState(6223);
				match(ORDINALITY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comparison_modContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public TerminalNode ALL() { return getToken(PLpgSQLParser.ALL, 0); }
		public TerminalNode ANY() { return getToken(PLpgSQLParser.ANY, 0); }
		public TerminalNode SOME() { return getToken(PLpgSQLParser.SOME, 0); }
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public Select_stmt_no_parensContext select_stmt_no_parens() {
			return getRuleContext(Select_stmt_no_parensContext.class,0);
		}
		public Comparison_modContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparison_mod; }
	}

	public final Comparison_modContext comparison_mod() throws RecognitionException {
		Comparison_modContext _localctx = new Comparison_modContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_comparison_mod);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6226);
			_la = _input.LA(1);
			if ( !(((((_la - 366)) & ~0x3f) == 0 && ((1L << (_la - 366)) & ((1L << (ALL - 366)) | (1L << (ANY - 366)) | (1L << (SOME - 366)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6227);
			match(LEFT_PAREN);
			setState(6230);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,784,_ctx) ) {
			case 1:
				{
				setState(6228);
				vex(0);
				}
				break;
			case 2:
				{
				setState(6229);
				select_stmt_no_parens();
				}
				break;
			}
			setState(6232);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Filter_clauseContext extends ParserRuleContext {
		public TerminalNode FILTER() { return getToken(PLpgSQLParser.FILTER, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public TerminalNode WHERE() { return getToken(PLpgSQLParser.WHERE, 0); }
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public Filter_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filter_clause; }
	}

	public final Filter_clauseContext filter_clause() throws RecognitionException {
		Filter_clauseContext _localctx = new Filter_clauseContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_filter_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6234);
			match(FILTER);
			setState(6235);
			match(LEFT_PAREN);
			setState(6236);
			match(WHERE);
			setState(6237);
			vex(0);
			setState(6238);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_definitionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Partition_by_columnsContext partition_by_columns() {
			return getRuleContext(Partition_by_columnsContext.class,0);
		}
		public Orderby_clauseContext orderby_clause() {
			return getRuleContext(Orderby_clauseContext.class,0);
		}
		public Frame_clauseContext frame_clause() {
			return getRuleContext(Frame_clauseContext.class,0);
		}
		public Window_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_definition; }
	}

	public final Window_definitionContext window_definition() throws RecognitionException {
		Window_definitionContext _localctx = new Window_definitionContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_window_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6240);
			match(LEFT_PAREN);
			setState(6242);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,785,_ctx) ) {
			case 1:
				{
				setState(6241);
				identifier();
				}
				break;
			}
			setState(6245);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(6244);
				partition_by_columns();
				}
			}

			setState(6248);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(6247);
				orderby_clause();
				}
			}

			setState(6251);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GROUPS || _la==RANGE || _la==ROWS) {
				{
				setState(6250);
				frame_clause();
				}
			}

			setState(6253);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Frame_clauseContext extends ParserRuleContext {
		public TerminalNode RANGE() { return getToken(PLpgSQLParser.RANGE, 0); }
		public TerminalNode ROWS() { return getToken(PLpgSQLParser.ROWS, 0); }
		public TerminalNode GROUPS() { return getToken(PLpgSQLParser.GROUPS, 0); }
		public List<Frame_boundContext> frame_bound() {
			return getRuleContexts(Frame_boundContext.class);
		}
		public Frame_boundContext frame_bound(int i) {
			return getRuleContext(Frame_boundContext.class,i);
		}
		public TerminalNode BETWEEN() { return getToken(PLpgSQLParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(PLpgSQLParser.AND, 0); }
		public TerminalNode EXCLUDE() { return getToken(PLpgSQLParser.EXCLUDE, 0); }
		public TerminalNode CURRENT() { return getToken(PLpgSQLParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(PLpgSQLParser.ROW, 0); }
		public TerminalNode GROUP() { return getToken(PLpgSQLParser.GROUP, 0); }
		public TerminalNode TIES() { return getToken(PLpgSQLParser.TIES, 0); }
		public TerminalNode NO() { return getToken(PLpgSQLParser.NO, 0); }
		public TerminalNode OTHERS() { return getToken(PLpgSQLParser.OTHERS, 0); }
		public Frame_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frame_clause; }
	}

	public final Frame_clauseContext frame_clause() throws RecognitionException {
		Frame_clauseContext _localctx = new Frame_clauseContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_frame_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6255);
			_la = _input.LA(1);
			if ( !(_la==GROUPS || _la==RANGE || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6262);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,789,_ctx) ) {
			case 1:
				{
				setState(6256);
				frame_bound();
				}
				break;
			case 2:
				{
				setState(6257);
				match(BETWEEN);
				setState(6258);
				frame_bound();
				setState(6259);
				match(AND);
				setState(6260);
				frame_bound();
				}
				break;
			}
			setState(6273);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCLUDE) {
				{
				setState(6264);
				match(EXCLUDE);
				setState(6271);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
					{
					setState(6265);
					match(CURRENT);
					setState(6266);
					match(ROW);
					}
					break;
				case GROUP:
					{
					setState(6267);
					match(GROUP);
					}
					break;
				case TIES:
					{
					setState(6268);
					match(TIES);
					}
					break;
				case NO:
					{
					setState(6269);
					match(NO);
					setState(6270);
					match(OTHERS);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Frame_boundContext extends ParserRuleContext {
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public TerminalNode PRECEDING() { return getToken(PLpgSQLParser.PRECEDING, 0); }
		public TerminalNode FOLLOWING() { return getToken(PLpgSQLParser.FOLLOWING, 0); }
		public TerminalNode CURRENT() { return getToken(PLpgSQLParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(PLpgSQLParser.ROW, 0); }
		public Frame_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frame_bound; }
	}

	public final Frame_boundContext frame_bound() throws RecognitionException {
		Frame_boundContext _localctx = new Frame_boundContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_frame_bound);
		int _la;
		try {
			setState(6280);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,792,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6275);
				vex(0);
				setState(6276);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6278);
				match(CURRENT);
				setState(6279);
				match(ROW);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Array_expressionContext extends ParserRuleContext {
		public TerminalNode ARRAY() { return getToken(PLpgSQLParser.ARRAY, 0); }
		public Array_elementsContext array_elements() {
			return getRuleContext(Array_elementsContext.class,0);
		}
		public Table_subqueryContext table_subquery() {
			return getRuleContext(Table_subqueryContext.class,0);
		}
		public Array_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_array_expression; }
	}

	public final Array_expressionContext array_expression() throws RecognitionException {
		Array_expressionContext _localctx = new Array_expressionContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_array_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6282);
			match(ARRAY);
			setState(6285);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_BRACKET:
				{
				setState(6283);
				array_elements();
				}
				break;
			case LEFT_PAREN:
				{
				setState(6284);
				table_subquery();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Array_elementsContext extends ParserRuleContext {
		public TerminalNode LEFT_BRACKET() { return getToken(PLpgSQLParser.LEFT_BRACKET, 0); }
		public TerminalNode RIGHT_BRACKET() { return getToken(PLpgSQLParser.RIGHT_BRACKET, 0); }
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public List<Array_elementsContext> array_elements() {
			return getRuleContexts(Array_elementsContext.class);
		}
		public Array_elementsContext array_elements(int i) {
			return getRuleContext(Array_elementsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Array_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_array_elements; }
	}

	public final Array_elementsContext array_elements() throws RecognitionException {
		Array_elementsContext _localctx = new Array_elementsContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_array_elements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6287);
			match(LEFT_BRACKET);
			setState(6302);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATTACH) | (1L << ATTRIBUTE) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BY) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG) | (1L << CHAIN) | (1L << CHARACTERISTICS) | (1L << CHECKPOINT) | (1L << CLASS) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMENTS) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONFIGURATION) | (1L << CONFLICT) | (1L << CONNECTION) | (1L << CONSTRAINTS) | (1L << CONTENT) | (1L << CONTINUE) | (1L << CONVERSION) | (1L << COPY) | (1L << COST) | (1L << CSV) | (1L << CUBE) | (1L << CURRENT) | (1L << CURSOR) | (1L << CYCLE) | (1L << DATA) | (1L << DATABASE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DEFAULTS) | (1L << DEFERRED) | (1L << DEFINER) | (1L << DELETE) | (1L << DELIMITER) | (1L << DELIMITERS) | (1L << DEPENDS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DETACH - 64)) | (1L << (DICTIONARY - 64)) | (1L << (DISABLE - 64)) | (1L << (DISCARD - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOMAIN - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (EACH - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTED - 64)) | (1L << (ENUM - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVENT - 64)) | (1L << (EXCLUDE - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXCLUSIVE - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTENSION - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FAMILY - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORCE - 64)) | (1L << (FORWARD - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GENERATED - 64)) | (1L << (GLOBAL - 64)) | (1L << (GRANTED - 64)) | (1L << (GROUPS - 64)) | (1L << (HANDLER - 64)) | (1L << (HEADER - 64)) | (1L << (HOLD - 64)) | (1L << (HOUR - 64)) | (1L << (IDENTITY - 64)) | (1L << (IF - 64)) | (1L << (IMMEDIATE - 64)) | (1L << (IMMUTABLE - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPORT - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INCREMENT - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXES - 64)) | (1L << (INHERIT - 64)) | (1L << (INHERITS - 64)) | (1L << (INLINE - 64)) | (1L << (INPUT - 64)) | (1L << (INSENSITIVE - 64)) | (1L << (INSERT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INVOKER - 64)) | (1L << (ISOLATION - 64)) | (1L << (KEY - 64)) | (1L << (LABEL - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LARGE - 64)) | (1L << (LAST - 64)) | (1L << (LEAKPROOF - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LEVEL - 128)) | (1L << (LISTEN - 128)) | (1L << (LOAD - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCATION - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKED - 128)) | (1L << (LOGGED - 128)) | (1L << (MAPPING - 128)) | (1L << (MATCH - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MAXVALUE - 128)) | (1L << (METHOD - 128)) | (1L << (MINUTE - 128)) | (1L << (MINVALUE - 128)) | (1L << (MODE - 128)) | (1L << (MONTH - 128)) | (1L << (MOVE - 128)) | (1L << (NAME - 128)) | (1L << (NAMES - 128)) | (1L << (NEW - 128)) | (1L << (NEXT - 128)) | (1L << (NO - 128)) | (1L << (NOTHING - 128)) | (1L << (NOTIFY - 128)) | (1L << (NOWAIT - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFF - 128)) | (1L << (OIDS - 128)) | (1L << (OLD - 128)) | (1L << (OPERATOR - 128)) | (1L << (OPTION - 128)) | (1L << (OPTIONS - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OTHERS - 128)) | (1L << (OVER - 128)) | (1L << (OVERRIDING - 128)) | (1L << (OWNED - 128)) | (1L << (OWNER - 128)) | (1L << (PARALLEL - 128)) | (1L << (PARSER - 128)) | (1L << (PARTIAL - 128)) | (1L << (PARTITION - 128)) | (1L << (PASSING - 128)) | (1L << (PASSWORD - 128)) | (1L << (PLANS - 128)) | (1L << (POLICY - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PREPARED - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRIOR - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROCEDURAL - 128)) | (1L << (PROCEDURE - 128)) | (1L << (PROCEDURES - 128)) | (1L << (PROGRAM - 128)) | (1L << (PUBLICATION - 128)) | (1L << (QUOTE - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (REASSIGN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (RECHECK - 192)) | (1L << (RECURSIVE - 192)) | (1L << (REF - 192)) | (1L << (REFERENCING - 192)) | (1L << (REFRESH - 192)) | (1L << (REINDEX - 192)) | (1L << (RELATIVE - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (REPLICA - 192)) | (1L << (RESET - 192)) | (1L << (RESTART - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUTINE - 192)) | (1L << (ROUTINES - 192)) | (1L << (ROWS - 192)) | (1L << (RULE - 192)) | (1L << (SAVEPOINT - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SCROLL - 192)) | (1L << (SEARCH - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEQUENCE - 192)) | (1L << (SEQUENCES - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SERVER - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHARE - 192)) | (1L << (SHOW - 192)) | (1L << (SIMPLE - 192)) | (1L << (SKIP_ - 192)) | (1L << (SNAPSHOT - 192)) | (1L << (SQL - 192)) | (1L << (STABLE - 192)) | (1L << (STANDALONE - 192)) | (1L << (START - 192)) | (1L << (STATEMENT - 192)) | (1L << (STATISTICS - 192)) | (1L << (STDIN - 192)) | (1L << (STDOUT - 192)) | (1L << (STORAGE - 192)) | (1L << (STORED - 192)) | (1L << (STRICT - 192)) | (1L << (STRIP - 192)) | (1L << (SUBSCRIPTION - 192)) | (1L << (SUPPORT - 192)) | (1L << (SYSID - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESPACE - 192)) | (1L << (TEMP - 192)) | (1L << (TEMPLATE - 192)) | (1L << (TEMPORARY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TEXT - 256)) | (1L << (TIES - 256)) | (1L << (TRANSACTION - 256)) | (1L << (TRANSFORM - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TRUSTED - 256)) | (1L << (TYPE - 256)) | (1L << (TYPES - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNENCRYPTED - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNLISTEN - 256)) | (1L << (UNLOGGED - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (VACUUM - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALIDATOR - 256)) | (1L << (VALUE - 256)) | (1L << (VARYING - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (VIEWS - 256)) | (1L << (VOLATILE - 256)) | (1L << (WHITESPACE - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (XML - 256)) | (1L << (YEAR - 256)) | (1L << (YES - 256)) | (1L << (ZONE - 256)) | (1L << (BETWEEN - 256)) | (1L << (BIGINT - 256)) | (1L << (BIT - 256)) | (1L << (BOOLEAN - 256)) | (1L << (CHAR - 256)) | (1L << (CHARACTER - 256)) | (1L << (COALESCE - 256)) | (1L << (DEC - 256)) | (1L << (DECIMAL - 256)) | (1L << (EXISTS - 256)) | (1L << (EXTRACT - 256)) | (1L << (FLOAT - 256)) | (1L << (GREATEST - 256)) | (1L << (GROUPING - 256)) | (1L << (INOUT - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERVAL - 256)) | (1L << (LEAST - 256)) | (1L << (NATIONAL - 256)) | (1L << (NCHAR - 256)) | (1L << (NONE - 256)) | (1L << (NULLIF - 256)) | (1L << (NUMERIC - 256)) | (1L << (OUT - 256)) | (1L << (OVERLAY - 256)) | (1L << (POSITION - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRECISION - 320)) | (1L << (REAL - 320)) | (1L << (ROW - 320)) | (1L << (SETOF - 320)) | (1L << (SMALLINT - 320)) | (1L << (SUBSTRING - 320)) | (1L << (TIME - 320)) | (1L << (TIMESTAMP - 320)) | (1L << (TREAT - 320)) | (1L << (TRIM - 320)) | (1L << (VALUES - 320)) | (1L << (VARCHAR - 320)) | (1L << (XMLATTRIBUTES - 320)) | (1L << (XMLCONCAT - 320)) | (1L << (XMLELEMENT - 320)) | (1L << (XMLEXISTS - 320)) | (1L << (XMLFOREST - 320)) | (1L << (XMLNAMESPACES - 320)) | (1L << (XMLPARSE - 320)) | (1L << (XMLPI - 320)) | (1L << (XMLROOT - 320)) | (1L << (XMLSERIALIZE - 320)) | (1L << (XMLTABLE - 320)) | (1L << (AUTHORIZATION - 320)) | (1L << (BINARY - 320)) | (1L << (COLLATION - 320)) | (1L << (CONCURRENTLY - 320)) | (1L << (CROSS - 320)) | (1L << (CURRENT_SCHEMA - 320)) | (1L << (FREEZE - 320)) | (1L << (FULL - 320)) | (1L << (ILIKE - 320)) | (1L << (INNER - 320)) | (1L << (IS - 320)) | (1L << (ISNULL - 320)) | (1L << (JOIN - 320)) | (1L << (LEFT - 320)) | (1L << (LIKE - 320)) | (1L << (NATURAL - 320)) | (1L << (NOTNULL - 320)) | (1L << (OUTER - 320)) | (1L << (OVERLAPS - 320)) | (1L << (RIGHT - 320)) | (1L << (SIMILAR - 320)) | (1L << (TABLESAMPLE - 320)) | (1L << (VERBOSE - 320)) | (1L << (ALL - 320)) | (1L << (ANY - 320)) | (1L << (ARRAY - 320)) | (1L << (CASE - 320)) | (1L << (CAST - 320)) | (1L << (CURRENT_CATALOG - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (CURRENT_DATE - 384)) | (1L << (CURRENT_TIME - 384)) | (1L << (CURRENT_TIMESTAMP - 384)) | (1L << (CURRENT_USER - 384)) | (1L << (FALSE - 384)) | (1L << (LOCALTIME - 384)) | (1L << (LOCALTIMESTAMP - 384)) | (1L << (NOT - 384)) | (1L << (NULL - 384)) | (1L << (ON - 384)) | (1L << (SESSION_USER - 384)) | (1L << (SOME - 384)) | (1L << (TRUE - 384)) | (1L << (USER - 384)) | (1L << (ALIGNMENT - 384)) | (1L << (BASETYPE - 384)) | (1L << (BUFFERS - 384)) | (1L << (BYPASSRLS - 384)) | (1L << (CANONICAL - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (CATEGORY - 448)) | (1L << (COLLATABLE - 448)) | (1L << (COMBINEFUNC - 448)) | (1L << (COMMUTATOR - 448)) | (1L << (CONNECT - 448)) | (1L << (COSTS - 448)) | (1L << (CREATEDB - 448)) | (1L << (CREATEROLE - 448)) | (1L << (DESERIALFUNC - 448)) | (1L << (DETERMINISTIC - 448)) | (1L << (DISABLE_PAGE_SKIPPING - 448)) | (1L << (ELEMENT - 448)) | (1L << (EXTENDED - 448)) | (1L << (FINALFUNC - 448)) | (1L << (FINALFUNC_EXTRA - 448)) | (1L << (FINALFUNC_MODIFY - 448)) | (1L << (FORCE_NOT_NULL - 448)) | (1L << (FORCE_NULL - 448)) | (1L << (FORCE_QUOTE - 448)) | (1L << (FORMAT - 448)) | (1L << (GETTOKEN - 448)) | (1L << (HASH - 448)) | (1L << (HASHES - 448)) | (1L << (HEADLINE - 448)) | (1L << (HYPOTHETICAL - 448)) | (1L << (INDEX_CLEANUP - 448)) | (1L << (INIT - 448)) | (1L << (INITCOND - 448)) | (1L << (INTERNALLENGTH - 448)) | (1L << (JSON - 448)) | (1L << (LC_COLLATE - 448)) | (1L << (LC_CTYPE - 448)) | (1L << (LEFTARG - 448)) | (1L << (LEXIZE - 448)) | (1L << (LEXTYPES - 448)) | (1L << (LIST - 448)) | (1L << (LOCALE - 448)) | (1L << (LOGIN - 448)) | (1L << (MAIN - 448)) | (1L << (MERGES - 448)) | (1L << (MFINALFUNC - 448)) | (1L << (MFINALFUNC_EXTRA - 448)) | (1L << (MFINALFUNC_MODIFY - 448)) | (1L << (MINITCOND - 448)) | (1L << (MINVFUNC - 448)) | (1L << (MODULUS - 448)) | (1L << (MSFUNC - 448)) | (1L << (MSSPACE - 448)) | (1L << (MSTYPE - 448)) | (1L << (NEGATOR - 448)) | (1L << (NOBYPASSRLS - 448)) | (1L << (NOCREATEDB - 448)) | (1L << (NOCREATEROLE - 448)) | (1L << (NOINHERIT - 448)) | (1L << (NOLOGIN - 448)) | (1L << (NOREPLICATION - 448)) | (1L << (NOSUPERUSER - 448)) | (1L << (OUTPUT - 448)) | (1L << (PASSEDBYVALUE - 448)) | (1L << (PATH - 448)) | (1L << (PERMISSIVE - 448)) | (1L << (PLAIN - 448)) | (1L << (PREFERRED - 448)) | (1L << (PROVIDER - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (READ_ONLY - 512)) | (1L << (READ_WRITE - 512)) | (1L << (RECEIVE - 512)) | (1L << (REMAINDER - 512)) | (1L << (REPLICATION - 512)) | (1L << (RESTRICTED - 512)) | (1L << (RESTRICTIVE - 512)) | (1L << (RIGHTARG - 512)) | (1L << (SAFE - 512)) | (1L << (SEND - 512)) | (1L << (SERIALFUNC - 512)) | (1L << (SETTINGS - 512)) | (1L << (SFUNC - 512)) | (1L << (SHAREABLE - 512)) | (1L << (SKIP_LOCKED - 512)) | (1L << (SORTOP - 512)) | (1L << (SSPACE - 512)) | (1L << (STYPE - 512)) | (1L << (SUBTYPE_DIFF - 512)) | (1L << (SUBTYPE_OPCLASS - 512)) | (1L << (SUBTYPE - 512)) | (1L << (SUMMARY - 512)) | (1L << (SUPERUSER - 512)) | (1L << (TIMING - 512)) | (1L << (TYPMOD_IN - 512)) | (1L << (TYPMOD_OUT - 512)) | (1L << (UNSAFE - 512)) | (1L << (USAGE - 512)) | (1L << (VARIABLE - 512)) | (1L << (YAML - 512)) | (1L << (ALIAS - 512)) | (1L << (ASSERT - 512)) | (1L << (CONSTANT - 512)) | (1L << (DATATYPE - 512)) | (1L << (DEBUG - 512)) | (1L << (DETAIL - 512)) | (1L << (DIAGNOSTICS - 512)) | (1L << (ELSEIF - 512)) | (1L << (ELSIF - 512)) | (1L << (ERRCODE - 512)) | (1L << (EXIT - 512)) | (1L << (EXCEPTION - 512)) | (1L << (FOREACH - 512)) | (1L << (GET - 512)) | (1L << (HINT - 512)) | (1L << (INFO - 512)) | (1L << (LOG - 512)) | (1L << (LOOP - 512)) | (1L << (MESSAGE - 512)) | (1L << (NOTICE - 512)) | (1L << (OPEN - 512)) | (1L << (PERFORM - 512)) | (1L << (QUERY - 512)) | (1L << (RAISE - 512)) | (1L << (RECORD - 512)) | (1L << (RETURN - 512)) | (1L << (REVERSE - 512)) | (1L << (ROWTYPE - 512)) | (1L << (SLICE - 512)) | (1L << (SQLSTATE - 512)) | (1L << (STACKED - 512)) | (1L << (WARNING - 512)) | (1L << (WHILE - 512)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (LEFT_PAREN - 585)) | (1L << (PLUS - 585)) | (1L << (MINUS - 585)) | (1L << (MULTIPLY - 585)) | (1L << (LEFT_BRACKET - 585)) | (1L << (LESS_LESS - 585)) | (1L << (GREATER_GREATER - 585)) | (1L << (HASH_SIGN - 585)) | (1L << (OP_CHARS - 585)) | (1L << (NUMBER_LITERAL - 585)) | (1L << (REAL_NUMBER - 585)) | (1L << (DOLLAR_NUMBER - 585)) | (1L << (Identifier - 585)) | (1L << (QuotedIdentifier - 585)) | (1L << (Character_String_Literal - 585)) | (1L << (BeginDollarStringConstant - 585)))) != 0)) {
				{
				setState(6290);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BY:
				case CACHE:
				case CALL:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COLUMNS:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONFLICT:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CUBE:
				case CURRENT:
				case CURSOR:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DEPENDS:
				case DETACH:
				case DICTIONARY:
				case DISABLE:
				case DISCARD:
				case DOCUMENT:
				case DOMAIN:
				case DOUBLE:
				case DROP:
				case EACH:
				case ENABLE:
				case ENCODING:
				case ENCRYPTED:
				case ENUM:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GENERATED:
				case GLOBAL:
				case GRANTED:
				case GROUPS:
				case HANDLER:
				case HEADER:
				case HOLD:
				case HOUR:
				case IDENTITY:
				case IF:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT:
				case IMPORT:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCKED:
				case LOGGED:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case METHOD:
				case MINUTE:
				case MINVALUE:
				case MODE:
				case MONTH:
				case MOVE:
				case NAME:
				case NAMES:
				case NEW:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS:
				case OBJECT:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDINALITY:
				case OTHERS:
				case OVER:
				case OVERRIDING:
				case OWNED:
				case OWNER:
				case PARALLEL:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case POLICY:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROCEDURES:
				case PROGRAM:
				case PUBLICATION:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINES:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMAS:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SKIP_:
				case SNAPSHOT:
				case SQL:
				case STABLE:
				case STANDALONE:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STORED:
				case STRICT:
				case STRIP:
				case SUBSCRIPTION:
				case SUPPORT:
				case SYSID:
				case SYSTEM:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT:
				case TIES:
				case TRANSACTION:
				case TRANSFORM:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case TYPES:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VALUE:
				case VARYING:
				case VERSION:
				case VIEW:
				case VIEWS:
				case VOLATILE:
				case WHITESPACE:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML:
				case YEAR:
				case YES:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN:
				case CHAR:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL:
				case EXISTS:
				case EXTRACT:
				case FLOAT:
				case GREATEST:
				case GROUPING:
				case INOUT:
				case INT:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OUT:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case AUTHORIZATION:
				case BINARY:
				case COLLATION:
				case CONCURRENTLY:
				case CROSS:
				case CURRENT_SCHEMA:
				case FREEZE:
				case FULL:
				case ILIKE:
				case INNER:
				case IS:
				case ISNULL:
				case JOIN:
				case LEFT:
				case LIKE:
				case NATURAL:
				case NOTNULL:
				case OUTER:
				case OVERLAPS:
				case RIGHT:
				case SIMILAR:
				case TABLESAMPLE:
				case VERBOSE:
				case ALL:
				case ANY:
				case ARRAY:
				case CASE:
				case CAST:
				case CURRENT_CATALOG:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case FALSE:
				case LOCALTIME:
				case LOCALTIMESTAMP:
				case NOT:
				case NULL:
				case ON:
				case SESSION_USER:
				case SOME:
				case TRUE:
				case USER:
				case ALIGNMENT:
				case BASETYPE:
				case BUFFERS:
				case BYPASSRLS:
				case CANONICAL:
				case CATEGORY:
				case COLLATABLE:
				case COMBINEFUNC:
				case COMMUTATOR:
				case CONNECT:
				case COSTS:
				case CREATEDB:
				case CREATEROLE:
				case DESERIALFUNC:
				case DETERMINISTIC:
				case DISABLE_PAGE_SKIPPING:
				case ELEMENT:
				case EXTENDED:
				case FINALFUNC:
				case FINALFUNC_EXTRA:
				case FINALFUNC_MODIFY:
				case FORCE_NOT_NULL:
				case FORCE_NULL:
				case FORCE_QUOTE:
				case FORMAT:
				case GETTOKEN:
				case HASH:
				case HASHES:
				case HEADLINE:
				case HYPOTHETICAL:
				case INDEX_CLEANUP:
				case INIT:
				case INITCOND:
				case INTERNALLENGTH:
				case JSON:
				case LC_COLLATE:
				case LC_CTYPE:
				case LEFTARG:
				case LEXIZE:
				case LEXTYPES:
				case LIST:
				case LOCALE:
				case LOGIN:
				case MAIN:
				case MERGES:
				case MFINALFUNC:
				case MFINALFUNC_EXTRA:
				case MFINALFUNC_MODIFY:
				case MINITCOND:
				case MINVFUNC:
				case MODULUS:
				case MSFUNC:
				case MSSPACE:
				case MSTYPE:
				case NEGATOR:
				case NOBYPASSRLS:
				case NOCREATEDB:
				case NOCREATEROLE:
				case NOINHERIT:
				case NOLOGIN:
				case NOREPLICATION:
				case NOSUPERUSER:
				case OUTPUT:
				case PASSEDBYVALUE:
				case PATH:
				case PERMISSIVE:
				case PLAIN:
				case PREFERRED:
				case PROVIDER:
				case READ_ONLY:
				case READ_WRITE:
				case RECEIVE:
				case REMAINDER:
				case REPLICATION:
				case RESTRICTED:
				case RESTRICTIVE:
				case RIGHTARG:
				case SAFE:
				case SEND:
				case SERIALFUNC:
				case SETTINGS:
				case SFUNC:
				case SHAREABLE:
				case SKIP_LOCKED:
				case SORTOP:
				case SSPACE:
				case STYPE:
				case SUBTYPE_DIFF:
				case SUBTYPE_OPCLASS:
				case SUBTYPE:
				case SUMMARY:
				case SUPERUSER:
				case TIMING:
				case TYPMOD_IN:
				case TYPMOD_OUT:
				case UNSAFE:
				case USAGE:
				case VARIABLE:
				case YAML:
				case ALIAS:
				case ASSERT:
				case CONSTANT:
				case DATATYPE:
				case DEBUG:
				case DETAIL:
				case DIAGNOSTICS:
				case ELSEIF:
				case ELSIF:
				case ERRCODE:
				case EXIT:
				case EXCEPTION:
				case FOREACH:
				case GET:
				case HINT:
				case INFO:
				case LOG:
				case LOOP:
				case MESSAGE:
				case NOTICE:
				case OPEN:
				case PERFORM:
				case QUERY:
				case RAISE:
				case RECORD:
				case RETURN:
				case REVERSE:
				case ROWTYPE:
				case SLICE:
				case SQLSTATE:
				case STACKED:
				case WARNING:
				case WHILE:
				case LEFT_PAREN:
				case PLUS:
				case MINUS:
				case MULTIPLY:
				case LESS_LESS:
				case GREATER_GREATER:
				case HASH_SIGN:
				case OP_CHARS:
				case NUMBER_LITERAL:
				case REAL_NUMBER:
				case DOLLAR_NUMBER:
				case Identifier:
				case QuotedIdentifier:
				case Character_String_Literal:
				case BeginDollarStringConstant:
					{
					setState(6288);
					vex(0);
					}
					break;
				case LEFT_BRACKET:
					{
					setState(6289);
					array_elements();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6299);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6292);
					match(COMMA);
					setState(6295);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ABORT:
					case ABSOLUTE:
					case ACCESS:
					case ACTION:
					case ADD:
					case ADMIN:
					case AFTER:
					case AGGREGATE:
					case ALSO:
					case ALTER:
					case ALWAYS:
					case ASSERTION:
					case ASSIGNMENT:
					case AT:
					case ATTACH:
					case ATTRIBUTE:
					case BACKWARD:
					case BEFORE:
					case BEGIN:
					case BY:
					case CACHE:
					case CALL:
					case CALLED:
					case CASCADE:
					case CASCADED:
					case CATALOG:
					case CHAIN:
					case CHARACTERISTICS:
					case CHECKPOINT:
					case CLASS:
					case CLOSE:
					case CLUSTER:
					case COLUMNS:
					case COMMENT:
					case COMMENTS:
					case COMMIT:
					case COMMITTED:
					case CONFIGURATION:
					case CONFLICT:
					case CONNECTION:
					case CONSTRAINTS:
					case CONTENT:
					case CONTINUE:
					case CONVERSION:
					case COPY:
					case COST:
					case CSV:
					case CUBE:
					case CURRENT:
					case CURSOR:
					case CYCLE:
					case DATA:
					case DATABASE:
					case DAY:
					case DEALLOCATE:
					case DECLARE:
					case DEFAULTS:
					case DEFERRED:
					case DEFINER:
					case DELETE:
					case DELIMITER:
					case DELIMITERS:
					case DEPENDS:
					case DETACH:
					case DICTIONARY:
					case DISABLE:
					case DISCARD:
					case DOCUMENT:
					case DOMAIN:
					case DOUBLE:
					case DROP:
					case EACH:
					case ENABLE:
					case ENCODING:
					case ENCRYPTED:
					case ENUM:
					case ESCAPE:
					case EVENT:
					case EXCLUDE:
					case EXCLUDING:
					case EXCLUSIVE:
					case EXECUTE:
					case EXPLAIN:
					case EXTENSION:
					case EXTERNAL:
					case FAMILY:
					case FILTER:
					case FIRST:
					case FOLLOWING:
					case FORCE:
					case FORWARD:
					case FUNCTION:
					case FUNCTIONS:
					case GENERATED:
					case GLOBAL:
					case GRANTED:
					case GROUPS:
					case HANDLER:
					case HEADER:
					case HOLD:
					case HOUR:
					case IDENTITY:
					case IF:
					case IMMEDIATE:
					case IMMUTABLE:
					case IMPLICIT:
					case IMPORT:
					case INCLUDE:
					case INCLUDING:
					case INCREMENT:
					case INDEX:
					case INDEXES:
					case INHERIT:
					case INHERITS:
					case INLINE:
					case INPUT:
					case INSENSITIVE:
					case INSERT:
					case INSTEAD:
					case INVOKER:
					case ISOLATION:
					case KEY:
					case LABEL:
					case LANGUAGE:
					case LARGE:
					case LAST:
					case LEAKPROOF:
					case LEVEL:
					case LISTEN:
					case LOAD:
					case LOCAL:
					case LOCATION:
					case LOCK:
					case LOCKED:
					case LOGGED:
					case MAPPING:
					case MATCH:
					case MATERIALIZED:
					case MAXVALUE:
					case METHOD:
					case MINUTE:
					case MINVALUE:
					case MODE:
					case MONTH:
					case MOVE:
					case NAME:
					case NAMES:
					case NEW:
					case NEXT:
					case NO:
					case NOTHING:
					case NOTIFY:
					case NOWAIT:
					case NULLS:
					case OBJECT:
					case OF:
					case OFF:
					case OIDS:
					case OLD:
					case OPERATOR:
					case OPTION:
					case OPTIONS:
					case ORDINALITY:
					case OTHERS:
					case OVER:
					case OVERRIDING:
					case OWNED:
					case OWNER:
					case PARALLEL:
					case PARSER:
					case PARTIAL:
					case PARTITION:
					case PASSING:
					case PASSWORD:
					case PLANS:
					case POLICY:
					case PRECEDING:
					case PREPARE:
					case PREPARED:
					case PRESERVE:
					case PRIOR:
					case PRIVILEGES:
					case PROCEDURAL:
					case PROCEDURE:
					case PROCEDURES:
					case PROGRAM:
					case PUBLICATION:
					case QUOTE:
					case RANGE:
					case READ:
					case REASSIGN:
					case RECHECK:
					case RECURSIVE:
					case REF:
					case REFERENCING:
					case REFRESH:
					case REINDEX:
					case RELATIVE:
					case RELEASE:
					case RENAME:
					case REPEATABLE:
					case REPLACE:
					case REPLICA:
					case RESET:
					case RESTART:
					case RESTRICT:
					case RETURNS:
					case REVOKE:
					case ROLE:
					case ROLLBACK:
					case ROLLUP:
					case ROUTINE:
					case ROUTINES:
					case ROWS:
					case RULE:
					case SAVEPOINT:
					case SCHEMA:
					case SCHEMAS:
					case SCROLL:
					case SEARCH:
					case SECOND:
					case SECURITY:
					case SEQUENCE:
					case SEQUENCES:
					case SERIALIZABLE:
					case SERVER:
					case SESSION:
					case SET:
					case SETS:
					case SHARE:
					case SHOW:
					case SIMPLE:
					case SKIP_:
					case SNAPSHOT:
					case SQL:
					case STABLE:
					case STANDALONE:
					case START:
					case STATEMENT:
					case STATISTICS:
					case STDIN:
					case STDOUT:
					case STORAGE:
					case STORED:
					case STRICT:
					case STRIP:
					case SUBSCRIPTION:
					case SUPPORT:
					case SYSID:
					case SYSTEM:
					case TABLES:
					case TABLESPACE:
					case TEMP:
					case TEMPLATE:
					case TEMPORARY:
					case TEXT:
					case TIES:
					case TRANSACTION:
					case TRANSFORM:
					case TRIGGER:
					case TRUNCATE:
					case TRUSTED:
					case TYPE:
					case TYPES:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNENCRYPTED:
					case UNKNOWN:
					case UNLISTEN:
					case UNLOGGED:
					case UNTIL:
					case UPDATE:
					case VACUUM:
					case VALID:
					case VALIDATE:
					case VALIDATOR:
					case VALUE:
					case VARYING:
					case VERSION:
					case VIEW:
					case VIEWS:
					case VOLATILE:
					case WHITESPACE:
					case WITHIN:
					case WITHOUT:
					case WORK:
					case WRAPPER:
					case WRITE:
					case XML:
					case YEAR:
					case YES:
					case ZONE:
					case BETWEEN:
					case BIGINT:
					case BIT:
					case BOOLEAN:
					case CHAR:
					case CHARACTER:
					case COALESCE:
					case DEC:
					case DECIMAL:
					case EXISTS:
					case EXTRACT:
					case FLOAT:
					case GREATEST:
					case GROUPING:
					case INOUT:
					case INT:
					case INTEGER:
					case INTERVAL:
					case LEAST:
					case NATIONAL:
					case NCHAR:
					case NONE:
					case NULLIF:
					case NUMERIC:
					case OUT:
					case OVERLAY:
					case POSITION:
					case PRECISION:
					case REAL:
					case ROW:
					case SETOF:
					case SMALLINT:
					case SUBSTRING:
					case TIME:
					case TIMESTAMP:
					case TREAT:
					case TRIM:
					case VALUES:
					case VARCHAR:
					case XMLATTRIBUTES:
					case XMLCONCAT:
					case XMLELEMENT:
					case XMLEXISTS:
					case XMLFOREST:
					case XMLNAMESPACES:
					case XMLPARSE:
					case XMLPI:
					case XMLROOT:
					case XMLSERIALIZE:
					case XMLTABLE:
					case AUTHORIZATION:
					case BINARY:
					case COLLATION:
					case CONCURRENTLY:
					case CROSS:
					case CURRENT_SCHEMA:
					case FREEZE:
					case FULL:
					case ILIKE:
					case INNER:
					case IS:
					case ISNULL:
					case JOIN:
					case LEFT:
					case LIKE:
					case NATURAL:
					case NOTNULL:
					case OUTER:
					case OVERLAPS:
					case RIGHT:
					case SIMILAR:
					case TABLESAMPLE:
					case VERBOSE:
					case ALL:
					case ANY:
					case ARRAY:
					case CASE:
					case CAST:
					case CURRENT_CATALOG:
					case CURRENT_DATE:
					case CURRENT_TIME:
					case CURRENT_TIMESTAMP:
					case CURRENT_USER:
					case FALSE:
					case LOCALTIME:
					case LOCALTIMESTAMP:
					case NOT:
					case NULL:
					case ON:
					case SESSION_USER:
					case SOME:
					case TRUE:
					case USER:
					case ALIGNMENT:
					case BASETYPE:
					case BUFFERS:
					case BYPASSRLS:
					case CANONICAL:
					case CATEGORY:
					case COLLATABLE:
					case COMBINEFUNC:
					case COMMUTATOR:
					case CONNECT:
					case COSTS:
					case CREATEDB:
					case CREATEROLE:
					case DESERIALFUNC:
					case DETERMINISTIC:
					case DISABLE_PAGE_SKIPPING:
					case ELEMENT:
					case EXTENDED:
					case FINALFUNC:
					case FINALFUNC_EXTRA:
					case FINALFUNC_MODIFY:
					case FORCE_NOT_NULL:
					case FORCE_NULL:
					case FORCE_QUOTE:
					case FORMAT:
					case GETTOKEN:
					case HASH:
					case HASHES:
					case HEADLINE:
					case HYPOTHETICAL:
					case INDEX_CLEANUP:
					case INIT:
					case INITCOND:
					case INTERNALLENGTH:
					case JSON:
					case LC_COLLATE:
					case LC_CTYPE:
					case LEFTARG:
					case LEXIZE:
					case LEXTYPES:
					case LIST:
					case LOCALE:
					case LOGIN:
					case MAIN:
					case MERGES:
					case MFINALFUNC:
					case MFINALFUNC_EXTRA:
					case MFINALFUNC_MODIFY:
					case MINITCOND:
					case MINVFUNC:
					case MODULUS:
					case MSFUNC:
					case MSSPACE:
					case MSTYPE:
					case NEGATOR:
					case NOBYPASSRLS:
					case NOCREATEDB:
					case NOCREATEROLE:
					case NOINHERIT:
					case NOLOGIN:
					case NOREPLICATION:
					case NOSUPERUSER:
					case OUTPUT:
					case PASSEDBYVALUE:
					case PATH:
					case PERMISSIVE:
					case PLAIN:
					case PREFERRED:
					case PROVIDER:
					case READ_ONLY:
					case READ_WRITE:
					case RECEIVE:
					case REMAINDER:
					case REPLICATION:
					case RESTRICTED:
					case RESTRICTIVE:
					case RIGHTARG:
					case SAFE:
					case SEND:
					case SERIALFUNC:
					case SETTINGS:
					case SFUNC:
					case SHAREABLE:
					case SKIP_LOCKED:
					case SORTOP:
					case SSPACE:
					case STYPE:
					case SUBTYPE_DIFF:
					case SUBTYPE_OPCLASS:
					case SUBTYPE:
					case SUMMARY:
					case SUPERUSER:
					case TIMING:
					case TYPMOD_IN:
					case TYPMOD_OUT:
					case UNSAFE:
					case USAGE:
					case VARIABLE:
					case YAML:
					case ALIAS:
					case ASSERT:
					case CONSTANT:
					case DATATYPE:
					case DEBUG:
					case DETAIL:
					case DIAGNOSTICS:
					case ELSEIF:
					case ELSIF:
					case ERRCODE:
					case EXIT:
					case EXCEPTION:
					case FOREACH:
					case GET:
					case HINT:
					case INFO:
					case LOG:
					case LOOP:
					case MESSAGE:
					case NOTICE:
					case OPEN:
					case PERFORM:
					case QUERY:
					case RAISE:
					case RECORD:
					case RETURN:
					case REVERSE:
					case ROWTYPE:
					case SLICE:
					case SQLSTATE:
					case STACKED:
					case WARNING:
					case WHILE:
					case LEFT_PAREN:
					case PLUS:
					case MINUS:
					case MULTIPLY:
					case LESS_LESS:
					case GREATER_GREATER:
					case HASH_SIGN:
					case OP_CHARS:
					case NUMBER_LITERAL:
					case REAL_NUMBER:
					case DOLLAR_NUMBER:
					case Identifier:
					case QuotedIdentifier:
					case Character_String_Literal:
					case BeginDollarStringConstant:
						{
						setState(6293);
						vex(0);
						}
						break;
					case LEFT_BRACKET:
						{
						setState(6294);
						array_elements();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					setState(6301);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6304);
			match(RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_coercionContext extends ParserRuleContext {
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public Character_stringContext character_string() {
			return getRuleContext(Character_stringContext.class,0);
		}
		public TerminalNode INTERVAL() { return getToken(PLpgSQLParser.INTERVAL, 0); }
		public Interval_fieldContext interval_field() {
			return getRuleContext(Interval_fieldContext.class,0);
		}
		public Type_lengthContext type_length() {
			return getRuleContext(Type_lengthContext.class,0);
		}
		public Type_coercionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_coercion; }
	}

	public final Type_coercionContext type_coercion() throws RecognitionException {
		Type_coercionContext _localctx = new Type_coercionContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_type_coercion);
		try {
			setState(6315);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,799,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6306);
				data_type();
				setState(6307);
				character_string();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6309);
				match(INTERVAL);
				setState(6310);
				character_string();
				setState(6311);
				interval_field();
				setState(6313);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,798,_ctx) ) {
				case 1:
					{
					setState(6312);
					type_length();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_qualified_nameContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(PLpgSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(PLpgSQLParser.DOT, i);
		}
		public Schema_qualified_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_qualified_name; }
	}

	public final Schema_qualified_nameContext schema_qualified_name() throws RecognitionException {
		Schema_qualified_nameContext _localctx = new Schema_qualified_nameContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_schema_qualified_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6317);
			identifier();
			setState(6324);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,801,_ctx) ) {
			case 1:
				{
				setState(6318);
				match(DOT);
				setState(6319);
				identifier();
				setState(6322);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,800,_ctx) ) {
				case 1:
					{
					setState(6320);
					match(DOT);
					setState(6321);
					identifier();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_qualifierContext extends ParserRuleContext {
		public TerminalNode DISTINCT() { return getToken(PLpgSQLParser.DISTINCT, 0); }
		public TerminalNode ALL() { return getToken(PLpgSQLParser.ALL, 0); }
		public Set_qualifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_qualifier; }
	}

	public final Set_qualifierContext set_qualifier() throws RecognitionException {
		Set_qualifierContext _localctx = new Set_qualifierContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_set_qualifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6326);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==DISTINCT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_subqueryContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public Select_stmtContext select_stmt() {
			return getRuleContext(Select_stmtContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public Table_subqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_subquery; }
	}

	public final Table_subqueryContext table_subquery() throws RecognitionException {
		Table_subqueryContext _localctx = new Table_subqueryContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_table_subquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6328);
			match(LEFT_PAREN);
			setState(6329);
			select_stmt();
			setState(6330);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_stmtContext extends ParserRuleContext {
		public Select_opsContext select_ops() {
			return getRuleContext(Select_opsContext.class,0);
		}
		public With_clauseContext with_clause() {
			return getRuleContext(With_clauseContext.class,0);
		}
		public List<After_opsContext> after_ops() {
			return getRuleContexts(After_opsContext.class);
		}
		public After_opsContext after_ops(int i) {
			return getRuleContext(After_opsContext.class,i);
		}
		public Select_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_stmt; }
	}

	public final Select_stmtContext select_stmt() throws RecognitionException {
		Select_stmtContext _localctx = new Select_stmtContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_select_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6333);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6332);
				with_clause();
				}
			}

			setState(6335);
			select_ops(0);
			setState(6339);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (FETCH - 398)) | (1L << (FOR - 398)) | (1L << (LIMIT - 398)) | (1L << (OFFSET - 398)) | (1L << (ORDER - 398)))) != 0)) {
				{
				{
				setState(6336);
				after_ops();
				}
				}
				setState(6341);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class After_opsContext extends ParserRuleContext {
		public Orderby_clauseContext orderby_clause() {
			return getRuleContext(Orderby_clauseContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(PLpgSQLParser.LIMIT, 0); }
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PLpgSQLParser.ALL, 0); }
		public TerminalNode OFFSET() { return getToken(PLpgSQLParser.OFFSET, 0); }
		public TerminalNode ROW() { return getToken(PLpgSQLParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(PLpgSQLParser.ROWS, 0); }
		public TerminalNode FETCH() { return getToken(PLpgSQLParser.FETCH, 0); }
		public TerminalNode FIRST() { return getToken(PLpgSQLParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(PLpgSQLParser.NEXT, 0); }
		public TerminalNode ONLY() { return getToken(PLpgSQLParser.ONLY, 0); }
		public TerminalNode FOR() { return getToken(PLpgSQLParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(PLpgSQLParser.UPDATE, 0); }
		public TerminalNode NO() { return getToken(PLpgSQLParser.NO, 0); }
		public TerminalNode KEY() { return getToken(PLpgSQLParser.KEY, 0); }
		public TerminalNode SHARE() { return getToken(PLpgSQLParser.SHARE, 0); }
		public TerminalNode OF() { return getToken(PLpgSQLParser.OF, 0); }
		public List<Schema_qualified_nameContext> schema_qualified_name() {
			return getRuleContexts(Schema_qualified_nameContext.class);
		}
		public Schema_qualified_nameContext schema_qualified_name(int i) {
			return getRuleContext(Schema_qualified_nameContext.class,i);
		}
		public TerminalNode NOWAIT() { return getToken(PLpgSQLParser.NOWAIT, 0); }
		public TerminalNode SKIP_() { return getToken(PLpgSQLParser.SKIP_, 0); }
		public TerminalNode LOCKED() { return getToken(PLpgSQLParser.LOCKED, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public After_opsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_after_ops; }
	}

	public final After_opsContext after_ops() throws RecognitionException {
		After_opsContext _localctx = new After_opsContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_after_ops);
		int _la;
		try {
			setState(6388);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ORDER:
				enterOuterAlt(_localctx, 1);
				{
				setState(6342);
				orderby_clause();
				}
				break;
			case LIMIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6343);
				match(LIMIT);
				setState(6346);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,804,_ctx) ) {
				case 1:
					{
					setState(6344);
					vex(0);
					}
					break;
				case 2:
					{
					setState(6345);
					match(ALL);
					}
					break;
				}
				}
				break;
			case OFFSET:
				enterOuterAlt(_localctx, 3);
				{
				setState(6348);
				match(OFFSET);
				setState(6349);
				vex(0);
				setState(6351);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROWS || _la==ROW) {
					{
					setState(6350);
					_la = _input.LA(1);
					if ( !(_la==ROWS || _la==ROW) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case FETCH:
				enterOuterAlt(_localctx, 4);
				{
				setState(6353);
				match(FETCH);
				setState(6354);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==NEXT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6356);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,806,_ctx) ) {
				case 1:
					{
					setState(6355);
					vex(0);
					}
					break;
				}
				setState(6358);
				_la = _input.LA(1);
				if ( !(_la==ROWS || _la==ROW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6360);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ONLY) {
					{
					setState(6359);
					match(ONLY);
					}
				}

				}
				break;
			case FOR:
				enterOuterAlt(_localctx, 5);
				{
				setState(6362);
				match(FOR);
				setState(6370);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case UPDATE:
					{
					setState(6363);
					match(UPDATE);
					}
					break;
				case NO:
					{
					setState(6364);
					match(NO);
					setState(6365);
					match(KEY);
					setState(6366);
					match(UPDATE);
					}
					break;
				case SHARE:
					{
					setState(6367);
					match(SHARE);
					}
					break;
				case KEY:
					{
					setState(6368);
					match(KEY);
					setState(6369);
					match(SHARE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6381);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OF) {
					{
					setState(6372);
					match(OF);
					setState(6373);
					schema_qualified_name();
					setState(6378);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(6374);
						match(COMMA);
						setState(6375);
						schema_qualified_name();
						}
						}
						setState(6380);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(6386);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NOWAIT:
					{
					setState(6383);
					match(NOWAIT);
					}
					break;
				case SKIP_:
					{
					setState(6384);
					match(SKIP_);
					setState(6385);
					match(LOCKED);
					}
					break;
				case EOF:
				case FETCH:
				case FOR:
				case LIMIT:
				case OFFSET:
				case ON:
				case ORDER:
				case RETURNING:
				case WITH:
				case LOOP:
				case SEMI_COLON:
				case RIGHT_PAREN:
					break;
				default:
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_stmt_no_parensContext extends ParserRuleContext {
		public Select_ops_no_parensContext select_ops_no_parens() {
			return getRuleContext(Select_ops_no_parensContext.class,0);
		}
		public With_clauseContext with_clause() {
			return getRuleContext(With_clauseContext.class,0);
		}
		public List<After_opsContext> after_ops() {
			return getRuleContexts(After_opsContext.class);
		}
		public After_opsContext after_ops(int i) {
			return getRuleContext(After_opsContext.class,i);
		}
		public Select_stmt_no_parensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_stmt_no_parens; }
	}

	public final Select_stmt_no_parensContext select_stmt_no_parens() throws RecognitionException {
		Select_stmt_no_parensContext _localctx = new Select_stmt_no_parensContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_select_stmt_no_parens);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6391);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6390);
				with_clause();
				}
			}

			setState(6393);
			select_ops_no_parens();
			setState(6397);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (FETCH - 398)) | (1L << (FOR - 398)) | (1L << (LIMIT - 398)) | (1L << (OFFSET - 398)) | (1L << (ORDER - 398)))) != 0)) {
				{
				{
				setState(6394);
				after_ops();
				}
				}
				setState(6399);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_clauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PLpgSQLParser.WITH, 0); }
		public List<With_queryContext> with_query() {
			return getRuleContexts(With_queryContext.class);
		}
		public With_queryContext with_query(int i) {
			return getRuleContext(With_queryContext.class,i);
		}
		public TerminalNode RECURSIVE() { return getToken(PLpgSQLParser.RECURSIVE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public With_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_clause; }
	}

	public final With_clauseContext with_clause() throws RecognitionException {
		With_clauseContext _localctx = new With_clauseContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_with_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6400);
			match(WITH);
			setState(6402);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,815,_ctx) ) {
			case 1:
				{
				setState(6401);
				match(RECURSIVE);
				}
				break;
			}
			setState(6404);
			with_query();
			setState(6409);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6405);
				match(COMMA);
				setState(6406);
				with_query();
				}
				}
				setState(6411);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_queryContext extends ParserRuleContext {
		public IdentifierContext query_name;
		public IdentifierContext identifier;
		public List<IdentifierContext> column_name = new ArrayList<IdentifierContext>();
		public TerminalNode AS() { return getToken(PLpgSQLParser.AS, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PLpgSQLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PLpgSQLParser.LEFT_PAREN, i);
		}
		public Data_statementContext data_statement() {
			return getRuleContext(Data_statementContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PLpgSQLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PLpgSQLParser.RIGHT_PAREN, i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode MATERIALIZED() { return getToken(PLpgSQLParser.MATERIALIZED, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public TerminalNode NOT() { return getToken(PLpgSQLParser.NOT, 0); }
		public With_queryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_query; }
	}

	public final With_queryContext with_query() throws RecognitionException {
		With_queryContext _localctx = new With_queryContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_with_query);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6412);
			((With_queryContext)_localctx).query_name = identifier();
			setState(6424);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(6413);
				match(LEFT_PAREN);
				setState(6414);
				((With_queryContext)_localctx).identifier = identifier();
				((With_queryContext)_localctx).column_name.add(((With_queryContext)_localctx).identifier);
				setState(6419);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6415);
					match(COMMA);
					setState(6416);
					((With_queryContext)_localctx).identifier = identifier();
					((With_queryContext)_localctx).column_name.add(((With_queryContext)_localctx).identifier);
					}
					}
					setState(6421);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6422);
				match(RIGHT_PAREN);
				}
			}

			setState(6426);
			match(AS);
			setState(6431);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MATERIALIZED || _la==NOT) {
				{
				setState(6428);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(6427);
					match(NOT);
					}
				}

				setState(6430);
				match(MATERIALIZED);
				}
			}

			setState(6433);
			match(LEFT_PAREN);
			setState(6434);
			data_statement();
			setState(6435);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_opsContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public Select_stmtContext select_stmt() {
			return getRuleContext(Select_stmtContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public Select_primaryContext select_primary() {
			return getRuleContext(Select_primaryContext.class,0);
		}
		public List<Select_opsContext> select_ops() {
			return getRuleContexts(Select_opsContext.class);
		}
		public Select_opsContext select_ops(int i) {
			return getRuleContext(Select_opsContext.class,i);
		}
		public TerminalNode INTERSECT() { return getToken(PLpgSQLParser.INTERSECT, 0); }
		public TerminalNode UNION() { return getToken(PLpgSQLParser.UNION, 0); }
		public TerminalNode EXCEPT() { return getToken(PLpgSQLParser.EXCEPT, 0); }
		public Set_qualifierContext set_qualifier() {
			return getRuleContext(Set_qualifierContext.class,0);
		}
		public Select_opsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_ops; }
	}

	public final Select_opsContext select_ops() throws RecognitionException {
		return select_ops(0);
	}

	private Select_opsContext select_ops(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Select_opsContext _localctx = new Select_opsContext(_ctx, _parentState);
		Select_opsContext _prevctx = _localctx;
		int _startState = 632;
		enterRecursionRule(_localctx, 632, RULE_select_ops, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6443);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_PAREN:
				{
				setState(6438);
				match(LEFT_PAREN);
				setState(6439);
				select_stmt();
				setState(6440);
				match(RIGHT_PAREN);
				}
				break;
			case VALUES:
			case SELECT:
			case TABLE:
				{
				setState(6442);
				select_primary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(6453);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,823,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Select_opsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_select_ops);
					setState(6445);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(6446);
					_la = _input.LA(1);
					if ( !(((((_la - 396)) & ~0x3f) == 0 && ((1L << (_la - 396)) & ((1L << (EXCEPT - 396)) | (1L << (INTERSECT - 396)) | (1L << (UNION - 396)))) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(6448);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						setState(6447);
						set_qualifier();
						}
					}

					setState(6450);
					select_ops(3);
					}
					} 
				}
				setState(6455);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,823,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Select_ops_no_parensContext extends ParserRuleContext {
		public Select_opsContext select_ops() {
			return getRuleContext(Select_opsContext.class,0);
		}
		public TerminalNode INTERSECT() { return getToken(PLpgSQLParser.INTERSECT, 0); }
		public TerminalNode UNION() { return getToken(PLpgSQLParser.UNION, 0); }
		public TerminalNode EXCEPT() { return getToken(PLpgSQLParser.EXCEPT, 0); }
		public Select_primaryContext select_primary() {
			return getRuleContext(Select_primaryContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public Select_stmtContext select_stmt() {
			return getRuleContext(Select_stmtContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public Set_qualifierContext set_qualifier() {
			return getRuleContext(Set_qualifierContext.class,0);
		}
		public Select_ops_no_parensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_ops_no_parens; }
	}

	public final Select_ops_no_parensContext select_ops_no_parens() throws RecognitionException {
		Select_ops_no_parensContext _localctx = new Select_ops_no_parensContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_select_ops_no_parens);
		int _la;
		try {
			setState(6469);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,826,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6456);
				select_ops(0);
				setState(6457);
				_la = _input.LA(1);
				if ( !(((((_la - 396)) & ~0x3f) == 0 && ((1L << (_la - 396)) & ((1L << (EXCEPT - 396)) | (1L << (INTERSECT - 396)) | (1L << (UNION - 396)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6459);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					setState(6458);
					set_qualifier();
					}
				}

				setState(6466);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case VALUES:
				case SELECT:
				case TABLE:
					{
					setState(6461);
					select_primary();
					}
					break;
				case LEFT_PAREN:
					{
					setState(6462);
					match(LEFT_PAREN);
					setState(6463);
					select_stmt();
					setState(6464);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6468);
				select_primary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_primaryContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(PLpgSQLParser.SELECT, 0); }
		public Set_qualifierContext set_qualifier() {
			return getRuleContext(Set_qualifierContext.class,0);
		}
		public Select_listContext select_list() {
			return getRuleContext(Select_listContext.class,0);
		}
		public Into_tableContext into_table() {
			return getRuleContext(Into_tableContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PLpgSQLParser.FROM, 0); }
		public List<From_itemContext> from_item() {
			return getRuleContexts(From_itemContext.class);
		}
		public From_itemContext from_item(int i) {
			return getRuleContext(From_itemContext.class,i);
		}
		public TerminalNode WHERE() { return getToken(PLpgSQLParser.WHERE, 0); }
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public Groupby_clauseContext groupby_clause() {
			return getRuleContext(Groupby_clauseContext.class,0);
		}
		public TerminalNode HAVING() { return getToken(PLpgSQLParser.HAVING, 0); }
		public TerminalNode WINDOW() { return getToken(PLpgSQLParser.WINDOW, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> AS() { return getTokens(PLpgSQLParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(PLpgSQLParser.AS, i);
		}
		public List<Window_definitionContext> window_definition() {
			return getRuleContexts(Window_definitionContext.class);
		}
		public Window_definitionContext window_definition(int i) {
			return getRuleContext(Window_definitionContext.class,i);
		}
		public TerminalNode ON() { return getToken(PLpgSQLParser.ON, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public TerminalNode TABLE() { return getToken(PLpgSQLParser.TABLE, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(PLpgSQLParser.ONLY, 0); }
		public TerminalNode MULTIPLY() { return getToken(PLpgSQLParser.MULTIPLY, 0); }
		public Values_stmtContext values_stmt() {
			return getRuleContext(Values_stmtContext.class,0);
		}
		public Select_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_primary; }
	}

	public final Select_primaryContext select_primary() throws RecognitionException {
		Select_primaryContext _localctx = new Select_primaryContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_select_primary);
		int _la;
		try {
			int _alt;
			setState(6542);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(6471);
				match(SELECT);
				setState(6487);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,829,_ctx) ) {
				case 1:
					{
					setState(6472);
					set_qualifier();
					setState(6485);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,828,_ctx) ) {
					case 1:
						{
						setState(6473);
						match(ON);
						setState(6474);
						match(LEFT_PAREN);
						setState(6475);
						vex(0);
						setState(6480);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(6476);
							match(COMMA);
							setState(6477);
							vex(0);
							}
							}
							setState(6482);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(6483);
						match(RIGHT_PAREN);
						}
						break;
					}
					}
					break;
				}
				setState(6490);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,830,_ctx) ) {
				case 1:
					{
					setState(6489);
					select_list();
					}
					break;
				}
				setState(6493);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,831,_ctx) ) {
				case 1:
					{
					setState(6492);
					into_table();
					}
					break;
				}
				setState(6504);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,833,_ctx) ) {
				case 1:
					{
					setState(6495);
					match(FROM);
					setState(6496);
					from_item(0);
					setState(6501);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,832,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(6497);
							match(COMMA);
							setState(6498);
							from_item(0);
							}
							} 
						}
						setState(6503);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,832,_ctx);
					}
					}
					break;
				}
				setState(6508);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,834,_ctx) ) {
				case 1:
					{
					setState(6506);
					match(WHERE);
					setState(6507);
					vex(0);
					}
					break;
				}
				setState(6511);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,835,_ctx) ) {
				case 1:
					{
					setState(6510);
					groupby_clause();
					}
					break;
				}
				setState(6515);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,836,_ctx) ) {
				case 1:
					{
					setState(6513);
					match(HAVING);
					setState(6514);
					vex(0);
					}
					break;
				}
				setState(6531);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,838,_ctx) ) {
				case 1:
					{
					setState(6517);
					match(WINDOW);
					setState(6518);
					identifier();
					setState(6519);
					match(AS);
					setState(6520);
					window_definition();
					setState(6528);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,837,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(6521);
							match(COMMA);
							setState(6522);
							identifier();
							setState(6523);
							match(AS);
							setState(6524);
							window_definition();
							}
							} 
						}
						setState(6530);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,837,_ctx);
					}
					}
					break;
				}
				}
				break;
			case TABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(6533);
				match(TABLE);
				setState(6535);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ONLY) {
					{
					setState(6534);
					match(ONLY);
					}
				}

				setState(6537);
				schema_qualified_name();
				setState(6539);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,840,_ctx) ) {
				case 1:
					{
					setState(6538);
					match(MULTIPLY);
					}
					break;
				}
				}
				break;
			case VALUES:
				enterOuterAlt(_localctx, 3);
				{
				setState(6541);
				values_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_listContext extends ParserRuleContext {
		public List<Select_sublistContext> select_sublist() {
			return getRuleContexts(Select_sublistContext.class);
		}
		public Select_sublistContext select_sublist(int i) {
			return getRuleContext(Select_sublistContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Select_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_list; }
	}

	public final Select_listContext select_list() throws RecognitionException {
		Select_listContext _localctx = new Select_listContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_select_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6544);
			select_sublist();
			setState(6549);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,842,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6545);
					match(COMMA);
					setState(6546);
					select_sublist();
					}
					} 
				}
				setState(6551);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,842,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_sublistContext extends ParserRuleContext {
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public TerminalNode AS() { return getToken(PLpgSQLParser.AS, 0); }
		public Col_labelContext col_label() {
			return getRuleContext(Col_labelContext.class,0);
		}
		public Id_tokenContext id_token() {
			return getRuleContext(Id_tokenContext.class,0);
		}
		public Select_sublistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_sublist; }
	}

	public final Select_sublistContext select_sublist() throws RecognitionException {
		Select_sublistContext _localctx = new Select_sublistContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_select_sublist);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6552);
			vex(0);
			setState(6556);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,843,_ctx) ) {
			case 1:
				{
				setState(6553);
				match(AS);
				setState(6554);
				col_label();
				}
				break;
			case 2:
				{
				setState(6555);
				id_token();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Into_tableContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(PLpgSQLParser.INTO, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PLpgSQLParser.TABLE, 0); }
		public TerminalNode TEMPORARY() { return getToken(PLpgSQLParser.TEMPORARY, 0); }
		public TerminalNode TEMP() { return getToken(PLpgSQLParser.TEMP, 0); }
		public TerminalNode UNLOGGED() { return getToken(PLpgSQLParser.UNLOGGED, 0); }
		public Into_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_into_table; }
	}

	public final Into_tableContext into_table() throws RecognitionException {
		Into_tableContext _localctx = new Into_tableContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_into_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6558);
			match(INTO);
			setState(6560);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,844,_ctx) ) {
			case 1:
				{
				setState(6559);
				_la = _input.LA(1);
				if ( !(((((_la - 253)) & ~0x3f) == 0 && ((1L << (_la - 253)) & ((1L << (TEMP - 253)) | (1L << (TEMPORARY - 253)) | (1L << (UNLOGGED - 253)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(6563);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLE) {
				{
				setState(6562);
				match(TABLE);
				}
			}

			setState(6565);
			schema_qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_itemContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public List<From_itemContext> from_item() {
			return getRuleContexts(From_itemContext.class);
		}
		public From_itemContext from_item(int i) {
			return getRuleContext(From_itemContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public Alias_clauseContext alias_clause() {
			return getRuleContext(Alias_clauseContext.class,0);
		}
		public From_primaryContext from_primary() {
			return getRuleContext(From_primaryContext.class,0);
		}
		public TerminalNode CROSS() { return getToken(PLpgSQLParser.CROSS, 0); }
		public TerminalNode JOIN() { return getToken(PLpgSQLParser.JOIN, 0); }
		public TerminalNode NATURAL() { return getToken(PLpgSQLParser.NATURAL, 0); }
		public TerminalNode INNER() { return getToken(PLpgSQLParser.INNER, 0); }
		public TerminalNode LEFT() { return getToken(PLpgSQLParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(PLpgSQLParser.RIGHT, 0); }
		public TerminalNode FULL() { return getToken(PLpgSQLParser.FULL, 0); }
		public TerminalNode OUTER() { return getToken(PLpgSQLParser.OUTER, 0); }
		public TerminalNode ON() { return getToken(PLpgSQLParser.ON, 0); }
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public TerminalNode USING() { return getToken(PLpgSQLParser.USING, 0); }
		public Names_in_parensContext names_in_parens() {
			return getRuleContext(Names_in_parensContext.class,0);
		}
		public From_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_item; }
	}

	public final From_itemContext from_item() throws RecognitionException {
		return from_item(0);
	}

	private From_itemContext from_item(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		From_itemContext _localctx = new From_itemContext(_ctx, _parentState);
		From_itemContext _prevctx = _localctx;
		int _startState = 644;
		enterRecursionRule(_localctx, 644, RULE_from_item, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6575);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,847,_ctx) ) {
			case 1:
				{
				setState(6568);
				match(LEFT_PAREN);
				setState(6569);
				from_item(0);
				setState(6570);
				match(RIGHT_PAREN);
				setState(6572);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,846,_ctx) ) {
				case 1:
					{
					setState(6571);
					alias_clause();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(6574);
				from_primary();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(6620);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,855,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(6618);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,854,_ctx) ) {
					case 1:
						{
						_localctx = new From_itemContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_from_item);
						setState(6577);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(6578);
						match(CROSS);
						setState(6579);
						match(JOIN);
						setState(6580);
						from_item(6);
						}
						break;
					case 2:
						{
						_localctx = new From_itemContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_from_item);
						setState(6581);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(6582);
						match(NATURAL);
						setState(6588);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case INNER:
							{
							setState(6583);
							match(INNER);
							}
							break;
						case FULL:
						case LEFT:
						case RIGHT:
							{
							setState(6584);
							_la = _input.LA(1);
							if ( !(((((_la - 350)) & ~0x3f) == 0 && ((1L << (_la - 350)) & ((1L << (FULL - 350)) | (1L << (LEFT - 350)) | (1L << (RIGHT - 350)))) != 0)) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							setState(6586);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==OUTER) {
								{
								setState(6585);
								match(OUTER);
								}
							}

							}
							break;
						case JOIN:
							break;
						default:
							break;
						}
						setState(6590);
						match(JOIN);
						setState(6591);
						from_item(3);
						}
						break;
					case 3:
						{
						_localctx = new From_itemContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_from_item);
						setState(6592);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(6598);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case INNER:
							{
							setState(6593);
							match(INNER);
							}
							break;
						case FULL:
						case LEFT:
						case RIGHT:
							{
							setState(6594);
							_la = _input.LA(1);
							if ( !(((((_la - 350)) & ~0x3f) == 0 && ((1L << (_la - 350)) & ((1L << (FULL - 350)) | (1L << (LEFT - 350)) | (1L << (RIGHT - 350)))) != 0)) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							setState(6596);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==OUTER) {
								{
								setState(6595);
								match(OUTER);
								}
							}

							}
							break;
						case JOIN:
							break;
						default:
							break;
						}
						setState(6600);
						match(JOIN);
						setState(6601);
						from_item(0);
						setState(6602);
						match(ON);
						setState(6603);
						vex(0);
						}
						break;
					case 4:
						{
						_localctx = new From_itemContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_from_item);
						setState(6605);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(6611);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case INNER:
							{
							setState(6606);
							match(INNER);
							}
							break;
						case FULL:
						case LEFT:
						case RIGHT:
							{
							setState(6607);
							_la = _input.LA(1);
							if ( !(((((_la - 350)) & ~0x3f) == 0 && ((1L << (_la - 350)) & ((1L << (FULL - 350)) | (1L << (LEFT - 350)) | (1L << (RIGHT - 350)))) != 0)) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							setState(6609);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==OUTER) {
								{
								setState(6608);
								match(OUTER);
								}
							}

							}
							break;
						case JOIN:
							break;
						default:
							break;
						}
						setState(6613);
						match(JOIN);
						setState(6614);
						from_item(0);
						setState(6615);
						match(USING);
						setState(6616);
						names_in_parens();
						}
						break;
					}
					} 
				}
				setState(6622);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,855,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class From_primaryContext extends ParserRuleContext {
		public IdentifierContext method;
		public IdentifierContext alias;
		public IdentifierContext identifier;
		public List<IdentifierContext> column_alias = new ArrayList<IdentifierContext>();
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(PLpgSQLParser.ONLY, 0); }
		public TerminalNode MULTIPLY() { return getToken(PLpgSQLParser.MULTIPLY, 0); }
		public Alias_clauseContext alias_clause() {
			return getRuleContext(Alias_clauseContext.class,0);
		}
		public TerminalNode TABLESAMPLE() { return getToken(PLpgSQLParser.TABLESAMPLE, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PLpgSQLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PLpgSQLParser.LEFT_PAREN, i);
		}
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PLpgSQLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PLpgSQLParser.RIGHT_PAREN, i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public TerminalNode REPEATABLE() { return getToken(PLpgSQLParser.REPEATABLE, 0); }
		public Table_subqueryContext table_subquery() {
			return getRuleContext(Table_subqueryContext.class,0);
		}
		public TerminalNode LATERAL() { return getToken(PLpgSQLParser.LATERAL, 0); }
		public List<Function_callContext> function_call() {
			return getRuleContexts(Function_callContext.class);
		}
		public Function_callContext function_call(int i) {
			return getRuleContext(Function_callContext.class,i);
		}
		public TerminalNode WITH() { return getToken(PLpgSQLParser.WITH, 0); }
		public TerminalNode ORDINALITY() { return getToken(PLpgSQLParser.ORDINALITY, 0); }
		public List<TerminalNode> AS() { return getTokens(PLpgSQLParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(PLpgSQLParser.AS, i);
		}
		public List<From_function_column_defContext> from_function_column_def() {
			return getRuleContexts(From_function_column_defContext.class);
		}
		public From_function_column_defContext from_function_column_def(int i) {
			return getRuleContext(From_function_column_defContext.class,i);
		}
		public TerminalNode ROWS() { return getToken(PLpgSQLParser.ROWS, 0); }
		public TerminalNode FROM() { return getToken(PLpgSQLParser.FROM, 0); }
		public From_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_primary; }
	}

	public final From_primaryContext from_primary() throws RecognitionException {
		From_primaryContext _localctx = new From_primaryContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_from_primary);
		int _la;
		try {
			setState(6733);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,878,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6624);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ONLY) {
					{
					setState(6623);
					match(ONLY);
					}
				}

				setState(6626);
				schema_qualified_name();
				setState(6628);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,857,_ctx) ) {
				case 1:
					{
					setState(6627);
					match(MULTIPLY);
					}
					break;
				}
				setState(6631);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,858,_ctx) ) {
				case 1:
					{
					setState(6630);
					alias_clause();
					}
					break;
				}
				setState(6649);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,861,_ctx) ) {
				case 1:
					{
					setState(6633);
					match(TABLESAMPLE);
					setState(6634);
					((From_primaryContext)_localctx).method = identifier();
					setState(6635);
					match(LEFT_PAREN);
					setState(6636);
					vex(0);
					setState(6641);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(6637);
						match(COMMA);
						setState(6638);
						vex(0);
						}
						}
						setState(6643);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(6644);
					match(RIGHT_PAREN);
					setState(6647);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,860,_ctx) ) {
					case 1:
						{
						setState(6645);
						match(REPEATABLE);
						setState(6646);
						vex(0);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6652);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LATERAL) {
					{
					setState(6651);
					match(LATERAL);
					}
				}

				setState(6654);
				table_subquery();
				setState(6655);
				alias_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6658);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LATERAL) {
					{
					setState(6657);
					match(LATERAL);
					}
				}

				setState(6660);
				function_call();
				setState(6663);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,864,_ctx) ) {
				case 1:
					{
					setState(6661);
					match(WITH);
					setState(6662);
					match(ORDINALITY);
					}
					break;
				}
				setState(6685);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,868,_ctx) ) {
				case 1:
					{
					setState(6665);
					match(AS);
					setState(6666);
					from_function_column_def();
					}
					break;
				case 2:
					{
					setState(6668);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(6667);
						match(AS);
						}
					}

					setState(6670);
					((From_primaryContext)_localctx).alias = identifier();
					setState(6683);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,867,_ctx) ) {
					case 1:
						{
						setState(6671);
						match(LEFT_PAREN);
						setState(6672);
						((From_primaryContext)_localctx).identifier = identifier();
						((From_primaryContext)_localctx).column_alias.add(((From_primaryContext)_localctx).identifier);
						setState(6677);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(6673);
							match(COMMA);
							setState(6674);
							((From_primaryContext)_localctx).identifier = identifier();
							((From_primaryContext)_localctx).column_alias.add(((From_primaryContext)_localctx).identifier);
							}
							}
							setState(6679);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(6680);
						match(RIGHT_PAREN);
						}
						break;
					case 2:
						{
						setState(6682);
						from_function_column_def();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6688);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LATERAL) {
					{
					setState(6687);
					match(LATERAL);
					}
				}

				setState(6690);
				match(ROWS);
				setState(6691);
				match(FROM);
				setState(6692);
				match(LEFT_PAREN);
				setState(6693);
				function_call();
				setState(6696);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(6694);
					match(AS);
					setState(6695);
					from_function_column_def();
					}
				}

				setState(6706);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6698);
					match(COMMA);
					setState(6699);
					function_call();
					setState(6702);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(6700);
						match(AS);
						setState(6701);
						from_function_column_def();
						}
					}

					}
					}
					setState(6708);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6709);
				match(RIGHT_PAREN);
				setState(6712);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,873,_ctx) ) {
				case 1:
					{
					setState(6710);
					match(WITH);
					setState(6711);
					match(ORDINALITY);
					}
					break;
				}
				setState(6731);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,877,_ctx) ) {
				case 1:
					{
					setState(6715);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(6714);
						match(AS);
						}
					}

					setState(6717);
					((From_primaryContext)_localctx).alias = identifier();
					setState(6729);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,876,_ctx) ) {
					case 1:
						{
						setState(6718);
						match(LEFT_PAREN);
						setState(6719);
						((From_primaryContext)_localctx).identifier = identifier();
						((From_primaryContext)_localctx).column_alias.add(((From_primaryContext)_localctx).identifier);
						setState(6724);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(6720);
							match(COMMA);
							setState(6721);
							((From_primaryContext)_localctx).identifier = identifier();
							((From_primaryContext)_localctx).column_alias.add(((From_primaryContext)_localctx).identifier);
							}
							}
							setState(6726);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(6727);
						match(RIGHT_PAREN);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alias_clauseContext extends ParserRuleContext {
		public IdentifierContext alias;
		public IdentifierContext identifier;
		public List<IdentifierContext> column_alias = new ArrayList<IdentifierContext>();
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode AS() { return getToken(PLpgSQLParser.AS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Alias_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alias_clause; }
	}

	public final Alias_clauseContext alias_clause() throws RecognitionException {
		Alias_clauseContext _localctx = new Alias_clauseContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_alias_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6736);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(6735);
				match(AS);
				}
			}

			setState(6738);
			((Alias_clauseContext)_localctx).alias = identifier();
			setState(6750);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,881,_ctx) ) {
			case 1:
				{
				setState(6739);
				match(LEFT_PAREN);
				setState(6740);
				((Alias_clauseContext)_localctx).identifier = identifier();
				((Alias_clauseContext)_localctx).column_alias.add(((Alias_clauseContext)_localctx).identifier);
				setState(6745);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6741);
					match(COMMA);
					setState(6742);
					((Alias_clauseContext)_localctx).identifier = identifier();
					((Alias_clauseContext)_localctx).column_alias.add(((Alias_clauseContext)_localctx).identifier);
					}
					}
					setState(6747);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6748);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_function_column_defContext extends ParserRuleContext {
		public IdentifierContext identifier;
		public List<IdentifierContext> column_alias = new ArrayList<IdentifierContext>();
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public List<Data_typeContext> data_type() {
			return getRuleContexts(Data_typeContext.class);
		}
		public Data_typeContext data_type(int i) {
			return getRuleContext(Data_typeContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public From_function_column_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_function_column_def; }
	}

	public final From_function_column_defContext from_function_column_def() throws RecognitionException {
		From_function_column_defContext _localctx = new From_function_column_defContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_from_function_column_def);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6752);
			match(LEFT_PAREN);
			setState(6753);
			((From_function_column_defContext)_localctx).identifier = identifier();
			((From_function_column_defContext)_localctx).column_alias.add(((From_function_column_defContext)_localctx).identifier);
			setState(6754);
			data_type();
			setState(6761);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6755);
				match(COMMA);
				setState(6756);
				((From_function_column_defContext)_localctx).identifier = identifier();
				((From_function_column_defContext)_localctx).column_alias.add(((From_function_column_defContext)_localctx).identifier);
				setState(6757);
				data_type();
				}
				}
				setState(6763);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6764);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Groupby_clauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(PLpgSQLParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(PLpgSQLParser.BY, 0); }
		public Grouping_element_listContext grouping_element_list() {
			return getRuleContext(Grouping_element_listContext.class,0);
		}
		public Groupby_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupby_clause; }
	}

	public final Groupby_clauseContext groupby_clause() throws RecognitionException {
		Groupby_clauseContext _localctx = new Groupby_clauseContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_groupby_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6766);
			match(GROUP);
			setState(6767);
			match(BY);
			setState(6768);
			grouping_element_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_element_listContext extends ParserRuleContext {
		public List<Grouping_elementContext> grouping_element() {
			return getRuleContexts(Grouping_elementContext.class);
		}
		public Grouping_elementContext grouping_element(int i) {
			return getRuleContext(Grouping_elementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Grouping_element_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_element_list; }
	}

	public final Grouping_element_listContext grouping_element_list() throws RecognitionException {
		Grouping_element_listContext _localctx = new Grouping_element_listContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_grouping_element_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6770);
			grouping_element();
			setState(6775);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,883,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6771);
					match(COMMA);
					setState(6772);
					grouping_element();
					}
					} 
				}
				setState(6777);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,883,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_elementContext extends ParserRuleContext {
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public Grouping_element_listContext grouping_element_list() {
			return getRuleContext(Grouping_element_listContext.class,0);
		}
		public TerminalNode ROLLUP() { return getToken(PLpgSQLParser.ROLLUP, 0); }
		public TerminalNode CUBE() { return getToken(PLpgSQLParser.CUBE, 0); }
		public TerminalNode GROUPING() { return getToken(PLpgSQLParser.GROUPING, 0); }
		public TerminalNode SETS() { return getToken(PLpgSQLParser.SETS, 0); }
		public Grouping_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_element; }
	}

	public final Grouping_elementContext grouping_element() throws RecognitionException {
		Grouping_elementContext _localctx = new Grouping_elementContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_grouping_element);
		try {
			setState(6791);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,885,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6778);
				vex(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6779);
				match(LEFT_PAREN);
				setState(6780);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6785);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ROLLUP:
					{
					setState(6781);
					match(ROLLUP);
					}
					break;
				case CUBE:
					{
					setState(6782);
					match(CUBE);
					}
					break;
				case GROUPING:
					{
					setState(6783);
					match(GROUPING);
					setState(6784);
					match(SETS);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6787);
				match(LEFT_PAREN);
				setState(6788);
				grouping_element_list();
				setState(6789);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Values_stmtContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(PLpgSQLParser.VALUES, 0); }
		public List<Values_valuesContext> values_values() {
			return getRuleContexts(Values_valuesContext.class);
		}
		public Values_valuesContext values_values(int i) {
			return getRuleContext(Values_valuesContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Values_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_values_stmt; }
	}

	public final Values_stmtContext values_stmt() throws RecognitionException {
		Values_stmtContext _localctx = new Values_stmtContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_values_stmt);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6793);
			match(VALUES);
			setState(6794);
			values_values();
			setState(6799);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,886,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6795);
					match(COMMA);
					setState(6796);
					values_values();
					}
					} 
				}
				setState(6801);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,886,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Values_valuesContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(PLpgSQLParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(PLpgSQLParser.DEFAULT, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Values_valuesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_values_values; }
	}

	public final Values_valuesContext values_values() throws RecognitionException {
		Values_valuesContext _localctx = new Values_valuesContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_values_values);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6802);
			match(LEFT_PAREN);
			setState(6805);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BY:
			case CACHE:
			case CALL:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COLUMNS:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONFLICT:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CUBE:
			case CURRENT:
			case CURSOR:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DEPENDS:
			case DETACH:
			case DICTIONARY:
			case DISABLE:
			case DISCARD:
			case DOCUMENT:
			case DOMAIN:
			case DOUBLE:
			case DROP:
			case EACH:
			case ENABLE:
			case ENCODING:
			case ENCRYPTED:
			case ENUM:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GENERATED:
			case GLOBAL:
			case GRANTED:
			case GROUPS:
			case HANDLER:
			case HEADER:
			case HOLD:
			case HOUR:
			case IDENTITY:
			case IF:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT:
			case IMPORT:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCKED:
			case LOGGED:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case METHOD:
			case MINUTE:
			case MINVALUE:
			case MODE:
			case MONTH:
			case MOVE:
			case NAME:
			case NAMES:
			case NEW:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS:
			case OBJECT:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OVER:
			case OVERRIDING:
			case OWNED:
			case OWNER:
			case PARALLEL:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POLICY:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROCEDURES:
			case PROGRAM:
			case PUBLICATION:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINES:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMAS:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SKIP_:
			case SNAPSHOT:
			case SQL:
			case STABLE:
			case STANDALONE:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STORED:
			case STRICT:
			case STRIP:
			case SUBSCRIPTION:
			case SUPPORT:
			case SYSID:
			case SYSTEM:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT:
			case TIES:
			case TRANSACTION:
			case TRANSFORM:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE:
			case VARYING:
			case VERSION:
			case VIEW:
			case VIEWS:
			case VOLATILE:
			case WHITESPACE:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML:
			case YEAR:
			case YES:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL:
			case EXISTS:
			case EXTRACT:
			case FLOAT:
			case GREATEST:
			case GROUPING:
			case INOUT:
			case INT:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case TABLESAMPLE:
			case VERBOSE:
			case ALL:
			case ANY:
			case ARRAY:
			case CASE:
			case CAST:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case FALSE:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL:
			case ON:
			case SESSION_USER:
			case SOME:
			case TRUE:
			case USER:
			case ALIGNMENT:
			case BASETYPE:
			case BUFFERS:
			case BYPASSRLS:
			case CANONICAL:
			case CATEGORY:
			case COLLATABLE:
			case COMBINEFUNC:
			case COMMUTATOR:
			case CONNECT:
			case COSTS:
			case CREATEDB:
			case CREATEROLE:
			case DESERIALFUNC:
			case DETERMINISTIC:
			case DISABLE_PAGE_SKIPPING:
			case ELEMENT:
			case EXTENDED:
			case FINALFUNC:
			case FINALFUNC_EXTRA:
			case FINALFUNC_MODIFY:
			case FORCE_NOT_NULL:
			case FORCE_NULL:
			case FORCE_QUOTE:
			case FORMAT:
			case GETTOKEN:
			case HASH:
			case HASHES:
			case HEADLINE:
			case HYPOTHETICAL:
			case INDEX_CLEANUP:
			case INIT:
			case INITCOND:
			case INTERNALLENGTH:
			case JSON:
			case LC_COLLATE:
			case LC_CTYPE:
			case LEFTARG:
			case LEXIZE:
			case LEXTYPES:
			case LIST:
			case LOCALE:
			case LOGIN:
			case MAIN:
			case MERGES:
			case MFINALFUNC:
			case MFINALFUNC_EXTRA:
			case MFINALFUNC_MODIFY:
			case MINITCOND:
			case MINVFUNC:
			case MODULUS:
			case MSFUNC:
			case MSSPACE:
			case MSTYPE:
			case NEGATOR:
			case NOBYPASSRLS:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOREPLICATION:
			case NOSUPERUSER:
			case OUTPUT:
			case PASSEDBYVALUE:
			case PATH:
			case PERMISSIVE:
			case PLAIN:
			case PREFERRED:
			case PROVIDER:
			case READ_ONLY:
			case READ_WRITE:
			case RECEIVE:
			case REMAINDER:
			case REPLICATION:
			case RESTRICTED:
			case RESTRICTIVE:
			case RIGHTARG:
			case SAFE:
			case SEND:
			case SERIALFUNC:
			case SETTINGS:
			case SFUNC:
			case SHAREABLE:
			case SKIP_LOCKED:
			case SORTOP:
			case SSPACE:
			case STYPE:
			case SUBTYPE_DIFF:
			case SUBTYPE_OPCLASS:
			case SUBTYPE:
			case SUMMARY:
			case SUPERUSER:
			case TIMING:
			case TYPMOD_IN:
			case TYPMOD_OUT:
			case UNSAFE:
			case USAGE:
			case VARIABLE:
			case YAML:
			case ALIAS:
			case ASSERT:
			case CONSTANT:
			case DATATYPE:
			case DEBUG:
			case DETAIL:
			case DIAGNOSTICS:
			case ELSEIF:
			case ELSIF:
			case ERRCODE:
			case EXIT:
			case EXCEPTION:
			case FOREACH:
			case GET:
			case HINT:
			case INFO:
			case LOG:
			case LOOP:
			case MESSAGE:
			case NOTICE:
			case OPEN:
			case PERFORM:
			case QUERY:
			case RAISE:
			case RECORD:
			case RETURN:
			case REVERSE:
			case ROWTYPE:
			case SLICE:
			case SQLSTATE:
			case STACKED:
			case WARNING:
			case WHILE:
			case LEFT_PAREN:
			case PLUS:
			case MINUS:
			case MULTIPLY:
			case LESS_LESS:
			case GREATER_GREATER:
			case HASH_SIGN:
			case OP_CHARS:
			case NUMBER_LITERAL:
			case REAL_NUMBER:
			case DOLLAR_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case Character_String_Literal:
			case BeginDollarStringConstant:
				{
				setState(6803);
				vex(0);
				}
				break;
			case DEFAULT:
				{
				setState(6804);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6814);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6807);
				match(COMMA);
				setState(6810);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BY:
				case CACHE:
				case CALL:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COLUMNS:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONFLICT:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CUBE:
				case CURRENT:
				case CURSOR:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DEPENDS:
				case DETACH:
				case DICTIONARY:
				case DISABLE:
				case DISCARD:
				case DOCUMENT:
				case DOMAIN:
				case DOUBLE:
				case DROP:
				case EACH:
				case ENABLE:
				case ENCODING:
				case ENCRYPTED:
				case ENUM:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GENERATED:
				case GLOBAL:
				case GRANTED:
				case GROUPS:
				case HANDLER:
				case HEADER:
				case HOLD:
				case HOUR:
				case IDENTITY:
				case IF:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT:
				case IMPORT:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCKED:
				case LOGGED:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case METHOD:
				case MINUTE:
				case MINVALUE:
				case MODE:
				case MONTH:
				case MOVE:
				case NAME:
				case NAMES:
				case NEW:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS:
				case OBJECT:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDINALITY:
				case OTHERS:
				case OVER:
				case OVERRIDING:
				case OWNED:
				case OWNER:
				case PARALLEL:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case POLICY:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROCEDURES:
				case PROGRAM:
				case PUBLICATION:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINES:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMAS:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SKIP_:
				case SNAPSHOT:
				case SQL:
				case STABLE:
				case STANDALONE:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STORED:
				case STRICT:
				case STRIP:
				case SUBSCRIPTION:
				case SUPPORT:
				case SYSID:
				case SYSTEM:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT:
				case TIES:
				case TRANSACTION:
				case TRANSFORM:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case TYPES:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VALUE:
				case VARYING:
				case VERSION:
				case VIEW:
				case VIEWS:
				case VOLATILE:
				case WHITESPACE:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML:
				case YEAR:
				case YES:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN:
				case CHAR:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL:
				case EXISTS:
				case EXTRACT:
				case FLOAT:
				case GREATEST:
				case GROUPING:
				case INOUT:
				case INT:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OUT:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case AUTHORIZATION:
				case BINARY:
				case COLLATION:
				case CONCURRENTLY:
				case CROSS:
				case CURRENT_SCHEMA:
				case FREEZE:
				case FULL:
				case ILIKE:
				case INNER:
				case IS:
				case ISNULL:
				case JOIN:
				case LEFT:
				case LIKE:
				case NATURAL:
				case NOTNULL:
				case OUTER:
				case OVERLAPS:
				case RIGHT:
				case SIMILAR:
				case TABLESAMPLE:
				case VERBOSE:
				case ALL:
				case ANY:
				case ARRAY:
				case CASE:
				case CAST:
				case CURRENT_CATALOG:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case FALSE:
				case LOCALTIME:
				case LOCALTIMESTAMP:
				case NOT:
				case NULL:
				case ON:
				case SESSION_USER:
				case SOME:
				case TRUE:
				case USER:
				case ALIGNMENT:
				case BASETYPE:
				case BUFFERS:
				case BYPASSRLS:
				case CANONICAL:
				case CATEGORY:
				case COLLATABLE:
				case COMBINEFUNC:
				case COMMUTATOR:
				case CONNECT:
				case COSTS:
				case CREATEDB:
				case CREATEROLE:
				case DESERIALFUNC:
				case DETERMINISTIC:
				case DISABLE_PAGE_SKIPPING:
				case ELEMENT:
				case EXTENDED:
				case FINALFUNC:
				case FINALFUNC_EXTRA:
				case FINALFUNC_MODIFY:
				case FORCE_NOT_NULL:
				case FORCE_NULL:
				case FORCE_QUOTE:
				case FORMAT:
				case GETTOKEN:
				case HASH:
				case HASHES:
				case HEADLINE:
				case HYPOTHETICAL:
				case INDEX_CLEANUP:
				case INIT:
				case INITCOND:
				case INTERNALLENGTH:
				case JSON:
				case LC_COLLATE:
				case LC_CTYPE:
				case LEFTARG:
				case LEXIZE:
				case LEXTYPES:
				case LIST:
				case LOCALE:
				case LOGIN:
				case MAIN:
				case MERGES:
				case MFINALFUNC:
				case MFINALFUNC_EXTRA:
				case MFINALFUNC_MODIFY:
				case MINITCOND:
				case MINVFUNC:
				case MODULUS:
				case MSFUNC:
				case MSSPACE:
				case MSTYPE:
				case NEGATOR:
				case NOBYPASSRLS:
				case NOCREATEDB:
				case NOCREATEROLE:
				case NOINHERIT:
				case NOLOGIN:
				case NOREPLICATION:
				case NOSUPERUSER:
				case OUTPUT:
				case PASSEDBYVALUE:
				case PATH:
				case PERMISSIVE:
				case PLAIN:
				case PREFERRED:
				case PROVIDER:
				case READ_ONLY:
				case READ_WRITE:
				case RECEIVE:
				case REMAINDER:
				case REPLICATION:
				case RESTRICTED:
				case RESTRICTIVE:
				case RIGHTARG:
				case SAFE:
				case SEND:
				case SERIALFUNC:
				case SETTINGS:
				case SFUNC:
				case SHAREABLE:
				case SKIP_LOCKED:
				case SORTOP:
				case SSPACE:
				case STYPE:
				case SUBTYPE_DIFF:
				case SUBTYPE_OPCLASS:
				case SUBTYPE:
				case SUMMARY:
				case SUPERUSER:
				case TIMING:
				case TYPMOD_IN:
				case TYPMOD_OUT:
				case UNSAFE:
				case USAGE:
				case VARIABLE:
				case YAML:
				case ALIAS:
				case ASSERT:
				case CONSTANT:
				case DATATYPE:
				case DEBUG:
				case DETAIL:
				case DIAGNOSTICS:
				case ELSEIF:
				case ELSIF:
				case ERRCODE:
				case EXIT:
				case EXCEPTION:
				case FOREACH:
				case GET:
				case HINT:
				case INFO:
				case LOG:
				case LOOP:
				case MESSAGE:
				case NOTICE:
				case OPEN:
				case PERFORM:
				case QUERY:
				case RAISE:
				case RECORD:
				case RETURN:
				case REVERSE:
				case ROWTYPE:
				case SLICE:
				case SQLSTATE:
				case STACKED:
				case WARNING:
				case WHILE:
				case LEFT_PAREN:
				case PLUS:
				case MINUS:
				case MULTIPLY:
				case LESS_LESS:
				case GREATER_GREATER:
				case HASH_SIGN:
				case OP_CHARS:
				case NUMBER_LITERAL:
				case REAL_NUMBER:
				case DOLLAR_NUMBER:
				case Identifier:
				case QuotedIdentifier:
				case Character_String_Literal:
				case BeginDollarStringConstant:
					{
					setState(6808);
					vex(0);
					}
					break;
				case DEFAULT:
					{
					setState(6809);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				setState(6816);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6817);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Orderby_clauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(PLpgSQLParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PLpgSQLParser.BY, 0); }
		public Sort_specifier_listContext sort_specifier_list() {
			return getRuleContext(Sort_specifier_listContext.class,0);
		}
		public Orderby_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderby_clause; }
	}

	public final Orderby_clauseContext orderby_clause() throws RecognitionException {
		Orderby_clauseContext _localctx = new Orderby_clauseContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_orderby_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6819);
			match(ORDER);
			setState(6820);
			match(BY);
			setState(6821);
			sort_specifier_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sort_specifier_listContext extends ParserRuleContext {
		public List<Sort_specifierContext> sort_specifier() {
			return getRuleContexts(Sort_specifierContext.class);
		}
		public Sort_specifierContext sort_specifier(int i) {
			return getRuleContext(Sort_specifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Sort_specifier_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sort_specifier_list; }
	}

	public final Sort_specifier_listContext sort_specifier_list() throws RecognitionException {
		Sort_specifier_listContext _localctx = new Sort_specifier_listContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_sort_specifier_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6823);
			sort_specifier();
			setState(6828);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6824);
				match(COMMA);
				setState(6825);
				sort_specifier();
				}
				}
				setState(6830);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sort_specifierContext extends ParserRuleContext {
		public VexContext key;
		public Schema_qualified_nameContext opclass;
		public Order_specificationContext order;
		public Null_orderingContext null_order;
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Order_specificationContext order_specification() {
			return getRuleContext(Order_specificationContext.class,0);
		}
		public Null_orderingContext null_ordering() {
			return getRuleContext(Null_orderingContext.class,0);
		}
		public Sort_specifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sort_specifier; }
	}

	public final Sort_specifierContext sort_specifier() throws RecognitionException {
		Sort_specifierContext _localctx = new Sort_specifierContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_sort_specifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6831);
			((Sort_specifierContext)_localctx).key = vex(0);
			setState(6833);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,891,_ctx) ) {
			case 1:
				{
				setState(6832);
				((Sort_specifierContext)_localctx).opclass = schema_qualified_name();
				}
				break;
			}
			setState(6836);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC || _la==USING) {
				{
				setState(6835);
				((Sort_specifierContext)_localctx).order = order_specification();
				}
			}

			setState(6839);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NULLS) {
				{
				setState(6838);
				((Sort_specifierContext)_localctx).null_order = null_ordering();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_specificationContext extends ParserRuleContext {
		public TerminalNode ASC() { return getToken(PLpgSQLParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(PLpgSQLParser.DESC, 0); }
		public TerminalNode USING() { return getToken(PLpgSQLParser.USING, 0); }
		public All_op_refContext all_op_ref() {
			return getRuleContext(All_op_refContext.class,0);
		}
		public Order_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_specification; }
	}

	public final Order_specificationContext order_specification() throws RecognitionException {
		Order_specificationContext _localctx = new Order_specificationContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_order_specification);
		try {
			setState(6845);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASC:
				enterOuterAlt(_localctx, 1);
				{
				setState(6841);
				match(ASC);
				}
				break;
			case DESC:
				enterOuterAlt(_localctx, 2);
				{
				setState(6842);
				match(DESC);
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 3);
				{
				setState(6843);
				match(USING);
				setState(6844);
				all_op_ref();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_orderingContext extends ParserRuleContext {
		public TerminalNode NULLS() { return getToken(PLpgSQLParser.NULLS, 0); }
		public TerminalNode FIRST() { return getToken(PLpgSQLParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(PLpgSQLParser.LAST, 0); }
		public Null_orderingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_ordering; }
	}

	public final Null_orderingContext null_ordering() throws RecognitionException {
		Null_orderingContext _localctx = new Null_orderingContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_null_ordering);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6847);
			match(NULLS);
			setState(6848);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==LAST) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_stmt_for_psqlContext extends ParserRuleContext {
		public Schema_qualified_nameContext insert_table_name;
		public IdentifierContext alias;
		public TerminalNode INSERT() { return getToken(PLpgSQLParser.INSERT, 0); }
		public TerminalNode INTO() { return getToken(PLpgSQLParser.INTO, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Select_stmtContext select_stmt() {
			return getRuleContext(Select_stmtContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PLpgSQLParser.DEFAULT, 0); }
		public TerminalNode VALUES() { return getToken(PLpgSQLParser.VALUES, 0); }
		public With_clauseContext with_clause() {
			return getRuleContext(With_clauseContext.class,0);
		}
		public TerminalNode AS() { return getToken(PLpgSQLParser.AS, 0); }
		public TerminalNode OVERRIDING() { return getToken(PLpgSQLParser.OVERRIDING, 0); }
		public TerminalNode VALUE() { return getToken(PLpgSQLParser.VALUE, 0); }
		public Insert_columnsContext insert_columns() {
			return getRuleContext(Insert_columnsContext.class,0);
		}
		public TerminalNode ON() { return getToken(PLpgSQLParser.ON, 0); }
		public TerminalNode CONFLICT() { return getToken(PLpgSQLParser.CONFLICT, 0); }
		public Conflict_actionContext conflict_action() {
			return getRuleContext(Conflict_actionContext.class,0);
		}
		public TerminalNode RETURNING() { return getToken(PLpgSQLParser.RETURNING, 0); }
		public Select_listContext select_list() {
			return getRuleContext(Select_listContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode SYSTEM() { return getToken(PLpgSQLParser.SYSTEM, 0); }
		public TerminalNode USER() { return getToken(PLpgSQLParser.USER, 0); }
		public Conflict_objectContext conflict_object() {
			return getRuleContext(Conflict_objectContext.class,0);
		}
		public Insert_stmt_for_psqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_stmt_for_psql; }
	}

	public final Insert_stmt_for_psqlContext insert_stmt_for_psql() throws RecognitionException {
		Insert_stmt_for_psqlContext _localctx = new Insert_stmt_for_psqlContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_insert_stmt_for_psql);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6851);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6850);
				with_clause();
				}
			}

			setState(6853);
			match(INSERT);
			setState(6854);
			match(INTO);
			setState(6855);
			((Insert_stmt_for_psqlContext)_localctx).insert_table_name = schema_qualified_name();
			setState(6858);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(6856);
				match(AS);
				setState(6857);
				((Insert_stmt_for_psqlContext)_localctx).alias = identifier();
				}
			}

			setState(6863);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OVERRIDING) {
				{
				setState(6860);
				match(OVERRIDING);
				setState(6861);
				_la = _input.LA(1);
				if ( !(_la==SYSTEM || _la==USER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6862);
				match(VALUE);
				}
			}

			setState(6866);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,898,_ctx) ) {
			case 1:
				{
				setState(6865);
				insert_columns();
				}
				break;
			}
			setState(6871);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VALUES:
			case SELECT:
			case TABLE:
			case WITH:
			case LEFT_PAREN:
				{
				setState(6868);
				select_stmt();
				}
				break;
			case DEFAULT:
				{
				setState(6869);
				match(DEFAULT);
				setState(6870);
				match(VALUES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6879);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(6873);
				match(ON);
				setState(6874);
				match(CONFLICT);
				setState(6876);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON || _la==LEFT_PAREN) {
					{
					setState(6875);
					conflict_object();
					}
				}

				setState(6878);
				conflict_action();
				}
			}

			setState(6883);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURNING) {
				{
				setState(6881);
				match(RETURNING);
				setState(6882);
				select_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_columnsContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public List<Indirection_identifierContext> indirection_identifier() {
			return getRuleContexts(Indirection_identifierContext.class);
		}
		public Indirection_identifierContext indirection_identifier(int i) {
			return getRuleContext(Indirection_identifierContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Insert_columnsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_columns; }
	}

	public final Insert_columnsContext insert_columns() throws RecognitionException {
		Insert_columnsContext _localctx = new Insert_columnsContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_insert_columns);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6885);
			match(LEFT_PAREN);
			setState(6886);
			indirection_identifier();
			setState(6891);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6887);
				match(COMMA);
				setState(6888);
				indirection_identifier();
				}
				}
				setState(6893);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6894);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Indirection_identifierContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Indirection_listContext indirection_list() {
			return getRuleContext(Indirection_listContext.class,0);
		}
		public Indirection_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indirection_identifier; }
	}

	public final Indirection_identifierContext indirection_identifier() throws RecognitionException {
		Indirection_identifierContext _localctx = new Indirection_identifierContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_indirection_identifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6896);
			identifier();
			setState(6898);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DOT || _la==LEFT_BRACKET) {
				{
				setState(6897);
				indirection_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conflict_objectContext extends ParserRuleContext {
		public Index_sortContext index_sort() {
			return getRuleContext(Index_sortContext.class,0);
		}
		public Index_whereContext index_where() {
			return getRuleContext(Index_whereContext.class,0);
		}
		public TerminalNode ON() { return getToken(PLpgSQLParser.ON, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PLpgSQLParser.CONSTRAINT, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Conflict_objectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conflict_object; }
	}

	public final Conflict_objectContext conflict_object() throws RecognitionException {
		Conflict_objectContext _localctx = new Conflict_objectContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_conflict_object);
		int _la;
		try {
			setState(6907);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 1);
				{
				setState(6900);
				index_sort();
				setState(6902);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(6901);
					index_where();
					}
				}

				}
				break;
			case ON:
				enterOuterAlt(_localctx, 2);
				{
				setState(6904);
				match(ON);
				setState(6905);
				match(CONSTRAINT);
				setState(6906);
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conflict_actionContext extends ParserRuleContext {
		public TerminalNode DO() { return getToken(PLpgSQLParser.DO, 0); }
		public TerminalNode NOTHING() { return getToken(PLpgSQLParser.NOTHING, 0); }
		public TerminalNode UPDATE() { return getToken(PLpgSQLParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(PLpgSQLParser.SET, 0); }
		public List<Update_setContext> update_set() {
			return getRuleContexts(Update_setContext.class);
		}
		public Update_setContext update_set(int i) {
			return getRuleContext(Update_setContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public TerminalNode WHERE() { return getToken(PLpgSQLParser.WHERE, 0); }
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public Conflict_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conflict_action; }
	}

	public final Conflict_actionContext conflict_action() throws RecognitionException {
		Conflict_actionContext _localctx = new Conflict_actionContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_conflict_action);
		int _la;
		try {
			setState(6926);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,909,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6909);
				match(DO);
				setState(6910);
				match(NOTHING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6911);
				match(DO);
				setState(6912);
				match(UPDATE);
				setState(6913);
				match(SET);
				setState(6914);
				update_set();
				setState(6919);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6915);
					match(COMMA);
					setState(6916);
					update_set();
					}
					}
					setState(6921);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6924);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(6922);
					match(WHERE);
					setState(6923);
					vex(0);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_stmt_for_psqlContext extends ParserRuleContext {
		public Schema_qualified_nameContext delete_table_name;
		public IdentifierContext alias;
		public IdentifierContext cursor;
		public TerminalNode DELETE() { return getToken(PLpgSQLParser.DELETE, 0); }
		public TerminalNode FROM() { return getToken(PLpgSQLParser.FROM, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public With_clauseContext with_clause() {
			return getRuleContext(With_clauseContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(PLpgSQLParser.ONLY, 0); }
		public TerminalNode MULTIPLY() { return getToken(PLpgSQLParser.MULTIPLY, 0); }
		public TerminalNode USING() { return getToken(PLpgSQLParser.USING, 0); }
		public List<From_itemContext> from_item() {
			return getRuleContexts(From_itemContext.class);
		}
		public From_itemContext from_item(int i) {
			return getRuleContext(From_itemContext.class,i);
		}
		public TerminalNode WHERE() { return getToken(PLpgSQLParser.WHERE, 0); }
		public TerminalNode RETURNING() { return getToken(PLpgSQLParser.RETURNING, 0); }
		public Select_listContext select_list() {
			return getRuleContext(Select_listContext.class,0);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public TerminalNode CURRENT() { return getToken(PLpgSQLParser.CURRENT, 0); }
		public TerminalNode OF() { return getToken(PLpgSQLParser.OF, 0); }
		public TerminalNode AS() { return getToken(PLpgSQLParser.AS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Delete_stmt_for_psqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_stmt_for_psql; }
	}

	public final Delete_stmt_for_psqlContext delete_stmt_for_psql() throws RecognitionException {
		Delete_stmt_for_psqlContext _localctx = new Delete_stmt_for_psqlContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_delete_stmt_for_psql);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6929);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6928);
				with_clause();
				}
			}

			setState(6931);
			match(DELETE);
			setState(6932);
			match(FROM);
			setState(6934);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ONLY) {
				{
				setState(6933);
				match(ONLY);
				}
			}

			setState(6936);
			((Delete_stmt_for_psqlContext)_localctx).delete_table_name = schema_qualified_name();
			setState(6938);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MULTIPLY) {
				{
				setState(6937);
				match(MULTIPLY);
				}
			}

			setState(6944);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,914,_ctx) ) {
			case 1:
				{
				setState(6941);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(6940);
					match(AS);
					}
				}

				setState(6943);
				((Delete_stmt_for_psqlContext)_localctx).alias = identifier();
				}
				break;
			}
			setState(6955);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(6946);
				match(USING);
				setState(6947);
				from_item(0);
				setState(6952);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6948);
					match(COMMA);
					setState(6949);
					from_item(0);
					}
					}
					setState(6954);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6964);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(6957);
				match(WHERE);
				setState(6962);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,917,_ctx) ) {
				case 1:
					{
					setState(6958);
					vex(0);
					}
					break;
				case 2:
					{
					setState(6959);
					match(CURRENT);
					setState(6960);
					match(OF);
					setState(6961);
					((Delete_stmt_for_psqlContext)_localctx).cursor = identifier();
					}
					break;
				}
				}
			}

			setState(6968);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURNING) {
				{
				setState(6966);
				match(RETURNING);
				setState(6967);
				select_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_stmt_for_psqlContext extends ParserRuleContext {
		public Schema_qualified_nameContext update_table_name;
		public IdentifierContext alias;
		public IdentifierContext cursor;
		public TerminalNode UPDATE() { return getToken(PLpgSQLParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(PLpgSQLParser.SET, 0); }
		public List<Update_setContext> update_set() {
			return getRuleContexts(Update_setContext.class);
		}
		public Update_setContext update_set(int i) {
			return getRuleContext(Update_setContext.class,i);
		}
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public With_clauseContext with_clause() {
			return getRuleContext(With_clauseContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(PLpgSQLParser.ONLY, 0); }
		public TerminalNode MULTIPLY() { return getToken(PLpgSQLParser.MULTIPLY, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public TerminalNode FROM() { return getToken(PLpgSQLParser.FROM, 0); }
		public List<From_itemContext> from_item() {
			return getRuleContexts(From_itemContext.class);
		}
		public From_itemContext from_item(int i) {
			return getRuleContext(From_itemContext.class,i);
		}
		public TerminalNode WHERE() { return getToken(PLpgSQLParser.WHERE, 0); }
		public TerminalNode RETURNING() { return getToken(PLpgSQLParser.RETURNING, 0); }
		public Select_listContext select_list() {
			return getRuleContext(Select_listContext.class,0);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public TerminalNode CURRENT() { return getToken(PLpgSQLParser.CURRENT, 0); }
		public TerminalNode OF() { return getToken(PLpgSQLParser.OF, 0); }
		public TerminalNode AS() { return getToken(PLpgSQLParser.AS, 0); }
		public Update_stmt_for_psqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_stmt_for_psql; }
	}

	public final Update_stmt_for_psqlContext update_stmt_for_psql() throws RecognitionException {
		Update_stmt_for_psqlContext _localctx = new Update_stmt_for_psqlContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_update_stmt_for_psql);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6971);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6970);
				with_clause();
				}
			}

			setState(6973);
			match(UPDATE);
			setState(6975);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ONLY) {
				{
				setState(6974);
				match(ONLY);
				}
			}

			setState(6977);
			((Update_stmt_for_psqlContext)_localctx).update_table_name = schema_qualified_name();
			setState(6979);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MULTIPLY) {
				{
				setState(6978);
				match(MULTIPLY);
				}
			}

			setState(6985);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,924,_ctx) ) {
			case 1:
				{
				setState(6982);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(6981);
					match(AS);
					}
				}

				setState(6984);
				((Update_stmt_for_psqlContext)_localctx).alias = identifier();
				}
				break;
			}
			setState(6987);
			match(SET);
			setState(6988);
			update_set();
			setState(6993);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6989);
				match(COMMA);
				setState(6990);
				update_set();
				}
				}
				setState(6995);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7005);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(6996);
				match(FROM);
				setState(6997);
				from_item(0);
				setState(7002);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6998);
					match(COMMA);
					setState(6999);
					from_item(0);
					}
					}
					setState(7004);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(7014);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(7007);
				match(WHERE);
				setState(7012);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,928,_ctx) ) {
				case 1:
					{
					setState(7008);
					vex(0);
					}
					break;
				case 2:
					{
					setState(7009);
					match(CURRENT);
					setState(7010);
					match(OF);
					setState(7011);
					((Update_stmt_for_psqlContext)_localctx).cursor = identifier();
					}
					break;
				}
				}
			}

			setState(7018);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURNING) {
				{
				setState(7016);
				match(RETURNING);
				setState(7017);
				select_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_setContext extends ParserRuleContext {
		public Indirection_identifierContext indirection_identifier;
		public List<Indirection_identifierContext> column = new ArrayList<Indirection_identifierContext>();
		public VexContext vex;
		public List<VexContext> value = new ArrayList<VexContext>();
		public TerminalNode EQUAL() { return getToken(PLpgSQLParser.EQUAL, 0); }
		public List<Indirection_identifierContext> indirection_identifier() {
			return getRuleContexts(Indirection_identifierContext.class);
		}
		public Indirection_identifierContext indirection_identifier(int i) {
			return getRuleContext(Indirection_identifierContext.class,i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(PLpgSQLParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(PLpgSQLParser.DEFAULT, i);
		}
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PLpgSQLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PLpgSQLParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PLpgSQLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PLpgSQLParser.RIGHT_PAREN, i);
		}
		public Table_subqueryContext table_subquery() {
			return getRuleContext(Table_subqueryContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public TerminalNode ROW() { return getToken(PLpgSQLParser.ROW, 0); }
		public Update_setContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_set; }
	}

	public final Update_setContext update_set() throws RecognitionException {
		Update_setContext _localctx = new Update_setContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_update_set);
		int _la;
		try {
			setState(7059);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BY:
			case CACHE:
			case CALL:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COLUMNS:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONFLICT:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CUBE:
			case CURRENT:
			case CURSOR:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DEPENDS:
			case DETACH:
			case DICTIONARY:
			case DISABLE:
			case DISCARD:
			case DOCUMENT:
			case DOMAIN:
			case DOUBLE:
			case DROP:
			case EACH:
			case ENABLE:
			case ENCODING:
			case ENCRYPTED:
			case ENUM:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GENERATED:
			case GLOBAL:
			case GRANTED:
			case GROUPS:
			case HANDLER:
			case HEADER:
			case HOLD:
			case HOUR:
			case IDENTITY:
			case IF:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT:
			case IMPORT:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCKED:
			case LOGGED:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case METHOD:
			case MINUTE:
			case MINVALUE:
			case MODE:
			case MONTH:
			case MOVE:
			case NAME:
			case NAMES:
			case NEW:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS:
			case OBJECT:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OVER:
			case OVERRIDING:
			case OWNED:
			case OWNER:
			case PARALLEL:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POLICY:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROCEDURES:
			case PROGRAM:
			case PUBLICATION:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINES:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMAS:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SKIP_:
			case SNAPSHOT:
			case SQL:
			case STABLE:
			case STANDALONE:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STORED:
			case STRICT:
			case STRIP:
			case SUBSCRIPTION:
			case SUPPORT:
			case SYSID:
			case SYSTEM:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT:
			case TIES:
			case TRANSACTION:
			case TRANSFORM:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE:
			case VARYING:
			case VERSION:
			case VIEW:
			case VIEWS:
			case VOLATILE:
			case WHITESPACE:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML:
			case YEAR:
			case YES:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL:
			case EXISTS:
			case EXTRACT:
			case FLOAT:
			case GREATEST:
			case GROUPING:
			case INOUT:
			case INT:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case ALIGNMENT:
			case BASETYPE:
			case BUFFERS:
			case BYPASSRLS:
			case CANONICAL:
			case CATEGORY:
			case COLLATABLE:
			case COMBINEFUNC:
			case COMMUTATOR:
			case CONNECT:
			case COSTS:
			case CREATEDB:
			case CREATEROLE:
			case DESERIALFUNC:
			case DETERMINISTIC:
			case DISABLE_PAGE_SKIPPING:
			case ELEMENT:
			case EXTENDED:
			case FINALFUNC:
			case FINALFUNC_EXTRA:
			case FINALFUNC_MODIFY:
			case FORCE_NOT_NULL:
			case FORCE_NULL:
			case FORCE_QUOTE:
			case FORMAT:
			case GETTOKEN:
			case HASH:
			case HASHES:
			case HEADLINE:
			case HYPOTHETICAL:
			case INDEX_CLEANUP:
			case INIT:
			case INITCOND:
			case INTERNALLENGTH:
			case JSON:
			case LC_COLLATE:
			case LC_CTYPE:
			case LEFTARG:
			case LEXIZE:
			case LEXTYPES:
			case LIST:
			case LOCALE:
			case LOGIN:
			case MAIN:
			case MERGES:
			case MFINALFUNC:
			case MFINALFUNC_EXTRA:
			case MFINALFUNC_MODIFY:
			case MINITCOND:
			case MINVFUNC:
			case MODULUS:
			case MSFUNC:
			case MSSPACE:
			case MSTYPE:
			case NEGATOR:
			case NOBYPASSRLS:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOREPLICATION:
			case NOSUPERUSER:
			case OUTPUT:
			case PASSEDBYVALUE:
			case PATH:
			case PERMISSIVE:
			case PLAIN:
			case PREFERRED:
			case PROVIDER:
			case READ_ONLY:
			case READ_WRITE:
			case RECEIVE:
			case REMAINDER:
			case REPLICATION:
			case RESTRICTED:
			case RESTRICTIVE:
			case RIGHTARG:
			case SAFE:
			case SEND:
			case SERIALFUNC:
			case SETTINGS:
			case SFUNC:
			case SHAREABLE:
			case SKIP_LOCKED:
			case SORTOP:
			case SSPACE:
			case STYPE:
			case SUBTYPE_DIFF:
			case SUBTYPE_OPCLASS:
			case SUBTYPE:
			case SUMMARY:
			case SUPERUSER:
			case TIMING:
			case TYPMOD_IN:
			case TYPMOD_OUT:
			case UNSAFE:
			case USAGE:
			case VARIABLE:
			case YAML:
			case ALIAS:
			case ASSERT:
			case CONSTANT:
			case DATATYPE:
			case DEBUG:
			case DETAIL:
			case DIAGNOSTICS:
			case ELSEIF:
			case ELSIF:
			case ERRCODE:
			case EXIT:
			case EXCEPTION:
			case FOREACH:
			case GET:
			case HINT:
			case INFO:
			case LOG:
			case LOOP:
			case MESSAGE:
			case NOTICE:
			case OPEN:
			case PERFORM:
			case QUERY:
			case RAISE:
			case RECORD:
			case RETURN:
			case REVERSE:
			case ROWTYPE:
			case SLICE:
			case SQLSTATE:
			case STACKED:
			case WARNING:
			case WHILE:
			case Identifier:
			case QuotedIdentifier:
				enterOuterAlt(_localctx, 1);
				{
				setState(7020);
				((Update_setContext)_localctx).indirection_identifier = indirection_identifier();
				((Update_setContext)_localctx).column.add(((Update_setContext)_localctx).indirection_identifier);
				setState(7021);
				match(EQUAL);
				setState(7024);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BY:
				case CACHE:
				case CALL:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COLUMNS:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONFLICT:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CUBE:
				case CURRENT:
				case CURSOR:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DEPENDS:
				case DETACH:
				case DICTIONARY:
				case DISABLE:
				case DISCARD:
				case DOCUMENT:
				case DOMAIN:
				case DOUBLE:
				case DROP:
				case EACH:
				case ENABLE:
				case ENCODING:
				case ENCRYPTED:
				case ENUM:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GENERATED:
				case GLOBAL:
				case GRANTED:
				case GROUPS:
				case HANDLER:
				case HEADER:
				case HOLD:
				case HOUR:
				case IDENTITY:
				case IF:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT:
				case IMPORT:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCKED:
				case LOGGED:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case METHOD:
				case MINUTE:
				case MINVALUE:
				case MODE:
				case MONTH:
				case MOVE:
				case NAME:
				case NAMES:
				case NEW:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS:
				case OBJECT:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDINALITY:
				case OTHERS:
				case OVER:
				case OVERRIDING:
				case OWNED:
				case OWNER:
				case PARALLEL:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case POLICY:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROCEDURES:
				case PROGRAM:
				case PUBLICATION:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINES:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMAS:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SKIP_:
				case SNAPSHOT:
				case SQL:
				case STABLE:
				case STANDALONE:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STORED:
				case STRICT:
				case STRIP:
				case SUBSCRIPTION:
				case SUPPORT:
				case SYSID:
				case SYSTEM:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT:
				case TIES:
				case TRANSACTION:
				case TRANSFORM:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case TYPES:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VALUE:
				case VARYING:
				case VERSION:
				case VIEW:
				case VIEWS:
				case VOLATILE:
				case WHITESPACE:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML:
				case YEAR:
				case YES:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN:
				case CHAR:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL:
				case EXISTS:
				case EXTRACT:
				case FLOAT:
				case GREATEST:
				case GROUPING:
				case INOUT:
				case INT:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OUT:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case AUTHORIZATION:
				case BINARY:
				case COLLATION:
				case CONCURRENTLY:
				case CROSS:
				case CURRENT_SCHEMA:
				case FREEZE:
				case FULL:
				case ILIKE:
				case INNER:
				case IS:
				case ISNULL:
				case JOIN:
				case LEFT:
				case LIKE:
				case NATURAL:
				case NOTNULL:
				case OUTER:
				case OVERLAPS:
				case RIGHT:
				case SIMILAR:
				case TABLESAMPLE:
				case VERBOSE:
				case ALL:
				case ANY:
				case ARRAY:
				case CASE:
				case CAST:
				case CURRENT_CATALOG:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case FALSE:
				case LOCALTIME:
				case LOCALTIMESTAMP:
				case NOT:
				case NULL:
				case ON:
				case SESSION_USER:
				case SOME:
				case TRUE:
				case USER:
				case ALIGNMENT:
				case BASETYPE:
				case BUFFERS:
				case BYPASSRLS:
				case CANONICAL:
				case CATEGORY:
				case COLLATABLE:
				case COMBINEFUNC:
				case COMMUTATOR:
				case CONNECT:
				case COSTS:
				case CREATEDB:
				case CREATEROLE:
				case DESERIALFUNC:
				case DETERMINISTIC:
				case DISABLE_PAGE_SKIPPING:
				case ELEMENT:
				case EXTENDED:
				case FINALFUNC:
				case FINALFUNC_EXTRA:
				case FINALFUNC_MODIFY:
				case FORCE_NOT_NULL:
				case FORCE_NULL:
				case FORCE_QUOTE:
				case FORMAT:
				case GETTOKEN:
				case HASH:
				case HASHES:
				case HEADLINE:
				case HYPOTHETICAL:
				case INDEX_CLEANUP:
				case INIT:
				case INITCOND:
				case INTERNALLENGTH:
				case JSON:
				case LC_COLLATE:
				case LC_CTYPE:
				case LEFTARG:
				case LEXIZE:
				case LEXTYPES:
				case LIST:
				case LOCALE:
				case LOGIN:
				case MAIN:
				case MERGES:
				case MFINALFUNC:
				case MFINALFUNC_EXTRA:
				case MFINALFUNC_MODIFY:
				case MINITCOND:
				case MINVFUNC:
				case MODULUS:
				case MSFUNC:
				case MSSPACE:
				case MSTYPE:
				case NEGATOR:
				case NOBYPASSRLS:
				case NOCREATEDB:
				case NOCREATEROLE:
				case NOINHERIT:
				case NOLOGIN:
				case NOREPLICATION:
				case NOSUPERUSER:
				case OUTPUT:
				case PASSEDBYVALUE:
				case PATH:
				case PERMISSIVE:
				case PLAIN:
				case PREFERRED:
				case PROVIDER:
				case READ_ONLY:
				case READ_WRITE:
				case RECEIVE:
				case REMAINDER:
				case REPLICATION:
				case RESTRICTED:
				case RESTRICTIVE:
				case RIGHTARG:
				case SAFE:
				case SEND:
				case SERIALFUNC:
				case SETTINGS:
				case SFUNC:
				case SHAREABLE:
				case SKIP_LOCKED:
				case SORTOP:
				case SSPACE:
				case STYPE:
				case SUBTYPE_DIFF:
				case SUBTYPE_OPCLASS:
				case SUBTYPE:
				case SUMMARY:
				case SUPERUSER:
				case TIMING:
				case TYPMOD_IN:
				case TYPMOD_OUT:
				case UNSAFE:
				case USAGE:
				case VARIABLE:
				case YAML:
				case ALIAS:
				case ASSERT:
				case CONSTANT:
				case DATATYPE:
				case DEBUG:
				case DETAIL:
				case DIAGNOSTICS:
				case ELSEIF:
				case ELSIF:
				case ERRCODE:
				case EXIT:
				case EXCEPTION:
				case FOREACH:
				case GET:
				case HINT:
				case INFO:
				case LOG:
				case LOOP:
				case MESSAGE:
				case NOTICE:
				case OPEN:
				case PERFORM:
				case QUERY:
				case RAISE:
				case RECORD:
				case RETURN:
				case REVERSE:
				case ROWTYPE:
				case SLICE:
				case SQLSTATE:
				case STACKED:
				case WARNING:
				case WHILE:
				case LEFT_PAREN:
				case PLUS:
				case MINUS:
				case MULTIPLY:
				case LESS_LESS:
				case GREATER_GREATER:
				case HASH_SIGN:
				case OP_CHARS:
				case NUMBER_LITERAL:
				case REAL_NUMBER:
				case DOLLAR_NUMBER:
				case Identifier:
				case QuotedIdentifier:
				case Character_String_Literal:
				case BeginDollarStringConstant:
					{
					setState(7022);
					((Update_setContext)_localctx).vex = vex(0);
					((Update_setContext)_localctx).value.add(((Update_setContext)_localctx).vex);
					}
					break;
				case DEFAULT:
					{
					setState(7023);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(7026);
				match(LEFT_PAREN);
				setState(7027);
				((Update_setContext)_localctx).indirection_identifier = indirection_identifier();
				((Update_setContext)_localctx).column.add(((Update_setContext)_localctx).indirection_identifier);
				setState(7032);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7028);
					match(COMMA);
					setState(7029);
					((Update_setContext)_localctx).indirection_identifier = indirection_identifier();
					((Update_setContext)_localctx).column.add(((Update_setContext)_localctx).indirection_identifier);
					}
					}
					setState(7034);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7035);
				match(RIGHT_PAREN);
				setState(7036);
				match(EQUAL);
				setState(7038);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROW) {
					{
					setState(7037);
					match(ROW);
					}
				}

				setState(7057);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,937,_ctx) ) {
				case 1:
					{
					setState(7040);
					match(LEFT_PAREN);
					setState(7043);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ABORT:
					case ABSOLUTE:
					case ACCESS:
					case ACTION:
					case ADD:
					case ADMIN:
					case AFTER:
					case AGGREGATE:
					case ALSO:
					case ALTER:
					case ALWAYS:
					case ASSERTION:
					case ASSIGNMENT:
					case AT:
					case ATTACH:
					case ATTRIBUTE:
					case BACKWARD:
					case BEFORE:
					case BEGIN:
					case BY:
					case CACHE:
					case CALL:
					case CALLED:
					case CASCADE:
					case CASCADED:
					case CATALOG:
					case CHAIN:
					case CHARACTERISTICS:
					case CHECKPOINT:
					case CLASS:
					case CLOSE:
					case CLUSTER:
					case COLUMNS:
					case COMMENT:
					case COMMENTS:
					case COMMIT:
					case COMMITTED:
					case CONFIGURATION:
					case CONFLICT:
					case CONNECTION:
					case CONSTRAINTS:
					case CONTENT:
					case CONTINUE:
					case CONVERSION:
					case COPY:
					case COST:
					case CSV:
					case CUBE:
					case CURRENT:
					case CURSOR:
					case CYCLE:
					case DATA:
					case DATABASE:
					case DAY:
					case DEALLOCATE:
					case DECLARE:
					case DEFAULTS:
					case DEFERRED:
					case DEFINER:
					case DELETE:
					case DELIMITER:
					case DELIMITERS:
					case DEPENDS:
					case DETACH:
					case DICTIONARY:
					case DISABLE:
					case DISCARD:
					case DOCUMENT:
					case DOMAIN:
					case DOUBLE:
					case DROP:
					case EACH:
					case ENABLE:
					case ENCODING:
					case ENCRYPTED:
					case ENUM:
					case ESCAPE:
					case EVENT:
					case EXCLUDE:
					case EXCLUDING:
					case EXCLUSIVE:
					case EXECUTE:
					case EXPLAIN:
					case EXTENSION:
					case EXTERNAL:
					case FAMILY:
					case FILTER:
					case FIRST:
					case FOLLOWING:
					case FORCE:
					case FORWARD:
					case FUNCTION:
					case FUNCTIONS:
					case GENERATED:
					case GLOBAL:
					case GRANTED:
					case GROUPS:
					case HANDLER:
					case HEADER:
					case HOLD:
					case HOUR:
					case IDENTITY:
					case IF:
					case IMMEDIATE:
					case IMMUTABLE:
					case IMPLICIT:
					case IMPORT:
					case INCLUDE:
					case INCLUDING:
					case INCREMENT:
					case INDEX:
					case INDEXES:
					case INHERIT:
					case INHERITS:
					case INLINE:
					case INPUT:
					case INSENSITIVE:
					case INSERT:
					case INSTEAD:
					case INVOKER:
					case ISOLATION:
					case KEY:
					case LABEL:
					case LANGUAGE:
					case LARGE:
					case LAST:
					case LEAKPROOF:
					case LEVEL:
					case LISTEN:
					case LOAD:
					case LOCAL:
					case LOCATION:
					case LOCK:
					case LOCKED:
					case LOGGED:
					case MAPPING:
					case MATCH:
					case MATERIALIZED:
					case MAXVALUE:
					case METHOD:
					case MINUTE:
					case MINVALUE:
					case MODE:
					case MONTH:
					case MOVE:
					case NAME:
					case NAMES:
					case NEW:
					case NEXT:
					case NO:
					case NOTHING:
					case NOTIFY:
					case NOWAIT:
					case NULLS:
					case OBJECT:
					case OF:
					case OFF:
					case OIDS:
					case OLD:
					case OPERATOR:
					case OPTION:
					case OPTIONS:
					case ORDINALITY:
					case OTHERS:
					case OVER:
					case OVERRIDING:
					case OWNED:
					case OWNER:
					case PARALLEL:
					case PARSER:
					case PARTIAL:
					case PARTITION:
					case PASSING:
					case PASSWORD:
					case PLANS:
					case POLICY:
					case PRECEDING:
					case PREPARE:
					case PREPARED:
					case PRESERVE:
					case PRIOR:
					case PRIVILEGES:
					case PROCEDURAL:
					case PROCEDURE:
					case PROCEDURES:
					case PROGRAM:
					case PUBLICATION:
					case QUOTE:
					case RANGE:
					case READ:
					case REASSIGN:
					case RECHECK:
					case RECURSIVE:
					case REF:
					case REFERENCING:
					case REFRESH:
					case REINDEX:
					case RELATIVE:
					case RELEASE:
					case RENAME:
					case REPEATABLE:
					case REPLACE:
					case REPLICA:
					case RESET:
					case RESTART:
					case RESTRICT:
					case RETURNS:
					case REVOKE:
					case ROLE:
					case ROLLBACK:
					case ROLLUP:
					case ROUTINE:
					case ROUTINES:
					case ROWS:
					case RULE:
					case SAVEPOINT:
					case SCHEMA:
					case SCHEMAS:
					case SCROLL:
					case SEARCH:
					case SECOND:
					case SECURITY:
					case SEQUENCE:
					case SEQUENCES:
					case SERIALIZABLE:
					case SERVER:
					case SESSION:
					case SET:
					case SETS:
					case SHARE:
					case SHOW:
					case SIMPLE:
					case SKIP_:
					case SNAPSHOT:
					case SQL:
					case STABLE:
					case STANDALONE:
					case START:
					case STATEMENT:
					case STATISTICS:
					case STDIN:
					case STDOUT:
					case STORAGE:
					case STORED:
					case STRICT:
					case STRIP:
					case SUBSCRIPTION:
					case SUPPORT:
					case SYSID:
					case SYSTEM:
					case TABLES:
					case TABLESPACE:
					case TEMP:
					case TEMPLATE:
					case TEMPORARY:
					case TEXT:
					case TIES:
					case TRANSACTION:
					case TRANSFORM:
					case TRIGGER:
					case TRUNCATE:
					case TRUSTED:
					case TYPE:
					case TYPES:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNENCRYPTED:
					case UNKNOWN:
					case UNLISTEN:
					case UNLOGGED:
					case UNTIL:
					case UPDATE:
					case VACUUM:
					case VALID:
					case VALIDATE:
					case VALIDATOR:
					case VALUE:
					case VARYING:
					case VERSION:
					case VIEW:
					case VIEWS:
					case VOLATILE:
					case WHITESPACE:
					case WITHIN:
					case WITHOUT:
					case WORK:
					case WRAPPER:
					case WRITE:
					case XML:
					case YEAR:
					case YES:
					case ZONE:
					case BETWEEN:
					case BIGINT:
					case BIT:
					case BOOLEAN:
					case CHAR:
					case CHARACTER:
					case COALESCE:
					case DEC:
					case DECIMAL:
					case EXISTS:
					case EXTRACT:
					case FLOAT:
					case GREATEST:
					case GROUPING:
					case INOUT:
					case INT:
					case INTEGER:
					case INTERVAL:
					case LEAST:
					case NATIONAL:
					case NCHAR:
					case NONE:
					case NULLIF:
					case NUMERIC:
					case OUT:
					case OVERLAY:
					case POSITION:
					case PRECISION:
					case REAL:
					case ROW:
					case SETOF:
					case SMALLINT:
					case SUBSTRING:
					case TIME:
					case TIMESTAMP:
					case TREAT:
					case TRIM:
					case VALUES:
					case VARCHAR:
					case XMLATTRIBUTES:
					case XMLCONCAT:
					case XMLELEMENT:
					case XMLEXISTS:
					case XMLFOREST:
					case XMLNAMESPACES:
					case XMLPARSE:
					case XMLPI:
					case XMLROOT:
					case XMLSERIALIZE:
					case XMLTABLE:
					case AUTHORIZATION:
					case BINARY:
					case COLLATION:
					case CONCURRENTLY:
					case CROSS:
					case CURRENT_SCHEMA:
					case FREEZE:
					case FULL:
					case ILIKE:
					case INNER:
					case IS:
					case ISNULL:
					case JOIN:
					case LEFT:
					case LIKE:
					case NATURAL:
					case NOTNULL:
					case OUTER:
					case OVERLAPS:
					case RIGHT:
					case SIMILAR:
					case TABLESAMPLE:
					case VERBOSE:
					case ALL:
					case ANY:
					case ARRAY:
					case CASE:
					case CAST:
					case CURRENT_CATALOG:
					case CURRENT_DATE:
					case CURRENT_TIME:
					case CURRENT_TIMESTAMP:
					case CURRENT_USER:
					case FALSE:
					case LOCALTIME:
					case LOCALTIMESTAMP:
					case NOT:
					case NULL:
					case ON:
					case SESSION_USER:
					case SOME:
					case TRUE:
					case USER:
					case ALIGNMENT:
					case BASETYPE:
					case BUFFERS:
					case BYPASSRLS:
					case CANONICAL:
					case CATEGORY:
					case COLLATABLE:
					case COMBINEFUNC:
					case COMMUTATOR:
					case CONNECT:
					case COSTS:
					case CREATEDB:
					case CREATEROLE:
					case DESERIALFUNC:
					case DETERMINISTIC:
					case DISABLE_PAGE_SKIPPING:
					case ELEMENT:
					case EXTENDED:
					case FINALFUNC:
					case FINALFUNC_EXTRA:
					case FINALFUNC_MODIFY:
					case FORCE_NOT_NULL:
					case FORCE_NULL:
					case FORCE_QUOTE:
					case FORMAT:
					case GETTOKEN:
					case HASH:
					case HASHES:
					case HEADLINE:
					case HYPOTHETICAL:
					case INDEX_CLEANUP:
					case INIT:
					case INITCOND:
					case INTERNALLENGTH:
					case JSON:
					case LC_COLLATE:
					case LC_CTYPE:
					case LEFTARG:
					case LEXIZE:
					case LEXTYPES:
					case LIST:
					case LOCALE:
					case LOGIN:
					case MAIN:
					case MERGES:
					case MFINALFUNC:
					case MFINALFUNC_EXTRA:
					case MFINALFUNC_MODIFY:
					case MINITCOND:
					case MINVFUNC:
					case MODULUS:
					case MSFUNC:
					case MSSPACE:
					case MSTYPE:
					case NEGATOR:
					case NOBYPASSRLS:
					case NOCREATEDB:
					case NOCREATEROLE:
					case NOINHERIT:
					case NOLOGIN:
					case NOREPLICATION:
					case NOSUPERUSER:
					case OUTPUT:
					case PASSEDBYVALUE:
					case PATH:
					case PERMISSIVE:
					case PLAIN:
					case PREFERRED:
					case PROVIDER:
					case READ_ONLY:
					case READ_WRITE:
					case RECEIVE:
					case REMAINDER:
					case REPLICATION:
					case RESTRICTED:
					case RESTRICTIVE:
					case RIGHTARG:
					case SAFE:
					case SEND:
					case SERIALFUNC:
					case SETTINGS:
					case SFUNC:
					case SHAREABLE:
					case SKIP_LOCKED:
					case SORTOP:
					case SSPACE:
					case STYPE:
					case SUBTYPE_DIFF:
					case SUBTYPE_OPCLASS:
					case SUBTYPE:
					case SUMMARY:
					case SUPERUSER:
					case TIMING:
					case TYPMOD_IN:
					case TYPMOD_OUT:
					case UNSAFE:
					case USAGE:
					case VARIABLE:
					case YAML:
					case ALIAS:
					case ASSERT:
					case CONSTANT:
					case DATATYPE:
					case DEBUG:
					case DETAIL:
					case DIAGNOSTICS:
					case ELSEIF:
					case ELSIF:
					case ERRCODE:
					case EXIT:
					case EXCEPTION:
					case FOREACH:
					case GET:
					case HINT:
					case INFO:
					case LOG:
					case LOOP:
					case MESSAGE:
					case NOTICE:
					case OPEN:
					case PERFORM:
					case QUERY:
					case RAISE:
					case RECORD:
					case RETURN:
					case REVERSE:
					case ROWTYPE:
					case SLICE:
					case SQLSTATE:
					case STACKED:
					case WARNING:
					case WHILE:
					case LEFT_PAREN:
					case PLUS:
					case MINUS:
					case MULTIPLY:
					case LESS_LESS:
					case GREATER_GREATER:
					case HASH_SIGN:
					case OP_CHARS:
					case NUMBER_LITERAL:
					case REAL_NUMBER:
					case DOLLAR_NUMBER:
					case Identifier:
					case QuotedIdentifier:
					case Character_String_Literal:
					case BeginDollarStringConstant:
						{
						setState(7041);
						((Update_setContext)_localctx).vex = vex(0);
						((Update_setContext)_localctx).value.add(((Update_setContext)_localctx).vex);
						}
						break;
					case DEFAULT:
						{
						setState(7042);
						match(DEFAULT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(7052);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(7045);
						match(COMMA);
						setState(7048);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case ABORT:
						case ABSOLUTE:
						case ACCESS:
						case ACTION:
						case ADD:
						case ADMIN:
						case AFTER:
						case AGGREGATE:
						case ALSO:
						case ALTER:
						case ALWAYS:
						case ASSERTION:
						case ASSIGNMENT:
						case AT:
						case ATTACH:
						case ATTRIBUTE:
						case BACKWARD:
						case BEFORE:
						case BEGIN:
						case BY:
						case CACHE:
						case CALL:
						case CALLED:
						case CASCADE:
						case CASCADED:
						case CATALOG:
						case CHAIN:
						case CHARACTERISTICS:
						case CHECKPOINT:
						case CLASS:
						case CLOSE:
						case CLUSTER:
						case COLUMNS:
						case COMMENT:
						case COMMENTS:
						case COMMIT:
						case COMMITTED:
						case CONFIGURATION:
						case CONFLICT:
						case CONNECTION:
						case CONSTRAINTS:
						case CONTENT:
						case CONTINUE:
						case CONVERSION:
						case COPY:
						case COST:
						case CSV:
						case CUBE:
						case CURRENT:
						case CURSOR:
						case CYCLE:
						case DATA:
						case DATABASE:
						case DAY:
						case DEALLOCATE:
						case DECLARE:
						case DEFAULTS:
						case DEFERRED:
						case DEFINER:
						case DELETE:
						case DELIMITER:
						case DELIMITERS:
						case DEPENDS:
						case DETACH:
						case DICTIONARY:
						case DISABLE:
						case DISCARD:
						case DOCUMENT:
						case DOMAIN:
						case DOUBLE:
						case DROP:
						case EACH:
						case ENABLE:
						case ENCODING:
						case ENCRYPTED:
						case ENUM:
						case ESCAPE:
						case EVENT:
						case EXCLUDE:
						case EXCLUDING:
						case EXCLUSIVE:
						case EXECUTE:
						case EXPLAIN:
						case EXTENSION:
						case EXTERNAL:
						case FAMILY:
						case FILTER:
						case FIRST:
						case FOLLOWING:
						case FORCE:
						case FORWARD:
						case FUNCTION:
						case FUNCTIONS:
						case GENERATED:
						case GLOBAL:
						case GRANTED:
						case GROUPS:
						case HANDLER:
						case HEADER:
						case HOLD:
						case HOUR:
						case IDENTITY:
						case IF:
						case IMMEDIATE:
						case IMMUTABLE:
						case IMPLICIT:
						case IMPORT:
						case INCLUDE:
						case INCLUDING:
						case INCREMENT:
						case INDEX:
						case INDEXES:
						case INHERIT:
						case INHERITS:
						case INLINE:
						case INPUT:
						case INSENSITIVE:
						case INSERT:
						case INSTEAD:
						case INVOKER:
						case ISOLATION:
						case KEY:
						case LABEL:
						case LANGUAGE:
						case LARGE:
						case LAST:
						case LEAKPROOF:
						case LEVEL:
						case LISTEN:
						case LOAD:
						case LOCAL:
						case LOCATION:
						case LOCK:
						case LOCKED:
						case LOGGED:
						case MAPPING:
						case MATCH:
						case MATERIALIZED:
						case MAXVALUE:
						case METHOD:
						case MINUTE:
						case MINVALUE:
						case MODE:
						case MONTH:
						case MOVE:
						case NAME:
						case NAMES:
						case NEW:
						case NEXT:
						case NO:
						case NOTHING:
						case NOTIFY:
						case NOWAIT:
						case NULLS:
						case OBJECT:
						case OF:
						case OFF:
						case OIDS:
						case OLD:
						case OPERATOR:
						case OPTION:
						case OPTIONS:
						case ORDINALITY:
						case OTHERS:
						case OVER:
						case OVERRIDING:
						case OWNED:
						case OWNER:
						case PARALLEL:
						case PARSER:
						case PARTIAL:
						case PARTITION:
						case PASSING:
						case PASSWORD:
						case PLANS:
						case POLICY:
						case PRECEDING:
						case PREPARE:
						case PREPARED:
						case PRESERVE:
						case PRIOR:
						case PRIVILEGES:
						case PROCEDURAL:
						case PROCEDURE:
						case PROCEDURES:
						case PROGRAM:
						case PUBLICATION:
						case QUOTE:
						case RANGE:
						case READ:
						case REASSIGN:
						case RECHECK:
						case RECURSIVE:
						case REF:
						case REFERENCING:
						case REFRESH:
						case REINDEX:
						case RELATIVE:
						case RELEASE:
						case RENAME:
						case REPEATABLE:
						case REPLACE:
						case REPLICA:
						case RESET:
						case RESTART:
						case RESTRICT:
						case RETURNS:
						case REVOKE:
						case ROLE:
						case ROLLBACK:
						case ROLLUP:
						case ROUTINE:
						case ROUTINES:
						case ROWS:
						case RULE:
						case SAVEPOINT:
						case SCHEMA:
						case SCHEMAS:
						case SCROLL:
						case SEARCH:
						case SECOND:
						case SECURITY:
						case SEQUENCE:
						case SEQUENCES:
						case SERIALIZABLE:
						case SERVER:
						case SESSION:
						case SET:
						case SETS:
						case SHARE:
						case SHOW:
						case SIMPLE:
						case SKIP_:
						case SNAPSHOT:
						case SQL:
						case STABLE:
						case STANDALONE:
						case START:
						case STATEMENT:
						case STATISTICS:
						case STDIN:
						case STDOUT:
						case STORAGE:
						case STORED:
						case STRICT:
						case STRIP:
						case SUBSCRIPTION:
						case SUPPORT:
						case SYSID:
						case SYSTEM:
						case TABLES:
						case TABLESPACE:
						case TEMP:
						case TEMPLATE:
						case TEMPORARY:
						case TEXT:
						case TIES:
						case TRANSACTION:
						case TRANSFORM:
						case TRIGGER:
						case TRUNCATE:
						case TRUSTED:
						case TYPE:
						case TYPES:
						case UNBOUNDED:
						case UNCOMMITTED:
						case UNENCRYPTED:
						case UNKNOWN:
						case UNLISTEN:
						case UNLOGGED:
						case UNTIL:
						case UPDATE:
						case VACUUM:
						case VALID:
						case VALIDATE:
						case VALIDATOR:
						case VALUE:
						case VARYING:
						case VERSION:
						case VIEW:
						case VIEWS:
						case VOLATILE:
						case WHITESPACE:
						case WITHIN:
						case WITHOUT:
						case WORK:
						case WRAPPER:
						case WRITE:
						case XML:
						case YEAR:
						case YES:
						case ZONE:
						case BETWEEN:
						case BIGINT:
						case BIT:
						case BOOLEAN:
						case CHAR:
						case CHARACTER:
						case COALESCE:
						case DEC:
						case DECIMAL:
						case EXISTS:
						case EXTRACT:
						case FLOAT:
						case GREATEST:
						case GROUPING:
						case INOUT:
						case INT:
						case INTEGER:
						case INTERVAL:
						case LEAST:
						case NATIONAL:
						case NCHAR:
						case NONE:
						case NULLIF:
						case NUMERIC:
						case OUT:
						case OVERLAY:
						case POSITION:
						case PRECISION:
						case REAL:
						case ROW:
						case SETOF:
						case SMALLINT:
						case SUBSTRING:
						case TIME:
						case TIMESTAMP:
						case TREAT:
						case TRIM:
						case VALUES:
						case VARCHAR:
						case XMLATTRIBUTES:
						case XMLCONCAT:
						case XMLELEMENT:
						case XMLEXISTS:
						case XMLFOREST:
						case XMLNAMESPACES:
						case XMLPARSE:
						case XMLPI:
						case XMLROOT:
						case XMLSERIALIZE:
						case XMLTABLE:
						case AUTHORIZATION:
						case BINARY:
						case COLLATION:
						case CONCURRENTLY:
						case CROSS:
						case CURRENT_SCHEMA:
						case FREEZE:
						case FULL:
						case ILIKE:
						case INNER:
						case IS:
						case ISNULL:
						case JOIN:
						case LEFT:
						case LIKE:
						case NATURAL:
						case NOTNULL:
						case OUTER:
						case OVERLAPS:
						case RIGHT:
						case SIMILAR:
						case TABLESAMPLE:
						case VERBOSE:
						case ALL:
						case ANY:
						case ARRAY:
						case CASE:
						case CAST:
						case CURRENT_CATALOG:
						case CURRENT_DATE:
						case CURRENT_TIME:
						case CURRENT_TIMESTAMP:
						case CURRENT_USER:
						case FALSE:
						case LOCALTIME:
						case LOCALTIMESTAMP:
						case NOT:
						case NULL:
						case ON:
						case SESSION_USER:
						case SOME:
						case TRUE:
						case USER:
						case ALIGNMENT:
						case BASETYPE:
						case BUFFERS:
						case BYPASSRLS:
						case CANONICAL:
						case CATEGORY:
						case COLLATABLE:
						case COMBINEFUNC:
						case COMMUTATOR:
						case CONNECT:
						case COSTS:
						case CREATEDB:
						case CREATEROLE:
						case DESERIALFUNC:
						case DETERMINISTIC:
						case DISABLE_PAGE_SKIPPING:
						case ELEMENT:
						case EXTENDED:
						case FINALFUNC:
						case FINALFUNC_EXTRA:
						case FINALFUNC_MODIFY:
						case FORCE_NOT_NULL:
						case FORCE_NULL:
						case FORCE_QUOTE:
						case FORMAT:
						case GETTOKEN:
						case HASH:
						case HASHES:
						case HEADLINE:
						case HYPOTHETICAL:
						case INDEX_CLEANUP:
						case INIT:
						case INITCOND:
						case INTERNALLENGTH:
						case JSON:
						case LC_COLLATE:
						case LC_CTYPE:
						case LEFTARG:
						case LEXIZE:
						case LEXTYPES:
						case LIST:
						case LOCALE:
						case LOGIN:
						case MAIN:
						case MERGES:
						case MFINALFUNC:
						case MFINALFUNC_EXTRA:
						case MFINALFUNC_MODIFY:
						case MINITCOND:
						case MINVFUNC:
						case MODULUS:
						case MSFUNC:
						case MSSPACE:
						case MSTYPE:
						case NEGATOR:
						case NOBYPASSRLS:
						case NOCREATEDB:
						case NOCREATEROLE:
						case NOINHERIT:
						case NOLOGIN:
						case NOREPLICATION:
						case NOSUPERUSER:
						case OUTPUT:
						case PASSEDBYVALUE:
						case PATH:
						case PERMISSIVE:
						case PLAIN:
						case PREFERRED:
						case PROVIDER:
						case READ_ONLY:
						case READ_WRITE:
						case RECEIVE:
						case REMAINDER:
						case REPLICATION:
						case RESTRICTED:
						case RESTRICTIVE:
						case RIGHTARG:
						case SAFE:
						case SEND:
						case SERIALFUNC:
						case SETTINGS:
						case SFUNC:
						case SHAREABLE:
						case SKIP_LOCKED:
						case SORTOP:
						case SSPACE:
						case STYPE:
						case SUBTYPE_DIFF:
						case SUBTYPE_OPCLASS:
						case SUBTYPE:
						case SUMMARY:
						case SUPERUSER:
						case TIMING:
						case TYPMOD_IN:
						case TYPMOD_OUT:
						case UNSAFE:
						case USAGE:
						case VARIABLE:
						case YAML:
						case ALIAS:
						case ASSERT:
						case CONSTANT:
						case DATATYPE:
						case DEBUG:
						case DETAIL:
						case DIAGNOSTICS:
						case ELSEIF:
						case ELSIF:
						case ERRCODE:
						case EXIT:
						case EXCEPTION:
						case FOREACH:
						case GET:
						case HINT:
						case INFO:
						case LOG:
						case LOOP:
						case MESSAGE:
						case NOTICE:
						case OPEN:
						case PERFORM:
						case QUERY:
						case RAISE:
						case RECORD:
						case RETURN:
						case REVERSE:
						case ROWTYPE:
						case SLICE:
						case SQLSTATE:
						case STACKED:
						case WARNING:
						case WHILE:
						case LEFT_PAREN:
						case PLUS:
						case MINUS:
						case MULTIPLY:
						case LESS_LESS:
						case GREATER_GREATER:
						case HASH_SIGN:
						case OP_CHARS:
						case NUMBER_LITERAL:
						case REAL_NUMBER:
						case DOLLAR_NUMBER:
						case Identifier:
						case QuotedIdentifier:
						case Character_String_Literal:
						case BeginDollarStringConstant:
							{
							setState(7046);
							((Update_setContext)_localctx).vex = vex(0);
							((Update_setContext)_localctx).value.add(((Update_setContext)_localctx).vex);
							}
							break;
						case DEFAULT:
							{
							setState(7047);
							match(DEFAULT);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						}
						setState(7054);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(7055);
					match(RIGHT_PAREN);
					}
					break;
				case 2:
					{
					setState(7056);
					table_subquery();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Notify_stmtContext extends ParserRuleContext {
		public IdentifierContext channel;
		public Character_stringContext payload;
		public TerminalNode NOTIFY() { return getToken(PLpgSQLParser.NOTIFY, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PLpgSQLParser.COMMA, 0); }
		public Character_stringContext character_string() {
			return getRuleContext(Character_stringContext.class,0);
		}
		public Notify_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notify_stmt; }
	}

	public final Notify_stmtContext notify_stmt() throws RecognitionException {
		Notify_stmtContext _localctx = new Notify_stmtContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_notify_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7061);
			match(NOTIFY);
			setState(7062);
			((Notify_stmtContext)_localctx).channel = identifier();
			setState(7065);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(7063);
				match(COMMA);
				setState(7064);
				((Notify_stmtContext)_localctx).payload = character_string();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Truncate_stmtContext extends ParserRuleContext {
		public TerminalNode TRUNCATE() { return getToken(PLpgSQLParser.TRUNCATE, 0); }
		public List<Only_table_multiplyContext> only_table_multiply() {
			return getRuleContexts(Only_table_multiplyContext.class);
		}
		public Only_table_multiplyContext only_table_multiply(int i) {
			return getRuleContext(Only_table_multiplyContext.class,i);
		}
		public TerminalNode TABLE() { return getToken(PLpgSQLParser.TABLE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public TerminalNode IDENTITY() { return getToken(PLpgSQLParser.IDENTITY, 0); }
		public Cascade_restrictContext cascade_restrict() {
			return getRuleContext(Cascade_restrictContext.class,0);
		}
		public TerminalNode RESTART() { return getToken(PLpgSQLParser.RESTART, 0); }
		public TerminalNode CONTINUE() { return getToken(PLpgSQLParser.CONTINUE, 0); }
		public Truncate_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncate_stmt; }
	}

	public final Truncate_stmtContext truncate_stmt() throws RecognitionException {
		Truncate_stmtContext _localctx = new Truncate_stmtContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_truncate_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7067);
			match(TRUNCATE);
			setState(7069);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLE) {
				{
				setState(7068);
				match(TABLE);
				}
			}

			setState(7071);
			only_table_multiply();
			setState(7076);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7072);
				match(COMMA);
				setState(7073);
				only_table_multiply();
				}
				}
				setState(7078);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7081);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONTINUE || _la==RESTART) {
				{
				setState(7079);
				_la = _input.LA(1);
				if ( !(_la==CONTINUE || _la==RESTART) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7080);
				match(IDENTITY);
				}
			}

			setState(7084);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(7083);
				cascade_restrict();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Identifier_listContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Identifier_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier_list; }
	}

	public final Identifier_listContext identifier_list() throws RecognitionException {
		Identifier_listContext _localctx = new Identifier_listContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_identifier_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7086);
			identifier();
			setState(7091);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,944,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(7087);
					match(COMMA);
					setState(7088);
					identifier();
					}
					} 
				}
				setState(7093);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,944,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Anonymous_blockContext extends ParserRuleContext {
		public TerminalNode DO() { return getToken(PLpgSQLParser.DO, 0); }
		public List<Character_stringContext> character_string() {
			return getRuleContexts(Character_stringContext.class);
		}
		public Character_stringContext character_string(int i) {
			return getRuleContext(Character_stringContext.class,i);
		}
		public TerminalNode LANGUAGE() { return getToken(PLpgSQLParser.LANGUAGE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Anonymous_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_anonymous_block; }
	}

	public final Anonymous_blockContext anonymous_block() throws RecognitionException {
		Anonymous_blockContext _localctx = new Anonymous_blockContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_anonymous_block);
		int _la;
		try {
			setState(7110);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,948,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7094);
				match(DO);
				setState(7100);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LANGUAGE) {
					{
					setState(7095);
					match(LANGUAGE);
					setState(7098);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ABORT:
					case ABSOLUTE:
					case ACCESS:
					case ACTION:
					case ADD:
					case ADMIN:
					case AFTER:
					case AGGREGATE:
					case ALSO:
					case ALTER:
					case ALWAYS:
					case ASSERTION:
					case ASSIGNMENT:
					case AT:
					case ATTACH:
					case ATTRIBUTE:
					case BACKWARD:
					case BEFORE:
					case BEGIN:
					case BY:
					case CACHE:
					case CALL:
					case CALLED:
					case CASCADE:
					case CASCADED:
					case CATALOG:
					case CHAIN:
					case CHARACTERISTICS:
					case CHECKPOINT:
					case CLASS:
					case CLOSE:
					case CLUSTER:
					case COLUMNS:
					case COMMENT:
					case COMMENTS:
					case COMMIT:
					case COMMITTED:
					case CONFIGURATION:
					case CONFLICT:
					case CONNECTION:
					case CONSTRAINTS:
					case CONTENT:
					case CONTINUE:
					case CONVERSION:
					case COPY:
					case COST:
					case CSV:
					case CUBE:
					case CURRENT:
					case CURSOR:
					case CYCLE:
					case DATA:
					case DATABASE:
					case DAY:
					case DEALLOCATE:
					case DECLARE:
					case DEFAULTS:
					case DEFERRED:
					case DEFINER:
					case DELETE:
					case DELIMITER:
					case DELIMITERS:
					case DEPENDS:
					case DETACH:
					case DICTIONARY:
					case DISABLE:
					case DISCARD:
					case DOCUMENT:
					case DOMAIN:
					case DOUBLE:
					case DROP:
					case EACH:
					case ENABLE:
					case ENCODING:
					case ENCRYPTED:
					case ENUM:
					case ESCAPE:
					case EVENT:
					case EXCLUDE:
					case EXCLUDING:
					case EXCLUSIVE:
					case EXECUTE:
					case EXPLAIN:
					case EXTENSION:
					case EXTERNAL:
					case FAMILY:
					case FILTER:
					case FIRST:
					case FOLLOWING:
					case FORCE:
					case FORWARD:
					case FUNCTION:
					case FUNCTIONS:
					case GENERATED:
					case GLOBAL:
					case GRANTED:
					case GROUPS:
					case HANDLER:
					case HEADER:
					case HOLD:
					case HOUR:
					case IDENTITY:
					case IF:
					case IMMEDIATE:
					case IMMUTABLE:
					case IMPLICIT:
					case IMPORT:
					case INCLUDE:
					case INCLUDING:
					case INCREMENT:
					case INDEX:
					case INDEXES:
					case INHERIT:
					case INHERITS:
					case INLINE:
					case INPUT:
					case INSENSITIVE:
					case INSERT:
					case INSTEAD:
					case INVOKER:
					case ISOLATION:
					case KEY:
					case LABEL:
					case LANGUAGE:
					case LARGE:
					case LAST:
					case LEAKPROOF:
					case LEVEL:
					case LISTEN:
					case LOAD:
					case LOCAL:
					case LOCATION:
					case LOCK:
					case LOCKED:
					case LOGGED:
					case MAPPING:
					case MATCH:
					case MATERIALIZED:
					case MAXVALUE:
					case METHOD:
					case MINUTE:
					case MINVALUE:
					case MODE:
					case MONTH:
					case MOVE:
					case NAME:
					case NAMES:
					case NEW:
					case NEXT:
					case NO:
					case NOTHING:
					case NOTIFY:
					case NOWAIT:
					case NULLS:
					case OBJECT:
					case OF:
					case OFF:
					case OIDS:
					case OLD:
					case OPERATOR:
					case OPTION:
					case OPTIONS:
					case ORDINALITY:
					case OTHERS:
					case OVER:
					case OVERRIDING:
					case OWNED:
					case OWNER:
					case PARALLEL:
					case PARSER:
					case PARTIAL:
					case PARTITION:
					case PASSING:
					case PASSWORD:
					case PLANS:
					case POLICY:
					case PRECEDING:
					case PREPARE:
					case PREPARED:
					case PRESERVE:
					case PRIOR:
					case PRIVILEGES:
					case PROCEDURAL:
					case PROCEDURE:
					case PROCEDURES:
					case PROGRAM:
					case PUBLICATION:
					case QUOTE:
					case RANGE:
					case READ:
					case REASSIGN:
					case RECHECK:
					case RECURSIVE:
					case REF:
					case REFERENCING:
					case REFRESH:
					case REINDEX:
					case RELATIVE:
					case RELEASE:
					case RENAME:
					case REPEATABLE:
					case REPLACE:
					case REPLICA:
					case RESET:
					case RESTART:
					case RESTRICT:
					case RETURNS:
					case REVOKE:
					case ROLE:
					case ROLLBACK:
					case ROLLUP:
					case ROUTINE:
					case ROUTINES:
					case ROWS:
					case RULE:
					case SAVEPOINT:
					case SCHEMA:
					case SCHEMAS:
					case SCROLL:
					case SEARCH:
					case SECOND:
					case SECURITY:
					case SEQUENCE:
					case SEQUENCES:
					case SERIALIZABLE:
					case SERVER:
					case SESSION:
					case SET:
					case SETS:
					case SHARE:
					case SHOW:
					case SIMPLE:
					case SKIP_:
					case SNAPSHOT:
					case SQL:
					case STABLE:
					case STANDALONE:
					case START:
					case STATEMENT:
					case STATISTICS:
					case STDIN:
					case STDOUT:
					case STORAGE:
					case STORED:
					case STRICT:
					case STRIP:
					case SUBSCRIPTION:
					case SUPPORT:
					case SYSID:
					case SYSTEM:
					case TABLES:
					case TABLESPACE:
					case TEMP:
					case TEMPLATE:
					case TEMPORARY:
					case TEXT:
					case TIES:
					case TRANSACTION:
					case TRANSFORM:
					case TRIGGER:
					case TRUNCATE:
					case TRUSTED:
					case TYPE:
					case TYPES:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNENCRYPTED:
					case UNKNOWN:
					case UNLISTEN:
					case UNLOGGED:
					case UNTIL:
					case UPDATE:
					case VACUUM:
					case VALID:
					case VALIDATE:
					case VALIDATOR:
					case VALUE:
					case VARYING:
					case VERSION:
					case VIEW:
					case VIEWS:
					case VOLATILE:
					case WHITESPACE:
					case WITHIN:
					case WITHOUT:
					case WORK:
					case WRAPPER:
					case WRITE:
					case XML:
					case YEAR:
					case YES:
					case ZONE:
					case BETWEEN:
					case BIGINT:
					case BIT:
					case BOOLEAN:
					case CHAR:
					case CHARACTER:
					case COALESCE:
					case DEC:
					case DECIMAL:
					case EXISTS:
					case EXTRACT:
					case FLOAT:
					case GREATEST:
					case GROUPING:
					case INOUT:
					case INT:
					case INTEGER:
					case INTERVAL:
					case LEAST:
					case NATIONAL:
					case NCHAR:
					case NONE:
					case NULLIF:
					case NUMERIC:
					case OUT:
					case OVERLAY:
					case POSITION:
					case PRECISION:
					case REAL:
					case ROW:
					case SETOF:
					case SMALLINT:
					case SUBSTRING:
					case TIME:
					case TIMESTAMP:
					case TREAT:
					case TRIM:
					case VALUES:
					case VARCHAR:
					case XMLATTRIBUTES:
					case XMLCONCAT:
					case XMLELEMENT:
					case XMLEXISTS:
					case XMLFOREST:
					case XMLNAMESPACES:
					case XMLPARSE:
					case XMLPI:
					case XMLROOT:
					case XMLSERIALIZE:
					case XMLTABLE:
					case ALIGNMENT:
					case BASETYPE:
					case BUFFERS:
					case BYPASSRLS:
					case CANONICAL:
					case CATEGORY:
					case COLLATABLE:
					case COMBINEFUNC:
					case COMMUTATOR:
					case CONNECT:
					case COSTS:
					case CREATEDB:
					case CREATEROLE:
					case DESERIALFUNC:
					case DETERMINISTIC:
					case DISABLE_PAGE_SKIPPING:
					case ELEMENT:
					case EXTENDED:
					case FINALFUNC:
					case FINALFUNC_EXTRA:
					case FINALFUNC_MODIFY:
					case FORCE_NOT_NULL:
					case FORCE_NULL:
					case FORCE_QUOTE:
					case FORMAT:
					case GETTOKEN:
					case HASH:
					case HASHES:
					case HEADLINE:
					case HYPOTHETICAL:
					case INDEX_CLEANUP:
					case INIT:
					case INITCOND:
					case INTERNALLENGTH:
					case JSON:
					case LC_COLLATE:
					case LC_CTYPE:
					case LEFTARG:
					case LEXIZE:
					case LEXTYPES:
					case LIST:
					case LOCALE:
					case LOGIN:
					case MAIN:
					case MERGES:
					case MFINALFUNC:
					case MFINALFUNC_EXTRA:
					case MFINALFUNC_MODIFY:
					case MINITCOND:
					case MINVFUNC:
					case MODULUS:
					case MSFUNC:
					case MSSPACE:
					case MSTYPE:
					case NEGATOR:
					case NOBYPASSRLS:
					case NOCREATEDB:
					case NOCREATEROLE:
					case NOINHERIT:
					case NOLOGIN:
					case NOREPLICATION:
					case NOSUPERUSER:
					case OUTPUT:
					case PASSEDBYVALUE:
					case PATH:
					case PERMISSIVE:
					case PLAIN:
					case PREFERRED:
					case PROVIDER:
					case READ_ONLY:
					case READ_WRITE:
					case RECEIVE:
					case REMAINDER:
					case REPLICATION:
					case RESTRICTED:
					case RESTRICTIVE:
					case RIGHTARG:
					case SAFE:
					case SEND:
					case SERIALFUNC:
					case SETTINGS:
					case SFUNC:
					case SHAREABLE:
					case SKIP_LOCKED:
					case SORTOP:
					case SSPACE:
					case STYPE:
					case SUBTYPE_DIFF:
					case SUBTYPE_OPCLASS:
					case SUBTYPE:
					case SUMMARY:
					case SUPERUSER:
					case TIMING:
					case TYPMOD_IN:
					case TYPMOD_OUT:
					case UNSAFE:
					case USAGE:
					case VARIABLE:
					case YAML:
					case ALIAS:
					case ASSERT:
					case CONSTANT:
					case DATATYPE:
					case DEBUG:
					case DETAIL:
					case DIAGNOSTICS:
					case ELSEIF:
					case ELSIF:
					case ERRCODE:
					case EXIT:
					case EXCEPTION:
					case FOREACH:
					case GET:
					case HINT:
					case INFO:
					case LOG:
					case LOOP:
					case MESSAGE:
					case NOTICE:
					case OPEN:
					case PERFORM:
					case QUERY:
					case RAISE:
					case RECORD:
					case RETURN:
					case REVERSE:
					case ROWTYPE:
					case SLICE:
					case SQLSTATE:
					case STACKED:
					case WARNING:
					case WHILE:
					case Identifier:
					case QuotedIdentifier:
						{
						setState(7096);
						identifier();
						}
						break;
					case Character_String_Literal:
					case BeginDollarStringConstant:
						{
						setState(7097);
						character_string();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(7102);
				character_string();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7103);
				match(DO);
				setState(7104);
				character_string();
				setState(7105);
				match(LANGUAGE);
				setState(7108);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BY:
				case CACHE:
				case CALL:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COLUMNS:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONFLICT:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CUBE:
				case CURRENT:
				case CURSOR:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DEPENDS:
				case DETACH:
				case DICTIONARY:
				case DISABLE:
				case DISCARD:
				case DOCUMENT:
				case DOMAIN:
				case DOUBLE:
				case DROP:
				case EACH:
				case ENABLE:
				case ENCODING:
				case ENCRYPTED:
				case ENUM:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GENERATED:
				case GLOBAL:
				case GRANTED:
				case GROUPS:
				case HANDLER:
				case HEADER:
				case HOLD:
				case HOUR:
				case IDENTITY:
				case IF:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT:
				case IMPORT:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCKED:
				case LOGGED:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case METHOD:
				case MINUTE:
				case MINVALUE:
				case MODE:
				case MONTH:
				case MOVE:
				case NAME:
				case NAMES:
				case NEW:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS:
				case OBJECT:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDINALITY:
				case OTHERS:
				case OVER:
				case OVERRIDING:
				case OWNED:
				case OWNER:
				case PARALLEL:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case POLICY:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROCEDURES:
				case PROGRAM:
				case PUBLICATION:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINES:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMAS:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SKIP_:
				case SNAPSHOT:
				case SQL:
				case STABLE:
				case STANDALONE:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STORED:
				case STRICT:
				case STRIP:
				case SUBSCRIPTION:
				case SUPPORT:
				case SYSID:
				case SYSTEM:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT:
				case TIES:
				case TRANSACTION:
				case TRANSFORM:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case TYPES:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VALUE:
				case VARYING:
				case VERSION:
				case VIEW:
				case VIEWS:
				case VOLATILE:
				case WHITESPACE:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML:
				case YEAR:
				case YES:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN:
				case CHAR:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL:
				case EXISTS:
				case EXTRACT:
				case FLOAT:
				case GREATEST:
				case GROUPING:
				case INOUT:
				case INT:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OUT:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case ALIGNMENT:
				case BASETYPE:
				case BUFFERS:
				case BYPASSRLS:
				case CANONICAL:
				case CATEGORY:
				case COLLATABLE:
				case COMBINEFUNC:
				case COMMUTATOR:
				case CONNECT:
				case COSTS:
				case CREATEDB:
				case CREATEROLE:
				case DESERIALFUNC:
				case DETERMINISTIC:
				case DISABLE_PAGE_SKIPPING:
				case ELEMENT:
				case EXTENDED:
				case FINALFUNC:
				case FINALFUNC_EXTRA:
				case FINALFUNC_MODIFY:
				case FORCE_NOT_NULL:
				case FORCE_NULL:
				case FORCE_QUOTE:
				case FORMAT:
				case GETTOKEN:
				case HASH:
				case HASHES:
				case HEADLINE:
				case HYPOTHETICAL:
				case INDEX_CLEANUP:
				case INIT:
				case INITCOND:
				case INTERNALLENGTH:
				case JSON:
				case LC_COLLATE:
				case LC_CTYPE:
				case LEFTARG:
				case LEXIZE:
				case LEXTYPES:
				case LIST:
				case LOCALE:
				case LOGIN:
				case MAIN:
				case MERGES:
				case MFINALFUNC:
				case MFINALFUNC_EXTRA:
				case MFINALFUNC_MODIFY:
				case MINITCOND:
				case MINVFUNC:
				case MODULUS:
				case MSFUNC:
				case MSSPACE:
				case MSTYPE:
				case NEGATOR:
				case NOBYPASSRLS:
				case NOCREATEDB:
				case NOCREATEROLE:
				case NOINHERIT:
				case NOLOGIN:
				case NOREPLICATION:
				case NOSUPERUSER:
				case OUTPUT:
				case PASSEDBYVALUE:
				case PATH:
				case PERMISSIVE:
				case PLAIN:
				case PREFERRED:
				case PROVIDER:
				case READ_ONLY:
				case READ_WRITE:
				case RECEIVE:
				case REMAINDER:
				case REPLICATION:
				case RESTRICTED:
				case RESTRICTIVE:
				case RIGHTARG:
				case SAFE:
				case SEND:
				case SERIALFUNC:
				case SETTINGS:
				case SFUNC:
				case SHAREABLE:
				case SKIP_LOCKED:
				case SORTOP:
				case SSPACE:
				case STYPE:
				case SUBTYPE_DIFF:
				case SUBTYPE_OPCLASS:
				case SUBTYPE:
				case SUMMARY:
				case SUPERUSER:
				case TIMING:
				case TYPMOD_IN:
				case TYPMOD_OUT:
				case UNSAFE:
				case USAGE:
				case VARIABLE:
				case YAML:
				case ALIAS:
				case ASSERT:
				case CONSTANT:
				case DATATYPE:
				case DEBUG:
				case DETAIL:
				case DIAGNOSTICS:
				case ELSEIF:
				case ELSIF:
				case ERRCODE:
				case EXIT:
				case EXCEPTION:
				case FOREACH:
				case GET:
				case HINT:
				case INFO:
				case LOG:
				case LOOP:
				case MESSAGE:
				case NOTICE:
				case OPEN:
				case PERFORM:
				case QUERY:
				case RAISE:
				case RECORD:
				case RETURN:
				case REVERSE:
				case ROWTYPE:
				case SLICE:
				case SQLSTATE:
				case STACKED:
				case WARNING:
				case WHILE:
				case Identifier:
				case QuotedIdentifier:
					{
					setState(7106);
					identifier();
					}
					break;
				case Character_String_Literal:
				case BeginDollarStringConstant:
					{
					setState(7107);
					character_string();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comp_optionsContext extends ParserRuleContext {
		public TerminalNode HASH_SIGN() { return getToken(PLpgSQLParser.HASH_SIGN, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public Truth_valueContext truth_value() {
			return getRuleContext(Truth_valueContext.class,0);
		}
		public Comp_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comp_options; }
	}

	public final Comp_optionsContext comp_options() throws RecognitionException {
		Comp_optionsContext _localctx = new Comp_optionsContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_comp_options);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7112);
			match(HASH_SIGN);
			setState(7113);
			identifier();
			setState(7116);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BY:
			case CACHE:
			case CALL:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COLUMNS:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONFLICT:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CUBE:
			case CURRENT:
			case CURSOR:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DEPENDS:
			case DETACH:
			case DICTIONARY:
			case DISABLE:
			case DISCARD:
			case DOCUMENT:
			case DOMAIN:
			case DOUBLE:
			case DROP:
			case EACH:
			case ENABLE:
			case ENCODING:
			case ENCRYPTED:
			case ENUM:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GENERATED:
			case GLOBAL:
			case GRANTED:
			case GROUPS:
			case HANDLER:
			case HEADER:
			case HOLD:
			case HOUR:
			case IDENTITY:
			case IF:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT:
			case IMPORT:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCKED:
			case LOGGED:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case METHOD:
			case MINUTE:
			case MINVALUE:
			case MODE:
			case MONTH:
			case MOVE:
			case NAME:
			case NAMES:
			case NEW:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS:
			case OBJECT:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OVER:
			case OVERRIDING:
			case OWNED:
			case OWNER:
			case PARALLEL:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POLICY:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROCEDURES:
			case PROGRAM:
			case PUBLICATION:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINES:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMAS:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SKIP_:
			case SNAPSHOT:
			case SQL:
			case STABLE:
			case STANDALONE:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STORED:
			case STRICT:
			case STRIP:
			case SUBSCRIPTION:
			case SUPPORT:
			case SYSID:
			case SYSTEM:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT:
			case TIES:
			case TRANSACTION:
			case TRANSFORM:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE:
			case VARYING:
			case VERSION:
			case VIEW:
			case VIEWS:
			case VOLATILE:
			case WHITESPACE:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML:
			case YEAR:
			case YES:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL:
			case EXISTS:
			case EXTRACT:
			case FLOAT:
			case GREATEST:
			case GROUPING:
			case INOUT:
			case INT:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case ALIGNMENT:
			case BASETYPE:
			case BUFFERS:
			case BYPASSRLS:
			case CANONICAL:
			case CATEGORY:
			case COLLATABLE:
			case COMBINEFUNC:
			case COMMUTATOR:
			case CONNECT:
			case COSTS:
			case CREATEDB:
			case CREATEROLE:
			case DESERIALFUNC:
			case DETERMINISTIC:
			case DISABLE_PAGE_SKIPPING:
			case ELEMENT:
			case EXTENDED:
			case FINALFUNC:
			case FINALFUNC_EXTRA:
			case FINALFUNC_MODIFY:
			case FORCE_NOT_NULL:
			case FORCE_NULL:
			case FORCE_QUOTE:
			case FORMAT:
			case GETTOKEN:
			case HASH:
			case HASHES:
			case HEADLINE:
			case HYPOTHETICAL:
			case INDEX_CLEANUP:
			case INIT:
			case INITCOND:
			case INTERNALLENGTH:
			case JSON:
			case LC_COLLATE:
			case LC_CTYPE:
			case LEFTARG:
			case LEXIZE:
			case LEXTYPES:
			case LIST:
			case LOCALE:
			case LOGIN:
			case MAIN:
			case MERGES:
			case MFINALFUNC:
			case MFINALFUNC_EXTRA:
			case MFINALFUNC_MODIFY:
			case MINITCOND:
			case MINVFUNC:
			case MODULUS:
			case MSFUNC:
			case MSSPACE:
			case MSTYPE:
			case NEGATOR:
			case NOBYPASSRLS:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOREPLICATION:
			case NOSUPERUSER:
			case OUTPUT:
			case PASSEDBYVALUE:
			case PATH:
			case PERMISSIVE:
			case PLAIN:
			case PREFERRED:
			case PROVIDER:
			case READ_ONLY:
			case READ_WRITE:
			case RECEIVE:
			case REMAINDER:
			case REPLICATION:
			case RESTRICTED:
			case RESTRICTIVE:
			case RIGHTARG:
			case SAFE:
			case SEND:
			case SERIALFUNC:
			case SETTINGS:
			case SFUNC:
			case SHAREABLE:
			case SKIP_LOCKED:
			case SORTOP:
			case SSPACE:
			case STYPE:
			case SUBTYPE_DIFF:
			case SUBTYPE_OPCLASS:
			case SUBTYPE:
			case SUMMARY:
			case SUPERUSER:
			case TIMING:
			case TYPMOD_IN:
			case TYPMOD_OUT:
			case UNSAFE:
			case USAGE:
			case VARIABLE:
			case YAML:
			case ALIAS:
			case ASSERT:
			case CONSTANT:
			case DATATYPE:
			case DEBUG:
			case DETAIL:
			case DIAGNOSTICS:
			case ELSEIF:
			case ELSIF:
			case ERRCODE:
			case EXIT:
			case EXCEPTION:
			case FOREACH:
			case GET:
			case HINT:
			case INFO:
			case LOG:
			case LOOP:
			case MESSAGE:
			case NOTICE:
			case OPEN:
			case PERFORM:
			case QUERY:
			case RAISE:
			case RECORD:
			case RETURN:
			case REVERSE:
			case ROWTYPE:
			case SLICE:
			case SQLSTATE:
			case STACKED:
			case WARNING:
			case WHILE:
			case Identifier:
			case QuotedIdentifier:
				{
				setState(7114);
				identifier();
				}
				break;
			case FALSE:
			case ON:
			case TRUE:
				{
				setState(7115);
				truth_value();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_blockContext extends ParserRuleContext {
		public IdentifierContext end_label;
		public TerminalNode BEGIN() { return getToken(PLpgSQLParser.BEGIN, 0); }
		public Function_statementsContext function_statements() {
			return getRuleContext(Function_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(PLpgSQLParser.END, 0); }
		public Start_labelContext start_label() {
			return getRuleContext(Start_labelContext.class,0);
		}
		public DeclarationsContext declarations() {
			return getRuleContext(DeclarationsContext.class,0);
		}
		public Exception_statementContext exception_statement() {
			return getRuleContext(Exception_statementContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Function_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_block; }
	}

	public final Function_blockContext function_block() throws RecognitionException {
		Function_blockContext _localctx = new Function_blockContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_function_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7119);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LESS_LESS) {
				{
				setState(7118);
				start_label();
				}
			}

			setState(7122);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DECLARE) {
				{
				setState(7121);
				declarations();
				}
			}

			setState(7124);
			match(BEGIN);
			setState(7125);
			function_statements();
			setState(7127);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCEPTION) {
				{
				setState(7126);
				exception_statement();
				}
			}

			setState(7129);
			match(END);
			setState(7131);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATTACH) | (1L << ATTRIBUTE) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BY) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG) | (1L << CHAIN) | (1L << CHARACTERISTICS) | (1L << CHECKPOINT) | (1L << CLASS) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMENTS) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONFIGURATION) | (1L << CONFLICT) | (1L << CONNECTION) | (1L << CONSTRAINTS) | (1L << CONTENT) | (1L << CONTINUE) | (1L << CONVERSION) | (1L << COPY) | (1L << COST) | (1L << CSV) | (1L << CUBE) | (1L << CURRENT) | (1L << CURSOR) | (1L << CYCLE) | (1L << DATA) | (1L << DATABASE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DEFAULTS) | (1L << DEFERRED) | (1L << DEFINER) | (1L << DELETE) | (1L << DELIMITER) | (1L << DELIMITERS) | (1L << DEPENDS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DETACH - 64)) | (1L << (DICTIONARY - 64)) | (1L << (DISABLE - 64)) | (1L << (DISCARD - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOMAIN - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (EACH - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTED - 64)) | (1L << (ENUM - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVENT - 64)) | (1L << (EXCLUDE - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXCLUSIVE - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTENSION - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FAMILY - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORCE - 64)) | (1L << (FORWARD - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GENERATED - 64)) | (1L << (GLOBAL - 64)) | (1L << (GRANTED - 64)) | (1L << (GROUPS - 64)) | (1L << (HANDLER - 64)) | (1L << (HEADER - 64)) | (1L << (HOLD - 64)) | (1L << (HOUR - 64)) | (1L << (IDENTITY - 64)) | (1L << (IF - 64)) | (1L << (IMMEDIATE - 64)) | (1L << (IMMUTABLE - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPORT - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INCREMENT - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXES - 64)) | (1L << (INHERIT - 64)) | (1L << (INHERITS - 64)) | (1L << (INLINE - 64)) | (1L << (INPUT - 64)) | (1L << (INSENSITIVE - 64)) | (1L << (INSERT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INVOKER - 64)) | (1L << (ISOLATION - 64)) | (1L << (KEY - 64)) | (1L << (LABEL - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LARGE - 64)) | (1L << (LAST - 64)) | (1L << (LEAKPROOF - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LEVEL - 128)) | (1L << (LISTEN - 128)) | (1L << (LOAD - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCATION - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKED - 128)) | (1L << (LOGGED - 128)) | (1L << (MAPPING - 128)) | (1L << (MATCH - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MAXVALUE - 128)) | (1L << (METHOD - 128)) | (1L << (MINUTE - 128)) | (1L << (MINVALUE - 128)) | (1L << (MODE - 128)) | (1L << (MONTH - 128)) | (1L << (MOVE - 128)) | (1L << (NAME - 128)) | (1L << (NAMES - 128)) | (1L << (NEW - 128)) | (1L << (NEXT - 128)) | (1L << (NO - 128)) | (1L << (NOTHING - 128)) | (1L << (NOTIFY - 128)) | (1L << (NOWAIT - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFF - 128)) | (1L << (OIDS - 128)) | (1L << (OLD - 128)) | (1L << (OPERATOR - 128)) | (1L << (OPTION - 128)) | (1L << (OPTIONS - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OTHERS - 128)) | (1L << (OVER - 128)) | (1L << (OVERRIDING - 128)) | (1L << (OWNED - 128)) | (1L << (OWNER - 128)) | (1L << (PARALLEL - 128)) | (1L << (PARSER - 128)) | (1L << (PARTIAL - 128)) | (1L << (PARTITION - 128)) | (1L << (PASSING - 128)) | (1L << (PASSWORD - 128)) | (1L << (PLANS - 128)) | (1L << (POLICY - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PREPARED - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRIOR - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROCEDURAL - 128)) | (1L << (PROCEDURE - 128)) | (1L << (PROCEDURES - 128)) | (1L << (PROGRAM - 128)) | (1L << (PUBLICATION - 128)) | (1L << (QUOTE - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (REASSIGN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (RECHECK - 192)) | (1L << (RECURSIVE - 192)) | (1L << (REF - 192)) | (1L << (REFERENCING - 192)) | (1L << (REFRESH - 192)) | (1L << (REINDEX - 192)) | (1L << (RELATIVE - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (REPLICA - 192)) | (1L << (RESET - 192)) | (1L << (RESTART - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUTINE - 192)) | (1L << (ROUTINES - 192)) | (1L << (ROWS - 192)) | (1L << (RULE - 192)) | (1L << (SAVEPOINT - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SCROLL - 192)) | (1L << (SEARCH - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEQUENCE - 192)) | (1L << (SEQUENCES - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SERVER - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHARE - 192)) | (1L << (SHOW - 192)) | (1L << (SIMPLE - 192)) | (1L << (SKIP_ - 192)) | (1L << (SNAPSHOT - 192)) | (1L << (SQL - 192)) | (1L << (STABLE - 192)) | (1L << (STANDALONE - 192)) | (1L << (START - 192)) | (1L << (STATEMENT - 192)) | (1L << (STATISTICS - 192)) | (1L << (STDIN - 192)) | (1L << (STDOUT - 192)) | (1L << (STORAGE - 192)) | (1L << (STORED - 192)) | (1L << (STRICT - 192)) | (1L << (STRIP - 192)) | (1L << (SUBSCRIPTION - 192)) | (1L << (SUPPORT - 192)) | (1L << (SYSID - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESPACE - 192)) | (1L << (TEMP - 192)) | (1L << (TEMPLATE - 192)) | (1L << (TEMPORARY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TEXT - 256)) | (1L << (TIES - 256)) | (1L << (TRANSACTION - 256)) | (1L << (TRANSFORM - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TRUSTED - 256)) | (1L << (TYPE - 256)) | (1L << (TYPES - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNENCRYPTED - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNLISTEN - 256)) | (1L << (UNLOGGED - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (VACUUM - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALIDATOR - 256)) | (1L << (VALUE - 256)) | (1L << (VARYING - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (VIEWS - 256)) | (1L << (VOLATILE - 256)) | (1L << (WHITESPACE - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (XML - 256)) | (1L << (YEAR - 256)) | (1L << (YES - 256)) | (1L << (ZONE - 256)) | (1L << (BETWEEN - 256)) | (1L << (BIGINT - 256)) | (1L << (BIT - 256)) | (1L << (BOOLEAN - 256)) | (1L << (CHAR - 256)) | (1L << (CHARACTER - 256)) | (1L << (COALESCE - 256)) | (1L << (DEC - 256)) | (1L << (DECIMAL - 256)) | (1L << (EXISTS - 256)) | (1L << (EXTRACT - 256)) | (1L << (FLOAT - 256)) | (1L << (GREATEST - 256)) | (1L << (GROUPING - 256)) | (1L << (INOUT - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERVAL - 256)) | (1L << (LEAST - 256)) | (1L << (NATIONAL - 256)) | (1L << (NCHAR - 256)) | (1L << (NONE - 256)) | (1L << (NULLIF - 256)) | (1L << (NUMERIC - 256)) | (1L << (OUT - 256)) | (1L << (OVERLAY - 256)) | (1L << (POSITION - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRECISION - 320)) | (1L << (REAL - 320)) | (1L << (ROW - 320)) | (1L << (SETOF - 320)) | (1L << (SMALLINT - 320)) | (1L << (SUBSTRING - 320)) | (1L << (TIME - 320)) | (1L << (TIMESTAMP - 320)) | (1L << (TREAT - 320)) | (1L << (TRIM - 320)) | (1L << (VALUES - 320)) | (1L << (VARCHAR - 320)) | (1L << (XMLATTRIBUTES - 320)) | (1L << (XMLCONCAT - 320)) | (1L << (XMLELEMENT - 320)) | (1L << (XMLEXISTS - 320)) | (1L << (XMLFOREST - 320)) | (1L << (XMLNAMESPACES - 320)) | (1L << (XMLPARSE - 320)) | (1L << (XMLPI - 320)) | (1L << (XMLROOT - 320)) | (1L << (XMLSERIALIZE - 320)) | (1L << (XMLTABLE - 320)))) != 0) || ((((_la - 443)) & ~0x3f) == 0 && ((1L << (_la - 443)) & ((1L << (ALIGNMENT - 443)) | (1L << (BASETYPE - 443)) | (1L << (BUFFERS - 443)) | (1L << (BYPASSRLS - 443)) | (1L << (CANONICAL - 443)) | (1L << (CATEGORY - 443)) | (1L << (COLLATABLE - 443)) | (1L << (COMBINEFUNC - 443)) | (1L << (COMMUTATOR - 443)) | (1L << (CONNECT - 443)) | (1L << (COSTS - 443)) | (1L << (CREATEDB - 443)) | (1L << (CREATEROLE - 443)) | (1L << (DESERIALFUNC - 443)) | (1L << (DETERMINISTIC - 443)) | (1L << (DISABLE_PAGE_SKIPPING - 443)) | (1L << (ELEMENT - 443)) | (1L << (EXTENDED - 443)) | (1L << (FINALFUNC - 443)) | (1L << (FINALFUNC_EXTRA - 443)) | (1L << (FINALFUNC_MODIFY - 443)) | (1L << (FORCE_NOT_NULL - 443)) | (1L << (FORCE_NULL - 443)) | (1L << (FORCE_QUOTE - 443)) | (1L << (FORMAT - 443)) | (1L << (GETTOKEN - 443)) | (1L << (HASH - 443)) | (1L << (HASHES - 443)) | (1L << (HEADLINE - 443)) | (1L << (HYPOTHETICAL - 443)) | (1L << (INDEX_CLEANUP - 443)) | (1L << (INIT - 443)) | (1L << (INITCOND - 443)) | (1L << (INTERNALLENGTH - 443)) | (1L << (JSON - 443)) | (1L << (LC_COLLATE - 443)) | (1L << (LC_CTYPE - 443)) | (1L << (LEFTARG - 443)) | (1L << (LEXIZE - 443)) | (1L << (LEXTYPES - 443)) | (1L << (LIST - 443)) | (1L << (LOCALE - 443)) | (1L << (LOGIN - 443)) | (1L << (MAIN - 443)) | (1L << (MERGES - 443)) | (1L << (MFINALFUNC - 443)) | (1L << (MFINALFUNC_EXTRA - 443)) | (1L << (MFINALFUNC_MODIFY - 443)) | (1L << (MINITCOND - 443)) | (1L << (MINVFUNC - 443)) | (1L << (MODULUS - 443)) | (1L << (MSFUNC - 443)) | (1L << (MSSPACE - 443)) | (1L << (MSTYPE - 443)) | (1L << (NEGATOR - 443)) | (1L << (NOBYPASSRLS - 443)) | (1L << (NOCREATEDB - 443)) | (1L << (NOCREATEROLE - 443)) | (1L << (NOINHERIT - 443)) | (1L << (NOLOGIN - 443)) | (1L << (NOREPLICATION - 443)) | (1L << (NOSUPERUSER - 443)) | (1L << (OUTPUT - 443)) | (1L << (PASSEDBYVALUE - 443)))) != 0) || ((((_la - 507)) & ~0x3f) == 0 && ((1L << (_la - 507)) & ((1L << (PATH - 507)) | (1L << (PERMISSIVE - 507)) | (1L << (PLAIN - 507)) | (1L << (PREFERRED - 507)) | (1L << (PROVIDER - 507)) | (1L << (READ_ONLY - 507)) | (1L << (READ_WRITE - 507)) | (1L << (RECEIVE - 507)) | (1L << (REMAINDER - 507)) | (1L << (REPLICATION - 507)) | (1L << (RESTRICTED - 507)) | (1L << (RESTRICTIVE - 507)) | (1L << (RIGHTARG - 507)) | (1L << (SAFE - 507)) | (1L << (SEND - 507)) | (1L << (SERIALFUNC - 507)) | (1L << (SETTINGS - 507)) | (1L << (SFUNC - 507)) | (1L << (SHAREABLE - 507)) | (1L << (SKIP_LOCKED - 507)) | (1L << (SORTOP - 507)) | (1L << (SSPACE - 507)) | (1L << (STYPE - 507)) | (1L << (SUBTYPE_DIFF - 507)) | (1L << (SUBTYPE_OPCLASS - 507)) | (1L << (SUBTYPE - 507)) | (1L << (SUMMARY - 507)) | (1L << (SUPERUSER - 507)) | (1L << (TIMING - 507)) | (1L << (TYPMOD_IN - 507)) | (1L << (TYPMOD_OUT - 507)) | (1L << (UNSAFE - 507)) | (1L << (USAGE - 507)) | (1L << (VARIABLE - 507)) | (1L << (YAML - 507)) | (1L << (ALIAS - 507)) | (1L << (ASSERT - 507)) | (1L << (CONSTANT - 507)) | (1L << (DATATYPE - 507)) | (1L << (DEBUG - 507)) | (1L << (DETAIL - 507)) | (1L << (DIAGNOSTICS - 507)) | (1L << (ELSEIF - 507)) | (1L << (ELSIF - 507)) | (1L << (ERRCODE - 507)) | (1L << (EXIT - 507)) | (1L << (EXCEPTION - 507)) | (1L << (FOREACH - 507)) | (1L << (GET - 507)) | (1L << (HINT - 507)) | (1L << (INFO - 507)) | (1L << (LOG - 507)) | (1L << (LOOP - 507)) | (1L << (MESSAGE - 507)) | (1L << (NOTICE - 507)) | (1L << (OPEN - 507)) | (1L << (PERFORM - 507)) | (1L << (QUERY - 507)) | (1L << (RAISE - 507)) | (1L << (RECORD - 507)) | (1L << (RETURN - 507)) | (1L << (REVERSE - 507)) | (1L << (ROWTYPE - 507)) | (1L << (SLICE - 507)))) != 0) || ((((_la - 571)) & ~0x3f) == 0 && ((1L << (_la - 571)) & ((1L << (SQLSTATE - 571)) | (1L << (STACKED - 571)) | (1L << (WARNING - 571)) | (1L << (WHILE - 571)) | (1L << (Identifier - 571)) | (1L << (QuotedIdentifier - 571)))) != 0)) {
				{
				setState(7130);
				((Function_blockContext)_localctx).end_label = identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Start_labelContext extends ParserRuleContext {
		public TerminalNode LESS_LESS() { return getToken(PLpgSQLParser.LESS_LESS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode GREATER_GREATER() { return getToken(PLpgSQLParser.GREATER_GREATER, 0); }
		public Start_labelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_start_label; }
	}

	public final Start_labelContext start_label() throws RecognitionException {
		Start_labelContext _localctx = new Start_labelContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_start_label);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7133);
			match(LESS_LESS);
			setState(7134);
			identifier();
			setState(7135);
			match(GREATER_GREATER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclarationsContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(PLpgSQLParser.DECLARE, 0); }
		public List<DeclarationContext> declaration() {
			return getRuleContexts(DeclarationContext.class);
		}
		public DeclarationContext declaration(int i) {
			return getRuleContext(DeclarationContext.class,i);
		}
		public DeclarationsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declarations; }
	}

	public final DeclarationsContext declarations() throws RecognitionException {
		DeclarationsContext _localctx = new DeclarationsContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_declarations);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7137);
			match(DECLARE);
			setState(7141);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,954,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(7138);
					declaration();
					}
					} 
				}
				setState(7143);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,954,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclarationContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Type_declarationContext type_declaration() {
			return getRuleContext(Type_declarationContext.class,0);
		}
		public TerminalNode SEMI_COLON() { return getToken(PLpgSQLParser.SEMI_COLON, 0); }
		public List<TerminalNode> DECLARE() { return getTokens(PLpgSQLParser.DECLARE); }
		public TerminalNode DECLARE(int i) {
			return getToken(PLpgSQLParser.DECLARE, i);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declaration; }
	}

	public final DeclarationContext declaration() throws RecognitionException {
		DeclarationContext _localctx = new DeclarationContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_declaration);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7147);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,955,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(7144);
					match(DECLARE);
					}
					} 
				}
				setState(7149);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,955,_ctx);
			}
			setState(7150);
			identifier();
			setState(7151);
			type_declaration();
			setState(7152);
			match(SEMI_COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_declarationContext extends ParserRuleContext {
		public Data_type_decContext data_type_dec() {
			return getRuleContext(Data_type_decContext.class,0);
		}
		public TerminalNode CONSTANT() { return getToken(PLpgSQLParser.CONSTANT, 0); }
		public Collate_identifierContext collate_identifier() {
			return getRuleContext(Collate_identifierContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PLpgSQLParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PLpgSQLParser.NULL, 0); }
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PLpgSQLParser.DEFAULT, 0); }
		public TerminalNode COLON_EQUAL() { return getToken(PLpgSQLParser.COLON_EQUAL, 0); }
		public TerminalNode EQUAL() { return getToken(PLpgSQLParser.EQUAL, 0); }
		public TerminalNode ALIAS() { return getToken(PLpgSQLParser.ALIAS, 0); }
		public TerminalNode FOR() { return getToken(PLpgSQLParser.FOR, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode DOLLAR_NUMBER() { return getToken(PLpgSQLParser.DOLLAR_NUMBER, 0); }
		public TerminalNode CURSOR() { return getToken(PLpgSQLParser.CURSOR, 0); }
		public Select_stmtContext select_stmt() {
			return getRuleContext(Select_stmtContext.class,0);
		}
		public TerminalNode IS() { return getToken(PLpgSQLParser.IS, 0); }
		public TerminalNode SCROLL() { return getToken(PLpgSQLParser.SCROLL, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public Arguments_listContext arguments_list() {
			return getRuleContext(Arguments_listContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public TerminalNode NO() { return getToken(PLpgSQLParser.NO, 0); }
		public Type_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_declaration; }
	}

	public final Type_declarationContext type_declaration() throws RecognitionException {
		Type_declarationContext _localctx = new Type_declarationContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_type_declaration);
		int _la;
		try {
			setState(7190);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,964,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7155);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,956,_ctx) ) {
				case 1:
					{
					setState(7154);
					match(CONSTANT);
					}
					break;
				}
				setState(7157);
				data_type_dec();
				setState(7159);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(7158);
					collate_identifier();
					}
				}

				setState(7163);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(7161);
					match(NOT);
					setState(7162);
					match(NULL);
					}
				}

				setState(7167);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT || _la==EQUAL || _la==COLON_EQUAL) {
					{
					setState(7165);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==EQUAL || _la==COLON_EQUAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(7166);
					vex(0);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7169);
				match(ALIAS);
				setState(7170);
				match(FOR);
				setState(7173);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BY:
				case CACHE:
				case CALL:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COLUMNS:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONFLICT:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CUBE:
				case CURRENT:
				case CURSOR:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DEPENDS:
				case DETACH:
				case DICTIONARY:
				case DISABLE:
				case DISCARD:
				case DOCUMENT:
				case DOMAIN:
				case DOUBLE:
				case DROP:
				case EACH:
				case ENABLE:
				case ENCODING:
				case ENCRYPTED:
				case ENUM:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GENERATED:
				case GLOBAL:
				case GRANTED:
				case GROUPS:
				case HANDLER:
				case HEADER:
				case HOLD:
				case HOUR:
				case IDENTITY:
				case IF:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT:
				case IMPORT:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCKED:
				case LOGGED:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case METHOD:
				case MINUTE:
				case MINVALUE:
				case MODE:
				case MONTH:
				case MOVE:
				case NAME:
				case NAMES:
				case NEW:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS:
				case OBJECT:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDINALITY:
				case OTHERS:
				case OVER:
				case OVERRIDING:
				case OWNED:
				case OWNER:
				case PARALLEL:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case POLICY:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROCEDURES:
				case PROGRAM:
				case PUBLICATION:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINES:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMAS:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SKIP_:
				case SNAPSHOT:
				case SQL:
				case STABLE:
				case STANDALONE:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STORED:
				case STRICT:
				case STRIP:
				case SUBSCRIPTION:
				case SUPPORT:
				case SYSID:
				case SYSTEM:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT:
				case TIES:
				case TRANSACTION:
				case TRANSFORM:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case TYPES:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VALUE:
				case VARYING:
				case VERSION:
				case VIEW:
				case VIEWS:
				case VOLATILE:
				case WHITESPACE:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML:
				case YEAR:
				case YES:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN:
				case CHAR:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL:
				case EXISTS:
				case EXTRACT:
				case FLOAT:
				case GREATEST:
				case GROUPING:
				case INOUT:
				case INT:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OUT:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case ALIGNMENT:
				case BASETYPE:
				case BUFFERS:
				case BYPASSRLS:
				case CANONICAL:
				case CATEGORY:
				case COLLATABLE:
				case COMBINEFUNC:
				case COMMUTATOR:
				case CONNECT:
				case COSTS:
				case CREATEDB:
				case CREATEROLE:
				case DESERIALFUNC:
				case DETERMINISTIC:
				case DISABLE_PAGE_SKIPPING:
				case ELEMENT:
				case EXTENDED:
				case FINALFUNC:
				case FINALFUNC_EXTRA:
				case FINALFUNC_MODIFY:
				case FORCE_NOT_NULL:
				case FORCE_NULL:
				case FORCE_QUOTE:
				case FORMAT:
				case GETTOKEN:
				case HASH:
				case HASHES:
				case HEADLINE:
				case HYPOTHETICAL:
				case INDEX_CLEANUP:
				case INIT:
				case INITCOND:
				case INTERNALLENGTH:
				case JSON:
				case LC_COLLATE:
				case LC_CTYPE:
				case LEFTARG:
				case LEXIZE:
				case LEXTYPES:
				case LIST:
				case LOCALE:
				case LOGIN:
				case MAIN:
				case MERGES:
				case MFINALFUNC:
				case MFINALFUNC_EXTRA:
				case MFINALFUNC_MODIFY:
				case MINITCOND:
				case MINVFUNC:
				case MODULUS:
				case MSFUNC:
				case MSSPACE:
				case MSTYPE:
				case NEGATOR:
				case NOBYPASSRLS:
				case NOCREATEDB:
				case NOCREATEROLE:
				case NOINHERIT:
				case NOLOGIN:
				case NOREPLICATION:
				case NOSUPERUSER:
				case OUTPUT:
				case PASSEDBYVALUE:
				case PATH:
				case PERMISSIVE:
				case PLAIN:
				case PREFERRED:
				case PROVIDER:
				case READ_ONLY:
				case READ_WRITE:
				case RECEIVE:
				case REMAINDER:
				case REPLICATION:
				case RESTRICTED:
				case RESTRICTIVE:
				case RIGHTARG:
				case SAFE:
				case SEND:
				case SERIALFUNC:
				case SETTINGS:
				case SFUNC:
				case SHAREABLE:
				case SKIP_LOCKED:
				case SORTOP:
				case SSPACE:
				case STYPE:
				case SUBTYPE_DIFF:
				case SUBTYPE_OPCLASS:
				case SUBTYPE:
				case SUMMARY:
				case SUPERUSER:
				case TIMING:
				case TYPMOD_IN:
				case TYPMOD_OUT:
				case UNSAFE:
				case USAGE:
				case VARIABLE:
				case YAML:
				case ALIAS:
				case ASSERT:
				case CONSTANT:
				case DATATYPE:
				case DEBUG:
				case DETAIL:
				case DIAGNOSTICS:
				case ELSEIF:
				case ELSIF:
				case ERRCODE:
				case EXIT:
				case EXCEPTION:
				case FOREACH:
				case GET:
				case HINT:
				case INFO:
				case LOG:
				case LOOP:
				case MESSAGE:
				case NOTICE:
				case OPEN:
				case PERFORM:
				case QUERY:
				case RAISE:
				case RECORD:
				case RETURN:
				case REVERSE:
				case ROWTYPE:
				case SLICE:
				case SQLSTATE:
				case STACKED:
				case WARNING:
				case WHILE:
				case Identifier:
				case QuotedIdentifier:
					{
					setState(7171);
					identifier();
					}
					break;
				case DOLLAR_NUMBER:
					{
					setState(7172);
					match(DOLLAR_NUMBER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7179);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO || _la==SCROLL) {
					{
					setState(7176);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NO) {
						{
						setState(7175);
						match(NO);
						}
					}

					setState(7178);
					match(SCROLL);
					}
				}

				setState(7181);
				match(CURSOR);
				setState(7186);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(7182);
					match(LEFT_PAREN);
					setState(7183);
					arguments_list();
					setState(7184);
					match(RIGHT_PAREN);
					}
				}

				setState(7188);
				_la = _input.LA(1);
				if ( !(_la==IS || _la==FOR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7189);
				select_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Arguments_listContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<Data_typeContext> data_type() {
			return getRuleContexts(Data_typeContext.class);
		}
		public Data_typeContext data_type(int i) {
			return getRuleContext(Data_typeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Arguments_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arguments_list; }
	}

	public final Arguments_listContext arguments_list() throws RecognitionException {
		Arguments_listContext _localctx = new Arguments_listContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_arguments_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7192);
			identifier();
			setState(7193);
			data_type();
			setState(7200);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7194);
				match(COMMA);
				setState(7195);
				identifier();
				setState(7196);
				data_type();
				}
				}
				setState(7202);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_type_decContext extends ParserRuleContext {
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public TerminalNode MODULAR() { return getToken(PLpgSQLParser.MODULAR, 0); }
		public TerminalNode TYPE() { return getToken(PLpgSQLParser.TYPE, 0); }
		public Schema_qualified_name_nontypeContext schema_qualified_name_nontype() {
			return getRuleContext(Schema_qualified_name_nontypeContext.class,0);
		}
		public TerminalNode ROWTYPE() { return getToken(PLpgSQLParser.ROWTYPE, 0); }
		public Data_type_decContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_type_dec; }
	}

	public final Data_type_decContext data_type_dec() throws RecognitionException {
		Data_type_decContext _localctx = new Data_type_decContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_data_type_dec);
		try {
			setState(7212);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,966,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7203);
				data_type();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7204);
				schema_qualified_name();
				setState(7205);
				match(MODULAR);
				setState(7206);
				match(TYPE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7208);
				schema_qualified_name_nontype();
				setState(7209);
				match(MODULAR);
				setState(7210);
				match(ROWTYPE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_statementContext extends ParserRuleContext {
		public TerminalNode EXCEPTION() { return getToken(PLpgSQLParser.EXCEPTION, 0); }
		public List<TerminalNode> WHEN() { return getTokens(PLpgSQLParser.WHEN); }
		public TerminalNode WHEN(int i) {
			return getToken(PLpgSQLParser.WHEN, i);
		}
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public List<TerminalNode> THEN() { return getTokens(PLpgSQLParser.THEN); }
		public TerminalNode THEN(int i) {
			return getToken(PLpgSQLParser.THEN, i);
		}
		public List<Function_statementsContext> function_statements() {
			return getRuleContexts(Function_statementsContext.class);
		}
		public Function_statementsContext function_statements(int i) {
			return getRuleContext(Function_statementsContext.class,i);
		}
		public Exception_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_statement; }
	}

	public final Exception_statementContext exception_statement() throws RecognitionException {
		Exception_statementContext _localctx = new Exception_statementContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_exception_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7214);
			match(EXCEPTION);
			setState(7220); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(7215);
				match(WHEN);
				setState(7216);
				vex(0);
				setState(7217);
				match(THEN);
				setState(7218);
				function_statements();
				}
				}
				setState(7222); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_statementsContext extends ParserRuleContext {
		public List<Function_statementContext> function_statement() {
			return getRuleContexts(Function_statementContext.class);
		}
		public Function_statementContext function_statement(int i) {
			return getRuleContext(Function_statementContext.class,i);
		}
		public List<TerminalNode> SEMI_COLON() { return getTokens(PLpgSQLParser.SEMI_COLON); }
		public TerminalNode SEMI_COLON(int i) {
			return getToken(PLpgSQLParser.SEMI_COLON, i);
		}
		public Function_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_statements; }
	}

	public final Function_statementsContext function_statements() throws RecognitionException {
		Function_statementsContext _localctx = new Function_statementsContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_function_statements);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7229);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,968,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(7224);
					function_statement();
					setState(7225);
					match(SEMI_COLON);
					}
					} 
				}
				setState(7231);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,968,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_statementContext extends ParserRuleContext {
		public Function_blockContext function_block() {
			return getRuleContext(Function_blockContext.class,0);
		}
		public Base_statementContext base_statement() {
			return getRuleContext(Base_statementContext.class,0);
		}
		public Control_statementContext control_statement() {
			return getRuleContext(Control_statementContext.class,0);
		}
		public Transaction_statementContext transaction_statement() {
			return getRuleContext(Transaction_statementContext.class,0);
		}
		public Cursor_statementContext cursor_statement() {
			return getRuleContext(Cursor_statementContext.class,0);
		}
		public Message_statementContext message_statement() {
			return getRuleContext(Message_statementContext.class,0);
		}
		public Schema_statementContext schema_statement() {
			return getRuleContext(Schema_statementContext.class,0);
		}
		public Plpgsql_queryContext plpgsql_query() {
			return getRuleContext(Plpgsql_queryContext.class,0);
		}
		public Additional_statementContext additional_statement() {
			return getRuleContext(Additional_statementContext.class,0);
		}
		public Function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_statement; }
	}

	public final Function_statementContext function_statement() throws RecognitionException {
		Function_statementContext _localctx = new Function_statementContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_function_statement);
		try {
			setState(7241);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,969,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7232);
				function_block();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7233);
				base_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7234);
				control_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7235);
				transaction_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7236);
				cursor_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7237);
				message_statement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7238);
				schema_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7239);
				plpgsql_query();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7240);
				additional_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Base_statementContext extends ParserRuleContext {
		public Assign_stmtContext assign_stmt() {
			return getRuleContext(Assign_stmtContext.class,0);
		}
		public TerminalNode PERFORM() { return getToken(PLpgSQLParser.PERFORM, 0); }
		public Perform_stmtContext perform_stmt() {
			return getRuleContext(Perform_stmtContext.class,0);
		}
		public TerminalNode GET() { return getToken(PLpgSQLParser.GET, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(PLpgSQLParser.DIAGNOSTICS, 0); }
		public List<Diagnostic_optionContext> diagnostic_option() {
			return getRuleContexts(Diagnostic_optionContext.class);
		}
		public Diagnostic_optionContext diagnostic_option(int i) {
			return getRuleContext(Diagnostic_optionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public TerminalNode CURRENT() { return getToken(PLpgSQLParser.CURRENT, 0); }
		public TerminalNode STACKED() { return getToken(PLpgSQLParser.STACKED, 0); }
		public TerminalNode NULL() { return getToken(PLpgSQLParser.NULL, 0); }
		public Base_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_base_statement; }
	}

	public final Base_statementContext base_statement() throws RecognitionException {
		Base_statementContext _localctx = new Base_statementContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_base_statement);
		int _la;
		try {
			setState(7260);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,972,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7243);
				assign_stmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7244);
				match(PERFORM);
				setState(7245);
				perform_stmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7246);
				match(GET);
				setState(7248);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CURRENT || _la==STACKED) {
					{
					setState(7247);
					_la = _input.LA(1);
					if ( !(_la==CURRENT || _la==STACKED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(7250);
				match(DIAGNOSTICS);
				setState(7251);
				diagnostic_option();
				setState(7256);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7252);
					match(COMMA);
					setState(7253);
					diagnostic_option();
					}
					}
					setState(7258);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7259);
				match(NULL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VarContext extends ParserRuleContext {
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public TerminalNode DOLLAR_NUMBER() { return getToken(PLpgSQLParser.DOLLAR_NUMBER, 0); }
		public List<TerminalNode> LEFT_BRACKET() { return getTokens(PLpgSQLParser.LEFT_BRACKET); }
		public TerminalNode LEFT_BRACKET(int i) {
			return getToken(PLpgSQLParser.LEFT_BRACKET, i);
		}
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public List<TerminalNode> RIGHT_BRACKET() { return getTokens(PLpgSQLParser.RIGHT_BRACKET); }
		public TerminalNode RIGHT_BRACKET(int i) {
			return getToken(PLpgSQLParser.RIGHT_BRACKET, i);
		}
		public VarContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_var; }
	}

	public final VarContext var() throws RecognitionException {
		VarContext _localctx = new VarContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_var);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7264);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BY:
			case CACHE:
			case CALL:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COLUMNS:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONFLICT:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CUBE:
			case CURRENT:
			case CURSOR:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DEPENDS:
			case DETACH:
			case DICTIONARY:
			case DISABLE:
			case DISCARD:
			case DOCUMENT:
			case DOMAIN:
			case DOUBLE:
			case DROP:
			case EACH:
			case ENABLE:
			case ENCODING:
			case ENCRYPTED:
			case ENUM:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GENERATED:
			case GLOBAL:
			case GRANTED:
			case GROUPS:
			case HANDLER:
			case HEADER:
			case HOLD:
			case HOUR:
			case IDENTITY:
			case IF:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT:
			case IMPORT:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCKED:
			case LOGGED:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case METHOD:
			case MINUTE:
			case MINVALUE:
			case MODE:
			case MONTH:
			case MOVE:
			case NAME:
			case NAMES:
			case NEW:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS:
			case OBJECT:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OVER:
			case OVERRIDING:
			case OWNED:
			case OWNER:
			case PARALLEL:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POLICY:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROCEDURES:
			case PROGRAM:
			case PUBLICATION:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINES:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMAS:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SKIP_:
			case SNAPSHOT:
			case SQL:
			case STABLE:
			case STANDALONE:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STORED:
			case STRICT:
			case STRIP:
			case SUBSCRIPTION:
			case SUPPORT:
			case SYSID:
			case SYSTEM:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT:
			case TIES:
			case TRANSACTION:
			case TRANSFORM:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE:
			case VARYING:
			case VERSION:
			case VIEW:
			case VIEWS:
			case VOLATILE:
			case WHITESPACE:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML:
			case YEAR:
			case YES:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL:
			case EXISTS:
			case EXTRACT:
			case FLOAT:
			case GREATEST:
			case GROUPING:
			case INOUT:
			case INT:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case ALIGNMENT:
			case BASETYPE:
			case BUFFERS:
			case BYPASSRLS:
			case CANONICAL:
			case CATEGORY:
			case COLLATABLE:
			case COMBINEFUNC:
			case COMMUTATOR:
			case CONNECT:
			case COSTS:
			case CREATEDB:
			case CREATEROLE:
			case DESERIALFUNC:
			case DETERMINISTIC:
			case DISABLE_PAGE_SKIPPING:
			case ELEMENT:
			case EXTENDED:
			case FINALFUNC:
			case FINALFUNC_EXTRA:
			case FINALFUNC_MODIFY:
			case FORCE_NOT_NULL:
			case FORCE_NULL:
			case FORCE_QUOTE:
			case FORMAT:
			case GETTOKEN:
			case HASH:
			case HASHES:
			case HEADLINE:
			case HYPOTHETICAL:
			case INDEX_CLEANUP:
			case INIT:
			case INITCOND:
			case INTERNALLENGTH:
			case JSON:
			case LC_COLLATE:
			case LC_CTYPE:
			case LEFTARG:
			case LEXIZE:
			case LEXTYPES:
			case LIST:
			case LOCALE:
			case LOGIN:
			case MAIN:
			case MERGES:
			case MFINALFUNC:
			case MFINALFUNC_EXTRA:
			case MFINALFUNC_MODIFY:
			case MINITCOND:
			case MINVFUNC:
			case MODULUS:
			case MSFUNC:
			case MSSPACE:
			case MSTYPE:
			case NEGATOR:
			case NOBYPASSRLS:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOREPLICATION:
			case NOSUPERUSER:
			case OUTPUT:
			case PASSEDBYVALUE:
			case PATH:
			case PERMISSIVE:
			case PLAIN:
			case PREFERRED:
			case PROVIDER:
			case READ_ONLY:
			case READ_WRITE:
			case RECEIVE:
			case REMAINDER:
			case REPLICATION:
			case RESTRICTED:
			case RESTRICTIVE:
			case RIGHTARG:
			case SAFE:
			case SEND:
			case SERIALFUNC:
			case SETTINGS:
			case SFUNC:
			case SHAREABLE:
			case SKIP_LOCKED:
			case SORTOP:
			case SSPACE:
			case STYPE:
			case SUBTYPE_DIFF:
			case SUBTYPE_OPCLASS:
			case SUBTYPE:
			case SUMMARY:
			case SUPERUSER:
			case TIMING:
			case TYPMOD_IN:
			case TYPMOD_OUT:
			case UNSAFE:
			case USAGE:
			case VARIABLE:
			case YAML:
			case ALIAS:
			case ASSERT:
			case CONSTANT:
			case DATATYPE:
			case DEBUG:
			case DETAIL:
			case DIAGNOSTICS:
			case ELSEIF:
			case ELSIF:
			case ERRCODE:
			case EXIT:
			case EXCEPTION:
			case FOREACH:
			case GET:
			case HINT:
			case INFO:
			case LOG:
			case LOOP:
			case MESSAGE:
			case NOTICE:
			case OPEN:
			case PERFORM:
			case QUERY:
			case RAISE:
			case RECORD:
			case RETURN:
			case REVERSE:
			case ROWTYPE:
			case SLICE:
			case SQLSTATE:
			case STACKED:
			case WARNING:
			case WHILE:
			case Identifier:
			case QuotedIdentifier:
				{
				setState(7262);
				schema_qualified_name();
				}
				break;
			case DOLLAR_NUMBER:
				{
				setState(7263);
				match(DOLLAR_NUMBER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(7272);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==LEFT_BRACKET) {
				{
				{
				setState(7266);
				match(LEFT_BRACKET);
				setState(7267);
				vex(0);
				setState(7268);
				match(RIGHT_BRACKET);
				}
				}
				setState(7274);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Diagnostic_optionContext extends ParserRuleContext {
		public VarContext var() {
			return getRuleContext(VarContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode COLON_EQUAL() { return getToken(PLpgSQLParser.COLON_EQUAL, 0); }
		public TerminalNode EQUAL() { return getToken(PLpgSQLParser.EQUAL, 0); }
		public Diagnostic_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diagnostic_option; }
	}

	public final Diagnostic_optionContext diagnostic_option() throws RecognitionException {
		Diagnostic_optionContext _localctx = new Diagnostic_optionContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_diagnostic_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7275);
			var();
			setState(7276);
			_la = _input.LA(1);
			if ( !(_la==EQUAL || _la==COLON_EQUAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7277);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Perform_stmtContext extends ParserRuleContext {
		public Select_listContext select_list() {
			return getRuleContext(Select_listContext.class,0);
		}
		public List<Set_qualifierContext> set_qualifier() {
			return getRuleContexts(Set_qualifierContext.class);
		}
		public Set_qualifierContext set_qualifier(int i) {
			return getRuleContext(Set_qualifierContext.class,i);
		}
		public TerminalNode FROM() { return getToken(PLpgSQLParser.FROM, 0); }
		public List<From_itemContext> from_item() {
			return getRuleContexts(From_itemContext.class);
		}
		public From_itemContext from_item(int i) {
			return getRuleContext(From_itemContext.class,i);
		}
		public TerminalNode WHERE() { return getToken(PLpgSQLParser.WHERE, 0); }
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public Groupby_clauseContext groupby_clause() {
			return getRuleContext(Groupby_clauseContext.class,0);
		}
		public TerminalNode HAVING() { return getToken(PLpgSQLParser.HAVING, 0); }
		public TerminalNode WINDOW() { return getToken(PLpgSQLParser.WINDOW, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> AS() { return getTokens(PLpgSQLParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(PLpgSQLParser.AS, i);
		}
		public List<Window_definitionContext> window_definition() {
			return getRuleContexts(Window_definitionContext.class);
		}
		public Window_definitionContext window_definition(int i) {
			return getRuleContext(Window_definitionContext.class,i);
		}
		public Select_opsContext select_ops() {
			return getRuleContext(Select_opsContext.class,0);
		}
		public List<After_opsContext> after_ops() {
			return getRuleContexts(After_opsContext.class);
		}
		public After_opsContext after_ops(int i) {
			return getRuleContext(After_opsContext.class,i);
		}
		public TerminalNode INTERSECT() { return getToken(PLpgSQLParser.INTERSECT, 0); }
		public TerminalNode UNION() { return getToken(PLpgSQLParser.UNION, 0); }
		public TerminalNode EXCEPT() { return getToken(PLpgSQLParser.EXCEPT, 0); }
		public TerminalNode ON() { return getToken(PLpgSQLParser.ON, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Perform_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_perform_stmt; }
	}

	public final Perform_stmtContext perform_stmt() throws RecognitionException {
		Perform_stmtContext _localctx = new Perform_stmtContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_perform_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7294);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,977,_ctx) ) {
			case 1:
				{
				setState(7279);
				set_qualifier();
				setState(7292);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,976,_ctx) ) {
				case 1:
					{
					setState(7280);
					match(ON);
					setState(7281);
					match(LEFT_PAREN);
					setState(7282);
					vex(0);
					setState(7287);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(7283);
						match(COMMA);
						setState(7284);
						vex(0);
						}
						}
						setState(7289);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(7290);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			}
			setState(7296);
			select_list();
			setState(7306);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(7297);
				match(FROM);
				setState(7298);
				from_item(0);
				setState(7303);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7299);
					match(COMMA);
					setState(7300);
					from_item(0);
					}
					}
					setState(7305);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(7310);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(7308);
				match(WHERE);
				setState(7309);
				vex(0);
				}
			}

			setState(7313);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GROUP) {
				{
				setState(7312);
				groupby_clause();
				}
			}

			setState(7317);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HAVING) {
				{
				setState(7315);
				match(HAVING);
				setState(7316);
				vex(0);
				}
			}

			setState(7333);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WINDOW) {
				{
				setState(7319);
				match(WINDOW);
				setState(7320);
				identifier();
				setState(7321);
				match(AS);
				setState(7322);
				window_definition();
				setState(7330);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7323);
					match(COMMA);
					setState(7324);
					identifier();
					setState(7325);
					match(AS);
					setState(7326);
					window_definition();
					}
					}
					setState(7332);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(7340);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 396)) & ~0x3f) == 0 && ((1L << (_la - 396)) & ((1L << (EXCEPT - 396)) | (1L << (INTERSECT - 396)) | (1L << (UNION - 396)))) != 0)) {
				{
				setState(7335);
				_la = _input.LA(1);
				if ( !(((((_la - 396)) & ~0x3f) == 0 && ((1L << (_la - 396)) & ((1L << (EXCEPT - 396)) | (1L << (INTERSECT - 396)) | (1L << (UNION - 396)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7337);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					setState(7336);
					set_qualifier();
					}
				}

				setState(7339);
				select_ops(0);
				}
			}

			setState(7345);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (FETCH - 398)) | (1L << (FOR - 398)) | (1L << (LIMIT - 398)) | (1L << (OFFSET - 398)) | (1L << (ORDER - 398)))) != 0)) {
				{
				{
				setState(7342);
				after_ops();
				}
				}
				setState(7347);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assign_stmtContext extends ParserRuleContext {
		public VarContext var() {
			return getRuleContext(VarContext.class,0);
		}
		public TerminalNode COLON_EQUAL() { return getToken(PLpgSQLParser.COLON_EQUAL, 0); }
		public TerminalNode EQUAL() { return getToken(PLpgSQLParser.EQUAL, 0); }
		public Select_stmt_no_parensContext select_stmt_no_parens() {
			return getRuleContext(Select_stmt_no_parensContext.class,0);
		}
		public Perform_stmtContext perform_stmt() {
			return getRuleContext(Perform_stmtContext.class,0);
		}
		public Assign_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assign_stmt; }
	}

	public final Assign_stmtContext assign_stmt() throws RecognitionException {
		Assign_stmtContext _localctx = new Assign_stmtContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_assign_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7348);
			var();
			setState(7349);
			_la = _input.LA(1);
			if ( !(_la==EQUAL || _la==COLON_EQUAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7352);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,988,_ctx) ) {
			case 1:
				{
				setState(7350);
				select_stmt_no_parens();
				}
				break;
			case 2:
				{
				setState(7351);
				perform_stmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_stmtContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(PLpgSQLParser.EXECUTE, 0); }
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public Using_vexContext using_vex() {
			return getRuleContext(Using_vexContext.class,0);
		}
		public Execute_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_stmt; }
	}

	public final Execute_stmtContext execute_stmt() throws RecognitionException {
		Execute_stmtContext _localctx = new Execute_stmtContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_execute_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7354);
			match(EXECUTE);
			setState(7355);
			vex(0);
			setState(7357);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(7356);
				using_vex();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Control_statementContext extends ParserRuleContext {
		public Return_stmtContext return_stmt() {
			return getRuleContext(Return_stmtContext.class,0);
		}
		public TerminalNode CALL() { return getToken(PLpgSQLParser.CALL, 0); }
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public If_statementContext if_statement() {
			return getRuleContext(If_statementContext.class,0);
		}
		public Case_statementContext case_statement() {
			return getRuleContext(Case_statementContext.class,0);
		}
		public Loop_statementContext loop_statement() {
			return getRuleContext(Loop_statementContext.class,0);
		}
		public Control_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_control_statement; }
	}

	public final Control_statementContext control_statement() throws RecognitionException {
		Control_statementContext _localctx = new Control_statementContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_control_statement);
		try {
			setState(7365);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RETURN:
				enterOuterAlt(_localctx, 1);
				{
				setState(7359);
				return_stmt();
				}
				break;
			case CALL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7360);
				match(CALL);
				setState(7361);
				function_call();
				}
				break;
			case IF:
				enterOuterAlt(_localctx, 3);
				{
				setState(7362);
				if_statement();
				}
				break;
			case CASE:
				enterOuterAlt(_localctx, 4);
				{
				setState(7363);
				case_statement();
				}
				break;
			case CONTINUE:
			case FOR:
			case EXIT:
			case FOREACH:
			case LOOP:
			case WHILE:
			case LESS_LESS:
				enterOuterAlt(_localctx, 5);
				{
				setState(7364);
				loop_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_statementContext extends ParserRuleContext {
		public TerminalNode OPEN() { return getToken(PLpgSQLParser.OPEN, 0); }
		public VarContext var() {
			return getRuleContext(VarContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PLpgSQLParser.FOR, 0); }
		public Plpgsql_queryContext plpgsql_query() {
			return getRuleContext(Plpgsql_queryContext.class,0);
		}
		public TerminalNode SCROLL() { return getToken(PLpgSQLParser.SCROLL, 0); }
		public TerminalNode NO() { return getToken(PLpgSQLParser.NO, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public List<OptionContext> option() {
			return getRuleContexts(OptionContext.class);
		}
		public OptionContext option(int i) {
			return getRuleContext(OptionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public TerminalNode FETCH() { return getToken(PLpgSQLParser.FETCH, 0); }
		public Fetch_move_directionContext fetch_move_direction() {
			return getRuleContext(Fetch_move_directionContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PLpgSQLParser.FROM, 0); }
		public TerminalNode IN() { return getToken(PLpgSQLParser.IN, 0); }
		public TerminalNode MOVE() { return getToken(PLpgSQLParser.MOVE, 0); }
		public TerminalNode CLOSE() { return getToken(PLpgSQLParser.CLOSE, 0); }
		public Cursor_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_statement; }
	}

	public final Cursor_statementContext cursor_statement() throws RecognitionException {
		Cursor_statementContext _localctx = new Cursor_statementContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_cursor_statement);
		int _la;
		try {
			setState(7411);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,999,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7367);
				match(OPEN);
				setState(7368);
				var();
				setState(7373);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO || _la==SCROLL) {
					{
					setState(7370);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NO) {
						{
						setState(7369);
						match(NO);
						}
					}

					setState(7372);
					match(SCROLL);
					}
				}

				setState(7375);
				match(FOR);
				setState(7376);
				plpgsql_query();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7378);
				match(OPEN);
				setState(7379);
				var();
				setState(7391);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(7380);
					match(LEFT_PAREN);
					setState(7381);
					option();
					setState(7386);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(7382);
						match(COMMA);
						setState(7383);
						option();
						}
						}
						setState(7388);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(7389);
					match(RIGHT_PAREN);
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7393);
				match(FETCH);
				setState(7395);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,995,_ctx) ) {
				case 1:
					{
					setState(7394);
					fetch_move_direction();
					}
					break;
				}
				setState(7398);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(7397);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(7400);
				var();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7401);
				match(MOVE);
				setState(7403);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,997,_ctx) ) {
				case 1:
					{
					setState(7402);
					fetch_move_direction();
					}
					break;
				}
				setState(7406);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(7405);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(7408);
				var();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7409);
				match(CLOSE);
				setState(7410);
				var();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptionContext extends ParserRuleContext {
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode COLON_EQUAL() { return getToken(PLpgSQLParser.COLON_EQUAL, 0); }
		public OptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_option; }
	}

	public final OptionContext option() throws RecognitionException {
		OptionContext _localctx = new OptionContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7416);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1000,_ctx) ) {
			case 1:
				{
				setState(7413);
				identifier();
				setState(7414);
				match(COLON_EQUAL);
				}
				break;
			}
			setState(7418);
			vex(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_statementContext extends ParserRuleContext {
		public TerminalNode COMMIT() { return getToken(PLpgSQLParser.COMMIT, 0); }
		public TerminalNode ROLLBACK() { return getToken(PLpgSQLParser.ROLLBACK, 0); }
		public TerminalNode AND() { return getToken(PLpgSQLParser.AND, 0); }
		public TerminalNode CHAIN() { return getToken(PLpgSQLParser.CHAIN, 0); }
		public TerminalNode NO() { return getToken(PLpgSQLParser.NO, 0); }
		public Lock_tableContext lock_table() {
			return getRuleContext(Lock_tableContext.class,0);
		}
		public Transaction_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_statement; }
	}

	public final Transaction_statementContext transaction_statement() throws RecognitionException {
		Transaction_statementContext _localctx = new Transaction_statementContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_transaction_statement);
		int _la;
		try {
			setState(7429);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMMIT:
			case ROLLBACK:
				enterOuterAlt(_localctx, 1);
				{
				setState(7420);
				_la = _input.LA(1);
				if ( !(_la==COMMIT || _la==ROLLBACK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7426);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AND) {
					{
					setState(7421);
					match(AND);
					setState(7423);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NO) {
						{
						setState(7422);
						match(NO);
						}
					}

					setState(7425);
					match(CHAIN);
					}
				}

				}
				break;
			case LOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(7428);
				lock_table();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Message_statementContext extends ParserRuleContext {
		public TerminalNode RAISE() { return getToken(PLpgSQLParser.RAISE, 0); }
		public Log_levelContext log_level() {
			return getRuleContext(Log_levelContext.class,0);
		}
		public Character_stringContext character_string() {
			return getRuleContext(Character_stringContext.class,0);
		}
		public Raise_usingContext raise_using() {
			return getRuleContext(Raise_usingContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode SQLSTATE() { return getToken(PLpgSQLParser.SQLSTATE, 0); }
		public TerminalNode ASSERT() { return getToken(PLpgSQLParser.ASSERT, 0); }
		public Message_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_message_statement; }
	}

	public final Message_statementContext message_statement() throws RecognitionException {
		Message_statementContext _localctx = new Message_statementContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_message_statement);
		int _la;
		try {
			setState(7471);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1013,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7431);
				match(RAISE);
				setState(7433);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 546)) & ~0x3f) == 0 && ((1L << (_la - 546)) & ((1L << (DEBUG - 546)) | (1L << (EXCEPTION - 546)) | (1L << (INFO - 546)) | (1L << (LOG - 546)) | (1L << (NOTICE - 546)) | (1L << (WARNING - 546)))) != 0)) {
					{
					setState(7432);
					log_level();
					}
				}

				setState(7443);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==Character_String_Literal || _la==BeginDollarStringConstant) {
					{
					setState(7435);
					character_string();
					setState(7440);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(7436);
						match(COMMA);
						setState(7437);
						vex(0);
						}
						}
						setState(7442);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(7446);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(7445);
					raise_using();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7448);
				match(RAISE);
				setState(7450);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1008,_ctx) ) {
				case 1:
					{
					setState(7449);
					log_level();
					}
					break;
				}
				setState(7452);
				identifier();
				setState(7454);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(7453);
					raise_using();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7456);
				match(RAISE);
				setState(7458);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 546)) & ~0x3f) == 0 && ((1L << (_la - 546)) & ((1L << (DEBUG - 546)) | (1L << (EXCEPTION - 546)) | (1L << (INFO - 546)) | (1L << (LOG - 546)) | (1L << (NOTICE - 546)) | (1L << (WARNING - 546)))) != 0)) {
					{
					setState(7457);
					log_level();
					}
				}

				setState(7460);
				match(SQLSTATE);
				setState(7461);
				character_string();
				setState(7463);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(7462);
					raise_using();
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7465);
				match(ASSERT);
				setState(7466);
				vex(0);
				setState(7469);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(7467);
					match(COMMA);
					setState(7468);
					vex(0);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Log_levelContext extends ParserRuleContext {
		public TerminalNode DEBUG() { return getToken(PLpgSQLParser.DEBUG, 0); }
		public TerminalNode LOG() { return getToken(PLpgSQLParser.LOG, 0); }
		public TerminalNode INFO() { return getToken(PLpgSQLParser.INFO, 0); }
		public TerminalNode NOTICE() { return getToken(PLpgSQLParser.NOTICE, 0); }
		public TerminalNode WARNING() { return getToken(PLpgSQLParser.WARNING, 0); }
		public TerminalNode EXCEPTION() { return getToken(PLpgSQLParser.EXCEPTION, 0); }
		public Log_levelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_log_level; }
	}

	public final Log_levelContext log_level() throws RecognitionException {
		Log_levelContext _localctx = new Log_levelContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_log_level);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7473);
			_la = _input.LA(1);
			if ( !(((((_la - 546)) & ~0x3f) == 0 && ((1L << (_la - 546)) & ((1L << (DEBUG - 546)) | (1L << (EXCEPTION - 546)) | (1L << (INFO - 546)) | (1L << (LOG - 546)) | (1L << (NOTICE - 546)) | (1L << (WARNING - 546)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Raise_usingContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PLpgSQLParser.USING, 0); }
		public List<Raise_paramContext> raise_param() {
			return getRuleContexts(Raise_paramContext.class);
		}
		public Raise_paramContext raise_param(int i) {
			return getRuleContext(Raise_paramContext.class,i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(PLpgSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(PLpgSQLParser.EQUAL, i);
		}
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Raise_usingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_raise_using; }
	}

	public final Raise_usingContext raise_using() throws RecognitionException {
		Raise_usingContext _localctx = new Raise_usingContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_raise_using);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7475);
			match(USING);
			setState(7476);
			raise_param();
			setState(7477);
			match(EQUAL);
			setState(7478);
			vex(0);
			setState(7486);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7479);
				match(COMMA);
				setState(7480);
				raise_param();
				setState(7481);
				match(EQUAL);
				setState(7482);
				vex(0);
				}
				}
				setState(7488);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Raise_paramContext extends ParserRuleContext {
		public TerminalNode MESSAGE() { return getToken(PLpgSQLParser.MESSAGE, 0); }
		public TerminalNode DETAIL() { return getToken(PLpgSQLParser.DETAIL, 0); }
		public TerminalNode HINT() { return getToken(PLpgSQLParser.HINT, 0); }
		public TerminalNode ERRCODE() { return getToken(PLpgSQLParser.ERRCODE, 0); }
		public TerminalNode COLUMN() { return getToken(PLpgSQLParser.COLUMN, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PLpgSQLParser.CONSTRAINT, 0); }
		public TerminalNode DATATYPE() { return getToken(PLpgSQLParser.DATATYPE, 0); }
		public TerminalNode TABLE() { return getToken(PLpgSQLParser.TABLE, 0); }
		public TerminalNode SCHEMA() { return getToken(PLpgSQLParser.SCHEMA, 0); }
		public Raise_paramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_raise_param; }
	}

	public final Raise_paramContext raise_param() throws RecognitionException {
		Raise_paramContext _localctx = new Raise_paramContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_raise_param);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7489);
			_la = _input.LA(1);
			if ( !(_la==SCHEMA || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (COLUMN - 380)) | (1L << (CONSTRAINT - 380)) | (1L << (TABLE - 380)))) != 0) || ((((_la - 545)) & ~0x3f) == 0 && ((1L << (_la - 545)) & ((1L << (DATATYPE - 545)) | (1L << (DETAIL - 545)) | (1L << (ERRCODE - 545)) | (1L << (HINT - 545)) | (1L << (MESSAGE - 545)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Return_stmtContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(PLpgSQLParser.RETURN, 0); }
		public Perform_stmtContext perform_stmt() {
			return getRuleContext(Perform_stmtContext.class,0);
		}
		public TerminalNode NEXT() { return getToken(PLpgSQLParser.NEXT, 0); }
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public TerminalNode QUERY() { return getToken(PLpgSQLParser.QUERY, 0); }
		public Plpgsql_queryContext plpgsql_query() {
			return getRuleContext(Plpgsql_queryContext.class,0);
		}
		public Return_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_stmt; }
	}

	public final Return_stmtContext return_stmt() throws RecognitionException {
		Return_stmtContext _localctx = new Return_stmtContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_return_stmt);
		int _la;
		try {
			setState(7501);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1016,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7491);
				match(RETURN);
				setState(7493);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATTACH) | (1L << ATTRIBUTE) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BY) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG) | (1L << CHAIN) | (1L << CHARACTERISTICS) | (1L << CHECKPOINT) | (1L << CLASS) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMENTS) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONFIGURATION) | (1L << CONFLICT) | (1L << CONNECTION) | (1L << CONSTRAINTS) | (1L << CONTENT) | (1L << CONTINUE) | (1L << CONVERSION) | (1L << COPY) | (1L << COST) | (1L << CSV) | (1L << CUBE) | (1L << CURRENT) | (1L << CURSOR) | (1L << CYCLE) | (1L << DATA) | (1L << DATABASE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DEFAULTS) | (1L << DEFERRED) | (1L << DEFINER) | (1L << DELETE) | (1L << DELIMITER) | (1L << DELIMITERS) | (1L << DEPENDS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DETACH - 64)) | (1L << (DICTIONARY - 64)) | (1L << (DISABLE - 64)) | (1L << (DISCARD - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOMAIN - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (EACH - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTED - 64)) | (1L << (ENUM - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVENT - 64)) | (1L << (EXCLUDE - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXCLUSIVE - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTENSION - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FAMILY - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORCE - 64)) | (1L << (FORWARD - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GENERATED - 64)) | (1L << (GLOBAL - 64)) | (1L << (GRANTED - 64)) | (1L << (GROUPS - 64)) | (1L << (HANDLER - 64)) | (1L << (HEADER - 64)) | (1L << (HOLD - 64)) | (1L << (HOUR - 64)) | (1L << (IDENTITY - 64)) | (1L << (IF - 64)) | (1L << (IMMEDIATE - 64)) | (1L << (IMMUTABLE - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPORT - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INCREMENT - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXES - 64)) | (1L << (INHERIT - 64)) | (1L << (INHERITS - 64)) | (1L << (INLINE - 64)) | (1L << (INPUT - 64)) | (1L << (INSENSITIVE - 64)) | (1L << (INSERT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INVOKER - 64)) | (1L << (ISOLATION - 64)) | (1L << (KEY - 64)) | (1L << (LABEL - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LARGE - 64)) | (1L << (LAST - 64)) | (1L << (LEAKPROOF - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LEVEL - 128)) | (1L << (LISTEN - 128)) | (1L << (LOAD - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCATION - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKED - 128)) | (1L << (LOGGED - 128)) | (1L << (MAPPING - 128)) | (1L << (MATCH - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MAXVALUE - 128)) | (1L << (METHOD - 128)) | (1L << (MINUTE - 128)) | (1L << (MINVALUE - 128)) | (1L << (MODE - 128)) | (1L << (MONTH - 128)) | (1L << (MOVE - 128)) | (1L << (NAME - 128)) | (1L << (NAMES - 128)) | (1L << (NEW - 128)) | (1L << (NEXT - 128)) | (1L << (NO - 128)) | (1L << (NOTHING - 128)) | (1L << (NOTIFY - 128)) | (1L << (NOWAIT - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFF - 128)) | (1L << (OIDS - 128)) | (1L << (OLD - 128)) | (1L << (OPERATOR - 128)) | (1L << (OPTION - 128)) | (1L << (OPTIONS - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OTHERS - 128)) | (1L << (OVER - 128)) | (1L << (OVERRIDING - 128)) | (1L << (OWNED - 128)) | (1L << (OWNER - 128)) | (1L << (PARALLEL - 128)) | (1L << (PARSER - 128)) | (1L << (PARTIAL - 128)) | (1L << (PARTITION - 128)) | (1L << (PASSING - 128)) | (1L << (PASSWORD - 128)) | (1L << (PLANS - 128)) | (1L << (POLICY - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PREPARED - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRIOR - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROCEDURAL - 128)) | (1L << (PROCEDURE - 128)) | (1L << (PROCEDURES - 128)) | (1L << (PROGRAM - 128)) | (1L << (PUBLICATION - 128)) | (1L << (QUOTE - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (REASSIGN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (RECHECK - 192)) | (1L << (RECURSIVE - 192)) | (1L << (REF - 192)) | (1L << (REFERENCING - 192)) | (1L << (REFRESH - 192)) | (1L << (REINDEX - 192)) | (1L << (RELATIVE - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (REPLICA - 192)) | (1L << (RESET - 192)) | (1L << (RESTART - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUTINE - 192)) | (1L << (ROUTINES - 192)) | (1L << (ROWS - 192)) | (1L << (RULE - 192)) | (1L << (SAVEPOINT - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SCROLL - 192)) | (1L << (SEARCH - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEQUENCE - 192)) | (1L << (SEQUENCES - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SERVER - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHARE - 192)) | (1L << (SHOW - 192)) | (1L << (SIMPLE - 192)) | (1L << (SKIP_ - 192)) | (1L << (SNAPSHOT - 192)) | (1L << (SQL - 192)) | (1L << (STABLE - 192)) | (1L << (STANDALONE - 192)) | (1L << (START - 192)) | (1L << (STATEMENT - 192)) | (1L << (STATISTICS - 192)) | (1L << (STDIN - 192)) | (1L << (STDOUT - 192)) | (1L << (STORAGE - 192)) | (1L << (STORED - 192)) | (1L << (STRICT - 192)) | (1L << (STRIP - 192)) | (1L << (SUBSCRIPTION - 192)) | (1L << (SUPPORT - 192)) | (1L << (SYSID - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESPACE - 192)) | (1L << (TEMP - 192)) | (1L << (TEMPLATE - 192)) | (1L << (TEMPORARY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TEXT - 256)) | (1L << (TIES - 256)) | (1L << (TRANSACTION - 256)) | (1L << (TRANSFORM - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TRUSTED - 256)) | (1L << (TYPE - 256)) | (1L << (TYPES - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNENCRYPTED - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNLISTEN - 256)) | (1L << (UNLOGGED - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (VACUUM - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALIDATOR - 256)) | (1L << (VALUE - 256)) | (1L << (VARYING - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (VIEWS - 256)) | (1L << (VOLATILE - 256)) | (1L << (WHITESPACE - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (XML - 256)) | (1L << (YEAR - 256)) | (1L << (YES - 256)) | (1L << (ZONE - 256)) | (1L << (BETWEEN - 256)) | (1L << (BIGINT - 256)) | (1L << (BIT - 256)) | (1L << (BOOLEAN - 256)) | (1L << (CHAR - 256)) | (1L << (CHARACTER - 256)) | (1L << (COALESCE - 256)) | (1L << (DEC - 256)) | (1L << (DECIMAL - 256)) | (1L << (EXISTS - 256)) | (1L << (EXTRACT - 256)) | (1L << (FLOAT - 256)) | (1L << (GREATEST - 256)) | (1L << (GROUPING - 256)) | (1L << (INOUT - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERVAL - 256)) | (1L << (LEAST - 256)) | (1L << (NATIONAL - 256)) | (1L << (NCHAR - 256)) | (1L << (NONE - 256)) | (1L << (NULLIF - 256)) | (1L << (NUMERIC - 256)) | (1L << (OUT - 256)) | (1L << (OVERLAY - 256)) | (1L << (POSITION - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRECISION - 320)) | (1L << (REAL - 320)) | (1L << (ROW - 320)) | (1L << (SETOF - 320)) | (1L << (SMALLINT - 320)) | (1L << (SUBSTRING - 320)) | (1L << (TIME - 320)) | (1L << (TIMESTAMP - 320)) | (1L << (TREAT - 320)) | (1L << (TRIM - 320)) | (1L << (VALUES - 320)) | (1L << (VARCHAR - 320)) | (1L << (XMLATTRIBUTES - 320)) | (1L << (XMLCONCAT - 320)) | (1L << (XMLELEMENT - 320)) | (1L << (XMLEXISTS - 320)) | (1L << (XMLFOREST - 320)) | (1L << (XMLNAMESPACES - 320)) | (1L << (XMLPARSE - 320)) | (1L << (XMLPI - 320)) | (1L << (XMLROOT - 320)) | (1L << (XMLSERIALIZE - 320)) | (1L << (XMLTABLE - 320)) | (1L << (AUTHORIZATION - 320)) | (1L << (BINARY - 320)) | (1L << (COLLATION - 320)) | (1L << (CONCURRENTLY - 320)) | (1L << (CROSS - 320)) | (1L << (CURRENT_SCHEMA - 320)) | (1L << (FREEZE - 320)) | (1L << (FULL - 320)) | (1L << (ILIKE - 320)) | (1L << (INNER - 320)) | (1L << (IS - 320)) | (1L << (ISNULL - 320)) | (1L << (JOIN - 320)) | (1L << (LEFT - 320)) | (1L << (LIKE - 320)) | (1L << (NATURAL - 320)) | (1L << (NOTNULL - 320)) | (1L << (OUTER - 320)) | (1L << (OVERLAPS - 320)) | (1L << (RIGHT - 320)) | (1L << (SIMILAR - 320)) | (1L << (TABLESAMPLE - 320)) | (1L << (VERBOSE - 320)) | (1L << (ALL - 320)) | (1L << (ANY - 320)) | (1L << (ARRAY - 320)) | (1L << (CASE - 320)) | (1L << (CAST - 320)) | (1L << (CURRENT_CATALOG - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (CURRENT_DATE - 384)) | (1L << (CURRENT_TIME - 384)) | (1L << (CURRENT_TIMESTAMP - 384)) | (1L << (CURRENT_USER - 384)) | (1L << (DISTINCT - 384)) | (1L << (FALSE - 384)) | (1L << (LOCALTIME - 384)) | (1L << (LOCALTIMESTAMP - 384)) | (1L << (NOT - 384)) | (1L << (NULL - 384)) | (1L << (ON - 384)) | (1L << (SESSION_USER - 384)) | (1L << (SOME - 384)) | (1L << (TRUE - 384)) | (1L << (USER - 384)) | (1L << (ALIGNMENT - 384)) | (1L << (BASETYPE - 384)) | (1L << (BUFFERS - 384)) | (1L << (BYPASSRLS - 384)) | (1L << (CANONICAL - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (CATEGORY - 448)) | (1L << (COLLATABLE - 448)) | (1L << (COMBINEFUNC - 448)) | (1L << (COMMUTATOR - 448)) | (1L << (CONNECT - 448)) | (1L << (COSTS - 448)) | (1L << (CREATEDB - 448)) | (1L << (CREATEROLE - 448)) | (1L << (DESERIALFUNC - 448)) | (1L << (DETERMINISTIC - 448)) | (1L << (DISABLE_PAGE_SKIPPING - 448)) | (1L << (ELEMENT - 448)) | (1L << (EXTENDED - 448)) | (1L << (FINALFUNC - 448)) | (1L << (FINALFUNC_EXTRA - 448)) | (1L << (FINALFUNC_MODIFY - 448)) | (1L << (FORCE_NOT_NULL - 448)) | (1L << (FORCE_NULL - 448)) | (1L << (FORCE_QUOTE - 448)) | (1L << (FORMAT - 448)) | (1L << (GETTOKEN - 448)) | (1L << (HASH - 448)) | (1L << (HASHES - 448)) | (1L << (HEADLINE - 448)) | (1L << (HYPOTHETICAL - 448)) | (1L << (INDEX_CLEANUP - 448)) | (1L << (INIT - 448)) | (1L << (INITCOND - 448)) | (1L << (INTERNALLENGTH - 448)) | (1L << (JSON - 448)) | (1L << (LC_COLLATE - 448)) | (1L << (LC_CTYPE - 448)) | (1L << (LEFTARG - 448)) | (1L << (LEXIZE - 448)) | (1L << (LEXTYPES - 448)) | (1L << (LIST - 448)) | (1L << (LOCALE - 448)) | (1L << (LOGIN - 448)) | (1L << (MAIN - 448)) | (1L << (MERGES - 448)) | (1L << (MFINALFUNC - 448)) | (1L << (MFINALFUNC_EXTRA - 448)) | (1L << (MFINALFUNC_MODIFY - 448)) | (1L << (MINITCOND - 448)) | (1L << (MINVFUNC - 448)) | (1L << (MODULUS - 448)) | (1L << (MSFUNC - 448)) | (1L << (MSSPACE - 448)) | (1L << (MSTYPE - 448)) | (1L << (NEGATOR - 448)) | (1L << (NOBYPASSRLS - 448)) | (1L << (NOCREATEDB - 448)) | (1L << (NOCREATEROLE - 448)) | (1L << (NOINHERIT - 448)) | (1L << (NOLOGIN - 448)) | (1L << (NOREPLICATION - 448)) | (1L << (NOSUPERUSER - 448)) | (1L << (OUTPUT - 448)) | (1L << (PASSEDBYVALUE - 448)) | (1L << (PATH - 448)) | (1L << (PERMISSIVE - 448)) | (1L << (PLAIN - 448)) | (1L << (PREFERRED - 448)) | (1L << (PROVIDER - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (READ_ONLY - 512)) | (1L << (READ_WRITE - 512)) | (1L << (RECEIVE - 512)) | (1L << (REMAINDER - 512)) | (1L << (REPLICATION - 512)) | (1L << (RESTRICTED - 512)) | (1L << (RESTRICTIVE - 512)) | (1L << (RIGHTARG - 512)) | (1L << (SAFE - 512)) | (1L << (SEND - 512)) | (1L << (SERIALFUNC - 512)) | (1L << (SETTINGS - 512)) | (1L << (SFUNC - 512)) | (1L << (SHAREABLE - 512)) | (1L << (SKIP_LOCKED - 512)) | (1L << (SORTOP - 512)) | (1L << (SSPACE - 512)) | (1L << (STYPE - 512)) | (1L << (SUBTYPE_DIFF - 512)) | (1L << (SUBTYPE_OPCLASS - 512)) | (1L << (SUBTYPE - 512)) | (1L << (SUMMARY - 512)) | (1L << (SUPERUSER - 512)) | (1L << (TIMING - 512)) | (1L << (TYPMOD_IN - 512)) | (1L << (TYPMOD_OUT - 512)) | (1L << (UNSAFE - 512)) | (1L << (USAGE - 512)) | (1L << (VARIABLE - 512)) | (1L << (YAML - 512)) | (1L << (ALIAS - 512)) | (1L << (ASSERT - 512)) | (1L << (CONSTANT - 512)) | (1L << (DATATYPE - 512)) | (1L << (DEBUG - 512)) | (1L << (DETAIL - 512)) | (1L << (DIAGNOSTICS - 512)) | (1L << (ELSEIF - 512)) | (1L << (ELSIF - 512)) | (1L << (ERRCODE - 512)) | (1L << (EXIT - 512)) | (1L << (EXCEPTION - 512)) | (1L << (FOREACH - 512)) | (1L << (GET - 512)) | (1L << (HINT - 512)) | (1L << (INFO - 512)) | (1L << (LOG - 512)) | (1L << (LOOP - 512)) | (1L << (MESSAGE - 512)) | (1L << (NOTICE - 512)) | (1L << (OPEN - 512)) | (1L << (PERFORM - 512)) | (1L << (QUERY - 512)) | (1L << (RAISE - 512)) | (1L << (RECORD - 512)) | (1L << (RETURN - 512)) | (1L << (REVERSE - 512)) | (1L << (ROWTYPE - 512)) | (1L << (SLICE - 512)) | (1L << (SQLSTATE - 512)) | (1L << (STACKED - 512)) | (1L << (WARNING - 512)) | (1L << (WHILE - 512)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (LEFT_PAREN - 585)) | (1L << (PLUS - 585)) | (1L << (MINUS - 585)) | (1L << (MULTIPLY - 585)) | (1L << (LESS_LESS - 585)) | (1L << (GREATER_GREATER - 585)) | (1L << (HASH_SIGN - 585)) | (1L << (OP_CHARS - 585)) | (1L << (NUMBER_LITERAL - 585)) | (1L << (REAL_NUMBER - 585)) | (1L << (DOLLAR_NUMBER - 585)) | (1L << (Identifier - 585)) | (1L << (QuotedIdentifier - 585)) | (1L << (Character_String_Literal - 585)) | (1L << (BeginDollarStringConstant - 585)))) != 0)) {
					{
					setState(7492);
					perform_stmt();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7495);
				match(RETURN);
				setState(7496);
				match(NEXT);
				setState(7497);
				vex(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7498);
				match(RETURN);
				setState(7499);
				match(QUERY);
				setState(7500);
				plpgsql_query();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Loop_statementContext extends ParserRuleContext {
		public List<TerminalNode> LOOP() { return getTokens(PLpgSQLParser.LOOP); }
		public TerminalNode LOOP(int i) {
			return getToken(PLpgSQLParser.LOOP, i);
		}
		public Function_statementsContext function_statements() {
			return getRuleContext(Function_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(PLpgSQLParser.END, 0); }
		public Start_labelContext start_label() {
			return getRuleContext(Start_labelContext.class,0);
		}
		public Loop_startContext loop_start() {
			return getRuleContext(Loop_startContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode EXIT() { return getToken(PLpgSQLParser.EXIT, 0); }
		public TerminalNode CONTINUE() { return getToken(PLpgSQLParser.CONTINUE, 0); }
		public TerminalNode WHEN() { return getToken(PLpgSQLParser.WHEN, 0); }
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public Loop_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loop_statement; }
	}

	public final Loop_statementContext loop_statement() throws RecognitionException {
		Loop_statementContext _localctx = new Loop_statementContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_loop_statement);
		int _la;
		try {
			setState(7524);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
			case FOREACH:
			case LOOP:
			case WHILE:
			case LESS_LESS:
				enterOuterAlt(_localctx, 1);
				{
				setState(7504);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LESS_LESS) {
					{
					setState(7503);
					start_label();
					}
				}

				setState(7507);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR || _la==FOREACH || _la==WHILE) {
					{
					setState(7506);
					loop_start();
					}
				}

				setState(7509);
				match(LOOP);
				setState(7510);
				function_statements();
				setState(7511);
				match(END);
				setState(7512);
				match(LOOP);
				setState(7514);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATTACH) | (1L << ATTRIBUTE) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BY) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG) | (1L << CHAIN) | (1L << CHARACTERISTICS) | (1L << CHECKPOINT) | (1L << CLASS) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMENTS) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONFIGURATION) | (1L << CONFLICT) | (1L << CONNECTION) | (1L << CONSTRAINTS) | (1L << CONTENT) | (1L << CONTINUE) | (1L << CONVERSION) | (1L << COPY) | (1L << COST) | (1L << CSV) | (1L << CUBE) | (1L << CURRENT) | (1L << CURSOR) | (1L << CYCLE) | (1L << DATA) | (1L << DATABASE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DEFAULTS) | (1L << DEFERRED) | (1L << DEFINER) | (1L << DELETE) | (1L << DELIMITER) | (1L << DELIMITERS) | (1L << DEPENDS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DETACH - 64)) | (1L << (DICTIONARY - 64)) | (1L << (DISABLE - 64)) | (1L << (DISCARD - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOMAIN - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (EACH - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTED - 64)) | (1L << (ENUM - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVENT - 64)) | (1L << (EXCLUDE - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXCLUSIVE - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTENSION - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FAMILY - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORCE - 64)) | (1L << (FORWARD - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GENERATED - 64)) | (1L << (GLOBAL - 64)) | (1L << (GRANTED - 64)) | (1L << (GROUPS - 64)) | (1L << (HANDLER - 64)) | (1L << (HEADER - 64)) | (1L << (HOLD - 64)) | (1L << (HOUR - 64)) | (1L << (IDENTITY - 64)) | (1L << (IF - 64)) | (1L << (IMMEDIATE - 64)) | (1L << (IMMUTABLE - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPORT - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INCREMENT - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXES - 64)) | (1L << (INHERIT - 64)) | (1L << (INHERITS - 64)) | (1L << (INLINE - 64)) | (1L << (INPUT - 64)) | (1L << (INSENSITIVE - 64)) | (1L << (INSERT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INVOKER - 64)) | (1L << (ISOLATION - 64)) | (1L << (KEY - 64)) | (1L << (LABEL - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LARGE - 64)) | (1L << (LAST - 64)) | (1L << (LEAKPROOF - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LEVEL - 128)) | (1L << (LISTEN - 128)) | (1L << (LOAD - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCATION - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKED - 128)) | (1L << (LOGGED - 128)) | (1L << (MAPPING - 128)) | (1L << (MATCH - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MAXVALUE - 128)) | (1L << (METHOD - 128)) | (1L << (MINUTE - 128)) | (1L << (MINVALUE - 128)) | (1L << (MODE - 128)) | (1L << (MONTH - 128)) | (1L << (MOVE - 128)) | (1L << (NAME - 128)) | (1L << (NAMES - 128)) | (1L << (NEW - 128)) | (1L << (NEXT - 128)) | (1L << (NO - 128)) | (1L << (NOTHING - 128)) | (1L << (NOTIFY - 128)) | (1L << (NOWAIT - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFF - 128)) | (1L << (OIDS - 128)) | (1L << (OLD - 128)) | (1L << (OPERATOR - 128)) | (1L << (OPTION - 128)) | (1L << (OPTIONS - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OTHERS - 128)) | (1L << (OVER - 128)) | (1L << (OVERRIDING - 128)) | (1L << (OWNED - 128)) | (1L << (OWNER - 128)) | (1L << (PARALLEL - 128)) | (1L << (PARSER - 128)) | (1L << (PARTIAL - 128)) | (1L << (PARTITION - 128)) | (1L << (PASSING - 128)) | (1L << (PASSWORD - 128)) | (1L << (PLANS - 128)) | (1L << (POLICY - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PREPARED - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRIOR - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROCEDURAL - 128)) | (1L << (PROCEDURE - 128)) | (1L << (PROCEDURES - 128)) | (1L << (PROGRAM - 128)) | (1L << (PUBLICATION - 128)) | (1L << (QUOTE - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (REASSIGN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (RECHECK - 192)) | (1L << (RECURSIVE - 192)) | (1L << (REF - 192)) | (1L << (REFERENCING - 192)) | (1L << (REFRESH - 192)) | (1L << (REINDEX - 192)) | (1L << (RELATIVE - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (REPLICA - 192)) | (1L << (RESET - 192)) | (1L << (RESTART - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUTINE - 192)) | (1L << (ROUTINES - 192)) | (1L << (ROWS - 192)) | (1L << (RULE - 192)) | (1L << (SAVEPOINT - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SCROLL - 192)) | (1L << (SEARCH - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEQUENCE - 192)) | (1L << (SEQUENCES - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SERVER - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHARE - 192)) | (1L << (SHOW - 192)) | (1L << (SIMPLE - 192)) | (1L << (SKIP_ - 192)) | (1L << (SNAPSHOT - 192)) | (1L << (SQL - 192)) | (1L << (STABLE - 192)) | (1L << (STANDALONE - 192)) | (1L << (START - 192)) | (1L << (STATEMENT - 192)) | (1L << (STATISTICS - 192)) | (1L << (STDIN - 192)) | (1L << (STDOUT - 192)) | (1L << (STORAGE - 192)) | (1L << (STORED - 192)) | (1L << (STRICT - 192)) | (1L << (STRIP - 192)) | (1L << (SUBSCRIPTION - 192)) | (1L << (SUPPORT - 192)) | (1L << (SYSID - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESPACE - 192)) | (1L << (TEMP - 192)) | (1L << (TEMPLATE - 192)) | (1L << (TEMPORARY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TEXT - 256)) | (1L << (TIES - 256)) | (1L << (TRANSACTION - 256)) | (1L << (TRANSFORM - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TRUSTED - 256)) | (1L << (TYPE - 256)) | (1L << (TYPES - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNENCRYPTED - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNLISTEN - 256)) | (1L << (UNLOGGED - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (VACUUM - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALIDATOR - 256)) | (1L << (VALUE - 256)) | (1L << (VARYING - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (VIEWS - 256)) | (1L << (VOLATILE - 256)) | (1L << (WHITESPACE - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (XML - 256)) | (1L << (YEAR - 256)) | (1L << (YES - 256)) | (1L << (ZONE - 256)) | (1L << (BETWEEN - 256)) | (1L << (BIGINT - 256)) | (1L << (BIT - 256)) | (1L << (BOOLEAN - 256)) | (1L << (CHAR - 256)) | (1L << (CHARACTER - 256)) | (1L << (COALESCE - 256)) | (1L << (DEC - 256)) | (1L << (DECIMAL - 256)) | (1L << (EXISTS - 256)) | (1L << (EXTRACT - 256)) | (1L << (FLOAT - 256)) | (1L << (GREATEST - 256)) | (1L << (GROUPING - 256)) | (1L << (INOUT - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERVAL - 256)) | (1L << (LEAST - 256)) | (1L << (NATIONAL - 256)) | (1L << (NCHAR - 256)) | (1L << (NONE - 256)) | (1L << (NULLIF - 256)) | (1L << (NUMERIC - 256)) | (1L << (OUT - 256)) | (1L << (OVERLAY - 256)) | (1L << (POSITION - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRECISION - 320)) | (1L << (REAL - 320)) | (1L << (ROW - 320)) | (1L << (SETOF - 320)) | (1L << (SMALLINT - 320)) | (1L << (SUBSTRING - 320)) | (1L << (TIME - 320)) | (1L << (TIMESTAMP - 320)) | (1L << (TREAT - 320)) | (1L << (TRIM - 320)) | (1L << (VALUES - 320)) | (1L << (VARCHAR - 320)) | (1L << (XMLATTRIBUTES - 320)) | (1L << (XMLCONCAT - 320)) | (1L << (XMLELEMENT - 320)) | (1L << (XMLEXISTS - 320)) | (1L << (XMLFOREST - 320)) | (1L << (XMLNAMESPACES - 320)) | (1L << (XMLPARSE - 320)) | (1L << (XMLPI - 320)) | (1L << (XMLROOT - 320)) | (1L << (XMLSERIALIZE - 320)) | (1L << (XMLTABLE - 320)))) != 0) || ((((_la - 443)) & ~0x3f) == 0 && ((1L << (_la - 443)) & ((1L << (ALIGNMENT - 443)) | (1L << (BASETYPE - 443)) | (1L << (BUFFERS - 443)) | (1L << (BYPASSRLS - 443)) | (1L << (CANONICAL - 443)) | (1L << (CATEGORY - 443)) | (1L << (COLLATABLE - 443)) | (1L << (COMBINEFUNC - 443)) | (1L << (COMMUTATOR - 443)) | (1L << (CONNECT - 443)) | (1L << (COSTS - 443)) | (1L << (CREATEDB - 443)) | (1L << (CREATEROLE - 443)) | (1L << (DESERIALFUNC - 443)) | (1L << (DETERMINISTIC - 443)) | (1L << (DISABLE_PAGE_SKIPPING - 443)) | (1L << (ELEMENT - 443)) | (1L << (EXTENDED - 443)) | (1L << (FINALFUNC - 443)) | (1L << (FINALFUNC_EXTRA - 443)) | (1L << (FINALFUNC_MODIFY - 443)) | (1L << (FORCE_NOT_NULL - 443)) | (1L << (FORCE_NULL - 443)) | (1L << (FORCE_QUOTE - 443)) | (1L << (FORMAT - 443)) | (1L << (GETTOKEN - 443)) | (1L << (HASH - 443)) | (1L << (HASHES - 443)) | (1L << (HEADLINE - 443)) | (1L << (HYPOTHETICAL - 443)) | (1L << (INDEX_CLEANUP - 443)) | (1L << (INIT - 443)) | (1L << (INITCOND - 443)) | (1L << (INTERNALLENGTH - 443)) | (1L << (JSON - 443)) | (1L << (LC_COLLATE - 443)) | (1L << (LC_CTYPE - 443)) | (1L << (LEFTARG - 443)) | (1L << (LEXIZE - 443)) | (1L << (LEXTYPES - 443)) | (1L << (LIST - 443)) | (1L << (LOCALE - 443)) | (1L << (LOGIN - 443)) | (1L << (MAIN - 443)) | (1L << (MERGES - 443)) | (1L << (MFINALFUNC - 443)) | (1L << (MFINALFUNC_EXTRA - 443)) | (1L << (MFINALFUNC_MODIFY - 443)) | (1L << (MINITCOND - 443)) | (1L << (MINVFUNC - 443)) | (1L << (MODULUS - 443)) | (1L << (MSFUNC - 443)) | (1L << (MSSPACE - 443)) | (1L << (MSTYPE - 443)) | (1L << (NEGATOR - 443)) | (1L << (NOBYPASSRLS - 443)) | (1L << (NOCREATEDB - 443)) | (1L << (NOCREATEROLE - 443)) | (1L << (NOINHERIT - 443)) | (1L << (NOLOGIN - 443)) | (1L << (NOREPLICATION - 443)) | (1L << (NOSUPERUSER - 443)) | (1L << (OUTPUT - 443)) | (1L << (PASSEDBYVALUE - 443)))) != 0) || ((((_la - 507)) & ~0x3f) == 0 && ((1L << (_la - 507)) & ((1L << (PATH - 507)) | (1L << (PERMISSIVE - 507)) | (1L << (PLAIN - 507)) | (1L << (PREFERRED - 507)) | (1L << (PROVIDER - 507)) | (1L << (READ_ONLY - 507)) | (1L << (READ_WRITE - 507)) | (1L << (RECEIVE - 507)) | (1L << (REMAINDER - 507)) | (1L << (REPLICATION - 507)) | (1L << (RESTRICTED - 507)) | (1L << (RESTRICTIVE - 507)) | (1L << (RIGHTARG - 507)) | (1L << (SAFE - 507)) | (1L << (SEND - 507)) | (1L << (SERIALFUNC - 507)) | (1L << (SETTINGS - 507)) | (1L << (SFUNC - 507)) | (1L << (SHAREABLE - 507)) | (1L << (SKIP_LOCKED - 507)) | (1L << (SORTOP - 507)) | (1L << (SSPACE - 507)) | (1L << (STYPE - 507)) | (1L << (SUBTYPE_DIFF - 507)) | (1L << (SUBTYPE_OPCLASS - 507)) | (1L << (SUBTYPE - 507)) | (1L << (SUMMARY - 507)) | (1L << (SUPERUSER - 507)) | (1L << (TIMING - 507)) | (1L << (TYPMOD_IN - 507)) | (1L << (TYPMOD_OUT - 507)) | (1L << (UNSAFE - 507)) | (1L << (USAGE - 507)) | (1L << (VARIABLE - 507)) | (1L << (YAML - 507)) | (1L << (ALIAS - 507)) | (1L << (ASSERT - 507)) | (1L << (CONSTANT - 507)) | (1L << (DATATYPE - 507)) | (1L << (DEBUG - 507)) | (1L << (DETAIL - 507)) | (1L << (DIAGNOSTICS - 507)) | (1L << (ELSEIF - 507)) | (1L << (ELSIF - 507)) | (1L << (ERRCODE - 507)) | (1L << (EXIT - 507)) | (1L << (EXCEPTION - 507)) | (1L << (FOREACH - 507)) | (1L << (GET - 507)) | (1L << (HINT - 507)) | (1L << (INFO - 507)) | (1L << (LOG - 507)) | (1L << (LOOP - 507)) | (1L << (MESSAGE - 507)) | (1L << (NOTICE - 507)) | (1L << (OPEN - 507)) | (1L << (PERFORM - 507)) | (1L << (QUERY - 507)) | (1L << (RAISE - 507)) | (1L << (RECORD - 507)) | (1L << (RETURN - 507)) | (1L << (REVERSE - 507)) | (1L << (ROWTYPE - 507)) | (1L << (SLICE - 507)))) != 0) || ((((_la - 571)) & ~0x3f) == 0 && ((1L << (_la - 571)) & ((1L << (SQLSTATE - 571)) | (1L << (STACKED - 571)) | (1L << (WARNING - 571)) | (1L << (WHILE - 571)) | (1L << (Identifier - 571)) | (1L << (QuotedIdentifier - 571)))) != 0)) {
					{
					setState(7513);
					identifier();
					}
				}

				}
				break;
			case CONTINUE:
			case EXIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(7516);
				_la = _input.LA(1);
				if ( !(_la==CONTINUE || _la==EXIT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7518);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATTACH) | (1L << ATTRIBUTE) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BY) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG) | (1L << CHAIN) | (1L << CHARACTERISTICS) | (1L << CHECKPOINT) | (1L << CLASS) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMENTS) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONFIGURATION) | (1L << CONFLICT) | (1L << CONNECTION) | (1L << CONSTRAINTS) | (1L << CONTENT) | (1L << CONTINUE) | (1L << CONVERSION) | (1L << COPY) | (1L << COST) | (1L << CSV) | (1L << CUBE) | (1L << CURRENT) | (1L << CURSOR) | (1L << CYCLE) | (1L << DATA) | (1L << DATABASE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DEFAULTS) | (1L << DEFERRED) | (1L << DEFINER) | (1L << DELETE) | (1L << DELIMITER) | (1L << DELIMITERS) | (1L << DEPENDS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DETACH - 64)) | (1L << (DICTIONARY - 64)) | (1L << (DISABLE - 64)) | (1L << (DISCARD - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOMAIN - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (EACH - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTED - 64)) | (1L << (ENUM - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVENT - 64)) | (1L << (EXCLUDE - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXCLUSIVE - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTENSION - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FAMILY - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORCE - 64)) | (1L << (FORWARD - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GENERATED - 64)) | (1L << (GLOBAL - 64)) | (1L << (GRANTED - 64)) | (1L << (GROUPS - 64)) | (1L << (HANDLER - 64)) | (1L << (HEADER - 64)) | (1L << (HOLD - 64)) | (1L << (HOUR - 64)) | (1L << (IDENTITY - 64)) | (1L << (IF - 64)) | (1L << (IMMEDIATE - 64)) | (1L << (IMMUTABLE - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPORT - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INCREMENT - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXES - 64)) | (1L << (INHERIT - 64)) | (1L << (INHERITS - 64)) | (1L << (INLINE - 64)) | (1L << (INPUT - 64)) | (1L << (INSENSITIVE - 64)) | (1L << (INSERT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INVOKER - 64)) | (1L << (ISOLATION - 64)) | (1L << (KEY - 64)) | (1L << (LABEL - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LARGE - 64)) | (1L << (LAST - 64)) | (1L << (LEAKPROOF - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LEVEL - 128)) | (1L << (LISTEN - 128)) | (1L << (LOAD - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCATION - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKED - 128)) | (1L << (LOGGED - 128)) | (1L << (MAPPING - 128)) | (1L << (MATCH - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MAXVALUE - 128)) | (1L << (METHOD - 128)) | (1L << (MINUTE - 128)) | (1L << (MINVALUE - 128)) | (1L << (MODE - 128)) | (1L << (MONTH - 128)) | (1L << (MOVE - 128)) | (1L << (NAME - 128)) | (1L << (NAMES - 128)) | (1L << (NEW - 128)) | (1L << (NEXT - 128)) | (1L << (NO - 128)) | (1L << (NOTHING - 128)) | (1L << (NOTIFY - 128)) | (1L << (NOWAIT - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFF - 128)) | (1L << (OIDS - 128)) | (1L << (OLD - 128)) | (1L << (OPERATOR - 128)) | (1L << (OPTION - 128)) | (1L << (OPTIONS - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OTHERS - 128)) | (1L << (OVER - 128)) | (1L << (OVERRIDING - 128)) | (1L << (OWNED - 128)) | (1L << (OWNER - 128)) | (1L << (PARALLEL - 128)) | (1L << (PARSER - 128)) | (1L << (PARTIAL - 128)) | (1L << (PARTITION - 128)) | (1L << (PASSING - 128)) | (1L << (PASSWORD - 128)) | (1L << (PLANS - 128)) | (1L << (POLICY - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PREPARED - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRIOR - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROCEDURAL - 128)) | (1L << (PROCEDURE - 128)) | (1L << (PROCEDURES - 128)) | (1L << (PROGRAM - 128)) | (1L << (PUBLICATION - 128)) | (1L << (QUOTE - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (REASSIGN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (RECHECK - 192)) | (1L << (RECURSIVE - 192)) | (1L << (REF - 192)) | (1L << (REFERENCING - 192)) | (1L << (REFRESH - 192)) | (1L << (REINDEX - 192)) | (1L << (RELATIVE - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (REPLICA - 192)) | (1L << (RESET - 192)) | (1L << (RESTART - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUTINE - 192)) | (1L << (ROUTINES - 192)) | (1L << (ROWS - 192)) | (1L << (RULE - 192)) | (1L << (SAVEPOINT - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SCROLL - 192)) | (1L << (SEARCH - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEQUENCE - 192)) | (1L << (SEQUENCES - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SERVER - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHARE - 192)) | (1L << (SHOW - 192)) | (1L << (SIMPLE - 192)) | (1L << (SKIP_ - 192)) | (1L << (SNAPSHOT - 192)) | (1L << (SQL - 192)) | (1L << (STABLE - 192)) | (1L << (STANDALONE - 192)) | (1L << (START - 192)) | (1L << (STATEMENT - 192)) | (1L << (STATISTICS - 192)) | (1L << (STDIN - 192)) | (1L << (STDOUT - 192)) | (1L << (STORAGE - 192)) | (1L << (STORED - 192)) | (1L << (STRICT - 192)) | (1L << (STRIP - 192)) | (1L << (SUBSCRIPTION - 192)) | (1L << (SUPPORT - 192)) | (1L << (SYSID - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESPACE - 192)) | (1L << (TEMP - 192)) | (1L << (TEMPLATE - 192)) | (1L << (TEMPORARY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TEXT - 256)) | (1L << (TIES - 256)) | (1L << (TRANSACTION - 256)) | (1L << (TRANSFORM - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TRUSTED - 256)) | (1L << (TYPE - 256)) | (1L << (TYPES - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNENCRYPTED - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNLISTEN - 256)) | (1L << (UNLOGGED - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (VACUUM - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALIDATOR - 256)) | (1L << (VALUE - 256)) | (1L << (VARYING - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (VIEWS - 256)) | (1L << (VOLATILE - 256)) | (1L << (WHITESPACE - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (XML - 256)) | (1L << (YEAR - 256)) | (1L << (YES - 256)) | (1L << (ZONE - 256)) | (1L << (BETWEEN - 256)) | (1L << (BIGINT - 256)) | (1L << (BIT - 256)) | (1L << (BOOLEAN - 256)) | (1L << (CHAR - 256)) | (1L << (CHARACTER - 256)) | (1L << (COALESCE - 256)) | (1L << (DEC - 256)) | (1L << (DECIMAL - 256)) | (1L << (EXISTS - 256)) | (1L << (EXTRACT - 256)) | (1L << (FLOAT - 256)) | (1L << (GREATEST - 256)) | (1L << (GROUPING - 256)) | (1L << (INOUT - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERVAL - 256)) | (1L << (LEAST - 256)) | (1L << (NATIONAL - 256)) | (1L << (NCHAR - 256)) | (1L << (NONE - 256)) | (1L << (NULLIF - 256)) | (1L << (NUMERIC - 256)) | (1L << (OUT - 256)) | (1L << (OVERLAY - 256)) | (1L << (POSITION - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRECISION - 320)) | (1L << (REAL - 320)) | (1L << (ROW - 320)) | (1L << (SETOF - 320)) | (1L << (SMALLINT - 320)) | (1L << (SUBSTRING - 320)) | (1L << (TIME - 320)) | (1L << (TIMESTAMP - 320)) | (1L << (TREAT - 320)) | (1L << (TRIM - 320)) | (1L << (VALUES - 320)) | (1L << (VARCHAR - 320)) | (1L << (XMLATTRIBUTES - 320)) | (1L << (XMLCONCAT - 320)) | (1L << (XMLELEMENT - 320)) | (1L << (XMLEXISTS - 320)) | (1L << (XMLFOREST - 320)) | (1L << (XMLNAMESPACES - 320)) | (1L << (XMLPARSE - 320)) | (1L << (XMLPI - 320)) | (1L << (XMLROOT - 320)) | (1L << (XMLSERIALIZE - 320)) | (1L << (XMLTABLE - 320)))) != 0) || ((((_la - 443)) & ~0x3f) == 0 && ((1L << (_la - 443)) & ((1L << (ALIGNMENT - 443)) | (1L << (BASETYPE - 443)) | (1L << (BUFFERS - 443)) | (1L << (BYPASSRLS - 443)) | (1L << (CANONICAL - 443)) | (1L << (CATEGORY - 443)) | (1L << (COLLATABLE - 443)) | (1L << (COMBINEFUNC - 443)) | (1L << (COMMUTATOR - 443)) | (1L << (CONNECT - 443)) | (1L << (COSTS - 443)) | (1L << (CREATEDB - 443)) | (1L << (CREATEROLE - 443)) | (1L << (DESERIALFUNC - 443)) | (1L << (DETERMINISTIC - 443)) | (1L << (DISABLE_PAGE_SKIPPING - 443)) | (1L << (ELEMENT - 443)) | (1L << (EXTENDED - 443)) | (1L << (FINALFUNC - 443)) | (1L << (FINALFUNC_EXTRA - 443)) | (1L << (FINALFUNC_MODIFY - 443)) | (1L << (FORCE_NOT_NULL - 443)) | (1L << (FORCE_NULL - 443)) | (1L << (FORCE_QUOTE - 443)) | (1L << (FORMAT - 443)) | (1L << (GETTOKEN - 443)) | (1L << (HASH - 443)) | (1L << (HASHES - 443)) | (1L << (HEADLINE - 443)) | (1L << (HYPOTHETICAL - 443)) | (1L << (INDEX_CLEANUP - 443)) | (1L << (INIT - 443)) | (1L << (INITCOND - 443)) | (1L << (INTERNALLENGTH - 443)) | (1L << (JSON - 443)) | (1L << (LC_COLLATE - 443)) | (1L << (LC_CTYPE - 443)) | (1L << (LEFTARG - 443)) | (1L << (LEXIZE - 443)) | (1L << (LEXTYPES - 443)) | (1L << (LIST - 443)) | (1L << (LOCALE - 443)) | (1L << (LOGIN - 443)) | (1L << (MAIN - 443)) | (1L << (MERGES - 443)) | (1L << (MFINALFUNC - 443)) | (1L << (MFINALFUNC_EXTRA - 443)) | (1L << (MFINALFUNC_MODIFY - 443)) | (1L << (MINITCOND - 443)) | (1L << (MINVFUNC - 443)) | (1L << (MODULUS - 443)) | (1L << (MSFUNC - 443)) | (1L << (MSSPACE - 443)) | (1L << (MSTYPE - 443)) | (1L << (NEGATOR - 443)) | (1L << (NOBYPASSRLS - 443)) | (1L << (NOCREATEDB - 443)) | (1L << (NOCREATEROLE - 443)) | (1L << (NOINHERIT - 443)) | (1L << (NOLOGIN - 443)) | (1L << (NOREPLICATION - 443)) | (1L << (NOSUPERUSER - 443)) | (1L << (OUTPUT - 443)) | (1L << (PASSEDBYVALUE - 443)))) != 0) || ((((_la - 507)) & ~0x3f) == 0 && ((1L << (_la - 507)) & ((1L << (PATH - 507)) | (1L << (PERMISSIVE - 507)) | (1L << (PLAIN - 507)) | (1L << (PREFERRED - 507)) | (1L << (PROVIDER - 507)) | (1L << (READ_ONLY - 507)) | (1L << (READ_WRITE - 507)) | (1L << (RECEIVE - 507)) | (1L << (REMAINDER - 507)) | (1L << (REPLICATION - 507)) | (1L << (RESTRICTED - 507)) | (1L << (RESTRICTIVE - 507)) | (1L << (RIGHTARG - 507)) | (1L << (SAFE - 507)) | (1L << (SEND - 507)) | (1L << (SERIALFUNC - 507)) | (1L << (SETTINGS - 507)) | (1L << (SFUNC - 507)) | (1L << (SHAREABLE - 507)) | (1L << (SKIP_LOCKED - 507)) | (1L << (SORTOP - 507)) | (1L << (SSPACE - 507)) | (1L << (STYPE - 507)) | (1L << (SUBTYPE_DIFF - 507)) | (1L << (SUBTYPE_OPCLASS - 507)) | (1L << (SUBTYPE - 507)) | (1L << (SUMMARY - 507)) | (1L << (SUPERUSER - 507)) | (1L << (TIMING - 507)) | (1L << (TYPMOD_IN - 507)) | (1L << (TYPMOD_OUT - 507)) | (1L << (UNSAFE - 507)) | (1L << (USAGE - 507)) | (1L << (VARIABLE - 507)) | (1L << (YAML - 507)) | (1L << (ALIAS - 507)) | (1L << (ASSERT - 507)) | (1L << (CONSTANT - 507)) | (1L << (DATATYPE - 507)) | (1L << (DEBUG - 507)) | (1L << (DETAIL - 507)) | (1L << (DIAGNOSTICS - 507)) | (1L << (ELSEIF - 507)) | (1L << (ELSIF - 507)) | (1L << (ERRCODE - 507)) | (1L << (EXIT - 507)) | (1L << (EXCEPTION - 507)) | (1L << (FOREACH - 507)) | (1L << (GET - 507)) | (1L << (HINT - 507)) | (1L << (INFO - 507)) | (1L << (LOG - 507)) | (1L << (LOOP - 507)) | (1L << (MESSAGE - 507)) | (1L << (NOTICE - 507)) | (1L << (OPEN - 507)) | (1L << (PERFORM - 507)) | (1L << (QUERY - 507)) | (1L << (RAISE - 507)) | (1L << (RECORD - 507)) | (1L << (RETURN - 507)) | (1L << (REVERSE - 507)) | (1L << (ROWTYPE - 507)) | (1L << (SLICE - 507)))) != 0) || ((((_la - 571)) & ~0x3f) == 0 && ((1L << (_la - 571)) & ((1L << (SQLSTATE - 571)) | (1L << (STACKED - 571)) | (1L << (WARNING - 571)) | (1L << (WHILE - 571)) | (1L << (Identifier - 571)) | (1L << (QuotedIdentifier - 571)))) != 0)) {
					{
					setState(7517);
					identifier();
					}
				}

				setState(7522);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHEN) {
					{
					setState(7520);
					match(WHEN);
					setState(7521);
					vex(0);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Loop_startContext extends ParserRuleContext {
		public IdentifierContext alias;
		public IdentifierContext cursor;
		public TerminalNode WHILE() { return getToken(PLpgSQLParser.WHILE, 0); }
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public TerminalNode FOR() { return getToken(PLpgSQLParser.FOR, 0); }
		public TerminalNode IN() { return getToken(PLpgSQLParser.IN, 0); }
		public TerminalNode DOUBLE_DOT() { return getToken(PLpgSQLParser.DOUBLE_DOT, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode REVERSE() { return getToken(PLpgSQLParser.REVERSE, 0); }
		public TerminalNode BY() { return getToken(PLpgSQLParser.BY, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public Plpgsql_queryContext plpgsql_query() {
			return getRuleContext(Plpgsql_queryContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLpgSQLParser.LEFT_PAREN, 0); }
		public List<OptionContext> option() {
			return getRuleContexts(OptionContext.class);
		}
		public OptionContext option(int i) {
			return getRuleContext(OptionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLpgSQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public TerminalNode FOREACH() { return getToken(PLpgSQLParser.FOREACH, 0); }
		public TerminalNode ARRAY() { return getToken(PLpgSQLParser.ARRAY, 0); }
		public TerminalNode SLICE() { return getToken(PLpgSQLParser.SLICE, 0); }
		public TerminalNode NUMBER_LITERAL() { return getToken(PLpgSQLParser.NUMBER_LITERAL, 0); }
		public Loop_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loop_start; }
	}

	public final Loop_startContext loop_start() throws RecognitionException {
		Loop_startContext _localctx = new Loop_startContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_loop_start);
		int _la;
		try {
			setState(7573);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1028,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7526);
				match(WHILE);
				setState(7527);
				vex(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7528);
				match(FOR);
				setState(7529);
				((Loop_startContext)_localctx).alias = identifier();
				setState(7530);
				match(IN);
				setState(7532);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1023,_ctx) ) {
				case 1:
					{
					setState(7531);
					match(REVERSE);
					}
					break;
				}
				setState(7534);
				vex(0);
				setState(7535);
				match(DOUBLE_DOT);
				setState(7536);
				vex(0);
				setState(7539);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BY) {
					{
					setState(7537);
					match(BY);
					setState(7538);
					vex(0);
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7541);
				match(FOR);
				setState(7542);
				identifier_list();
				setState(7543);
				match(IN);
				setState(7544);
				plpgsql_query();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7546);
				match(FOR);
				setState(7547);
				((Loop_startContext)_localctx).cursor = identifier();
				setState(7548);
				match(IN);
				setState(7549);
				identifier();
				setState(7561);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(7550);
					match(LEFT_PAREN);
					setState(7551);
					option();
					setState(7556);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(7552);
						match(COMMA);
						setState(7553);
						option();
						}
						}
						setState(7558);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(7559);
					match(RIGHT_PAREN);
					}
				}

				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7563);
				match(FOREACH);
				setState(7564);
				identifier_list();
				setState(7567);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SLICE) {
					{
					setState(7565);
					match(SLICE);
					setState(7566);
					match(NUMBER_LITERAL);
					}
				}

				setState(7569);
				match(IN);
				setState(7570);
				match(ARRAY);
				setState(7571);
				vex(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_vexContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PLpgSQLParser.USING, 0); }
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Using_vexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_vex; }
	}

	public final Using_vexContext using_vex() throws RecognitionException {
		Using_vexContext _localctx = new Using_vexContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_using_vex);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7575);
			match(USING);
			setState(7576);
			vex(0);
			setState(7581);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7577);
				match(COMMA);
				setState(7578);
				vex(0);
				}
				}
				setState(7583);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class If_statementContext extends ParserRuleContext {
		public List<TerminalNode> IF() { return getTokens(PLpgSQLParser.IF); }
		public TerminalNode IF(int i) {
			return getToken(PLpgSQLParser.IF, i);
		}
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public List<TerminalNode> THEN() { return getTokens(PLpgSQLParser.THEN); }
		public TerminalNode THEN(int i) {
			return getToken(PLpgSQLParser.THEN, i);
		}
		public List<Function_statementsContext> function_statements() {
			return getRuleContexts(Function_statementsContext.class);
		}
		public Function_statementsContext function_statements(int i) {
			return getRuleContext(Function_statementsContext.class,i);
		}
		public TerminalNode END() { return getToken(PLpgSQLParser.END, 0); }
		public TerminalNode ELSE() { return getToken(PLpgSQLParser.ELSE, 0); }
		public List<TerminalNode> ELSIF() { return getTokens(PLpgSQLParser.ELSIF); }
		public TerminalNode ELSIF(int i) {
			return getToken(PLpgSQLParser.ELSIF, i);
		}
		public List<TerminalNode> ELSEIF() { return getTokens(PLpgSQLParser.ELSEIF); }
		public TerminalNode ELSEIF(int i) {
			return getToken(PLpgSQLParser.ELSEIF, i);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_if_statement; }
	}

	public final If_statementContext if_statement() throws RecognitionException {
		If_statementContext _localctx = new If_statementContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_if_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7584);
			match(IF);
			setState(7585);
			vex(0);
			setState(7586);
			match(THEN);
			setState(7587);
			function_statements();
			setState(7595);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ELSEIF || _la==ELSIF) {
				{
				{
				setState(7588);
				_la = _input.LA(1);
				if ( !(_la==ELSEIF || _la==ELSIF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7589);
				vex(0);
				setState(7590);
				match(THEN);
				setState(7591);
				function_statements();
				}
				}
				setState(7597);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7600);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(7598);
				match(ELSE);
				setState(7599);
				function_statements();
				}
			}

			setState(7602);
			match(END);
			setState(7603);
			match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_statementContext extends ParserRuleContext {
		public List<TerminalNode> CASE() { return getTokens(PLpgSQLParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(PLpgSQLParser.CASE, i);
		}
		public TerminalNode END() { return getToken(PLpgSQLParser.END, 0); }
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public List<TerminalNode> WHEN() { return getTokens(PLpgSQLParser.WHEN); }
		public TerminalNode WHEN(int i) {
			return getToken(PLpgSQLParser.WHEN, i);
		}
		public List<TerminalNode> THEN() { return getTokens(PLpgSQLParser.THEN); }
		public TerminalNode THEN(int i) {
			return getToken(PLpgSQLParser.THEN, i);
		}
		public List<Function_statementsContext> function_statements() {
			return getRuleContexts(Function_statementsContext.class);
		}
		public Function_statementsContext function_statements(int i) {
			return getRuleContext(Function_statementsContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(PLpgSQLParser.ELSE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLpgSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLpgSQLParser.COMMA, i);
		}
		public Case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_statement; }
	}

	public final Case_statementContext case_statement() throws RecognitionException {
		Case_statementContext _localctx = new Case_statementContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_case_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7605);
			match(CASE);
			setState(7607);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATTACH) | (1L << ATTRIBUTE) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BY) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG) | (1L << CHAIN) | (1L << CHARACTERISTICS) | (1L << CHECKPOINT) | (1L << CLASS) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMENTS) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONFIGURATION) | (1L << CONFLICT) | (1L << CONNECTION) | (1L << CONSTRAINTS) | (1L << CONTENT) | (1L << CONTINUE) | (1L << CONVERSION) | (1L << COPY) | (1L << COST) | (1L << CSV) | (1L << CUBE) | (1L << CURRENT) | (1L << CURSOR) | (1L << CYCLE) | (1L << DATA) | (1L << DATABASE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DEFAULTS) | (1L << DEFERRED) | (1L << DEFINER) | (1L << DELETE) | (1L << DELIMITER) | (1L << DELIMITERS) | (1L << DEPENDS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DETACH - 64)) | (1L << (DICTIONARY - 64)) | (1L << (DISABLE - 64)) | (1L << (DISCARD - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOMAIN - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (EACH - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTED - 64)) | (1L << (ENUM - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVENT - 64)) | (1L << (EXCLUDE - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXCLUSIVE - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTENSION - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FAMILY - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORCE - 64)) | (1L << (FORWARD - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GENERATED - 64)) | (1L << (GLOBAL - 64)) | (1L << (GRANTED - 64)) | (1L << (GROUPS - 64)) | (1L << (HANDLER - 64)) | (1L << (HEADER - 64)) | (1L << (HOLD - 64)) | (1L << (HOUR - 64)) | (1L << (IDENTITY - 64)) | (1L << (IF - 64)) | (1L << (IMMEDIATE - 64)) | (1L << (IMMUTABLE - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPORT - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INCREMENT - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXES - 64)) | (1L << (INHERIT - 64)) | (1L << (INHERITS - 64)) | (1L << (INLINE - 64)) | (1L << (INPUT - 64)) | (1L << (INSENSITIVE - 64)) | (1L << (INSERT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INVOKER - 64)) | (1L << (ISOLATION - 64)) | (1L << (KEY - 64)) | (1L << (LABEL - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LARGE - 64)) | (1L << (LAST - 64)) | (1L << (LEAKPROOF - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LEVEL - 128)) | (1L << (LISTEN - 128)) | (1L << (LOAD - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCATION - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKED - 128)) | (1L << (LOGGED - 128)) | (1L << (MAPPING - 128)) | (1L << (MATCH - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MAXVALUE - 128)) | (1L << (METHOD - 128)) | (1L << (MINUTE - 128)) | (1L << (MINVALUE - 128)) | (1L << (MODE - 128)) | (1L << (MONTH - 128)) | (1L << (MOVE - 128)) | (1L << (NAME - 128)) | (1L << (NAMES - 128)) | (1L << (NEW - 128)) | (1L << (NEXT - 128)) | (1L << (NO - 128)) | (1L << (NOTHING - 128)) | (1L << (NOTIFY - 128)) | (1L << (NOWAIT - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFF - 128)) | (1L << (OIDS - 128)) | (1L << (OLD - 128)) | (1L << (OPERATOR - 128)) | (1L << (OPTION - 128)) | (1L << (OPTIONS - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OTHERS - 128)) | (1L << (OVER - 128)) | (1L << (OVERRIDING - 128)) | (1L << (OWNED - 128)) | (1L << (OWNER - 128)) | (1L << (PARALLEL - 128)) | (1L << (PARSER - 128)) | (1L << (PARTIAL - 128)) | (1L << (PARTITION - 128)) | (1L << (PASSING - 128)) | (1L << (PASSWORD - 128)) | (1L << (PLANS - 128)) | (1L << (POLICY - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PREPARED - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRIOR - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROCEDURAL - 128)) | (1L << (PROCEDURE - 128)) | (1L << (PROCEDURES - 128)) | (1L << (PROGRAM - 128)) | (1L << (PUBLICATION - 128)) | (1L << (QUOTE - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (REASSIGN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (RECHECK - 192)) | (1L << (RECURSIVE - 192)) | (1L << (REF - 192)) | (1L << (REFERENCING - 192)) | (1L << (REFRESH - 192)) | (1L << (REINDEX - 192)) | (1L << (RELATIVE - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (REPLICA - 192)) | (1L << (RESET - 192)) | (1L << (RESTART - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUTINE - 192)) | (1L << (ROUTINES - 192)) | (1L << (ROWS - 192)) | (1L << (RULE - 192)) | (1L << (SAVEPOINT - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SCROLL - 192)) | (1L << (SEARCH - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEQUENCE - 192)) | (1L << (SEQUENCES - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SERVER - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHARE - 192)) | (1L << (SHOW - 192)) | (1L << (SIMPLE - 192)) | (1L << (SKIP_ - 192)) | (1L << (SNAPSHOT - 192)) | (1L << (SQL - 192)) | (1L << (STABLE - 192)) | (1L << (STANDALONE - 192)) | (1L << (START - 192)) | (1L << (STATEMENT - 192)) | (1L << (STATISTICS - 192)) | (1L << (STDIN - 192)) | (1L << (STDOUT - 192)) | (1L << (STORAGE - 192)) | (1L << (STORED - 192)) | (1L << (STRICT - 192)) | (1L << (STRIP - 192)) | (1L << (SUBSCRIPTION - 192)) | (1L << (SUPPORT - 192)) | (1L << (SYSID - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESPACE - 192)) | (1L << (TEMP - 192)) | (1L << (TEMPLATE - 192)) | (1L << (TEMPORARY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TEXT - 256)) | (1L << (TIES - 256)) | (1L << (TRANSACTION - 256)) | (1L << (TRANSFORM - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TRUSTED - 256)) | (1L << (TYPE - 256)) | (1L << (TYPES - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNENCRYPTED - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNLISTEN - 256)) | (1L << (UNLOGGED - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (VACUUM - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALIDATOR - 256)) | (1L << (VALUE - 256)) | (1L << (VARYING - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (VIEWS - 256)) | (1L << (VOLATILE - 256)) | (1L << (WHITESPACE - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (XML - 256)) | (1L << (YEAR - 256)) | (1L << (YES - 256)) | (1L << (ZONE - 256)) | (1L << (BETWEEN - 256)) | (1L << (BIGINT - 256)) | (1L << (BIT - 256)) | (1L << (BOOLEAN - 256)) | (1L << (CHAR - 256)) | (1L << (CHARACTER - 256)) | (1L << (COALESCE - 256)) | (1L << (DEC - 256)) | (1L << (DECIMAL - 256)) | (1L << (EXISTS - 256)) | (1L << (EXTRACT - 256)) | (1L << (FLOAT - 256)) | (1L << (GREATEST - 256)) | (1L << (GROUPING - 256)) | (1L << (INOUT - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERVAL - 256)) | (1L << (LEAST - 256)) | (1L << (NATIONAL - 256)) | (1L << (NCHAR - 256)) | (1L << (NONE - 256)) | (1L << (NULLIF - 256)) | (1L << (NUMERIC - 256)) | (1L << (OUT - 256)) | (1L << (OVERLAY - 256)) | (1L << (POSITION - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRECISION - 320)) | (1L << (REAL - 320)) | (1L << (ROW - 320)) | (1L << (SETOF - 320)) | (1L << (SMALLINT - 320)) | (1L << (SUBSTRING - 320)) | (1L << (TIME - 320)) | (1L << (TIMESTAMP - 320)) | (1L << (TREAT - 320)) | (1L << (TRIM - 320)) | (1L << (VALUES - 320)) | (1L << (VARCHAR - 320)) | (1L << (XMLATTRIBUTES - 320)) | (1L << (XMLCONCAT - 320)) | (1L << (XMLELEMENT - 320)) | (1L << (XMLEXISTS - 320)) | (1L << (XMLFOREST - 320)) | (1L << (XMLNAMESPACES - 320)) | (1L << (XMLPARSE - 320)) | (1L << (XMLPI - 320)) | (1L << (XMLROOT - 320)) | (1L << (XMLSERIALIZE - 320)) | (1L << (XMLTABLE - 320)) | (1L << (AUTHORIZATION - 320)) | (1L << (BINARY - 320)) | (1L << (COLLATION - 320)) | (1L << (CONCURRENTLY - 320)) | (1L << (CROSS - 320)) | (1L << (CURRENT_SCHEMA - 320)) | (1L << (FREEZE - 320)) | (1L << (FULL - 320)) | (1L << (ILIKE - 320)) | (1L << (INNER - 320)) | (1L << (IS - 320)) | (1L << (ISNULL - 320)) | (1L << (JOIN - 320)) | (1L << (LEFT - 320)) | (1L << (LIKE - 320)) | (1L << (NATURAL - 320)) | (1L << (NOTNULL - 320)) | (1L << (OUTER - 320)) | (1L << (OVERLAPS - 320)) | (1L << (RIGHT - 320)) | (1L << (SIMILAR - 320)) | (1L << (TABLESAMPLE - 320)) | (1L << (VERBOSE - 320)) | (1L << (ALL - 320)) | (1L << (ANY - 320)) | (1L << (ARRAY - 320)) | (1L << (CASE - 320)) | (1L << (CAST - 320)) | (1L << (CURRENT_CATALOG - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (CURRENT_DATE - 384)) | (1L << (CURRENT_TIME - 384)) | (1L << (CURRENT_TIMESTAMP - 384)) | (1L << (CURRENT_USER - 384)) | (1L << (FALSE - 384)) | (1L << (LOCALTIME - 384)) | (1L << (LOCALTIMESTAMP - 384)) | (1L << (NOT - 384)) | (1L << (NULL - 384)) | (1L << (ON - 384)) | (1L << (SESSION_USER - 384)) | (1L << (SOME - 384)) | (1L << (TRUE - 384)) | (1L << (USER - 384)) | (1L << (ALIGNMENT - 384)) | (1L << (BASETYPE - 384)) | (1L << (BUFFERS - 384)) | (1L << (BYPASSRLS - 384)) | (1L << (CANONICAL - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (CATEGORY - 448)) | (1L << (COLLATABLE - 448)) | (1L << (COMBINEFUNC - 448)) | (1L << (COMMUTATOR - 448)) | (1L << (CONNECT - 448)) | (1L << (COSTS - 448)) | (1L << (CREATEDB - 448)) | (1L << (CREATEROLE - 448)) | (1L << (DESERIALFUNC - 448)) | (1L << (DETERMINISTIC - 448)) | (1L << (DISABLE_PAGE_SKIPPING - 448)) | (1L << (ELEMENT - 448)) | (1L << (EXTENDED - 448)) | (1L << (FINALFUNC - 448)) | (1L << (FINALFUNC_EXTRA - 448)) | (1L << (FINALFUNC_MODIFY - 448)) | (1L << (FORCE_NOT_NULL - 448)) | (1L << (FORCE_NULL - 448)) | (1L << (FORCE_QUOTE - 448)) | (1L << (FORMAT - 448)) | (1L << (GETTOKEN - 448)) | (1L << (HASH - 448)) | (1L << (HASHES - 448)) | (1L << (HEADLINE - 448)) | (1L << (HYPOTHETICAL - 448)) | (1L << (INDEX_CLEANUP - 448)) | (1L << (INIT - 448)) | (1L << (INITCOND - 448)) | (1L << (INTERNALLENGTH - 448)) | (1L << (JSON - 448)) | (1L << (LC_COLLATE - 448)) | (1L << (LC_CTYPE - 448)) | (1L << (LEFTARG - 448)) | (1L << (LEXIZE - 448)) | (1L << (LEXTYPES - 448)) | (1L << (LIST - 448)) | (1L << (LOCALE - 448)) | (1L << (LOGIN - 448)) | (1L << (MAIN - 448)) | (1L << (MERGES - 448)) | (1L << (MFINALFUNC - 448)) | (1L << (MFINALFUNC_EXTRA - 448)) | (1L << (MFINALFUNC_MODIFY - 448)) | (1L << (MINITCOND - 448)) | (1L << (MINVFUNC - 448)) | (1L << (MODULUS - 448)) | (1L << (MSFUNC - 448)) | (1L << (MSSPACE - 448)) | (1L << (MSTYPE - 448)) | (1L << (NEGATOR - 448)) | (1L << (NOBYPASSRLS - 448)) | (1L << (NOCREATEDB - 448)) | (1L << (NOCREATEROLE - 448)) | (1L << (NOINHERIT - 448)) | (1L << (NOLOGIN - 448)) | (1L << (NOREPLICATION - 448)) | (1L << (NOSUPERUSER - 448)) | (1L << (OUTPUT - 448)) | (1L << (PASSEDBYVALUE - 448)) | (1L << (PATH - 448)) | (1L << (PERMISSIVE - 448)) | (1L << (PLAIN - 448)) | (1L << (PREFERRED - 448)) | (1L << (PROVIDER - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (READ_ONLY - 512)) | (1L << (READ_WRITE - 512)) | (1L << (RECEIVE - 512)) | (1L << (REMAINDER - 512)) | (1L << (REPLICATION - 512)) | (1L << (RESTRICTED - 512)) | (1L << (RESTRICTIVE - 512)) | (1L << (RIGHTARG - 512)) | (1L << (SAFE - 512)) | (1L << (SEND - 512)) | (1L << (SERIALFUNC - 512)) | (1L << (SETTINGS - 512)) | (1L << (SFUNC - 512)) | (1L << (SHAREABLE - 512)) | (1L << (SKIP_LOCKED - 512)) | (1L << (SORTOP - 512)) | (1L << (SSPACE - 512)) | (1L << (STYPE - 512)) | (1L << (SUBTYPE_DIFF - 512)) | (1L << (SUBTYPE_OPCLASS - 512)) | (1L << (SUBTYPE - 512)) | (1L << (SUMMARY - 512)) | (1L << (SUPERUSER - 512)) | (1L << (TIMING - 512)) | (1L << (TYPMOD_IN - 512)) | (1L << (TYPMOD_OUT - 512)) | (1L << (UNSAFE - 512)) | (1L << (USAGE - 512)) | (1L << (VARIABLE - 512)) | (1L << (YAML - 512)) | (1L << (ALIAS - 512)) | (1L << (ASSERT - 512)) | (1L << (CONSTANT - 512)) | (1L << (DATATYPE - 512)) | (1L << (DEBUG - 512)) | (1L << (DETAIL - 512)) | (1L << (DIAGNOSTICS - 512)) | (1L << (ELSEIF - 512)) | (1L << (ELSIF - 512)) | (1L << (ERRCODE - 512)) | (1L << (EXIT - 512)) | (1L << (EXCEPTION - 512)) | (1L << (FOREACH - 512)) | (1L << (GET - 512)) | (1L << (HINT - 512)) | (1L << (INFO - 512)) | (1L << (LOG - 512)) | (1L << (LOOP - 512)) | (1L << (MESSAGE - 512)) | (1L << (NOTICE - 512)) | (1L << (OPEN - 512)) | (1L << (PERFORM - 512)) | (1L << (QUERY - 512)) | (1L << (RAISE - 512)) | (1L << (RECORD - 512)) | (1L << (RETURN - 512)) | (1L << (REVERSE - 512)) | (1L << (ROWTYPE - 512)) | (1L << (SLICE - 512)) | (1L << (SQLSTATE - 512)) | (1L << (STACKED - 512)) | (1L << (WARNING - 512)) | (1L << (WHILE - 512)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (LEFT_PAREN - 585)) | (1L << (PLUS - 585)) | (1L << (MINUS - 585)) | (1L << (MULTIPLY - 585)) | (1L << (LESS_LESS - 585)) | (1L << (GREATER_GREATER - 585)) | (1L << (HASH_SIGN - 585)) | (1L << (OP_CHARS - 585)) | (1L << (NUMBER_LITERAL - 585)) | (1L << (REAL_NUMBER - 585)) | (1L << (DOLLAR_NUMBER - 585)) | (1L << (Identifier - 585)) | (1L << (QuotedIdentifier - 585)) | (1L << (Character_String_Literal - 585)) | (1L << (BeginDollarStringConstant - 585)))) != 0)) {
				{
				setState(7606);
				vex(0);
				}
			}

			setState(7621); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(7609);
				match(WHEN);
				setState(7610);
				vex(0);
				setState(7615);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7611);
					match(COMMA);
					setState(7612);
					vex(0);
					}
					}
					setState(7617);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7618);
				match(THEN);
				setState(7619);
				function_statements();
				}
				}
				setState(7623); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(7627);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(7625);
				match(ELSE);
				setState(7626);
				function_statements();
				}
			}

			setState(7629);
			match(END);
			setState(7630);
			match(CASE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Plpgsql_queryContext extends ParserRuleContext {
		public Data_statementContext data_statement() {
			return getRuleContext(Data_statementContext.class,0);
		}
		public Execute_stmtContext execute_stmt() {
			return getRuleContext(Execute_stmtContext.class,0);
		}
		public Show_statementContext show_statement() {
			return getRuleContext(Show_statementContext.class,0);
		}
		public Explain_statementContext explain_statement() {
			return getRuleContext(Explain_statementContext.class,0);
		}
		public Plpgsql_queryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_plpgsql_query; }
	}

	public final Plpgsql_queryContext plpgsql_query() throws RecognitionException {
		Plpgsql_queryContext _localctx = new Plpgsql_queryContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_plpgsql_query);
		try {
			setState(7636);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DELETE:
			case INSERT:
			case UPDATE:
			case VALUES:
			case SELECT:
			case TABLE:
			case WITH:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 1);
				{
				setState(7632);
				data_statement();
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 2);
				{
				setState(7633);
				execute_stmt();
				}
				break;
			case SHOW:
				enterOuterAlt(_localctx, 3);
				{
				setState(7634);
				show_statement();
				}
				break;
			case EXPLAIN:
				enterOuterAlt(_localctx, 4);
				{
				setState(7635);
				explain_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 279:
			return vex_sempred((VexContext)_localctx, predIndex);
		case 280:
			return vex_b_sempred((Vex_bContext)_localctx, predIndex);
		case 316:
			return select_ops_sempred((Select_opsContext)_localctx, predIndex);
		case 322:
			return from_item_sempred((From_itemContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean vex_sempred(VexContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 23);
		case 1:
			return precpred(_ctx, 22);
		case 2:
			return precpred(_ctx, 21);
		case 3:
			return precpred(_ctx, 20);
		case 4:
			return precpred(_ctx, 19);
		case 5:
			return precpred(_ctx, 15);
		case 6:
			return precpred(_ctx, 14);
		case 7:
			return precpred(_ctx, 13);
		case 8:
			return precpred(_ctx, 12);
		case 9:
			return precpred(_ctx, 10);
		case 10:
			return precpred(_ctx, 3);
		case 11:
			return precpred(_ctx, 2);
		case 12:
			return precpred(_ctx, 28);
		case 13:
			return precpred(_ctx, 25);
		case 14:
			return precpred(_ctx, 17);
		case 15:
			return precpred(_ctx, 16);
		case 16:
			return precpred(_ctx, 11);
		case 17:
			return precpred(_ctx, 9);
		case 18:
			return precpred(_ctx, 8);
		case 19:
			return precpred(_ctx, 7);
		case 20:
			return precpred(_ctx, 6);
		case 21:
			return precpred(_ctx, 5);
		}
		return true;
	}
	private boolean vex_b_sempred(Vex_bContext _localctx, int predIndex) {
		switch (predIndex) {
		case 22:
			return precpred(_ctx, 12);
		case 23:
			return precpred(_ctx, 11);
		case 24:
			return precpred(_ctx, 10);
		case 25:
			return precpred(_ctx, 9);
		case 26:
			return precpred(_ctx, 6);
		case 27:
			return precpred(_ctx, 5);
		case 28:
			return precpred(_ctx, 16);
		case 29:
			return precpred(_ctx, 7);
		case 30:
			return precpred(_ctx, 4);
		case 31:
			return precpred(_ctx, 3);
		case 32:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean select_ops_sempred(Select_opsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 33:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean from_item_sempred(From_itemContext _localctx, int predIndex) {
		switch (predIndex) {
		case 34:
			return precpred(_ctx, 5);
		case 35:
			return precpred(_ctx, 2);
		case 36:
			return precpred(_ctx, 4);
		case 37:
			return precpred(_ctx, 3);
		}
		return true;
	}

	private static final int _serializedATNSegments = 4;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0270\u1dd9\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
		"\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
		"\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
		"\4\u017d\t\u017d\3\2\5\2\u02fc\n\2\3\2\7\2\u02ff\n\2\f\2\16\2\u0302\13"+
		"\2\3\2\3\2\6\2\u0306\n\2\r\2\16\2\u0307\3\2\5\2\u030b\n\2\7\2\u030d\n"+
		"\2\f\2\16\2\u0310\13\2\3\2\3\2\3\3\3\3\3\3\3\4\5\4\u0318\n\4\3\4\3\4\3"+
		"\4\3\5\3\5\3\5\7\5\u0320\n\5\f\5\16\5\u0323\13\5\3\5\3\5\3\6\5\6\u0328"+
		"\n\6\3\6\3\6\5\6\u032c\n\6\3\6\3\6\3\7\5\7\u0331\n\7\3\7\3\7\3\7\7\7\u0336"+
		"\n\7\f\7\16\7\u0339\13\7\3\7\3\7\3\b\3\b\3\b\5\b\u0340\n\b\3\t\3\t\3\t"+
		"\3\t\5\t\u0346\n\t\3\n\3\n\5\n\u034a\n\n\3\13\3\13\3\13\3\13\5\13\u0350"+
		"\n\13\5\13\u0352\n\13\3\13\3\13\3\13\7\13\u0357\n\13\f\13\16\13\u035a"+
		"\13\13\5\13\u035c\n\13\3\13\3\13\5\13\u0360\n\13\3\13\3\13\5\13\u0364"+
		"\n\13\3\13\5\13\u0367\n\13\3\13\3\13\3\13\3\13\5\13\u036d\n\13\3\13\3"+
		"\13\3\13\3\13\5\13\u0373\n\13\5\13\u0375\n\13\3\13\3\13\3\13\3\13\3\13"+
		"\3\13\5\13\u037d\n\13\3\13\3\13\5\13\u0381\n\13\3\13\3\13\5\13\u0385\n"+
		"\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\5\f\u0390\n\f\3\f\3\f\3\f\3\f"+
		"\3\f\5\f\u0397\n\f\3\f\5\f\u039a\n\f\3\r\3\r\5\r\u039e\n\r\3\r\3\r\3\r"+
		"\7\r\u03a3\n\r\f\r\16\r\u03a6\13\r\3\r\3\r\3\r\3\r\5\r\u03ac\n\r\3\r\5"+
		"\r\u03af\n\r\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\5\16\u03ba\n"+
		"\16\3\16\5\16\u03bd\n\16\3\17\3\17\3\17\3\17\5\17\u03c3\n\17\3\17\3\17"+
		"\5\17\u03c7\n\17\3\17\5\17\u03ca\n\17\3\17\3\17\3\17\3\17\5\17\u03d0\n"+
		"\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u03da\n\17\3\20\3\20"+
		"\3\20\3\20\3\20\3\20\5\20\u03e2\n\20\3\20\3\20\3\20\3\20\3\20\7\20\u03e9"+
		"\n\20\f\20\16\20\u03ec\13\20\3\20\3\20\3\20\5\20\u03f1\n\20\3\20\5\20"+
		"\u03f4\n\20\3\20\3\20\5\20\u03f8\n\20\3\20\3\20\3\20\3\20\3\20\3\20\3"+
		"\20\5\20\u0401\n\20\5\20\u0403\n\20\3\20\3\20\3\20\3\20\3\20\5\20\u040a"+
		"\n\20\3\20\3\20\5\20\u040e\n\20\3\20\3\20\3\20\3\20\5\20\u0414\n\20\3"+
		"\20\3\20\5\20\u0418\n\20\3\20\3\20\3\20\3\20\3\20\5\20\u041f\n\20\3\20"+
		"\3\20\3\20\3\20\3\20\3\20\5\20\u0427\n\20\3\20\3\20\3\20\3\20\5\20\u042d"+
		"\n\20\3\20\3\20\3\20\5\20\u0432\n\20\3\20\5\20\u0435\n\20\3\20\3\20\3"+
		"\20\3\20\3\20\3\20\7\20\u043d\n\20\f\20\16\20\u0440\13\20\3\20\3\20\5"+
		"\20\u0444\n\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\7\20\u044f"+
		"\n\20\f\20\16\20\u0452\13\20\3\20\3\20\3\20\3\20\3\20\3\20\5\20\u045a"+
		"\n\20\3\21\3\21\5\21\u045e\n\21\3\21\5\21\u0461\n\21\3\21\3\21\3\21\3"+
		"\21\7\21\u0467\n\21\f\21\16\21\u046a\13\21\3\21\3\21\5\21\u046e\n\21\3"+
		"\21\3\21\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u0478\n\22\5\22\u047a\n\22"+
		"\3\23\3\23\3\23\3\23\3\23\3\23\7\23\u0482\n\23\f\23\16\23\u0485\13\23"+
		"\3\23\3\23\5\23\u0489\n\23\3\24\3\24\3\24\5\24\u048e\n\24\3\24\5\24\u0491"+
		"\n\24\3\24\5\24\u0494\n\24\3\24\5\24\u0497\n\24\3\24\3\24\3\24\5\24\u049c"+
		"\n\24\3\24\3\24\3\24\3\25\3\25\3\25\3\25\5\25\u04a5\n\25\3\25\3\25\3\25"+
		"\3\25\3\25\3\25\3\25\3\25\3\25\5\25\u04b0\n\25\3\26\3\26\5\26\u04b4\n"+
		"\26\3\26\3\26\5\26\u04b8\n\26\3\27\3\27\3\27\5\27\u04bd\n\27\3\30\3\30"+
		"\3\30\7\30\u04c2\n\30\f\30\16\30\u04c5\13\30\3\31\3\31\3\31\3\31\3\31"+
		"\7\31\u04cc\n\31\f\31\16\31\u04cf\13\31\3\31\3\31\5\31\u04d3\n\31\3\32"+
		"\3\32\3\32\3\32\7\32\u04d9\n\32\f\32\16\32\u04dc\13\32\3\32\3\32\3\32"+
		"\5\32\u04e1\n\32\3\32\5\32\u04e4\n\32\3\32\5\32\u04e7\n\32\3\32\5\32\u04ea"+
		"\n\32\5\32\u04ec\n\32\3\33\3\33\5\33\u04f0\n\33\3\34\3\34\5\34\u04f4\n"+
		"\34\3\35\3\35\3\36\3\36\3\36\3\36\3\36\5\36\u04fd\n\36\3\36\3\36\3\36"+
		"\3\36\5\36\u0503\n\36\3\36\3\36\5\36\u0507\n\36\5\36\u0509\n\36\3\37\3"+
		"\37\3\37\5\37\u050e\n\37\3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 "+
		"\3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 "+
		"\3 \5 \u0537\n \3 \3 \3 \3 \3 \5 \u053e\n \3!\3!\3!\3!\3!\3!\3!\3!\3!"+
		"\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!"+
		"\3!\5!\u0561\n!\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\5\"\u056f"+
		"\n\"\3#\3#\3#\3#\3#\3#\3#\5#\u0578\n#\3#\3#\3#\3#\5#\u057e\n#\3#\3#\3"+
		"#\3#\3#\3#\5#\u0586\n#\3$\3$\5$\u058a\n$\3$\3$\3$\3$\3$\5$\u0591\n$\3"+
		"$\3$\5$\u0595\n$\6$\u0597\n$\r$\16$\u0598\3$\5$\u059c\n$\3$\3$\3$\3$\3"+
		"$\3$\5$\u05a4\n$\3%\3%\3%\3%\5%\u05aa\n%\3&\3&\3&\3&\3\'\3\'\3\'\3\'\3"+
		"\'\5\'\u05b5\n\'\5\'\u05b7\n\'\3\'\3\'\5\'\u05bb\n\'\3(\3(\3(\3(\3(\3"+
		"(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3"+
		"(\3(\3(\5(\u05dc\n(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3"+
		"(\5(\u05ef\n(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3"+
		"(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\5(\u0617\n"+
		"(\3)\3)\3)\3)\3*\5*\u061e\n*\3*\3*\3*\3*\5*\u0624\n*\3+\5+\u0627\n+\3"+
		"+\3+\5+\u062b\n+\3+\5+\u062e\n+\3+\3+\5+\u0632\n+\3+\3+\3+\7+\u0637\n"+
		"+\f+\16+\u063a\13+\3+\3+\5+\u063e\n+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+"+
		"\3+\3+\3+\3+\3+\3+\3+\3+\3+\5+\u0654\n+\3,\3,\5,\u0658\n,\3,\5,\u065b"+
		"\n,\3,\3,\3,\5,\u0660\n,\3,\5,\u0663\n,\3,\3,\5,\u0667\n,\3,\3,\5,\u066b"+
		"\n,\3,\3,\3,\3,\3,\3,\3,\5,\u0674\n,\3,\3,\3,\3,\3,\3,\3,\5,\u067d\n,"+
		"\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\5,\u068f\n,\3,\3,\3,"+
		"\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,"+
		"\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\5,\u06b9\n,\3,\3,\3,\3,\5,"+
		"\u06bf\n,\3,\5,\u06c2\n,\5,\u06c4\n,\3-\3-\5-\u06c8\n-\3-\3-\3-\5-\u06cd"+
		"\n-\3-\3-\5-\u06d1\n-\3-\3-\3-\3-\3-\3-\5-\u06d9\n-\3-\3-\3-\3-\3-\5-"+
		"\u06e0\n-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\6-\u06ee\n-\r-\16-\u06ef"+
		"\5-\u06f2\n-\3.\3.\3.\3.\5.\u06f8\n.\3.\3.\3.\3.\6.\u06fe\n.\r.\16.\u06ff"+
		"\3.\3.\5.\u0704\n.\3/\3/\3/\3/\3/\5/\u070b\n/\3/\3/\3/\3/\5/\u0711\n/"+
		"\3/\5/\u0714\n/\5/\u0716\n/\3\60\3\60\3\61\3\61\3\61\3\61\3\62\3\62\3"+
		"\62\5\62\u0721\n\62\3\62\3\62\5\62\u0725\n\62\3\63\5\63\u0728\n\63\3\63"+
		"\3\63\3\64\3\64\3\64\3\65\3\65\3\65\5\65\u0732\n\65\3\65\3\65\3\65\3\65"+
		"\3\65\3\65\3\65\7\65\u073b\n\65\f\65\16\65\u073e\13\65\3\65\3\65\3\65"+
		"\3\65\3\65\5\65\u0745\n\65\3\65\3\65\5\65\u0749\n\65\3\65\3\65\3\65\3"+
		"\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\5\65\u0759\n\65"+
		"\3\65\3\65\3\65\3\65\3\65\5\65\u0760\n\65\3\65\3\65\3\65\3\65\3\65\5\65"+
		"\u0767\n\65\3\66\3\66\3\66\5\66\u076c\n\66\3\67\3\67\5\67\u0770\n\67\3"+
		"\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\5\67\u077d\n\67"+
		"\3\67\3\67\3\67\3\67\5\67\u0783\n\67\5\67\u0785\n\67\38\38\38\38\38\3"+
		"8\38\38\38\38\58\u0791\n8\38\58\u0794\n8\38\38\38\38\38\38\38\38\38\3"+
		"8\38\38\38\38\38\38\38\78\u07a7\n8\f8\168\u07aa\138\38\38\58\u07ae\n8"+
		"\39\39\39\39\39\59\u07b5\n9\39\39\39\59\u07ba\n9\39\39\3:\3:\3:\5:\u07c1"+
		"\n:\5:\u07c3\n:\3:\3:\3:\7:\u07c8\n:\f:\16:\u07cb\13:\3:\3:\3:\3:\3:\3"+
		":\7:\u07d3\n:\f:\16:\u07d6\13:\3:\3:\5:\u07da\n:\5:\u07dc\n:\3:\3:\3:"+
		"\3:\3:\5:\u07e3\n:\5:\u07e5\n:\3:\3:\3:\3:\3:\3:\5:\u07ed\n:\5:\u07ef"+
		"\n:\3:\3:\3:\3:\3:\5:\u07f6\n:\5:\u07f8\n:\3:\3:\5:\u07fc\n:\3:\3:\5:"+
		"\u0800\n:\3;\3;\3;\3;\3<\3<\5<\u0808\n<\3<\3<\3<\3<\5<\u080e\n<\3<\5<"+
		"\u0811\n<\7<\u0813\n<\f<\16<\u0816\13<\3<\3<\5<\u081a\n<\3=\5=\u081d\n"+
		"=\3=\3=\5=\u0821\n=\3=\3=\3=\5=\u0826\n=\3=\3=\3=\5=\u082b\n=\3=\3=\3"+
		"=\3=\3=\3=\5=\u0833\n=\3>\3>\3>\3>\3>\3?\3?\3?\5?\u083d\n?\3?\3?\5?\u0841"+
		"\n?\3@\3@\3@\3@\3@\3@\3@\5@\u084a\n@\3@\3@\3@\5@\u084f\n@\3@\3@\3@\3@"+
		"\3@\3@\5@\u0857\n@\3@\3@\3@\3@\3@\3@\3@\3@\3@\7@\u0862\n@\f@\16@\u0865"+
		"\13@\5@\u0867\n@\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\5A\u0874\nA\3A\3A\3"+
		"A\3A\3A\3A\3A\3A\3A\3A\5A\u0880\nA\3B\3B\3B\3B\3C\3C\5C\u0888\nC\3C\3"+
		"C\3C\3C\3C\5C\u088f\nC\3D\3D\3D\3D\3D\3D\5D\u0897\nD\3D\3D\3D\3D\3D\3"+
		"D\3D\3D\5D\u08a1\nD\3E\3E\3E\3E\3E\3E\3E\3E\7E\u08ab\nE\fE\16E\u08ae\13"+
		"E\3E\3E\3E\3E\5E\u08b4\nE\3E\3E\3E\3E\3E\3E\3E\3E\3E\5E\u08bf\nE\3E\3"+
		"E\5E\u08c3\nE\3F\3F\3F\3F\3F\5F\u08ca\nF\3F\5F\u08cd\nF\3F\3F\3F\5F\u08d2"+
		"\nF\3F\3F\5F\u08d6\nF\3F\3F\3F\3F\3F\5F\u08dd\nF\3F\3F\3F\5F\u08e2\nF"+
		"\3F\5F\u08e5\nF\5F\u08e7\nF\3G\3G\3G\3G\3H\3H\3H\3I\5I\u08f1\nI\3I\3I"+
		"\5I\u08f5\nI\3I\5I\u08f8\nI\3I\5I\u08fb\nI\3I\3I\5I\u08ff\nI\3I\3I\3I"+
		"\3J\3J\5J\u0906\nJ\3J\3J\5J\u090a\nJ\3J\5J\u090d\nJ\3J\5J\u0910\nJ\3J"+
		"\5J\u0913\nJ\3K\3K\3K\3K\3L\3L\3L\3L\3L\7L\u091e\nL\fL\16L\u0921\13L\3"+
		"L\3L\3M\3M\3M\3N\3N\5N\u092a\nN\3N\3N\5N\u092e\nN\3N\3N\5N\u0932\nN\3"+
		"N\3N\3N\5N\u0937\nN\5N\u0939\nN\3N\3N\3N\5N\u093e\nN\5N\u0940\nN\3N\5"+
		"N\u0943\nN\3O\3O\5O\u0947\nO\3O\5O\u094a\nO\3O\5O\u094d\nO\3O\3O\3O\3"+
		"O\3O\3O\5O\u0955\nO\3O\3O\5O\u0959\nO\5O\u095b\nO\3P\3P\3P\3P\3P\3P\3"+
		"P\3P\3P\3P\3P\3P\7P\u0969\nP\fP\16P\u096c\13P\3P\3P\5P\u0970\nP\6P\u0972"+
		"\nP\rP\16P\u0973\5P\u0976\nP\3P\3P\3P\3P\3Q\3Q\3Q\3Q\3Q\3Q\3Q\7Q\u0983"+
		"\nQ\fQ\16Q\u0986\13Q\5Q\u0988\nQ\3Q\3Q\3Q\3Q\3Q\3Q\7Q\u0990\nQ\fQ\16Q"+
		"\u0993\13Q\5Q\u0995\nQ\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3"+
		"Q\3Q\3Q\5Q\u09a9\nQ\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\5"+
		"Q\u09bb\nQ\7Q\u09bd\nQ\fQ\16Q\u09c0\13Q\3Q\5Q\u09c3\nQ\3Q\3Q\3Q\3Q\3Q"+
		"\5Q\u09ca\nQ\3Q\5Q\u09cd\nQ\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q"+
		"\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\5Q\u09ea\nQ\3Q\3Q\3Q\3Q\3Q\3Q"+
		"\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\5Q"+
		"\u0a08\nQ\7Q\u0a0a\nQ\fQ\16Q\u0a0d\13Q\3Q\3Q\5Q\u0a11\nQ\3R\3R\3R\5R\u0a16"+
		"\nR\3R\3R\3R\3R\3R\7R\u0a1d\nR\fR\16R\u0a20\13R\3S\3S\5S\u0a24\nS\3S\3"+
		"S\3S\5S\u0a29\nS\3S\3S\5S\u0a2d\nS\3S\3S\3S\3S\3S\5S\u0a34\nS\3T\3T\3"+
		"T\3T\3T\3T\3T\3T\3T\3T\7T\u0a40\nT\fT\16T\u0a43\13T\3T\3T\3U\3U\3U\3U"+
		"\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\5V\u0a56\nV\3V\3V\3W\3W\3W\3W\3W\3W"+
		"\3W\3W\3W\3W\5W\u0a64\nW\3W\3W\3W\3W\3W\3W\3W\5W\u0a6d\nW\3W\3W\3X\3X"+
		"\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\5X\u0a87"+
		"\nX\3X\3X\3X\3X\3X\3X\3X\5X\u0a90\nX\3X\3X\3Y\3Y\5Y\u0a96\nY\3Y\3Y\3Y"+
		"\3Y\3Y\3Y\3Y\7Y\u0a9f\nY\fY\16Y\u0aa2\13Y\5Y\u0aa4\nY\3Y\5Y\u0aa7\nY\3"+
		"Z\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u0ab0\nZ\3[\3[\3[\3[\5[\u0ab6\n[\3[\3[\3[\5[\u0abb"+
		"\n[\3\\\3\\\3\\\5\\\u0ac0\n\\\3\\\3\\\3\\\5\\\u0ac5\n\\\3\\\3\\\3\\\5"+
		"\\\u0aca\n\\\3]\3]\3]\3]\3]\5]\u0ad1\n]\3]\3]\3]\5]\u0ad6\n]\3^\3^\3^"+
		"\3^\3^\3^\3^\5^\u0adf\n^\3^\6^\u0ae2\n^\r^\16^\u0ae3\5^\u0ae6\n^\3_\3"+
		"_\5_\u0aea\n_\3_\3_\3_\5_\u0aef\n_\3_\3_\3`\3`\3`\3`\5`\u0af7\n`\3`\3"+
		"`\3`\3`\3`\3`\3`\3`\5`\u0b01\n`\3`\3`\3`\3`\3`\3`\3`\3`\5`\u0b0b\n`\3"+
		"`\3`\3`\5`\u0b10\n`\3a\3a\3a\3b\3b\3b\3b\3b\3b\3b\3b\5b\u0b1d\nb\3c\3"+
		"c\3c\3c\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\5"+
		"d\u0b37\nd\3d\5d\u0b3a\nd\3d\5d\u0b3d\nd\3d\5d\u0b40\nd\3d\3d\3e\3e\3"+
		"e\3e\3e\3e\3e\7e\u0b4b\ne\fe\16e\u0b4e\13e\3e\3e\3e\3e\3e\3e\3e\5e\u0b57"+
		"\ne\3f\3f\3f\3f\3f\5f\u0b5e\nf\3g\3g\3g\3g\3g\3g\3h\3h\3h\3h\5h\u0b6a"+
		"\nh\3h\3h\3h\3h\5h\u0b70\nh\3h\5h\u0b73\nh\3h\3h\5h\u0b77\nh\3i\3i\3i"+
		"\3i\3j\3j\3j\3j\3j\3j\7j\u0b83\nj\fj\16j\u0b86\13j\3j\3j\5j\u0b8a\nj\3"+
		"k\3k\3k\3k\3l\3l\3l\5l\u0b93\nl\3l\3l\3l\5l\u0b98\nl\3l\3l\3l\3m\3m\3"+
		"m\3m\3m\7m\u0ba2\nm\fm\16m\u0ba5\13m\3m\5m\u0ba8\nm\3n\3n\5n\u0bac\nn"+
		"\3n\3n\3n\7n\u0bb1\nn\fn\16n\u0bb4\13n\3n\5n\u0bb7\nn\3o\3o\3o\3o\5o\u0bbd"+
		"\no\3o\3o\3o\5o\u0bc2\no\3o\3o\3p\3p\5p\u0bc8\np\3p\3p\3p\3p\3p\3p\5p"+
		"\u0bd0\np\3p\5p\u0bd3\np\3q\3q\5q\u0bd7\nq\3q\3q\3q\3q\3q\3q\3q\3q\3q"+
		"\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\3r\3r\3r\3r\3r\3r\3r\3r\3s\3s\3s\5s\u0bf7"+
		"\ns\3s\3s\7s\u0bfb\ns\fs\16s\u0bfe\13s\5s\u0c00\ns\3t\3t\3t\5t\u0c05\n"+
		"t\3u\3u\5u\u0c09\nu\3v\3v\3v\3v\3v\3v\3v\3v\3v\3v\3v\5v\u0c16\nv\3v\3"+
		"v\3v\5v\u0c1b\nv\3v\3v\3v\5v\u0c20\nv\3w\3w\3w\3w\3w\3w\3w\5w\u0c29\n"+
		"w\3x\3x\3x\3x\3x\3x\3x\3x\3x\5x\u0c34\nx\3x\5x\u0c37\nx\3y\3y\3y\5y\u0c3c"+
		"\ny\3y\6y\u0c3f\ny\ry\16y\u0c40\5y\u0c43\ny\3z\3z\5z\u0c47\nz\3{\3{\3"+
		"{\3{\5{\u0c4d\n{\3{\3{\3{\3{\3{\3{\3{\7{\u0c56\n{\f{\16{\u0c59\13{\3{"+
		"\3{\5{\u0c5d\n{\3|\3|\5|\u0c61\n|\3|\3|\3|\3|\3|\5|\u0c68\n|\3|\3|\3|"+
		"\3|\3|\3|\3|\3}\3}\3}\3}\3}\3}\3}\3}\5}\u0c79\n}\3}\3}\3}\3}\5}\u0c7f"+
		"\n}\3}\3}\3}\3}\3}\7}\u0c86\n}\f}\16}\u0c89\13}\3}\3}\5}\u0c8d\n}\3~\3"+
		"~\3~\3\177\3\177\3\177\3\177\3\177\3\177\7\177\u0c98\n\177\f\177\16\177"+
		"\u0c9b\13\177\3\177\3\177\3\u0080\3\u0080\3\u0080\5\u0080\u0ca2\n\u0080"+
		"\3\u0080\3\u0080\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081"+
		"\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081"+
		"\3\u0081\5\u0081\u0cb7\n\u0081\3\u0082\3\u0082\5\u0082\u0cbb\n\u0082\3"+
		"\u0082\3\u0082\3\u0082\5\u0082\u0cc0\n\u0082\3\u0082\3\u0082\3\u0082\3"+
		"\u0082\3\u0082\3\u0082\5\u0082\u0cc8\n\u0082\3\u0082\3\u0082\3\u0082\3"+
		"\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\7\u0082\u0cd3\n\u0082\f"+
		"\u0082\16\u0082\u0cd6\13\u0082\3\u0082\3\u0082\3\u0083\3\u0083\3\u0083"+
		"\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083"+
		"\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083"+
		"\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083"+
		"\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083"+
		"\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083"+
		"\3\u0083\3\u0083\3\u0083\5\u0083\u0d0d\n\u0083\3\u0084\3\u0084\3\u0084"+
		"\3\u0085\3\u0085\3\u0085\5\u0085\u0d15\n\u0085\3\u0085\3\u0085\3\u0085"+
		"\3\u0085\3\u0085\7\u0085\u0d1c\n\u0085\f\u0085\16\u0085\u0d1f\13\u0085"+
		"\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085"+
		"\3\u0085\7\u0085\u0d2b\n\u0085\f\u0085\16\u0085\u0d2e\13\u0085\3\u0085"+
		"\5\u0085\u0d31\n\u0085\3\u0085\3\u0085\3\u0085\3\u0085\5\u0085\u0d37\n"+
		"\u0085\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\5\u0086\u0d3e\n\u0086\3"+
		"\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\5\u0086\u0d46\n\u0086\3"+
		"\u0086\3\u0086\3\u0086\5\u0086\u0d4b\n\u0086\3\u0086\3\u0086\3\u0086\3"+
		"\u0086\3\u0086\3\u0086\3\u0086\5\u0086\u0d54\n\u0086\5\u0086\u0d56\n\u0086"+
		"\3\u0087\3\u0087\3\u0087\7\u0087\u0d5b\n\u0087\f\u0087\16\u0087\u0d5e"+
		"\13\u0087\3\u0087\5\u0087\u0d61\n\u0087\3\u0088\3\u0088\5\u0088\u0d65"+
		"\n\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088"+
		"\3\u0088\5\u0088\u0d70\n\u0088\3\u0088\3\u0088\5\u0088\u0d74\n\u0088\3"+
		"\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\7\u0088\u0d7c\n\u0088\f"+
		"\u0088\16\u0088\u0d7f\13\u0088\3\u0088\3\u0088\5\u0088\u0d83\n\u0088\3"+
		"\u0088\3\u0088\5\u0088\u0d87\n\u0088\3\u0089\3\u0089\3\u0089\3\u0089\3"+
		"\u0089\5\u0089\u0d8e\n\u0089\3\u008a\5\u008a\u0d91\n\u008a\3\u008a\3\u008a"+
		"\3\u008a\3\u008a\3\u008a\3\u008a\5\u008a\u0d99\n\u008a\3\u008a\3\u008a"+
		"\3\u008a\5\u008a\u0d9e\n\u008a\3\u008a\3\u008a\3\u008a\5\u008a\u0da3\n"+
		"\u008a\5\u008a\u0da5\n\u008a\3\u008a\5\u008a\u0da8\n\u008a\6\u008a\u0daa"+
		"\n\u008a\r\u008a\16\u008a\u0dab\3\u008a\3\u008a\3\u008a\3\u008a\5\u008a"+
		"\u0db2\n\u008a\3\u008a\5\u008a\u0db5\n\u008a\3\u008a\5\u008a\u0db8\n\u008a"+
		"\3\u008a\3\u008a\3\u008a\5\u008a\u0dbd\n\u008a\5\u008a\u0dbf\n\u008a\3"+
		"\u008a\3\u008a\5\u008a\u0dc3\n\u008a\3\u008a\5\u008a\u0dc6\n\u008a\3\u008a"+
		"\5\u008a\u0dc9\n\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008b\3\u008b"+
		"\3\u008b\5\u008b\u0dd2\n\u008b\3\u008b\3\u008b\3\u008c\3\u008c\3\u008c"+
		"\3\u008c\3\u008c\3\u008d\3\u008d\3\u008d\5\u008d\u0dde\n\u008d\5\u008d"+
		"\u0de0\n\u008d\3\u008d\3\u008d\5\u008d\u0de4\n\u008d\3\u008d\3\u008d\3"+
		"\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\5\u008d\u0dee\n\u008d\3"+
		"\u008d\5\u008d\u0df1\n\u008d\3\u008e\5\u008e\u0df4\n\u008e\3\u008e\3\u008e"+
		"\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e"+
		"\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\7\u008e\u0e08"+
		"\n\u008e\f\u008e\16\u008e\u0e0b\13\u008e\3\u008e\3\u008e\3\u008e\3\u008e"+
		"\3\u008e\7\u008e\u0e12\n\u008e\f\u008e\16\u008e\u0e15\13\u008e\3\u008e"+
		"\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e"+
		"\3\u008e\3\u008e\3\u008e\5\u008e\u0e24\n\u008e\3\u008f\3\u008f\3\u008f"+
		"\7\u008f\u0e29\n\u008f\f\u008f\16\u008f\u0e2c\13\u008f\3\u0090\3\u0090"+
		"\3\u0090\3\u0090\3\u0090\3\u0091\3\u0091\3\u0091\7\u0091\u0e36\n\u0091"+
		"\f\u0091\16\u0091\u0e39\13\u0091\3\u0092\3\u0092\5\u0092\u0e3d\n\u0092"+
		"\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092"+
		"\3\u0092\3\u0092\3\u0092\5\u0092\u0e4b\n\u0092\3\u0093\3\u0093\3\u0093"+
		"\3\u0093\3\u0093\3\u0093\3\u0093\5\u0093\u0e54\n\u0093\3\u0093\3\u0093"+
		"\3\u0093\3\u0093\5\u0093\u0e5a\n\u0093\3\u0093\3\u0093\3\u0093\3\u0093"+
		"\5\u0093\u0e60\n\u0093\5\u0093\u0e62\n\u0093\3\u0094\3\u0094\3\u0094\3"+
		"\u0094\3\u0094\5\u0094\u0e69\n\u0094\3\u0095\3\u0095\3\u0095\5\u0095\u0e6e"+
		"\n\u0095\3\u0096\3\u0096\3\u0096\7\u0096\u0e73\n\u0096\f\u0096\16\u0096"+
		"\u0e76\13\u0096\3\u0097\5\u0097\u0e79\n\u0097\3\u0097\3\u0097\3\u0098"+
		"\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\5\u0098\u0e83\n\u0098\3\u0099"+
		"\3\u0099\3\u0099\3\u0099\3\u0099\5\u0099\u0e8a\n\u0099\5\u0099\u0e8c\n"+
		"\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\5\u0099\u0e93\n\u0099\3"+
		"\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a"+
		"\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a"+
		"\3\u009a\3\u009a\3\u009a\3\u009a\5\u009a\u0eab\n\u009a\3\u009a\3\u009a"+
		"\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a"+
		"\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\5\u009a\u0ebf"+
		"\n\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a"+
		"\5\u009a\u0ec9\n\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a"+
		"\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a"+
		"\3\u009a\5\u009a\u0edb\n\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a"+
		"\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a"+
		"\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a"+
		"\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a"+
		"\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a"+
		"\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a"+
		"\3\u009a\3\u009a\5\u009a\u0f11\n\u009a\3\u009b\3\u009b\3\u009b\3\u009b"+
		"\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b"+
		"\3\u009b\5\u009b\u0f21\n\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b"+
		"\3\u009b\5\u009b\u0f29\n\u009b\3\u009b\3\u009b\3\u009b\5\u009b\u0f2e\n"+
		"\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b"+
		"\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\5\u009b"+
		"\u0f40\n\u009b\3\u009c\3\u009c\5\u009c\u0f44\n\u009c\3\u009c\3\u009c\3"+
		"\u009c\3\u009c\3\u009c\5\u009c\u0f4b\n\u009c\5\u009c\u0f4d\n\u009c\3\u009c"+
		"\3\u009c\3\u009d\6\u009d\u0f52\n\u009d\r\u009d\16\u009d\u0f53\3\u009d"+
		"\5\u009d\u0f57\n\u009d\3\u009e\3\u009e\3\u009e\3\u009e\3\u009f\3\u009f"+
		"\3\u009f\3\u009f\3\u009f\7\u009f\u0f62\n\u009f\f\u009f\16\u009f\u0f65"+
		"\13\u009f\3\u009f\3\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a1\3\u00a1\3\u00a1"+
		"\3\u00a2\3\u00a2\3\u00a2\3\u00a2\7\u00a2\u0f73\n\u00a2\f\u00a2\16\u00a2"+
		"\u0f76\13\u00a2\5\u00a2\u0f78\n\u00a2\3\u00a2\5\u00a2\u0f7b\n\u00a2\3"+
		"\u00a2\5\u00a2\u0f7e\n\u00a2\3\u00a2\3\u00a2\3\u00a3\3\u00a3\3\u00a3\3"+
		"\u00a3\3\u00a3\7\u00a3\u0f87\n\u00a3\f\u00a3\16\u00a3\u0f8a\13\u00a3\3"+
		"\u00a4\3\u00a4\7\u00a4\u0f8e\n\u00a4\f\u00a4\16\u00a4\u0f91\13\u00a4\3"+
		"\u00a4\3\u00a4\5\u00a4\u0f95\n\u00a4\3\u00a5\5\u00a5\u0f98\n\u00a5\3\u00a5"+
		"\5\u00a5\u0f9b\n\u00a5\3\u00a5\3\u00a5\3\u00a5\5\u00a5\u0fa0\n\u00a5\3"+
		"\u00a6\3\u00a6\3\u00a7\5\u00a7\u0fa5\n\u00a7\3\u00a7\3\u00a7\5\u00a7\u0fa9"+
		"\n\u00a7\3\u00a7\3\u00a7\7\u00a7\u0fad\n\u00a7\f\u00a7\16\u00a7\u0fb0"+
		"\13\u00a7\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\5\u00a8"+
		"\u0fb9\n\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\5\u00a8\u0fc0\n"+
		"\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\5\u00a8\u0fc6\n\u00a8\3\u00a8\3"+
		"\u00a8\5\u00a8\u0fca\n\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\5\u00a8\u0fd0"+
		"\n\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\5\u00a8\u0fd6\n\u00a8\3\u00a9"+
		"\5\u00a9\u0fd9\n\u00a9\3\u00a9\3\u00a9\3\u00aa\5\u00aa\u0fde\n\u00aa\3"+
		"\u00aa\3\u00aa\3\u00ab\3\u00ab\3\u00ac\3\u00ac\5\u00ac\u0fe6\n\u00ac\3"+
		"\u00ac\5\u00ac\u0fe9\n\u00ac\3\u00ac\3\u00ac\5\u00ac\u0fed\n\u00ac\3\u00ad"+
		"\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u0ff5\n\u00ad\3\u00ad"+
		"\3\u00ad\5\u00ad\u0ff9\n\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\7\u00ad"+
		"\u0fff\n\u00ad\f\u00ad\16\u00ad\u1002\13\u00ad\5\u00ad\u1004\n\u00ad\3"+
		"\u00ad\3\u00ad\5\u00ad\u1008\n\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u100d"+
		"\n\u00ad\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae"+
		"\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\7\u00ae\u101d\n\u00ae"+
		"\f\u00ae\16\u00ae\u1020\13\u00ae\5\u00ae\u1022\n\u00ae\3\u00ae\3\u00ae"+
		"\5\u00ae\u1026\n\u00ae\3\u00ae\3\u00ae\3\u00ae\5\u00ae\u102b\n\u00ae\5"+
		"\u00ae\u102d\n\u00ae\3\u00af\3\u00af\5\u00af\u1031\n\u00af\3\u00af\3\u00af"+
		"\3\u00af\3\u00af\5\u00af\u1037\n\u00af\3\u00b0\3\u00b0\3\u00b0\3\u00b0"+
		"\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u1040\n\u00b0\3\u00b1\3\u00b1\3\u00b1"+
		"\3\u00b1\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\5\u00b2\u104c"+
		"\n\u00b2\3\u00b2\3\u00b2\3\u00b2\5\u00b2\u1051\n\u00b2\3\u00b2\3\u00b2"+
		"\3\u00b2\3\u00b2\3\u00b2\3\u00b2\5\u00b2\u1059\n\u00b2\3\u00b3\3\u00b3"+
		"\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3"+
		"\3\u00b3\3\u00b3\3\u00b3\3\u00b3\5\u00b3\u106a\n\u00b3\3\u00b3\3\u00b3"+
		"\3\u00b3\3\u00b3\5\u00b3\u1070\n\u00b3\3\u00b4\3\u00b4\5\u00b4\u1074\n"+
		"\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u107c\n"+
		"\u00b4\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b6\3\u00b6"+
		"\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b7\3\u00b7\3\u00b7\3\u00b7"+
		"\3\u00b7\3\u00b7\3\u00b7\7\u00b7\u1092\n\u00b7\f\u00b7\16\u00b7\u1095"+
		"\13\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\7\u00b7\u109b\n\u00b7\f\u00b7"+
		"\16\u00b7\u109e\13\u00b7\5\u00b7\u10a0\n\u00b7\3\u00b8\3\u00b8\3\u00b8"+
		"\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u10ab\n\u00b8"+
		"\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u10b2\n\u00b8\3\u00b8"+
		"\3\u00b8\3\u00b8\5\u00b8\u10b7\n\u00b8\5\u00b8\u10b9\n\u00b8\3\u00b8\5"+
		"\u00b8\u10bc\n\u00b8\3\u00b8\3\u00b8\5\u00b8\u10c0\n\u00b8\3\u00b9\3\u00b9"+
		"\3\u00b9\3\u00b9\3\u00b9\5\u00b9\u10c7\n\u00b9\3\u00b9\3\u00b9\3\u00b9"+
		"\5\u00b9\u10cc\n\u00b9\5\u00b9\u10ce\n\u00b9\3\u00b9\3\u00b9\3\u00ba\3"+
		"\u00ba\3\u00ba\5\u00ba\u10d5\n\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\5"+
		"\u00ba\u10db\n\u00ba\3\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u10e1\n\u00bb"+
		"\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u10ea"+
		"\n\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\7\u00bb\u10f0\n\u00bb\f\u00bb"+
		"\16\u00bb\u10f3\13\u00bb\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc"+
		"\5\u00bc\u10fb\n\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u1100\n\u00bc\3"+
		"\u00bc\5\u00bc\u1103\n\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3"+
		"\u00bc\5\u00bc\u110b\n\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\5"+
		"\u00bc\u1112\n\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u1117\n\u00bc\5\u00bc"+
		"\u1119\n\u00bc\3\u00bc\5\u00bc\u111c\n\u00bc\3\u00bc\3\u00bc\3\u00bc\3"+
		"\u00bc\5\u00bc\u1122\n\u00bc\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3"+
		"\u00bd\3\u00bd\3\u00bd\5\u00bd\u112c\n\u00bd\3\u00be\3\u00be\3\u00be\5"+
		"\u00be\u1131\n\u00be\3\u00be\3\u00be\3\u00be\3\u00be\5\u00be\u1137\n\u00be"+
		"\3\u00bf\5\u00bf\u113a\n\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf"+
		"\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0"+
		"\5\u00c0\u114a\n\u00c0\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1"+
		"\3\u00c1\7\u00c1\u1153\n\u00c1\f\u00c1\16\u00c1\u1156\13\u00c1\3\u00c1"+
		"\3\u00c1\3\u00c1\5\u00c1\u115b\n\u00c1\3\u00c1\5\u00c1\u115e\n\u00c1\3"+
		"\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3"+
		"\3\u00c3\3\u00c3\3\u00c3\3\u00c3\7\u00c3\u116d\n\u00c3\f\u00c3\16\u00c3"+
		"\u1170\13\u00c3\5\u00c3\u1172\n\u00c3\3\u00c4\5\u00c4\u1175\n\u00c4\3"+
		"\u00c4\3\u00c4\5\u00c4\u1179\n\u00c4\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3"+
		"\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\5\u00c5\u1184\n\u00c5\3\u00c6\3"+
		"\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c7\3\u00c7\5\u00c7\u118e\n"+
		"\u00c7\3\u00c8\3\u00c8\3\u00c8\3\u00c8\5\u00c8\u1194\n\u00c8\3\u00c8\3"+
		"\u00c8\5\u00c8\u1198\n\u00c8\3\u00c8\5\u00c8\u119b\n\u00c8\3\u00c8\3\u00c8"+
		"\3\u00c8\3\u00c8\3\u00c8\5\u00c8\u11a2\n\u00c8\5\u00c8\u11a4\n\u00c8\3"+
		"\u00c8\3\u00c8\5\u00c8\u11a8\n\u00c8\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3"+
		"\u00c9\3\u00c9\5\u00c9\u11b0\n\u00c9\3\u00c9\3\u00c9\5\u00c9\u11b4\n\u00c9"+
		"\3\u00c9\3\u00c9\5\u00c9\u11b8\n\u00c9\3\u00c9\5\u00c9\u11bb\n\u00c9\3"+
		"\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\5\u00c9\u11c2\n\u00c9\5\u00c9\u11c4"+
		"\n\u00c9\3\u00ca\3\u00ca\5\u00ca\u11c8\n\u00ca\3\u00ca\7\u00ca\u11cb\n"+
		"\u00ca\f\u00ca\16\u00ca\u11ce\13\u00ca\3\u00cb\5\u00cb\u11d1\n\u00cb\3"+
		"\u00cb\3\u00cb\3\u00cb\5\u00cb\u11d6\n\u00cb\3\u00cb\3\u00cb\5\u00cb\u11da"+
		"\n\u00cb\3\u00cb\3\u00cb\5\u00cb\u11de\n\u00cb\3\u00cb\3\u00cb\3\u00cb"+
		"\5\u00cb\u11e3\n\u00cb\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u11e8\n\u00cb\3"+
		"\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\5\u00cb"+
		"\u11f2\n\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\5\u00cb"+
		"\u11fa\n\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb"+
		"\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb"+
		"\5\u00cb\u120c\n\u00cb\3\u00cc\3\u00cc\5\u00cc\u1210\n\u00cc\3\u00cc\5"+
		"\u00cc\u1213\n\u00cc\3\u00cc\5\u00cc\u1216\n\u00cc\3\u00cc\5\u00cc\u1219"+
		"\n\u00cc\3\u00cc\3\u00cc\5\u00cc\u121d\n\u00cc\3\u00cc\3\u00cc\5\u00cc"+
		"\u1221\n\u00cc\3\u00cc\3\u00cc\5\u00cc\u1225\n\u00cc\3\u00cc\3\u00cc\5"+
		"\u00cc\u1229\n\u00cc\3\u00cc\5\u00cc\u122c\n\u00cc\3\u00cc\3\u00cc\3\u00cc"+
		"\5\u00cc\u1231\n\u00cc\3\u00cc\3\u00cc\5\u00cc\u1235\n\u00cc\3\u00cc\5"+
		"\u00cc\u1238\n\u00cc\3\u00cd\3\u00cd\3\u00cd\3\u00ce\3\u00ce\3\u00ce\3"+
		"\u00ce\3\u00cf\3\u00cf\3\u00cf\3\u00cf\7\u00cf\u1245\n\u00cf\f\u00cf\16"+
		"\u00cf\u1248\13\u00cf\3\u00cf\3\u00cf\3\u00d0\3\u00d0\5\u00d0\u124e\n"+
		"\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d1\5\u00d1\u1254\n\u00d1\3\u00d1\3"+
		"\u00d1\5\u00d1\u1258\n\u00d1\3\u00d1\3\u00d1\5\u00d1\u125c\n\u00d1\3\u00d1"+
		"\3\u00d1\3\u00d1\5\u00d1\u1261\n\u00d1\3\u00d1\3\u00d1\5\u00d1\u1265\n"+
		"\u00d1\3\u00d1\5\u00d1\u1268\n\u00d1\3\u00d1\5\u00d1\u126b\n\u00d1\3\u00d1"+
		"\5\u00d1\u126e\n\u00d1\3\u00d2\5\u00d2\u1271\n\u00d2\3\u00d2\3\u00d2\5"+
		"\u00d2\u1275\n\u00d2\3\u00d2\3\u00d2\5\u00d2\u1279\n\u00d2\3\u00d2\3\u00d2"+
		"\5\u00d2\u127d\n\u00d2\3\u00d2\3\u00d2\5\u00d2\u1281\n\u00d2\3\u00d2\5"+
		"\u00d2\u1284\n\u00d2\3\u00d2\5\u00d2\u1287\n\u00d2\3\u00d2\5\u00d2\u128a"+
		"\n\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\5\u00d2\u1290\n\u00d2\3\u00d2"+
		"\3\u00d2\5\u00d2\u1294\n\u00d2\3\u00d2\5\u00d2\u1297\n\u00d2\3\u00d3\3"+
		"\u00d3\3\u00d3\5\u00d3\u129c\n\u00d3\3\u00d3\3\u00d3\3\u00d3\5\u00d3\u12a1"+
		"\n\u00d3\3\u00d3\3\u00d3\3\u00d4\3\u00d4\3\u00d4\5\u00d4\u12a8\n\u00d4"+
		"\3\u00d5\3\u00d5\3\u00d5\3\u00d5\5\u00d5\u12ae\n\u00d5\3\u00d5\3\u00d5"+
		"\3\u00d6\3\u00d6\3\u00d6\3\u00d6\5\u00d6\u12b6\n\u00d6\3\u00d7\3\u00d7"+
		"\3\u00d7\3\u00d7\3\u00d7\7\u00d7\u12bd\n\u00d7\f\u00d7\16\u00d7\u12c0"+
		"\13\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7"+
		"\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\5\u00d7\u12d1"+
		"\n\u00d7\3\u00d8\3\u00d8\3\u00d8\3\u00d8\7\u00d8\u12d7\n\u00d8\f\u00d8"+
		"\16\u00d8\u12da\13\u00d8\3\u00d8\3\u00d8\3\u00d9\3\u00d9\3\u00d9\3\u00d9"+
		"\7\u00d9\u12e2\n\u00d9\f\u00d9\16\u00d9\u12e5\13\u00d9\5\u00d9\u12e7\n"+
		"\u00d9\3\u00d9\3\u00d9\3\u00d9\5\u00d9\u12ec\n\u00d9\3\u00da\3\u00da\3"+
		"\u00da\5\u00da\u12f1\n\u00da\3\u00db\3\u00db\3\u00db\3\u00db\3\u00dc\3"+
		"\u00dc\3\u00dc\3\u00dc\3\u00dc\7\u00dc\u12fc\n\u00dc\f\u00dc\16\u00dc"+
		"\u12ff\13\u00dc\3\u00dc\3\u00dc\3\u00dd\3\u00dd\5\u00dd\u1305\n\u00dd"+
		"\3\u00de\3\u00de\3\u00de\5\u00de\u130a\n\u00de\3\u00df\3\u00df\3\u00df"+
		"\3\u00df\3\u00df\7\u00df\u1311\n\u00df\f\u00df\16\u00df\u1314\13\u00df"+
		"\3\u00df\3\u00df\3\u00e0\5\u00e0\u1319\n\u00e0\3\u00e0\3\u00e0\5\u00e0"+
		"\u131d\n\u00e0\3\u00e1\3\u00e1\5\u00e1\u1321\n\u00e1\3\u00e2\3\u00e2\3"+
		"\u00e2\3\u00e2\7\u00e2\u1327\n\u00e2\f\u00e2\16\u00e2\u132a\13\u00e2\3"+
		"\u00e2\3\u00e2\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\7\u00e3\u1333\n"+
		"\u00e3\f\u00e3\16\u00e3\u1336\13\u00e3\5\u00e3\u1338\n\u00e3\3\u00e4\3"+
		"\u00e4\3\u00e4\5\u00e4\u133d\n\u00e4\3\u00e4\7\u00e4\u1340\n\u00e4\f\u00e4"+
		"\16\u00e4\u1343\13\u00e4\3\u00e4\5\u00e4\u1346\n\u00e4\3\u00e5\3\u00e5"+
		"\3\u00e5\5\u00e5\u134b\n\u00e5\3\u00e5\5\u00e5\u134e\n\u00e5\3\u00e5\7"+
		"\u00e5\u1351\n\u00e5\f\u00e5\16\u00e5\u1354\13\u00e5\3\u00e6\3\u00e6\3"+
		"\u00e6\3\u00e7\3\u00e7\5\u00e7\u135b\n\u00e7\3\u00e7\3\u00e7\5\u00e7\u135f"+
		"\n\u00e7\3\u00e7\5\u00e7\u1362\n\u00e7\3\u00e8\3\u00e8\3\u00e8\5\u00e8"+
		"\u1367\n\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8"+
		"\3\u00e8\3\u00e8\7\u00e8\u1372\n\u00e8\f\u00e8\16\u00e8\u1375\13\u00e8"+
		"\3\u00e8\3\u00e8\3\u00e8\3\u00e8\5\u00e8\u137b\n\u00e8\3\u00e8\3\u00e8"+
		"\3\u00e8\5\u00e8\u1380\n\u00e8\3\u00e8\3\u00e8\3\u00e8\5\u00e8\u1385\n"+
		"\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\7\u00e8\u138c\n\u00e8\f"+
		"\u00e8\16\u00e8\u138f\13\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8"+
		"\3\u00e8\5\u00e8\u1397\n\u00e8\3\u00e8\5\u00e8\u139a\n\u00e8\3\u00e8\3"+
		"\u00e8\3\u00e8\3\u00e8\5\u00e8\u13a0\n\u00e8\3\u00e8\5\u00e8\u13a3\n\u00e8"+
		"\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8"+
		"\3\u00e8\3\u00e8\3\u00e8\5\u00e8\u13b1\n\u00e8\3\u00e9\3\u00e9\3\u00e9"+
		"\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9"+
		"\3\u00e9\5\u00e9\u13c0\n\u00e9\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea"+
		"\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\5\u00ea"+
		"\u13cf\n\u00ea\3\u00eb\3\u00eb\3\u00ec\5\u00ec\u13d4\n\u00ec\3\u00ec\5"+
		"\u00ec\u13d7\n\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\5\u00ec\u13dd\n\u00ec"+
		"\5\u00ec\u13df\n\u00ec\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ee\3\u00ee"+
		"\3\u00ee\7\u00ee\u13e8\n\u00ee\f\u00ee\16\u00ee\u13eb\13\u00ee\3\u00ef"+
		"\3\u00ef\3\u00ef\3\u00ef\7\u00ef\u13f1\n\u00ef\f\u00ef\16\u00ef\u13f4"+
		"\13\u00ef\3\u00ef\3\u00ef\3\u00f0\3\u00f0\3\u00f0\5\u00f0\u13fb\n\u00f0"+
		"\3\u00f1\3\u00f1\3\u00f1\5\u00f1\u1400\n\u00f1\3\u00f2\3\u00f2\3\u00f2"+
		"\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\5\u00f3\u140a\n\u00f3\3\u00f4"+
		"\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\5\u00f4\u1413\n\u00f4"+
		"\3\u00f5\3\u00f5\3\u00f5\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\5\u00f6"+
		"\u141d\n\u00f6\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\5\u00f7\u1424\n"+
		"\u00f7\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f9\3\u00f9\3\u00f9\3\u00f9"+
		"\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa"+
		"\5\u00fa\u1437\n\u00fa\5\u00fa\u1439\n\u00fa\3\u00fb\3\u00fb\3\u00fc\3"+
		"\u00fc\3\u00fc\3\u00fc\3\u00fc\7\u00fc\u1442\n\u00fc\f\u00fc\16\u00fc"+
		"\u1445\13\u00fc\3\u00fd\3\u00fd\3\u00fe\3\u00fe\3\u00fe\3\u00ff\3\u00ff"+
		"\5\u00ff\u144e\n\u00ff\3\u00ff\5\u00ff\u1451\n\u00ff\3\u0100\3\u0100\3"+
		"\u0101\6\u0101\u1456\n\u0101\r\u0101\16\u0101\u1457\3\u0101\7\u0101\u145b"+
		"\n\u0101\f\u0101\16\u0101\u145e\13\u0101\3\u0101\3\u0101\5\u0101\u1462"+
		"\n\u0101\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102"+
		"\5\u0102\u146c\n\u0102\3\u0102\3\u0102\5\u0102\u1470\n\u0102\3\u0102\5"+
		"\u0102\u1473\n\u0102\3\u0103\3\u0103\5\u0103\u1477\n\u0103\3\u0103\3\u0103"+
		"\5\u0103\u147b\n\u0103\3\u0103\5\u0103\u147e\n\u0103\3\u0104\3\u0104\5"+
		"\u0104\u1482\n\u0104\3\u0104\3\u0104\3\u0104\3\u0104\5\u0104\u1488\n\u0104"+
		"\3\u0105\3\u0105\5\u0105\u148c\n\u0105\3\u0105\3\u0105\3\u0105\3\u0105"+
		"\5\u0105\u1492\n\u0105\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106"+
		"\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106\5\u0106\u149f\n\u0106\3\u0106"+
		"\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106\5\u0106\u14a7\n\u0106\3\u0106"+
		"\5\u0106\u14aa\n\u0106\3\u0106\3\u0106\5\u0106\u14ae\n\u0106\3\u0106\3"+
		"\u0106\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106"+
		"\3\u0106\3\u0106\3\u0106\3\u0106\5\u0106\u14be\n\u0106\3\u0106\3\u0106"+
		"\3\u0107\5\u0107\u14c3\n\u0107\3\u0107\3\u0107\5\u0107\u14c7\n\u0107\3"+
		"\u0108\3\u0108\3\u0108\5\u0108\u14cc\n\u0108\3\u0109\3\u0109\3\u0109\5"+
		"\u0109\u14d1\n\u0109\3\u010a\3\u010a\3\u010a\5\u010a\u14d6\n\u010a\3\u010b"+
		"\3\u010b\3\u010b\3\u010b\3\u010b\5\u010b\u14dd\n\u010b\3\u010c\3\u010c"+
		"\3\u010d\3\u010d\3\u010e\3\u010e\3\u010f\3\u010f\3\u0110\3\u0110\3\u0111"+
		"\3\u0111\3\u0111\3\u0111\3\u0111\5\u0111\u14ee\n\u0111\3\u0112\3\u0112"+
		"\3\u0112\7\u0112\u14f3\n\u0112\f\u0112\16\u0112\u14f6\13\u0112\3\u0113"+
		"\5\u0113\u14f9\n\u0113\3\u0113\3\u0113\3\u0113\5\u0113\u14fe\n\u0113\3"+
		"\u0113\6\u0113\u1501\n\u0113\r\u0113\16\u0113\u1502\5\u0113\u1505\n\u0113"+
		"\3\u0114\3\u0114\5\u0114\u1509\n\u0114\3\u0114\3\u0114\3\u0115\3\u0115"+
		"\3\u0115\5\u0115\u1510\n\u0115\3\u0115\5\u0115\u1513\n\u0115\3\u0115\3"+
		"\u0115\3\u0115\5\u0115\u1518\n\u0115\3\u0115\3\u0115\5\u0115\u151c\n\u0115"+
		"\3\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u1522\n\u0115\3\u0115\3\u0115"+
		"\3\u0115\3\u0115\5\u0115\u1528\n\u0115\3\u0115\5\u0115\u152b\n\u0115\3"+
		"\u0115\5\u0115\u152e\n\u0115\3\u0115\3\u0115\5\u0115\u1532\n\u0115\3\u0115"+
		"\5\u0115\u1535\n\u0115\3\u0115\3\u0115\5\u0115\u1539\n\u0115\3\u0115\5"+
		"\u0115\u153c\n\u0115\3\u0115\3\u0115\5\u0115\u1540\n\u0115\3\u0115\3\u0115"+
		"\3\u0115\3\u0115\5\u0115\u1546\n\u0115\3\u0115\3\u0115\3\u0115\5\u0115"+
		"\u154b\n\u0115\3\u0115\3\u0115\5\u0115\u154f\n\u0115\3\u0115\3\u0115\3"+
		"\u0115\5\u0115\u1554\n\u0115\3\u0115\3\u0115\5\u0115\u1558\n\u0115\3\u0115"+
		"\3\u0115\3\u0115\3\u0115\3\u0115\7\u0115\u155f\n\u0115\f\u0115\16\u0115"+
		"\u1562\13\u0115\3\u0115\3\u0115\5\u0115\u1566\n\u0115\5\u0115\u1568\n"+
		"\u0115\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116"+
		"\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116"+
		"\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116"+
		"\3\u0116\5\u0116\u1585\n\u0116\3\u0117\3\u0117\3\u0117\3\u0117\3\u0118"+
		"\3\u0118\3\u0118\3\u0118\5\u0118\u158f\n\u0118\3\u0118\3\u0118\3\u0119"+
		"\3\u0119\3\u0119\3\u0119\3\u0119\5\u0119\u1598\n\u0119\3\u0119\3\u0119"+
		"\3\u0119\3\u0119\6\u0119\u159e\n\u0119\r\u0119\16\u0119\u159f\3\u0119"+
		"\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119"+
		"\5\u0119\u15ac\n\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119"+
		"\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119"+
		"\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\5\u0119\u15c2\n\u0119\3\u0119"+
		"\3\u0119\5\u0119\u15c6\n\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119"+
		"\3\u0119\5\u0119\u15ce\n\u0119\3\u0119\3\u0119\3\u0119\3\u0119\5\u0119"+
		"\u15d4\n\u0119\3\u0119\3\u0119\3\u0119\5\u0119\u15d9\n\u0119\3\u0119\3"+
		"\u0119\3\u0119\3\u0119\5\u0119\u15df\n\u0119\3\u0119\3\u0119\3\u0119\3"+
		"\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\5\u0119\u15eb\n"+
		"\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119"+
		"\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119"+
		"\3\u0119\5\u0119\u15ff\n\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119"+
		"\3\u0119\7\u0119\u1607\n\u0119\f\u0119\16\u0119\u160a\13\u0119\5\u0119"+
		"\u160c\n\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\5\u0119\u1613\n"+
		"\u0119\3\u0119\3\u0119\5\u0119\u1617\n\u0119\3\u0119\3\u0119\3\u0119\5"+
		"\u0119\u161c\n\u0119\3\u0119\3\u0119\3\u0119\3\u0119\5\u0119\u1622\n\u0119"+
		"\3\u0119\3\u0119\3\u0119\3\u0119\5\u0119\u1628\n\u0119\3\u0119\3\u0119"+
		"\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\7\u0119\u1633"+
		"\n\u0119\f\u0119\16\u0119\u1636\13\u0119\3\u011a\3\u011a\3\u011a\3\u011a"+
		"\3\u011a\5\u011a\u163d\n\u011a\3\u011a\3\u011a\3\u011a\3\u011a\6\u011a"+
		"\u1643\n\u011a\r\u011a\16\u011a\u1644\3\u011a\3\u011a\3\u011a\3\u011a"+
		"\3\u011a\3\u011a\3\u011a\3\u011a\5\u011a\u164f\n\u011a\3\u011a\3\u011a"+
		"\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a"+
		"\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\5\u011a"+
		"\u1664\n\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a"+
		"\3\u011a\3\u011a\3\u011a\3\u011a\5\u011a\u1671\n\u011a\3\u011a\3\u011a"+
		"\3\u011a\3\u011a\5\u011a\u1677\n\u011a\3\u011a\3\u011a\3\u011a\3\u011a"+
		"\5\u011a\u167d\n\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\7\u011a"+
		"\u1684\n\u011a\f\u011a\16\u011a\u1687\13\u011a\3\u011b\3\u011b\3\u011b"+
		"\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\5\u011b\u1691\n\u011b\3\u011c"+
		"\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\5\u011c\u169b"+
		"\n\u011c\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d"+
		"\3\u011d\3\u011d\3\u011d\3\u011d\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e"+
		"\5\u011e\u16ae\n\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e"+
		"\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\5\u011e\u16bb\n\u011e\3\u011f"+
		"\3\u011f\3\u011f\5\u011f\u16c0\n\u011f\3\u0120\3\u0120\3\u0121\3\u0121"+
		"\3\u0122\3\u0122\5\u0122\u16c8\n\u0122\3\u0122\3\u0122\3\u0122\3\u0122"+
		"\3\u0122\6\u0122\u16cf\n\u0122\r\u0122\16\u0122\u16d0\3\u0122\3\u0122"+
		"\5\u0122\u16d5\n\u0122\3\u0122\3\u0122\3\u0123\3\u0123\3\u0123\3\u0123"+
		"\3\u0123\3\u0123\3\u0123\3\u0124\3\u0124\3\u0124\5\u0124\u16e3\n\u0124"+
		"\3\u0124\3\u0124\3\u0124\7\u0124\u16e8\n\u0124\f\u0124\16\u0124\u16eb"+
		"\13\u0124\3\u0124\5\u0124\u16ee\n\u0124\5\u0124\u16f0\n\u0124\3\u0124"+
		"\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\5\u0124\u16f9\n\u0124"+
		"\3\u0124\5\u0124\u16fc\n\u0124\3\u0124\3\u0124\3\u0124\5\u0124\u1701\n"+
		"\u0124\5\u0124\u1703\n\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3"+
		"\u0124\5\u0124\u170b\n\u0124\3\u0125\5\u0125\u170e\n\u0125\3\u0125\3\u0125"+
		"\3\u0125\5\u0125\u1713\n\u0125\3\u0125\3\u0125\3\u0126\3\u0126\3\u0127"+
		"\3\u0127\3\u0127\3\u0127\3\u0127\7\u0127\u171e\n\u0127\f\u0127\16\u0127"+
		"\u1721\13\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127"+
		"\7\u0127\u172a\n\u0127\f\u0127\16\u0127\u172d\13\u0127\5\u0127\u172f\n"+
		"\u0127\3\u0127\5\u0127\u1732\n\u0127\3\u0128\3\u0128\3\u0128\3\u0128\5"+
		"\u0128\u1738\n\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0129\3\u0129\3"+
		"\u0129\3\u0129\3\u0129\3\u0129\5\u0129\u1744\n\u0129\3\u012a\3\u012a\3"+
		"\u012a\5\u012a\u1749\n\u012a\3\u012a\3\u012a\5\u012a\u174d\n\u012a\3\u012a"+
		"\3\u012a\5\u012a\u1751\n\u012a\3\u012a\3\u012a\5\u012a\u1755\n\u012a\5"+
		"\u012a\u1757\n\u012a\3\u012b\3\u012b\3\u012b\5\u012b\u175c\n\u012b\3\u012b"+
		"\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u1763\n\u012b\3\u012b\3\u012b"+
		"\3\u012b\5\u012b\u1768\n\u012b\5\u012b\u176a\n\u012b\3\u012b\3\u012b\3"+
		"\u012b\3\u012b\3\u012b\3\u012b\3\u012b\7\u012b\u1773\n\u012b\f\u012b\16"+
		"\u012b\u1776\13\u012b\3\u012b\3\u012b\5\u012b\u177a\n\u012b\3\u012b\3"+
		"\u012b\5\u012b\u177e\n\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3"+
		"\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b"+
		"\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u1792\n\u012b\3\u012b\3\u012b"+
		"\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u179c\n\u012b"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\5\u012c\u17a8\n\u012c\3\u012c\3\u012c\3\u012c\3\u012c\5\u012c"+
		"\u17ae\n\u012c\7\u012c\u17b0\n\u012c\f\u012c\16\u012c\u17b3\13\u012c\3"+
		"\u012c\3\u012c\5\u012c\u17b7\n\u012c\3\u012c\3\u012c\7\u012c\u17bb\n\u012c"+
		"\f\u012c\16\u012c\u17be\13\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\5\u012c\u17c7\n\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\5\u012c\u17cd\n\u012c\7\u012c\u17cf\n\u012c\f\u012c\16\u012c\u17d2\13"+
		"\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\5\u012c\u17dc\n\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\5\u012c\u17e8\n\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\5\u012c\u17f0\n\u012c\5\u012c\u17f2\n"+
		"\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\5\u012c\u17fc\n\u012c\3\u012c\3\u012c\3\u012c\5\u012c\u1801\n\u012c\3"+
		"\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\7\u012c\u181f\n\u012c\f\u012c\16\u012c\u1822\13\u012c\3\u012c"+
		"\3\u012c\3\u012c\5\u012c\u1827\n\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\5\u012c\u182d\n\u012c\3\u012c\3\u012c\3\u012c\5\u012c\u1832\n\u012c\3"+
		"\u012c\3\u012c\3\u012c\3\u012c\7\u012c\u1838\n\u012c\f\u012c\16\u012c"+
		"\u183b\13\u012c\3\u012c\3\u012c\5\u012c\u183f\n\u012c\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\5\u012d\u1845\n\u012d\3\u012d\3\u012d\5\u012d\u1849\n"+
		"\u012d\3\u012d\5\u012d\u184c\n\u012d\3\u012d\5\u012d\u184f\n\u012d\3\u012d"+
		"\3\u012d\5\u012d\u1853\n\u012d\3\u012e\3\u012e\3\u012e\3\u012e\5\u012e"+
		"\u1859\n\u012e\3\u012e\3\u012e\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f"+
		"\3\u012f\3\u0130\3\u0130\5\u0130\u1865\n\u0130\3\u0130\5\u0130\u1868\n"+
		"\u0130\3\u0130\5\u0130\u186b\n\u0130\3\u0130\5\u0130\u186e\n\u0130\3\u0130"+
		"\3\u0130\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\5\u0131"+
		"\u1879\n\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131"+
		"\5\u0131\u1882\n\u0131\5\u0131\u1884\n\u0131\3\u0132\3\u0132\3\u0132\3"+
		"\u0132\3\u0132\5\u0132\u188b\n\u0132\3\u0133\3\u0133\3\u0133\5\u0133\u1890"+
		"\n\u0133\3\u0134\3\u0134\3\u0134\5\u0134\u1895\n\u0134\3\u0134\3\u0134"+
		"\3\u0134\5\u0134\u189a\n\u0134\7\u0134\u189c\n\u0134\f\u0134\16\u0134"+
		"\u189f\13\u0134\5\u0134\u18a1\n\u0134\3\u0134\3\u0134\3\u0135\3\u0135"+
		"\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\5\u0135\u18ac\n\u0135\5\u0135"+
		"\u18ae\n\u0135\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\5\u0136\u18b5\n"+
		"\u0136\5\u0136\u18b7\n\u0136\3\u0137\3\u0137\3\u0138\3\u0138\3\u0138\3"+
		"\u0138\3\u0139\5\u0139\u18c0\n\u0139\3\u0139\3\u0139\7\u0139\u18c4\n\u0139"+
		"\f\u0139\16\u0139\u18c7\13\u0139\3\u013a\3\u013a\3\u013a\3\u013a\5\u013a"+
		"\u18cd\n\u013a\3\u013a\3\u013a\3\u013a\5\u013a\u18d2\n\u013a\3\u013a\3"+
		"\u013a\3\u013a\5\u013a\u18d7\n\u013a\3\u013a\3\u013a\5\u013a\u18db\n\u013a"+
		"\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\5\u013a"+
		"\u18e5\n\u013a\3\u013a\3\u013a\3\u013a\3\u013a\7\u013a\u18eb\n\u013a\f"+
		"\u013a\16\u013a\u18ee\13\u013a\5\u013a\u18f0\n\u013a\3\u013a\3\u013a\3"+
		"\u013a\5\u013a\u18f5\n\u013a\5\u013a\u18f7\n\u013a\3\u013b\5\u013b\u18fa"+
		"\n\u013b\3\u013b\3\u013b\7\u013b\u18fe\n\u013b\f\u013b\16\u013b\u1901"+
		"\13\u013b\3\u013c\3\u013c\5\u013c\u1905\n\u013c\3\u013c\3\u013c\3\u013c"+
		"\7\u013c\u190a\n\u013c\f\u013c\16\u013c\u190d\13\u013c\3\u013d\3\u013d"+
		"\3\u013d\3\u013d\3\u013d\7\u013d\u1914\n\u013d\f\u013d\16\u013d\u1917"+
		"\13\u013d\3\u013d\3\u013d\5\u013d\u191b\n\u013d\3\u013d\3\u013d\5\u013d"+
		"\u191f\n\u013d\3\u013d\5\u013d\u1922\n\u013d\3\u013d\3\u013d\3\u013d\3"+
		"\u013d\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e\5\u013e\u192e\n"+
		"\u013e\3\u013e\3\u013e\3\u013e\5\u013e\u1933\n\u013e\3\u013e\7\u013e\u1936"+
		"\n\u013e\f\u013e\16\u013e\u1939\13\u013e\3\u013f\3\u013f\3\u013f\5\u013f"+
		"\u193e\n\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\5\u013f\u1945\n"+
		"\u013f\3\u013f\5\u013f\u1948\n\u013f\3\u0140\3\u0140\3\u0140\3\u0140\3"+
		"\u0140\3\u0140\3\u0140\7\u0140\u1951\n\u0140\f\u0140\16\u0140\u1954\13"+
		"\u0140\3\u0140\3\u0140\5\u0140\u1958\n\u0140\5\u0140\u195a\n\u0140\3\u0140"+
		"\5\u0140\u195d\n\u0140\3\u0140\5\u0140\u1960\n\u0140\3\u0140\3\u0140\3"+
		"\u0140\3\u0140\7\u0140\u1966\n\u0140\f\u0140\16\u0140\u1969\13\u0140\5"+
		"\u0140\u196b\n\u0140\3\u0140\3\u0140\5\u0140\u196f\n\u0140\3\u0140\5\u0140"+
		"\u1972\n\u0140\3\u0140\3\u0140\5\u0140\u1976\n\u0140\3\u0140\3\u0140\3"+
		"\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\7\u0140\u1981\n"+
		"\u0140\f\u0140\16\u0140\u1984\13\u0140\5\u0140\u1986\n\u0140\3\u0140\3"+
		"\u0140\5\u0140\u198a\n\u0140\3\u0140\3\u0140\5\u0140\u198e\n\u0140\3\u0140"+
		"\5\u0140\u1991\n\u0140\3\u0141\3\u0141\3\u0141\7\u0141\u1996\n\u0141\f"+
		"\u0141\16\u0141\u1999\13\u0141\3\u0142\3\u0142\3\u0142\3\u0142\5\u0142"+
		"\u199f\n\u0142\3\u0143\3\u0143\5\u0143\u19a3\n\u0143\3\u0143\5\u0143\u19a6"+
		"\n\u0143\3\u0143\3\u0143\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\5\u0144"+
		"\u19af\n\u0144\3\u0144\5\u0144\u19b2\n\u0144\3\u0144\3\u0144\3\u0144\3"+
		"\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\5\u0144\u19bd\n\u0144\5"+
		"\u0144\u19bf\n\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\5"+
		"\u0144\u19c7\n\u0144\5\u0144\u19c9\n\u0144\3\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\5\u0144\u19d4\n\u0144\5\u0144"+
		"\u19d6\n\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\7\u0144\u19dd\n"+
		"\u0144\f\u0144\16\u0144\u19e0\13\u0144\3\u0145\5\u0145\u19e3\n\u0145\3"+
		"\u0145\3\u0145\5\u0145\u19e7\n\u0145\3\u0145\5\u0145\u19ea\n\u0145\3\u0145"+
		"\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\7\u0145\u19f2\n\u0145\f\u0145"+
		"\16\u0145\u19f5\13\u0145\3\u0145\3\u0145\3\u0145\5\u0145\u19fa\n\u0145"+
		"\5\u0145\u19fc\n\u0145\3\u0145\5\u0145\u19ff\n\u0145\3\u0145\3\u0145\3"+
		"\u0145\3\u0145\5\u0145\u1a05\n\u0145\3\u0145\3\u0145\3\u0145\5\u0145\u1a0a"+
		"\n\u0145\3\u0145\3\u0145\3\u0145\5\u0145\u1a0f\n\u0145\3\u0145\3\u0145"+
		"\3\u0145\3\u0145\3\u0145\7\u0145\u1a16\n\u0145\f\u0145\16\u0145\u1a19"+
		"\13\u0145\3\u0145\3\u0145\3\u0145\5\u0145\u1a1e\n\u0145\5\u0145\u1a20"+
		"\n\u0145\3\u0145\5\u0145\u1a23\n\u0145\3\u0145\3\u0145\3\u0145\3\u0145"+
		"\3\u0145\3\u0145\5\u0145\u1a2b\n\u0145\3\u0145\3\u0145\3\u0145\3\u0145"+
		"\5\u0145\u1a31\n\u0145\7\u0145\u1a33\n\u0145\f\u0145\16\u0145\u1a36\13"+
		"\u0145\3\u0145\3\u0145\3\u0145\5\u0145\u1a3b\n\u0145\3\u0145\5\u0145\u1a3e"+
		"\n\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\7\u0145\u1a45\n\u0145"+
		"\f\u0145\16\u0145\u1a48\13\u0145\3\u0145\3\u0145\5\u0145\u1a4c\n\u0145"+
		"\5\u0145\u1a4e\n\u0145\5\u0145\u1a50\n\u0145\3\u0146\5\u0146\u1a53\n\u0146"+
		"\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146\7\u0146\u1a5a\n\u0146\f\u0146"+
		"\16\u0146\u1a5d\13\u0146\3\u0146\3\u0146\5\u0146\u1a61\n\u0146\3\u0147"+
		"\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\7\u0147\u1a6a\n\u0147"+
		"\f\u0147\16\u0147\u1a6d\13\u0147\3\u0147\3\u0147\3\u0148\3\u0148\3\u0148"+
		"\3\u0148\3\u0149\3\u0149\3\u0149\7\u0149\u1a78\n\u0149\f\u0149\16\u0149"+
		"\u1a7b\13\u0149\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a"+
		"\5\u014a\u1a84\n\u014a\3\u014a\3\u014a\3\u014a\3\u014a\5\u014a\u1a8a\n"+
		"\u014a\3\u014b\3\u014b\3\u014b\3\u014b\7\u014b\u1a90\n\u014b\f\u014b\16"+
		"\u014b\u1a93\13\u014b\3\u014c\3\u014c\3\u014c\5\u014c\u1a98\n\u014c\3"+
		"\u014c\3\u014c\3\u014c\5\u014c\u1a9d\n\u014c\7\u014c\u1a9f\n\u014c\f\u014c"+
		"\16\u014c\u1aa2\13\u014c\3\u014c\3\u014c\3\u014d\3\u014d\3\u014d\3\u014d"+
		"\3\u014e\3\u014e\3\u014e\7\u014e\u1aad\n\u014e\f\u014e\16\u014e\u1ab0"+
		"\13\u014e\3\u014f\3\u014f\5\u014f\u1ab4\n\u014f\3\u014f\5\u014f\u1ab7"+
		"\n\u014f\3\u014f\5\u014f\u1aba\n\u014f\3\u0150\3\u0150\3\u0150\3\u0150"+
		"\5\u0150\u1ac0\n\u0150\3\u0151\3\u0151\3\u0151\3\u0152\5\u0152\u1ac6\n"+
		"\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\5\u0152\u1acd\n\u0152\3"+
		"\u0152\3\u0152\3\u0152\5\u0152\u1ad2\n\u0152\3\u0152\5\u0152\u1ad5\n\u0152"+
		"\3\u0152\3\u0152\3\u0152\5\u0152\u1ada\n\u0152\3\u0152\3\u0152\3\u0152"+
		"\5\u0152\u1adf\n\u0152\3\u0152\5\u0152\u1ae2\n\u0152\3\u0152\3\u0152\5"+
		"\u0152\u1ae6\n\u0152\3\u0153\3\u0153\3\u0153\3\u0153\7\u0153\u1aec\n\u0153"+
		"\f\u0153\16\u0153\u1aef\13\u0153\3\u0153\3\u0153\3\u0154\3\u0154\5\u0154"+
		"\u1af5\n\u0154\3\u0155\3\u0155\5\u0155\u1af9\n\u0155\3\u0155\3\u0155\3"+
		"\u0155\5\u0155\u1afe\n\u0155\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3"+
		"\u0156\3\u0156\3\u0156\7\u0156\u1b08\n\u0156\f\u0156\16\u0156\u1b0b\13"+
		"\u0156\3\u0156\3\u0156\5\u0156\u1b0f\n\u0156\5\u0156\u1b11\n\u0156\3\u0157"+
		"\5\u0157\u1b14\n\u0157\3\u0157\3\u0157\3\u0157\5\u0157\u1b19\n\u0157\3"+
		"\u0157\3\u0157\5\u0157\u1b1d\n\u0157\3\u0157\5\u0157\u1b20\n\u0157\3\u0157"+
		"\5\u0157\u1b23\n\u0157\3\u0157\3\u0157\3\u0157\3\u0157\7\u0157\u1b29\n"+
		"\u0157\f\u0157\16\u0157\u1b2c\13\u0157\5\u0157\u1b2e\n\u0157\3\u0157\3"+
		"\u0157\3\u0157\3\u0157\3\u0157\5\u0157\u1b35\n\u0157\5\u0157\u1b37\n\u0157"+
		"\3\u0157\3\u0157\5\u0157\u1b3b\n\u0157\3\u0158\5\u0158\u1b3e\n\u0158\3"+
		"\u0158\3\u0158\5\u0158\u1b42\n\u0158\3\u0158\3\u0158\5\u0158\u1b46\n\u0158"+
		"\3\u0158\5\u0158\u1b49\n\u0158\3\u0158\5\u0158\u1b4c\n\u0158\3\u0158\3"+
		"\u0158\3\u0158\3\u0158\7\u0158\u1b52\n\u0158\f\u0158\16\u0158\u1b55\13"+
		"\u0158\3\u0158\3\u0158\3\u0158\3\u0158\7\u0158\u1b5b\n\u0158\f\u0158\16"+
		"\u0158\u1b5e\13\u0158\5\u0158\u1b60\n\u0158\3\u0158\3\u0158\3\u0158\3"+
		"\u0158\3\u0158\5\u0158\u1b67\n\u0158\5\u0158\u1b69\n\u0158\3\u0158\3\u0158"+
		"\5\u0158\u1b6d\n\u0158\3\u0159\3\u0159\3\u0159\3\u0159\5\u0159\u1b73\n"+
		"\u0159\3\u0159\3\u0159\3\u0159\3\u0159\7\u0159\u1b79\n\u0159\f\u0159\16"+
		"\u0159\u1b7c\13\u0159\3\u0159\3\u0159\3\u0159\5\u0159\u1b81\n\u0159\3"+
		"\u0159\3\u0159\3\u0159\5\u0159\u1b86\n\u0159\3\u0159\3\u0159\3\u0159\5"+
		"\u0159\u1b8b\n\u0159\7\u0159\u1b8d\n\u0159\f\u0159\16\u0159\u1b90\13\u0159"+
		"\3\u0159\3\u0159\5\u0159\u1b94\n\u0159\5\u0159\u1b96\n\u0159\3\u015a\3"+
		"\u015a\3\u015a\3\u015a\5\u015a\u1b9c\n\u015a\3\u015b\3\u015b\5\u015b\u1ba0"+
		"\n\u015b\3\u015b\3\u015b\3\u015b\7\u015b\u1ba5\n\u015b\f\u015b\16\u015b"+
		"\u1ba8\13\u015b\3\u015b\3\u015b\5\u015b\u1bac\n\u015b\3\u015b\5\u015b"+
		"\u1baf\n\u015b\3\u015c\3\u015c\3\u015c\7\u015c\u1bb4\n\u015c\f\u015c\16"+
		"\u015c\u1bb7\13\u015c\3\u015d\3\u015d\3\u015d\3\u015d\5\u015d\u1bbd\n"+
		"\u015d\5\u015d\u1bbf\n\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3"+
		"\u015d\5\u015d\u1bc7\n\u015d\5\u015d\u1bc9\n\u015d\3\u015e\3\u015e\3\u015e"+
		"\3\u015e\5\u015e\u1bcf\n\u015e\3\u015f\5\u015f\u1bd2\n\u015f\3\u015f\5"+
		"\u015f\u1bd5\n\u015f\3\u015f\3\u015f\3\u015f\5\u015f\u1bda\n\u015f\3\u015f"+
		"\3\u015f\5\u015f\u1bde\n\u015f\3\u0160\3\u0160\3\u0160\3\u0160\3\u0161"+
		"\3\u0161\7\u0161\u1be6\n\u0161\f\u0161\16\u0161\u1be9\13\u0161\3\u0162"+
		"\7\u0162\u1bec\n\u0162\f\u0162\16\u0162\u1bef\13\u0162\3\u0162\3\u0162"+
		"\3\u0162\3\u0162\3\u0163\5\u0163\u1bf6\n\u0163\3\u0163\3\u0163\5\u0163"+
		"\u1bfa\n\u0163\3\u0163\3\u0163\5\u0163\u1bfe\n\u0163\3\u0163\3\u0163\5"+
		"\u0163\u1c02\n\u0163\3\u0163\3\u0163\3\u0163\3\u0163\5\u0163\u1c08\n\u0163"+
		"\3\u0163\5\u0163\u1c0b\n\u0163\3\u0163\5\u0163\u1c0e\n\u0163\3\u0163\3"+
		"\u0163\3\u0163\3\u0163\3\u0163\5\u0163\u1c15\n\u0163\3\u0163\3\u0163\5"+
		"\u0163\u1c19\n\u0163\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\7"+
		"\u0164\u1c21\n\u0164\f\u0164\16\u0164\u1c24\13\u0164\3\u0165\3\u0165\3"+
		"\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\5\u0165\u1c2f\n"+
		"\u0165\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166\6\u0166\u1c37\n"+
		"\u0166\r\u0166\16\u0166\u1c38\3\u0167\3\u0167\3\u0167\7\u0167\u1c3e\n"+
		"\u0167\f\u0167\16\u0167\u1c41\13\u0167\3\u0168\3\u0168\3\u0168\3\u0168"+
		"\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\5\u0168\u1c4c\n\u0168\3\u0169"+
		"\3\u0169\3\u0169\3\u0169\3\u0169\5\u0169\u1c53\n\u0169\3\u0169\3\u0169"+
		"\3\u0169\3\u0169\7\u0169\u1c59\n\u0169\f\u0169\16\u0169\u1c5c\13\u0169"+
		"\3\u0169\5\u0169\u1c5f\n\u0169\3\u016a\3\u016a\5\u016a\u1c63\n\u016a\3"+
		"\u016a\3\u016a\3\u016a\3\u016a\7\u016a\u1c69\n\u016a\f\u016a\16\u016a"+
		"\u1c6c\13\u016a\3\u016b\3\u016b\3\u016b\3\u016b\3\u016c\3\u016c\3\u016c"+
		"\3\u016c\3\u016c\3\u016c\7\u016c\u1c78\n\u016c\f\u016c\16\u016c\u1c7b"+
		"\13\u016c\3\u016c\3\u016c\5\u016c\u1c7f\n\u016c\5\u016c\u1c81\n\u016c"+
		"\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\7\u016c\u1c88\n\u016c\f\u016c"+
		"\16\u016c\u1c8b\13\u016c\5\u016c\u1c8d\n\u016c\3\u016c\3\u016c\5\u016c"+
		"\u1c91\n\u016c\3\u016c\5\u016c\u1c94\n\u016c\3\u016c\3\u016c\5\u016c\u1c98"+
		"\n\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c"+
		"\3\u016c\7\u016c\u1ca3\n\u016c\f\u016c\16\u016c\u1ca6\13\u016c\5\u016c"+
		"\u1ca8\n\u016c\3\u016c\3\u016c\5\u016c\u1cac\n\u016c\3\u016c\5\u016c\u1caf"+
		"\n\u016c\3\u016c\7\u016c\u1cb2\n\u016c\f\u016c\16\u016c\u1cb5\13\u016c"+
		"\3\u016d\3\u016d\3\u016d\3\u016d\5\u016d\u1cbb\n\u016d\3\u016e\3\u016e"+
		"\3\u016e\5\u016e\u1cc0\n\u016e\3\u016f\3\u016f\3\u016f\3\u016f\3\u016f"+
		"\3\u016f\5\u016f\u1cc8\n\u016f\3\u0170\3\u0170\3\u0170\5\u0170\u1ccd\n"+
		"\u0170\3\u0170\5\u0170\u1cd0\n\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3"+
		"\u0170\3\u0170\3\u0170\3\u0170\3\u0170\7\u0170\u1cdb\n\u0170\f\u0170\16"+
		"\u0170\u1cde\13\u0170\3\u0170\3\u0170\5\u0170\u1ce2\n\u0170\3\u0170\3"+
		"\u0170\5\u0170\u1ce6\n\u0170\3\u0170\5\u0170\u1ce9\n\u0170\3\u0170\3\u0170"+
		"\3\u0170\5\u0170\u1cee\n\u0170\3\u0170\5\u0170\u1cf1\n\u0170\3\u0170\3"+
		"\u0170\3\u0170\5\u0170\u1cf6\n\u0170\3\u0171\3\u0171\3\u0171\5\u0171\u1cfb"+
		"\n\u0171\3\u0171\3\u0171\3\u0172\3\u0172\3\u0172\5\u0172\u1d02\n\u0172"+
		"\3\u0172\5\u0172\u1d05\n\u0172\3\u0172\5\u0172\u1d08\n\u0172\3\u0173\3"+
		"\u0173\5\u0173\u1d0c\n\u0173\3\u0173\3\u0173\3\u0173\7\u0173\u1d11\n\u0173"+
		"\f\u0173\16\u0173\u1d14\13\u0173\5\u0173\u1d16\n\u0173\3\u0173\5\u0173"+
		"\u1d19\n\u0173\3\u0173\3\u0173\5\u0173\u1d1d\n\u0173\3\u0173\3\u0173\5"+
		"\u0173\u1d21\n\u0173\3\u0173\3\u0173\5\u0173\u1d25\n\u0173\3\u0173\3\u0173"+
		"\3\u0173\5\u0173\u1d2a\n\u0173\3\u0173\3\u0173\3\u0173\3\u0173\5\u0173"+
		"\u1d30\n\u0173\5\u0173\u1d32\n\u0173\3\u0174\3\u0174\3\u0175\3\u0175\3"+
		"\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\7\u0175\u1d3f\n"+
		"\u0175\f\u0175\16\u0175\u1d42\13\u0175\3\u0176\3\u0176\3\u0177\3\u0177"+
		"\5\u0177\u1d48\n\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177"+
		"\5\u0177\u1d50\n\u0177\3\u0178\5\u0178\u1d53\n\u0178\3\u0178\5\u0178\u1d56"+
		"\n\u0178\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178\5\u0178\u1d5d\n\u0178"+
		"\3\u0178\3\u0178\5\u0178\u1d61\n\u0178\3\u0178\3\u0178\5\u0178\u1d65\n"+
		"\u0178\5\u0178\u1d67\n\u0178\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3"+
		"\u0179\5\u0179\u1d6f\n\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\5"+
		"\u0179\u1d76\n\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3"+
		"\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\7\u0179\u1d85\n"+
		"\u0179\f\u0179\16\u0179\u1d88\13\u0179\3\u0179\3\u0179\5\u0179\u1d8c\n"+
		"\u0179\3\u0179\3\u0179\3\u0179\3\u0179\5\u0179\u1d92\n\u0179\3\u0179\3"+
		"\u0179\3\u0179\3\u0179\5\u0179\u1d98\n\u0179\3\u017a\3\u017a\3\u017a\3"+
		"\u017a\7\u017a\u1d9e\n\u017a\f\u017a\16\u017a\u1da1\13\u017a\3\u017b\3"+
		"\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\7\u017b"+
		"\u1dac\n\u017b\f\u017b\16\u017b\u1daf\13\u017b\3\u017b\3\u017b\5\u017b"+
		"\u1db3\n\u017b\3\u017b\3\u017b\3\u017b\3\u017c\3\u017c\5\u017c\u1dba\n"+
		"\u017c\3\u017c\3\u017c\3\u017c\3\u017c\7\u017c\u1dc0\n\u017c\f\u017c\16"+
		"\u017c\u1dc3\13\u017c\3\u017c\3\u017c\3\u017c\6\u017c\u1dc8\n\u017c\r"+
		"\u017c\16\u017c\u1dc9\3\u017c\3\u017c\5\u017c\u1dce\n\u017c\3\u017c\3"+
		"\u017c\3\u017c\3\u017d\3\u017d\3\u017d\3\u017d\5\u017d\u1dd7\n\u017d\3"+
		"\u017d\2\6\u0230\u0232\u027a\u0286\u017e\2\4\6\b\n\f\16\20\22\24\26\30"+
		"\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080"+
		"\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098"+
		"\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0"+
		"\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8"+
		"\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0"+
		"\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8"+
		"\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110"+
		"\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128"+
		"\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140"+
		"\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158"+
		"\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170"+
		"\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188"+
		"\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0"+
		"\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8"+
		"\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0"+
		"\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8"+
		"\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200"+
		"\u0202\u0204\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218"+
		"\u021a\u021c\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230"+
		"\u0232\u0234\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248"+
		"\u024a\u024c\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260"+
		"\u0262\u0264\u0266\u0268\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278"+
		"\u027a\u027c\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c\u028e\u0290"+
		"\u0292\u0294\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8"+
		"\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0"+
		"\u02c2\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8"+
		"\u02da\u02dc\u02de\u02e0\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0"+
		"\u02f2\u02f4\u02f6\u02f8\2m\4\2\u0104\u0104\u0120\u0120\6\2\3\3&&\u00d4"+
		"\u00d4\u018d\u018d\4\2\5\5\u0144\u0144\4\2\u0112\u0112\u0144\u0144\4\2"+
		"\u0093\u0093\u0190\u0190\4\2\u0193\u0193\u0197\u0197\7\2\u00b1\u00b1\u00e2"+
		"\u00e2\u00ff\u00ff\u0101\u0101\u0170\u0170\7\2\67\67qq\u00db\u00db\u00fc"+
		"\u00fc\u01af\u01af\4\2\u011f\u011f\u01bc\u01bc\t\2\u016f\u016f\u0172\u0172"+
		"\u01bf\u01bf\u01c7\u01c7\u020d\u020d\u0217\u0217\u0219\u0219\6\2\u0102"+
		"\u0102\u0123\u0123\u01df\u01df\u021f\u021f\t\2\u0107\u0107\u015f\u0160"+
		"\u016f\u016f\u0172\u0172\u01cc\u01cc\u01db\u01db\u0210\u0210\4\2\u016f"+
		"\u016f\u0210\u0210\7\2\u009f\u009f\u018f\u018f\u01a3\u01a3\u01b3\u01b3"+
		"\u0262\u0262\4\2\4\4\u00c8\u00c8\4\2\u0170\u0170\u0262\u0262\4\2^^\u00ba"+
		"\u00ba\4\2\7\7II\4\2DDKK\4\2\r\r\u00cd\u00cd\4\2\"\"\u00a0\u00a0\4\2\u0089"+
		"\u0089\u0110\u0110\6\2WW\u01ce\u01ce\u01e8\u01e8\u01ff\u01ff\4\2<<jj\4"+
		"\2==zz\5\2\u0207\u0207\u020a\u020a\u021c\u021c\4\2\u01b1\u01b1\u0242\u0242"+
		"\4\2\u00d3\u00d3\u01b6\u01b6\4\2\t\t\24\24\4\2II\u00e6\u00e6\6\2((CC\u00ac"+
		"\u00ac\u0100\u0100\4\2\7\7\f\f\6\2\u0119\u0119\u01e0\u01e1\u01e6\u01e6"+
		"\u0201\u0201\5\2\n\n^^\u00ba\u00ba\4\2\u00d0\u00d0\u0165\u0165\4\2qq\u01af"+
		"\u01af\4\2\u01e2\u01e2\u0209\u0209\4\2\u01c5\u01c5\u01f3\u01f3\4\2\u0202"+
		"\u0203\u020f\u020f\4\2\u0085\u0085\u00e5\u00e5\4\2,,FF\6\2>>xx\u0112\u0112"+
		"\u01ab\u01ab\4\2\13\13yy\4\2\u00f1\u00f1\u0144\u0144\4\2\u0096\u0096\u00a1"+
		"\u00a1\4\2\u0193\u0193\u01b1\u01b1\5\2^^\u00ba\u00ba\u00d6\u00d6\7\2_"+
		"_\u00bb\u00bb\u00d7\u00d7\u00e2\u00e2\u00fd\u00fd\6\2\n\n^^\u00ba\u00ba"+
		"\u00d6\u00d6\4\2  XX\4\2\u0187\u0187\u0242\u0242\6\2\u0135\u0135\u013f"+
		"\u013f\u0197\u0197\u01b8\u01b8\4\2\u00ff\u00ff\u0101\u0101\5\2\u0128\u0128"+
		"\u0137\u0137\u0146\u0146\3\2\u024d\u024e\4\2\u01fe\u01fe\u0208\u0208\7"+
		"\2>>xx\u0112\u0112\u0170\u0170\u01ab\u01ab\4\2^^\u00a2\u00a2\5\2\7\7I"+
		"I\u00e6\u00e6\5\2\61\61\u0102\u0102\u015a\u015a\4\2\33\33\u0085\u0085"+
		"\4\2aa\u0085\u0085\5\2\u00bf\u00bf\u01d7\u01d7\u01e5\u01e5\4\2RRoo\n\2"+
		"%%++;;``hhrr\u00f5\u00f5\u0170\u0170\5\2\u00ad\u00ad\u00ea\u00ea\u0160"+
		"\u0160\4\2>>\u0112\u0112\5\2\u025b\u025c\u025e\u025e\u0261\u0261\4\2\u0187"+
		"\u0187\u01a1\u01a1\5\2\u0112\u0112\u01ab\u01ab\u021d\u021d\4\2\32\32\u00d0"+
		"\u00d0\3\2\3\u0126\3\2\u0127\u0158\3\2\u0159\u016f\3\2\u0170\u01bc\3\2"+
		"\u01bd\u0240\3\2\u012b\u012c\3\2\u024f\u0251\4\2\u0178\u0178\u01ae\u01ae"+
		"\4\2\u0242\u0242\u0246\u024a\3\2\u0262\u0263\5\2\u018f\u018f\u01a3\u01a3"+
		"\u01b3\u01b3\4\2\u014a\u014a\u017b\u017b\3\2\u0259\u025a\7\2\u012d\u012d"+
		"\u0133\u0134\u0139\u0139\u013d\u013d\u014f\u014f\5\2\u0179\u0179\u019c"+
		"\u019c\u01b2\u01b2\5\2\u0170\u0170\u0174\u0174\u01ad\u01ad\5\2cc\u00bf"+
		"\u00bf\u00d8\u00d8\4\2[[\u00b3\u00b3\4\2\u0170\u0170\u018a\u018a\4\2\u00d8"+
		"\u00d8\u0144\u0144\4\2ZZ\u0097\u0097\5\2\u018e\u018e\u0199\u0199\u01b4"+
		"\u01b4\5\2\u00ff\u00ff\u0101\u0101\u0110\u0110\5\2\u0160\u0160\u0166\u0166"+
		"\u016c\u016c\4\2ZZ\u0080\u0080\4\2\u00fc\u00fc\u01b6\u01b6\4\2--\u00cf"+
		"\u00cf\5\2\u0187\u0187\u0242\u0242\u025a\u025a\4\2\u0163\u0163\u0191\u0191"+
		"\4\2\63\63\u023e\u023e\4\2\u0242\u0242\u025a\u025a\4\2&&\u00d4\u00d4\7"+
		"\2\u0224\u0224\u022b\u022b\u022f\u0230\u0233\u0233\u023f\u023f\n\2\u00db"+
		"\u00db\u017e\u017f\u01af\u01af\u0223\u0223\u0225\u0225\u0229\u0229\u022e"+
		"\u022e\u0232\u0232\4\2--\u022a\u022a\3\2\u0227\u0228\2\u230e\2\u02fb\3"+
		"\2\2\2\4\u0313\3\2\2\2\6\u0317\3\2\2\2\b\u031c\3\2\2\2\n\u0327\3\2\2\2"+
		"\f\u0337\3\2\2\2\16\u033f\3\2\2\2\20\u0345\3\2\2\2\22\u0349\3\2\2\2\24"+
		"\u0384\3\2\2\2\26\u0399\3\2\2\2\30\u039b\3\2\2\2\32\u03bc\3\2\2\2\34\u03d9"+
		"\3\2\2\2\36\u0459\3\2\2\2 \u045b\3\2\2\2\"\u0479\3\2\2\2$\u047b\3\2\2"+
		"\2&\u048a\3\2\2\2(\u04a0\3\2\2\2*\u04b7\3\2\2\2,\u04bc\3\2\2\2.\u04be"+
		"\3\2\2\2\60\u04c6\3\2\2\2\62\u04eb\3\2\2\2\64\u04ed\3\2\2\2\66\u04f1\3"+
		"\2\2\28\u04f5\3\2\2\2:\u0508\3\2\2\2<\u050d\3\2\2\2>\u053d\3\2\2\2@\u053f"+
		"\3\2\2\2B\u0562\3\2\2\2D\u0570\3\2\2\2F\u0587\3\2\2\2H\u05a5\3\2\2\2J"+
		"\u05ab\3\2\2\2L\u05ba\3\2\2\2N\u0616\3\2\2\2P\u0618\3\2\2\2R\u061d\3\2"+
		"\2\2T\u0626\3\2\2\2V\u06c3\3\2\2\2X\u06f1\3\2\2\2Z\u06f3\3\2\2\2\\\u0715"+
		"\3\2\2\2^\u0717\3\2\2\2`\u0719\3\2\2\2b\u071d\3\2\2\2d\u0727\3\2\2\2f"+
		"\u072b\3\2\2\2h\u0766\3\2\2\2j\u0768\3\2\2\2l\u0784\3\2\2\2n\u07ad\3\2"+
		"\2\2p\u07af\3\2\2\2r\u07c2\3\2\2\2t\u0801\3\2\2\2v\u0805\3\2\2\2x\u081c"+
		"\3\2\2\2z\u0834\3\2\2\2|\u0840\3\2\2\2~\u0842\3\2\2\2\u0080\u0868\3\2"+
		"\2\2\u0082\u0881\3\2\2\2\u0084\u088e\3\2\2\2\u0086\u0890\3\2\2\2\u0088"+
		"\u08c2\3\2\2\2\u008a\u08e6\3\2\2\2\u008c\u08e8\3\2\2\2\u008e\u08ec\3\2"+
		"\2\2\u0090\u08f0\3\2\2\2\u0092\u0905\3\2\2\2\u0094\u0914\3\2\2\2\u0096"+
		"\u0918\3\2\2\2\u0098\u0924\3\2\2\2\u009a\u0927\3\2\2\2\u009c\u0946\3\2"+
		"\2\2\u009e\u095c\3\2\2\2\u00a0\u097b\3\2\2\2\u00a2\u0a12\3\2\2\2\u00a4"+
		"\u0a21\3\2\2\2\u00a6\u0a35\3\2\2\2\u00a8\u0a46\3\2\2\2\u00aa\u0a4a\3\2"+
		"\2\2\u00ac\u0a59\3\2\2\2\u00ae\u0a70\3\2\2\2\u00b0\u0a93\3\2\2\2\u00b2"+
		"\u0aa8\3\2\2\2\u00b4\u0aba\3\2\2\2\u00b6\u0abc\3\2\2\2\u00b8\u0acb\3\2"+
		"\2\2\u00ba\u0ad7\3\2\2\2\u00bc\u0ae9\3\2\2\2\u00be\u0b0f\3\2\2\2\u00c0"+
		"\u0b11\3\2\2\2\u00c2\u0b1c\3\2\2\2\u00c4\u0b1e\3\2\2\2\u00c6\u0b3f\3\2"+
		"\2\2\u00c8\u0b56\3\2\2\2\u00ca\u0b58\3\2\2\2\u00cc\u0b5f\3\2\2\2\u00ce"+
		"\u0b76\3\2\2\2\u00d0\u0b78\3\2\2\2\u00d2\u0b89\3\2\2\2\u00d4\u0b8b\3\2"+
		"\2\2\u00d6\u0b8f\3\2\2\2\u00d8\u0b9c\3\2\2\2\u00da\u0ba9\3\2\2\2\u00dc"+
		"\u0bb8\3\2\2\2\u00de\u0bc7\3\2\2\2\u00e0\u0bd6\3\2\2\2\u00e2\u0beb\3\2"+
		"\2\2\u00e4\u0bf3\3\2\2\2\u00e6\u0c04\3\2\2\2\u00e8\u0c08\3\2\2\2\u00ea"+
		"\u0c1f\3\2\2\2\u00ec\u0c28\3\2\2\2\u00ee\u0c36\3\2\2\2\u00f0\u0c38\3\2"+
		"\2\2\u00f2\u0c46\3\2\2\2\u00f4\u0c48\3\2\2\2\u00f6\u0c5e\3\2\2\2\u00f8"+
		"\u0c70\3\2\2\2\u00fa\u0c8e\3\2\2\2\u00fc\u0c91\3\2\2\2\u00fe\u0ca1\3\2"+
		"\2\2\u0100\u0cb6\3\2\2\2\u0102\u0cba\3\2\2\2\u0104\u0d0c\3\2\2\2\u0106"+
		"\u0d0e\3\2\2\2\u0108\u0d36\3\2\2\2\u010a\u0d55\3\2\2\2\u010c\u0d60\3\2"+
		"\2\2\u010e\u0d64\3\2\2\2\u0110\u0d8d\3\2\2\2\u0112\u0d90\3\2\2\2\u0114"+
		"\u0dce\3\2\2\2\u0116\u0dd5\3\2\2\2\u0118\u0df0\3\2\2\2\u011a\u0e23\3\2"+
		"\2\2\u011c\u0e25\3\2\2\2\u011e\u0e2d\3\2\2\2\u0120\u0e32\3\2\2\2\u0122"+
		"\u0e4a\3\2\2\2\u0124\u0e61\3\2\2\2\u0126\u0e63\3\2\2\2\u0128\u0e6a\3\2"+
		"\2\2\u012a\u0e6f\3\2\2\2\u012c\u0e78\3\2\2\2\u012e\u0e7c\3\2\2\2\u0130"+
		"\u0e84\3\2\2\2\u0132\u0f10\3\2\2\2\u0134\u0f3f\3\2\2\2\u0136\u0f43\3\2"+
		"\2\2\u0138\u0f51\3\2\2\2\u013a\u0f58\3\2\2\2\u013c\u0f5c\3\2\2\2\u013e"+
		"\u0f68\3\2\2\2\u0140\u0f6b\3\2\2\2\u0142\u0f6e\3\2\2\2\u0144\u0f81\3\2"+
		"\2\2\u0146\u0f94\3\2\2\2\u0148\u0f97\3\2\2\2\u014a\u0fa1\3\2\2\2\u014c"+
		"\u0fa4\3\2\2\2\u014e\u0fd5\3\2\2\2\u0150\u0fd8\3\2\2\2\u0152\u0fdd\3\2"+
		"\2\2\u0154\u0fe1\3\2\2\2\u0156\u0fe3\3\2\2\2\u0158\u0fee\3\2\2\2\u015a"+
		"\u102c\3\2\2\2\u015c\u102e\3\2\2\2\u015e\u1038\3\2\2\2\u0160\u1041\3\2"+
		"\2\2\u0162\u1058\3\2\2\2\u0164\u105a\3\2\2\2\u0166\u1071\3\2\2\2\u0168"+
		"\u107d\3\2\2\2\u016a\u1083\3\2\2\2\u016c\u109f\3\2\2\2\u016e\u10bf\3\2"+
		"\2\2\u0170\u10c1\3\2\2\2\u0172\u10d1\3\2\2\2\u0174\u10dc\3\2\2\2\u0176"+
		"\u1121\3\2\2\2\u0178\u1123\3\2\2\2\u017a\u112d\3\2\2\2\u017c\u1139\3\2"+
		"\2\2\u017e\u1144\3\2\2\2\u0180\u114b\3\2\2\2\u0182\u115f\3\2\2\2\u0184"+
		"\u1171\3\2\2\2\u0186\u1174\3\2\2\2\u0188\u117a\3\2\2\2\u018a\u1185\3\2"+
		"\2\2\u018c\u118d\3\2\2\2\u018e\u118f\3\2\2\2\u0190\u11a9\3\2\2\2\u0192"+
		"\u11c5\3\2\2\2\u0194\u120b\3\2\2\2\u0196\u120f\3\2\2\2\u0198\u1239\3\2"+
		"\2\2\u019a\u123c\3\2\2\2\u019c\u1240\3\2\2\2\u019e\u124b\3\2\2\2\u01a0"+
		"\u1257\3\2\2\2\u01a2\u1274\3\2\2\2\u01a4\u1298\3\2\2\2\u01a6\u12a7\3\2"+
		"\2\2\u01a8\u12a9\3\2\2\2\u01aa\u12b5\3\2\2\2\u01ac\u12d0\3\2\2\2\u01ae"+
		"\u12d2\3\2\2\2\u01b0\u12dd\3\2\2\2\u01b2\u12ed\3\2\2\2\u01b4\u12f2\3\2"+
		"\2\2\u01b6\u12f6\3\2\2\2\u01b8\u1302\3\2\2\2\u01ba\u1306\3\2\2\2\u01bc"+
		"\u130b\3\2\2\2\u01be\u1318\3\2\2\2\u01c0\u1320\3\2\2\2\u01c2\u1322\3\2"+
		"\2\2\u01c4\u1337\3\2\2\2\u01c6\u1345\3\2\2\2\u01c8\u1347\3\2\2\2\u01ca"+
		"\u1355\3\2\2\2\u01cc\u135a\3\2\2\2\u01ce\u13b0\3\2\2\2\u01d0\u13bf\3\2"+
		"\2\2\u01d2\u13ce\3\2\2\2\u01d4\u13d0\3\2\2\2\u01d6\u13d3\3\2\2\2\u01d8"+
		"\u13e0\3\2\2\2\u01da\u13e4\3\2\2\2\u01dc\u13ec\3\2\2\2\u01de\u13f7\3\2"+
		"\2\2\u01e0\u13fc\3\2\2\2\u01e2\u1401\3\2\2\2\u01e4\u1409\3\2\2\2\u01e6"+
		"\u140b\3\2\2\2\u01e8\u1414\3\2\2\2\u01ea\u141c\3\2\2\2\u01ec\u141e\3\2"+
		"\2\2\u01ee\u1425\3\2\2\2\u01f0\u1429\3\2\2\2\u01f2\u1438\3\2\2\2\u01f4"+
		"\u143a\3\2\2\2\u01f6\u143c\3\2\2\2\u01f8\u1446\3\2\2\2\u01fa\u1448\3\2"+
		"\2\2\u01fc\u144d\3\2\2\2\u01fe\u1452\3\2\2\2\u0200\u1461\3\2\2\2\u0202"+
		"\u1472\3\2\2\2\u0204\u1474\3\2\2\2\u0206\u147f\3\2\2\2\u0208\u1489\3\2"+
		"\2\2\u020a\u14bd\3\2\2\2\u020c\u14c2\3\2\2\2\u020e\u14cb\3\2\2\2\u0210"+
		"\u14d0\3\2\2\2\u0212\u14d5\3\2\2\2\u0214\u14dc\3\2\2\2\u0216\u14de\3\2"+
		"\2\2\u0218\u14e0\3\2\2\2\u021a\u14e2\3\2\2\2\u021c\u14e4\3\2\2\2\u021e"+
		"\u14e6\3\2\2\2\u0220\u14ed\3\2\2\2\u0222\u14ef\3\2\2\2\u0224\u14f8\3\2"+
		"\2\2\u0226\u1506\3\2\2\2\u0228\u1567\3\2\2\2\u022a\u1584\3\2\2\2\u022c"+
		"\u1586\3\2\2\2\u022e\u158a\3\2\2\2\u0230\u15ab\3\2\2\2\u0232\u164e\3\2"+
		"\2\2\u0234\u1690\3\2\2\2\u0236\u169a\3\2\2\2\u0238\u169c\3\2\2\2\u023a"+
		"\u16ba\3\2\2\2\u023c\u16bf\3\2\2\2\u023e\u16c1\3\2\2\2\u0240\u16c3\3\2"+
		"\2\2\u0242\u16c5\3\2\2\2\u0244\u16d8\3\2\2\2\u0246\u170a\3\2\2\2\u0248"+
		"\u170d\3\2\2\2\u024a\u1716\3\2\2\2\u024c\u1731\3\2\2\2\u024e\u1733\3\2"+
		"\2\2\u0250\u1743\3\2\2\2\u0252\u1756\3\2\2\2\u0254\u179b\3\2\2\2\u0256"+
		"\u183e\3\2\2\2\u0258\u1840\3\2\2\2\u025a\u1854\3\2\2\2\u025c\u185c\3\2"+
		"\2\2\u025e\u1862\3\2\2\2\u0260\u1871\3\2\2\2\u0262\u188a\3\2\2\2\u0264"+
		"\u188c\3\2\2\2\u0266\u1891\3\2\2\2\u0268\u18ad\3\2\2\2\u026a\u18af\3\2"+
		"\2\2\u026c\u18b8\3\2\2\2\u026e\u18ba\3\2\2\2\u0270\u18bf\3\2\2\2\u0272"+
		"\u18f6\3\2\2\2\u0274\u18f9\3\2\2\2\u0276\u1902\3\2\2\2\u0278\u190e\3\2"+
		"\2\2\u027a\u192d\3\2\2\2\u027c\u1947\3\2\2\2\u027e\u1990\3\2\2\2\u0280"+
		"\u1992\3\2\2\2\u0282\u199a\3\2\2\2\u0284\u19a0\3\2\2\2\u0286\u19b1\3\2"+
		"\2\2\u0288\u1a4f\3\2\2\2\u028a\u1a52\3\2\2\2\u028c\u1a62\3\2\2\2\u028e"+
		"\u1a70\3\2\2\2\u0290\u1a74\3\2\2\2\u0292\u1a89\3\2\2\2\u0294\u1a8b\3\2"+
		"\2\2\u0296\u1a94\3\2\2\2\u0298\u1aa5\3\2\2\2\u029a\u1aa9\3\2\2\2\u029c"+
		"\u1ab1\3\2\2\2\u029e\u1abf\3\2\2\2\u02a0\u1ac1\3\2\2\2\u02a2\u1ac5\3\2"+
		"\2\2\u02a4\u1ae7\3\2\2\2\u02a6\u1af2\3\2\2\2\u02a8\u1afd\3\2\2\2\u02aa"+
		"\u1b10\3\2\2\2\u02ac\u1b13\3\2\2\2\u02ae\u1b3d\3\2\2\2\u02b0\u1b95\3\2"+
		"\2\2\u02b2\u1b97\3\2\2\2\u02b4\u1b9d\3\2\2\2\u02b6\u1bb0\3\2\2\2\u02b8"+
		"\u1bc8\3\2\2\2\u02ba\u1bca\3\2\2\2\u02bc\u1bd1\3\2\2\2\u02be\u1bdf\3\2"+
		"\2\2\u02c0\u1be3\3\2\2\2\u02c2\u1bed\3\2\2\2\u02c4\u1c18\3\2\2\2\u02c6"+
		"\u1c1a\3\2\2\2\u02c8\u1c2e\3\2\2\2\u02ca\u1c30\3\2\2\2\u02cc\u1c3f\3\2"+
		"\2\2\u02ce\u1c4b\3\2\2\2\u02d0\u1c5e\3\2\2\2\u02d2\u1c62\3\2\2\2\u02d4"+
		"\u1c6d\3\2\2\2\u02d6\u1c80\3\2\2\2\u02d8\u1cb6\3\2\2\2\u02da\u1cbc\3\2"+
		"\2\2\u02dc\u1cc7\3\2\2\2\u02de\u1cf5\3\2\2\2\u02e0\u1cfa\3\2\2\2\u02e2"+
		"\u1d07\3\2\2\2\u02e4\u1d31\3\2\2\2\u02e6\u1d33\3\2\2\2\u02e8\u1d35\3\2"+
		"\2\2\u02ea\u1d43\3\2\2\2\u02ec\u1d4f\3\2\2\2\u02ee\u1d66\3\2\2\2\u02f0"+
		"\u1d97\3\2\2\2\u02f2\u1d99\3\2\2\2\u02f4\u1da2\3\2\2\2\u02f6\u1db7\3\2"+
		"\2\2\u02f8\u1dd6\3\2\2\2\u02fa\u02fc\7\u026d\2\2\u02fb\u02fa\3\2\2\2\u02fb"+
		"\u02fc\3\2\2\2\u02fc\u0300\3\2\2\2\u02fd\u02ff\7\u0244\2\2\u02fe\u02fd"+
		"\3\2\2\2\u02ff\u0302\3\2\2\2\u0300\u02fe\3\2\2\2\u0300\u0301\3\2\2\2\u0301"+
		"\u030e\3\2\2\2\u0302\u0300\3\2\2\2\u0303\u030a\5\16\b\2\u0304\u0306\7"+
		"\u0244\2\2\u0305\u0304\3\2\2\2\u0306\u0307\3\2\2\2\u0307\u0305\3\2\2\2"+
		"\u0307\u0308\3\2\2\2\u0308\u030b\3\2\2\2\u0309\u030b\7\2\2\3\u030a\u0305"+
		"\3\2\2\2\u030a\u0309\3\2\2\2\u030b\u030d\3\2\2\2\u030c\u0303\3\2\2\2\u030d"+
		"\u0310\3\2\2\2\u030e\u030c\3\2\2\2\u030e\u030f\3\2\2\2\u030f\u0311\3\2"+
		"\2\2\u0310\u030e\3\2\2\2\u0311\u0312\7\2\2\3\u0312\3\3\2\2\2\u0313\u0314"+
		"\5\u026a\u0136\2\u0314\u0315\7\2\2\3\u0315\5\3\2\2\2\u0316\u0318\5\u026a"+
		"\u0136\2\u0317\u0316\3\2\2\2\u0317\u0318\3\2\2\2\u0318\u0319\3\2\2\2\u0319"+
		"\u031a\5\u0142\u00a2\2\u031a\u031b\7\2\2\3\u031b\7\3\2\2\2\u031c\u0321"+
		"\5\u0230\u0119\2\u031d\u031e\7\u0245\2\2\u031e\u0320\5\u0230\u0119\2\u031f"+
		"\u031d\3\2\2\2\u0320\u0323\3\2\2\2\u0321\u031f\3\2\2\2\u0321\u0322\3\2"+
		"\2\2\u0322\u0324\3\2\2\2\u0323\u0321\3\2\2\2\u0324\u0325\7\2\2\3\u0325"+
		"\t\3\2\2\2\u0326\u0328\5\u02ba\u015e\2\u0327\u0326\3\2\2\2\u0327\u0328"+
		"\3\2\2\2\u0328\u0329\3\2\2\2\u0329\u032b\5\u02bc\u015f\2\u032a\u032c\7"+
		"\u0244\2\2\u032b\u032a\3\2\2\2\u032b\u032c\3\2\2\2\u032c\u032d\3\2\2\2"+
		"\u032d\u032e\7\2\2\3\u032e\13\3\2\2\2\u032f\u0331\5\u02ba\u015e\2\u0330"+
		"\u032f\3\2\2\2\u0330\u0331\3\2\2\2\u0331\u0332\3\2\2\2\u0332\u0333\5\u02bc"+
		"\u015f\2\u0333\u0334\7\u0244\2\2\u0334\u0336\3\2\2\2\u0335\u0330\3\2\2"+
		"\2\u0336\u0339\3\2\2\2\u0337\u0335\3\2\2\2\u0337\u0338\3\2\2\2\u0338\u033a"+
		"\3\2\2\2\u0339\u0337\3\2\2\2\u033a\u033b\7\2\2\3\u033b\r\3\2\2\2\u033c"+
		"\u0340\5\20\t\2\u033d\u0340\5<\37\2\u033e\u0340\5\22\n\2\u033f\u033c\3"+
		"\2\2\2\u033f\u033d\3\2\2\2\u033f\u033e\3\2\2\2\u0340\17\3\2\2\2\u0341"+
		"\u0346\5\u0270\u0139\2\u0342\u0346\5\u02a2\u0152\2\u0343\u0346\5\u02ae"+
		"\u0158\2\u0344\u0346\5\u02ac\u0157\2\u0345\u0341\3\2\2\2\u0345\u0342\3"+
		"\2\2\2\u0345\u0343\3\2\2\2\u0345\u0344\3\2\2\2\u0346\21\3\2\2\2\u0347"+
		"\u034a\5\24\13\2\u0348\u034a\5\34\17\2\u0349\u0347\3\2\2\2\u0349\u0348"+
		"\3\2\2\2\u034a\23\3\2\2\2\u034b\u034c\7\u00f0\2\2\u034c\u0352\7\u0104"+
		"\2\2\u034d\u034f\7\25\2\2\u034e\u0350\t\2\2\2\u034f\u034e\3\2\2\2\u034f"+
		"\u0350\3\2\2\2\u0350\u0352\3\2\2\2\u0351\u034b\3\2\2\2\u0351\u034d\3\2"+
		"\2\2\u0352\u035b\3\2\2\2\u0353\u0358\5\26\f\2\u0354\u0355\7\u0245\2\2"+
		"\u0355\u0357\5\26\f\2\u0356\u0354\3\2\2\2\u0357\u035a\3\2\2\2\u0358\u0356"+
		"\3\2\2\2\u0358\u0359\3\2\2\2\u0359\u035c\3\2\2\2\u035a\u0358\3\2\2\2\u035b"+
		"\u0353\3\2\2\2\u035b\u035c\3\2\2\2\u035c\u0385\3\2\2\2\u035d\u035f\t\3"+
		"\2\2\u035e\u0360\t\2\2\2\u035f\u035e\3\2\2\2\u035f\u0360\3\2\2\2\u0360"+
		"\u0366\3\2\2\2\u0361\u0363\7\u0173\2\2\u0362\u0364\7\u0098\2\2\u0363\u0362"+
		"\3\2\2\2\u0363\u0364\3\2\2\2\u0364\u0365\3\2\2\2\u0365\u0367\7\35\2\2"+
		"\u0366\u0361\3\2\2\2\u0366\u0367\3\2\2\2\u0367\u0385\3\2\2\2\u0368\u0369"+
		"\7&\2\2\u0369\u036d\7\u00b5\2\2\u036a\u036b\7\u00b4\2\2\u036b\u036d\7"+
		"\u0104\2\2\u036c\u0368\3\2\2\2\u036c\u036a\3\2\2\2\u036d\u036e\3\2\2\2"+
		"\u036e\u0385\7\u0267\2\2\u036f\u0375\7\u00da\2\2\u0370\u0372\7\u00c9\2"+
		"\2\u0371\u0373\7\u00da\2\2\u0372\u0371\3\2\2\2\u0372\u0373\3\2\2\2\u0373"+
		"\u0375\3\2\2\2\u0374\u036f\3\2\2\2\u0374\u0370\3\2\2\2\u0375\u0376\3\2"+
		"\2\2\u0376\u0385\5\u0210\u0109\2\u0377\u0378\7\u00d4\2\2\u0378\u0379\7"+
		"\u00b5\2\2\u0379\u0385\7\u0267\2\2\u037a\u037c\7\u00d4\2\2\u037b\u037d"+
		"\t\2\2\2\u037c\u037b\3\2\2\2\u037c\u037d\3\2\2\2\u037d\u037e\3\2\2\2\u037e"+
		"\u0380\7\u01b1\2\2\u037f\u0381\7\u00da\2\2\u0380\u037f\3\2\2\2\u0380\u0381"+
		"\3\2\2\2\u0381\u0382\3\2\2\2\u0382\u0385\5\u0210\u0109\2\u0383\u0385\5"+
		"\30\r\2\u0384\u0351\3\2\2\2\u0384\u035d\3\2\2\2\u0384\u036c\3\2\2\2\u0384"+
		"\u0374\3\2\2\2\u0384\u0377\3\2\2\2\u0384\u037a\3\2\2\2\u0384\u0383\3\2"+
		"\2\2\u0385\25\3\2\2\2\u0386\u0387\7{\2\2\u0387\u038f\7\u0082\2\2\u0388"+
		"\u0390\7\u00e3\2\2\u0389\u038a\7\u00cb\2\2\u038a\u0390\7\u00c0\2\2\u038b"+
		"\u038c\7\u00c0\2\2\u038c\u0390\7\'\2\2\u038d\u038e\7\u00c0\2\2\u038e\u0390"+
		"\7\u010c\2\2\u038f\u0388\3\2\2\2\u038f\u0389\3\2\2\2\u038f\u038b\3\2\2"+
		"\2\u038f\u038d\3\2\2\2\u0390\u039a\3\2\2\2\u0391\u0392\7\u00c0\2\2\u0392"+
		"\u039a\7\u0122\2\2\u0393\u0394\7\u00c0\2\2\u0394\u039a\7\u01a4\2\2\u0395"+
		"\u0397\7\u01a0\2\2\u0396\u0395\3\2\2\2\u0396\u0397\3\2\2\2\u0397\u0398"+
		"\3\2\2\2\u0398\u039a\7\u0188\2\2\u0399\u0386\3\2\2\2\u0399\u0391\3\2\2"+
		"\2\u0399\u0393\3\2\2\2\u0399\u0396\3\2\2\2\u039a\27\3\2\2\2\u039b\u039d"+
		"\7\u0087\2\2\u039c\u039e\7\u01af\2\2\u039d\u039c\3\2\2\2\u039d\u039e\3"+
		"\2\2\2\u039e\u039f\3\2\2\2\u039f\u03a4\5\u0186\u00c4\2\u03a0\u03a1\7\u0245"+
		"\2\2\u03a1\u03a3\5\u0186\u00c4\2\u03a2\u03a0\3\2\2\2\u03a3\u03a6\3\2\2"+
		"\2\u03a4\u03a2\3\2\2\2\u03a4\u03a5\3\2\2\2\u03a5\u03ab\3\2\2\2\u03a6\u03a4"+
		"\3\2\2\2\u03a7\u03a8\7\u0197\2\2\u03a8\u03a9\5\32\16\2\u03a9\u03aa\7\u0091"+
		"\2\2\u03aa\u03ac\3\2\2\2\u03ab\u03a7\3\2\2\2\u03ab\u03ac\3\2\2\2\u03ac"+
		"\u03ae\3\2\2\2\u03ad\u03af\7\u009b\2\2\u03ae\u03ad\3\2\2\2\u03ae\u03af"+
		"\3\2\2\2\u03af\31\3\2\2\2\u03b0\u03b1\t\4\2\2\u03b1\u03bd\7\u00e8\2\2"+
		"\u03b2\u03b3\7\u0144\2\2\u03b3\u03bd\7S\2\2\u03b4\u03b5\7\u00e8\2\2\u03b5"+
		"\u03b6\t\5\2\2\u03b6\u03bd\7S\2\2\u03b7\u03bd\7\u00e8\2\2\u03b8\u03ba"+
		"\7\5\2\2\u03b9\u03b8\3\2\2\2\u03b9\u03ba\3\2\2\2\u03ba\u03bb\3\2\2\2\u03bb"+
		"\u03bd\7S\2\2\u03bc\u03b0\3\2\2\2\u03bc\u03b2\3\2\2\2\u03bc\u03b4\3\2"+
		"\2\2\u03bc\u03b7\3\2\2\2\u03bc\u03b9\3\2\2\2\u03bd\33\3\2\2\2\u03be\u03da"+
		"\5\36\20\2\u03bf\u03c0\7\u0113\2\2\u03c0\u03c2\5\62\32\2\u03c1\u03c3\5"+
		".\30\2\u03c2\u03c1\3\2\2\2\u03c2\u03c3\3\2\2\2\u03c3\u03da\3\2\2\2\u03c4"+
		"\u03c6\t\6\2\2\u03c5\u03c7\5:\36\2\u03c6\u03c5\3\2\2\2\u03c6\u03c7\3\2"+
		"\2\2\u03c7\u03c9\3\2\2\2\u03c8\u03ca\t\7\2\2\u03c9\u03c8\3\2\2\2\u03c9"+
		"\u03ca\3\2\2\2\u03ca\u03cb\3\2\2\2\u03cb\u03da\5\u0210\u0109\2\u03cc\u03cf"+
		"\7!\2\2\u03cd\u03d0\5\u0210\u0109\2\u03ce\u03d0\7\u0170\2\2\u03cf\u03cd"+
		"\3\2\2\2\u03cf\u03ce\3\2\2\2\u03d0\u03da\3\2\2\2\u03d1\u03d2\7\30\2\2"+
		"\u03d2\u03da\5\u0246\u0124\2\u03d3\u03d4\7E\2\2\u03d4\u03da\t\b\2\2\u03d5"+
		"\u03da\5&\24\2\u03d6\u03da\5$\23\2\u03d7\u03da\5 \21\2\u03d8\u03da\5("+
		"\25\2\u03d9\u03be\3\2\2\2\u03d9\u03bf\3\2\2\2\u03d9\u03c4\3\2\2\2\u03d9"+
		"\u03cc\3\2\2\2\u03d9\u03d1\3\2\2\2\u03d9\u03d3\3\2\2\2\u03d9\u03d5\3\2"+
		"\2\2\u03d9\u03d6\3\2\2\2\u03d9\u03d7\3\2\2\2\u03d9\u03d8\3\2\2\2\u03da"+
		"\35\3\2\2\2\u03db\u045a\5\u02b8\u015d\2\u03dc\u03dd\7\u0083\2\2\u03dd"+
		"\u045a\5\u0210\u0109\2\u03de\u03e1\7\u010f\2\2\u03df\u03e2\5\u0210\u0109"+
		"\2\u03e0\u03e2\7\u024f\2\2\u03e1\u03df\3\2\2\2\u03e1\u03e0\3\2\2\2\u03e2"+
		"\u045a\3\2\2\2\u03e3\u03f0\7\u0172\2\2\u03e4\u03e5\7\u024b\2\2\u03e5\u03ea"+
		"\5\66\34\2\u03e6\u03e7\7\u0245\2\2\u03e7\u03e9\5\66\34\2\u03e8\u03e6\3"+
		"\2\2\2\u03e9\u03ec\3\2\2\2\u03ea\u03e8\3\2\2\2\u03ea\u03eb\3\2\2\2\u03eb"+
		"\u03ed\3\2\2\2\u03ec\u03ea\3\2\2\2\u03ed\u03ee\7\u024c\2\2\u03ee\u03f1"+
		"\3\2\2\2\u03ef\u03f1\7\u016f\2\2\u03f0\u03e4\3\2\2\2\u03f0\u03ef\3\2\2"+
		"\2\u03f0\u03f1\3\2\2\2\u03f1\u03f3\3\2\2\2\u03f2\u03f4\5.\30\2\u03f3\u03f2"+
		"\3\2\2\2\u03f3\u03f4\3\2\2\2\u03f4\u045a\3\2\2\2\u03f5\u03f7\7\"";
	private static final String _serializedATNSegment1 =
		"\2\2\u03f6\u03f8\7\u016f\2\2\u03f7\u03f6\3\2\2\2\u03f7\u03f8\3\2\2\2\u03f8"+
		"\u0402\3\2\2\2\u03f9\u03fa\5\u0210\u0109\2\u03fa\u03fb\7\u01a3\2\2\u03fb"+
		"\u03fc\5\u026a\u0136\2\u03fc\u0403\3\2\2\2\u03fd\u0400\5\u026a\u0136\2"+
		"\u03fe\u03ff\7\u01b7\2\2\u03ff\u0401\5\u0210\u0109\2\u0400\u03fe\3\2\2"+
		"\2\u0400\u0401\3\2\2\2\u0401\u0403\3\2\2\2\u0402\u03f9\3\2\2\2\u0402\u03fd"+
		"\3\2\2\2\u0402\u0403\3\2\2\2\u0403\u045a\3\2\2\2\u0404\u045a\7\37\2\2"+
		"\u0405\u0406\7\u0084\2\2\u0406\u045a\7\u0267\2\2\u0407\u0409\79\2\2\u0408"+
		"\u040a\7\u00b4\2\2\u0409\u0408\3\2\2\2\u0409\u040a\3\2\2\2\u040a\u040d"+
		"\3\2\2\2\u040b\u040e\5\u0210\u0109\2\u040c\u040e\7\u0170\2\2\u040d\u040b"+
		"\3\2\2\2\u040d\u040c\3\2\2\2\u040e\u045a\3\2\2\2\u040f\u0413\7\u00c7\2"+
		"\2\u0410\u0411\7\u024b\2\2\u0411\u0412\7\u016f\2\2\u0412\u0414\7\u024c"+
		"\2\2\u0413\u0410\3\2\2\2\u0413\u0414\3\2\2\2\u0414\u0415\3\2\2\2\u0415"+
		"\u0417\t\t\2\2\u0416\u0418\7\u015c\2\2\u0417\u0416\3\2\2\2\u0417\u0418"+
		"\3\2\2\2\u0418\u0419\3\2\2\2\u0419\u045a\5\u026a\u0136\2\u041a\u0426\7"+
		"\u00ce\2\2\u041b\u041c\5\u0210\u0109\2\u041c\u041d\7\u0253\2\2\u041d\u041f"+
		"\3\2\2\2\u041e\u041b\3\2\2\2\u041e\u041f\3\2\2\2\u041f\u0420\3\2\2\2\u0420"+
		"\u0427\5\u0210\u0109\2\u0421\u0422\7\u0148\2\2\u0422\u0427\7\u0126\2\2"+
		"\u0423\u0424\7\u00e5\2\2\u0424\u0427\7\u0159\2\2\u0425\u0427\7\u0170\2"+
		"\2\u0426\u041e\3\2\2\2\u0426\u0421\3\2\2\2\u0426\u0423\3\2\2\2\u0426\u0425"+
		"\3\2\2\2\u0427\u045a\3\2\2\2\u0428\u0429\7\u00c6\2\2\u0429\u042a\7\u008c"+
		"\2\2\u042a\u042c\7\u011a\2\2\u042b\u042d\7\u015c\2\2\u042c\u042b\3\2\2"+
		"\2\u042c\u042d\3\2\2\2\u042d\u042e\3\2\2\2\u042e\u0434\5\u026a\u0136\2"+
		"\u042f\u0431\7\u01bc\2\2\u0430\u0432\7\u0098\2\2\u0431\u0430\3\2\2\2\u0431"+
		"\u0432\3\2\2\2\u0432\u0433\3\2\2\2\u0433\u0435\7\66\2\2\u0434\u042f\3"+
		"\2\2\2\u0434\u0435\3\2\2\2\u0435\u045a\3\2\2\2\u0436\u0437\7\u00b4\2\2"+
		"\u0437\u0443\5\u0210\u0109\2\u0438\u0439\7\u024b\2\2\u0439\u043e\5\u0224"+
		"\u0113\2\u043a\u043b\7\u0245\2\2\u043b\u043d\5\u0224\u0113\2\u043c\u043a"+
		"\3\2\2\2\u043d\u0440\3\2\2\2\u043e\u043c\3\2\2\2\u043e\u043f\3\2\2\2\u043f"+
		"\u0441\3\2\2\2\u0440\u043e\3\2\2\2\u0441\u0442\7\u024c\2\2\u0442\u0444"+
		"\3\2\2\2\u0443\u0438\3\2\2\2\u0443\u0444\3\2\2\2\u0444\u0445\3\2\2\2\u0445"+
		"\u0446\7\u0176\2\2\u0446\u0447\5\20\t\2\u0447\u045a\3\2\2\2\u0448\u0449"+
		"\7\u00c1\2\2\u0449\u044a\7\u00a9\2\2\u044a\u044b\7\26\2\2\u044b\u0450"+
		"\5,\27\2\u044c\u044d\7\u0245\2\2\u044d\u044f\5,\27\2\u044e\u044c\3\2\2"+
		"\2\u044f\u0452\3\2\2\2\u0450\u044e\3\2\2\2\u0450\u0451\3\2\2\2\u0451\u0453"+
		"\3\2\2\2\u0452\u0450\3\2\2\2\u0453\u0454\7\u01b1\2\2\u0454\u0455\5,\27"+
		"\2\u0455\u045a\3\2\2\2\u0456\u045a\5\u018c\u00c7\2\u0457\u045a\5\u02b4"+
		"\u015b\2\u0458\u045a\5\u02b2\u015a\2\u0459\u03db\3\2\2\2\u0459\u03dc\3"+
		"\2\2\2\u0459\u03de\3\2\2\2\u0459\u03e3\3\2\2\2\u0459\u03f5\3\2\2\2\u0459"+
		"\u0404\3\2\2\2\u0459\u0405\3\2\2\2\u0459\u0407\3\2\2\2\u0459\u040f\3\2"+
		"\2\2\u0459\u041a\3\2\2\2\u0459\u0428\3\2\2\2\u0459\u0436\3\2\2\2\u0459"+
		"\u0448\3\2\2\2\u0459\u0456\3\2\2\2\u0459\u0457\3\2\2\2\u0459\u0458\3\2"+
		"\2\2\u045a\37\3\2\2\2\u045b\u046d\7U\2\2\u045c\u045e\7\u0172\2\2\u045d"+
		"\u045c\3\2\2\2\u045d\u045e\3\2\2\2\u045e\u0460\3\2\2\2\u045f\u0461\7\u016f"+
		"\2\2\u0460\u045f\3\2\2\2\u0460\u0461\3\2\2\2\u0461\u046e\3\2\2\2\u0462"+
		"\u0463\7\u024b\2\2\u0463\u0468\5*\26\2\u0464\u0465\7\u0245\2\2\u0465\u0467"+
		"\5*\26\2\u0466\u0464\3\2\2\2\u0467\u046a\3\2\2\2\u0468\u0466\3\2\2\2\u0468"+
		"\u0469\3\2\2\2\u0469\u046b\3\2\2\2\u046a\u0468\3\2\2\2\u046b\u046c\7\u024c"+
		"\2\2\u046c\u046e\3\2\2\2\u046d\u045d\3\2\2\2\u046d\u0462\3\2\2\2\u046e"+
		"\u046f\3\2\2\2\u046f\u0470\5\"\22\2\u0470!\3\2\2\2\u0471\u047a\5\20\t"+
		"\2\u0472\u047a\5$\23\2\u0473\u047a\5&\24\2\u0474\u0477\7\u0180\2\2\u0475"+
		"\u0478\5\u01a2\u00d2\2\u0476\u0478\5\u0196\u00cc\2\u0477\u0475\3\2\2\2"+
		"\u0477\u0476\3\2\2\2\u0478\u047a\3\2\2\2\u0479\u0471\3\2\2\2\u0479\u0472"+
		"\3\2\2\2\u0479\u0473\3\2\2\2\u0479\u0474\3\2\2\2\u047a#\3\2\2\2\u047b"+
		"\u047c\7T\2\2\u047c\u0488\5\u0210\u0109\2\u047d\u047e\7\u024b\2\2\u047e"+
		"\u0483\5\u0230\u0119\2\u047f\u0480\7\u0245\2\2\u0480\u0482\5\u0230\u0119"+
		"\2\u0481\u047f\3\2\2\2\u0482\u0485\3\2\2\2\u0483\u0481\3\2\2\2\u0483\u0484"+
		"\3\2\2\2\u0484\u0486\3\2\2\2\u0485\u0483\3\2\2\2\u0486\u0487\7\u024c\2"+
		"\2\u0487\u0489\3\2\2\2\u0488\u047d\3\2\2\2\u0488\u0489\3\2\2\2\u0489%"+
		"\3\2\2\2\u048a\u048b\7:\2\2\u048b\u048d\5\u0210\u0109\2\u048c\u048e\7"+
		"\u015a\2\2\u048d\u048c\3\2\2\2\u048d\u048e\3\2\2\2\u048e\u0490\3\2\2\2"+
		"\u048f\u0491\7w\2\2\u0490\u048f\3\2\2\2\u0490\u0491\3\2\2\2\u0491\u0496"+
		"\3\2\2\2\u0492\u0494\7\u0098\2\2\u0493\u0492\3\2\2\2\u0493\u0494\3\2\2"+
		"\2\u0494\u0495\3\2\2\2\u0495\u0497\7\u00dd\2\2\u0496\u0493\3\2\2\2\u0496"+
		"\u0497\3\2\2\2\u0497\u0498\3\2\2\2\u0498\u049b\7\64\2\2\u0499\u049a\t"+
		"\n\2\2\u049a\u049c\7f\2\2\u049b\u0499\3\2\2\2\u049b\u049c\3\2\2\2\u049c"+
		"\u049d\3\2\2\2\u049d\u049e\7\u0191\2\2\u049e\u049f\5\u0270\u0139\2\u049f"+
		"\'\3\2\2\2\u04a0\u04af\7\u00e9\2\2\u04a1\u04a2\5\u0210\u0109\2\u04a2\u04a3"+
		"\7\u0253\2\2\u04a3\u04a5\3\2\2\2\u04a4\u04a1\3\2\2\2\u04a4\u04a5\3\2\2"+
		"\2\u04a5\u04a6\3\2\2\2\u04a6\u04b0\5\u0210\u0109\2\u04a7\u04b0\7\u0170"+
		"\2\2\u04a8\u04a9\7\u0148\2\2\u04a9\u04b0\7\u0126\2\2\u04aa\u04ab\7\u0104"+
		"\2\2\u04ab\u04ac\7{\2\2\u04ac\u04b0\7\u0082\2\2\u04ad\u04ae\7\u00e5\2"+
		"\2\u04ae\u04b0\7\u0159\2\2\u04af\u04a4\3\2\2\2\u04af\u04a7\3\2\2\2\u04af"+
		"\u04a8\3\2\2\2\u04af\u04aa\3\2\2\2\u04af\u04ad\3\2\2\2\u04b0)\3\2\2\2"+
		"\u04b1\u04b3\t\13\2\2\u04b2\u04b4\58\35\2\u04b3\u04b2\3\2\2\2\u04b3\u04b4"+
		"\3\2\2\2\u04b4\u04b8\3\2\2\2\u04b5\u04b6\7\u01d5\2\2\u04b6\u04b8\t\f\2"+
		"\2\u04b7\u04b1\3\2\2\2\u04b7\u04b5\3\2\2\2\u04b8+\3\2\2\2\u04b9\u04bd"+
		"\5\u0210\u0109\2\u04ba\u04bd\7\u0186\2\2\u04bb\u04bd\7\u01ac\2\2\u04bc"+
		"\u04b9\3\2\2\2\u04bc\u04ba\3\2\2\2\u04bc\u04bb\3\2\2\2\u04bd-\3\2\2\2"+
		"\u04be\u04c3\5\60\31\2\u04bf\u04c0\7\u0245\2\2\u04c0\u04c2\5\60\31\2\u04c1"+
		"\u04bf\3\2\2\2\u04c2\u04c5\3\2\2\2\u04c3\u04c1\3\2\2\2\u04c3\u04c4\3\2"+
		"\2\2\u04c4/\3\2\2\2\u04c5\u04c3\3\2\2\2\u04c6\u04d2\5\u026a\u0136\2\u04c7"+
		"\u04c8\7\u024b\2\2\u04c8\u04cd\5\u0210\u0109\2\u04c9\u04ca\7\u0245\2\2"+
		"\u04ca\u04cc\5\u0210\u0109\2\u04cb\u04c9\3\2\2\2\u04cc\u04cf\3\2\2\2\u04cd"+
		"\u04cb\3\2\2\2\u04cd\u04ce\3\2\2\2\u04ce\u04d0\3\2\2\2\u04cf\u04cd\3\2"+
		"\2\2\u04d0\u04d1\7\u024c\2\2\u04d1\u04d3\3\2\2\2\u04d2\u04c7\3\2\2\2\u04d2"+
		"\u04d3\3\2\2\2\u04d3\61\3\2\2\2\u04d4\u04d5\7\u024b\2\2\u04d5\u04da\5"+
		"\64\33\2\u04d6\u04d7\7\u0245\2\2\u04d7\u04d9\5\64\33\2\u04d8\u04d6\3\2"+
		"\2\2\u04d9\u04dc\3\2\2\2\u04da\u04d8\3\2\2\2\u04da\u04db\3\2\2\2\u04db"+
		"\u04dd\3\2\2\2\u04dc\u04da\3\2\2\2\u04dd\u04de\7\u024c\2\2\u04de\u04ec"+
		"\3\2\2\2\u04df\u04e1\7\u0160\2\2\u04e0\u04df\3\2\2\2\u04e0\u04e1\3\2\2"+
		"\2\u04e1\u04e3\3\2\2\2\u04e2\u04e4\7\u015f\2\2\u04e3\u04e2\3\2\2\2\u04e3"+
		"\u04e4\3\2\2\2\u04e4\u04e6\3\2\2\2\u04e5\u04e7\7\u016f\2\2\u04e6\u04e5"+
		"\3\2\2\2\u04e6\u04e7\3\2\2\2\u04e7\u04e9\3\2\2\2\u04e8\u04ea\7\u0172\2"+
		"\2\u04e9\u04e8\3\2\2\2\u04e9\u04ea\3\2\2\2\u04ea\u04ec\3\2\2\2\u04eb\u04d4"+
		"\3\2\2\2\u04eb\u04e0\3\2\2\2\u04ec\63\3\2\2\2\u04ed\u04ef\t\r\2\2\u04ee"+
		"\u04f0\58\35\2\u04ef\u04ee\3\2\2\2\u04ef\u04f0\3\2\2\2\u04f0\65\3\2\2"+
		"\2\u04f1\u04f3\t\16\2\2\u04f2\u04f4\58\35\2\u04f3\u04f2\3\2\2\2\u04f3"+
		"\u04f4\3\2\2\2\u04f4\67\3\2\2\2\u04f5\u04f6\t\17\2\2\u04f69\3\2\2\2\u04f7"+
		"\u0509\7\u0097\2\2\u04f8\u0509\7\u00b7\2\2\u04f9\u0509\7Z\2\2\u04fa\u0509"+
		"\7\u0080\2\2\u04fb\u04fd\t\20\2\2\u04fc\u04fb\3\2\2\2\u04fc\u04fd\3\2"+
		"\2\2\u04fd\u04fe\3\2\2\2\u04fe\u0509\5\u0150\u00a9\2\u04ff\u0509\7\u0170"+
		"\2\2\u0500\u0502\7]\2\2\u0501\u0503\t\21\2\2\u0502\u0501\3\2\2\2\u0502"+
		"\u0503\3\2\2\2\u0503\u0509\3\2\2\2\u0504\u0506\7\23\2\2\u0505\u0507\t"+
		"\21\2\2\u0506\u0505\3\2\2\2\u0506\u0507\3\2\2\2\u0507\u0509\3\2\2\2\u0508"+
		"\u04f7\3\2\2\2\u0508\u04f8\3\2\2\2\u0508\u04f9\3\2\2\2\u0508\u04fa\3\2"+
		"\2\2\u0508\u04fc\3\2\2\2\u0508\u04ff\3\2\2\2\u0508\u0500\3\2\2\2\u0508"+
		"\u0504\3\2\2\2\u0509;\3\2\2\2\u050a\u050e\5> \2\u050b\u050e\5@!\2\u050c"+
		"\u050e\5B\"\2\u050d\u050a\3\2\2\2\u050d\u050b\3\2\2\2\u050d\u050c\3\2"+
		"\2\2\u050e=\3\2\2\2\u050f\u0536\7\u0180\2\2\u0510\u0537\5\u01a0\u00d1"+
		"\2\u0511\u0537\5\u01a4\u00d3\2\u0512\u0537\5\u0090I\2\u0513\u0537\5\u009a"+
		"N\2\u0514\u0537\5\u0112\u008a\2\u0515\u0537\5\u010e\u0088\2\u0516\u0537"+
		"\5\u0136\u009c\2\u0517\u0537\5\u014c\u00a7\2\u0518\u0537\5\u0156\u00ac"+
		"\2\u0519\u0537\5\u0196\u00cc\2\u051a\u0537\5\u009cO\2\u051b\u0537\5\u009e"+
		"P\2\u051c\u0537\5\u00a0Q\2\u051d\u0537\5\u00a2R\2\u051e\u0537\5\u00a4"+
		"S\2\u051f\u0537\5\u00aaV\2\u0520\u0537\5\u00acW\2\u0521\u0537\5\u00ae"+
		"X\2\u0522\u0537\5\u00a6T\2\u0523\u0537\5\u00b0Y\2\u0524\u0537\5\u00b6"+
		"\\\2\u0525\u0537\5\u00e0q\2\u0526\u0537\5\u00e2r\2\u0527\u0537\5\u00e4"+
		"s\2\u0528\u0537\5\u00f0y\2\u0529\u0537\5\u00f4{\2\u052a\u0537\5\u00f6"+
		"|\2\u052b\u0537\5\u00f8}\2\u052c\u0537\5\u00fc\177\2\u052d\u0537\5\u0102"+
		"\u0082\2\u052e\u0537\5\u01a2\u00d2\2\u052f\u0537\5\u0158\u00ad\2\u0530"+
		"\u0537\5\u015e\u00b0\2\u0531\u0537\5\u0164\u00b3\2\u0532\u0537\5\u0168"+
		"\u00b5\2\u0533\u0537\5\u0174\u00bb\2\u0534\u0537\5\u017c\u00bf\2\u0535"+
		"\u0537\5\u0180\u00c1\2\u0536\u0510\3\2\2\2\u0536\u0511\3\2\2\2\u0536\u0512"+
		"\3\2\2\2\u0536\u0513\3\2\2\2\u0536\u0514\3\2\2\2\u0536\u0515\3\2\2\2\u0536"+
		"\u0516\3\2\2\2\u0536\u0517\3\2\2\2\u0536\u0518\3\2\2\2\u0536\u0519\3\2"+
		"\2\2\u0536\u051a\3\2\2\2\u0536\u051b\3\2\2\2\u0536\u051c\3\2\2\2\u0536"+
		"\u051d\3\2\2\2\u0536\u051e\3\2\2\2\u0536\u051f\3\2\2\2\u0536\u0520\3\2"+
		"\2\2\u0536\u0521\3\2\2\2\u0536\u0522\3\2\2\2\u0536\u0523\3\2\2\2\u0536"+
		"\u0524\3\2\2\2\u0536\u0525\3\2\2\2\u0536\u0526\3\2\2\2\u0536\u0527\3\2"+
		"\2\2\u0536\u0528\3\2\2\2\u0536\u0529\3\2\2\2\u0536\u052a\3\2\2\2\u0536"+
		"\u052b\3\2\2\2\u0536\u052c\3\2\2\2\u0536\u052d\3\2\2\2\u0536\u052e\3\2"+
		"\2\2\u0536\u052f\3\2\2\2\u0536\u0530\3\2\2\2\u0536\u0531\3\2\2\2\u0536"+
		"\u0532\3\2\2\2\u0536\u0533\3\2\2\2\u0536\u0534\3\2\2\2\u0536\u0535\3\2"+
		"\2\2\u0537\u053e\3\2\2\2\u0538\u053e\5\u012e\u0098\2\u0539\u053e\5\u0118"+
		"\u008d\2\u053a\u053e\5\u0106\u0084\2\u053b\u053e\5D#\2\u053c\u053e\5\u0130"+
		"\u0099\2\u053d\u050f\3\2\2\2\u053d\u0538\3\2\2\2\u053d\u0539\3\2\2\2\u053d"+
		"\u053a\3\2\2\2\u053d\u053b\3\2\2\2\u053d\u053c\3\2\2\2\u053e?\3\2\2\2"+
		"\u053f\u0560\7\f\2\2\u0540\u0561\5F$\2\u0541\u0561\5P)\2\u0542\u0561\5"+
		"R*\2\u0543\u0561\5T+\2\u0544\u0561\5l\67\2\u0545\u0561\5p9\2\u0546\u0561"+
		"\5v<\2\u0547\u0561\5x=\2\u0548\u0561\5z>\2\u0549\u0561\5~@\2\u054a\u0561"+
		"\5\u0080A\2\u054b\u0561\5\u0082B\2\u054c\u0561\5\u0086D\2\u054d\u0561"+
		"\5\u00b2Z\2\u054e\u0561\5\u00b8]\2\u054f\u0561\5\u00ba^\2\u0550\u0561"+
		"\5\u00c0a\2\u0551\u0561\5\u00c4c\2\u0552\u0561\5\u00caf\2\u0553\u0561"+
		"\5\u00ccg\2\u0554\u0561\5\u00d0i\2\u0555\u0561\5H%\2\u0556\u0561\5J&\2"+
		"\u0557\u0561\5\u015a\u00ae\2\u0558\u0561\5\u0160\u00b1\2\u0559\u0561\5"+
		"\u0188\u00c5\2\u055a\u0561\5\u018a\u00c6\2\u055b\u0561\5\u016a\u00b6\2"+
		"\u055c\u0561\5\u0178\u00bd\2\u055d\u0561\5\u017e\u00c0\2\u055e\u0561\5"+
		"\u0182\u00c2\2\u055f\u0561\5\u00c6d\2\u0560\u0540\3\2\2\2\u0560\u0541"+
		"\3\2\2\2\u0560\u0542\3\2\2\2\u0560\u0543\3\2\2\2\u0560\u0544\3\2\2\2\u0560"+
		"\u0545\3\2\2\2\u0560\u0546\3\2\2\2\u0560\u0547\3\2\2\2\u0560\u0548\3\2"+
		"\2\2\u0560\u0549\3\2\2\2\u0560\u054a\3\2\2\2\u0560\u054b\3\2\2\2\u0560"+
		"\u054c\3\2\2\2\u0560\u054d\3\2\2\2\u0560\u054e\3\2\2\2\u0560\u054f\3\2"+
		"\2\2\u0560\u0550\3\2\2\2\u0560\u0551\3\2\2\2\u0560\u0552\3\2\2\2\u0560"+
		"\u0553\3\2\2\2\u0560\u0554\3\2\2\2\u0560\u0555\3\2\2\2\u0560\u0556\3\2"+
		"\2\2\u0560\u0557\3\2\2\2\u0560\u0558\3\2\2\2\u0560\u0559\3\2\2\2\u0560"+
		"\u055a\3\2\2\2\u0560\u055b\3\2\2\2\u0560\u055c\3\2\2\2\u0560\u055d\3\2"+
		"\2\2\u0560\u055e\3\2\2\2\u0560\u055f\3\2\2\2\u0561A\3\2\2\2\u0562\u056e"+
		"\7I\2\2\u0563\u056f\5\u0204\u0103\2\u0564\u056f\5\u0206\u0104\2\u0565"+
		"\u056f\5\u0208\u0105\2\u0566\u056f\5\u015c\u00af\2\u0567\u056f\5\u0166"+
		"\u00b4\2\u0568\u056f\5\u0172\u00ba\2\u0569\u056f\5\u017a\u00be\2\u056a"+
		"\u056f\5\u020a\u0106\2\u056b\u056f\5\u00d6l\2\u056c\u056f\5\u00d8m\2\u056d"+
		"\u056f\5\u00dan\2\u056e\u0563\3\2\2\2\u056e\u0564\3\2\2\2\u056e\u0565"+
		"\3\2\2\2\u056e\u0566\3\2\2\2\u056e\u0567\3\2\2\2\u056e\u0568\3\2\2\2\u056e"+
		"\u0569\3\2\2\2\u056e\u056a\3\2\2\2\u056e\u056b\3\2\2\2\u056e\u056c\3\2"+
		"\2\2\u056e\u056d\3\2\2\2\u056fC\3\2\2\2\u0570\u0571\7m\2\2\u0571\u0572"+
		"\7\u0192\2\2\u0572\u0573\7\u00db\2\2\u0573\u057d\5\u0210\u0109\2\u0574"+
		"\u0575\7\u019d\2\2\u0575\u0578\7\u01b1\2\2\u0576\u0578\7\u018e\2\2\u0577"+
		"\u0574\3\2\2\2\u0577\u0576\3\2\2\2\u0578\u0579\3\2\2\2\u0579\u057a\7\u024b"+
		"\2\2\u057a\u057b\5\u02b6\u015c\2\u057b\u057c\7\u024c\2\2\u057c\u057e\3"+
		"\2\2\2\u057d\u0577\3\2\2\2\u057d\u057e\3\2\2\2\u057e\u057f\3\2\2\2\u057f"+
		"\u0580\7\u0193\2\2\u0580\u0581\7\u00e4\2\2\u0581\u0582\5\u0210\u0109\2"+
		"\u0582\u0583\7\u019a\2\2\u0583\u0585\5\u0210\u0109\2\u0584\u0586\5\u01bc"+
		"\u00df\2\u0585\u0584\3\2\2\2\u0585\u0586\3\2\2\2\u0586E\3\2\2\2\u0587"+
		"\u0589\t\22\2\2\u0588\u058a\5\u0140\u00a1\2\u0589\u0588\3\2\2\2\u0589"+
		"\u058a\3\2\2\2\u058a\u05a3\3\2\2\2\u058b\u0597\5h\65\2\u058c\u0594\7\u00ce"+
		"\2\2\u058d\u058e\5\u0210\u0109\2\u058e\u058f\7\u0253\2\2\u058f\u0591\3"+
		"\2\2\2\u0590\u058d\3\2\2\2\u0590\u0591\3\2\2\2\u0591\u0592\3\2\2\2\u0592"+
		"\u0595\5\u0210\u0109\2\u0593\u0595\7\u0170\2\2\u0594\u0590\3\2\2\2\u0594"+
		"\u0593\3\2\2\2\u0595\u0597\3\2\2\2\u0596\u058b\3\2\2\2\u0596\u058c\3\2"+
		"\2\2\u0597\u0598\3\2\2\2\u0598\u0596\3\2\2\2\u0598\u0599\3\2\2\2\u0599"+
		"\u059b\3\2\2\2\u059a\u059c\7\u00d0\2\2\u059b\u059a\3\2\2\2\u059b\u059c"+
		"\3\2\2\2\u059c\u05a4\3\2\2\2\u059d\u05a4\5\u01ee\u00f8\2\u059e\u05a4\5"+
		"\u01f0\u00f9\2\u059f\u05a0\7A\2\2\u05a0\u05a1\7\u01a3\2\2\u05a1\u05a2"+
		"\7V\2\2\u05a2\u05a4\5\u0210\u0109\2\u05a3\u0596\3\2\2\2\u05a3\u059d\3"+
		"\2\2\2\u05a3\u059e\3\2\2\2\u05a3\u059f\3\2\2\2\u05a4G\3\2\2\2\u05a5\u05a6"+
		"\7\n\2\2\u05a6\u05a9\5\u0140\u00a1\2\u05a7\u05aa\5\u01ee\u00f8\2\u05a8"+
		"\u05aa\5\u01f0\u00f9\2\u05a9\u05a7\3\2\2\2\u05a9\u05a8\3\2\2\2\u05aaI"+
		"\3\2\2\2\u05ab\u05ac\7V\2\2\u05ac\u05ad\5\u0210\u0109\2\u05ad\u05ae\5"+
		"L\'\2\u05aeK\3\2\2\2\u05af\u05bb\5\u01f0\u00f9\2\u05b0\u05b6\7\u0112\2"+
		"\2\u05b1\u05b4\7\u01b1\2\2\u05b2\u05b5\5\u0210\u0109\2\u05b3\u05b5\5\u0146"+
		"\u00a4\2\u05b4\u05b2\3\2\2\2\u05b4\u05b3\3\2\2\2\u05b5\u05b7\3\2\2\2\u05b6"+
		"\u05b1\3\2\2\2\u05b6\u05b7\3\2\2\2\u05b7\u05bb\3\2\2\2\u05b8\u05b9\t\23"+
		"\2\2\u05b9\u05bb\5N(\2\u05ba\u05af\3\2\2\2\u05ba\u05b0\3\2\2\2\u05ba\u05b8"+
		"\3\2\2\2\u05bbM\3\2\2\2\u05bc\u05bd\7\5\2\2\u05bd\u05be\7\u008e\2\2\u05be"+
		"\u0617\5\u026a\u0136\2\u05bf\u05c0\7\n\2\2\u05c0\u0617\5\u0140\u00a1\2"+
		"\u05c1\u05c2\7\u017b\2\2\u05c2\u05c3\7\u024b\2\2\u05c3\u05c4\5\u026a\u0136"+
		"\2\u05c4\u05c5\7\u0176\2\2\u05c5\u05c6\5\u026a\u0136\2\u05c6\u05c7\7\u024c"+
		"\2\2\u05c7\u0617\3\2\2\2\u05c8\u05c9\7\u015b\2\2\u05c9\u0617\5\u0210\u0109"+
		"\2\u05ca\u05cb\7.\2\2\u05cb\u0617\5\u0210\u0109\2\u05cc\u05cd\7G\2\2\u05cd"+
		"\u0617\5\u026a\u0136\2\u05ce\u05cf\7P\2\2\u05cf\u05d0\7\u0106\2\2\u05d0"+
		"\u0617\5\u0210\u0109\2\u05d1\u05d2\7\u0192\2\2\u05d2\u05d3\7\66\2\2\u05d3"+
		"\u05d4\7\u0121\2\2\u05d4\u0617\5\u0210\u0109\2\u05d5\u05d6\7\u0192\2\2"+
		"\u05d6\u05d7\7\u01af\2\2\u05d7\u0617\5\u026a\u0136\2\u05d8\u05d9\7^\2"+
		"\2\u05d9\u0617\5\u0140\u00a1\2\u05da\u05dc\7\u008c\2\2\u05db\u05da\3\2"+
		"\2\2\u05db\u05dc\3\2\2\2\u05dc\u05dd\3\2\2\2\u05dd\u05de\7\u011a\2\2\u05de"+
		"\u0617\5\u026a\u0136\2\u05df\u05e0\7\u00a2\2\2\u05e0\u0617\5\u00fe\u0080"+
		"\2\u05e1\u05e2\7\u00a2\2\2\u05e2\u05e3\7 \2\2\u05e3\u05e4\5\u026a\u0136"+
		"\2\u05e4\u05e5\7\u01b7\2\2\u05e5\u05e6\5\u0210\u0109\2\u05e6\u0617\3\2"+
		"\2\2\u05e7\u05e8\7\u00a2\2\2\u05e8\u05e9\7X\2\2\u05e9\u05ea\5\u026a\u0136"+
		"\2\u05ea\u05eb\7\u01b7\2\2\u05eb\u05ec\5\u0210\u0109\2\u05ec\u0617\3\2"+
		"\2\2\u05ed\u05ef\7\u00b9\2\2\u05ee\u05ed\3\2\2\2\u05ee\u05ef\3\2\2\2\u05ef"+
		"\u05f0\3\2\2\2\u05f0\u05f1\7~\2\2\u05f1\u0617\5\u0210\u0109\2\u05f2\u05f3"+
		"\7\u00ba\2\2\u05f3\u0617\5\u0140\u00a1\2\u05f4\u05f5\7\u00d6\2\2\u05f5"+
		"\u0617\5\u0140\u00a1\2\u05f6\u05f7\7\u00db\2\2\u05f7\u0617\5\u0210\u0109"+
		"\2\u05f8\u05f9\7\u00e1\2\2\u05f9\u0617\5\u026a\u0136\2\u05fa\u05fb\7\u00e4"+
		"\2\2\u05fb\u0617\5\u0210\u0109\2\u05fc\u05fd\7\u01af\2\2\u05fd\u0617\5"+
		"\u026a\u0136\2\u05fe\u05ff\7\u0102\2\2\u05ff\u0600\7\u00de\2\2\u0600\u0601"+
		"\7(\2\2\u0601\u0617\5\u026a\u0136\2\u0602\u0603\7\u0102\2\2\u0603\u0604"+
		"\7\u00de\2\2\u0604\u0605\7C\2\2\u0605\u0617\5\u026a\u0136\2\u0606\u0607"+
		"\7\u0102\2\2\u0607\u0608\7\u00de\2\2\u0608\u0609\7\u00ac\2\2\u0609\u0617"+
		"\5\u026a\u0136\2\u060a\u060b\7\u0102\2\2\u060b\u060c\7\u00de\2\2\u060c"+
		"\u060d\7\u0100\2\2\u060d\u0617\5\u026a\u0136\2\u060e\u060f\7\u0105\2\2"+
		"\u060f\u0610\7\u0191\2\2\u0610\u0611\5\u0210\u0109\2\u0611\u0612\7~\2"+
		"\2\u0612\u0613\5\u0210\u0109\2\u0613\u0617\3\2\2\2\u0614\u0615\7\u0109"+
		"\2\2\u0615\u0617\5\u026a\u0136\2\u0616\u05bc\3\2\2\2\u0616\u05bf\3\2\2"+
		"\2\u0616\u05c1\3\2\2\2\u0616\u05c8\3\2\2\2\u0616\u05ca\3\2\2\2\u0616\u05cc"+
		"\3\2\2\2\u0616\u05ce\3\2\2\2\u0616\u05d1\3\2\2\2\u0616\u05d5\3\2\2\2\u0616"+
		"\u05d8\3\2\2\2\u0616\u05db\3\2\2\2\u0616\u05df\3\2\2\2\u0616\u05e1\3\2"+
		"\2\2\u0616\u05e7\3\2\2\2\u0616\u05ee\3\2\2\2\u0616\u05f2\3\2\2\2\u0616"+
		"\u05f4\3\2\2\2\u0616\u05f6\3\2\2\2\u0616\u05f8\3\2\2\2\u0616\u05fa\3\2"+
		"\2\2\u0616\u05fc\3\2\2\2\u0616\u05fe\3\2\2\2\u0616\u0602\3\2\2\2\u0616"+
		"\u0606\3\2\2\2\u0616\u060a\3\2\2\2\u0616\u060e\3\2\2\2\u0616\u0614\3\2"+
		"\2\2\u0617O\3\2\2\2\u0618\u0619\7\u00db\2\2\u0619\u061a\5\u0210\u0109"+
		"\2\u061a\u061b\5\u01ee\u00f8\2\u061bQ\3\2\2\2\u061c\u061e\7\u00b9\2\2"+
		"\u061d\u061c\3\2\2\2\u061d\u061e\3\2\2\2\u061e\u061f\3\2\2\2\u061f\u0620"+
		"\7~\2\2\u0620\u0623\5\u0210\u0109\2\u0621\u0624\5\u01ee\u00f8\2\u0622"+
		"\u0624\5\u01ec\u00f7\2\u0623\u0621\3\2\2\2\u0623\u0622\3\2\2\2\u0624S"+
		"\3\2\2\2\u0625\u0627\7\u0192\2\2\u0626\u0625\3\2\2\2\u0626\u0627\3\2\2"+
		"\2\u0627\u0628\3\2\2\2\u0628\u062a\7\u01af\2\2\u0629\u062b\5\u0198\u00cd"+
		"\2\u062a\u0629\3\2\2\2\u062a\u062b\3\2\2\2\u062b\u062d\3\2\2\2\u062c\u062e"+
		"\7\u01a4\2\2\u062d\u062c\3\2\2\2\u062d\u062e\3\2\2\2\u062e\u062f\3\2\2"+
		"\2\u062f\u0631\5\u026a\u0136\2\u0630\u0632\7\u024f\2\2\u0631\u0630\3\2"+
		"\2\2\u0631\u0632\3\2\2\2\u0632\u0653\3\2\2\2\u0633\u0638\5V,\2\u0634\u0635"+
		"\7\u0245\2\2\u0635\u0637\5V,\2\u0636\u0634\3\2\2\2\u0637\u063a\3\2\2\2"+
		"\u0638\u0636\3\2\2\2\u0638\u0639\3\2\2\2\u0639\u0654\3\2\2\2\u063a\u0638"+
		"\3\2\2\2\u063b\u063d\7\u00ca\2\2\u063c\u063e\7\u017e\2\2\u063d\u063c\3"+
		"\2\2\2\u063d\u063e\3\2\2\2\u063e\u063f\3\2\2\2\u063f\u0640\5\u0210\u0109"+
		"\2\u0640\u0641\7\u01b1\2\2\u0641\u0642\5\u0210\u0109\2\u0642\u0654\3\2"+
		"\2\2\u0643\u0654\5\u01f0\u00f9\2\u0644\u0654\5\u01ee\u00f8\2\u0645\u0646"+
		"\7\u00ca\2\2\u0646\u0647\7\u017f\2\2\u0647\u0648\5\u0210\u0109\2\u0648"+
		"\u0649\7\u01b1\2\2\u0649\u064a\5\u0210\u0109\2\u064a\u0654\3\2\2\2\u064b"+
		"\u064c\7\21\2\2\u064c\u064d\7\u00ae\2\2\u064d\u064e\5\u026a\u0136\2\u064e"+
		"\u064f\5\u01aa\u00d6\2\u064f\u0654\3\2\2\2\u0650\u0651\7B\2\2\u0651\u0652"+
		"\7\u00ae\2\2\u0652\u0654\5\u026a\u0136\2\u0653\u0633\3\2\2\2\u0653\u063b"+
		"\3\2\2\2\u0653\u0643\3\2\2\2\u0653\u0644\3\2\2\2\u0653\u0645\3\2\2\2\u0653"+
		"\u064b\3\2\2\2\u0653\u0650\3\2\2\2\u0654U\3\2\2\2\u0655\u0657\7\7\2\2"+
		"\u0656\u0658\7\u017e\2\2\u0657\u0656\3\2\2\2\u0657\u0658\3\2\2\2\u0658"+
		"\u065a\3\2\2\2\u0659\u065b\5\u019a\u00ce\2\u065a\u0659\3\2\2\2\u065a\u065b"+
		"\3\2\2\2\u065b\u065c\3\2\2\2\u065c\u06c4\5\u01c8\u00e5\2\u065d\u065f\7"+
		"I\2\2\u065e\u0660\7\u017e\2\2\u065f\u065e\3\2\2\2\u065f\u0660\3\2\2\2"+
		"\u0660\u0662\3\2\2\2\u0661\u0663\5\u0198\u00cd\2\u0662\u0661\3\2\2\2\u0662"+
		"\u0663\3\2\2\2\u0663\u0664\3\2\2\2\u0664\u0666\5\u0210\u0109\2\u0665\u0667"+
		"\5\u01f8\u00fd\2\u0666\u0665\3\2\2\2\u0666\u0667\3\2\2\2\u0667\u06c4\3"+
		"\2\2\2\u0668\u066a\7\f\2\2\u0669\u066b\7\u017e\2\2\u066a\u0669\3\2\2\2"+
		"\u066a\u066b\3\2\2\2\u066b\u066c\3\2\2\2\u066c\u066d\5\u0210\u0109\2\u066d"+
		"\u066e\5X-\2\u066e\u06c4\3\2\2\2\u066f\u0670\7\7\2\2\u0670\u0673\5\u01cc"+
		"\u00e7\2\u0671\u0672\7\u01a0\2\2\u0672\u0674\7\u0114\2\2\u0673\u0671\3"+
		"\2\2\2\u0673\u0674\3\2\2\2\u0674\u06c4\3\2\2\2\u0675\u06c4\5`\61\2\u0676"+
		"\u06c4\5b\62\2\u0677\u0678\t\24\2\2\u0678\u067c\7\u0106\2\2\u0679\u067d"+
		"\5\u026a\u0136\2\u067a\u067d\7\u0170\2\2\u067b\u067d\7\u01b6\2\2\u067c"+
		"\u0679\3\2\2\2\u067c\u067a\3\2\2\2\u067c\u067b\3\2\2\2\u067c\u067d\3\2"+
		"\2\2\u067d\u06c4\3\2\2\2\u067e\u067f\7K\2\2\u067f\u0680\t\25\2\2\u0680"+
		"\u0681\7\u0106\2\2\u0681\u06c4\5\u026a\u0136\2\u0682\u0683\t\24\2\2\u0683"+
		"\u0684\7\u00d9\2\2\u0684\u06c4\5\u026a\u0136\2\u0685\u0686\7K\2\2\u0686"+
		"\u0687\t\25\2\2\u0687\u0688\7\u00d9\2\2\u0688\u06c4\5\u026a\u0136\2\u0689"+
		"\u068a\t\24\2\2\u068a\u068b\7\u0144\2\2\u068b\u068c\7\u0082\2\2\u068c"+
		"\u06c4\7\u00e0\2\2\u068d\u068f\7\u0098\2\2\u068e\u068d\3\2\2\2\u068e\u068f"+
		"\3\2\2\2\u068f\u0690\3\2\2\2\u0690\u0691\7\\\2\2\u0691\u0692\7\u0144\2"+
		"\2\u0692\u0693\7\u0082\2\2\u0693\u06c4\7\u00e0\2\2\u0694\u0695\7\"\2\2"+
		"\u0695\u0696\7\u01a3\2\2\u0696\u06c4\5\u026a\u0136\2\u0697\u0698\7\u00e6"+
		"\2\2\u0698\u0699\7\u011f\2\2\u0699\u06c4\t\26\2\2\u069a\u069b\7\u00e6"+
		"\2\2\u069b\u069c\7\u01bc\2\2\u069c\u06c4\7\u00a0\2\2\u069d\u069e\7\u00e6"+
		"\2\2\u069e\u06c4\t\27\2\2\u069f\u06a0\7\u00e6\2\2\u06a0\u06c4\5\u01dc"+
		"\u00ef\2\u06a1\u06a2\7\u00ce\2\2\u06a2\u06c4\5\u01d8\u00ed\2\u06a3\u06c4"+
		"\5\u01bc\u00df\2\u06a4\u06a5\7s\2\2\u06a5\u06c4\5\u026a\u0136\2\u06a6"+
		"\u06a7\7\u0098\2\2\u06a7\u06a8\7s\2\2\u06a8\u06c4\5\u026a\u0136\2\u06a9"+
		"\u06aa\7\u009e\2\2\u06aa\u06c4\5\u026a\u0136\2\u06ab\u06ac\7\u01a0\2\2"+
		"\u06ac\u06c4\7\u009e\2\2\u06ad\u06c4\5\u01ec\u00f7\2\u06ae\u06af\7\u00e6"+
		"\2\2\u06af\u06c4\5\u01e8\u00f5\2\u06b0\u06b1\7\u00cd\2\2\u06b1\u06b8\7"+
		"h\2\2\u06b2\u06b9\7\u0187\2\2\u06b3\u06b9\7\u0160\2\2\u06b4\u06b9\7\u0099"+
		"\2\2\u06b5\u06b6\7\u01b7\2\2\u06b6\u06b7\7q\2\2\u06b7\u06b9\5\u0210\u0109"+
		"\2\u06b8\u06b2\3\2\2\2\u06b8\u06b3\3\2\2\2\u06b8\u06b4\3\2\2\2\u06b8\u06b5"+
		"\3\2\2\2\u06b9\u06c4\3\2\2\2\u06ba\u06bb\7\f\2\2\u06bb\u06bc\7\u017f\2"+
		"\2\u06bc\u06be\5\u0210\u0109\2\u06bd\u06bf\5d\63\2\u06be\u06bd\3\2\2\2"+
		"\u06be\u06bf\3\2\2\2\u06bf\u06c1\3\2\2\2\u06c0\u06c2\5f\64\2\u06c1\u06c0"+
		"\3\2\2\2\u06c1\u06c2\3\2\2\2\u06c2\u06c4\3\2\2\2\u06c3\u0655\3\2\2\2\u06c3"+
		"\u065d\3\2\2\2\u06c3\u0668\3\2\2\2\u06c3\u066f\3\2\2\2\u06c3\u0675\3\2"+
		"\2\2\u06c3\u0676\3\2\2\2\u06c3\u0677\3\2\2\2\u06c3\u067e\3\2\2\2\u06c3"+
		"\u0682\3\2\2\2\u06c3\u0685\3\2\2\2\u06c3\u0689\3\2\2\2\u06c3\u068e\3\2"+
		"\2\2\u06c3\u0694\3\2\2\2\u06c3\u0697\3\2\2\2\u06c3\u069a\3\2\2\2\u06c3"+
		"\u069d\3\2\2\2\u06c3\u069f\3\2\2\2\u06c3\u06a1\3\2\2\2\u06c3\u06a3\3\2"+
		"\2\2\u06c3\u06a4\3\2\2\2\u06c3\u06a6\3\2\2\2\u06c3\u06a9\3\2\2\2\u06c3"+
		"\u06ab\3\2\2\2\u06c3\u06ad\3\2\2\2\u06c3\u06ae\3\2\2\2\u06c3\u06b0\3\2"+
		"\2\2\u06c3\u06ba\3\2\2\2\u06c4W\3\2\2\2\u06c5\u06c6\7\u00e6\2\2\u06c6"+
		"\u06c8\7\66\2\2\u06c7\u06c5\3\2\2\2\u06c7\u06c8\3\2\2\2\u06c8\u06c9\3"+
		"\2\2\2\u06c9\u06ca\7\u0109\2\2\u06ca\u06cc\5\u0224\u0113\2\u06cb\u06cd"+
		"\5\u01fa\u00fe\2\u06cc\u06cb\3\2\2\2\u06cc\u06cd\3\2\2\2\u06cd\u06d0\3"+
		"\2\2\2\u06ce\u06cf\7\u01b7\2\2\u06cf\u06d1\5\u0230\u0119\2\u06d0\u06ce"+
		"\3\2\2\2\u06d0\u06d1\3\2\2\2\u06d1\u06f2\3\2\2\2\u06d2\u06d3\7\7\2\2\u06d3"+
		"\u06f2\5Z.\2\u06d4\u06f2\5\u008cG\2\u06d5\u06f2\5\u008eH\2\u06d6\u06d9"+
		"\7\u00e6\2\2\u06d7\u06d9\7I\2\2\u06d8\u06d6\3\2\2\2\u06d8\u06d7\3\2\2"+
		"\2\u06d9\u06da\3\2\2\2\u06da\u06db\7\u01a0\2\2\u06db\u06f2\7\u01a1\2\2"+
		"\u06dc\u06dd\7I\2\2\u06dd\u06df\7h\2\2\u06de\u06e0\5\u0198\u00cd\2\u06df"+
		"\u06de\3\2\2\2\u06df\u06e0\3\2\2\2\u06e0\u06f2\3\2\2\2\u06e1\u06e2\7\u00e6"+
		"\2\2\u06e2\u06f2\5\u01dc\u00ef\2\u06e3\u06e4\7\u00e6\2\2\u06e4\u06e5\7"+
		"\u00f2\2\2\u06e5\u06f2\5\u0150\u00a9\2\u06e6\u06e7\7\u00e6\2\2\u06e7\u06e8"+
		"\7\u00f5\2\2\u06e8\u06f2\5^\60\2\u06e9\u06ea\7\u00ce\2\2\u06ea\u06f2\5"+
		"\u01d8\u00ed\2\u06eb\u06f2\5\u01bc\u00df\2\u06ec\u06ee\5\\/\2\u06ed\u06ec"+
		"\3\2\2\2\u06ee\u06ef\3\2\2\2\u06ef\u06ed\3\2\2\2\u06ef\u06f0\3\2\2\2\u06f0"+
		"\u06f2\3\2\2\2\u06f1\u06c7\3\2\2\2\u06f1\u06d2\3\2\2\2\u06f1\u06d4\3\2"+
		"\2\2\u06f1\u06d5\3\2\2\2\u06f1\u06d8\3\2\2\2\u06f1\u06dc\3\2\2\2\u06f1"+
		"\u06e1\3\2\2\2\u06f1\u06e3\3\2\2\2\u06f1\u06e6\3\2\2\2\u06f1\u06e9\3\2"+
		"\2\2\u06f1\u06eb\3\2\2\2\u06f1\u06ed\3\2\2\2\u06f2Y\3\2\2\2\u06f3\u06f7"+
		"\7`\2\2\u06f4\u06f8\7\r\2\2\u06f5\u06f6\7\26\2\2\u06f6\u06f8\7\u0187\2"+
		"\2\u06f7\u06f4\3\2\2\2\u06f7\u06f5\3\2\2\2\u06f8\u06f9\3\2\2\2\u06f9\u06fa"+
		"\7\u0176\2\2\u06fa\u0703\7h\2\2\u06fb\u06fd\7\u024b\2\2\u06fc\u06fe\5"+
		"\u014e\u00a8\2\u06fd\u06fc\3\2\2\2\u06fe\u06ff\3\2\2\2\u06ff\u06fd\3\2"+
		"\2\2\u06ff\u0700\3\2\2\2\u0700\u0701\3\2\2\2\u0701\u0702\7\u024c\2\2\u0702"+
		"\u0704\3\2\2\2\u0703\u06fb\3\2\2\2\u0703\u0704\3\2\2\2\u0704[\3\2\2\2"+
		"\u0705\u0706\7\u00e6\2\2\u0706\u070a\7`\2\2\u0707\u070b\7\r\2\2\u0708"+
		"\u0709\7\26\2\2\u0709\u070b\7\u0187\2\2\u070a\u0707\3\2\2\2\u070a\u0708"+
		"\3\2\2\2\u070b\u0716\3\2\2\2\u070c\u070d\7\u00e6\2\2\u070d\u0716\5\u014e"+
		"\u00a8\2\u070e\u0713\7\u00cf\2\2\u070f\u0711\7\u01bc\2\2\u0710\u070f\3"+
		"\2\2\2\u0710\u0711\3\2\2\2\u0711\u0712\3\2\2\2\u0712\u0714\7\u0262\2\2"+
		"\u0713\u0710\3\2\2\2\u0713\u0714\3\2\2\2\u0714\u0716\3\2\2\2\u0715\u0705"+
		"\3\2\2\2\u0715\u070c\3\2\2\2\u0715\u070e\3\2\2\2\u0716]\3\2\2\2\u0717"+
		"\u0718\t\30\2\2\u0718_\3\2\2\2\u0719\u071a\7\u0115\2\2\u071a\u071b\7\u017f"+
		"\2\2\u071b\u071c\5\u026a\u0136\2\u071ca\3\2\2\2\u071d\u071e\7I\2\2\u071e"+
		"\u0720\7\u017f\2\2\u071f\u0721\5\u0198\u00cd\2\u0720\u071f\3\2\2\2\u0720"+
		"\u0721\3\2\2\2\u0721\u0722\3\2\2\2\u0722\u0724\5\u0210\u0109\2\u0723\u0725"+
		"\5\u01f8\u00fd\2\u0724\u0723\3\2\2\2\u0724\u0725\3\2\2\2\u0725c\3\2\2"+
		"\2\u0726\u0728\7\u01a0\2\2\u0727\u0726\3\2\2\2\u0727\u0728\3\2\2\2\u0728"+
		"\u0729\3\2\2\2\u0729\u072a\7\u0188\2\2\u072ae\3\2\2\2\u072b\u072c\7\u0198"+
		"\2\2\u072c\u072d\t\31\2\2\u072dg\3\2\2\2\u072e\u0732\7\31\2\2\u072f\u0730"+
		"\7\u00d1\2\2\u0730\u0732\7\u01a1\2\2\u0731\u072e\3\2\2\2\u0731\u072f\3"+
		"\2\2\2\u0732\u0733\3\2\2\2\u0733\u0734\7\u01a3\2\2\u0734\u0735\7\u01a1"+
		"\2\2\u0735\u0767\7v\2\2\u0736\u0737\7\u0105\2\2\u0737\u073c\5\u013a\u009e"+
		"\2\u0738\u0739\7\u0245\2\2\u0739\u073b\5\u013a\u009e\2\u073a\u0738\3\2"+
		"\2\2\u073b\u073e\3\2\2\2\u073c\u073a\3\2\2\2\u073c\u073d\3\2\2\2\u073d"+
		"\u0767\3\2\2\2\u073e\u073c\3\2\2\2\u073f\u0767\7\u00f7\2\2\u0740\u0767"+
		"\7k\2\2\u0741\u0767\7\u011c\2\2\u0742\u0767\7\u00ee\2\2\u0743\u0745\7"+
		"\u01a0\2\2\u0744\u0743\3\2\2\2\u0744\u0745\3\2\2\2\u0745\u0746\3\2\2\2"+
		"\u0746\u0767\7\u0081\2\2\u0747\u0749\7W\2\2\u0748\u0747\3\2\2\2\u0748"+
		"\u0749\3\2\2\2\u0749\u074a\3\2\2\2\u074a\u074b\7\u00e0\2\2\u074b\u0767"+
		"\t\32\2\2\u074c\u074d\7\u00ab\2\2\u074d\u0767\t\33\2\2\u074e\u074f\7\60"+
		"\2\2\u074f\u0767\5\u023e\u0120\2\u0750\u0751\7\u00d8\2\2\u0751\u0767\5"+
		"\u023e\u0120\2\u0752\u0753\7\u00fa\2\2\u0753\u0767\5\u026a\u0136\2\u0754"+
		"\u0758\7\u00e6\2\2\u0755\u0756\5\u0210\u0109\2\u0756\u0757\7\u0253\2\2"+
		"\u0757\u0759\3\2\2\2\u0758\u0755\3\2\2\2\u0758\u0759\3\2\2\2\u0759\u075a"+
		"\3\2\2\2\u075a\u075f\5\u0210\u0109\2\u075b\u075c\t\34\2\2\u075c\u0760"+
		"\5\u010c\u0087\2\u075d\u075e\7\u0193\2\2\u075e\u0760\7\63\2\2\u075f\u075b"+
		"\3\2\2\2\u075f\u075d\3\2\2\2\u0760\u0767\3\2\2\2\u0761\u0762\7~\2\2\u0762"+
		"\u0767\5\u0210\u0109\2\u0763\u0767\7\u01bb\2\2\u0764\u0765\7\u0176\2\2"+
		"\u0765\u0767\5j\66\2\u0766\u0731\3\2\2\2\u0766\u0736\3\2\2\2\u0766\u073f"+
		"\3\2\2\2\u0766\u0740\3\2\2\2\u0766\u0741\3\2\2\2\u0766\u0742\3\2\2\2\u0766"+
		"\u0744\3\2\2\2\u0766\u0748\3\2\2\2\u0766\u074c\3\2\2\2\u0766\u074e\3\2"+
		"\2\2\u0766\u0750\3\2\2\2\u0766\u0752\3\2\2\2\u0766\u0754\3\2\2\2\u0766"+
		"\u0761\3\2\2\2\u0766\u0763\3\2\2\2\u0766\u0764\3\2\2\2\u0767i\3\2\2\2"+
		"\u0768\u076b\5\u0146\u00a4\2\u0769\u076a\7\u0245\2\2\u076a\u076c\5\u0146"+
		"\u00a4\2\u076b\u0769\3\2\2\2\u076b\u076c\3\2\2\2\u076ck\3\2\2\2\u076d"+
		"\u076f\7q\2\2\u076e\u0770\5\u0198\u00cd\2\u076f\u076e\3\2\2\2\u076f\u0770"+
		"\3\2\2\2\u0770\u0771\3\2\2\2\u0771\u0772\5\u026a\u0136\2\u0772\u0773\5"+
		"n8\2\u0773\u0785\3\2\2\2\u0774\u0775\7q\2\2\u0775\u0776\7\u0170\2\2\u0776"+
		"\u0777\7\u0197\2\2\u0777\u0778\7\u00fe\2\2\u0778\u077c\5\u0210\u0109\2"+
		"\u0779\u077a\7\u00a9\2\2\u077a\u077b\7\26\2\2\u077b\u077d\5\u02b6\u015c"+
		"\2\u077c\u0779\3\2\2\2\u077c\u077d\3\2\2\2\u077d\u077e\3\2\2\2\u077e\u077f"+
		"\7\u00e6\2\2\u077f\u0780\7\u00fe\2\2\u0780\u0782\5\u0210\u0109\2\u0781"+
		"\u0783\7\u009b\2\2\u0782\u0781\3\2\2\2\u0782\u0783\3\2\2\2\u0783\u0785"+
		"\3\2\2\2\u0784\u076d\3\2\2\2\u0784\u0774\3\2\2\2\u0785m\3\2\2\2\u0786"+
		"\u07ae\5\u01ee\u00f8\2\u0787\u0788\7\21\2\2\u0788\u0789\7\u00ae\2\2\u0789"+
		"\u07ae\5\u026a\u0136\2\u078a\u078b\7A\2\2\u078b\u078c\7\u01a3\2\2\u078c"+
		"\u078d\7V\2\2\u078d\u07ae\5\u026a\u0136\2\u078e\u0790\7\f\2\2\u078f\u0791"+
		"\7\u017e\2\2\u0790\u078f\3\2\2\2\u0790\u0791\3\2\2\2\u0791\u0793\3\2\2"+
		"\2\u0792\u0794\5\u0154\u00ab\2\u0793\u0792\3\2\2\2\u0793\u0794\3\2\2\2"+
		"\u0794\u0795\3\2\2\2\u0795\u0796\7\u0262\2\2\u0796\u0797\7\u00e6\2\2\u0797"+
		"\u0798\7\u00f2\2\2\u0798\u07ae\5\u0150\u00a9\2\u0799\u079a\7\u00ce\2\2"+
		"\u079a\u079b\7\u024b\2\2\u079b\u079c\5\u02b6\u015c\2\u079c\u079d\7\u024c"+
		"\2\2\u079d\u07ae\3\2\2\2\u079e\u079f\7\u00e6\2\2\u079f\u07a0\7\u00fe\2"+
		"\2\u07a0\u07ae\5\u0210\u0109\2\u07a1\u07a2\7\u00e6\2\2\u07a2\u07a3\7\u024b"+
		"\2\2\u07a3\u07a8\5\u00a8U\2\u07a4\u07a5\7\u0245\2\2\u07a5\u07a7\5\u00a8"+
		"U\2\u07a6\u07a4\3\2\2\2\u07a7\u07aa\3\2\2\2\u07a8\u07a6\3\2\2\2\u07a8"+
		"\u07a9\3\2\2\2\u07a9\u07ab\3\2\2\2\u07aa\u07a8\3\2\2\2\u07ab\u07ac\7\u024c"+
		"\2\2\u07ac\u07ae\3\2\2\2\u07ad\u0786\3\2\2\2\u07ad\u0787\3\2\2\2\u07ad"+
		"\u078a\3\2\2\2\u07ad\u078e\3\2\2\2\u07ad\u0799\3\2\2\2\u07ad\u079e\3\2"+
		"\2\2\u07ad\u07a1\3\2\2\2\u07aeo\3\2\2\2\u07af\u07b0\7\u0187\2\2\u07b0"+
		"\u07b4\7\u00b8\2\2\u07b1\u07b2\7\u0191\2\2\u07b2\u07b3\t\35\2\2\u07b3"+
		"\u07b5\5\u02b6\u015c\2\u07b4\u07b1\3\2\2\2\u07b4\u07b5\3\2\2\2\u07b5\u07b9"+
		"\3\2\2\2\u07b6\u07b7\7\u0197\2\2\u07b7\u07b8\7\u00db\2\2\u07b8\u07ba\5"+
		"\u02b6\u015c\2\u07b9\u07b6\3\2\2\2\u07b9\u07ba\3\2\2\2\u07ba\u07bb\3\2"+
		"\2\2\u07bb\u07bc\5r:\2\u07bcq\3\2\2\2\u07bd\u07c3\7\u0194\2\2\u07be\u07c0"+
		"\7\u00d2\2\2\u07bf\u07c1\5t;\2\u07c0\u07bf\3\2\2\2\u07c0\u07c1\3\2\2\2"+
		"\u07c1\u07c3\3\2\2\2\u07c2\u07bd\3\2\2\2\u07c2\u07be\3\2\2\2\u07c3\u07fb"+
		"\3\2\2\2\u07c4\u07c9\5\u01f2\u00fa\2\u07c5\u07c6\7\u0245\2\2\u07c6\u07c8"+
		"\5\u01f2\u00fa\2\u07c7\u07c5\3\2\2\2\u07c8\u07cb\3\2\2\2\u07c9\u07c7\3"+
		"\2\2\2\u07c9\u07ca\3\2\2\2\u07ca\u07cc\3\2\2\2\u07cb\u07c9\3\2\2\2\u07cc"+
		"\u07cd\7\u01a3\2\2\u07cd\u07ce\7\u00fd\2\2\u07ce\u07fc\3\2\2\2\u07cf\u07d4"+
		"\5\u01f4\u00fb\2\u07d0\u07d1\7\u0245\2\2\u07d1\u07d3\5\u01f4\u00fb\2\u07d2"+
		"\u07d0\3\2\2\2\u07d3\u07d6\3\2\2\2\u07d4\u07d2\3\2\2\2\u07d4\u07d5\3\2"+
		"\2\2\u07d5\u07dc\3\2\2\2\u07d6\u07d4\3\2\2\2\u07d7\u07d9\7\u0170\2\2\u07d8"+
		"\u07da\7\u00b8\2\2\u07d9\u07d8\3\2\2\2\u07d9\u07da\3\2\2\2\u07da\u07dc"+
		"\3\2\2\2\u07db\u07cf\3\2\2\2\u07db\u07d7\3\2\2\2\u07dc\u07dd\3\2\2\2\u07dd"+
		"\u07de\7\u01a3\2\2\u07de\u07fc\7\u00e2\2\2\u07df\u07e5\7T\2\2\u07e0\u07e2"+
		"\7\u0170\2\2\u07e1\u07e3\7\u00b8\2\2\u07e2\u07e1\3\2\2\2\u07e2\u07e3\3"+
		"\2\2\2\u07e3\u07e5\3\2\2\2\u07e4\u07df\3\2\2\2\u07e4\u07e0\3\2\2\2\u07e5"+
		"\u07e6\3\2\2\2\u07e6\u07e7\7\u01a3\2\2\u07e7\u07fc\7_\2\2\u07e8\u07ef"+
		"\7\u021d\2\2\u07e9\u07ef\7\u0180\2\2\u07ea\u07ec\7\u0170\2\2\u07eb\u07ed"+
		"\7\u00b8\2\2\u07ec\u07eb\3\2\2\2\u07ec\u07ed\3\2\2\2\u07ed\u07ef\3\2\2"+
		"\2\u07ee\u07e8\3\2\2\2\u07ee\u07e9\3\2\2\2\u07ee\u07ea\3\2\2\2\u07ef\u07f0"+
		"\3\2\2\2\u07f0\u07f1\7\u01a3\2\2\u07f1\u07fc\7\u00dc\2\2\u07f2\u07f8\7"+
		"\u021d\2\2\u07f3\u07f5\7\u0170\2\2\u07f4\u07f6\7\u00b8\2\2\u07f5\u07f4"+
		"\3\2\2\2\u07f5\u07f6\3\2\2\2\u07f6\u07f8\3\2\2\2\u07f7\u07f2\3\2\2\2\u07f7"+
		"\u07f3\3\2\2\2\u07f8\u07f9\3\2\2\2\u07f9\u07fa\7\u01a3\2\2\u07fa\u07fc"+
		"\7\u010a\2\2\u07fb\u07c4\3\2\2\2\u07fb\u07db\3\2\2\2\u07fb\u07e4\3\2\2"+
		"\2\u07fb\u07ee\3\2\2\2\u07fb\u07f7\3\2\2\2\u07fc\u07ff\3\2\2\2\u07fd\u0800"+
		"\5\u0126\u0094\2\u07fe\u0800\5\u0128\u0095\2\u07ff\u07fd\3\2\2\2\u07ff"+
		"\u07fe\3\2\2\2\u0800s\3\2\2\2\u0801\u0802\7\u0194\2\2\u0802\u0803\7\u00a3"+
		"\2\2\u0803\u0804\7\u0191\2\2\u0804u\3\2\2\2\u0805\u0807\7\u00e1\2\2\u0806"+
		"\u0808\5\u0198\u00cd\2\u0807\u0806\3\2\2\2\u0807\u0808\3\2\2\2\u0808\u0809"+
		"\3\2\2\2\u0809\u0819\5\u026a\u0136\2\u080a\u0813\5\u014e\u00a8\2\u080b"+
		"\u0810\7\u00cf\2\2\u080c\u080e\7\u01bc\2\2\u080d\u080c\3\2\2\2\u080d\u080e"+
		"\3\2\2\2\u080e\u080f\3\2\2\2\u080f\u0811\5\u0150\u00a9\2\u0810\u080d\3"+
		"\2\2\2\u0810\u0811\3\2\2\2\u0811\u0813\3\2\2\2\u0812\u080a\3\2\2\2\u0812"+
		"\u080b\3\2\2\2\u0813\u0816\3\2\2\2\u0814\u0812\3\2\2\2\u0814\u0815\3\2"+
		"\2\2\u0815\u081a\3\2\2\2\u0816\u0814\3\2\2\2\u0817\u081a\5\u01f0\u00f9"+
		"\2\u0818\u081a\5\u01ee\u00f8\2\u0819\u0814\3\2\2\2\u0819\u0817\3\2\2\2"+
		"\u0819\u0818\3\2\2\2\u081aw\3\2\2\2\u081b\u081d\7\u008c\2\2\u081c\u081b"+
		"\3\2\2\2\u081c\u081d\3\2\2\2\u081d\u081e\3\2\2\2\u081e\u0820\7\u011a\2"+
		"\2\u081f\u0821\5\u0198\u00cd\2\u0820\u081f\3\2\2\2\u0820\u0821\3\2\2\2"+
		"\u0821\u0822\3\2\2\2\u0822\u0832\5\u026a\u0136\2\u0823\u0825\7\f\2\2\u0824"+
		"\u0826\7\u017e\2\2\u0825\u0824\3\2\2\2\u0825\u0826\3\2\2\2\u0826\u0827"+
		"\3\2\2\2\u0827\u082a\5\u026a\u0136\2\u0828\u082b\5\u008cG\2\u0829\u082b"+
		"\5\u008eH\2\u082a\u0828\3\2\2\2\u082a\u0829\3\2\2\2\u082b\u0833\3\2\2"+
		"\2\u082c\u0833\5\u01f0\u00f9\2\u082d\u0833\5\u01ee\u00f8\2\u082e\u082f"+
		"\7\u00e6\2\2\u082f\u0833\5\u01dc\u00ef\2\u0830\u0831\7\u00ce\2\2\u0831"+
		"\u0833\5\u01d8\u00ed\2\u0832\u0823\3\2\2\2\u0832\u082c\3\2\2\2\u0832\u082d"+
		"\3\2\2\2\u0832\u082e\3\2\2\2\u0832\u0830\3\2\2\2\u0833y\3\2\2\2\u0834"+
		"\u0835\7P\2\2\u0835\u0836\7\u0106\2\2\u0836\u0837\5\u0210\u0109\2\u0837"+
		"\u0838\5|?\2\u0838{\3\2\2\2\u0839\u0841\7D\2\2\u083a\u083c\7K\2\2\u083b"+
		"\u083d\t\25\2\2\u083c\u083b\3\2\2\2\u083c\u083d\3\2\2\2\u083d\u0841\3"+
		"\2\2\2\u083e\u0841\5\u01ec\u00f7\2\u083f\u0841\5\u01ee\u00f8\2\u0840\u0839"+
		"\3\2\2\2\u0840\u083a\3\2\2\2\u0840\u083e\3\2\2\2\u0840\u083f\3\2\2\2\u0841"+
		"}\3\2\2\2\u0842\u0843\7\u0109\2\2\u0843\u0866\5\u026a\u0136\2\u0844\u0867"+
		"\5\u01f0\u00f9\2\u0845\u0867\5\u01ee\u00f8\2\u0846\u0847\7\7\2\2\u0847"+
		"\u0849\7\u0117\2\2\u0848\u084a\5\u019a\u00ce\2\u0849\u0848\3\2\2\2\u0849"+
		"\u084a\3\2\2\2\u084a\u084b\3\2\2\2\u084b\u084e\5\u0146\u00a4\2\u084c\u084d"+
		"\t\36\2\2\u084d\u084f\5\u0146\u00a4\2\u084e\u084c\3\2\2\2\u084e\u084f"+
		"\3\2\2\2\u084f\u0867\3\2\2\2\u0850\u0851\7\u00ca\2\2\u0851\u0852\7\22"+
		"\2\2\u0852\u0853\5\u0210\u0109\2\u0853\u0854\7\u01b1\2\2\u0854\u0856\5"+
		"\u0210\u0109\2\u0855\u0857\5\u01f8\u00fd\2\u0856\u0855\3\2\2\2\u0856\u0857"+
		"\3\2\2\2\u0857\u0867\3\2\2\2\u0858\u0859\7\u00ca\2\2\u0859\u085a\7\u0117"+
		"\2\2\u085a\u085b\5\u0146\u00a4\2\u085b\u085c\7\u01b1\2\2\u085c\u085d\5"+
		"\u0146\u00a4\2\u085d\u0867\3\2\2\2\u085e\u0863\5\u008aF\2\u085f\u0860"+
		"\7\u0245\2\2\u0860\u0862\5\u008aF\2\u0861\u085f\3\2\2\2\u0862\u0865\3"+
		"\2\2\2\u0863\u0861\3\2\2\2\u0863\u0864\3\2\2\2\u0864\u0867\3\2\2\2\u0865"+
		"\u0863\3\2\2\2\u0866\u0844\3\2\2\2\u0866\u0845\3\2\2\2\u0866\u0846\3\2"+
		"\2\2\u0866\u0850\3\2\2\2\u0866\u0858\3\2\2\2\u0866\u085e\3\2\2\2\u0867"+
		"\177\3\2\2\2\u0868\u0869\7G\2\2\u0869\u087f\5\u026a\u0136\2\u086a\u0880"+
		"\5\u008cG\2\u086b\u0880\5\u008eH\2\u086c\u086d\t\37\2\2\u086d\u086e\7"+
		"\u01a0\2\2\u086e\u0880\7\u01a1\2\2\u086f\u0870\7\7\2\2\u0870\u0873\5\u00de"+
		"p\2\u0871\u0872\7\u01a0\2\2\u0872\u0874\7\u0114\2\2\u0873\u0871\3\2\2"+
		"\2\u0873\u0874\3\2\2\2\u0874\u0880\3\2\2\2\u0875\u0880\5b\62\2\u0876\u0877"+
		"\7\u00ca\2\2\u0877\u0878\7\u017f\2\2\u0878\u0879\5\u026a\u0136\2\u0879"+
		"\u087a\7\u01b1\2\2\u087a\u087b\5\u026a\u0136\2\u087b\u0880\3\2\2\2\u087c"+
		"\u0880\5`\61\2\u087d\u0880\5\u01ee\u00f8\2\u087e\u0880\5\u01f0\u00f9\2"+
		"\u087f\u086a\3\2\2\2\u087f\u086b\3\2\2\2\u087f\u086c\3\2\2\2\u087f\u086f"+
		"\3\2\2\2\u087f\u0875\3\2\2\2\u087f\u0876\3\2\2\2\u087f\u087c\3\2\2\2\u087f"+
		"\u087d\3\2\2\2\u087f\u087e\3\2\2\2\u0880\u0081\3\2\2\2\u0881\u0882\7\u00e4"+
		"\2\2\u0882\u0883\5\u0210\u0109\2\u0883\u0884\5\u0084C\2\u0884\u0083\3"+
		"\2\2\2\u0885\u0886\7\u0119\2\2\u0886\u0888\5\u0146\u00a4\2\u0887\u0885"+
		"\3\2\2\2\u0887\u0888\3\2\2\2\u0888\u0889\3\2\2\2\u0889\u088f\5\u01bc\u00df"+
		"\2\u088a\u088b\7\u0119\2\2\u088b\u088f\5\u0146\u00a4\2\u088c\u088f\5\u01ec"+
		"\u00f7\2\u088d\u088f\5\u01ee\u00f8\2\u088e\u0887\3\2\2\2\u088e\u088a\3"+
		"\2\2\2\u088e\u088c\3\2\2\2\u088e\u088d\3\2\2\2\u088f\u0085\3\2\2\2\u0890"+
		"\u0891\7\u0102\2\2\u0891\u08a0\7\u00de\2\2\u0892\u0893\t \2\2\u0893\u0896"+
		"\5\u026a\u0136\2\u0894\u0897\5\u01ee\u00f8\2\u0895\u0897\5\u01f0\u00f9"+
		"\2\u0896\u0894\3\2\2\2\u0896\u0895\3\2\2\2\u0897\u08a1\3\2\2\2\u0898\u0899"+
		"\7C\2\2\u0899\u089a\5\u026a\u0136\2\u089a\u089b\5\u01dc\u00ef\2\u089b"+
		"\u08a1\3\2\2\2\u089c\u089d\7(\2\2\u089d\u089e\5\u026a\u0136\2\u089e\u089f"+
		"\5\u0088E\2\u089f\u08a1\3\2\2\2\u08a0\u0892\3\2\2\2\u08a0\u0898\3\2\2"+
		"\2\u08a0\u089c\3\2\2\2\u08a1\u0087\3\2\2\2\u08a2\u08a3\t!\2\2\u08a3\u08a4"+
		"\7\u008a\2\2\u08a4\u08a5\7\u0191\2\2\u08a5\u08a6\5\u02b6\u015c\2\u08a6"+
		"\u08a7\7\u01bc\2\2\u08a7\u08ac\5\u026a\u0136\2\u08a8\u08a9\7\u0245\2\2"+
		"\u08a9\u08ab\5\u026a\u0136\2\u08aa\u08a8\3\2\2\2\u08ab\u08ae\3\2\2\2\u08ac"+
		"\u08aa\3\2\2\2\u08ac\u08ad\3\2\2\2\u08ad\u08c3\3\2\2\2\u08ae\u08ac\3\2"+
		"\2\2\u08af\u08b0\7\f\2\2\u08b0\u08b3\7\u008a\2\2\u08b1\u08b2\7\u0191\2"+
		"\2\u08b2\u08b4\5\u02b6\u015c\2\u08b3\u08b1\3\2\2\2\u08b3\u08b4\3\2\2\2"+
		"\u08b4\u08b5\3\2\2\2\u08b5\u08b6\7\u00cc\2\2\u08b6\u08b7\5\u026a\u0136"+
		"\2\u08b7\u08b8\7\u01bc\2\2\u08b8\u08b9\5\u026a\u0136\2\u08b9\u08c3\3\2"+
		"\2\2\u08ba\u08bb\7I\2\2\u08bb\u08be\7\u008a\2\2\u08bc\u08bd\7i\2\2\u08bd"+
		"\u08bf\7\u0130\2\2\u08be\u08bc\3\2\2\2\u08be\u08bf\3\2\2\2\u08bf\u08c0"+
		"\3\2\2\2\u08c0\u08c1\7\u0191\2\2\u08c1\u08c3\5\u02b6\u015c\2\u08c2\u08a2"+
		"\3\2\2\2\u08c2\u08af\3\2\2\2\u08c2\u08ba\3\2\2\2\u08c3\u0089\3\2\2\2\u08c4"+
		"\u08c5\7\7\2\2\u08c5\u08c6\7\22\2\2\u08c6\u08c7\5\u0210\u0109\2\u08c7"+
		"\u08c9\5\u0224\u0113\2\u08c8\u08ca\5\u01fa\u00fe\2\u08c9\u08c8\3\2\2\2"+
		"\u08c9\u08ca\3\2\2\2\u08ca\u08cc\3\2\2\2\u08cb\u08cd\5\u01f8\u00fd\2\u08cc"+
		"\u08cb\3\2\2\2\u08cc\u08cd\3\2\2\2\u08cd\u08e7\3\2\2\2\u08ce\u08cf\7I"+
		"\2\2\u08cf\u08d1\7\22\2\2\u08d0\u08d2\5\u0198\u00cd\2\u08d1\u08d0\3\2"+
		"\2\2\u08d1\u08d2\3\2\2\2\u08d2\u08d3\3\2\2\2\u08d3\u08d5\5\u0210\u0109"+
		"\2\u08d4\u08d6\5\u01f8\u00fd\2\u08d5\u08d4\3\2\2\2\u08d5\u08d6\3\2\2\2"+
		"\u08d6\u08e7\3\2\2\2\u08d7\u08d8\7\f\2\2\u08d8\u08d9\7\22\2\2\u08d9\u08dc"+
		"\5\u0210\u0109\2\u08da\u08db\7\u00e6\2\2\u08db\u08dd\7\66\2\2\u08dc\u08da"+
		"\3\2\2\2\u08dc\u08dd\3\2\2\2\u08dd\u08de\3\2\2\2\u08de\u08df\7\u0109\2"+
		"\2\u08df\u08e1\5\u0224\u0113\2\u08e0\u08e2\5\u01fa\u00fe\2\u08e1\u08e0"+
		"\3\2\2\2\u08e1\u08e2\3\2\2\2\u08e2\u08e4\3\2\2\2\u08e3\u08e5\5\u01f8\u00fd"+
		"\2\u08e4\u08e3\3\2\2\2\u08e4\u08e5\3\2\2\2\u08e5\u08e7\3\2\2\2\u08e6\u08c4"+
		"\3\2\2\2\u08e6\u08ce\3\2\2\2\u08e6\u08d7\3\2\2\2\u08e7\u008b\3\2\2\2\u08e8"+
		"\u08e9\7\u00e6\2\2\u08e9\u08ea\7\u0187\2\2\u08ea\u08eb\5\u0230\u0119\2"+
		"\u08eb\u008d\3\2\2\2\u08ec\u08ed\7I\2\2\u08ed\u08ee\7\u0187\2\2\u08ee"+
		"\u008f\3\2\2\2\u08ef\u08f1\7\u01b5\2\2\u08f0\u08ef\3\2\2\2\u08f0\u08f1"+
		"\3\2\2\2\u08f1\u08f2\3\2\2\2\u08f2\u08f4\7q\2\2\u08f3\u08f5\7\u015c\2"+
		"\2\u08f4\u08f3\3\2\2\2\u08f4\u08f5\3\2\2\2\u08f5\u08f7\3\2\2\2\u08f6\u08f8"+
		"\5\u019a\u00ce\2\u08f7\u08f6\3\2\2\2\u08f7\u08f8\3\2\2\2\u08f8\u08fa\3"+
		"\2\2\2\u08f9\u08fb\5\u0210\u0109\2\u08fa\u08f9\3\2\2\2\u08fa\u08fb\3\2"+
		"\2\2\u08fb\u08fc\3\2\2\2\u08fc\u08fe\7\u01a3\2\2\u08fd\u08ff\7\u01a4\2"+
		"\2\u08fe\u08fd\3\2\2\2\u08fe\u08ff\3\2\2\2\u08ff\u0900\3\2\2\2\u0900\u0901"+
		"\5\u026a\u0136\2\u0901\u0902\5\u0092J\2\u0902\u0091\3\2\2\2\u0903\u0904"+
		"\7\u01b7\2\2\u0904\u0906\5\u0210\u0109\2\u0905\u0903\3\2\2\2\u0905\u0906"+
		"\3\2\2\2\u0906\u0907\3\2\2\2\u0907\u0909\5\u0094K\2\u0908\u090a\5\u0096"+
		"L\2\u0909\u0908\3\2\2\2\u0909\u090a\3\2\2\2\u090a\u090c\3\2\2\2\u090b"+
		"\u090d\5\u01e2\u00f2\2\u090c\u090b\3\2\2\2\u090c\u090d\3\2\2\2\u090d\u090f"+
		"\3\2\2\2\u090e\u0910\5\u01e8\u00f5\2\u090f\u090e\3\2\2\2\u090f\u0910\3"+
		"\2\2\2\u0910\u0912\3\2\2\2\u0911\u0913\5\u0098M\2\u0912\u0911\3\2\2\2"+
		"\u0912\u0913\3\2\2\2\u0913\u0093\3\2\2\2\u0914\u0915\7\u024b\2\2\u0915"+
		"\u0916\5\u029a\u014e\2\u0916\u0917\7\u024c\2\2\u0917\u0095\3\2\2\2\u0918"+
		"\u0919\7n\2\2\u0919\u091a\7\u024b\2\2\u091a\u091f\5\u0210\u0109\2\u091b"+
		"\u091c\7\u0245\2\2\u091c\u091e\5\u0210\u0109\2\u091d\u091b\3\2\2\2\u091e"+
		"\u0921\3\2\2\2\u091f\u091d\3\2\2\2\u091f\u0920\3\2\2\2\u0920\u0922\3\2"+
		"\2\2\u0921\u091f\3\2\2\2\u0922\u0923\7\u024c\2\2\u0923\u0097\3\2\2\2\u0924"+
		"\u0925\7\u01ba\2\2\u0925\u0926\5\u0230\u0119\2\u0926\u0099\3\2\2\2\u0927"+
		"\u0929\7V\2\2\u0928\u092a\5\u019a\u00ce\2\u0929\u0928\3\2\2\2\u0929\u092a"+
		"\3\2\2\2\u092a\u092b\3\2\2\2\u092b\u092d\5\u0210\u0109\2\u092c\u092e\7"+
		"\u01bc\2\2\u092d\u092c\3\2\2\2\u092d\u092e\3\2\2\2\u092e\u0931\3\2\2\2"+
		"\u092f\u0930\7\u00db\2\2\u0930\u0932\5\u0210\u0109\2\u0931\u092f\3\2\2"+
		"\2\u0931\u0932\3\2\2\2\u0932\u0938\3\2\2\2\u0933\u0936\7\u0119\2\2\u0934"+
		"\u0937\5\u0210\u0109\2\u0935\u0937\5\u0146\u00a4\2\u0936\u0934\3\2\2\2"+
		"\u0936\u0935\3\2\2\2\u0937\u0939\3\2\2\2\u0938\u0933\3\2\2\2\u0938\u0939"+
		"\3\2\2\2\u0939\u093f\3\2\2\2\u093a\u093d\7\u0193\2\2\u093b\u093e\5\u0210"+
		"\u0109\2\u093c\u093e\5\u0146\u00a4\2\u093d\u093b\3\2\2\2\u093d\u093c\3"+
		"\2\2\2\u093e\u0940\3\2\2\2\u093f\u093a\3\2\2\2\u093f\u0940\3\2\2\2\u0940"+
		"\u0942\3\2\2\2\u0941\u0943\7\32\2\2\u0942\u0941\3\2\2\2\u0942\u0943\3"+
		"\2\2\2\u0943\u009b\3\2\2\2\u0944\u0945\7\u01a5\2\2\u0945\u0947\7\u00cc"+
		"\2\2\u0946\u0944\3\2\2\2\u0946\u0947\3\2\2\2\u0947\u0949\3\2\2\2\u0948"+
		"\u094a\7\u0108\2\2\u0949\u0948\3\2\2\2\u0949\u094a\3\2\2\2\u094a\u094c"+
		"\3\2\2\2\u094b\u094d\7\u00b9\2\2\u094c\u094b\3\2\2\2\u094c\u094d\3\2\2"+
		"\2\u094d\u094e\3\2\2\2\u094e\u094f\7~\2\2\u094f\u095a\5\u0210\u0109\2"+
		"\u0950\u0951\7d\2\2\u0951\u0954\5\u026a\u0136\2\u0952\u0953\7u\2\2\u0953"+
		"\u0955\5\u026a\u0136\2\u0954\u0952\3\2\2\2\u0954\u0955\3\2\2\2\u0955\u0958"+
		"\3\2\2\2\u0956\u0957\7\u0116\2\2\u0957\u0959\5\u026a\u0136\2\u0958\u0956"+
		"\3\2\2\2\u0958\u0959\3\2\2\2\u0959\u095b\3\2\2\2\u095a\u0950\3\2\2\2\u095a"+
		"\u095b\3\2\2\2\u095b\u009d\3\2\2\2\u095c\u095d\7P\2\2\u095d\u095e\7\u0106"+
		"\2\2\u095e\u095f\5\u0210\u0109\2\u095f\u0960\7\u01a3\2\2\u0960\u0975\5"+
		"\u0210\u0109\2\u0961\u0971\7\u01b9\2\2\u0962\u0963\5\u026a\u0136\2\u0963"+
		"\u0964\7\u0197\2\2\u0964\u0965\7\u024b\2\2\u0965\u096a\5\u0146\u00a4\2"+
		"\u0966\u0967\7\u0245\2\2\u0967\u0969\5\u0146\u00a4\2\u0968\u0966\3\2\2"+
		"\2\u0969\u096c\3\2\2\2\u096a\u0968\3\2\2\2\u096a\u096b\3\2\2\2\u096b\u096d"+
		"\3\2\2\2\u096c\u096a\3\2\2\2\u096d\u096f\7\u024c\2\2\u096e\u0970\7\u0173"+
		"\2\2\u096f\u096e\3\2\2\2\u096f\u0970\3\2\2\2\u0970\u0972\3\2\2\2\u0971"+
		"\u0962\3\2\2\2\u0972\u0973\3\2\2\2\u0973\u0971\3\2\2\2\u0973\u0974\3\2"+
		"\2\2\u0974\u0976\3\2\2\2\u0975\u0961\3\2\2\2\u0975\u0976\3\2\2\2\u0976"+
		"\u0977\3\2\2\2\u0977\u0978\7T\2\2\u0978\u0979\t\22\2\2\u0979\u097a\5\u0230"+
		"\u0119\2\u097a\u009f\3\2\2\2\u097b\u097c\7\u0109\2\2\u097c\u0a10\5\u026a"+
		"\u0136\2\u097d\u09c2\7\u0176\2\2\u097e\u0987\7\u024b\2\2\u097f\u0984\5"+
		"\u01c8\u00e5\2\u0980\u0981\7\u0245\2\2\u0981\u0983\5\u01c8\u00e5\2\u0982"+
		"\u0980\3\2\2\2\u0983\u0986\3\2\2\2\u0984\u0982\3\2\2\2\u0984\u0985\3\2"+
		"\2\2\u0985\u0988\3\2\2\2\u0986\u0984\3\2\2\2\u0987\u097f\3\2\2\2\u0987"+
		"\u0988\3\2\2\2\u0988\u0989\3\2\2\2\u0989\u09c3\7\u024c\2\2\u098a\u098b"+
		"\7N\2\2\u098b\u0994\7\u024b\2\2\u098c\u0991\5\u0146\u00a4\2\u098d\u098e"+
		"\7\u0245\2\2\u098e\u0990\5\u0146\u00a4\2\u098f\u098d\3\2\2\2\u0990\u0993"+
		"\3\2\2\2\u0991\u098f\3\2\2\2\u0991\u0992\3\2\2\2\u0992\u0995\3\2\2\2\u0993"+
		"\u0991\3\2\2\2\u0994\u098c\3\2\2\2\u0994\u0995\3\2\2\2\u0995\u0996\3\2"+
		"\2\2\u0996\u09c3\7\u024c\2\2\u0997\u0998\7\u00bf\2\2\u0998\u09a8\7\u024b"+
		"\2\2\u0999\u099a\7\u0216\2\2\u099a\u099b\7\u0242\2\2\u099b\u09a9\5\u0224"+
		"\u0113\2\u099c\u099d\7\u0215\2\2\u099d\u099e\7\u0242\2\2\u099e\u09a9\5"+
		"\u0210\u0109\2\u099f\u09a0\7\u015b\2\2\u09a0\u09a1\7\u0242\2\2\u09a1\u09a9"+
		"\5\u026a\u0136\2\u09a2\u09a3\7\u01c1\2\2\u09a3\u09a4\7\u0242\2\2\u09a4"+
		"\u09a9\5\u026a\u0136\2\u09a5\u09a6\7\u0214\2\2\u09a6\u09a7\7\u0242\2\2"+
		"\u09a7\u09a9\5\u026a\u0136\2\u09a8\u0999\3\2\2\2\u09a8\u099c\3\2\2\2\u09a8"+
		"\u099f\3\2\2\2\u09a8\u09a2\3\2\2\2\u09a8\u09a5\3\2\2\2\u09a8\u09a9\3\2"+
		"\2\2\u09a9\u09be\3\2\2\2\u09aa\u09ba\7\u0245\2\2\u09ab\u09ac\7\u0216\2"+
		"\2\u09ac\u09ad\7\u0242\2\2\u09ad\u09bb\5\u0224\u0113\2\u09ae\u09af\7\u0215"+
		"\2\2\u09af\u09b0\7\u0242\2\2\u09b0\u09bb\5\u0210\u0109\2\u09b1\u09b2\7"+
		"\u015b\2\2\u09b2\u09b3\7\u0242\2\2\u09b3\u09bb\5\u026a\u0136\2\u09b4\u09b5"+
		"\7\u01c1\2\2\u09b5\u09b6\7\u0242\2\2\u09b6\u09bb\5\u026a\u0136\2\u09b7"+
		"\u09b8\7\u0214\2\2\u09b8\u09b9\7\u0242\2\2\u09b9\u09bb\5\u026a\u0136\2"+
		"\u09ba\u09ab\3\2\2\2\u09ba\u09ae\3\2\2\2\u09ba\u09b1\3\2\2\2\u09ba\u09b4"+
		"\3\2\2\2\u09ba\u09b7\3\2\2\2\u09bb\u09bd\3\2\2\2\u09bc\u09aa\3\2\2\2\u09bd"+
		"\u09c0\3\2\2\2\u09be\u09bc\3\2\2\2\u09be\u09bf\3\2\2\2\u09bf\u09c1\3\2"+
		"\2\2\u09c0\u09be\3\2\2\2\u09c1\u09c3\7\u024c\2\2\u09c2\u097e\3\2\2\2\u09c2"+
		"\u098a\3\2\2\2\u09c2\u0997\3\2\2\2\u09c3\u0a11\3\2\2\2\u09c4\u09cc\7\u024b"+
		"\2\2\u09c5\u09c6\7\u01de\2\2\u09c6\u09c9\7\u0242\2\2\u09c7\u09ca\5\u0152"+
		"\u00aa\2\u09c8\u09ca\7\u021e\2\2\u09c9\u09c7\3\2\2\2\u09c9\u09c8\3\2\2"+
		"\2\u09ca\u09cb\3\2\2\2\u09cb\u09cd\7\u0245\2\2\u09cc\u09c5\3\2\2\2\u09cc"+
		"\u09cd\3\2\2\2\u09cd\u09ce\3\2\2\2\u09ce\u09cf\7v\2\2\u09cf\u09d0\7\u0242"+
		"\2\2\u09d0\u09d1\5\u026a\u0136\2\u09d1\u09d2\7\u0245\2\2\u09d2\u09d3\7"+
		"\u01fb\2\2\u09d3\u09d4\7\u0242\2\2\u09d4\u0a0b\5\u026a\u0136\2\u09d5\u0a07"+
		"\7\u0245\2\2\u09d6\u09d7\7\u0204\2\2\u09d7\u09d8\7\u0242\2\2\u09d8\u0a08"+
		"\5\u026a\u0136\2\u09d9\u09da\7\u020b\2\2\u09da\u09db\7\u0242\2\2\u09db"+
		"\u0a08\5\u026a\u0136\2\u09dc\u09dd\7\u021a\2\2\u09dd\u09de\7\u0242\2\2"+
		"\u09de\u0a08\5\u026a\u0136\2\u09df\u09e0\7\u021b\2\2\u09e0\u09e1\7\u0242"+
		"\2\2\u09e1\u0a08\5\u026a\u0136\2\u09e2\u09e3\7\u0172\2\2\u09e3\u09e4\7"+
		"\u0242\2\2\u09e4\u0a08\5\u026a\u0136\2\u09e5\u09e6\7\u01de\2\2\u09e6\u09e9"+
		"\7\u0242\2\2\u09e7\u09ea\5\u0152\u00aa\2\u09e8\u09ea\7\u021e\2\2\u09e9"+
		"\u09e7\3\2\2\2\u09e9\u09e8\3\2\2\2\u09ea\u0a08\3\2\2\2\u09eb\u0a08\7\u01fc"+
		"\2\2\u09ec\u09ed\7\u01bd\2\2\u09ed\u09ee\7\u0242\2\2\u09ee\u0a08\5\u0224"+
		"\u0113\2\u09ef\u09f0\7\u00f5\2\2\u09f0\u09f1\7\u0242\2\2\u09f1\u0a08\t"+
		"\30\2\2\u09f2\u09f3\7\u0167\2\2\u09f3\u09f4\7\u0242\2\2\u09f4\u0a08\5"+
		"\u0224\u0113\2\u09f5\u09f6\7\u01c2\2\2\u09f6\u09f7\7\u0242\2\2\u09f7\u0a08"+
		"\5\u0146\u00a4\2\u09f8\u09f9\7\u0200\2\2\u09f9\u09fa\7\u0242\2\2\u09fa"+
		"\u0a08\5\u0240\u0121\2\u09fb\u09fc\7\u0187\2\2\u09fc\u09fd\7\u0242\2\2"+
		"\u09fd\u0a08\5\u0230\u0119\2\u09fe\u09ff\7\u01cd\2\2\u09ff\u0a00\7\u0242"+
		"\2\2\u0a00\u0a08\5\u0224\u0113\2\u0a01\u0a02\7?\2\2\u0a02\u0a03\7\u0242"+
		"\2\2\u0a03\u0a08\5\u0146\u00a4\2\u0a04\u0a05\7\u01c3\2\2\u0a05\u0a06\7"+
		"\u0242\2\2\u0a06\u0a08\5\u0240\u0121\2\u0a07\u09d6\3\2\2\2\u0a07\u09d9"+
		"\3\2\2\2\u0a07\u09dc\3\2\2\2\u0a07\u09df\3\2\2\2\u0a07\u09e2\3\2\2\2\u0a07"+
		"\u09e5\3\2\2\2\u0a07\u09eb\3\2\2\2\u0a07\u09ec\3\2\2\2\u0a07\u09ef\3\2"+
		"\2\2\u0a07\u09f2\3\2\2\2\u0a07\u09f5\3\2\2\2\u0a07\u09f8\3\2\2\2\u0a07"+
		"\u09fb\3\2\2\2\u0a07\u09fe\3\2\2\2\u0a07\u0a01\3\2\2\2\u0a07\u0a04\3\2"+
		"\2\2\u0a08\u0a0a\3\2\2\2\u0a09\u09d5\3\2\2\2\u0a0a\u0a0d\3\2\2\2\u0a0b"+
		"\u0a09\3\2\2\2\u0a0b\u0a0c\3\2\2\2\u0a0c\u0a0e\3\2\2\2\u0a0d\u0a0b\3\2"+
		"\2\2\u0a0e\u0a0f\7\u024c\2\2\u0a0f\u0a11\3\2\2\2\u0a10\u097d\3\2\2\2\u0a10"+
		"\u09c4\3\2\2\2\u0a10\u0a11\3\2\2\2\u0a11\u00a1\3\2\2\2\u0a12\u0a13\7G"+
		"\2\2\u0a13\u0a15\5\u026a\u0136\2\u0a14\u0a16\7\u0176\2\2\u0a15\u0a14\3"+
		"\2\2\2\u0a15\u0a16\3\2\2\2\u0a16\u0a17\3\2\2\2\u0a17\u0a1e\5\u0224\u0113"+
		"\2\u0a18\u0a1d\5\u01fa\u00fe\2\u0a19\u0a1a\7\u0187\2\2\u0a1a\u0a1d\5\u0230"+
		"\u0119\2\u0a1b\u0a1d\5\u00dep\2\u0a1c\u0a18\3\2\2\2\u0a1c\u0a19\3\2\2"+
		"\2\u0a1c\u0a1b\3\2\2\2\u0a1d\u0a20\3\2\2\2\u0a1e\u0a1c\3\2\2\2\u0a1e\u0a1f"+
		"\3\2\2\2\u0a1f\u00a3\3\2\2\2\u0a20\u0a1e\3\2\2\2\u0a21\u0a23\7\u00e4\2"+
		"\2\u0a22\u0a24\5\u019a\u00ce\2\u0a23\u0a22\3\2\2\2\u0a23\u0a24\3\2\2\2"+
		"\u0a24\u0a25\3\2\2\2\u0a25\u0a28\5\u0210\u0109\2\u0a26\u0a27\7\u0109\2"+
		"\2\u0a27\u0a29\5\u0146\u00a4\2\u0a28\u0a26\3\2\2\2\u0a28\u0a29\3\2\2\2"+
		"\u0a29\u0a2c\3\2\2\2\u0a2a\u0a2b\7\u0119\2\2\u0a2b\u0a2d\5\u0146\u00a4"+
		"\2\u0a2c\u0a2a\3\2\2\2\u0a2c\u0a2d\3\2\2\2\u0a2d\u0a2e\3\2\2\2\u0a2e\u0a2f"+
		"\7\u0192\2\2\u0a2f\u0a30\7\66\2\2\u0a30\u0a31\7\u0121\2\2\u0a31\u0a33"+
		"\5\u0210\u0109\2\u0a32\u0a34\5\u01bc\u00df\2\u0a33\u0a32\3\2\2\2\u0a33"+
		"\u0a34\3\2\2\2\u0a34\u00a5\3\2\2\2\u0a35\u0a36\7\u0102\2\2\u0a36\u0a37"+
		"\7\u00de\2\2\u0a37\u0a38\7C\2\2\u0a38\u0a39\5\u026a\u0136\2\u0a39\u0a3a"+
		"\7\u024b\2\2\u0a3a\u0a3b\7\u0100\2\2\u0a3b\u0a3c\7\u0242\2\2\u0a3c\u0a41"+
		"\5\u026a\u0136\2\u0a3d\u0a3e\7\u0245\2\2\u0a3e\u0a40\5\u00a8U\2\u0a3f"+
		"\u0a3d\3\2\2\2\u0a40\u0a43\3\2\2\2\u0a41\u0a3f\3\2\2\2\u0a41\u0a42\3\2"+
		"\2\2\u0a42\u0a44\3\2\2\2\u0a43\u0a41\3\2\2\2\u0a44\u0a45\7\u024c\2\2\u0a45"+
		"\u00a7\3\2\2\2\u0a46\u0a47\5\u0210\u0109\2\u0a47\u0a48\7\u0242\2\2\u0a48"+
		"\u0a49\5\u0230\u0119\2\u0a49\u00a9\3\2\2\2\u0a4a\u0a4b\7\u0102\2\2\u0a4b"+
		"\u0a4c\7\u00de\2\2\u0a4c\u0a4d\7(\2\2\u0a4d\u0a4e\5\u026a\u0136\2\u0a4e"+
		"\u0a55\7\u024b\2\2\u0a4f\u0a50\7\u00ac\2\2\u0a50\u0a51\7\u0242\2\2\u0a51"+
		"\u0a56\5\u026a\u0136\2\u0a52\u0a53\7/\2\2\u0a53\u0a54\7\u0242\2\2\u0a54"+
		"\u0a56\5\u026a\u0136\2\u0a55\u0a4f\3\2\2\2\u0a55\u0a52\3\2\2\2\u0a56\u0a57"+
		"\3\2\2\2\u0a57\u0a58\7\u024c\2\2\u0a58\u00ab\3\2\2\2\u0a59\u0a5a\7\u0102"+
		"\2\2\u0a5a\u0a5b\7\u00de\2\2\u0a5b\u0a5c\7\u0100\2\2\u0a5c\u0a5d\5\u026a"+
		"\u0136\2\u0a5d\u0a63\7\u024b\2\2\u0a5e\u0a5f\7\u01dc\2\2\u0a5f\u0a60\7"+
		"\u0242\2\2\u0a60\u0a61\5\u026a\u0136\2\u0a61\u0a62\7\u0245\2\2\u0a62\u0a64"+
		"\3\2\2\2\u0a63\u0a5e\3\2\2\2\u0a63\u0a64\3\2\2\2\u0a64\u0a65\3\2\2\2\u0a65"+
		"\u0a66\7\u01e3\2\2\u0a66\u0a67\7\u0242\2\2\u0a67\u0a6c\5\u026a\u0136\2"+
		"\u0a68\u0a69\7\u0245\2\2\u0a69\u0a6a\7\u01dc\2\2\u0a6a\u0a6b\7\u0242\2"+
		"\2\u0a6b\u0a6d\5\u026a\u0136\2\u0a6c\u0a68\3\2\2\2\u0a6c\u0a6d\3\2\2\2"+
		"\u0a6d\u0a6e\3\2\2\2\u0a6e\u0a6f\7\u024c\2\2\u0a6f\u00ad\3\2\2\2\u0a70"+
		"\u0a71\7\u0102\2\2\u0a71\u0a72\7\u00de\2\2\u0a72\u0a73\7\u00ac\2\2\u0a73"+
		"\u0a74\5\u026a\u0136\2\u0a74\u0a75\7\u024b\2\2\u0a75\u0a76\7\u00f0\2\2"+
		"\u0a76\u0a77\7\u0242\2\2\u0a77\u0a78\5\u026a\u0136\2\u0a78\u0a79\7\u0245"+
		"\2\2\u0a79\u0a7a\7\u01d6\2\2\u0a7a\u0a7b\7\u0242\2\2\u0a7b\u0a7c\5\u026a"+
		"\u0136\2\u0a7c\u0a7d\7\u0245\2\2\u0a7d\u0a7e\7\u018d\2\2\u0a7e\u0a7f\7"+
		"\u0242\2\2\u0a7f\u0a80\5\u026a\u0136\2\u0a80\u0a86\7\u0245\2\2\u0a81\u0a82"+
		"\7\u01d9\2\2\u0a82\u0a83\7\u0242\2\2\u0a83\u0a84\5\u026a\u0136\2\u0a84"+
		"\u0a85\7\u0245\2\2\u0a85\u0a87\3\2\2\2\u0a86\u0a81\3\2\2\2\u0a86\u0a87"+
		"\3\2\2\2\u0a87\u0a88\3\2\2\2\u0a88\u0a89\7\u01e4\2\2\u0a89\u0a8a\7\u0242"+
		"\2\2\u0a8a\u0a8f\5\u026a\u0136\2\u0a8b\u0a8c\7\u0245\2\2\u0a8c\u0a8d\7"+
		"\u01d9\2\2\u0a8d\u0a8e\7\u0242\2\2\u0a8e\u0a90\5\u026a\u0136\2\u0a8f\u0a8b"+
		"\3\2\2\2\u0a8f\u0a90\3\2\2\2\u0a90\u0a91\3\2\2\2\u0a91\u0a92\7\u024c\2"+
		"\2\u0a92\u00af\3\2\2\2\u0a93\u0a95\7\u015b\2\2\u0a94\u0a96\5\u019a\u00ce"+
		"\2\u0a95\u0a94\3\2\2\2\u0a95\u0a96\3\2\2\2\u0a96\u0a97\3\2\2\2\u0a97\u0aa6"+
		"\5\u026a\u0136\2\u0a98\u0a99\7\u0193\2\2\u0a99\u0aa7\5\u026a\u0136\2\u0a9a"+
		"\u0aa3\7\u024b\2\2\u0a9b\u0aa0\5\u00b4[\2\u0a9c\u0a9d\7\u0245\2\2\u0a9d"+
		"\u0a9f\5\u00b4[\2\u0a9e\u0a9c\3\2\2\2\u0a9f\u0aa2\3\2\2\2\u0aa0\u0a9e"+
		"\3\2\2\2\u0aa0\u0aa1\3\2\2\2\u0aa1\u0aa4\3\2\2\2\u0aa2\u0aa0\3\2\2\2\u0aa3"+
		"\u0a9b\3\2\2\2\u0aa3\u0aa4\3\2\2\2\u0aa4\u0aa5\3\2\2\2\u0aa5\u0aa7\7\u024c"+
		"\2\2\u0aa6\u0a98\3\2\2\2\u0aa6\u0a9a\3\2\2\2\u0aa7\u00b1\3\2\2\2\u0aa8"+
		"\u0aa9\7\u015b\2\2\u0aa9\u0aaf\5\u026a\u0136\2\u0aaa\u0aab\7\u00c6\2\2"+
		"\u0aab\u0ab0\7\u0119\2\2\u0aac\u0ab0\5\u01ee\u00f8\2\u0aad\u0ab0\5\u01ec"+
		"\u00f7\2\u0aae\u0ab0\5\u01f0\u00f9\2\u0aaf\u0aaa\3\2\2\2\u0aaf\u0aac\3"+
		"\2\2\2\u0aaf\u0aad\3\2\2\2\u0aaf\u0aae\3\2\2\2\u0ab0\u00b3\3\2\2\2\u0ab1"+
		"\u0ab2\t\"\2\2\u0ab2\u0ab5\7\u0242\2\2\u0ab3\u0ab6\5\u0146\u00a4\2\u0ab4"+
		"\u0ab6\5\u0210\u0109\2\u0ab5\u0ab3\3\2\2\2\u0ab5\u0ab4\3\2\2\2\u0ab6\u0abb"+
		"\3\2\2\2\u0ab7\u0ab8\7\u01cb\2\2\u0ab8\u0ab9\7\u0242\2\2\u0ab9\u0abb\5"+
		"8\35\2\u0aba\u0ab1\3\2\2\2\u0aba\u0ab7\3\2\2\2\u0abb\u00b5\3\2\2\2\u0abc"+
		"\u0abd\7\u01b6\2\2\u0abd\u0abf\7\u008a\2\2\u0abe\u0ac0\5\u019a\u00ce\2"+
		"\u0abf\u0abe\3\2\2\2\u0abf\u0ac0\3\2\2\2\u0ac0\u0ac1\3\2\2\2\u0ac1\u0ac4"+
		"\7\u0191\2\2\u0ac2\u0ac5\5,\27\2\u0ac3\u0ac5\7\u01b6\2\2\u0ac4\u0ac2\3"+
		"\2\2\2\u0ac4\u0ac3\3\2\2\2\u0ac5\u0ac6\3\2\2\2\u0ac6\u0ac7\7\u00e4\2\2"+
		"\u0ac7\u0ac9\5\u0210\u0109\2\u0ac8\u0aca\5\u01bc\u00df\2\u0ac9\u0ac8\3"+
		"\2\2\2\u0ac9\u0aca\3\2\2\2\u0aca\u00b7\3\2\2\2\u0acb\u0acc\7\u01b6\2\2"+
		"\u0acc\u0acd\7\u008a\2\2\u0acd\u0ad0\7\u0191\2\2\u0ace\u0ad1\5,\27\2\u0acf"+
		"\u0ad1\7\u01b6\2\2\u0ad0\u0ace\3\2\2\2\u0ad0\u0acf\3\2\2\2\u0ad1\u0ad2"+
		"\3\2\2\2\u0ad2\u0ad3\7\u00e4\2\2\u0ad3\u0ad5\5\u0210\u0109\2\u0ad4\u0ad6"+
		"\5\u01bc\u00df\2\u0ad5\u0ad4\3\2\2\2\u0ad5\u0ad6\3\2\2\2\u0ad6\u00b9\3"+
		"\2\2\2\u0ad7\u0ae5\t\35\2\2\u0ad8\u0ae6\5\u00bc_\2\u0ad9\u0ada\5\u0210"+
		"\u0109\2\u0ada\u0adb\5\u01ee\u00f8\2\u0adb\u0ae6\3\2\2\2\u0adc\u0ade\5"+
		",\27\2\u0add\u0adf\7\u01bc\2\2\u0ade\u0add\3\2\2\2\u0ade\u0adf\3\2\2\2"+
		"\u0adf\u0ae1\3\2\2\2\u0ae0\u0ae2\5\u00e8u\2\u0ae1\u0ae0\3\2\2\2\u0ae2"+
		"\u0ae3\3\2\2\2\u0ae3\u0ae1\3\2\2\2\u0ae3\u0ae4\3\2\2\2\u0ae4\u0ae6\3\2"+
		"\2\2\u0ae5\u0ad8\3\2\2\2\u0ae5\u0ad9\3\2\2\2\u0ae5\u0adc\3\2\2\2\u0ae6"+
		"\u00bb\3\2\2\2\u0ae7\u0aea\5,\27\2\u0ae8\u0aea\7\u0170\2\2\u0ae9\u0ae7"+
		"\3\2\2\2\u0ae9\u0ae8\3\2\2\2\u0aea\u0aee\3\2\2\2\u0aeb\u0aec\7\u0197\2"+
		"\2\u0aec\u0aed\7\67\2\2\u0aed\u0aef\5\u0210\u0109\2\u0aee\u0aeb\3\2\2"+
		"\2\u0aee\u0aef\3\2\2\2\u0aef\u0af0\3\2\2\2\u0af0\u0af1\5\u00be`\2\u0af1"+
		"\u00bd\3\2\2\2\u0af2\u0af6\7\u00e6\2\2\u0af3\u0af4\5\u0210\u0109\2\u0af4"+
		"\u0af5\7\u0253\2\2\u0af5\u0af7\3\2\2\2\u0af6\u0af3\3\2\2\2\u0af6\u0af7"+
		"\3\2\2\2\u0af7\u0af8\3\2\2\2\u0af8\u0af9\5\u0210\u0109\2\u0af9\u0afa\t"+
		"\34\2\2\u0afa\u0afb\5\u010c\u0087\2\u0afb\u0b10\3\2\2\2\u0afc\u0b00\7"+
		"\u00e6\2\2\u0afd\u0afe\5\u0210\u0109\2\u0afe\u0aff\7\u0253\2\2\u0aff\u0b01"+
		"\3\2\2\2\u0b00\u0afd\3\2\2\2\u0b00\u0b01\3\2\2\2\u0b01\u0b02\3\2\2\2\u0b02"+
		"\u0b03\5\u0210\u0109\2\u0b03\u0b04\7\u0193\2\2\u0b04\u0b05\7\63\2\2\u0b05"+
		"\u0b10\3\2\2\2\u0b06\u0b0a\7\u00ce\2\2\u0b07\u0b08\5\u0210\u0109\2\u0b08"+
		"\u0b09\7\u0253\2\2\u0b09\u0b0b\3\2\2\2\u0b0a\u0b07\3\2\2\2\u0b0a\u0b0b"+
		"\3\2\2\2\u0b0b\u0b0c\3\2\2\2\u0b0c\u0b10\5\u0210\u0109\2\u0b0d\u0b0e\7"+
		"\u00ce\2\2\u0b0e\u0b10\7\u0170\2\2\u0b0f\u0af2\3\2\2\2\u0b0f\u0afc\3\2"+
		"\2\2\u0b0f\u0b06\3\2\2\2\u0b0f\u0b0d\3\2\2\2\u0b10\u00bf\3\2\2\2\u0b11"+
		"\u0b12\7\u0195\2\2\u0b12\u0b13\5\u00c2b\2\u0b13\u00c1\3\2\2\2\u0b14\u0b15"+
		"\5\u0210\u0109\2\u0b15\u0b16\5\u01ee\u00f8\2\u0b16\u0b1d\3\2\2\2\u0b17"+
		"\u0b18\5,\27\2\u0b18\u0b19\t\23\2\2\u0b19\u0b1a\7\u01b6\2\2\u0b1a\u0b1b"+
		"\5\u02b6\u015c\2\u0b1b\u0b1d\3\2\2\2\u0b1c\u0b14\3\2\2\2\u0b1c\u0b17\3"+
		"\2\2\2\u0b1d\u00c3\3\2\2\2\u0b1e\u0b1f\7\u00fe\2\2\u0b1f\u0b20\5\u0210"+
		"\u0109\2\u0b20\u0b21\5\u00c8e\2\u0b21\u00c5\3\2\2\2\u0b22\u0b23\7\u00a2"+
		"\2\2\u0b23\u0b40\5\u00dco\2\u0b24\u0b25\7\177\2\2\u0b25\u0b26\7\u009d"+
		"\2\2\u0b26\u0b40\7\u0262\2\2\u0b27\u0b28\t#\2\2\u0b28\u0b29\5\u026a\u0136"+
		"\2\u0b29\u0b2a\5\u0142\u00a2\2\u0b2a\u0b40\3\2\2\2\u0b2b\u0b2c\7\u0102"+
		"\2\2\u0b2c\u0b2d\7\u00de\2\2\u0b2d\u0b3a\7C\2\2\u0b2e\u0b2f\7\u0102\2"+
		"\2\u0b2f\u0b30\7\u00de\2\2\u0b30\u0b3a\7(\2\2\u0b31\u0b3a\7G\2\2\u0b32"+
		"\u0b3a\7\u00db\2\2\u0b33\u0b3a\7\u00e1\2\2\u0b34\u0b3a\7\u0109\2\2\u0b35"+
		"\u0b37\7\u008c\2\2\u0b36\u0b35\3\2\2\2\u0b36\u0b37\3\2\2\2\u0b37\u0b38"+
		"\3\2\2\2\u0b38\u0b3a\7\u011a\2\2\u0b39\u0b2b\3\2\2\2\u0b39\u0b2e\3\2\2"+
		"\2\u0b39\u0b31\3\2\2\2\u0b39\u0b32\3\2\2\2\u0b39\u0b33\3\2\2\2\u0b39\u0b34"+
		"\3\2\2\2\u0b39\u0b36\3\2\2\2\u0b3a\u0b3c\3\2\2\2\u0b3b\u0b3d\5\u0198\u00cd"+
		"\2\u0b3c\u0b3b\3\2\2\2\u0b3c\u0b3d\3\2\2\2\u0b3d\u0b3e\3\2\2\2\u0b3e\u0b40"+
		"\5\u026a\u0136\2\u0b3f\u0b22\3\2\2\2\u0b3f\u0b24\3\2\2\2\u0b3f\u0b27\3"+
		"\2\2\2\u0b3f\u0b39\3\2\2\2\u0b40\u0b41\3\2\2\2\u0b41\u0b42\5\u01ec\u00f7"+
		"\2\u0b42\u00c7\3\2\2\2\u0b43\u0b57\5\u01ee\u00f8\2\u0b44\u0b57\5\u01ec"+
		"\u00f7\2\u0b45\u0b46\7\u00e6\2\2\u0b46\u0b47\7\u024b\2\2\u0b47\u0b4c\5"+
		"\u00a8U\2\u0b48\u0b49\7\u0245\2\2\u0b49\u0b4b\5\u00a8U\2\u0b4a\u0b48\3"+
		"\2\2\2\u0b4b\u0b4e\3\2\2\2\u0b4c\u0b4a\3\2\2\2\u0b4c\u0b4d\3\2\2\2\u0b4d"+
		"\u0b4f\3\2\2\2\u0b4e\u0b4c\3\2\2\2\u0b4f\u0b50\7\u024c\2\2\u0b50\u0b57"+
		"\3\2\2\2\u0b51\u0b52\7\u00ce\2\2\u0b52\u0b53\7\u024b\2\2\u0b53\u0b54\5"+
		"\u02b6\u015c\2\u0b54\u0b55\7\u024c\2\2\u0b55\u0b57\3\2\2\2\u0b56\u0b43"+
		"\3\2\2\2\u0b56\u0b44\3\2\2\2\u0b56\u0b45\3\2\2\2\u0b56\u0b51\3\2\2\2\u0b57"+
		"\u00c9\3\2\2\2\u0b58\u0b59\7\u00f2\2\2\u0b59\u0b5d\5\u026a\u0136\2\u0b5a"+
		"\u0b5e\5\u01ee\u00f8\2\u0b5b\u0b5e\5\u01f0\u00f9\2\u0b5c\u0b5e\5\u01ec"+
		"\u00f7\2\u0b5d\u0b5a\3\2\2\2\u0b5d\u0b5b\3\2\2\2\u0b5d\u0b5c\3\2\2\2\u0b5e"+
		"\u00cb\3\2\2\2\u0b5f\u0b60\7\u0192\2\2\u0b60\u0b61\7\66\2\2\u0b61\u0b62"+
		"\7\u0121\2\2\u0b62\u0b63\5\u0210\u0109\2\u0b63\u0b64\5\u00ceh\2\u0b64"+
		"\u00cd\3\2\2\2\u0b65\u0b66\7d\2\2\u0b66\u0b6a\5\u0220\u0111\2\u0b67\u0b68"+
		"\7\u0098\2\2\u0b68\u0b6a\7d\2\2\u0b69\u0b65\3\2\2\2\u0b69\u0b67\3\2\2"+
		"\2\u0b69\u0b6a\3\2\2\2\u0b6a\u0b6f\3\2\2\2\u0b6b\u0b6c\7\u0116\2\2\u0b6c"+
		"\u0b70\5\u0220\u0111\2\u0b6d\u0b6e\7\u0098\2\2\u0b6e\u0b70\7\u0116\2\2"+
		"\u0b6f\u0b6b\3\2\2\2\u0b6f\u0b6d\3\2\2\2\u0b6f\u0b70\3\2\2\2\u0b70\u0b72"+
		"\3\2\2\2\u0b71\u0b73\5\u01bc\u00df\2\u0b72\u0b71\3\2\2\2\u0b72\u0b73\3"+
		"\2\2\2\u0b73\u0b77\3\2\2\2\u0b74\u0b77\5\u01ec\u00f7\2\u0b75\u0b77\5\u01ee"+
		"\u00f8\2\u0b76\u0b69\3\2\2\2\u0b76\u0b74\3\2\2\2\u0b76\u0b75\3\2\2\2\u0b77"+
		"\u00cf\3\2\2\2\u0b78\u0b79\7\u00a2\2\2\u0b79\u0b7a\5\u00dco\2\u0b7a\u0b7b"+
		"\5\u00d2j\2\u0b7b\u00d1\3\2\2\2\u0b7c\u0b8a\5\u01f0\u00f9\2\u0b7d\u0b7e"+
		"\7\u00e6\2\2\u0b7e\u0b7f\7\u024b\2\2\u0b7f\u0b84\5\u00d4k\2\u0b80\u0b81"+
		"\7\u0245\2\2\u0b81\u0b83\5\u00d4k\2\u0b82\u0b80\3\2\2\2\u0b83\u0b86\3"+
		"\2\2\2\u0b84\u0b82\3\2\2\2\u0b84\u0b85\3\2\2\2\u0b85\u0b87\3\2\2\2\u0b86"+
		"\u0b84\3\2\2\2\u0b87\u0b88\7\u024c\2\2\u0b88\u0b8a\3\2\2\2\u0b89\u0b7c"+
		"\3\2\2\2\u0b89\u0b7d\3\2\2\2\u0b8a\u00d3\3\2\2\2\u0b8b\u0b8c\t$\2\2\u0b8c"+
		"\u0b8d\7\u0242\2\2\u0b8d\u0b8e\5\u026a\u0136\2\u0b8e\u00d5\3\2\2\2\u0b8f"+
		"\u0b90\7\u01b6\2\2\u0b90\u0b92\7\u008a\2\2\u0b91\u0b93\5\u0198\u00cd\2"+
		"\u0b92\u0b91\3\2\2\2\u0b92\u0b93\3\2\2\2\u0b93\u0b94\3\2\2\2\u0b94\u0b97"+
		"\7\u0191\2\2\u0b95\u0b98\5,\27\2\u0b96\u0b98\7\u01b6\2\2\u0b97\u0b95\3"+
		"\2\2\2\u0b97\u0b96\3\2\2\2\u0b98\u0b99\3\2\2\2\u0b99\u0b9a\7\u00e4\2\2"+
		"\u0b9a\u0b9b\5\u0210\u0109\2\u0b9b\u00d7\3\2\2\2\u0b9c\u0b9d\7\u00a9\2"+
		"\2\u0b9d\u0b9e\7\26\2\2\u0b9e\u0ba3\5,\27\2\u0b9f\u0ba0\7\u0245\2\2\u0ba0"+
		"\u0ba2\5,\27\2\u0ba1\u0b9f\3\2\2\2\u0ba2\u0ba5\3\2\2\2\u0ba3\u0ba1\3\2"+
		"\2\2\u0ba3\u0ba4\3\2\2\2\u0ba4\u0ba7\3\2\2\2\u0ba5\u0ba3\3\2\2\2\u0ba6"+
		"\u0ba8\5\u01f8\u00fd\2\u0ba7\u0ba6\3\2\2\2\u0ba7\u0ba8\3\2\2\2\u0ba8\u00d9"+
		"\3\2\2\2\u0ba9\u0bab\7\u00a2\2\2\u0baa\u0bac\5\u0198\u00cd\2\u0bab\u0baa"+
		"\3\2\2\2\u0bab\u0bac\3\2\2\2\u0bac\u0bad\3\2\2\2\u0bad\u0bb2\5\u00dco"+
		"\2\u0bae\u0baf\7\u0245\2\2\u0baf\u0bb1\5\u00dco\2\u0bb0\u0bae\3\2\2\2"+
		"\u0bb1\u0bb4\3\2\2\2\u0bb2\u0bb0\3\2\2\2\u0bb2\u0bb3\3\2\2\2\u0bb3\u0bb6"+
		"\3\2\2\2\u0bb4\u0bb2\3\2\2\2\u0bb5\u0bb7\5\u01f8\u00fd\2\u0bb6\u0bb5\3"+
		"\2\2\2\u0bb6\u0bb7\3\2\2\2\u0bb7\u00db\3\2\2\2\u0bb8\u0bb9\5\u00fe\u0080"+
		"\2\u0bb9\u0bbc\7\u024b\2\2\u0bba\u0bbd\5\u0224\u0113\2\u0bbb\u0bbd\7\u013c"+
		"\2\2\u0bbc\u0bba\3\2\2\2\u0bbc\u0bbb\3\2\2\2\u0bbd\u0bbe\3\2\2\2\u0bbe"+
		"\u0bc1\7\u0245\2\2\u0bbf\u0bc2\5\u0224\u0113\2\u0bc0\u0bc2\7\u013c\2\2"+
		"\u0bc1\u0bbf\3\2\2\2\u0bc1\u0bc0\3\2\2\2\u0bc2\u0bc3\3\2\2\2\u0bc3\u0bc4"+
		"\7\u024c\2\2\u0bc4\u00dd\3\2\2\2\u0bc5\u0bc6\7\u017f\2\2\u0bc6\u0bc8\5"+
		"\u0210\u0109\2\u0bc7\u0bc5\3\2\2\2\u0bc7\u0bc8\3\2\2\2\u0bc8\u0bd2\3\2"+
		"\2\2\u0bc9\u0bca\7\u017c\2\2\u0bca\u0bcb\7\u024b\2\2\u0bcb\u0bcc\5\u0230"+
		"\u0119\2\u0bcc\u0bcd\7\u024c\2\2\u0bcd\u0bd3\3\2\2\2\u0bce\u0bd0\7\u01a0"+
		"\2\2\u0bcf\u0bce\3\2\2\2\u0bcf\u0bd0\3\2\2\2\u0bd0\u0bd1\3\2\2\2\u0bd1"+
		"\u0bd3\7\u01a1\2\2\u0bd2\u0bc9\3\2\2\2\u0bd2\u0bcf\3\2\2\2\u0bd3\u00df"+
		"\3\2\2\2\u0bd4\u0bd5\7\u01a5\2\2\u0bd5\u0bd7\7\u00cc\2\2\u0bd6\u0bd4\3"+
		"\2\2\2\u0bd6\u0bd7\3\2\2\2\u0bd7\u0bd8\3\2\2\2\u0bd8\u0bd9\7\u0105\2\2"+
		"\u0bd9\u0bda\7\u0191\2\2\u0bda\u0bdb\5\u0224\u0113\2\u0bdb\u0bdc\7~\2"+
		"\2\u0bdc\u0bdd\5\u0210\u0109\2\u0bdd\u0bde\7\u024b\2\2\u0bde\u0bdf\7\u0193"+
		"\2\2\u0bdf\u0be0\7\u00ed\2\2\u0be0\u0be1\7\u01bc\2\2\u0be1\u0be2\7^\2"+
		"\2\u0be2\u0be3\5\u0140\u00a1\2\u0be3\u0be4\7\u0245\2\2\u0be4\u0be5\7\u01b1"+
		"\2\2\u0be5\u0be6\7\u00ed\2\2\u0be6\u0be7\7\u01bc\2\2\u0be7\u0be8\7^\2"+
		"\2\u0be8\u0be9\5\u0140\u00a1\2\u0be9\u0bea\7\u024c\2\2\u0bea\u00e1\3\2"+
		"\2\2\u0beb\u0bec\7\5\2\2\u0bec\u0bed\7\u008e\2\2\u0bed\u0bee\5\u0210\u0109"+
		"\2\u0bee\u0bef\7\u0109\2\2\u0bef\u0bf0\t%\2\2\u0bf0\u0bf1\7d\2\2\u0bf1"+
		"\u0bf2\5\u026a\u0136\2\u0bf2\u00e3\3\2\2\2\u0bf3\u0bf4\t\35\2\2\u0bf4"+
		"\u0bff\5\u0210\u0109\2\u0bf5\u0bf7\7\u01bc\2\2\u0bf6\u0bf5\3\2\2\2\u0bf6"+
		"\u0bf7\3\2\2\2\u0bf7\u0bf8\3\2\2\2\u0bf8\u0bfc\5\u00e6t\2\u0bf9\u0bfb"+
		"\5\u00e6t\2\u0bfa\u0bf9\3\2\2\2\u0bfb\u0bfe\3\2\2\2\u0bfc\u0bfa\3\2\2"+
		"\2\u0bfc\u0bfd\3\2\2\2\u0bfd\u0c00\3\2\2\2\u0bfe\u0bfc\3\2\2\2\u0bff\u0bf6"+
		"\3\2\2\2\u0bff\u0c00\3\2\2\2\u0c00\u00e5\3\2\2\2\u0c01\u0c05\5\u00eav"+
		"\2\u0c02\u0c05\5\u00ecw\2\u0c03\u0c05\5\u00eex\2\u0c04\u0c01\3\2\2\2\u0c04"+
		"\u0c02\3\2\2\2\u0c04\u0c03\3\2\2\2\u0c05\u00e7\3\2\2\2\u0c06\u0c09\5\u00ea"+
		"v\2\u0c07\u0c09\5\u00ecw\2\u0c08\u0c06\3\2\2\2\u0c08\u0c07\3\2\2\2\u0c09"+
		"\u00e9\3\2\2\2\u0c0a\u0c20\7\u0218\2\2\u0c0b\u0c20\7\u01fa\2\2\u0c0c\u0c20"+
		"\7\u01c8\2\2\u0c0d\u0c20\7\u01f5\2\2\u0c0e\u0c20\7\u01c9\2\2\u0c0f\u0c20"+
		"\7\u01f6\2\2\u0c10\u0c20\7s\2\2\u0c11\u0c20\7\u01f7\2\2\u0c12\u0c20\7"+
		"\u01e7\2\2\u0c13\u0c20\7\u01f8\2\2\u0c14\u0c16\7M\2\2\u0c15\u0c14\3\2"+
		"\2\2\u0c15\u0c16\3\2\2\2\u0c16\u0c17\3\2\2\2\u0c17\u0c1a\7\u00b0\2\2\u0c18"+
		"\u0c1b\7\u0267\2\2\u0c19\u0c1b\7\u01a1\2\2\u0c1a\u0c18\3\2\2\2\u0c1a\u0c19"+
		"\3\2\2\2\u0c1b\u0c20\3\2\2\2\u0c1c\u0c1d\7\u0114\2\2\u0c1d\u0c1e\7\u0111"+
		"\2\2\u0c1e\u0c20\7\u0267\2\2\u0c1f\u0c0a\3\2\2\2\u0c1f\u0c0b\3\2\2\2\u0c1f"+
		"\u0c0c\3\2\2\2\u0c1f\u0c0d\3\2\2\2\u0c1f\u0c0e\3\2\2\2\u0c1f\u0c0f\3\2"+
		"\2\2\u0c1f\u0c10\3\2\2\2\u0c1f\u0c11\3\2\2\2\u0c1f\u0c12\3\2\2\2\u0c1f"+
		"\u0c13\3\2\2\2\u0c1f\u0c15\3\2\2\2\u0c1f\u0c1c\3\2\2\2\u0c20\u00eb\3\2"+
		"\2\2\u0c21\u0c29\7\u0206\2\2\u0c22\u0c29\7\u01f9\2\2\u0c23\u0c29\7\u01c0"+
		"\2\2\u0c24\u0c29\7\u01f4\2\2\u0c25\u0c26\7*\2\2\u0c26\u0c27\7\u019d\2"+
		"\2\u0c27\u0c29\5\u0150\u00a9\2\u0c28\u0c21\3\2\2\2\u0c28\u0c22\3\2\2\2"+
		"\u0c28\u0c23\3\2\2\2\u0c28\u0c24\3\2\2\2\u0c28\u0c25\3\2\2\2\u0c29\u00ed"+
		"\3\2\2\2\u0c2a\u0c2b\7\u00fb\2\2\u0c2b\u0c37\5\u0230\u0119\2\u0c2c\u0c2d"+
		"\7\u0197\2\2\u0c2d\u0c34\7\u00d3\2\2\u0c2e\u0c2f\7\u0197\2\2\u0c2f\u0c34"+
		"\7\u0195\2\2\u0c30\u0c34\7\u00d3\2\2\u0c31\u0c34\7\b\2\2\u0c32\u0c34\7"+
		"\u01b6\2\2\u0c33\u0c2c\3\2\2\2\u0c33\u0c2e\3\2\2\2\u0c33\u0c30\3\2\2\2"+
		"\u0c33\u0c31\3\2\2\2\u0c33\u0c32\3\2\2\2\u0c34\u0c35\3\2\2\2\u0c35\u0c37"+
		"\5\u02b6\u015c\2\u0c36\u0c2a\3\2\2\2\u0c36\u0c33\3\2\2\2\u0c37\u00ef\3"+
		"\2\2\2\u0c38\u0c39\7\u0195\2\2\u0c39\u0c42\5\u0210\u0109\2\u0c3a\u0c3c"+
		"\7\u01bc\2\2\u0c3b\u0c3a\3\2\2\2\u0c3b\u0c3c\3\2\2\2\u0c3c\u0c3e\3\2\2"+
		"\2\u0c3d\u0c3f\5\u00f2z\2\u0c3e\u0c3d\3\2\2\2\u0c3f\u0c40\3\2\2\2\u0c40"+
		"\u0c3e\3\2\2\2\u0c40\u0c41\3\2\2\2\u0c41\u0c43\3\2\2\2\u0c42\u0c3b\3\2"+
		"\2\2\u0c42\u0c43\3\2\2\2\u0c43\u00f1\3\2\2\2\u0c44\u0c47\5\u00eav\2\u0c45"+
		"\u0c47\5\u00eex\2\u0c46\u0c44\3\2\2\2\u0c46\u0c45\3\2\2\2\u0c47\u00f3"+
		"\3\2\2\2\u0c48\u0c49\7\u00fe\2\2\u0c49\u0c4c\5\u0210\u0109\2\u0c4a\u0c4b"+
		"\7\u00aa\2\2\u0c4b\u0c4d\5,\27\2\u0c4c\u0c4a\3\2\2\2\u0c4c\u0c4d\3\2\2"+
		"\2\u0c4d\u0c4e\3\2\2\2\u0c4e\u0c4f\7\u0086\2\2\u0c4f\u0c5c\7\u0267\2\2"+
		"\u0c50\u0c51\7\u01bc\2\2\u0c51\u0c52\7\u024b\2\2\u0c52\u0c57\5\u00a8U"+
		"\2\u0c53\u0c54\7\u0245\2\2\u0c54\u0c56\5\u00a8U\2\u0c55\u0c53\3\2\2\2"+
		"\u0c56\u0c59\3\2\2\2\u0c57\u0c55\3\2\2\2\u0c57\u0c58\3\2\2\2\u0c58\u0c5a"+
		"\3\2\2\2\u0c59\u0c57\3\2\2\2\u0c5a\u0c5b\7\u024c\2\2\u0c5b\u0c5d\3\2\2"+
		"\2\u0c5c\u0c50\3\2\2\2\u0c5c\u0c5d\3\2\2\2\u0c5d\u00f5\3\2\2\2\u0c5e\u0c60"+
		"\7\u00f2\2\2\u0c5f\u0c61\5\u019a\u00ce\2\u0c60\u0c5f\3\2\2\2\u0c60\u0c61"+
		"\3\2\2\2\u0c61\u0c62\3\2\2\2\u0c62\u0c67\5\u026a\u0136\2\u0c63\u0c64\7"+
		"\u024b\2\2\u0c64\u0c65\5\u02b6\u015c\2\u0c65\u0c66\7\u024c\2\2\u0c66\u0c68"+
		"\3\2\2\2\u0c67\u0c63\3\2\2\2\u0c67\u0c68\3\2\2\2\u0c68\u0c69\3\2\2\2\u0c69"+
		"\u0c6a\7\u01a3\2\2\u0c6a\u0c6b\5\u0210\u0109\2\u0c6b\u0c6c\7\u0245\2\2"+
		"\u0c6c\u0c6d\5\u02b6\u015c\2\u0c6d\u0c6e\7\u0193\2\2\u0c6e\u0c6f\5\u026a"+
		"\u0136\2\u0c6f\u00f7\3\2\2\2\u0c70\u0c71\7\u0192\2\2\u0c71\u0c72\7\66"+
		"\2\2\u0c72\u0c73\7\u0121\2\2\u0c73\u0c78\5\u0210\u0109\2\u0c74\u0c75\7"+
		"d\2\2\u0c75\u0c79\5\u0220\u0111\2\u0c76\u0c77\7\u0098\2\2\u0c77\u0c79"+
		"\7d\2\2\u0c78\u0c74\3\2\2\2\u0c78\u0c76\3\2\2\2\u0c78\u0c79\3\2\2\2\u0c79"+
		"\u0c7e\3\2\2\2\u0c7a\u0c7b\7\u0116\2\2\u0c7b\u0c7f\5\u0220\u0111\2\u0c7c"+
		"\u0c7d\7\u0098\2\2\u0c7d\u0c7f\7\u0116\2\2\u0c7e\u0c7a\3\2\2\2\u0c7e\u0c7c"+
		"\3\2\2\2\u0c7e\u0c7f\3\2\2\2\u0c7f\u0c8c\3\2\2\2\u0c80\u0c81\7\u00a4\2"+
		"\2\u0c81\u0c82\7\u024b\2\2\u0c82\u0c87\5\u00fa~\2\u0c83\u0c84\7\u0245"+
		"\2\2\u0c84\u0c86\5\u00fa~\2\u0c85\u0c83\3\2\2\2\u0c86\u0c89\3\2\2\2\u0c87"+
		"\u0c85\3\2\2\2\u0c87\u0c88\3\2\2\2\u0c88\u0c8a\3\2\2\2\u0c89\u0c87\3\2"+
		"\2\2\u0c8a\u0c8b\7\u024c\2\2\u0c8b\u0c8d\3\2\2\2\u0c8c\u0c80\3\2\2\2\u0c8c"+
		"\u0c8d\3\2\2\2\u0c8d\u00f9\3\2\2\2\u0c8e\u0c8f\5\u0210\u0109\2\u0c8f\u0c90"+
		"\7\u0267\2\2\u0c90\u00fb\3\2\2\2\u0c91\u0c92\7\u00a2\2\2\u0c92\u0c93\5"+
		"\u00fe\u0080\2\u0c93\u0c94\7\u024b\2\2\u0c94\u0c99\5\u0100\u0081\2\u0c95"+
		"\u0c96\7\u0245\2\2\u0c96\u0c98\5\u0100\u0081\2\u0c97\u0c95\3\2\2\2\u0c98"+
		"\u0c9b\3\2\2\2\u0c99\u0c97\3\2\2\2\u0c99\u0c9a\3\2\2\2\u0c9a\u0c9c\3\2"+
		"\2\2\u0c9b\u0c99\3\2\2\2\u0c9c\u0c9d\7\u024c\2\2\u0c9d\u00fd\3\2\2\2\u0c9e"+
		"\u0c9f\5\u0210\u0109\2\u0c9f\u0ca0\7\u0253\2\2\u0ca0\u0ca2\3\2\2\2\u0ca1"+
		"\u0c9e\3\2\2\2\u0ca1\u0ca2\3\2\2\2\u0ca2\u0ca3\3\2\2\2\u0ca3\u0ca4\5\u01d2"+
		"\u00ea\2\u0ca4\u00ff\3\2\2\2\u0ca5\u0ca6\t\22\2\2\u0ca6\u0ca7\7\u0242"+
		"\2\2\u0ca7\u0cb7\5\u026a\u0136\2\u0ca8\u0ca9\7\u00d0\2\2\u0ca9\u0caa\7"+
		"\u0242\2\2\u0caa\u0cb7\5\u026a\u0136\2\u0cab\u0cac\7\u0165\2\2\u0cac\u0cad"+
		"\7\u0242\2\2\u0cad\u0cb7\5\u026a\u0136\2\u0cae\u0caf\t&\2\2\u0caf\u0cb0"+
		"\7\u0242\2\2\u0cb0\u0cb7\5\u0224\u0113\2\u0cb1\u0cb2\t\'\2\2\u0cb2\u0cb3"+
		"\7\u0242\2\2\u0cb3\u0cb7\5\u0236\u011c\2\u0cb4\u0cb7\7\u01d8\2\2\u0cb5"+
		"\u0cb7\7\u01e9\2\2\u0cb6\u0ca5\3\2\2\2\u0cb6\u0ca8\3\2\2\2\u0cb6\u0cab"+
		"\3\2\2\2\u0cb6\u0cae\3\2\2\2\u0cb6\u0cb1\3\2\2\2\u0cb6\u0cb4\3\2\2\2\u0cb6"+
		"\u0cb5\3\2\2\2\u0cb7\u0101\3\2\2\2\u0cb8\u0cb9\7\u01a5\2\2\u0cb9\u0cbb"+
		"\7\u00cc\2\2\u0cba\u0cb8\3\2\2\2\u0cba\u0cbb\3\2\2\2\u0cbb\u0cbc\3\2\2"+
		"\2\u0cbc\u0cbd\7\n\2\2\u0cbd\u0cbf\5\u026a\u0136\2\u0cbe\u0cc0\5\u0142"+
		"\u00a2\2\u0cbf\u0cbe\3\2\2\2\u0cbf\u0cc0\3\2\2\2\u0cc0\u0cc1\3\2\2\2\u0cc1"+
		"\u0cc7\7\u024b\2\2\u0cc2\u0cc3\7\u01be\2\2\u0cc3\u0cc4\7\u0242\2\2\u0cc4"+
		"\u0cc5\5\u0224\u0113\2\u0cc5\u0cc6\7\u0245\2\2\u0cc6\u0cc8\3\2\2\2\u0cc7"+
		"\u0cc2\3\2\2\2\u0cc7\u0cc8\3\2\2\2\u0cc8\u0cc9\3\2\2\2\u0cc9\u0cca\7\u020e"+
		"\2\2\u0cca\u0ccb\7\u0242\2\2\u0ccb\u0ccc\5\u026a\u0136\2\u0ccc\u0ccd\7"+
		"\u0245\2\2\u0ccd\u0cce\7\u0213\2\2\u0cce\u0ccf\7\u0242\2\2\u0ccf\u0cd4"+
		"\5\u0224\u0113\2\u0cd0\u0cd1\7\u0245\2\2\u0cd1\u0cd3\5\u0104\u0083\2\u0cd2"+
		"\u0cd0\3\2\2\2\u0cd3\u0cd6\3\2\2\2\u0cd4\u0cd2\3\2\2\2\u0cd4\u0cd5\3\2"+
		"\2\2\u0cd5\u0cd7\3\2\2\2\u0cd6\u0cd4\3\2\2\2\u0cd7\u0cd8\7\u024c\2\2\u0cd8"+
		"\u0103\3\2\2\2\u0cd9\u0cda\7\u0212\2\2\u0cda\u0cdb\7\u0242\2\2\u0cdb\u0d0d"+
		"\7\u0262\2\2\u0cdc\u0cdd\7\u01cf\2\2\u0cdd\u0cde\7\u0242\2\2\u0cde\u0d0d"+
		"\5\u026a\u0136\2\u0cdf\u0d0d\7\u01d0\2\2\u0ce0\u0ce1\7\u01d1\2\2\u0ce1"+
		"\u0ce2\7\u0242\2\2\u0ce2\u0d0d\t(\2\2\u0ce3\u0ce4\7\u01c4\2\2\u0ce4\u0ce5"+
		"\7\u0242\2\2\u0ce5\u0d0d\5\u026a\u0136\2\u0ce6\u0ce7\7\u020c\2\2\u0ce7"+
		"\u0ce8\7\u0242\2\2\u0ce8\u0d0d\5\u026a\u0136\2\u0ce9\u0cea\7\u01ca\2\2"+
		"\u0cea\u0ceb\7\u0242\2\2\u0ceb\u0d0d\5\u026a\u0136\2\u0cec\u0ced\7\u01dd"+
		"\2\2\u0ced\u0cee\7\u0242\2\2\u0cee\u0d0d\5\u0230\u0119\2\u0cef\u0cf0\7"+
		"\u01f0\2\2\u0cf0\u0cf1\7\u0242\2\2\u0cf1\u0d0d\5\u026a\u0136\2\u0cf2\u0cf3"+
		"\7\u01ee\2\2\u0cf3\u0cf4\7\u0242\2\2\u0cf4\u0d0d\5\u026a\u0136\2\u0cf5"+
		"\u0cf6\7\u01f2\2\2\u0cf6\u0cf7\7\u0242\2\2\u0cf7\u0d0d\5\u0224\u0113\2"+
		"\u0cf8\u0cf9\7\u01f1\2\2\u0cf9\u0cfa\7\u0242\2\2\u0cfa\u0d0d\7\u0262\2"+
		"\2\u0cfb\u0cfc\7\u01ea\2\2\u0cfc\u0cfd\7\u0242\2\2\u0cfd\u0d0d\5\u026a"+
		"\u0136\2\u0cfe\u0d0d\7\u01eb\2\2\u0cff\u0d00\7\u01ec\2\2\u0d00\u0d01\7"+
		"\u0242\2\2\u0d01\u0d0d\t(\2\2\u0d02\u0d03\7\u01ed\2\2\u0d03\u0d04\7\u0242"+
		"\2\2\u0d04\u0d0d\5\u0230\u0119\2\u0d05\u0d06\7\u0211\2\2\u0d06\u0d07\7"+
		"\u0242\2\2\u0d07\u0d0d\5\u0236\u011c\2\u0d08\u0d09\7\u00ab\2\2\u0d09\u0d0a"+
		"\7\u0242\2\2\u0d0a\u0d0d\t\33\2\2\u0d0b\u0d0d\7\u01da\2\2\u0d0c\u0cd9"+
		"\3\2\2\2\u0d0c\u0cdc\3\2\2\2\u0d0c\u0cdf\3\2\2\2\u0d0c\u0ce0\3\2\2\2\u0d0c"+
		"\u0ce3\3\2\2\2\u0d0c\u0ce6\3\2\2\2\u0d0c\u0ce9\3\2\2\2\u0d0c\u0cec\3\2"+
		"\2\2\u0d0c\u0cef\3\2\2\2\u0d0c\u0cf2\3\2\2\2\u0d0c\u0cf5\3\2\2\2\u0d0c"+
		"\u0cf8\3\2\2\2\u0d0c\u0cfb\3\2\2\2\u0d0c\u0cfe\3\2\2\2\u0d0c\u0cff\3\2"+
		"\2\2\u0d0c\u0d02\3\2\2\2\u0d0c\u0d05\3\2\2\2\u0d0c\u0d08\3\2\2\2\u0d0c"+
		"\u0d0b\3\2\2\2\u0d0d\u0105\3\2\2\2\u0d0e\u0d0f\7\u00e6\2\2\u0d0f\u0d10"+
		"\5\u0108\u0085\2\u0d10\u0107\3\2\2\2\u0d11\u0d14\7+\2\2\u0d12\u0d15\7"+
		"\u0170\2\2\u0d13\u0d15\5\u01da\u00ee\2\u0d14\u0d12\3\2\2\2\u0d14\u0d13"+
		"\3\2\2\2\u0d15\u0d16\3\2\2\2\u0d16\u0d37\t\31\2\2\u0d17\u0d18\7\u0104"+
		"\2\2\u0d18\u0d1d\5\26\f\2\u0d19\u0d1a\7\u0245\2\2\u0d1a\u0d1c\5\26\f\2"+
		"\u0d1b\u0d19\3\2\2\2\u0d1c\u0d1f\3\2\2\2\u0d1d\u0d1b\3\2\2\2\u0d1d\u0d1e"+
		"\3\2\2\2\u0d1e\u0d37\3\2\2\2\u0d1f\u0d1d\3\2\2\2\u0d20\u0d21\7\u0104\2"+
		"\2\u0d21\u0d22\7\u00ec\2\2\u0d22\u0d37\7\u0267\2\2\u0d23\u0d24\7\u00e5"+
		"\2\2\u0d24\u0d25\7\36\2\2\u0d25\u0d26\7\u0176\2\2\u0d26\u0d27\7\u0104"+
		"\2\2\u0d27\u0d2c\5\26\f\2\u0d28\u0d29\7\u0245\2\2\u0d29\u0d2b\5\26\f\2"+
		"\u0d2a\u0d28\3\2\2\2\u0d2b\u0d2e\3\2\2\2\u0d2c\u0d2a\3\2\2\2\u0d2c\u0d2d"+
		"\3\2\2\2\u0d2d\u0d37\3\2\2\2\u0d2e\u0d2c\3\2\2\2\u0d2f\u0d31\t)\2\2\u0d30"+
		"\u0d2f\3\2\2\2\u0d30\u0d31\3\2\2\2\u0d31\u0d32\3\2\2\2\u0d32\u0d37\5\u010a"+
		"\u0086\2\u0d33\u0d34\7\u0123\2\2\u0d34\u0d35\7\u00a3\2\2\u0d35\u0d37\t"+
		"*\2\2\u0d36\u0d11\3\2\2\2\u0d36\u0d17\3\2\2\2\u0d36\u0d20\3\2\2\2\u0d36"+
		"\u0d23\3\2\2\2\u0d36\u0d30\3\2\2\2\u0d36\u0d33\3\2\2\2\u0d37\u0109\3\2"+
		"\2\2\u0d38\u0d39\7\u00e5\2\2\u0d39\u0d3d\7\u0159\2\2\u0d3a\u0d3e\7\u0267"+
		"\2\2\u0d3b\u0d3e\5\u0210\u0109\2\u0d3c\u0d3e\7\u0187\2\2\u0d3d\u0d3a\3"+
		"\2\2\2\u0d3d\u0d3b\3\2\2\2\u0d3d\u0d3c\3\2\2\2\u0d3e\u0d56\3\2\2\2\u0d3f"+
		"\u0d40\7\u0148\2\2\u0d40\u0d45\7\u0126\2\2\u0d41\u0d46\7\u0267\2\2\u0d42"+
		"\u0d46\5\u0152\u00aa\2\u0d43\u0d46\7\u0085\2\2\u0d44\u0d46\7\u0187\2\2"+
		"\u0d45\u0d41\3\2\2\2\u0d45\u0d42\3\2\2\2\u0d45\u0d43\3\2\2\2\u0d45\u0d44"+
		"\3\2\2\2\u0d46\u0d56\3\2\2\2\u0d47\u0d48\5\u0210\u0109\2\u0d48\u0d49\7"+
		"\u0253\2\2\u0d49\u0d4b\3\2\2\2\u0d4a\u0d47\3\2\2\2\u0d4a\u0d4b\3\2\2\2"+
		"\u0d4b\u0d4c\3\2\2\2\u0d4c\u0d4d\5\u0210\u0109\2\u0d4d\u0d4e\t\34\2\2"+
		"\u0d4e\u0d4f\5\u010c\u0087\2\u0d4f\u0d56\3\2\2\2\u0d50\u0d53\7\u00d3\2"+
		"\2\u0d51\u0d54\5\u0210\u0109\2\u0d52\u0d54\7\u013c\2\2\u0d53\u0d51\3\2"+
		"\2\2\u0d53\u0d52\3\2\2\2\u0d54\u0d56\3\2\2\2\u0d55\u0d38\3\2\2\2\u0d55"+
		"\u0d3f\3\2\2\2\u0d55\u0d4a\3\2\2\2\u0d55\u0d50\3\2\2\2\u0d56\u010b\3\2"+
		"\2\2\u0d57\u0d5c\5\u0230\u0119\2\u0d58\u0d59\7\u0245\2\2\u0d59\u0d5b\5"+
		"\u0230\u0119\2\u0d5a\u0d58\3\2\2\2\u0d5b\u0d5e\3\2\2\2\u0d5c\u0d5a\3\2"+
		"\2\2\u0d5c\u0d5d\3\2\2\2\u0d5d\u0d61\3\2\2\2\u0d5e\u0d5c\3\2\2\2\u0d5f"+
		"\u0d61\7\u0187\2\2\u0d60\u0d57\3\2\2\2\u0d60\u0d5f\3\2\2\2\u0d61\u010d"+
		"\3\2\2\2\u0d62\u0d63\7\u01a5\2\2\u0d63\u0d65\7\u00cc\2\2\u0d64\u0d62\3"+
		"\2\2\2\u0d64\u0d65\3\2\2\2\u0d65\u0d66\3\2\2\2\u0d66\u0d67\7\u00d9\2\2"+
		"\u0d67\u0d68\5\u0210\u0109\2\u0d68\u0d69\7\u0176\2\2\u0d69\u0d6a\7\u01a3"+
		"\2\2\u0d6a\u0d6b\t+\2\2\u0d6b\u0d6c\7\u01b1\2\2\u0d6c\u0d6f\5\u026a\u0136"+
		"\2\u0d6d\u0d6e\7\u01ba\2\2\u0d6e\u0d70\5\u0230\u0119\2\u0d6f\u0d6d\3\2"+
		"\2\2\u0d6f\u0d70\3\2\2\2\u0d70\u0d71\3\2\2\2\u0d71\u0d73\7\u018b\2\2\u0d72"+
		"\u0d74\t,\2\2\u0d73\u0d72\3\2\2\2\u0d73\u0d74\3\2\2\2\u0d74\u0d86\3\2"+
		"\2\2\u0d75\u0d87\7\u0099\2\2\u0d76\u0d87\5\u0110\u0089\2\u0d77\u0d7d\7"+
		"\u024b\2\2\u0d78\u0d79\5\u0110\u0089\2\u0d79\u0d7a\7\u0244\2\2\u0d7a\u0d7c"+
		"\3\2\2\2\u0d7b\u0d78\3\2\2\2\u0d7c\u0d7f\3\2\2\2\u0d7d\u0d7b\3\2\2\2\u0d7d"+
		"\u0d7e\3\2\2\2\u0d7e\u0d80\3\2\2\2\u0d7f\u0d7d\3\2\2\2\u0d80\u0d82\5\u0110"+
		"\u0089\2\u0d81\u0d83\7\u0244\2\2\u0d82\u0d81\3\2\2\2\u0d82\u0d83\3\2\2"+
		"\2\u0d83\u0d84\3\2\2\2\u0d84\u0d85\7\u024c\2\2\u0d85\u0d87\3\2\2\2\u0d86"+
		"\u0d75\3\2\2\2\u0d86\u0d76\3\2\2\2\u0d86\u0d77\3\2\2\2\u0d87\u010f\3\2"+
		"\2\2\u0d88\u0d8e\5\u0270\u0139\2\u0d89\u0d8e\5\u02a2\u0152\2\u0d8a\u0d8e"+
		"\5\u02ae\u0158\2\u0d8b\u0d8e\5\u02ac\u0157\2\u0d8c\u0d8e\5\u02b2\u015a"+
		"\2\u0d8d\u0d88\3\2\2\2\u0d8d\u0d89\3\2\2\2\u0d8d\u0d8a\3\2\2\2\u0d8d\u0d8b"+
		"\3\2\2\2\u0d8d\u0d8c\3\2\2\2\u0d8e\u0111\3\2\2\2\u0d8f\u0d91\7\u017f\2"+
		"\2\u0d90\u0d8f\3\2\2\2\u0d90\u0d91\3\2\2\2\u0d91\u0d92\3\2\2\2\u0d92\u0d93"+
		"\7\u0106\2\2\u0d93\u0d98\5\u0210\u0109\2\u0d94\u0d99\7\24\2\2\u0d95\u0d96"+
		"\7y\2\2\u0d96\u0d99\7\u009e\2\2\u0d97\u0d99\7\t\2\2\u0d98\u0d94\3\2\2"+
		"\2\u0d98\u0d95\3\2\2\2\u0d98\u0d97\3\2\2\2\u0d99\u0da9\3\2\2\2\u0d9a\u0d9e"+
		"\7x\2\2\u0d9b\u0d9e\7>\2\2\u0d9c\u0d9e\7\u0107\2\2\u0d9d\u0d9a\3\2\2\2"+
		"\u0d9d\u0d9b\3\2\2\2\u0d9d\u0d9c\3\2\2\2\u0d9e\u0da5\3\2\2\2\u0d9f\u0da2"+
		"\7\u0112\2\2\u0da0\u0da1\7\u009e\2\2\u0da1\u0da3\5\u02b6\u015c\2\u0da2"+
		"\u0da0\3\2\2\2\u0da2\u0da3\3\2\2\2\u0da3\u0da5\3\2\2\2\u0da4\u0d9d\3\2"+
		"\2\2\u0da4\u0d9f\3\2\2\2\u0da5\u0da7\3\2\2\2\u0da6\u0da8\7\u01a5\2\2\u0da7"+
		"\u0da6\3\2\2\2\u0da7\u0da8\3\2\2\2\u0da8\u0daa\3\2\2\2\u0da9\u0da4\3\2"+
		"\2\2\u0daa\u0dab\3\2\2\2\u0dab\u0da9\3\2\2\2\u0dab\u0dac\3\2\2\2\u0dac"+
		"\u0dad\3\2\2\2\u0dad\u0dae\7\u01a3\2\2\u0dae\u0db1\5\u026a\u0136\2\u0daf"+
		"\u0db0\7\u0193\2\2\u0db0\u0db2\5\u026a\u0136\2\u0db1\u0daf\3\2\2\2\u0db1"+
		"\u0db2\3\2\2\2\u0db2\u0db4\3\2\2\2\u0db3\u0db5\5d\63\2\u0db4\u0db3\3\2"+
		"\2\2\u0db4\u0db5\3\2\2\2\u0db5\u0db7\3\2\2\2\u0db6\u0db8\5f\64\2\u0db7"+
		"\u0db6\3\2\2\2\u0db7\u0db8\3\2\2\2\u0db8\u0dbe\3\2\2\2\u0db9\u0dba\7\u00c5"+
		"\2\2\u0dba\u0dbc\5\u0114\u008b\2\u0dbb\u0dbd\5\u0114\u008b\2\u0dbc\u0dbb"+
		"\3\2\2\2\u0dbc\u0dbd\3\2\2\2\u0dbd\u0dbf\3\2\2\2\u0dbe\u0db9\3\2\2\2\u0dbe"+
		"\u0dbf\3\2\2\2\u0dbf\u0dc5\3\2\2\2\u0dc0\u0dc2\7\u0191\2\2\u0dc1\u0dc3"+
		"\7J\2\2\u0dc2\u0dc1\3\2\2\2\u0dc2\u0dc3\3\2\2\2\u0dc3\u0dc4\3\2\2\2\u0dc4"+
		"\u0dc6\t-\2\2\u0dc5\u0dc0\3\2\2\2\u0dc5\u0dc6\3\2\2\2\u0dc6\u0dc8\3\2"+
		"\2\2\u0dc7\u0dc9\5\u0116\u008c\2\u0dc8\u0dc7\3\2\2\2\u0dc8\u0dc9\3\2\2"+
		"\2\u0dc9\u0dca\3\2\2\2\u0dca\u0dcb\7T\2\2\u0dcb\u0dcc\t\22\2\2\u0dcc\u0dcd"+
		"\5\u0246\u0124\2\u0dcd\u0113\3\2\2\2\u0dce\u0dcf\t.\2\2\u0dcf\u0dd1\7"+
		"\u01af\2\2\u0dd0\u0dd2\7\u0176\2\2\u0dd1\u0dd0\3\2\2\2\u0dd1\u0dd2\3\2"+
		"\2\2\u0dd2\u0dd3\3\2\2\2\u0dd3\u0dd4\5\u0210\u0109\2\u0dd4\u0115\3\2\2"+
		"\2\u0dd5\u0dd6\7\u01b9\2\2\u0dd6\u0dd7\7\u024b\2\2\u0dd7\u0dd8\5\u0230"+
		"\u0119\2\u0dd8\u0dd9\7\u024c\2\2\u0dd9\u0117\3\2\2\2\u0dda\u0de0\7\u0194"+
		"\2\2\u0ddb\u0ddd\7\u00d2\2\2\u0ddc\u0dde\5t;\2\u0ddd\u0ddc\3\2\2\2\u0ddd"+
		"\u0dde\3\2\2\2\u0dde\u0de0\3\2\2\2\u0ddf\u0dda\3\2\2\2\u0ddf\u0ddb\3\2"+
		"\2\2\u0de0\u0de3\3\2\2\2\u0de1\u0de4\5\u0120\u0091\2\u0de2\u0de4\5\u011c"+
		"\u008f\2\u0de3\u0de1\3\2\2\2\u0de3\u0de2\3\2\2\2\u0de4\u0de5\3\2\2\2\u0de5"+
		"\u0de6\7\u01a3\2\2\u0de6\u0de7\5\u011a\u008e\2\u0de7\u0de8\t/\2\2\u0de8"+
		"\u0ded\5\u012a\u0096\2\u0de9\u0dea\7\u01bc\2\2\u0dea\u0deb\7\u0194\2\2"+
		"\u0deb\u0dee\7\u00a3\2\2\u0dec\u0dee\5\u01f8\u00fd\2\u0ded\u0de9\3\2\2"+
		"\2\u0ded\u0dec\3\2\2\2\u0ded\u0dee\3\2\2\2\u0dee\u0df1\3\2\2\2\u0def\u0df1"+
		"\5\u0124\u0093\2\u0df0\u0ddf\3\2\2\2\u0df0\u0def\3\2\2\2\u0df1\u0119\3"+
		"\2\2\2\u0df2\u0df4\7\u01af\2\2\u0df3\u0df2\3\2\2\2\u0df3\u0df4\3\2\2\2"+
		"\u0df4\u0df5\3\2\2\2\u0df5\u0e24\5\u01da\u00ee\2\u0df6\u0df7\7\u00e1\2"+
		"\2\u0df7\u0e24\5\u01da\u00ee\2\u0df8\u0df9\7\67\2\2\u0df9\u0e24\5\u01da"+
		"\u00ee\2\u0dfa\u0dfb\7G\2\2\u0dfb\u0e24\5\u01da\u00ee\2\u0dfc\u0dfd\7"+
		"\u0192\2\2\u0dfd\u0dfe\7\66\2\2\u0dfe\u0dff\7\u0121\2\2\u0dff\u0e24\5"+
		"\u01da\u00ee\2\u0e00\u0e01\7\u0192\2\2\u0e01\u0e02\7\u00e4\2\2\u0e02\u0e24"+
		"\5\u01da\u00ee\2\u0e03\u0e04\t\60\2\2\u0e04\u0e09\5\u0140\u00a1\2\u0e05"+
		"\u0e06\7\u0245\2\2\u0e06\u0e08\5\u0140\u00a1\2\u0e07\u0e05\3\2\2\2\u0e08"+
		"\u0e0b\3\2\2\2\u0e09\u0e07\3\2\2\2\u0e09\u0e0a\3\2\2\2\u0e0a\u0e24\3\2"+
		"\2\2\u0e0b\u0e09\3\2\2\2\u0e0c\u0e0d\7\177\2\2\u0e0d\u0e0e\7\u009d\2\2"+
		"\u0e0e\u0e13\7\u0262\2\2\u0e0f\u0e10\7\u0245\2\2\u0e10\u0e12\7\u0262\2"+
		"\2\u0e11\u0e0f\3\2\2\2\u0e12\u0e15\3\2\2\2\u0e13\u0e11\3\2\2\2\u0e13\u0e14"+
		"\3\2\2\2\u0e14\u0e24\3\2\2\2\u0e15\u0e13\3\2\2\2\u0e16\u0e17\7~\2\2\u0e17"+
		"\u0e24\5\u01da\u00ee\2\u0e18\u0e19\7\u00db\2\2\u0e19\u0e24\5\u01da\u00ee"+
		"\2\u0e1a\u0e1b\7\u00fe\2\2\u0e1b\u0e24\5\u01da\u00ee\2\u0e1c\u0e1d\7\u0109"+
		"\2\2\u0e1d\u0e24\5\u01da\u00ee\2\u0e1e\u0e1f\7\u0170\2\2\u0e1f\u0e20\t"+
		"\61\2\2\u0e20\u0e21\7\u0197\2\2\u0e21\u0e22\7\u00db\2\2\u0e22\u0e24\5"+
		"\u01da\u00ee\2\u0e23\u0df3\3\2\2\2\u0e23\u0df6\3\2\2\2\u0e23\u0df8\3\2"+
		"\2\2\u0e23\u0dfa\3\2\2\2\u0e23\u0dfc\3\2\2\2\u0e23\u0e00\3\2\2\2\u0e23"+
		"\u0e03\3\2\2\2\u0e23\u0e0c\3\2\2\2\u0e23\u0e16\3\2\2\2\u0e23\u0e18\3\2"+
		"\2\2\u0e23\u0e1a\3\2\2\2\u0e23\u0e1c\3\2\2\2\u0e23\u0e1e\3\2\2\2\u0e24"+
		"\u011b\3\2\2\2\u0e25\u0e2a\5\u011e\u0090\2\u0e26\u0e27\7\u0245\2\2\u0e27"+
		"\u0e29\5\u011e\u0090\2\u0e28\u0e26\3\2\2\2\u0e29\u0e2c\3\2\2\2\u0e2a\u0e28"+
		"\3\2\2\2\u0e2a\u0e2b\3\2\2\2\u0e2b\u011d\3\2\2\2\u0e2c\u0e2a\3\2\2\2\u0e2d"+
		"\u0e2e\5\u01f2\u00fa\2\u0e2e\u0e2f\7\u024b\2\2\u0e2f\u0e30\5\u02b6\u015c"+
		"\2\u0e30\u0e31\7\u024c\2\2\u0e31\u011f\3\2\2\2\u0e32\u0e37\5\u0122\u0092"+
		"\2\u0e33\u0e34\7\u0245\2\2\u0e34\u0e36\5\u0122\u0092\2\u0e35\u0e33\3\2"+
		"\2\2\u0e36\u0e39\3\2\2\2\u0e37\u0e35\3\2\2\2\u0e37\u0e38\3\2\2\2\u0e38"+
		"\u0121\3\2\2\2\u0e39\u0e37\3\2\2\2\u0e3a\u0e3c\7\u0170\2\2\u0e3b\u0e3d"+
		"\7\u00b8\2\2\u0e3c\u0e3b\3\2\2\2\u0e3c\u0e3d\3\2\2\2\u0e3d\u0e4b\3\2\2"+
		"\2\u0e3e\u0e4b\7\u01c6\2\2\u0e3f\u0e4b\7\u0180\2\2\u0e40\u0e4b\7>\2\2"+
		"\u0e41\u0e4b\7T\2\2\u0e42\u0e4b\7x\2\2\u0e43\u0e4b\7\u0112\2\2\u0e44\u0e4b"+
		"\7\u01a9\2\2\u0e45\u0e4b\7\u01ab\2\2\u0e46\u0e4b\7\u00ff\2\2\u0e47\u0e4b"+
		"\7\u0106\2\2\u0e48\u0e4b\7\u0107\2\2\u0e49\u0e4b\7\u021d\2\2\u0e4a\u0e3a"+
		"\3\2\2\2\u0e4a\u0e3e\3\2\2\2\u0e4a\u0e3f\3\2\2\2\u0e4a\u0e40\3\2\2\2\u0e4a"+
		"\u0e41\3\2\2\2\u0e4a\u0e42\3\2\2\2\u0e4a\u0e43\3\2\2\2\u0e4a\u0e44\3\2"+
		"\2\2\u0e4a\u0e45\3\2\2\2\u0e4a\u0e46\3\2\2\2\u0e4a\u0e47\3\2\2\2\u0e4a"+
		"\u0e48\3\2\2\2\u0e4a\u0e49\3\2\2\2\u0e4b\u0123\3\2\2\2\u0e4c\u0e4d\7\u0194"+
		"\2\2\u0e4d\u0e4e\5\u01da\u00ee\2\u0e4e\u0e4f\7\u01b1\2\2\u0e4f\u0e53\5"+
		"\u01da\u00ee\2\u0e50\u0e51\7\u01bc\2\2\u0e51\u0e52\7\b\2\2\u0e52\u0e54"+
		"\7\u00a3\2\2\u0e53\u0e50\3\2\2\2\u0e53\u0e54\3\2\2\2\u0e54\u0e62\3\2\2"+
		"\2\u0e55\u0e59\7\u00d2\2\2\u0e56\u0e57\7\b\2\2\u0e57\u0e58\7\u00a3\2\2"+
		"\u0e58\u0e5a\7\u0191\2\2\u0e59\u0e56\3\2\2\2\u0e59\u0e5a\3\2\2\2\u0e5a"+
		"\u0e5b\3\2\2\2\u0e5b\u0e5c\5\u01da\u00ee\2\u0e5c\u0e5d\7\u0193\2\2\u0e5d"+
		"\u0e5f\5\u01da\u00ee\2\u0e5e\u0e60\5\u01f8\u00fd\2\u0e5f\u0e5e\3\2\2\2"+
		"\u0e5f\u0e60\3\2\2\2\u0e60\u0e62\3\2\2\2\u0e61\u0e4c\3\2\2\2\u0e61\u0e55"+
		"\3\2\2\2\u0e62\u0125\3\2\2\2\u0e63\u0e64\7\u01b1\2\2\u0e64\u0e68\5\u012a"+
		"\u0096\2\u0e65\u0e66\7\u01bc\2\2\u0e66\u0e67\7\u0194\2\2\u0e67\u0e69\7"+
		"\u00a3\2\2\u0e68\u0e65\3\2\2\2\u0e68\u0e69\3\2\2\2\u0e69\u0127\3\2\2\2"+
		"\u0e6a\u0e6b\7\u0193\2\2\u0e6b\u0e6d\5\u012a\u0096\2\u0e6c\u0e6e\5\u01f8"+
		"\u00fd\2\u0e6d\u0e6c\3\2\2\2\u0e6d\u0e6e\3\2\2\2\u0e6e\u0129\3\2\2\2\u0e6f"+
		"\u0e74\5\u012c\u0097\2\u0e70\u0e71\7\u0245\2\2\u0e71\u0e73\5\u012c\u0097"+
		"\2\u0e72\u0e70\3\2\2\2\u0e73\u0e76\3\2\2\2\u0e74\u0e72\3\2\2\2\u0e74\u0e75"+
		"\3\2\2\2\u0e75\u012b\3\2\2\2\u0e76\u0e74\3\2\2\2\u0e77\u0e79\7\u0195\2"+
		"\2\u0e78\u0e77\3\2\2\2\u0e78\u0e79\3\2\2\2\u0e79\u0e7a\3\2\2\2\u0e7a\u0e7b"+
		"\5,\27\2\u0e7b\u012d\3\2\2\2\u0e7c\u0e7d\7$\2\2\u0e7d\u0e7e\7\u01a3\2"+
		"\2\u0e7e\u0e7f\5\u0132\u009a\2\u0e7f\u0e82\7\u0163\2\2\u0e80\u0e83\5\u0146"+
		"\u00a4\2\u0e81\u0e83\7\u01a1\2\2\u0e82\u0e80\3\2\2\2\u0e82\u0e81\3\2\2"+
		"\2\u0e83\u012f\3\2\2\2\u0e84\u0e85\7\u00e0\2\2\u0e85\u0e8b\7}\2\2\u0e86"+
		"\u0e89\7\u0191\2\2\u0e87\u0e8a\5\u0210\u0109\2\u0e88\u0e8a\5\u0146\u00a4"+
		"\2\u0e89\u0e87\3\2\2\2\u0e89\u0e88\3\2\2\2\u0e8a\u0e8c\3\2\2\2\u0e8b\u0e86"+
		"\3\2\2\2\u0e8b\u0e8c\3\2\2\2\u0e8c\u0e8d\3\2\2\2\u0e8d\u0e8e\7\u01a3\2"+
		"\2\u0e8e\u0e8f\5\u0134\u009b\2\u0e8f\u0e92\7\u0163\2\2\u0e90\u0e93\5\u0146"+
		"\u00a4\2\u0e91\u0e93\7\u01a1\2\2\u0e92\u0e90\3\2\2\2\u0e92\u0e91\3\2\2"+
		"\2\u0e93\u0131\3\2\2\2\u0e94\u0e95\7\5\2\2\u0e95\u0e96\7\u008e\2\2\u0e96"+
		"\u0f11\5\u0210\u0109\2\u0e97\u0e98\t\62\2\2\u0e98\u0e99\5\u026a\u0136"+
		"\2\u0e99\u0e9a\5\u0142\u00a2\2\u0e9a\u0f11\3\2\2\2\u0e9b\u0e9c\7\u017b"+
		"\2\2\u0e9c\u0e9d\7\u024b\2\2\u0e9d\u0e9e\5\u0224\u0113\2\u0e9e\u0e9f\7"+
		"\u0176\2\2\u0e9f\u0ea0\5\u0224\u0113\2\u0ea0\u0ea1\7\u024c\2\2\u0ea1\u0f11"+
		"\3\2\2\2\u0ea2\u0ea3\7\u015b\2\2\u0ea3\u0f11\5\u0210\u0109\2\u0ea4\u0ea5"+
		"\7\u017e\2\2\u0ea5\u0f11\5\u026a\u0136\2\u0ea6\u0ea7\7\u017f\2\2\u0ea7"+
		"\u0ea8\5\u0210\u0109\2\u0ea8\u0eaa\7\u01a3\2\2\u0ea9\u0eab\7G\2\2\u0eaa"+
		"\u0ea9\3\2\2\2\u0eaa\u0eab\3\2\2\2\u0eab\u0eac\3\2\2\2\u0eac\u0ead\5\u026a"+
		"\u0136\2\u0ead\u0f11\3\2\2\2\u0eae\u0eaf\7.\2\2\u0eaf\u0f11\5\u026a\u0136"+
		"\2\u0eb0\u0eb1\7\67\2\2\u0eb1\u0f11\5\u0210\u0109\2\u0eb2\u0eb3\7G\2\2"+
		"\u0eb3\u0f11\5\u026a\u0136\2\u0eb4\u0eb5\7V\2\2\u0eb5\u0f11\5\u0210\u0109"+
		"\2\u0eb6\u0eb7\7P\2\2\u0eb7\u0eb8\7\u0106\2\2\u0eb8\u0f11\5\u0210\u0109"+
		"\2\u0eb9\u0eba\7\u0192\2\2\u0eba\u0ebb\7\66\2\2\u0ebb\u0ebc\7\u0121\2"+
		"\2\u0ebc\u0f11\5\u0210\u0109\2\u0ebd\u0ebf\7\u0192\2\2\u0ebe\u0ebd\3\2"+
		"\2\2\u0ebe\u0ebf\3\2\2\2\u0ebf\u0ec0\3\2\2\2\u0ec0\u0ec1\7\u01af\2\2\u0ec1"+
		"\u0f11\5\u026a\u0136\2\u0ec2\u0ec3\7q\2\2\u0ec3\u0f11\5\u026a\u0136\2"+
		"\u0ec4\u0ec5\7\177\2\2\u0ec5\u0ec6\7\u009d\2\2\u0ec6\u0f11\7\u0262\2\2"+
		"\u0ec7\u0ec9\7\u008c\2\2\u0ec8\u0ec7\3\2\2\2\u0ec8\u0ec9\3\2\2\2\u0ec9"+
		"\u0eca\3\2\2\2\u0eca\u0ecb\7\u011a\2\2\u0ecb\u0f11\5\u026a\u0136\2\u0ecc"+
		"\u0ecd\7\u00a2\2\2\u0ecd\u0f11\5\u00dco\2\u0ece\u0ecf\7\u00a2\2\2\u0ecf"+
		"\u0ed0\t\63\2\2\u0ed0\u0ed1\5\u026a\u0136\2\u0ed1\u0ed2\7\u01b7\2\2\u0ed2"+
		"\u0ed3\5\u0210\u0109\2\u0ed3\u0f11\3\2\2\2\u0ed4\u0ed5\7\u00b2\2\2\u0ed5"+
		"\u0ed6\5\u0210\u0109\2\u0ed6\u0ed7\7\u01a3\2\2\u0ed7\u0ed8\5\u026a\u0136"+
		"\2\u0ed8\u0f11\3\2\2\2\u0ed9\u0edb\7\u00b9\2\2\u0eda\u0ed9\3\2\2\2\u0eda"+
		"\u0edb\3\2\2\2\u0edb\u0edc\3\2\2\2\u0edc\u0edd\7~\2\2\u0edd\u0f11\5\u026a"+
		"\u0136\2\u0ede\u0edf\7\u00bd\2\2\u0edf\u0f11\5\u0210\u0109\2\u0ee0\u0ee1"+
		"\7\u00d3\2\2\u0ee1\u0f11\5\u0210\u0109\2\u0ee2\u0ee3\7\u00d9\2\2\u0ee3"+
		"\u0ee4\5\u0210\u0109\2\u0ee4\u0ee5\7\u01a3\2\2\u0ee5\u0ee6\5\u026a\u0136"+
		"\2\u0ee6\u0f11\3\2\2\2\u0ee7\u0ee8\7\u00db\2\2\u0ee8\u0f11\5\u0210\u0109"+
		"\2\u0ee9\u0eea\7\u00e1\2\2\u0eea\u0f11\5\u026a\u0136\2\u0eeb\u0eec\7\u00e4"+
		"\2\2\u0eec\u0f11\5\u0210\u0109\2\u0eed\u0eee\7\u00f2\2\2\u0eee\u0f11\5"+
		"\u026a\u0136\2\u0eef\u0ef0\7\u00f9\2\2\u0ef0\u0f11\5\u0210\u0109\2\u0ef1"+
		"\u0ef2\7\u00fe\2\2\u0ef2\u0f11\5\u0210\u0109\2\u0ef3\u0ef4\7\u0102\2\2"+
		"\u0ef4\u0ef5\7\u00de\2\2\u0ef5\u0ef6\7(\2\2\u0ef6\u0f11\5\u026a\u0136"+
		"\2\u0ef7\u0ef8\7\u0102\2\2\u0ef8\u0ef9\7\u00de\2\2\u0ef9\u0efa\7C\2\2"+
		"\u0efa\u0f11\5\u026a\u0136\2\u0efb\u0efc\7\u0102\2\2\u0efc\u0efd\7\u00de"+
		"\2\2\u0efd\u0efe\7\u00ac\2\2\u0efe\u0f11\5\u026a\u0136\2\u0eff\u0f00\7"+
		"\u0102\2\2\u0f00\u0f01\7\u00de\2\2\u0f01\u0f02\7\u0100\2\2\u0f02\u0f11"+
		"\5\u026a\u0136\2\u0f03\u0f04\7\u0105\2\2\u0f04\u0f05\7\u0191\2\2\u0f05"+
		"\u0f06\5\u026a\u0136\2\u0f06\u0f07\7~\2\2\u0f07\u0f08\5\u0210\u0109\2"+
		"\u0f08\u0f11\3\2\2\2\u0f09\u0f0a\7\u0106\2\2\u0f0a\u0f0b\5\u0210\u0109"+
		"\2\u0f0b\u0f0c\7\u01a3\2\2\u0f0c\u0f0d\5\u026a\u0136\2\u0f0d\u0f11\3\2"+
		"\2\2\u0f0e\u0f0f\7\u0109\2\2\u0f0f\u0f11\5\u026a\u0136\2\u0f10\u0e94\3"+
		"\2\2\2\u0f10\u0e97\3\2\2\2\u0f10\u0e9b\3\2\2\2\u0f10\u0ea2\3\2\2\2\u0f10"+
		"\u0ea4\3\2\2\2\u0f10\u0ea6\3\2\2\2\u0f10\u0eae\3\2\2\2\u0f10\u0eb0\3\2"+
		"\2\2\u0f10\u0eb2\3\2\2\2\u0f10\u0eb4\3\2\2\2\u0f10\u0eb6\3\2\2\2\u0f10"+
		"\u0eb9\3\2\2\2\u0f10\u0ebe\3\2\2\2\u0f10\u0ec2\3\2\2\2\u0f10\u0ec4\3\2"+
		"\2\2\u0f10\u0ec8\3\2\2\2\u0f10\u0ecc\3\2\2\2\u0f10\u0ece\3\2\2\2\u0f10"+
		"\u0ed4\3\2\2\2\u0f10\u0eda\3\2\2\2\u0f10\u0ede\3\2\2\2\u0f10\u0ee0\3\2"+
		"\2\2\u0f10\u0ee2\3\2\2\2\u0f10\u0ee7\3\2\2\2\u0f10\u0ee9\3\2\2\2\u0f10"+
		"\u0eeb\3\2\2\2\u0f10\u0eed\3\2\2\2\u0f10\u0eef\3\2\2\2\u0f10\u0ef1\3\2"+
		"\2\2\u0f10\u0ef3\3\2\2\2\u0f10\u0ef7\3\2\2\2\u0f10\u0efb\3\2\2\2\u0f10"+
		"\u0eff\3\2\2\2\u0f10\u0f03\3\2\2\2\u0f10\u0f09\3\2\2\2\u0f10\u0f0e\3\2"+
		"\2\2\u0f11\u0133\3\2\2\2\u0f12\u0f13\t\62\2\2\u0f13\u0f14\5\u026a\u0136"+
		"\2\u0f14\u0f15\5\u0142\u00a2\2\u0f15\u0f40\3\2\2\2\u0f16\u0f17\7\u017e"+
		"\2\2\u0f17\u0f40\5\u026a\u0136\2\u0f18\u0f19\7\67\2\2\u0f19\u0f40\5\u0210"+
		"\u0109\2\u0f1a\u0f1b\7G\2\2\u0f1b\u0f40\5\u026a\u0136\2\u0f1c\u0f1d\7"+
		"P\2\2\u0f1d\u0f1e\7\u0106\2\2\u0f1e\u0f40\5\u0210\u0109\2\u0f1f\u0f21"+
		"\7\u0192\2\2\u0f20\u0f1f\3\2\2\2\u0f20\u0f21\3\2\2\2\u0f21\u0f22\3\2\2"+
		"\2\u0f22\u0f23\7\u01af\2\2\u0f23\u0f40\5\u026a\u0136\2\u0f24\u0f25\7\177"+
		"\2\2\u0f25\u0f26\7\u009d\2\2\u0f26\u0f40\7\u0262\2\2\u0f27\u0f29\7\u008c"+
		"\2\2\u0f28\u0f27\3\2\2\2\u0f28\u0f29\3\2\2\2\u0f29\u0f2a\3\2\2\2\u0f2a"+
		"\u0f2b\7\u011a\2\2\u0f2b\u0f40\5\u026a\u0136\2\u0f2c\u0f2e\7\u00b9\2\2"+
		"\u0f2d\u0f2c\3\2\2\2\u0f2d\u0f2e\3\2\2\2\u0f2e\u0f2f\3\2\2\2\u0f2f\u0f30"+
		"\7~\2\2\u0f30\u0f40\5\u026a\u0136\2\u0f31\u0f32\7\u00bd\2\2\u0f32\u0f40"+
		"\5";
	private static final String _serializedATNSegment2 =
		"\u0210\u0109\2\u0f33\u0f34\7\u00d3\2\2\u0f34\u0f40\5\u0210\u0109\2\u0f35"+
		"\u0f36\7\u00db\2\2\u0f36\u0f40\5\u0210\u0109\2\u0f37\u0f38\7\u00e1\2\2"+
		"\u0f38\u0f40\5\u026a\u0136\2\u0f39\u0f3a\7\u00f9\2\2\u0f3a\u0f40\5\u0210"+
		"\u0109\2\u0f3b\u0f3c\7\u00fe\2\2\u0f3c\u0f40\5\u0210\u0109\2\u0f3d\u0f3e"+
		"\7\u0109\2\2\u0f3e\u0f40\5\u026a\u0136\2\u0f3f\u0f12\3\2\2\2\u0f3f\u0f16"+
		"\3\2\2\2\u0f3f\u0f18\3\2\2\2\u0f3f\u0f1a\3\2\2\2\u0f3f\u0f1c\3\2\2\2\u0f3f"+
		"\u0f20\3\2\2\2\u0f3f\u0f24\3\2\2\2\u0f3f\u0f28\3\2\2\2\u0f3f\u0f2d\3\2"+
		"\2\2\u0f3f\u0f31\3\2\2\2\u0f3f\u0f33\3\2\2\2\u0f3f\u0f35\3\2\2\2\u0f3f"+
		"\u0f37\3\2\2\2\u0f3f\u0f39\3\2\2\2\u0f3f\u0f3b\3\2\2\2\u0f3f\u0f3d\3\2"+
		"\2\2\u0f40\u0135\3\2\2\2\u0f41\u0f42\7\u01a5\2\2\u0f42\u0f44\7\u00cc\2"+
		"\2\u0f43\u0f41\3\2\2\2\u0f43\u0f44\3\2\2\2\u0f44\u0f45\3\2\2\2\u0f45\u0f46"+
		"\t\22\2\2\u0f46\u0f4c\5\u0140\u00a1\2\u0f47\u0f4a\7\u00d1\2\2\u0f48\u0f4b"+
		"\5\u0224\u0113\2\u0f49\u0f4b\5\u013c\u009f\2\u0f4a\u0f48\3\2\2\2\u0f4a"+
		"\u0f49\3\2\2\2\u0f4b\u0f4d\3\2\2\2\u0f4c\u0f47\3\2\2\2\u0f4c\u0f4d\3\2"+
		"\2\2\u0f4d\u0f4e\3\2\2\2\u0f4e\u0f4f\5\u0138\u009d\2\u0f4f\u0137\3\2\2"+
		"\2\u0f50\u0f52\5h\65\2\u0f51\u0f50\3\2\2\2\u0f52\u0f53\3\2\2\2\u0f53\u0f51"+
		"\3\2\2\2\u0f53\u0f54\3\2\2\2\u0f54\u0f56\3\2\2\2\u0f55\u0f57\5\u01e2\u00f2"+
		"\2\u0f56\u0f55\3\2\2\2\u0f56\u0f57\3\2\2\2\u0f57\u0139\3\2\2\2\u0f58\u0f59"+
		"\7\u0191\2\2\u0f59\u0f5a\7\u0109\2\2\u0f5a\u0f5b\5\u0224\u0113\2\u0f5b"+
		"\u013b\3\2\2\2\u0f5c\u0f5d\7\u01af\2\2\u0f5d\u0f5e\7\u024b\2\2\u0f5e\u0f63"+
		"\5\u013e\u00a0\2\u0f5f\u0f60\7\u0245\2\2\u0f60\u0f62\5\u013e\u00a0\2\u0f61"+
		"\u0f5f\3\2\2\2\u0f62\u0f65\3\2\2\2\u0f63\u0f61\3\2\2\2\u0f63\u0f64\3\2"+
		"\2\2\u0f64\u0f66\3\2\2\2\u0f65\u0f63\3\2\2\2\u0f66\u0f67\7\u024c\2\2\u0f67"+
		"\u013d\3\2\2\2\u0f68\u0f69\5\u0210\u0109\2\u0f69\u0f6a\5\u0224\u0113\2"+
		"\u0f6a\u013f\3\2\2\2\u0f6b\u0f6c\5\u026a\u0136\2\u0f6c\u0f6d\5\u0142\u00a2"+
		"\2\u0f6d\u0141\3\2\2\2\u0f6e\u0f7d\7\u024b\2\2\u0f6f\u0f74\5\u0148\u00a5"+
		"\2\u0f70\u0f71\7\u0245\2\2\u0f71\u0f73\5\u0148\u00a5\2\u0f72\u0f70\3\2"+
		"\2\2\u0f73\u0f76\3\2\2\2\u0f74\u0f72\3\2\2\2\u0f74\u0f75\3\2\2\2\u0f75"+
		"\u0f78\3\2\2\2\u0f76\u0f74\3\2\2\2\u0f77\u0f6f\3\2\2\2\u0f77\u0f78\3\2"+
		"\2\2\u0f78\u0f7a\3\2\2\2\u0f79\u0f7b\5\u0144\u00a3\2\u0f7a\u0f79\3\2\2"+
		"\2\u0f7a\u0f7b\3\2\2\2\u0f7b\u0f7e\3\2\2\2\u0f7c\u0f7e\7\u024f\2\2\u0f7d"+
		"\u0f77\3\2\2\2\u0f7d\u0f7c\3\2\2\2\u0f7e\u0f7f\3\2\2\2\u0f7f\u0f80\7\u024c"+
		"\2\2\u0f80\u0143\3\2\2\2\u0f81\u0f82\7\u01a6\2\2\u0f82\u0f83\7\26\2\2"+
		"\u0f83\u0f88\5\u0148\u00a5\2\u0f84\u0f85\7\u0245\2\2\u0f85\u0f87\5\u0148"+
		"\u00a5\2\u0f86\u0f84\3\2\2\2\u0f87\u0f8a\3\2\2\2\u0f88\u0f86\3\2\2\2\u0f88"+
		"\u0f89\3\2\2\2\u0f89\u0145\3\2\2\2\u0f8a\u0f88\3\2\2\2\u0f8b\u0f8f\7\u0268"+
		"\2\2\u0f8c\u0f8e\7\u026f\2\2\u0f8d\u0f8c\3\2\2\2\u0f8e\u0f91\3\2\2\2\u0f8f"+
		"\u0f8d\3\2\2\2\u0f8f\u0f90\3\2\2\2\u0f90\u0f92\3\2\2\2\u0f91\u0f8f\3\2"+
		"\2\2\u0f92\u0f95\7\u0270\2\2\u0f93\u0f95\7\u0267\2\2\u0f94\u0f8b\3\2\2"+
		"\2\u0f94\u0f93\3\2\2\2\u0f95\u0147\3\2\2\2\u0f96\u0f98\5\u014a\u00a6\2"+
		"\u0f97\u0f96\3\2\2\2\u0f97\u0f98\3\2\2\2\u0f98\u0f9a\3\2\2\2\u0f99\u0f9b"+
		"\5\u0212\u010a\2\u0f9a\u0f99\3\2\2\2\u0f9a\u0f9b\3\2\2\2\u0f9b\u0f9c\3"+
		"\2\2\2\u0f9c\u0f9f\5\u0224\u0113\2\u0f9d\u0f9e\t\64\2\2\u0f9e\u0fa0\5"+
		"\u0230\u0119\2\u0f9f\u0f9d\3\2\2\2\u0f9f\u0fa0\3\2\2\2\u0fa0\u0149\3\2"+
		"\2\2\u0fa1\u0fa2\t\65\2\2\u0fa2\u014b\3\2\2\2\u0fa3\u0fa5\t\66\2\2\u0fa4"+
		"\u0fa3\3\2\2\2\u0fa4\u0fa5\3\2\2\2\u0fa5\u0fa6\3\2\2\2\u0fa6\u0fa8\7\u00e1"+
		"\2\2\u0fa7\u0fa9\5\u019a\u00ce\2\u0fa8\u0fa7\3\2\2\2\u0fa8\u0fa9\3\2\2"+
		"\2\u0fa9\u0faa\3\2\2\2\u0faa\u0fae\5\u026a\u0136\2\u0fab\u0fad\5\u014e"+
		"\u00a8\2\u0fac\u0fab\3\2\2\2\u0fad\u0fb0\3\2\2\2\u0fae\u0fac\3\2\2\2\u0fae"+
		"\u0faf\3\2\2\2\u0faf\u014d\3\2\2\2\u0fb0\u0fae\3\2\2\2\u0fb1\u0fb2\7\u0176"+
		"\2\2\u0fb2\u0fd6\t\67\2\2\u0fb3\u0fb4\7\u00e1\2\2\u0fb4\u0fb5\7\u0094"+
		"\2\2\u0fb5\u0fd6\5\u026a\u0136\2\u0fb6\u0fb8\7p\2\2\u0fb7\u0fb9\7\26\2"+
		"\2\u0fb8\u0fb7\3\2\2\2\u0fb8\u0fb9\3\2\2\2\u0fb9\u0fba\3\2\2\2\u0fba\u0fd6"+
		"\5\u0152\u00aa\2\u0fbb\u0fbc\7\u0090\2\2\u0fbc\u0fc0\5\u0152\u00aa\2\u0fbd"+
		"\u0fbe\7\u0098\2\2\u0fbe\u0fc0\7\u0090\2\2\u0fbf\u0fbb\3\2\2\2\u0fbf\u0fbd"+
		"\3\2\2\2\u0fc0\u0fd6\3\2\2\2\u0fc1\u0fc2\7\u008d\2\2\u0fc2\u0fc6\5\u0152"+
		"\u00aa\2\u0fc3\u0fc4\7\u0098\2\2\u0fc4\u0fc6\7\u008d\2\2\u0fc5\u0fc1\3"+
		"\2\2\2\u0fc5\u0fc3\3\2\2\2\u0fc6\u0fd6\3\2\2\2\u0fc7\u0fc9\7\u00f0\2\2"+
		"\u0fc8\u0fca\7\u01bc\2\2\u0fc9\u0fc8\3\2\2\2\u0fc9\u0fca\3\2\2\2\u0fca"+
		"\u0fcb\3\2\2\2\u0fcb\u0fd6\5\u0152\u00aa\2\u0fcc\u0fcd\7\27\2\2\u0fcd"+
		"\u0fd6\5\u0152\u00aa\2\u0fce\u0fd0\7\u0098\2\2\u0fcf\u0fce\3\2\2\2\u0fcf"+
		"\u0fd0\3\2\2\2\u0fd0\u0fd1\3\2\2\2\u0fd1\u0fd6\7\65\2\2\u0fd2\u0fd3\7"+
		"\u00a9\2\2\u0fd3\u0fd4\7\26\2\2\u0fd4\u0fd6\5\u026a\u0136\2\u0fd5\u0fb1"+
		"\3\2\2\2\u0fd5\u0fb3\3\2\2\2\u0fd5\u0fb6\3\2\2\2\u0fd5\u0fbf\3\2\2\2\u0fd5"+
		"\u0fc5\3\2\2\2\u0fd5\u0fc7\3\2\2\2\u0fd5\u0fcc\3\2\2\2\u0fd5\u0fcf\3\2"+
		"\2\2\u0fd5\u0fd2\3\2\2\2\u0fd6\u014f\3\2\2\2\u0fd7\u0fd9\5\u0154\u00ab"+
		"\2\u0fd8\u0fd7\3\2\2\2\u0fd8\u0fd9\3\2\2\2\u0fd9\u0fda\3\2\2\2\u0fda\u0fdb"+
		"\7\u0262\2\2\u0fdb\u0151\3\2\2\2\u0fdc\u0fde\5\u0154\u00ab\2\u0fdd\u0fdc"+
		"\3\2\2\2\u0fdd\u0fde\3\2\2\2\u0fde\u0fdf\3\2\2\2\u0fdf\u0fe0\5\u023e\u0120"+
		"\2\u0fe0\u0153\3\2\2\2\u0fe1\u0fe2\t8\2\2\u0fe2\u0155\3\2\2\2\u0fe3\u0fe5"+
		"\7\u00db\2\2\u0fe4\u0fe6\5\u019a\u00ce\2\u0fe5\u0fe4\3\2\2\2\u0fe5\u0fe6"+
		"\3\2\2\2\u0fe6\u0fe8\3\2\2\2\u0fe7\u0fe9\5\u0210\u0109\2\u0fe8\u0fe7\3"+
		"\2\2\2\u0fe8\u0fe9\3\2\2\2\u0fe9\u0fec\3\2\2\2\u0fea\u0feb\7\u0159\2\2"+
		"\u0feb\u0fed\5,\27\2\u0fec\u0fea\3\2\2\2\u0fec\u0fed\3\2\2\2\u0fed\u0157"+
		"\3\2\2\2\u0fee\u0fef\7\u00b2\2\2\u0fef\u0ff0\5\u0210\u0109\2\u0ff0\u0ff1"+
		"\7\u01a3\2\2\u0ff1\u0ff4\5\u026a\u0136\2\u0ff2\u0ff3\7\u0176\2\2\u0ff3"+
		"\u0ff5\t9\2\2\u0ff4\u0ff2\3\2\2\2\u0ff4\u0ff5\3\2\2\2\u0ff5\u0ff8\3\2"+
		"\2\2\u0ff6\u0ff7\7\u0191\2\2\u0ff7\u0ff9\t:\2\2\u0ff8\u0ff6\3\2\2\2\u0ff8"+
		"\u0ff9\3\2\2\2\u0ff9\u1003\3\2\2\2\u0ffa\u0ffb\7\u01b1\2\2\u0ffb\u1000"+
		"\5,\27\2\u0ffc\u0ffd\7\u0245\2\2\u0ffd\u0fff\5,\27\2\u0ffe\u0ffc\3\2\2"+
		"\2\u0fff\u1002\3\2\2\2\u1000\u0ffe\3\2\2\2\u1000\u1001\3\2\2\2\u1001\u1004"+
		"\3\2\2\2\u1002\u1000\3\2\2\2\u1003\u0ffa\3\2\2\2\u1003\u1004\3\2\2\2\u1004"+
		"\u1007\3\2\2\2\u1005\u1006\7\u01b7\2\2\u1006\u1008\5\u0230\u0119\2\u1007"+
		"\u1005\3\2\2\2\u1007\u1008\3\2\2\2\u1008\u100c\3\2\2\2\u1009\u100a\7\u01bc"+
		"\2\2\u100a\u100b\7\u017c\2\2\u100b\u100d\5\u0230\u0119\2\u100c\u1009\3"+
		"\2\2\2\u100c\u100d\3\2\2\2\u100d\u0159\3\2\2\2\u100e\u100f\7\u00b2\2\2"+
		"\u100f\u1010\5\u0210\u0109\2\u1010\u1011\7\u01a3\2\2\u1011\u1012\5\u026a"+
		"\u0136\2\u1012\u1013\5\u01ee\u00f8\2\u1013\u102d\3\2\2\2\u1014\u1015\7"+
		"\u00b2\2\2\u1015\u1016\5\u0210\u0109\2\u1016\u1017\7\u01a3\2\2\u1017\u1021"+
		"\5\u026a\u0136\2\u1018\u1019\7\u01b1\2\2\u1019\u101e\5,\27\2\u101a\u101b"+
		"\7\u0245\2\2\u101b\u101d\5,\27\2\u101c\u101a\3\2\2\2\u101d\u1020\3\2\2"+
		"\2\u101e\u101c\3\2\2\2\u101e\u101f\3\2\2\2\u101f\u1022\3\2\2\2\u1020\u101e"+
		"\3\2\2\2\u1021\u1018\3\2\2\2\u1021\u1022\3\2\2\2\u1022\u1025\3\2\2\2\u1023"+
		"\u1024\7\u01b7\2\2\u1024\u1026\5\u0230\u0119\2\u1025\u1023\3\2\2\2\u1025"+
		"\u1026\3\2\2\2\u1026\u102a\3\2\2\2\u1027\u1028\7\u01bc\2\2\u1028\u1029"+
		"\7\u017c\2\2\u1029\u102b\5\u0230\u0119\2\u102a\u1027\3\2\2\2\u102a\u102b"+
		"\3\2\2\2\u102b\u102d\3\2\2\2\u102c\u100e\3\2\2\2\u102c\u1014\3\2\2\2\u102d"+
		"\u015b\3\2\2\2\u102e\u1030\7\u00b2\2\2\u102f\u1031\5\u0198\u00cd\2\u1030"+
		"\u102f\3\2\2\2\u1030\u1031\3\2\2\2\u1031\u1032\3\2\2\2\u1032\u1033\5\u0210"+
		"\u0109\2\u1033\u1034\7\u01a3\2\2\u1034\u1036\5\u026a\u0136\2\u1035\u1037"+
		"\5\u01f8\u00fd\2\u1036\u1035\3\2\2\2\u1036\u1037\3\2\2\2\u1037\u015d\3"+
		"\2\2\2\u1038\u1039\7\u00f9\2\2\u1039\u103a\5\u0210\u0109\2\u103a\u103b"+
		"\7*\2\2\u103b\u103c\7\u0267\2\2\u103c\u103d\7\u00bd\2\2\u103d\u103f\5"+
		"\u02b6\u015c\2\u103e\u1040\5\u01e2\u00f2\2\u103f\u103e\3\2\2\2\u103f\u1040"+
		"\3\2\2\2\u1040\u015f\3\2\2\2\u1041\u1042\7\u00f9\2\2\u1042\u1043\5\u0210"+
		"\u0109\2\u1043\u1044\5\u0162\u00b2\2\u1044\u0161\3\2\2\2\u1045\u1046\7"+
		"*\2\2\u1046\u1059\5\u0146\u00a4\2\u1047\u1048\7\u00e6\2\2\u1048\u1049"+
		"\7\u00bd\2\2\u1049\u104b\5\u02b6\u015c\2\u104a\u104c\5\u01e2\u00f2\2\u104b"+
		"\u104a\3\2\2\2\u104b\u104c\3\2\2\2\u104c\u1059\3\2\2\2\u104d\u104e\7\u00c6"+
		"\2\2\u104e\u1050\7\u00bd\2\2\u104f\u1051\5\u01e2\u00f2\2\u1050\u104f\3"+
		"\2\2\2\u1050\u1051\3\2\2\2\u1051\u1059\3\2\2\2\u1052\u1059\7K\2\2\u1053"+
		"\u1059\7D\2\2\u1054\u1055\7\u00e6\2\2\u1055\u1059\5\u01dc\u00ef\2\u1056"+
		"\u1059\5\u01ec\u00f7\2\u1057\u1059\5\u01ee\u00f8\2\u1058\u1045\3\2\2\2"+
		"\u1058\u1047\3\2\2\2\u1058\u104d\3\2\2\2\u1058\u1052\3\2\2\2\u1058\u1053"+
		"\3\2\2\2\u1058\u1054\3\2\2\2\u1058\u1056\3\2\2\2\u1058\u1057\3\2\2\2\u1059"+
		"\u0163\3\2\2\2\u105a\u105b\7\u017b\2\2\u105b\u105c\7\u024b\2\2\u105c\u105d"+
		"\5\u0224\u0113\2\u105d\u105e\7\u0176\2\2\u105e\u105f\5\u0224\u0113\2\u105f"+
		"\u1069\7\u024c\2\2\u1060\u1061\7\u01bc\2\2\u1061\u1062\7^\2\2\u1062\u1063"+
		"\5\u026a\u0136\2\u1063\u1064\5\u0142\u00a2\2\u1064\u106a\3\2\2\2\u1065"+
		"\u1066\7\u011f\2\2\u1066\u106a\7^\2\2\u1067\u1068\7\u01bc\2\2\u1068\u106a"+
		"\7\u0135\2\2\u1069\u1060\3\2\2\2\u1069\u1065\3\2\2\2\u1069\u1067\3\2\2"+
		"\2\u106a\u106f\3\2\2\2\u106b\u106c\7\u0176\2\2\u106c\u1070\7\17\2\2\u106d"+
		"\u106e\7\u0176\2\2\u106e\u1070\7l\2\2\u106f\u106b\3\2\2\2\u106f\u106d"+
		"\3\2\2\2\u106f\u1070\3\2\2\2\u1070\u0165\3\2\2\2\u1071\u1073\7\u017b\2"+
		"\2\u1072\u1074\5\u0198\u00cd\2\u1073\u1072\3\2\2\2\u1073\u1074\3\2\2\2"+
		"\u1074\u1075\3\2\2\2\u1075\u1076\7\u024b\2\2\u1076\u1077\5\u0224\u0113"+
		"\2\u1077\u1078\7\u0176\2\2\u1078\u1079\5\u0224\u0113\2\u1079\u107b\7\u024c"+
		"\2\2\u107a\u107c\5\u01f8\u00fd\2\u107b\u107a\3\2\2\2\u107b\u107c\3\2\2"+
		"\2\u107c\u0167\3\2\2\2\u107d\u107e\7\u00a2\2\2\u107e\u107f\7X\2\2\u107f"+
		"\u1080\5\u026a\u0136\2\u1080\u1081\7\u01b7\2\2\u1081\u1082\5\u0210\u0109"+
		"\2\u1082\u0169\3\2\2\2\u1083\u1084\7\u00a2\2\2\u1084\u1085\7X\2\2\u1085"+
		"\u1086\5\u026a\u0136\2\u1086\u1087\7\u01b7\2\2\u1087\u1088\5\u0210\u0109"+
		"\2\u1088\u1089\5\u016c\u00b7\2\u1089\u016b\3\2\2\2\u108a\u10a0\5\u01ee"+
		"\u00f8\2\u108b\u10a0\5\u01ec\u00f7\2\u108c\u10a0\5\u01f0\u00f9\2\u108d"+
		"\u108e\7\7\2\2\u108e\u1093\5\u016e\u00b8\2\u108f\u1090\7\u0245\2\2\u1090"+
		"\u1092\5\u016e\u00b8\2\u1091\u108f\3\2\2\2\u1092\u1095\3\2\2\2\u1093\u1091"+
		"\3\2\2\2\u1093\u1094\3\2\2\2\u1094\u10a0\3\2\2\2\u1095\u1093\3\2\2\2\u1096"+
		"\u1097\7I\2\2\u1097\u109c\5\u0170\u00b9\2\u1098\u1099\7\u0245\2\2\u1099"+
		"\u109b\5\u0170\u00b9\2\u109a\u1098\3\2\2\2\u109b\u109e\3\2\2\2\u109c\u109a"+
		"\3\2\2\2\u109c\u109d\3\2\2\2\u109d\u10a0\3\2\2\2\u109e\u109c\3\2\2\2\u109f"+
		"\u108a\3\2\2\2\u109f\u108b\3\2\2\2\u109f\u108c\3\2\2\2\u109f\u108d\3\2"+
		"\2\2\u109f\u1096\3\2\2\2\u10a0\u016d\3\2\2\2\u10a1\u10a2\7\u00a2\2\2\u10a2"+
		"\u10a3\5\u023e\u0120\2\u10a3\u10aa\5\u00dco\2\u10a4\u10a5\7\u0191\2\2"+
		"\u10a5\u10ab\7\u00de\2\2\u10a6\u10a7\7\u0191\2\2\u10a7\u10a8\7\u01a6\2"+
		"\2\u10a8\u10a9\7\26\2\2\u10a9\u10ab\5\u026a\u0136\2\u10aa\u10a4\3\2\2"+
		"\2\u10aa\u10a6\3\2\2\2\u10aa\u10ab\3\2\2\2\u10ab\u10c0\3\2\2\2\u10ac\u10ad"+
		"\7^\2\2\u10ad\u10bb\5\u023e\u0120\2\u10ae\u10b1\7\u024b\2\2\u10af\u10b2"+
		"\5\u0224\u0113\2\u10b0\u10b2\7\u013c\2\2\u10b1\u10af\3\2\2\2\u10b1\u10b0"+
		"\3\2\2\2\u10b2\u10b8\3\2\2\2\u10b3\u10b6\7\u0245\2\2\u10b4\u10b7\5\u0224"+
		"\u0113\2\u10b5\u10b7\7\u013c\2\2\u10b6\u10b4\3\2\2\2\u10b6\u10b5\3\2\2"+
		"\2\u10b7\u10b9\3\2\2\2\u10b8\u10b3\3\2\2\2\u10b8\u10b9\3\2\2\2\u10b9\u10ba"+
		"\3\2\2\2\u10ba\u10bc\7\u024c\2\2\u10bb\u10ae\3\2\2\2\u10bb\u10bc\3\2\2"+
		"\2\u10bc\u10bd\3\2\2\2\u10bd\u10be\5\u0246\u0124\2\u10be\u10c0\3\2\2\2"+
		"\u10bf\u10a1\3\2\2\2\u10bf\u10ac\3\2\2\2\u10c0\u016f\3\2\2\2\u10c1\u10c2"+
		"\t;\2\2\u10c2\u10c3\5\u023e\u0120\2\u10c3\u10c6\7\u024b\2\2\u10c4\u10c7"+
		"\5\u0224\u0113\2\u10c5\u10c7\7\u013c\2\2\u10c6\u10c4\3\2\2\2\u10c6\u10c5"+
		"\3\2\2\2\u10c7\u10cd\3\2\2\2\u10c8\u10cb\7\u0245\2\2\u10c9\u10cc\5\u0224"+
		"\u0113\2\u10ca\u10cc\7\u013c\2\2\u10cb\u10c9\3\2\2\2\u10cb\u10ca\3\2\2"+
		"\2\u10cc\u10ce\3\2\2\2\u10cd\u10c8\3\2\2\2\u10cd\u10ce\3\2\2\2\u10ce\u10cf"+
		"\3\2\2\2\u10cf\u10d0\7\u024c\2\2\u10d0\u0171\3\2\2\2\u10d1\u10d2\7\u00a2"+
		"\2\2\u10d2\u10d4\7X\2\2\u10d3\u10d5\5\u0198\u00cd\2\u10d4\u10d3\3\2\2"+
		"\2\u10d4\u10d5\3\2\2\2\u10d5\u10d6\3\2\2\2\u10d6\u10d7\5\u026a\u0136\2"+
		"\u10d7\u10d8\7\u01b7\2\2\u10d8\u10da\5\u0210\u0109\2\u10d9\u10db\5\u01f8"+
		"\u00fd\2\u10da\u10d9\3\2\2\2\u10da\u10db\3\2\2\2\u10db\u0173\3\2\2\2\u10dc"+
		"\u10dd\7\u00a2\2\2\u10dd\u10de\7 \2\2\u10de\u10e0\5\u026a\u0136\2\u10df"+
		"\u10e1\7\u0187\2\2\u10e0\u10df\3\2\2\2\u10e0\u10e1\3\2\2\2\u10e1\u10e2"+
		"\3\2\2\2\u10e2\u10e3\7\u0191\2\2\u10e3\u10e4\7\u0109\2\2\u10e4\u10e5\5"+
		"\u0224\u0113\2\u10e5\u10e6\7\u01b7\2\2\u10e6\u10e9\5\u0210\u0109\2\u10e7"+
		"\u10e8\7X\2\2\u10e8\u10ea\5\u026a\u0136\2\u10e9\u10e7\3\2\2\2\u10e9\u10ea"+
		"\3\2\2\2\u10ea\u10eb\3\2\2\2\u10eb\u10ec\7\u0176\2\2\u10ec\u10f1\5\u0176"+
		"\u00bc\2\u10ed\u10ee\7\u0245\2\2\u10ee\u10f0\5\u0176\u00bc\2\u10ef\u10ed"+
		"\3\2\2\2\u10f0\u10f3\3\2\2\2\u10f1\u10ef\3\2\2\2\u10f1\u10f2\3\2\2\2\u10f2"+
		"\u0175\3\2\2\2\u10f3\u10f1\3\2\2\2\u10f4\u10f5\7\u00a2\2\2\u10f5\u10f6"+
		"\5\u023e\u0120\2\u10f6\u1102\5\u00fe\u0080\2\u10f7\u10fa\7\u024b\2\2\u10f8"+
		"\u10fb\5\u0224\u0113\2\u10f9\u10fb\7\u013c\2\2\u10fa\u10f8\3\2\2\2\u10fa"+
		"\u10f9\3\2\2\2\u10fb\u10fc\3\2\2\2\u10fc\u10ff\7\u0245\2\2\u10fd\u1100"+
		"\5\u0224\u0113\2\u10fe\u1100\7\u013c\2\2\u10ff\u10fd\3\2\2\2\u10ff\u10fe"+
		"\3\2\2\2\u1100\u1101\3\2\2\2\u1101\u1103\7\u024c\2\2\u1102\u10f7\3\2\2"+
		"\2\u1102\u1103\3\2\2\2\u1103\u110a\3\2\2\2\u1104\u1105\7\u0191\2\2\u1105"+
		"\u110b\7\u00de\2\2\u1106\u1107\7\u0191\2\2\u1107\u1108\7\u01a6\2\2\u1108"+
		"\u1109\7\26\2\2\u1109\u110b\5\u026a\u0136\2\u110a\u1104\3\2\2\2\u110a"+
		"\u1106\3\2\2\2\u110a\u110b\3\2\2\2\u110b\u1122\3\2\2\2\u110c\u110d\7^"+
		"\2\2\u110d\u111b\5\u023e\u0120\2\u110e\u1111\7\u024b\2\2\u110f\u1112\5"+
		"\u0224\u0113\2\u1110\u1112\7\u013c\2\2\u1111\u110f\3\2\2\2\u1111\u1110"+
		"\3\2\2\2\u1112\u1118\3\2\2\2\u1113\u1116\7\u0245\2\2\u1114\u1117\5\u0224"+
		"\u0113\2\u1115\u1117\7\u013c\2\2\u1116\u1114\3\2\2\2\u1116\u1115\3\2\2"+
		"\2\u1117\u1119\3\2\2\2\u1118\u1113\3\2\2\2\u1118\u1119\3\2\2\2\u1119\u111a"+
		"\3\2\2\2\u111a\u111c\7\u024c\2\2\u111b\u110e\3\2\2\2\u111b\u111c\3\2\2"+
		"\2\u111c\u111d\3\2\2\2\u111d\u111e\5\u0246\u0124\2\u111e\u1122\3\2\2\2"+
		"\u111f\u1120\7\u00f5\2\2\u1120\u1122\5\u0224\u0113\2\u1121\u10f4\3\2\2"+
		"\2\u1121\u110c\3\2\2\2\u1121\u111f\3\2\2\2\u1122\u0177\3\2\2\2\u1123\u1124"+
		"\7\u00a2\2\2\u1124\u1125\7 \2\2\u1125\u1126\5\u026a\u0136\2\u1126\u1127"+
		"\7\u01b7\2\2\u1127\u112b\5\u0210\u0109\2\u1128\u112c\5\u01ee\u00f8\2\u1129"+
		"\u112c\5\u01ec\u00f7\2\u112a\u112c\5\u01f0\u00f9\2\u112b\u1128\3\2\2\2"+
		"\u112b\u1129\3\2\2\2\u112b\u112a\3\2\2\2\u112c\u0179\3\2\2\2\u112d\u112e"+
		"\7\u00a2\2\2\u112e\u1130\7 \2\2\u112f\u1131\5\u0198\u00cd\2\u1130\u112f"+
		"\3\2\2\2\u1130\u1131\3\2\2\2\u1131\u1132\3\2\2\2\u1132\u1133\5\u026a\u0136"+
		"\2\u1133\u1134\7\u01b7\2\2\u1134\u1136\5\u0210\u0109\2\u1135\u1137\5\u01f8"+
		"\u00fd\2\u1136\u1135\3\2\2\2\u1136\u1137\3\2\2\2\u1137\u017b\3\2\2\2\u1138"+
		"\u113a\7\u0187\2\2\u1139\u1138\3\2\2\2\u1139\u113a\3\2\2\2\u113a\u113b"+
		"\3\2\2\2\u113b\u113c\7.\2\2\u113c\u113d\5\u026a\u0136\2\u113d\u113e\7"+
		"\u0191\2\2\u113e\u113f\7\u0267\2\2\u113f\u1140\7\u01b1\2\2\u1140\u1141"+
		"\7\u0267\2\2\u1141\u1142\7\u0193\2\2\u1142\u1143\5\u026a\u0136\2\u1143"+
		"\u017d\3\2\2\2\u1144\u1145\7.\2\2\u1145\u1149\5\u026a\u0136\2\u1146\u114a"+
		"\5\u01ee\u00f8\2\u1147\u114a\5\u01ec\u00f7\2\u1148\u114a\5\u01f0\u00f9"+
		"\2\u1149\u1146\3\2\2\2\u1149\u1147\3\2\2\2\u1149\u1148\3\2\2\2\u114a\u017f"+
		"\3\2\2\2\u114b\u114c\7\u00bd\2\2\u114c\u115a\5\u0210\u0109\2\u114d\u114e"+
		"\7\u0191\2\2\u114e\u114f\7\u01af\2\2\u114f\u1154\5\u0186\u00c4\2\u1150"+
		"\u1151\7\u0245\2\2\u1151\u1153\5\u0186\u00c4\2\u1152\u1150\3\2\2\2\u1153"+
		"\u1156\3\2\2\2\u1154\u1152\3\2\2\2\u1154\u1155\3\2\2\2\u1155\u115b\3\2"+
		"\2\2\u1156\u1154\3\2\2\2\u1157\u1158\7\u0191\2\2\u1158\u1159\7\u0170\2"+
		"\2\u1159\u115b\7\u00fd\2\2\u115a\u114d\3\2\2\2\u115a\u1157\3\2\2\2\u115a"+
		"\u115b\3\2\2\2\u115b\u115d\3\2\2\2\u115c\u115e\5\u01e2\u00f2\2\u115d\u115c"+
		"\3\2\2\2\u115d\u115e\3\2\2\2\u115e\u0181\3\2\2\2\u115f\u1160\7\u00bd\2"+
		"\2\u1160\u1161\5\u0210\u0109\2\u1161\u1162\5\u0184\u00c3\2\u1162\u0183"+
		"\3\2\2\2\u1163\u1172\5\u01ee\u00f8\2\u1164\u1172\5\u01ec\u00f7\2\u1165"+
		"\u1166\7\u00e6\2\2\u1166\u1172\5\u01dc\u00ef\2\u1167\u1168\t<\2\2\u1168"+
		"\u1169\7\u01af\2\2\u1169\u116e\5\u0186\u00c4\2\u116a\u116b\7\u0245\2\2"+
		"\u116b\u116d\5\u0186\u00c4\2\u116c\u116a\3\2\2\2\u116d\u1170\3\2\2\2\u116e"+
		"\u116c\3\2\2\2\u116e\u116f\3\2\2\2\u116f\u1172\3\2\2\2\u1170\u116e\3\2"+
		"\2\2\u1171\u1163\3\2\2\2\u1171\u1164\3\2\2\2\u1171\u1165\3\2\2\2\u1171"+
		"\u1167\3\2\2\2\u1172\u0185\3\2\2\2\u1173\u1175\7\u01a4\2\2\u1174\u1173"+
		"\3\2\2\2\u1174\u1175\3\2\2\2\u1175\u1176\3\2\2\2\u1176\u1178\5\u026a\u0136"+
		"\2\u1177\u1179\7\u024f\2\2\u1178\u1177\3\2\2\2\u1178\u1179\3\2\2\2\u1179"+
		"\u0187\3\2\2\2\u117a\u117b\7\u0106\2\2\u117b\u117c\5\u0210\u0109\2\u117c"+
		"\u117d\7\u01a3\2\2\u117d\u1183\5\u026a\u0136\2\u117e\u1184\5\u01ee\u00f8"+
		"\2\u117f\u1180\7A\2\2\u1180\u1181\7\u01a3\2\2\u1181\u1182\7V\2\2\u1182"+
		"\u1184\5\u0210\u0109\2\u1183\u117e\3\2\2\2\u1183\u117f\3\2\2\2\u1184\u0189"+
		"\3\2\2\2\u1185\u1186\7\u00d9\2\2\u1186\u1187\5\u0210\u0109\2\u1187\u1188"+
		"\7\u01a3\2\2\u1188\u1189\5\u026a\u0136\2\u1189\u118a\5\u01ee\u00f8\2\u118a"+
		"\u018b\3\2\2\2\u118b\u118e\5\u0190\u00c9\2\u118c\u118e\5\u018e\u00c8\2"+
		"\u118d\u118b\3\2\2\2\u118d\u118c\3\2\2\2\u118e\u018d\3\2\2\2\u118f\u1190"+
		"\7/\2\2\u1190\u1191\5\60\31\2\u1191\u1197\7\u0193\2\2\u1192\u1194\7\u00bc"+
		"\2\2\u1193\u1192\3\2\2\2\u1193\u1194\3\2\2\2\u1194\u1195\3\2\2\2\u1195"+
		"\u1198\7\u0267\2\2\u1196\u1198\7\u00f3\2\2\u1197\u1193\3\2\2\2\u1197\u1196"+
		"\3\2\2\2\u1198\u11a3\3\2\2\2\u1199\u119b\7\u01bc\2\2\u119a\u1199\3\2\2"+
		"\2\u119a\u119b\3\2\2\2\u119b\u11a1\3\2\2\2\u119c\u119d\7\u024b\2\2\u119d"+
		"\u119e\5\u0192\u00ca\2\u119e\u119f\7\u024c\2\2\u119f\u11a2\3\2\2\2\u11a0"+
		"\u11a2\5\u0192\u00ca\2\u11a1\u119c\3\2\2\2\u11a1\u11a0\3\2\2\2\u11a2\u11a4"+
		"\3\2\2\2\u11a3\u119a\3\2\2\2\u11a3\u11a4\3\2\2\2\u11a4\u11a7\3\2\2\2\u11a5"+
		"\u11a6\7\u01ba\2\2\u11a6\u11a8\5\u0230\u0119\2\u11a7\u11a5\3\2\2\2\u11a7"+
		"\u11a8\3\2\2\2\u11a8\u018f\3\2\2\2\u11a9\u11af\7/\2\2\u11aa\u11b0\5\60"+
		"\31\2\u11ab\u11ac\7\u024b\2\2\u11ac\u11ad\5\20\t\2\u11ad\u11ae\7\u024c"+
		"\2\2\u11ae\u11b0\3\2\2\2\u11af\u11aa\3\2\2\2\u11af\u11ab\3\2\2\2\u11b0"+
		"\u11b1\3\2\2\2\u11b1\u11b7\7\u01b1\2\2\u11b2\u11b4\7\u00bc\2\2\u11b3\u11b2"+
		"\3\2\2\2\u11b3\u11b4\3\2\2\2\u11b4\u11b5\3\2\2\2\u11b5\u11b8\7\u0267\2"+
		"\2\u11b6\u11b8\7\u00f4\2\2\u11b7\u11b3\3\2\2\2\u11b7\u11b6\3\2\2\2\u11b8"+
		"\u11c3\3\2\2\2\u11b9\u11bb\7\u01bc\2\2\u11ba\u11b9\3\2\2\2\u11ba\u11bb"+
		"\3\2\2\2\u11bb\u11c1\3\2\2\2\u11bc\u11bd\7\u024b\2\2\u11bd\u11be\5\u0192"+
		"\u00ca\2\u11be\u11bf\7\u024c\2\2\u11bf\u11c2\3\2\2\2\u11c0\u11c2\5\u0192"+
		"\u00ca\2\u11c1\u11bc\3\2\2\2\u11c1\u11c0\3\2\2\2\u11c2\u11c4\3\2\2\2\u11c3"+
		"\u11ba\3\2\2\2\u11c3\u11c4\3\2\2\2\u11c4\u0191\3\2\2\2\u11c5\u11cc\5\u0194"+
		"\u00cb\2\u11c6\u11c8\7\u0245\2\2\u11c7\u11c6\3\2\2\2\u11c7\u11c8\3\2\2"+
		"\2\u11c8\u11c9\3\2\2\2\u11c9\u11cb\5\u0194\u00cb\2\u11ca\u11c7\3\2\2\2"+
		"\u11cb\u11ce\3\2\2\2\u11cc\u11ca\3\2\2\2\u11cc\u11cd\3\2\2\2\u11cd\u0193"+
		"\3\2\2\2\u11ce\u11cc\3\2\2\2\u11cf\u11d1\7\u01d5\2\2\u11d0\u11cf\3\2\2"+
		"\2\u11d0\u11d1\3\2\2\2\u11d1\u11d2\3\2\2\2\u11d2\u120c\t=\2\2\u11d3\u11d5"+
		"\7\u00a0\2\2\u11d4\u11d6\5\u0240\u0121\2\u11d5\u11d4\3\2\2\2\u11d5\u11d6"+
		"\3\2\2\2\u11d6\u120c\3\2\2\2\u11d7\u11d9\7\u015f\2\2\u11d8\u11da\5\u0240"+
		"\u0121\2\u11d9\u11d8\3\2\2\2\u11d9\u11da\3\2\2\2\u11da\u120c\3\2\2\2\u11db"+
		"\u11dd\7?\2\2\u11dc\u11de\7\u0176\2\2\u11dd\u11dc\3\2\2\2\u11dd\u11de"+
		"\3\2\2\2\u11de\u11df\3\2\2\2\u11df\u120c\7\u0267\2\2\u11e0\u11e2\7\u01a1"+
		"\2\2\u11e1\u11e3\7\u0176\2\2\u11e2\u11e1\3\2\2\2\u11e2\u11e3\3\2\2\2\u11e3"+
		"\u11e4\3\2\2\2\u11e4\u120c\7\u0267\2\2\u11e5\u11e7\7e\2\2\u11e6\u11e8"+
		"\5\u0240\u0121\2\u11e7\u11e6\3\2\2\2\u11e7\u11e8\3\2\2\2\u11e8\u120c\3"+
		"\2\2\2\u11e9\u11ea\7\u00be\2\2\u11ea\u120c\7\u0267\2\2\u11eb\u11ec\7O"+
		"\2\2\u11ec\u120c\7\u0267\2\2\u11ed\u11ee\7\\\2\2\u11ee\u11f1\7\u00be\2"+
		"\2\u11ef\u11f2\7\u024f\2\2\u11f0\u11f2\5\u02b6\u015c\2\u11f1\u11ef\3\2"+
		"\2\2\u11f1\u11f0\3\2\2\2\u11f2\u120c\3\2\2\2\u11f3\u11f9\7\u01d4\2\2\u11f4"+
		"\u11fa\7\u024f\2\2\u11f5\u11f6\7\u024b\2\2\u11f6\u11f7\5\u02b6\u015c\2"+
		"\u11f7\u11f8\7\u024c\2\2\u11f8\u11fa\3\2\2\2\u11f9\u11f4\3\2\2\2\u11f9"+
		"\u11f5\3\2\2\2\u11fa\u120c\3\2\2\2\u11fb\u11fc\7\\\2\2\u11fc\u11fd\7\u01a0"+
		"\2\2\u11fd\u11fe\7\u01a1\2\2\u11fe\u120c\5\u02b6\u015c\2\u11ff\u1200\7"+
		"\u01d2\2\2\u1200\u1201\7\u024b\2\2\u1201\u1202\5\u02b6\u015c\2\u1202\u1203"+
		"\7\u024c\2\2\u1203\u120c\3\2\2\2\u1204\u1205\7\u01d3\2\2\u1205\u1206\7"+
		"\u024b\2\2\u1206\u1207\5\u02b6\u015c\2\u1207\u1208\7\u024c\2\2\u1208\u120c"+
		"\3\2\2\2\u1209\u120a\7L\2\2\u120a\u120c\7\u0267\2\2\u120b\u11d0\3\2\2"+
		"\2\u120b\u11d3\3\2\2\2\u120b\u11d7\3\2\2\2\u120b\u11db\3\2\2\2\u120b\u11e0"+
		"\3\2\2\2\u120b\u11e5\3\2\2\2\u120b\u11e9\3\2\2\2\u120b\u11eb\3\2\2\2\u120b"+
		"\u11ed\3\2\2\2\u120b\u11f3\3\2\2\2\u120b\u11fb\3\2\2\2\u120b\u11ff\3\2"+
		"\2\2\u120b\u1204\3\2\2\2\u120b\u1209\3\2\2\2\u120c\u0195\3\2\2\2\u120d"+
		"\u120e\7\u01a5\2\2\u120e\u1210\7\u00cc\2\2\u120f\u120d\3\2\2\2\u120f\u1210"+
		"\3\2\2\2\u1210\u1212\3\2\2\2\u1211\u1213\t\66\2\2\u1212\u1211\3\2\2\2"+
		"\u1212\u1213\3\2\2\2\u1213\u1215\3\2\2\2\u1214\u1216\7\u00c3\2\2\u1215"+
		"\u1214\3\2\2\2\u1215\u1216\3\2\2\2\u1216\u1218\3\2\2\2\u1217\u1219\7\u008c"+
		"\2\2\u1218\u1217\3\2\2\2\u1218\u1219\3\2\2\2\u1219\u121a\3\2\2\2\u121a"+
		"\u121c\7\u011a\2\2\u121b\u121d\5\u019a\u00ce\2\u121c\u121b\3\2\2\2\u121c"+
		"\u121d\3\2\2\2\u121d\u121e\3\2\2\2\u121e\u1220\5\u026a\u0136\2\u121f\u1221"+
		"\5\u019c\u00cf\2\u1220\u121f\3\2\2\2\u1220\u1221\3\2\2\2\u1221\u1224\3"+
		"\2\2\2\u1222\u1223\7\u01b7\2\2\u1223\u1225\5\u0210\u0109\2\u1224\u1222"+
		"\3\2\2\2\u1224\u1225\3\2\2\2\u1225\u1228\3\2\2\2\u1226\u1227\7\u01bc\2"+
		"\2\u1227\u1229\5\u01dc\u00ef\2\u1228\u1226\3\2\2\2\u1228\u1229\3\2\2\2"+
		"\u1229\u122b\3\2\2\2\u122a\u122c\5\u01e8\u00f5\2\u122b\u122a\3\2\2\2\u122b"+
		"\u122c\3\2\2\2\u122c\u122d\3\2\2\2\u122d\u122e\7\u0176\2\2\u122e\u1230"+
		"\5\u0270\u0139\2\u122f\u1231\5\u019e\u00d0\2\u1230\u122f\3\2\2\2\u1230"+
		"\u1231\3\2\2\2\u1231\u1237\3\2\2\2\u1232\u1234\7\u01bc\2\2\u1233\u1235"+
		"\7\u0098\2\2\u1234\u1233\3\2\2\2\u1234\u1235\3\2\2\2\u1235\u1236\3\2\2"+
		"\2\u1236\u1238\7\66\2\2\u1237\u1232\3\2\2\2\u1237\u1238\3\2\2\2\u1238"+
		"\u0197\3\2\2\2\u1239\u123a\7i\2\2\u123a\u123b\7\u0130\2\2\u123b\u0199"+
		"\3\2\2\2\u123c\u123d\7i\2\2\u123d\u123e\7\u01a0\2\2\u123e\u123f\7\u0130"+
		"\2\2\u123f\u019b\3\2\2\2\u1240\u1241\7\u024b\2\2\u1241\u1246\5\u0210\u0109"+
		"\2\u1242\u1243\7\u0245\2\2\u1243\u1245\5\u0210\u0109\2\u1244\u1242\3\2"+
		"\2\2\u1245\u1248\3\2\2\2\u1246\u1244\3\2\2\2\u1246\u1247\3\2\2\2\u1247"+
		"\u1249\3\2\2\2\u1248\u1246\3\2\2\2\u1249\u124a\7\u024c\2\2\u124a\u019d"+
		"\3\2\2\2\u124b\u124d\7\u01bc\2\2\u124c\u124e\t>\2\2\u124d\u124c\3\2\2"+
		"\2\u124d\u124e\3\2\2\2\u124e\u124f\3\2\2\2\u124f\u1250\7\u017c\2\2\u1250"+
		"\u1251\7\u00a3\2\2\u1251\u019f\3\2\2\2\u1252\u1254\t?\2\2\u1253\u1252"+
		"\3\2\2\2\u1253\u1254\3\2\2\2\u1254\u1255\3\2\2\2\u1255\u1258\t\66\2\2"+
		"\u1256\u1258\7\u0110\2\2\u1257\u1253\3\2\2\2\u1257\u1256\3\2\2\2\u1257"+
		"\u1258\3\2\2\2\u1258\u1259\3\2\2\2\u1259\u125b\7\u01af\2\2\u125a\u125c"+
		"\5\u019a\u00ce\2\u125b\u125a\3\2\2\2\u125b\u125c\3\2\2\2\u125c\u125d\3"+
		"\2\2\2\u125d\u125e\5\u026a\u0136\2\u125e\u1260\5\u01a6\u00d4\2\u125f\u1261"+
		"\5\u01b4\u00db\2\u1260\u125f\3\2\2\2\u1260\u1261\3\2\2\2\u1261\u1264\3"+
		"\2\2\2\u1262\u1263\7\u01b7\2\2\u1263\u1265\5\u0210\u0109\2\u1264\u1262"+
		"\3\2\2\2\u1264\u1265\3\2\2\2\u1265\u1267\3\2\2\2\u1266\u1268\5\u01e4\u00f3"+
		"\2\u1267\u1266\3\2\2\2\u1267\u1268\3\2\2\2\u1268\u126a\3\2\2\2\u1269\u126b"+
		"\5\u01e6\u00f4\2\u126a\u1269\3\2\2\2\u126a\u126b\3\2\2\2\u126b\u126d\3"+
		"\2\2\2\u126c\u126e\5\u01e8\u00f5\2\u126d\u126c\3\2\2\2\u126d\u126e\3\2"+
		"\2\2\u126e\u01a1\3\2\2\2\u126f\u1271\t?\2\2\u1270\u126f\3\2\2\2\u1270"+
		"\u1271\3\2\2\2\u1271\u1272\3\2\2\2\u1272\u1275\t\66\2\2\u1273\u1275\7"+
		"\u0110\2\2\u1274\u1270\3\2\2\2\u1274\u1273\3\2\2\2\u1274\u1275\3\2\2\2"+
		"\u1275\u1276\3\2\2\2\u1276\u1278\7\u01af\2\2\u1277\u1279\5\u019a\u00ce"+
		"\2\u1278\u1277\3\2\2\2\u1278\u1279\3\2\2\2\u1279\u127a\3\2\2\2\u127a\u127c"+
		"\5\u026a\u0136\2\u127b\u127d\5\u01d8\u00ed\2\u127c\u127b\3\2\2\2\u127c"+
		"\u127d\3\2\2\2\u127d\u1280\3\2\2\2\u127e\u127f\7\u01b7\2\2\u127f\u1281"+
		"\5\u0210\u0109\2\u1280\u127e\3\2\2\2\u1280\u1281\3\2\2\2\u1281\u1283\3"+
		"\2\2\2\u1282\u1284\5\u01e4\u00f3\2\u1283\u1282\3\2\2\2\u1283\u1284\3\2"+
		"\2\2\u1284\u1286\3\2\2\2\u1285\u1287\5\u01e6\u00f4\2\u1286\u1285\3\2\2"+
		"\2\u1286\u1287\3\2\2\2\u1287\u1289\3\2\2\2\u1288\u128a\5\u01e8\u00f5\2"+
		"\u1289\u1288\3\2\2\2\u1289\u128a\3\2\2\2\u128a\u128b\3\2\2\2\u128b\u128f"+
		"\7\u0176\2\2\u128c\u1290\5\u0270\u0139\2\u128d\u128e\7T\2\2\u128e\u1290"+
		"\5\u0246\u0124\2\u128f\u128c\3\2\2\2\u128f\u128d\3\2\2\2\u1290\u1296\3"+
		"\2\2\2\u1291\u1293\7\u01bc\2\2\u1292\u1294\7\u0098\2\2\u1293\u1292\3\2"+
		"\2\2\u1293\u1294\3\2\2\2\u1294\u1295\3\2\2\2\u1295\u1297\7\66\2\2\u1296"+
		"\u1291\3\2\2\2\u1296\u1297\3\2\2\2\u1297\u01a3\3\2\2\2\u1298\u1299\7\u0192"+
		"\2\2\u1299\u129b\7\u01af\2\2\u129a\u129c\5\u019a\u00ce\2\u129b\u129a\3"+
		"\2\2\2\u129b\u129c\3\2\2\2\u129c\u129d\3\2\2\2\u129d\u12a0\5\u026a\u0136"+
		"\2\u129e\u12a1\5\u01b0\u00d9\2\u129f\u12a1\5\u01a8\u00d5\2\u12a0\u129e"+
		"\3\2\2\2\u12a0\u129f\3\2\2\2\u12a1\u12a2\3\2\2\2\u12a2\u12a3\5\u01ba\u00de"+
		"\2\u12a3\u01a5\3\2\2\2\u12a4\u12a8\5\u01b0\u00d9\2\u12a5\u12a8\5\u01b2"+
		"\u00da\2\u12a6\u12a8\5\u01a8\u00d5\2\u12a7\u12a4\3\2\2\2\u12a7\u12a5\3"+
		"\2\2\2\u12a7\u12a6\3\2\2\2\u12a8\u01a7\3\2\2\2\u12a9\u12aa\7\u00ae\2\2"+
		"\u12aa\u12ab\7\u009e\2\2\u12ab\u12ad\5\u026a\u0136\2\u12ac\u12ae\5\u01c2"+
		"\u00e2\2\u12ad\u12ac\3\2\2\2\u12ad\u12ae\3\2\2\2\u12ae\u12af\3\2\2\2\u12af"+
		"\u12b0\5\u01aa\u00d6\2\u12b0\u01a9\3\2\2\2\u12b1\u12b2\7\u0191\2\2\u12b2"+
		"\u12b3\7\u014c\2\2\u12b3\u12b6\5\u01ac\u00d7\2\u12b4\u12b6\7\u0187\2\2"+
		"\u12b5\u12b1\3\2\2\2\u12b5\u12b4\3\2\2\2\u12b6\u01ab\3\2\2\2\u12b7\u12b8"+
		"\7\u0197\2\2\u12b8\u12b9\7\u024b\2\2\u12b9\u12be\5\u0230\u0119\2\u12ba"+
		"\u12bb\7\u0245\2\2\u12bb\u12bd\5\u0230\u0119\2\u12bc\u12ba\3\2\2\2\u12bd"+
		"\u12c0\3\2\2\2\u12be\u12bc\3\2\2\2\u12be\u12bf\3\2\2\2\u12bf\u12c1\3\2"+
		"\2\2\u12c0\u12be\3\2\2\2\u12c1\u12c2\7\u024c\2\2\u12c2\u12d1\3\2\2\2\u12c3"+
		"\u12c4\7\u0193\2\2\u12c4\u12c5\5\u01ae\u00d8\2\u12c5\u12c6\7\u01b1\2\2"+
		"\u12c6\u12c7\5\u01ae\u00d8\2\u12c7\u12d1\3\2\2\2\u12c8\u12c9\7\u01bc\2"+
		"\2\u12c9\u12ca\7\u024b\2\2\u12ca\u12cb\7\u01ef\2\2\u12cb\u12cc\7\u0262"+
		"\2\2\u12cc\u12cd\7\u0245\2\2\u12cd\u12ce\7\u0205\2\2\u12ce\u12cf\7\u0262"+
		"\2\2\u12cf\u12d1\7\u024c\2\2\u12d0\u12b7\3\2\2\2\u12d0\u12c3\3\2\2\2\u12d0"+
		"\u12c8\3\2\2\2\u12d1\u01ad\3\2\2\2\u12d2\u12d3\7\u024b\2\2\u12d3\u12d8"+
		"\5\u0230\u0119\2\u12d4\u12d5\7\u0245\2\2\u12d5\u12d7\5\u0230\u0119\2\u12d6"+
		"\u12d4\3\2\2\2\u12d7\u12da\3\2\2\2\u12d8\u12d6\3\2\2\2\u12d8\u12d9\3\2"+
		"\2\2\u12d9\u12db\3\2\2\2\u12da\u12d8\3\2\2\2\u12db\u12dc\7\u024c\2\2\u12dc"+
		"\u01af\3\2\2\2\u12dd\u12e6\7\u024b\2\2\u12de\u12e3\5\u01c4\u00e3\2\u12df"+
		"\u12e0\7\u0245\2\2\u12e0\u12e2\5\u01c4\u00e3\2\u12e1\u12df\3\2\2\2\u12e2"+
		"\u12e5\3\2\2\2\u12e3\u12e1\3\2\2\2\u12e3\u12e4\3\2\2\2\u12e4\u12e7\3\2"+
		"\2\2\u12e5\u12e3\3\2\2\2\u12e6\u12de\3\2\2\2\u12e6\u12e7\3\2\2\2\u12e7"+
		"\u12e8\3\2\2\2\u12e8\u12eb\7\u024c\2\2\u12e9\u12ea\7t\2\2\u12ea\u12ec"+
		"\5\u01d8\u00ed\2\u12eb\u12e9\3\2\2\2\u12eb\u12ec\3\2\2\2\u12ec\u01b1\3"+
		"\2\2\2\u12ed\u12ee\7\u009e\2\2\u12ee\u12f0\5\u0224\u0113\2\u12ef\u12f1"+
		"\5\u01c2\u00e2\2\u12f0\u12ef\3\2\2\2\u12f0\u12f1\3\2\2\2\u12f1\u01b3\3"+
		"\2\2\2\u12f2\u12f3\7\u00ae\2\2\u12f3\u12f4\7\26\2\2\u12f4\u12f5\5\u01b6"+
		"\u00dc\2\u12f5\u01b5\3\2\2\2\u12f6\u12f7\t@\2\2\u12f7\u12f8\7\u024b\2"+
		"\2\u12f8\u12fd\5\u01b8\u00dd\2\u12f9\u12fa\7\u0245\2\2\u12fa\u12fc\5\u01b8"+
		"\u00dd\2\u12fb\u12f9\3\2\2\2\u12fc\u12ff\3\2\2\2\u12fd\u12fb\3\2\2\2\u12fd"+
		"\u12fe\3\2\2\2\u12fe\u1300\3\2\2\2\u12ff\u12fd\3\2\2\2\u1300\u1301\7\u024c"+
		"\2\2\u1301\u01b7\3\2\2\2\u1302\u1304\5\u0230\u0119\2\u1303\u1305\5\u0210"+
		"\u0109\2\u1304\u1303\3\2\2\2\u1304\u1305\3\2\2\2\u1305\u01b9\3\2\2\2\u1306"+
		"\u1307\7\u00e4\2\2\u1307\u1309\5\u0210\u0109\2\u1308\u130a\5\u01bc\u00df"+
		"\2\u1309\u1308\3\2\2\2\u1309\u130a\3\2\2\2\u130a\u01bb\3\2\2\2\u130b\u130c"+
		"\7\u00a4\2\2\u130c\u130d\7\u024b\2\2\u130d\u1312\5\u01be\u00e0\2\u130e"+
		"\u130f\7\u0245\2\2\u130f\u1311\5\u01be\u00e0\2\u1310\u130e\3\2\2\2\u1311"+
		"\u1314\3\2\2\2\u1312\u1310\3\2\2\2\u1312\u1313\3\2\2\2\u1313\u1315\3\2"+
		"\2\2\u1314\u1312\3\2\2\2\u1315\u1316\7\u024c\2\2\u1316\u01bd\3\2\2\2\u1317"+
		"\u1319\t<\2\2\u1318\u1317\3\2\2\2\u1318\u1319\3\2\2\2\u1319\u131a\3\2"+
		"\2\2\u131a\u131c\5\u01c0\u00e1\2\u131b\u131d\5\u0146\u00a4\2\u131c\u131b"+
		"\3\2\2\2\u131c\u131d\3\2\2\2\u131d\u01bf\3\2\2\2\u131e\u1321\5\u0210\u0109"+
		"\2\u131f\u1321\7\u01b6\2\2\u1320\u131e\3\2\2\2\u1320\u131f\3\2\2\2\u1321"+
		"\u01c1\3\2\2\2\u1322\u1323\7\u024b\2\2\u1323\u1328\5\u01c6\u00e4\2\u1324"+
		"\u1325\7\u0245\2\2\u1325\u1327\5\u01c6\u00e4\2\u1326\u1324\3\2\2\2\u1327"+
		"\u132a\3\2\2\2\u1328\u1326\3\2\2\2\u1328\u1329\3\2\2\2\u1329\u132b\3\2"+
		"\2\2\u132a\u1328\3\2\2\2\u132b\u132c\7\u024c\2\2\u132c\u01c3\3\2\2\2\u132d"+
		"\u1338\5\u01c8\u00e5\2\u132e\u1338\5\u01cc\u00e7\2\u132f\u1330\7\u0167"+
		"\2\2\u1330\u1334\5\u026a\u0136\2\u1331\u1333\5\u01ca\u00e6\2\u1332\u1331"+
		"\3\2\2\2\u1333\u1336\3\2\2\2\u1334\u1332\3\2\2\2\u1334\u1335\3\2\2\2\u1335"+
		"\u1338\3\2\2\2\u1336\u1334\3\2\2\2\u1337\u132d\3\2\2\2\u1337\u132e\3\2"+
		"\2\2\u1337\u132f\3\2\2\2\u1338\u01c5\3\2\2\2\u1339\u133c\5\u0210\u0109"+
		"\2\u133a\u133b\7\u01bc\2\2\u133b\u133d\7\u00a4\2\2\u133c\u133a\3\2\2\2"+
		"\u133c\u133d\3\2\2\2\u133d\u1341\3\2\2\2\u133e\u1340\5\u01cc\u00e7\2\u133f"+
		"\u133e\3\2\2\2\u1340\u1343\3\2\2\2\u1341\u133f\3\2\2\2\u1341\u1342\3\2"+
		"\2\2\u1342\u1346\3\2\2\2\u1343\u1341\3\2\2\2\u1344\u1346\5\u01cc\u00e7"+
		"\2\u1345\u1339\3\2\2\2\u1345\u1344\3\2\2\2\u1346\u01c7\3\2\2\2\u1347\u1348"+
		"\5\u0210\u0109\2\u1348\u134a\5\u0224\u0113\2\u1349\u134b\5\u01bc\u00df"+
		"\2\u134a\u1349\3\2\2\2\u134a\u134b\3\2\2\2\u134b\u134d\3\2\2\2\u134c\u134e"+
		"\5\u01fa\u00fe\2\u134d\u134c\3\2\2\2\u134d\u134e\3\2\2\2\u134e\u1352\3"+
		"\2\2\2\u134f\u1351\5\u01cc\u00e7\2\u1350\u134f\3\2\2\2\u1351\u1354\3\2"+
		"\2\2\u1352\u1350\3\2\2\2\u1352\u1353\3\2\2\2\u1353\u01c9\3\2\2\2\u1354"+
		"\u1352\3\2\2\2\u1355\u1356\tA\2\2\u1356\u1357\tB\2\2\u1357\u01cb\3\2\2"+
		"\2\u1358\u1359\7\u017f\2\2\u1359\u135b\5\u0210\u0109\2\u135a\u1358\3\2"+
		"\2\2\u135a\u135b\3\2\2\2\u135b\u135c\3\2\2\2\u135c\u135e\5\u01ce\u00e8"+
		"\2\u135d\u135f\5d\63\2\u135e\u135d\3\2\2\2\u135e\u135f\3\2\2\2\u135f\u1361"+
		"\3\2\2\2\u1360\u1362\5f\64\2\u1361\u1360\3\2\2\2\u1361\u1362\3\2\2\2\u1362"+
		"\u01cd\3\2\2\2\u1363\u1366\7Q\2\2\u1364\u1365\7\u01b7\2\2\u1365\u1367"+
		"\5\u0210\u0109\2\u1366\u1364\3\2\2\2\u1366\u1367\3\2\2\2\u1367\u1368\3"+
		"\2\2\2\u1368\u1369\7\u024b\2\2\u1369\u136a\5\u029c\u014f\2\u136a\u136b"+
		"\7\u01bc\2\2\u136b\u1373\5\u01d0\u00e9\2\u136c\u136d\7\u0245\2\2\u136d"+
		"\u136e\5\u029c\u014f\2\u136e\u136f\7\u01bc\2\2\u136f\u1370\5\u01d0\u00e9"+
		"\2\u1370\u1372\3\2\2\2\u1371\u136c\3\2\2\2\u1372\u1375\3\2\2\2\u1373\u1371"+
		"\3\2\2\2\u1373\u1374\3\2\2\2\u1374\u1376\3\2\2\2\u1375\u1373\3\2\2\2\u1376"+
		"\u1377\7\u024c\2\2\u1377\u137a\5\u01d6\u00ec\2\u1378\u1379\7\u01ba\2\2"+
		"\u1379\u137b\5\u0230\u0119\2\u137a\u1378\3\2\2\2\u137a\u137b\3\2\2\2\u137b"+
		"\u13b1\3\2\2\2\u137c\u137d\7\u0192\2\2\u137d\u137e\7|\2\2\u137e\u1380"+
		"\5\u01d8\u00ed\2\u137f\u137c\3\2\2\2\u137f\u1380\3\2\2\2\u1380\u1381\3"+
		"\2\2\2\u1381\u1382\7\u01a9\2\2\u1382\u1384\5\u026a\u0136\2\u1383\u1385"+
		"\5\u01d8\u00ed\2\u1384\u1383\3\2\2\2\u1384\u1385\3\2\2\2\u1385\u138d\3"+
		"\2\2\2\u1386\u1387\7\u008b\2\2\u1387\u138c\tC\2\2\u1388\u1389\7\u01a3"+
		"\2\2\u1389\u138a\tD\2\2\u138a\u138c\5\u01ea\u00f6\2\u138b\u1386\3\2\2"+
		"\2\u138b\u1388\3\2\2\2\u138c\u138f\3\2\2\2\u138d\u138b\3\2\2\2\u138d\u138e"+
		"\3\2\2\2\u138e\u13b1\3\2\2\2\u138f\u138d\3\2\2\2\u1390\u1391\7\u017c\2"+
		"\2\u1391\u1392\7\u024b\2\2\u1392\u1393\5\u0230\u0119\2\u1393\u1396\7\u024c"+
		"\2\2\u1394\u1395\7\u0098\2\2\u1395\u1397\7s\2\2\u1396\u1394\3\2\2\2\u1396"+
		"\u1397\3\2\2\2\u1397\u13b1\3\2\2\2\u1398\u139a\7\u01a0\2\2\u1399\u1398"+
		"\3\2\2\2\u1399\u139a\3\2\2\2\u139a\u139b\3\2\2\2\u139b\u13b1\7\u01a1\2"+
		"\2\u139c\u13a0\7\u01b5\2\2\u139d\u139e\7\u01a8\2\2\u139e\u13a0\7|\2\2"+
		"\u139f\u139c\3\2\2\2\u139f\u139d\3\2\2\2\u13a0\u13a2\3\2\2\2\u13a1\u13a3"+
		"\5\u01d8\u00ed\2\u13a2\u13a1\3\2\2\2\u13a2\u13a3\3\2\2\2\u13a3\u13a4\3"+
		"\2\2\2\u13a4\u13b1\5\u01d6\u00ec\2\u13a5\u13a6\7\u0187\2\2\u13a6\u13b1"+
		"\5\u0230\u0119\2\u13a7\u13b1\5Z.\2\u13a8\u13a9\7`\2\2\u13a9\u13aa\7\r"+
		"\2\2\u13aa\u13ab\7\u0176\2\2\u13ab\u13ac\7\u024b\2\2\u13ac\u13ad\5\u0230"+
		"\u0119\2\u13ad\u13ae\7\u024c\2\2\u13ae\u13af\7\u00f6\2\2\u13af\u13b1\3"+
		"\2\2\2\u13b0\u1363\3\2\2\2\u13b0\u137f\3\2\2\2\u13b0\u1390\3\2\2\2\u13b0"+
		"\u1399\3\2\2\2\u13b0\u139f\3\2\2\2\u13b0\u13a5\3\2\2\2\u13b0\u13a7\3\2"+
		"\2\2\u13b0\u13a8\3\2\2\2\u13b1\u01cf\3\2\2\2\u13b2\u13c0\5\u0234\u011b"+
		"\2\u13b3\u13c0\7\u0242\2\2\u13b4\u13c0\7\u0246\2\2\u13b5\u13c0\7\u0247"+
		"\2\2\u13b6\u13c0\7\u0248\2\2\u13b7\u13c0\7\u0249\2\2\u13b8\u13c0\7\u024a"+
		"\2\2\u13b9\u13c0\7\u024d\2\2\u13ba\u13c0\7\u024e\2\2\u13bb\u13c0\7\u024f"+
		"\2\2\u13bc\u13c0\7\u0250\2\2\u13bd\u13c0\7\u0251\2\2\u13be\u13c0\7\u0252"+
		"\2\2\u13bf\u13b2\3\2\2\2\u13bf\u13b3\3\2\2\2\u13bf\u13b4\3\2\2\2\u13bf"+
		"\u13b5\3\2\2\2\u13bf\u13b6\3\2\2\2\u13bf\u13b7\3\2\2\2\u13bf\u13b8\3\2"+
		"\2\2\u13bf\u13b9\3\2\2\2\u13bf\u13ba\3\2\2\2\u13bf\u13bb\3\2\2\2\u13bf"+
		"\u13bc\3\2\2\2\u13bf\u13bd\3\2\2\2\u13bf\u13be\3\2\2\2\u13c0\u01d1\3\2"+
		"\2\2\u13c1\u13cf\5\u01d4\u00eb\2\u13c2\u13cf\7\u0242\2\2\u13c3\u13cf\7"+
		"\u0246\2\2\u13c4\u13cf\7\u0247\2\2\u13c5\u13cf\7\u0248\2\2\u13c6\u13cf"+
		"\7\u0249\2\2\u13c7\u13cf\7\u024a\2\2\u13c8\u13cf\7\u024d\2\2\u13c9\u13cf"+
		"\7\u024e\2\2\u13ca\u13cf\7\u024f\2\2\u13cb\u13cf\7\u0250\2\2\u13cc\u13cf"+
		"\7\u0251\2\2\u13cd\u13cf\7\u0252\2\2\u13ce\u13c1\3\2\2\2\u13ce\u13c2\3"+
		"\2\2\2\u13ce\u13c3\3\2\2\2\u13ce\u13c4\3\2\2\2\u13ce\u13c5\3\2\2\2\u13ce"+
		"\u13c6\3\2\2\2\u13ce\u13c7\3\2\2\2\u13ce\u13c8\3\2\2\2\u13ce\u13c9\3\2"+
		"\2\2\u13ce\u13ca\3\2\2\2\u13ce\u13cb\3\2\2\2\u13ce\u13cc\3\2\2\2\u13ce"+
		"\u13cd\3\2\2\2\u13cf\u01d3\3\2\2\2\u13d0\u13d1\tE\2\2\u13d1\u01d5\3\2"+
		"\2\2\u13d2\u13d4\5\u0096L\2\u13d3\u13d2\3\2\2\2\u13d3\u13d4\3\2\2\2\u13d4"+
		"\u13d6\3\2\2\2\u13d5\u13d7\5\u01e2\u00f2\2\u13d6\u13d5\3\2\2\2\u13d6\u13d7"+
		"\3\2\2\2\u13d7\u13de\3\2\2\2\u13d8\u13d9\7\u01b7\2\2\u13d9\u13dc\7q\2"+
		"\2\u13da\u13dd\5\u01e8\u00f5\2\u13db\u13dd\5\u026a\u0136\2\u13dc\u13da"+
		"\3\2\2\2\u13dc\u13db\3\2\2\2\u13dd\u13df\3\2\2\2\u13de\u13d8\3\2\2\2\u13de"+
		"\u13df\3\2\2\2\u13df\u01d7\3\2\2\2\u13e0\u13e1\7\u024b\2\2\u13e1\u13e2"+
		"\5\u01da\u00ee\2\u13e2\u13e3\7\u024c\2\2\u13e3\u01d9\3\2\2\2\u13e4\u13e9"+
		"\5\u026a\u0136\2\u13e5\u13e6\7\u0245\2\2\u13e6\u13e8\5\u026a\u0136\2\u13e7"+
		"\u13e5\3\2\2\2\u13e8\u13eb\3\2\2\2\u13e9\u13e7\3\2\2\2\u13e9\u13ea\3\2"+
		"\2\2\u13ea\u01db\3\2\2\2\u13eb\u13e9\3\2\2\2\u13ec\u13ed\7\u024b\2\2\u13ed"+
		"\u13f2\5\u01de\u00f0\2\u13ee\u13ef\7\u0245\2\2\u13ef\u13f1\5\u01de\u00f0"+
		"\2\u13f0\u13ee\3\2\2\2\u13f1\u13f4\3\2\2\2\u13f2\u13f0\3\2\2\2\u13f2\u13f3"+
		"\3\2\2\2\u13f3\u13f5\3\2\2\2\u13f4\u13f2\3\2\2\2\u13f5\u13f6\7\u024c\2"+
		"\2\u13f6\u01dd\3\2\2\2\u13f7\u13fa\5\u01e0\u00f1\2\u13f8\u13f9\7\u0242"+
		"\2\2\u13f9\u13fb\5\u0230\u0119\2\u13fa\u13f8\3\2\2\2\u13fa\u13fb\3\2\2"+
		"\2\u13fb\u01df\3\2\2\2\u13fc\u13ff\5\u0214\u010b\2\u13fd\u13fe\7\u0253"+
		"\2\2\u13fe\u1400\5\u0214\u010b\2\u13ff\u13fd\3\2\2\2\u13ff\u1400\3\2\2"+
		"\2\u1400\u01e1\3\2\2\2\u1401\u1402\7\u01bc\2\2\u1402\u1403\5\u01dc\u00ef"+
		"\2\u1403\u01e3\3\2\2\2\u1404\u140a\5\u01e2\u00f2\2\u1405\u1406\7\u01bc"+
		"\2\2\u1406\u140a\7\u00a0\2\2\u1407\u1408\7\u011f\2\2\u1408\u140a\7\u00a0"+
		"\2\2\u1409\u1404\3\2\2\2\u1409\u1405\3\2\2\2\u1409\u1407\3\2\2\2\u140a"+
		"\u01e5\3\2\2\2\u140b\u140c\7\u01a3\2\2\u140c\u1412\7&\2\2\u140d\u140e"+
		"\7\u00b6\2\2\u140e\u1413\7\u00d8\2\2\u140f\u1410\7>\2\2\u1410\u1413\7"+
		"\u00d8\2\2\u1411\u1413\7I\2\2\u1412\u140d\3\2\2\2\u1412\u140f\3\2\2\2"+
		"\u1412\u1411\3\2\2\2\u1413\u01e7\3\2\2\2\u1414\u1415\7\u00fe\2\2\u1415"+
		"\u1416\5\u0210\u0109\2\u1416\u01e9\3\2\2\2\u1417\u141d\5\u01f8\u00fd\2"+
		"\u1418\u1419\7\u00e6\2\2\u1419\u141d\tF\2\2\u141a\u141b\7\u0098\2\2\u141b"+
		"\u141d\7\6\2\2\u141c\u1417\3\2\2\2\u141c\u1418\3\2\2\2\u141c\u141a\3\2"+
		"\2\2\u141d\u01eb\3\2\2\2\u141e\u141f\7\u00aa\2\2\u141f\u1423\7\u01b1\2"+
		"\2\u1420\u1424\5\u0210\u0109\2\u1421\u1424\7\u0186\2\2\u1422\u1424\7\u01ac"+
		"\2\2\u1423\u1420\3\2\2\2\u1423\u1421\3\2\2\2\u1423\u1422\3\2\2\2\u1424"+
		"\u01ed\3\2\2\2\u1425\u1426\7\u00ca\2\2\u1426\u1427\7\u01b1\2\2\u1427\u1428"+
		"\5\u0210\u0109\2\u1428\u01ef\3\2\2\2\u1429\u142a\7\u00e6\2\2\u142a\u142b"+
		"\7\u00db\2\2\u142b\u142c\5\u0210\u0109\2\u142c\u01f1\3\2\2\2\u142d\u1439"+
		"\7\u01ab\2\2\u142e\u1439\7x\2\2\u142f\u1439\7\u0112\2\2\u1430\u1439\7"+
		">\2\2\u1431\u1439\7\u0107\2\2\u1432\u1439\7\u01a9\2\2\u1433\u1439\7\u0106"+
		"\2\2\u1434\u1436\7\u0170\2\2\u1435\u1437\7\u00b8\2\2\u1436\u1435\3\2\2"+
		"\2\u1436\u1437\3\2\2\2\u1437\u1439\3\2\2\2\u1438\u142d\3\2\2\2\u1438\u142e"+
		"\3\2\2\2\u1438\u142f\3\2\2\2\u1438\u1430\3\2\2\2\u1438\u1431\3\2\2\2\u1438"+
		"\u1432\3\2\2\2\u1438\u1433\3\2\2\2\u1438\u1434\3\2\2\2\u1439\u01f3\3\2"+
		"\2\2\u143a\u143b\tG\2\2\u143b\u01f5\3\2\2\2\u143c\u143d\7\u00ae\2\2\u143d"+
		"\u143e\7\26\2\2\u143e\u1443\5\u0230\u0119\2\u143f\u1440\7\u0245\2\2\u1440"+
		"\u1442\5\u0230\u0119\2\u1441\u143f\3\2\2\2\u1442\u1445\3\2\2\2\u1443\u1441"+
		"\3\2\2\2\u1443\u1444\3\2\2\2\u1444\u01f7\3\2\2\2\u1445\u1443\3\2\2\2\u1446"+
		"\u1447\tH\2\2\u1447\u01f9\3\2\2\2\u1448\u1449\7\u017d\2\2\u1449\u144a"+
		"\5\u026a\u0136\2\u144a\u01fb\3\2\2\2\u144b\u144e\5\u0210\u0109\2\u144c"+
		"\u144e\5\u01fe\u0100\2\u144d\u144b\3\2\2\2\u144d\u144c\3\2\2\2\u144e\u1450"+
		"\3\2\2\2\u144f\u1451\5\u0200\u0101\2\u1450\u144f\3\2\2\2\u1450\u1451\3"+
		"\2\2\2\u1451\u01fd\3\2\2\2\u1452\u1453\7\u0264\2\2\u1453\u01ff\3\2\2\2"+
		"\u1454\u1456\5\u0202\u0102\2\u1455\u1454\3\2\2\2\u1456\u1457\3\2\2\2\u1457"+
		"\u1455\3\2\2\2\u1457\u1458\3\2\2\2\u1458\u1462\3\2\2\2\u1459\u145b\5\u0202"+
		"\u0102\2\u145a\u1459\3\2\2\2\u145b\u145e\3\2\2\2\u145c\u145a\3\2\2\2\u145c"+
		"\u145d\3\2\2\2\u145d\u145f\3\2\2\2\u145e\u145c\3\2\2\2\u145f\u1460\7\u0253"+
		"\2\2\u1460\u1462\7\u024f\2\2\u1461\u1455\3\2\2\2\u1461\u145c\3\2\2\2\u1462"+
		"\u0201\3\2\2\2\u1463\u1464\7\u0253\2\2\u1464\u1473\5\u0214\u010b\2\u1465"+
		"\u1466\7\u0257\2\2\u1466\u1467\5\u0230\u0119\2\u1467\u1468\7\u0258\2\2"+
		"\u1468\u1473\3\2\2\2\u1469\u146b\7\u0257\2\2\u146a\u146c\5\u0230\u0119"+
		"\2\u146b\u146a\3\2\2\2\u146b\u146c\3\2\2\2\u146c\u146d\3\2\2\2\u146d\u146f"+
		"\7\u0243\2\2\u146e\u1470\5\u0230\u0119\2\u146f\u146e\3\2\2\2\u146f\u1470"+
		"\3\2\2\2\u1470\u1471\3\2\2\2\u1471\u1473\7\u0258\2\2\u1472\u1463\3\2\2"+
		"\2\u1472\u1465\3\2\2\2\u1472\u1469\3\2\2\2\u1473\u0203\3\2\2\2\u1474\u1476"+
		"\t#\2\2\u1475\u1477\5\u0198\u00cd\2\u1476\u1475\3\2\2\2\u1476\u1477\3"+
		"\2\2\2\u1477\u1478\3\2\2\2\u1478\u147a\5\u026a\u0136\2\u1479\u147b\5\u0142"+
		"\u00a2\2\u147a\u1479\3\2\2\2\u147a\u147b\3\2\2\2\u147b\u147d\3\2\2\2\u147c"+
		"\u147e\5\u01f8\u00fd\2\u147d\u147c\3\2\2\2\u147d\u147e\3\2\2\2\u147e\u0205"+
		"\3\2\2\2\u147f\u1481\7\u0106\2\2\u1480\u1482\5\u0198\u00cd\2\u1481\u1480"+
		"\3\2\2\2\u1481\u1482\3\2\2\2\u1482\u1483\3\2\2\2\u1483\u1484\5\u0210\u0109"+
		"\2\u1484\u1485\7\u01a3\2\2\u1485\u1487\5\u026a\u0136\2\u1486\u1488\5\u01f8"+
		"\u00fd\2\u1487\u1486\3\2\2\2\u1487\u1488\3\2\2\2\u1488\u0207\3\2\2\2\u1489"+
		"\u148b\7\u00d9\2\2\u148a\u148c\5\u0198\u00cd\2\u148b\u148a\3\2\2\2\u148b"+
		"\u148c\3\2\2\2\u148c\u148d\3\2\2\2\u148d\u148e\5\u0210\u0109\2\u148e\u148f"+
		"\7\u01a3\2\2\u148f\u1491\5\u026a\u0136\2\u1490\u1492\5\u01f8\u00fd\2\u1491"+
		"\u1490\3\2\2\2\u1491\u1492\3\2\2\2\u1492\u0209\3\2\2\2\u1493\u1494\7\5"+
		"\2\2\u1494\u14be\7\u008e\2\2\u1495\u14be\7\u015b\2\2\u1496\u14be\7.\2"+
		"\2\u1497\u14be\7\67\2\2\u1498\u14be\7G\2\2\u1499\u149a\7P\2\2\u149a\u14be"+
		"\7\u0106\2\2\u149b\u14be\7V\2\2\u149c\u14be\7\u0195\2\2\u149d\u149f\7"+
		"\u0192\2\2\u149e\u149d\3\2\2\2\u149e\u149f\3\2\2\2\u149f\u14a0\3\2\2\2"+
		"\u14a0\u14be\7\u01af\2\2\u14a1\u14a2\7\u0192\2\2\u14a2\u14a3\7\66\2\2"+
		"\u14a3\u14be\7\u0121\2\2\u14a4\u14a6\7q\2\2\u14a5\u14a7\7\u015c\2\2\u14a6"+
		"\u14a5\3\2\2\2\u14a6\u14a7\3\2\2\2\u14a7\u14be\3\2\2\2\u14a8\u14aa\7\u008c"+
		"\2\2\u14a9\u14a8\3\2\2\2\u14a9\u14aa\3\2\2\2\u14aa\u14ab\3\2\2\2\u14ab"+
		"\u14be\7\u011a\2\2\u14ac\u14ae\7\u00b9\2\2\u14ad\u14ac\3\2\2\2\u14ad\u14ae"+
		"\3\2\2\2\u14ae\u14af\3\2\2\2\u14af\u14be\7~\2\2\u14b0\u14be\7\u00bd\2"+
		"\2\u14b1\u14be\7\u00d3\2\2\u14b2\u14be\7\u00db\2\2\u14b3\u14be\7\u00e1"+
		"\2\2\u14b4\u14be\7\u00e4\2\2\u14b5\u14be\7\u00f2\2\2\u14b6\u14be\7\u00f9"+
		"\2\2\u14b7\u14be\7\u00fe\2\2\u14b8\u14be\7\u0109\2\2\u14b9\u14ba\7\u0102"+
		"\2\2\u14ba\u14bb\7\u00de\2\2\u14bb\u14be\t \2\2\u14bc\u14be\7\u01b6\2"+
		"\2\u14bd\u1493\3\2\2\2\u14bd\u1495\3\2\2\2\u14bd\u1496\3\2\2\2\u14bd\u1497"+
		"\3\2\2\2\u14bd\u1498\3\2\2\2\u14bd\u1499\3\2\2\2\u14bd\u149b\3\2\2\2\u14bd"+
		"\u149c\3\2\2\2\u14bd\u149e\3\2\2\2\u14bd\u14a1\3\2\2\2\u14bd\u14a4\3\2"+
		"\2\2\u14bd\u14a9\3\2\2\2\u14bd\u14ad\3\2\2\2\u14bd\u14b0\3\2\2\2\u14bd"+
		"\u14b1\3\2\2\2\u14bd\u14b2\3\2\2\2\u14bd\u14b3\3\2\2\2\u14bd\u14b4\3\2"+
		"\2\2\u14bd\u14b5\3\2\2\2\u14bd\u14b6\3\2\2\2\u14bd\u14b7\3\2\2\2\u14bd"+
		"\u14b8\3\2\2\2\u14bd\u14b9\3\2\2\2\u14bd\u14bc\3\2\2\2\u14be\u14bf\3\2"+
		"\2\2\u14bf\u14c0\5\u020c\u0107\2\u14c0\u020b\3\2\2\2\u14c1\u14c3\5\u0198"+
		"\u00cd\2\u14c2\u14c1\3\2\2\2\u14c2\u14c3\3\2\2\2\u14c3\u14c4\3\2\2\2\u14c4"+
		"\u14c6\5\u01da\u00ee\2\u14c5\u14c7\5\u01f8\u00fd\2\u14c6\u14c5\3\2\2\2"+
		"\u14c6\u14c7\3\2\2\2\u14c7\u020d\3\2\2\2\u14c8\u14cc\7\u0265\2\2\u14c9"+
		"\u14cc\7\u0266\2\2\u14ca\u14cc\5\u021e\u0110\2\u14cb\u14c8\3\2\2\2\u14cb"+
		"\u14c9\3\2\2\2\u14cb\u14ca\3\2\2\2\u14cc\u020f\3\2\2\2\u14cd\u14d1\5\u020e"+
		"\u0108\2\u14ce\u14d1\5\u0216\u010c\2\u14cf\u14d1\5\u0218\u010d\2\u14d0"+
		"\u14cd\3\2\2\2\u14d0\u14ce\3\2\2\2\u14d0\u14cf\3\2\2\2\u14d1\u0211\3\2"+
		"\2\2\u14d2\u14d6\5\u020e\u0108\2\u14d3\u14d6\5\u0216\u010c\2\u14d4\u14d6"+
		"\5\u021a\u010e\2\u14d5\u14d2\3\2\2\2\u14d5\u14d3\3\2\2\2\u14d5\u14d4\3"+
		"\2\2\2\u14d6\u0213\3\2\2\2\u14d7\u14dd\5\u020e\u0108\2\u14d8\u14dd\5\u021c"+
		"\u010f\2\u14d9\u14dd\5\u0216\u010c\2\u14da\u14dd\5\u021a\u010e\2\u14db"+
		"\u14dd\5\u0218\u010d\2\u14dc\u14d7\3\2\2\2\u14dc\u14d8\3\2\2\2\u14dc\u14d9"+
		"\3\2\2\2\u14dc\u14da\3\2\2\2\u14dc\u14db\3\2\2\2\u14dd\u0215\3\2\2\2\u14de"+
		"\u14df\tI\2\2\u14df\u0217\3\2\2\2\u14e0\u14e1\tJ\2\2\u14e1\u0219\3\2\2"+
		"\2\u14e2\u14e3\tK\2\2\u14e3\u021b\3\2\2\2\u14e4\u14e5\tL\2\2\u14e5\u021d"+
		"\3\2\2\2\u14e6\u14e7\tM\2\2\u14e7\u021f\3\2\2\2\u14e8\u14ee\5\u0212\u010a"+
		"\2\u14e9\u14ea\5\u0210\u0109\2\u14ea\u14eb\7\u0253\2\2\u14eb\u14ec\5\u0212"+
		"\u010a\2\u14ec\u14ee\3\2\2\2\u14ed\u14e8\3\2\2\2\u14ed\u14e9\3\2\2\2\u14ee"+
		"\u0221\3\2\2\2\u14ef\u14f4\5\u0224\u0113\2\u14f0\u14f1\7\u0245\2\2\u14f1"+
		"\u14f3\5\u0224\u0113\2\u14f2\u14f0\3\2\2\2\u14f3\u14f6\3\2\2\2\u14f4\u14f2"+
		"\3\2\2\2\u14f4\u14f5\3\2\2\2\u14f5\u0223\3\2\2\2\u14f6\u14f4\3\2\2\2\u14f7"+
		"\u14f9\7\u0145\2\2\u14f8\u14f7\3\2\2\2\u14f8\u14f9\3\2\2\2\u14f9\u14fa"+
		"\3\2\2\2\u14fa\u1504\5\u0228\u0115\2\u14fb\u14fd\7\u0175\2\2\u14fc\u14fe"+
		"\5\u0226\u0114\2\u14fd\u14fc\3\2\2\2\u14fd\u14fe\3\2\2\2\u14fe\u1505\3"+
		"\2\2\2\u14ff\u1501\5\u0226\u0114\2\u1500\u14ff\3\2\2\2\u1501\u1502\3\2"+
		"\2\2\u1502\u1500\3\2\2\2\u1502\u1503\3\2\2\2\u1503\u1505\3\2\2\2\u1504"+
		"\u14fb\3\2\2\2\u1504\u1500\3\2\2\2\u1504\u1505\3\2\2\2\u1505\u0225\3\2"+
		"\2\2\u1506\u1508\7\u0257\2\2\u1507\u1509\7\u0262\2\2\u1508\u1507\3\2\2"+
		"\2\u1508\u1509\3\2\2\2\u1509\u150a\3\2\2\2\u150a\u150b\7\u0258\2\2\u150b"+
		"\u0227\3\2\2\2\u150c\u1568\7\u0128\2\2\u150d\u150f\7\u0129\2\2\u150e\u1510"+
		"\7\u0118\2\2\u150f\u150e\3\2\2\2\u150f\u1510\3\2\2\2\u1510\u1512\3\2\2"+
		"\2\u1511\u1513\5\u022c\u0117\2\u1512\u1511\3\2\2\2\u1512\u1513\3\2\2\2"+
		"\u1513\u1568\3\2\2\2\u1514\u1568\7\u012a\2\2\u1515\u1517\7\u012e\2\2\u1516"+
		"\u1518\5\u022e\u0118\2\u1517\u1516\3\2\2\2\u1517\u1518\3\2\2\2\u1518\u1568"+
		"\3\2\2\2\u1519\u151b\7\u012f\2\2\u151a\u151c\5\u022e\u0118\2\u151b\u151a"+
		"\3\2\2\2\u151b\u151c\3\2\2\2\u151c\u1568\3\2\2\2\u151d\u151e\7H\2\2\u151e"+
		"\u1568\7\u0142\2\2\u151f\u1521\7\u0132\2\2\u1520\u1522\5\u022e\u0118\2"+
		"\u1521\u1520\3\2\2\2\u1521\u1522\3\2\2\2\u1522\u1568\3\2\2\2\u1523\u1568"+
		"\7\u0136\2\2\u1524\u1568\7\u0137\2\2\u1525\u1527\7\u0138\2\2\u1526\u1528"+
		"\5\u022a\u0116\2\u1527\u1526\3\2\2\2\u1527\u1528\3\2\2\2\u1528\u152a\3"+
		"\2\2\2\u1529\u152b\5\u022c\u0117\2\u152a\u1529\3\2\2\2\u152a\u152b\3\2"+
		"\2\2\u152b\u1568\3\2\2\2\u152c\u152e\7\u013a\2\2\u152d\u152c\3\2\2\2\u152d"+
		"\u152e\3\2\2\2\u152e\u152f\3\2\2\2\u152f\u1531\tN\2\2\u1530\u1532\7\u0118"+
		"\2\2\u1531\u1530\3\2\2\2\u1531\u1532\3\2\2\2\u1532\u1534\3\2\2\2\u1533"+
		"\u1535\5\u022c\u0117\2\u1534\u1533\3\2\2\2\u1534\u1535\3\2\2\2\u1535\u1568"+
		"\3\2\2\2\u1536\u1538\7\u013b\2\2\u1537\u1539\7\u0118\2\2\u1538\u1537\3"+
		"\2\2\2\u1538\u1539\3\2\2\2\u1539\u153b\3\2\2\2\u153a\u153c\5\u022c\u0117"+
		"\2\u153b\u153a\3\2\2\2\u153b\u153c\3\2\2\2\u153c\u1568\3\2\2\2\u153d\u153f"+
		"\7\u013e\2\2\u153e\u1540\5\u022e\u0118\2\u153f\u153e\3\2\2\2\u153f\u1540"+
		"\3\2\2\2\u1540\u1568\3\2\2\2\u1541\u1568\7\u0143\2\2\u1542\u1568\7\u0146"+
		"\2\2\u1543\u1545\7\u0148\2\2\u1544\u1546\5\u022c\u0117\2\u1545\u1544\3"+
		"\2\2\2\u1545\u1546\3\2\2\2\u1546\u154a\3\2\2\2\u1547\u1548\t\n\2\2\u1548"+
		"\u1549\7\u0148\2\2\u1549\u154b\7\u0126\2\2\u154a\u1547\3\2\2\2\u154a\u154b"+
		"\3\2\2\2\u154b\u1568\3\2\2\2\u154c\u154e\7\u0149\2\2\u154d\u154f\5\u022c"+
		"\u0117\2\u154e\u154d\3\2\2\2\u154e\u154f\3\2\2\2\u154f\u1553\3\2\2\2\u1550"+
		"\u1551\t\n\2\2\u1551\u1552\7\u0148\2\2\u1552\u1554\7\u0126\2\2\u1553\u1550"+
		"\3\2\2\2\u1553\u1554\3\2\2\2\u1554\u1568\3\2\2\2\u1555\u1557\7\u014d\2"+
		"\2\u1556\u1558\5\u022c\u0117\2\u1557\u1556\3\2\2\2\u1557\u1558\3\2\2\2"+
		"\u1558\u1568\3\2\2\2\u1559\u1565\5\u0220\u0111\2\u155a\u155b\7\u024b\2"+
		"\2\u155b\u1560\5\u0230\u0119\2\u155c\u155d\7\u0245\2\2\u155d\u155f\5\u0230"+
		"\u0119\2\u155e\u155c\3\2\2\2\u155f\u1562\3\2\2\2\u1560\u155e\3\2\2\2\u1560"+
		"\u1561\3\2\2\2\u1561\u1563\3\2\2\2\u1562\u1560\3\2\2\2\u1563\u1564\7\u024c"+
		"\2\2\u1564\u1566\3\2\2\2\u1565\u155a\3\2\2\2\u1565\u1566\3\2\2\2\u1566"+
		"\u1568\3\2\2\2\u1567\u150c\3\2\2\2\u1567\u150d\3\2\2\2\u1567\u1514\3\2"+
		"\2\2\u1567\u1515\3\2\2\2\u1567\u1519\3\2\2\2\u1567\u151d\3\2\2\2\u1567"+
		"\u151f\3\2\2\2\u1567\u1523\3\2\2\2\u1567\u1524\3\2\2\2\u1567\u1525\3\2"+
		"\2\2\u1567\u152d\3\2\2\2\u1567\u1536\3\2\2\2\u1567\u153d\3\2\2\2\u1567"+
		"\u1541\3\2\2\2\u1567\u1542\3\2\2\2\u1567\u1543\3\2\2\2\u1567\u154c\3\2"+
		"\2\2\u1567\u1555\3\2\2\2\u1567\u1559\3\2\2\2\u1568\u0229\3\2\2\2\u1569"+
		"\u1585\7\u0124\2\2\u156a\u1585\7\u0092\2\2\u156b\u1585\78\2\2\u156c\u1585"+
		"\7g\2\2\u156d\u1585\7\u008f\2\2\u156e\u1585\7\u00df\2\2\u156f\u1570\7"+
		"\u0124\2\2\u1570\u1571\7\u01b1\2\2\u1571\u1585\7\u0092\2\2\u1572\u1573"+
		"\78\2\2\u1573\u1574\7\u01b1\2\2\u1574\u1585\7g\2\2\u1575\u1576\78\2\2"+
		"\u1576\u1577\7\u01b1\2\2\u1577\u1585\7\u008f\2\2\u1578\u1579\78\2\2\u1579"+
		"\u157a\7\u01b1\2\2\u157a\u1585\7\u00df\2\2\u157b\u157c\7g\2\2\u157c\u157d"+
		"\7\u01b1\2\2\u157d\u1585\7\u008f\2\2\u157e\u157f\7g\2\2\u157f\u1580\7"+
		"\u01b1\2\2\u1580\u1585\7\u00df\2\2\u1581\u1582\7\u008f\2\2\u1582\u1583"+
		"\7\u01b1\2\2\u1583\u1585\7\u00df\2\2\u1584\u1569\3\2\2\2\u1584\u156a\3"+
		"\2\2\2\u1584\u156b\3\2\2\2\u1584\u156c\3\2\2\2\u1584\u156d\3\2\2\2\u1584"+
		"\u156e\3\2\2\2\u1584\u156f\3\2\2\2\u1584\u1572\3\2\2\2\u1584\u1575\3\2"+
		"\2\2\u1584\u1578\3\2\2\2\u1584\u157b\3\2\2\2\u1584\u157e\3\2\2\2\u1584"+
		"\u1581\3\2\2\2\u1585\u022b\3\2\2\2\u1586\u1587\7\u024b\2\2\u1587\u1588"+
		"\7\u0262\2\2\u1588\u1589\7\u024c\2\2\u1589\u022d\3\2\2\2\u158a\u158b\7"+
		"\u024b\2\2\u158b\u158e\7\u0262\2\2\u158c\u158d\7\u0245\2\2\u158d\u158f"+
		"\7\u0262\2\2\u158e\u158c\3\2\2\2\u158e\u158f\3\2\2\2\u158f\u1590\3\2\2"+
		"\2\u1590\u1591\7\u024c\2\2\u1591\u022f\3\2\2\2\u1592\u1593\b\u0119\1\2"+
		"\u1593\u1594\7\u024b\2\2\u1594\u1595\5\u0230\u0119\2\u1595\u1597\7\u024c"+
		"\2\2\u1596\u1598\5\u0200\u0101\2\u1597\u1596\3\2\2\2\u1597\u1598\3\2\2"+
		"\2\u1598\u15ac\3\2\2\2\u1599\u159a\7\u024b\2\2\u159a\u159d\5\u0230\u0119"+
		"\2\u159b\u159c\7\u0245\2\2\u159c\u159e\5\u0230\u0119\2\u159d\u159b\3\2"+
		"\2\2\u159e\u159f\3\2\2\2\u159f\u159d\3\2\2\2\u159f\u15a0\3\2\2\2\u15a0"+
		"\u15a1\3\2\2\2\u15a1\u15a2\7\u024c\2\2\u15a2\u15ac\3\2\2\2\u15a3\u15a4"+
		"\t8\2\2\u15a4\u15ac\5\u0230\u0119\32\u15a5\u15a6\5\u0234\u011b\2\u15a6"+
		"\u15a7\5\u0230\u0119\24\u15a7\u15ac\3\2\2\2\u15a8\u15a9\7\u01a0\2\2\u15a9"+
		"\u15ac\5\u0230\u0119\6\u15aa\u15ac\5\u023a\u011e\2\u15ab\u1592\3\2\2\2"+
		"\u15ab\u1599\3\2\2\2\u15ab\u15a3\3\2\2\2\u15ab\u15a5\3\2\2\2\u15ab\u15a8"+
		"\3\2\2\2\u15ab\u15aa\3\2\2\2\u15ac\u1634\3\2\2\2\u15ad\u15ae\f\31\2\2"+
		"\u15ae\u15af\7\20\2\2\u15af\u15b0\7\u0148\2\2\u15b0\u15b1\7\u0126\2\2"+
		"\u15b1\u1633\5\u0230\u0119\32\u15b2\u15b3\f\30\2\2\u15b3\u15b4\7\u0252"+
		"\2\2\u15b4\u1633\5\u0230\u0119\31\u15b5\u15b6\f\27\2\2\u15b6\u15b7\tO"+
		"\2\2\u15b7\u1633\5\u0230\u0119\30\u15b8\u15b9\f\26\2\2\u15b9\u15ba\t8"+
		"\2\2\u15ba\u1633\5\u0230\u0119\27\u15bb\u15bc\f\25\2\2\u15bc\u15bd\5\u0234"+
		"\u011b\2\u15bd\u15be\5\u0230\u0119\26\u15be\u1633\3\2\2\2\u15bf\u15c1"+
		"\f\21\2\2\u15c0\u15c2\7\u01a0\2\2\u15c1\u15c0\3\2\2\2\u15c1\u15c2\3\2"+
		"\2\2\u15c2\u15c3\3\2\2\2\u15c3\u15c5\7\u0127\2\2\u15c4\u15c6\tP\2\2\u15c5"+
		"\u15c4\3\2\2\2\u15c5\u15c6\3\2\2\2\u15c6\u15c7\3\2\2\2\u15c7\u15c8\5\u0232"+
		"\u011a\2\u15c8\u15c9\7\u0173\2\2\u15c9\u15ca\5\u0230\u0119\22\u15ca\u1633"+
		"\3\2\2\2\u15cb\u15cd\f\20\2\2\u15cc\u15ce\7\u01a0\2\2\u15cd\u15cc\3\2"+
		"\2\2\u15cd\u15ce\3\2\2\2\u15ce\u15d3\3\2\2\2\u15cf\u15d4\7\u0167\2\2\u15d0"+
		"\u15d4\7\u0161\2\2\u15d1\u15d2\7\u016d\2\2\u15d2\u15d4\7\u01b1\2\2\u15d3"+
		"\u15cf\3\2\2\2\u15d3\u15d0\3\2\2\2\u15d3\u15d1\3\2\2\2\u15d4\u15d5\3\2"+
		"\2\2\u15d5\u1633\5\u0230\u0119\21\u15d6\u15d8\f\17\2\2\u15d7\u15d9\7\u01a0"+
		"\2\2\u15d8\u15d7\3\2\2\2\u15d8\u15d9\3\2\2\2\u15d9\u15de\3\2\2\2\u15da"+
		"\u15df\7\u0167\2\2\u15db\u15df\7\u0161\2\2\u15dc\u15dd\7\u016d\2\2\u15dd"+
		"\u15df\7\u01b1\2\2\u15de\u15da\3\2\2\2\u15de\u15db\3\2\2\2\u15de\u15dc"+
		"\3\2\2\2\u15df\u15e0\3\2\2\2\u15e0\u15e1\5\u0230\u0119\2\u15e1\u15e2\7"+
		"O\2\2\u15e2\u15e3\5\u0230\u0119\20\u15e3\u1633\3\2\2\2\u15e4\u15e5\f\16"+
		"\2\2\u15e5\u15e6\tQ\2\2\u15e6\u1633\5\u0230\u0119\17\u15e7\u15e8\f\f\2"+
		"\2\u15e8\u15ea\7\u0163\2\2\u15e9\u15eb\7\u01a0\2\2\u15ea\u15e9\3\2\2\2"+
		"\u15ea\u15eb\3\2\2\2\u15eb\u15ec\3\2\2\2\u15ec\u15ed\7\u018a\2\2\u15ed"+
		"\u15ee\7\u0193\2\2\u15ee\u1633\5\u0230\u0119\r\u15ef\u15f0\f\5\2\2\u15f0"+
		"\u15f1\7\u0173\2\2\u15f1\u1633\5\u0230\u0119\6\u15f2\u15f3\f\4\2\2\u15f3"+
		"\u15f4\7\u01a5\2\2\u15f4\u1633\5\u0230\u0119\5\u15f5\u15f6\f\36\2\2\u15f6"+
		"\u15f7\7\u0241\2\2\u15f7\u1633\5\u0224\u0113\2\u15f8\u15f9\f\33\2\2\u15f9"+
		"\u1633\5\u01fa\u00fe\2\u15fa\u15fb\f\23\2\2\u15fb\u1633\5\u0234\u011b"+
		"\2\u15fc\u15fe\f\22\2\2\u15fd\u15ff\7\u01a0\2\2\u15fe\u15fd\3\2\2\2\u15fe"+
		"\u15ff\3\2\2\2\u15ff\u1600\3\2\2\2\u1600\u1601\7\u0197\2\2\u1601\u160b"+
		"\7\u024b\2\2\u1602\u160c\5\u0274\u013b\2\u1603\u1608\5\u0230\u0119\2\u1604"+
		"\u1605\7\u0245\2\2\u1605\u1607\5\u0230\u0119\2\u1606\u1604\3\2\2\2\u1607"+
		"\u160a\3\2\2\2\u1608\u1606\3\2\2\2\u1608\u1609\3\2\2\2\u1609\u160c\3\2"+
		"\2\2\u160a\u1608\3\2\2\2\u160b\u1602\3\2\2\2\u160b\u1603\3\2\2\2\u160c"+
		"\u160d\3\2\2\2\u160d\u160e\7\u024c\2\2\u160e\u1633\3\2\2\2\u160f\u1610"+
		"\f\r\2\2\u1610\u1612\7\u0163\2\2\u1611\u1613\7\u01a0\2\2\u1612\u1611\3"+
		"\2\2\2\u1612\u1613\3\2\2\2\u1613\u1616\3\2\2\2\u1614\u1617\5\u0240\u0121"+
		"\2\u1615\u1617\7\u01a1\2\2\u1616\u1614\3\2\2\2\u1616\u1615\3\2\2\2\u1617"+
		"\u1633\3\2\2\2\u1618\u1619\f\13\2\2\u1619\u161b\7\u0163\2\2\u161a\u161c"+
		"\7\u01a0\2\2\u161b\u161a\3\2\2\2\u161b\u161c\3\2\2\2\u161c\u161d\3\2\2"+
		"\2\u161d\u1633\7F\2\2\u161e\u161f\f\n\2\2\u161f\u1621\7\u0163\2\2\u1620"+
		"\u1622\7\u01a0\2\2\u1621\u1620\3\2\2\2\u1621\u1622\3\2\2\2\u1622\u1623"+
		"\3\2\2\2\u1623\u1633\7\u010e\2\2\u1624\u1625\f\t\2\2\u1625\u1627\7\u0163"+
		"\2\2\u1626\u1628\7\u01a0\2\2\u1627\u1626\3\2\2\2\u1627\u1628\3\2\2\2\u1628"+
		"\u1629\3\2\2\2\u1629\u162a\7\u009e\2\2\u162a\u162b\7\u024b\2\2\u162b\u162c"+
		"\5\u0222\u0112\2\u162c\u162d\7\u024c\2\2\u162d\u1633\3\2\2\2\u162e\u162f"+
		"\f\b\2\2\u162f\u1633\7\u0164\2\2\u1630\u1631\f\7\2\2\u1631\u1633\7\u0169"+
		"\2\2\u1632\u15ad\3\2\2\2\u1632\u15b2\3\2\2\2\u1632\u15b5\3\2\2\2\u1632"+
		"\u15b8\3\2\2\2\u1632\u15bb\3\2\2\2\u1632\u15bf\3\2\2\2\u1632\u15cb\3\2"+
		"\2\2\u1632\u15d6\3\2\2\2\u1632\u15e4\3\2\2\2\u1632\u15e7\3\2\2\2\u1632"+
		"\u15ef\3\2\2\2\u1632\u15f2\3\2\2\2\u1632\u15f5\3\2\2\2\u1632\u15f8\3\2"+
		"\2\2\u1632\u15fa\3\2\2\2\u1632\u15fc\3\2\2\2\u1632\u160f\3\2\2\2\u1632"+
		"\u1618\3\2\2\2\u1632\u161e\3\2\2\2\u1632\u1624\3\2\2\2\u1632\u162e\3\2"+
		"\2\2\u1632\u1630\3\2\2\2\u1633\u1636\3\2\2\2\u1634\u1632\3\2\2\2\u1634"+
		"\u1635\3\2\2\2\u1635\u0231\3\2\2\2\u1636\u1634\3\2\2\2\u1637\u1638\b\u011a"+
		"\1\2\u1638\u1639\7\u024b\2\2\u1639\u163a\5\u0230\u0119\2\u163a\u163c\7"+
		"\u024c\2\2\u163b\u163d\5\u0200\u0101\2\u163c\u163b\3\2\2\2\u163c\u163d"+
		"\3\2\2\2\u163d\u164f\3\2\2\2\u163e\u163f\7\u024b\2\2\u163f\u1642\5\u0230"+
		"\u0119\2\u1640\u1641\7\u0245\2\2\u1641\u1643\5\u0230\u0119\2\u1642\u1640"+
		"\3\2\2\2\u1643\u1644\3\2\2\2\u1644\u1642\3\2\2\2\u1644\u1645\3\2\2\2\u1645"+
		"\u1646\3\2\2\2\u1646\u1647\7\u024c\2\2\u1647\u164f\3\2\2\2\u1648\u1649"+
		"\t8\2\2\u1649\u164f\5\u0232\u011a\17\u164a\u164b\5\u0234\u011b\2\u164b"+
		"\u164c\5\u0232\u011a\n\u164c\u164f\3\2\2\2\u164d\u164f\5\u023a\u011e\2"+
		"\u164e\u1637\3\2\2\2\u164e\u163e\3\2\2\2\u164e\u1648\3\2\2\2\u164e\u164a"+
		"\3\2\2\2\u164e\u164d\3\2\2\2\u164f\u1685\3\2\2\2\u1650\u1651\f\16\2\2"+
		"\u1651\u1652\7\u0252\2\2\u1652\u1684\5\u0232\u011a\17\u1653\u1654\f\r"+
		"\2\2\u1654\u1655\tO\2\2\u1655\u1684\5\u0232\u011a\16\u1656\u1657\f\f\2"+
		"\2\u1657\u1658\t8\2\2\u1658\u1684\5\u0232\u011a\r\u1659\u165a\f\13\2\2"+
		"\u165a\u165b\5\u0234\u011b\2\u165b\u165c\5\u0232\u011a\f\u165c\u1684\3"+
		"\2\2\2\u165d\u165e\f\b\2\2\u165e\u165f\tQ\2\2\u165f\u1684\5\u0232\u011a"+
		"\t\u1660\u1661\f\7\2\2\u1661\u1663\7\u0163\2\2\u1662\u1664\7\u01a0\2\2"+
		"\u1663\u1662\3\2\2\2\u1663\u1664\3\2\2\2\u1664\u1665\3\2\2\2\u1665\u1666"+
		"\7\u018a\2\2\u1666\u1667\7\u0193\2\2\u1667\u1684\5\u0232\u011a\b\u1668"+
		"\u1669\f\22\2\2\u1669\u166a\7\u0241\2\2\u166a\u1684\5\u0224\u0113\2\u166b"+
		"\u166c\f\t\2\2\u166c\u1684\5\u0234\u011b\2\u166d\u166e\f\6\2\2\u166e\u1670"+
		"\7\u0163\2\2\u166f\u1671\7\u01a0\2\2\u1670\u166f\3\2\2\2\u1670\u1671\3"+
		"\2\2\2\u1671\u1672\3\2\2\2\u1672\u1684\7F\2\2\u1673\u1674\f\5\2\2\u1674"+
		"\u1676\7\u0163\2\2\u1675\u1677\7\u01a0\2\2\u1676\u1675\3\2\2\2\u1676\u1677"+
		"\3\2\2\2\u1677\u1678\3\2\2\2\u1678\u1684\7\u010e\2\2\u1679\u167a\f\4\2"+
		"\2\u167a\u167c\7\u0163\2\2\u167b\u167d\7\u01a0\2\2\u167c\u167b\3\2\2\2"+
		"\u167c\u167d\3\2\2\2\u167d\u167e\3\2\2\2\u167e\u167f\7\u009e\2\2\u167f"+
		"\u1680\7\u024b\2\2\u1680\u1681\5\u0222\u0112\2\u1681\u1682\7\u024c\2\2"+
		"\u1682\u1684\3\2\2\2\u1683\u1650\3\2\2\2\u1683\u1653\3\2\2\2\u1683\u1656"+
		"\3\2\2\2\u1683\u1659\3\2\2\2\u1683\u165d\3\2\2\2\u1683\u1660\3\2\2\2\u1683"+
		"\u1668\3\2\2\2\u1683\u166b\3\2\2\2\u1683\u166d\3\2\2\2\u1683\u1673\3\2"+
		"\2\2\u1683\u1679\3\2\2\2\u1684\u1687\3\2\2\2\u1685\u1683\3\2\2\2\u1685"+
		"\u1686\3\2\2\2\u1686\u0233\3\2\2\2\u1687\u1685\3\2\2\2\u1688\u1691\5\u01d4"+
		"\u00eb\2\u1689\u168a\7\u00a2\2\2\u168a\u168b\7\u024b\2\2\u168b\u168c\5"+
		"\u0210\u0109\2\u168c\u168d\7\u0253\2\2\u168d\u168e\5\u01d2\u00ea\2\u168e"+
		"\u168f\7\u024c\2\2\u168f\u1691\3\2\2\2\u1690\u1688\3\2\2\2\u1690\u1689"+
		"\3\2\2\2\u1691\u0235\3\2\2\2\u1692\u169b\5\u01d2\u00ea\2\u1693\u1694\7"+
		"\u00a2\2\2\u1694\u1695\7\u024b\2\2\u1695\u1696\5\u0210\u0109\2\u1696\u1697"+
		"\7\u0253\2\2\u1697\u1698\5\u01d2\u00ea\2\u1698\u1699\7\u024c\2\2\u1699"+
		"\u169b\3\2\2\2\u169a\u1692\3\2\2\2\u169a\u1693\3\2\2\2\u169b\u0237\3\2"+
		"\2\2\u169c\u169d\7\u024b\2\2\u169d\u169e\5\u0230\u0119\2\u169e\u169f\7"+
		"\u0245\2\2\u169f\u16a0\5\u0230\u0119\2\u16a0\u16a1\7\u024c\2\2\u16a1\u16a2"+
		"\7\u016b\2\2\u16a2\u16a3\7\u024b\2\2\u16a3\u16a4\5\u0230\u0119\2\u16a4"+
		"\u16a5\7\u0245\2\2\u16a5\u16a6\5\u0230\u0119\2\u16a6\u16a7\7\u024c\2\2"+
		"\u16a7\u0239\3\2\2\2\u16a8\u16bb\5\u023c\u011f\2\u16a9\u16aa\7\u024b\2"+
		"\2\u16aa\u16ab\5\u0274\u013b\2\u16ab\u16ad\7\u024c\2\2\u16ac\u16ae\5\u0200"+
		"\u0101\2\u16ad\u16ac\3\2\2\2\u16ad\u16ae\3\2\2\2\u16ae\u16bb\3\2\2\2\u16af"+
		"\u16bb\5\u0242\u0122\2\u16b0\u16bb\7\u01a1\2\2\u16b1\u16bb\7\u024f\2\2"+
		"\u16b2\u16bb\5\u025a\u012e\2\u16b3\u16b4\7\u0130\2\2\u16b4\u16bb\5\u026e"+
		"\u0138\2\u16b5\u16bb\5\u0246\u0124\2\u16b6\u16bb\5\u01fc\u00ff\2\u16b7"+
		"\u16bb\5\u0264\u0133\2\u16b8\u16bb\5\u0268\u0135\2\u16b9\u16bb\5\u0238"+
		"\u011d\2\u16ba\u16a8\3\2\2\2\u16ba\u16a9\3\2\2\2\u16ba\u16af\3\2\2\2\u16ba"+
		"\u16b0\3\2\2\2\u16ba\u16b1\3\2\2\2\u16ba\u16b2\3\2\2\2\u16ba\u16b3\3\2"+
		"\2\2\u16ba\u16b5\3\2\2\2\u16ba\u16b6\3\2\2\2\u16ba\u16b7\3\2\2\2\u16ba"+
		"\u16b8\3\2\2\2\u16ba\u16b9\3\2\2\2\u16bb\u023b\3\2\2\2\u16bc\u16c0\5\u023e"+
		"\u0120\2\u16bd\u16c0\5\u0146\u00a4\2\u16be\u16c0\5\u0240\u0121\2\u16bf"+
		"\u16bc\3\2\2\2\u16bf\u16bd\3\2\2\2\u16bf\u16be\3\2\2\2\u16c0\u023d\3\2"+
		"\2\2\u16c1\u16c2\tR\2\2\u16c2\u023f\3\2\2\2\u16c3\u16c4\tS\2\2\u16c4\u0241"+
		"\3\2\2\2\u16c5\u16c7\7\u017a\2\2\u16c6\u16c8\5\u0230\u0119\2\u16c7\u16c6"+
		"\3\2\2\2\u16c7\u16c8\3\2\2\2\u16c8\u16ce\3\2\2\2\u16c9\u16ca\7\u01b9\2"+
		"\2\u16ca\u16cb\5\u0230\u0119\2\u16cb\u16cc\7\u01b0\2\2\u16cc\u16cd\5\u0230"+
		"\u0119\2\u16cd\u16cf\3\2\2\2\u16ce\u16c9\3\2\2\2\u16cf\u16d0\3\2\2\2\u16d0"+
		"\u16ce\3\2\2\2\u16d0\u16d1\3\2\2\2\u16d1\u16d4\3\2\2\2\u16d2\u16d3\7\u018c"+
		"\2\2\u16d3\u16d5\5\u0230\u0119\2\u16d4\u16d2\3\2\2\2\u16d4\u16d5\3\2\2"+
		"\2\u16d5\u16d6\3\2\2\2\u16d6\u16d7\7\u018d\2\2\u16d7\u0243\3\2\2\2\u16d8"+
		"\u16d9\tT\2\2\u16d9\u16da\7\u024b\2\2\u16da\u16db\5\u0230\u0119\2\u16db"+
		"\u16dc\7\u0176\2\2\u16dc\u16dd\5\u0224\u0113\2\u16dd\u16de\7\u024c\2\2"+
		"\u16de\u0245\3\2\2\2\u16df\u16e0\5\u0220\u0111\2\u16e0\u16ef\7\u024b\2"+
		"\2\u16e1\u16e3\5\u026c\u0137\2\u16e2\u16e1\3\2\2\2\u16e2\u16e3\3\2\2\2"+
		"\u16e3\u16e4\3\2\2\2\u16e4\u16e9\5\u0248\u0125\2\u16e5\u16e6\7\u0245\2"+
		"\2\u16e6\u16e8\5\u0248\u0125\2\u16e7\u16e5\3\2\2\2\u16e8\u16eb\3\2\2\2"+
		"\u16e9\u16e7\3\2\2\2\u16e9\u16ea\3\2\2\2\u16ea\u16ed\3\2\2\2\u16eb\u16e9"+
		"\3\2\2\2\u16ec\u16ee\5\u0298\u014d\2\u16ed\u16ec\3\2\2\2\u16ed\u16ee\3"+
		"\2\2\2\u16ee\u16f0\3\2\2\2\u16ef\u16e2\3\2\2\2\u16ef\u16f0\3\2\2\2\u16f0"+
		"\u16f1\3\2\2\2\u16f1\u16f8\7\u024c\2\2\u16f2\u16f3\7\u011e\2\2\u16f3\u16f4"+
		"\7\u0195\2\2\u16f4\u16f5\7\u024b\2\2\u16f5\u16f6\5\u0298\u014d\2\u16f6"+
		"\u16f7\7\u024c\2\2\u16f7\u16f9\3\2\2\2\u16f8\u16f2\3\2\2\2\u16f8\u16f9"+
		"\3\2\2\2\u16f9\u16fb\3\2\2\2\u16fa\u16fc\5\u025c\u012f\2\u16fb\u16fa\3"+
		"\2\2\2\u16fb\u16fc\3\2\2\2\u16fc\u1702\3\2\2\2\u16fd\u1700\7\u00a7\2\2"+
		"\u16fe\u1701\5\u0210\u0109\2\u16ff\u1701\5\u025e\u0130\2\u1700\u16fe\3"+
		"\2\2\2\u1700\u16ff\3\2\2\2\u1701\u1703\3\2\2\2\u1702\u16fd\3\2\2\2\u1702"+
		"\u1703\3\2\2\2\u1703\u170b\3\2\2\2\u1704\u170b\5\u024c\u0127\2\u1705\u170b"+
		"\5\u024e\u0128\2\u1706\u170b\5\u0250\u0129\2\u1707\u170b\5\u0252\u012a"+
		"\2\u1708\u170b\5\u0254\u012b\2\u1709\u170b\5\u0256\u012c\2\u170a\u16df"+
		"\3\2\2\2\u170a\u1704\3\2\2\2\u170a\u1705\3\2\2\2\u170a\u1706\3\2\2\2\u170a"+
		"\u1707\3\2\2\2\u170a\u1708\3\2\2\2\u170a\u1709\3\2\2\2\u170b\u0247\3\2"+
		"\2\2\u170c\u170e\7\u01b8\2\2\u170d\u170c\3\2\2\2\u170d\u170e\3\2\2\2\u170e"+
		"\u1712\3\2\2\2\u170f\u1710\5\u0210\u0109\2\u1710\u1711\5\u024a\u0126\2"+
		"\u1711\u1713\3\2\2\2\u1712\u170f\3\2\2\2\u1712\u1713\3\2\2\2\u1713\u1714"+
		"\3\2\2\2\u1714\u1715\5\u0230\u0119\2\u1715\u0249\3\2\2\2\u1716\u1717\t"+
		"U\2\2\u1717\u024b\3\2\2\2\u1718\u1719\tV\2\2\u1719\u171a\7\u024b\2\2\u171a"+
		"\u171f\5\u0230\u0119\2\u171b\u171c\7\u0245\2\2\u171c\u171e\5\u0230\u0119"+
		"\2\u171d\u171b\3\2\2\2\u171e\u1721\3\2\2\2\u171f\u171d\3\2\2\2\u171f\u1720"+
		"\3\2\2\2\u1720\u1722\3\2\2\2\u1721\u171f\3\2\2\2\u1722\u1723\7\u024c\2"+
		"\2\u1723\u1732\3\2\2\2\u1724\u1725\7\u0144\2\2\u1725\u172e\7\u024b\2\2"+
		"\u1726\u172b\5\u0230\u0119\2\u1727\u1728\7\u0245\2\2\u1728\u172a\5\u0230"+
		"\u0119\2\u1729\u1727\3\2\2\2\u172a\u172d\3\2\2\2\u172b\u1729\3\2\2\2\u172b"+
		"\u172c\3\2\2\2\u172c\u172f\3\2\2\2\u172d\u172b\3\2\2\2\u172e\u1726\3\2"+
		"\2\2\u172e\u172f\3\2\2\2\u172f\u1730\3\2\2\2\u1730\u1732\7\u024c\2\2\u1731"+
		"\u1718\3\2\2\2\u1731\u1724\3\2\2\2\u1732\u024d\3\2\2\2\u1733\u1734\7\u0131"+
		"\2\2\u1734\u1737\7\u024b\2\2\u1735\u1738\5\u0210\u0109\2\u1736\u1738\5"+
		"\u0146\u00a4\2\u1737\u1735\3\2\2\2\u1737\u1736\3\2\2\2\u1738\u1739\3\2"+
		"\2\2\u1739\u173a\7\u0193\2\2\u173a\u173b\5\u0230\u0119\2\u173b\u173c\7"+
		"\u024c\2\2\u173c\u024f\3\2\2\2\u173d\u1744\7\u0181\2\2\u173e\u1744\7\u015e"+
		"\2\2\u173f\u1744\7\u0186\2\2\u1740\u1744\7\u01ac\2\2\u1741\u1744\7\u01b6"+
		"\2\2\u1742\u1744\5\u0244\u0123\2\u1743\u173d\3\2\2\2\u1743\u173e\3\2\2"+
		"\2\u1743\u173f\3\2\2\2\u1743\u1740\3\2\2\2\u1743\u1741\3\2\2\2\u1743\u1742"+
		"\3\2\2\2\u1744\u0251\3\2\2\2\u1745\u1757\7\u0182\2\2\u1746\u1748\7\u0184"+
		"\2\2\u1747\u1749\5\u022c\u0117\2\u1748\u1747\3\2\2\2\u1748\u1749\3\2\2"+
		"\2\u1749\u1757\3\2\2\2\u174a\u174c\7\u0185\2\2\u174b\u174d\5\u022c\u0117"+
		"\2\u174c\u174b\3\2\2\2\u174c\u174d\3\2\2\2\u174d\u1757\3\2\2\2\u174e\u1750"+
		"\7\u019e\2\2\u174f\u1751\5\u022c\u0117\2\u1750\u174f\3\2\2\2\u1750\u1751"+
		"\3\2\2\2\u1751\u1757\3\2\2\2\u1752\u1754\7\u019f\2\2\u1753\u1755\5\u022c"+
		"\u0117\2\u1754\u1753\3\2\2\2\u1754\u1755\3\2\2\2\u1755\u1757\3\2\2\2\u1756"+
		"\u1745\3\2\2\2\u1756\u1746\3\2\2\2\u1756\u174a\3\2\2\2\u1756\u174e\3\2"+
		"\2\2\u1756\u1752\3\2\2\2\u1757\u0253\3\2\2\2\u1758\u1759\7\u014b\2\2\u1759"+
		"\u175b\7\u024b\2\2\u175a\u175c\tW\2\2\u175b\u175a\3\2\2\2\u175b\u175c"+
		"\3\2\2\2\u175c\u1769\3\2\2\2\u175d\u175e\5\u0230\u0119\2\u175e\u175f\7"+
		"\u0193\2\2\u175f\u1760\5\u0230\u0119\2\u1760\u176a\3\2\2\2\u1761\u1763"+
		"\7\u0193\2\2\u1762\u1761\3\2\2\2\u1762\u1763\3\2\2\2\u1763\u1764\3\2\2"+
		"\2\u1764\u1767\5\u0230\u0119\2\u1765\u1766\7\u0245\2\2\u1766\u1768\5\u0230"+
		"\u0119\2\u1767\u1765\3\2\2\2\u1767\u1768\3\2\2\2\u1768\u176a\3\2\2\2\u1769"+
		"\u175d\3\2\2\2\u1769\u1762\3\2\2\2\u176a\u176b\3\2\2\2\u176b\u176c\7\u024c"+
		"\2\2\u176c\u179c\3\2\2\2\u176d\u176e\7\u0147\2\2\u176e\u176f\7\u024b\2"+
		"\2\u176f\u1774\5\u0230\u0119\2\u1770\u1771\7\u0245\2\2\u1771\u1773\5\u0230"+
		"\u0119\2\u1772\u1770\3\2\2\2\u1773\u1776\3\2\2\2\u1774\u1772\3\2\2\2\u1774"+
		"\u1775\3\2\2\2\u1775\u1779\3\2\2\2\u1776\u1774\3\2\2\2\u1777\u1778\7\u0193"+
		"\2\2\u1778\u177a\5\u0230\u0119\2\u1779\u1777\3\2\2\2\u1779\u177a\3\2\2"+
		"\2\u177a\u177d\3\2\2\2\u177b\u177c\7\u0191\2\2\u177c\u177e\5\u0230\u0119"+
		"\2\u177d\u177b\3\2\2\2\u177d\u177e\3\2\2\2\u177e\u177f\3\2\2\2\u177f\u1780"+
		"\7\u024c\2\2\u1780\u179c\3\2\2\2\u1781\u1782\7\u0141\2\2\u1782\u1783\7"+
		"\u024b\2\2\u1783\u1784\5\u0232\u011a\2\u1784\u1785\7\u0197\2\2\u1785\u1786"+
		"\5\u0230\u0119\2\u1786\u1787\7\u024c\2\2\u1787\u179c\3\2\2\2\u1788\u1789"+
		"\7\u0140\2\2\u1789\u178a\7\u024b\2\2\u178a\u178b\5\u0230\u0119\2\u178b"+
		"\u178c\7\u01a7\2\2\u178c\u178d\5\u0230\u0119\2\u178d\u178e\7\u0193\2\2"+
		"\u178e\u1791\5\u0230\u0119\2\u178f\u1790\7\u0191\2\2\u1790\u1792\5\u0230"+
		"\u0119\2\u1791\u178f\3\2\2\2\u1791\u1792\3\2\2\2\u1792\u1793\3\2\2\2\u1793"+
		"\u1794\7\u024c\2\2\u1794\u179c\3\2\2\2\u1795\u1796\7\u015b\2\2\u1796\u1797"+
		"\7\u0191\2\2\u1797\u1798\7\u024b\2\2\u1798\u1799\5\u0230\u0119\2\u1799"+
		"\u179a\7\u024c\2\2\u179a\u179c\3\2\2\2\u179b\u1758\3\2\2\2\u179b\u176d"+
		"\3\2\2\2\u179b\u1781\3\2\2\2\u179b\u1788\3\2\2\2\u179b\u1795\3\2\2\2\u179c"+
		"\u0255\3\2\2\2\u179d\u179e\7\u0150\2\2\u179e\u179f\7\u024b\2\2\u179f\u17a0"+
		"\7\u0094\2\2\u17a0\u17b6\5\u0210\u0109\2\u17a1\u17a2\7\u0245\2\2\u17a2"+
		"\u17a3\7\u014e\2\2\u17a3\u17a4\7\u024b\2\2\u17a4\u17a7\5\u0230\u0119\2"+
		"\u17a5\u17a6\7\u0176\2\2\u17a6\u17a8\5\u0210\u0109\2\u17a7\u17a5\3\2\2"+
		"\2\u17a7\u17a8\3\2\2\2\u17a8\u17b1\3\2\2\2\u17a9\u17aa\7\u0245\2\2\u17aa"+
		"\u17ad\5\u0230\u0119\2\u17ab\u17ac\7\u0176\2\2\u17ac\u17ae\5\u0210\u0109"+
		"\2\u17ad\u17ab\3\2\2\2\u17ad\u17ae\3\2\2\2\u17ae\u17b0\3\2\2\2\u17af\u17a9"+
		"\3\2\2\2\u17b0\u17b3\3\2\2\2\u17b1\u17af\3\2\2\2\u17b1\u17b2\3\2\2\2\u17b2"+
		"\u17b4\3\2\2\2\u17b3\u17b1\3\2\2\2\u17b4\u17b5\7\u024c\2\2\u17b5\u17b7"+
		"\3\2\2\2\u17b6\u17a1\3\2\2\2\u17b6\u17b7\3\2\2\2\u17b7\u17bc\3\2\2\2\u17b8"+
		"\u17b9\7\u0245\2\2\u17b9\u17bb\5\u0230\u0119\2\u17ba\u17b8\3\2\2\2\u17bb"+
		"\u17be\3\2\2\2\u17bc\u17ba\3\2\2\2\u17bc\u17bd\3\2\2\2\u17bd\u17bf\3\2"+
		"\2\2\u17be\u17bc\3\2\2\2\u17bf\u17c0\7\u024c\2\2\u17c0\u183f\3\2\2\2\u17c1"+
		"\u17c2\7\u0152\2\2\u17c2\u17c3\7\u024b\2\2\u17c3\u17c6\5\u0230\u0119\2"+
		"\u17c4\u17c5\7\u0176\2\2\u17c5\u17c7\5\u0210\u0109\2\u17c6\u17c4\3\2\2"+
		"\2\u17c6\u17c7\3\2\2\2\u17c7\u17d0\3\2\2\2\u17c8\u17c9\7\u0245\2\2\u17c9"+
		"\u17cc\5\u0230\u0119\2\u17ca\u17cb\7\u0176\2\2\u17cb\u17cd\5\u0210\u0109"+
		"\2\u17cc\u17ca\3\2\2\2\u17cc\u17cd\3\2\2\2\u17cd\u17cf\3\2\2\2\u17ce\u17c8"+
		"\3\2\2\2\u17cf\u17d2\3\2\2\2\u17d0\u17ce\3\2\2\2\u17d0\u17d1\3\2\2\2\u17d1"+
		"\u17d3\3\2\2\2\u17d2\u17d0\3\2\2\2\u17d3\u17d4\7\u024c\2\2\u17d4\u183f"+
		"\3\2\2\2\u17d5\u17d6\7\u0155\2\2\u17d6\u17d7\7\u024b\2\2\u17d7\u17d8\7"+
		"\u0094\2\2\u17d8\u17db\5\u0210\u0109\2\u17d9\u17da\7\u0245\2\2\u17da\u17dc"+
		"\5\u0230\u0119\2\u17db\u17d9\3\2\2\2\u17db\u17dc\3\2\2\2\u17dc\u17dd\3"+
		"\2\2\2\u17dd\u17de\7\u024c\2\2\u17de\u183f\3\2\2\2\u17df\u17e0\7\u0156"+
		"\2\2\u17e0\u17e1\7\u024b\2\2\u17e1\u17e2\5\u0230\u0119\2\u17e2\u17e3\7"+
		"\u0245\2\2\u17e3\u17e7\7\u0119\2\2\u17e4\u17e8\5\u0230\u0119\2\u17e5\u17e6"+
		"\7\u0098\2\2\u17e6\u17e8\7\u0117\2\2\u17e7\u17e4\3\2\2\2\u17e7\u17e5\3"+
		"\2\2\2\u17e8\u17f1\3\2\2\2\u17e9\u17ea\7\u0245\2\2\u17ea\u17ef\7\u00ef"+
		"\2\2\u17eb\u17f0\7\u0125\2\2\u17ec\u17f0\7\u0098\2\2\u17ed\u17ee\7\u0098"+
		"\2\2\u17ee\u17f0\7\u0117\2\2\u17ef\u17eb\3\2\2\2\u17ef\u17ec\3\2\2\2\u17ef"+
		"\u17ed\3\2\2\2\u17f0\u17f2\3\2\2\2\u17f1\u17e9\3\2\2\2\u17f1\u17f2\3\2"+
		"\2\2\u17f2\u17f3\3\2\2\2\u17f3\u17f4\7\u024c\2\2\u17f4\u183f\3\2\2\2\u17f5"+
		"\u17f6\7\u0151\2\2\u17f6\u17f7\7\u024b\2\2\u17f7\u17f8\5\u0230\u0119\2"+
		"\u17f8\u17fb\7\u00af\2\2\u17f9\u17fa\7\26\2\2\u17fa\u17fc\7\u00c4\2\2"+
		"\u17fb\u17f9\3\2\2\2\u17fb\u17fc\3\2\2\2\u17fc\u17fd\3\2\2\2\u17fd\u1800"+
		"\5\u0230\u0119\2\u17fe\u17ff\7\26\2\2\u17ff\u1801\7\u00c4\2\2\u1800\u17fe"+
		"\3\2\2\2\u1800\u1801\3\2\2\2\u1801\u1802\3\2\2\2\u1802\u1803\7\u024c\2"+
		"\2\u1803\u183f\3\2\2\2\u1804\u1805\7\u0154\2\2\u1805\u1806\7\u024b\2\2"+
		"\u1806\u1807\t*\2\2\u1807\u1808\5\u0230\u0119\2\u1808\u1809\7\u024c\2"+
		"\2\u1809\u183f\3\2\2\2\u180a\u180b\7\u0157\2\2\u180b\u180c\7\u024b\2\2"+
		"\u180c\u180d\t*\2\2\u180d\u180e\5\u0230\u0119\2\u180e\u180f\7\u0176\2"+
		"\2\u180f\u1810\5\u0224\u0113\2\u1810\u1811\7\u024c\2\2\u1811\u183f\3\2"+
		"\2\2\u1812\u1813\7\u0158\2\2\u1813\u1826\7\u024b\2\2\u1814\u1815\7\u0153"+
		"\2\2\u1815\u1816\7\u024b\2\2\u1816\u1817\5\u0230\u0119\2\u1817\u1818\7"+
		"\u0176\2\2\u1818\u1820\5\u0210\u0109\2\u1819\u181a\7\u0245\2\2\u181a\u181b"+
		"\5\u0230\u0119\2\u181b\u181c\7\u0176\2\2\u181c\u181d\5\u0210\u0109\2\u181d"+
		"\u181f\3\2\2\2\u181e\u1819\3\2\2\2\u181f\u1822\3\2\2\2\u1820\u181e\3\2"+
		"\2\2\u1820\u1821\3\2\2\2\u1821\u1823\3\2\2\2\u1822\u1820\3\2\2\2\u1823"+
		"\u1824\7\u024c\2\2\u1824\u1825\7\u0245\2\2\u1825\u1827\3\2\2\2\u1826\u1814"+
		"\3\2\2\2\u1826\u1827\3\2\2\2\u1827\u1828\3\2\2\2\u1828\u1829\5\u0230\u0119"+
		"\2\u1829\u182c\7\u00af\2\2\u182a\u182b\7\26\2\2\u182b\u182d\7\u00c4\2"+
		"\2\u182c\u182a\3\2\2\2\u182c\u182d\3\2\2\2\u182d\u182e\3\2\2\2\u182e\u1831"+
		"\5\u0230\u0119\2\u182f\u1830\7\26\2\2\u1830\u1832\7\u00c4\2\2\u1831\u182f"+
		"\3\2\2\2\u1831\u1832\3\2\2\2\u1832\u1833\3\2\2\2\u1833\u1834\7#\2\2\u1834"+
		"\u1839\5\u0258\u012d\2\u1835\u1836\7\u0245\2\2\u1836\u1838\5\u0258\u012d"+
		"\2\u1837\u1835\3\2\2\2\u1838\u183b\3\2\2\2\u1839\u1837\3\2\2\2\u1839\u183a"+
		"\3\2\2\2\u183a\u183c\3\2\2\2\u183b\u1839\3\2\2\2\u183c\u183d\7\u024c\2"+
		"\2\u183d\u183f\3\2\2\2\u183e\u179d\3\2\2\2\u183e\u17c1\3\2\2\2\u183e\u17d5"+
		"\3\2\2\2\u183e\u17df\3\2\2\2\u183e\u17f5\3\2\2\2\u183e\u1804\3\2\2\2\u183e"+
		"\u180a\3\2\2\2\u183e\u1812\3\2\2\2\u183f\u0257\3\2\2\2\u1840\u1852\5\u0210"+
		"\u0109\2\u1841\u1844\5\u0224\u0113\2\u1842\u1843\7\u01fd\2\2\u1843\u1845"+
		"\5\u0230\u0119\2\u1844\u1842\3\2\2\2\u1844\u1845\3\2\2\2\u1845\u1848\3"+
		"\2\2\2\u1846\u1847\7\u0187\2\2\u1847\u1849\5\u0230\u0119\2\u1848\u1846"+
		"\3\2\2\2\u1848\u1849\3\2\2\2\u1849\u184e\3\2\2\2\u184a\u184c\7\u01a0\2"+
		"\2\u184b\u184a\3\2\2\2\u184b\u184c\3\2\2\2\u184c\u184d\3\2\2\2\u184d\u184f"+
		"\7\u01a1\2\2\u184e\u184b\3\2\2\2\u184e\u184f\3\2\2\2\u184f\u1853\3\2\2"+
		"\2\u1850\u1851\7\u0191\2\2\u1851\u1853\7\u00a5\2\2\u1852\u1841\3\2\2\2"+
		"\u1852\u1850\3\2\2\2\u1853\u0259\3\2\2\2\u1854\u1855\tX\2\2\u1855\u1858"+
		"\7\u024b\2\2\u1856\u1859\5\u0230\u0119\2\u1857\u1859\5\u0274\u013b\2\u1858"+
		"\u1856\3\2\2\2\u1858\u1857\3\2\2\2\u1859\u185a\3\2\2\2\u185a\u185b\7\u024c"+
		"\2\2\u185b\u025b\3\2\2\2\u185c\u185d\7Y\2\2\u185d\u185e\7\u024b\2\2\u185e"+
		"\u185f\7\u01ba\2\2\u185f\u1860\5\u0230\u0119\2\u1860\u1861\7\u024c\2\2"+
		"\u1861\u025d\3\2\2\2\u1862\u1864\7\u024b\2\2\u1863\u1865\5\u0210\u0109"+
		"\2\u1864\u1863\3\2\2\2\u1864\u1865\3\2\2\2\u1865\u1867\3\2\2\2\u1866\u1868"+
		"\5\u01f6\u00fc\2\u1867\u1866\3\2\2\2\u1867\u1868\3\2\2\2\u1868\u186a\3"+
		"\2\2\2\u1869\u186b\5\u0298\u014d\2\u186a\u1869\3\2\2\2\u186a\u186b\3\2"+
		"\2\2\u186b\u186d\3\2\2\2\u186c\u186e\5\u0260\u0131\2\u186d\u186c\3\2\2"+
		"\2\u186d\u186e\3\2\2\2\u186e\u186f\3\2\2\2\u186f\u1870\7\u024c\2\2\u1870"+
		"\u025f\3\2\2\2\u1871\u1878\tY\2\2\u1872\u1879\5\u0262\u0132\2\u1873\u1874"+
		"\7\u0127\2\2\u1874\u1875\5\u0262\u0132\2\u1875\u1876\7\u0173\2\2\u1876"+
		"\u1877\5\u0262\u0132\2\u1877\u1879\3\2\2\2\u1878\u1872\3\2\2\2\u1878\u1873"+
		"\3\2\2\2\u1879\u1883\3\2\2\2\u187a\u1881\7Q\2\2\u187b\u187c\7\63\2\2\u187c"+
		"\u1882\7\u0144\2\2\u187d\u1882\7\u0195\2\2\u187e\u1882\7\u0103\2\2\u187f"+
		"\u1880\7\u0098\2\2\u1880\u1882\7\u00a6\2\2\u1881\u187b\3\2\2\2\u1881\u187d"+
		"\3\2\2\2\u1881\u187e\3\2\2\2\u1881\u187f\3\2\2\2\u1882\u1884\3\2\2\2\u1883"+
		"\u187a\3\2\2\2\u1883\u1884\3\2\2\2\u1884\u0261\3\2\2\2\u1885\u1886\5\u0230"+
		"\u0119\2\u1886\u1887\tZ\2\2\u1887\u188b\3\2\2\2\u1888\u1889\7\63\2\2\u1889"+
		"\u188b\7\u0144\2\2\u188a\u1885\3\2\2\2\u188a\u1888\3\2\2\2\u188b\u0263"+
		"\3\2\2\2\u188c\u188f\7\u0175\2\2\u188d\u1890\5\u0266\u0134\2\u188e\u1890"+
		"\5\u026e\u0138\2\u188f\u188d\3\2\2\2\u188f\u188e\3\2\2\2\u1890\u0265\3"+
		"\2\2\2\u1891\u18a0\7\u0257\2\2\u1892\u1895\5\u0230\u0119\2\u1893\u1895"+
		"\5\u0266\u0134\2\u1894\u1892\3\2\2\2\u1894\u1893\3\2\2\2\u1895\u189d\3"+
		"\2\2\2\u1896\u1899\7\u0245\2\2\u1897\u189a\5\u0230\u0119\2\u1898\u189a"+
		"\5\u0266\u0134\2\u1899\u1897\3\2\2\2\u1899\u1898\3\2\2\2\u189a\u189c\3"+
		"\2\2\2\u189b\u1896\3\2\2\2\u189c\u189f\3\2\2\2\u189d\u189b\3\2\2\2\u189d"+
		"\u189e\3\2\2\2\u189e\u18a1\3\2\2\2\u189f\u189d\3\2\2\2\u18a0\u1894\3\2"+
		"\2\2\u18a0\u18a1\3\2\2\2\u18a1\u18a2\3\2\2\2\u18a2\u18a3\7\u0258\2\2\u18a3"+
		"\u0267\3\2\2\2\u18a4\u18a5\5\u0224\u0113\2\u18a5\u18a6\5\u0146\u00a4\2"+
		"\u18a6\u18ae\3\2\2\2\u18a7\u18a8\7\u0138\2\2\u18a8\u18a9\5\u0146\u00a4"+
		"\2\u18a9\u18ab\5\u022a\u0116\2\u18aa\u18ac\5\u022c\u0117\2\u18ab\u18aa"+
		"\3\2\2\2\u18ab\u18ac\3\2\2\2\u18ac\u18ae\3\2\2\2\u18ad\u18a4\3\2\2\2\u18ad"+
		"\u18a7\3\2\2\2\u18ae\u0269\3\2\2\2\u18af\u18b6\5\u0210\u0109\2\u18b0\u18b1"+
		"\7\u0253\2\2\u18b1\u18b4\5\u0210\u0109\2\u18b2\u18b3\7\u0253\2\2\u18b3"+
		"\u18b5\5\u0210\u0109\2\u18b4\u18b2\3\2\2\2\u18b4\u18b5\3\2\2\2\u18b5\u18b7"+
		"\3\2\2\2\u18b6\u18b0\3\2\2\2\u18b6\u18b7\3\2\2\2\u18b7\u026b\3\2\2\2\u18b8"+
		"\u18b9\t[\2\2\u18b9\u026d\3\2\2\2\u18ba\u18bb\7\u024b\2\2\u18bb\u18bc"+
		"\5\u0270\u0139\2\u18bc\u18bd\7\u024c\2\2\u18bd\u026f\3\2\2\2\u18be\u18c0"+
		"\5\u0276\u013c\2\u18bf\u18be\3\2\2\2\u18bf\u18c0\3\2\2\2\u18c0\u18c1\3"+
		"\2\2\2\u18c1\u18c5\5\u027a\u013e\2\u18c2\u18c4\5\u0272\u013a\2\u18c3\u18c2"+
		"\3\2\2\2\u18c4\u18c7\3\2\2\2\u18c5\u18c3\3\2\2\2\u18c5\u18c6\3\2\2\2\u18c6"+
		"\u0271\3\2\2\2\u18c7\u18c5\3\2\2\2\u18c8\u18f7\5\u0298\u014d\2\u18c9\u18cc"+
		"\7\u019d\2\2\u18ca\u18cd\5\u0230\u0119\2\u18cb\u18cd\7\u0170\2\2\u18cc"+
		"\u18ca\3\2\2\2\u18cc\u18cb\3\2\2\2\u18cd\u18f7\3\2\2\2\u18ce\u18cf\7\u01a2"+
		"\2\2\u18cf\u18d1\5\u0230\u0119\2\u18d0\u18d2\t\\\2\2\u18d1\u18d0\3\2\2"+
		"\2\u18d1\u18d2\3\2\2\2\u18d2\u18f7\3\2\2\2\u18d3\u18d4\7\u0190\2\2\u18d4"+
		"\u18d6\t]\2\2\u18d5\u18d7\5\u0230\u0119\2\u18d6\u18d5\3\2\2\2\u18d6\u18d7"+
		"\3\2\2\2\u18d7\u18d8\3\2\2\2\u18d8\u18da\t\\\2\2\u18d9\u18db\7\u01a4\2"+
		"\2\u18da\u18d9\3\2\2\2\u18da\u18db\3\2\2\2\u18db\u18f7\3\2\2\2\u18dc\u18e4"+
		"\7\u0191\2\2\u18dd\u18e5\7\u0112\2\2\u18de\u18df\7\u0098\2\2\u18df\u18e0"+
		"\7|\2\2\u18e0\u18e5\7\u0112\2\2\u18e1\u18e5\7\u00e8\2\2\u18e2\u18e3\7"+
		"|\2\2\u18e3\u18e5\7\u00e8\2\2\u18e4\u18dd\3\2\2\2\u18e4\u18de\3\2\2\2"+
		"\u18e4\u18e1\3\2\2\2\u18e4\u18e2\3\2\2\2\u18e5\u18ef\3\2\2\2\u18e6\u18e7"+
		"\7\u009e\2\2\u18e7\u18ec\5\u026a\u0136\2\u18e8\u18e9\7\u0245\2\2\u18e9"+
		"\u18eb\5\u026a\u0136\2\u18ea\u18e8\3\2\2\2\u18eb\u18ee\3\2\2\2\u18ec\u18ea"+
		"\3\2\2\2\u18ec\u18ed\3\2\2\2\u18ed\u18f0\3\2\2\2\u18ee\u18ec\3\2\2\2\u18ef"+
		"\u18e6\3\2\2\2\u18ef\u18f0\3\2\2\2\u18f0\u18f4\3\2\2\2\u18f1\u18f5\7\u009b"+
		"\2\2\u18f2\u18f3\7\u00eb\2\2\u18f3\u18f5\7\u0088\2\2\u18f4\u18f1\3\2\2"+
		"\2\u18f4\u18f2\3\2\2\2\u18f4\u18f5\3\2\2\2\u18f5\u18f7\3\2\2\2\u18f6\u18c8"+
		"\3\2\2\2\u18f6\u18c9\3\2\2\2\u18f6\u18ce\3\2\2\2\u18f6\u18d3\3\2\2\2\u18f6"+
		"\u18dc\3\2\2\2\u18f7\u0273\3\2\2\2\u18f8\u18fa\5\u0276\u013c\2\u18f9\u18f8"+
		"\3\2\2\2\u18f9\u18fa\3\2\2\2\u18fa\u18fb\3\2\2\2\u18fb\u18ff\5\u027c\u013f"+
		"\2\u18fc\u18fe\5\u0272\u013a\2\u18fd\u18fc\3\2\2\2\u18fe\u1901\3\2\2\2"+
		"\u18ff\u18fd\3\2\2\2\u18ff\u1900\3\2\2\2\u1900\u0275\3\2\2\2\u1901\u18ff"+
		"\3\2\2\2\u1902\u1904\7\u01bc\2\2\u1903\u1905\7\u00c3\2\2\u1904\u1903\3"+
		"\2\2\2\u1904\u1905\3\2\2\2\u1905\u1906\3\2\2\2\u1906\u190b\5\u0278\u013d"+
		"\2\u1907\u1908\7\u0245\2\2\u1908\u190a\5\u0278\u013d\2\u1909\u1907\3\2"+
		"\2\2\u190a\u190d\3\2\2\2\u190b\u1909\3\2\2\2\u190b\u190c\3\2\2\2\u190c"+
		"\u0277\3\2\2\2\u190d\u190b\3\2\2\2\u190e\u191a\5\u0210\u0109\2\u190f\u1910"+
		"\7\u024b\2\2\u1910\u1915\5\u0210\u0109\2\u1911\u1912\7\u0245\2\2\u1912"+
		"\u1914\5\u0210\u0109\2\u1913\u1911\3\2\2\2\u1914\u1917\3\2\2\2\u1915\u1913"+
		"\3\2\2\2\u1915\u1916\3\2\2\2\u1916\u1918\3\2\2\2\u1917\u1915\3\2\2\2\u1918"+
		"\u1919\7\u024c\2\2\u1919\u191b\3\2\2\2\u191a\u190f\3\2\2\2\u191a\u191b"+
		"\3\2\2\2\u191b\u191c\3\2\2\2\u191c\u1921\7\u0176\2\2\u191d\u191f\7\u01a0"+
		"\2\2\u191e\u191d\3\2\2\2\u191e\u191f\3\2\2\2\u191f\u1920\3\2\2\2\u1920"+
		"\u1922\7\u008c\2\2\u1921\u191e\3\2\2\2\u1921\u1922\3\2\2\2\u1922\u1923"+
		"\3\2\2\2\u1923\u1924\7\u024b\2\2\u1924\u1925\5\20\t\2\u1925\u1926\7\u024c"+
		"\2\2\u1926\u0279\3\2\2\2\u1927\u1928\b\u013e\1\2\u1928\u1929\7\u024b\2"+
		"\2\u1929\u192a\5\u0270\u0139\2\u192a\u192b\7\u024c\2\2\u192b\u192e\3\2"+
		"\2\2\u192c\u192e\5\u027e\u0140\2\u192d\u1927\3\2\2\2\u192d\u192c\3\2\2"+
		"\2\u192e\u1937\3\2\2\2\u192f\u1930\f\4\2\2\u1930\u1932\t^\2\2\u1931\u1933"+
		"\5\u026c\u0137\2\u1932\u1931\3\2\2\2\u1932\u1933\3\2\2\2\u1933\u1934\3"+
		"\2\2\2\u1934\u1936\5\u027a\u013e\5\u1935\u192f\3\2\2\2\u1936\u1939\3\2"+
		"\2\2\u1937\u1935\3\2\2\2\u1937\u1938\3\2\2\2\u1938\u027b\3\2\2\2\u1939"+
		"\u1937\3\2\2\2\u193a\u193b\5\u027a\u013e\2\u193b\u193d\t^\2\2\u193c\u193e"+
		"\5\u026c\u0137\2\u193d\u193c\3\2\2\2\u193d\u193e\3\2\2\2\u193e\u1944\3"+
		"\2\2\2\u193f\u1945\5\u027e\u0140\2\u1940\u1941\7\u024b\2\2\u1941\u1942"+
		"\5\u0270\u0139\2\u1942\u1943\7\u024c\2\2\u1943\u1945\3\2\2\2\u1944\u193f"+
		"\3\2\2\2\u1944\u1940\3\2\2\2\u1945\u1948\3\2\2\2\u1946\u1948\5\u027e\u0140"+
		"\2\u1947\u193a\3\2\2\2\u1947\u1946\3\2\2\2\u1948\u027d\3\2\2\2\u1949\u1959"+
		"\7\u01ab\2\2\u194a\u1957\5\u026c\u0137\2\u194b\u194c\7\u01a3\2\2\u194c"+
		"\u194d\7\u024b\2\2\u194d\u1952\5\u0230\u0119\2\u194e\u194f\7\u0245\2\2"+
		"\u194f\u1951\5\u0230\u0119\2\u1950\u194e\3\2\2\2\u1951\u1954\3\2\2\2\u1952"+
		"\u1950\3\2\2\2\u1952\u1953\3\2\2\2\u1953\u1955\3\2\2\2\u1954\u1952\3\2"+
		"\2\2\u1955\u1956\7\u024c\2\2\u1956\u1958\3\2\2\2\u1957\u194b\3\2\2\2\u1957"+
		"\u1958\3\2\2\2\u1958\u195a\3\2\2\2\u1959\u194a\3\2\2\2\u1959\u195a\3\2"+
		"\2\2\u195a\u195c\3\2\2\2\u195b\u195d\5\u0280\u0141\2\u195c\u195b\3\2\2"+
		"\2\u195c\u195d\3\2\2\2\u195d\u195f\3\2\2\2\u195e\u1960\5\u0284\u0143\2"+
		"\u195f\u195e\3\2\2\2\u195f\u1960\3\2\2\2\u1960\u196a\3\2\2\2\u1961\u1962"+
		"\7\u0193\2\2\u1962\u1967\5\u0286\u0144\2\u1963\u1964\7\u0245\2\2\u1964"+
		"\u1966\5\u0286\u0144\2\u1965\u1963\3\2\2\2\u1966\u1969\3\2\2\2\u1967\u1965"+
		"\3\2\2\2\u1967\u1968\3\2\2\2\u1968\u196b\3\2\2\2\u1969\u1967\3\2\2\2\u196a"+
		"\u1961\3\2\2\2\u196a\u196b\3\2\2\2\u196b\u196e\3\2\2\2\u196c\u196d\7\u01ba"+
		"\2\2\u196d\u196f\5\u0230\u0119\2\u196e\u196c\3\2\2\2\u196e\u196f\3\2\2"+
		"\2\u196f\u1971\3\2\2\2\u1970\u1972\5\u028e\u0148\2\u1971\u1970\3\2\2\2"+
		"\u1971\u1972\3\2\2\2\u1972\u1975\3\2\2\2\u1973\u1974\7\u0196\2\2\u1974"+
		"\u1976\5\u0230\u0119\2\u1975\u1973\3\2\2\2\u1975\u1976\3\2\2\2\u1976\u1985"+
		"\3\2\2\2\u1977\u1978\7\u01bb\2\2\u1978\u1979\5\u0210\u0109\2\u1979\u197a"+
		"\7\u0176\2\2\u197a\u1982\5\u025e\u0130\2\u197b\u197c\7\u0245\2\2\u197c"+
		"\u197d\5\u0210\u0109\2\u197d\u197e\7\u0176\2\2\u197e\u197f\5\u025e\u0130"+
		"\2\u197f\u1981\3\2\2\2\u1980\u197b\3\2\2\2\u1981\u1984\3\2\2\2\u1982\u1980"+
		"\3\2\2\2\u1982\u1983\3\2\2\2\u1983\u1986\3\2\2\2\u1984\u1982\3\2\2\2\u1985"+
		"\u1977\3\2\2\2\u1985\u1986\3\2\2\2\u1986\u1991\3\2\2\2\u1987\u1989\7\u01af"+
		"\2\2\u1988\u198a\7\u01a4\2\2\u1989\u1988\3\2\2\2\u1989\u198a\3\2\2\2\u198a"+
		"\u198b\3\2\2\2\u198b\u198d\5\u026a\u0136\2\u198c\u198e\7\u024f\2\2\u198d"+
		"\u198c\3\2\2\2\u198d\u198e\3\2\2\2\u198e\u1991\3\2\2\2\u198f\u1991\5\u0294"+
		"\u014b\2\u1990\u1949\3\2\2\2\u1990\u1987\3\2\2\2\u1990\u198f\3\2\2\2\u1991"+
		"\u027f\3\2\2\2\u1992\u1997\5\u0282\u0142\2\u1993\u1994\7\u0245\2\2\u1994"+
		"\u1996\5\u0282\u0142\2\u1995\u1993\3\2\2\2\u1996\u1999\3\2\2\2\u1997\u1995"+
		"\3\2\2\2\u1997\u1998\3\2\2\2\u1998\u0281\3\2\2\2\u1999\u1997\3\2\2\2\u199a"+
		"\u199e\5\u0230\u0119\2\u199b\u199c\7\u0176\2\2\u199c\u199f\5\u0214\u010b"+
		"\2\u199d\u199f\5\u020e\u0108\2\u199e\u199b\3\2\2\2\u199e\u199d\3\2\2\2"+
		"\u199e\u199f\3\2\2\2\u199f\u0283\3\2\2\2\u19a0\u19a2\7\u019a\2\2\u19a1"+
		"\u19a3\t_\2\2\u19a2\u19a1\3\2\2\2\u19a2\u19a3\3\2\2\2\u19a3\u19a5\3\2"+
		"\2\2\u19a4\u19a6\7\u01af\2\2\u19a5\u19a4\3\2\2\2\u19a5\u19a6\3\2\2\2\u19a6"+
		"\u19a7\3\2\2\2\u19a7\u19a8\5\u026a\u0136\2\u19a8\u0285\3\2\2\2\u19a9\u19aa"+
		"\b\u0144\1\2\u19aa\u19ab\7\u024b\2\2\u19ab\u19ac\5\u0286\u0144\2\u19ac"+
		"\u19ae\7\u024c\2\2\u19ad\u19af\5\u028a\u0146\2\u19ae\u19ad\3\2\2\2\u19ae"+
		"\u19af\3\2\2\2\u19af\u19b2\3\2\2\2\u19b0\u19b2\5\u0288\u0145\2\u19b1\u19a9"+
		"\3\2\2\2\u19b1\u19b0\3\2\2\2\u19b2\u19de\3\2\2\2\u19b3\u19b4\f\7\2\2\u19b4"+
		"\u19b5\7\u015d\2\2\u19b5\u19b6\7\u0165\2\2\u19b6\u19dd\5\u0286\u0144\b"+
		"\u19b7\u19b8\f\4\2\2\u19b8\u19be\7\u0168\2\2\u19b9\u19bf\7\u0162\2\2\u19ba"+
		"\u19bc\t`\2\2\u19bb\u19bd\7\u016a\2\2\u19bc\u19bb\3\2\2\2\u19bc\u19bd"+
		"\3\2\2\2\u19bd\u19bf\3\2\2\2\u19be\u19b9\3\2\2\2\u19be\u19ba\3\2\2\2\u19be"+
		"\u19bf\3\2\2\2\u19bf\u19c0\3\2\2\2\u19c0\u19c1\7\u0165\2\2\u19c1\u19dd"+
		"\5\u0286\u0144\5\u19c2\u19c8\f\6\2\2\u19c3\u19c9\7\u0162\2\2\u19c4\u19c6"+
		"\t`\2\2\u19c5\u19c7\7\u016a\2\2\u19c6\u19c5\3\2\2\2\u19c6\u19c7\3\2\2"+
		"\2\u19c7\u19c9\3\2\2\2\u19c8\u19c3\3\2\2\2\u19c8\u19c4\3\2\2\2\u19c8\u19c9"+
		"\3\2\2\2\u19c9\u19ca\3\2\2\2\u19ca\u19cb\7\u0165\2\2\u19cb\u19cc\5\u0286"+
		"\u0144\2\u19cc\u19cd\7\u01a3\2\2\u19cd\u19ce\5\u0230\u0119\2\u19ce\u19dd"+
		"\3\2\2\2\u19cf\u19d5\f\5\2\2\u19d0\u19d6\7\u0162\2\2\u19d1\u19d3\t`\2"+
		"\2\u19d2\u19d4\7\u016a\2\2\u19d3\u19d2\3\2\2\2\u19d3\u19d4\3\2\2\2\u19d4"+
		"\u19d6\3\2\2\2\u19d5\u19d0\3\2\2\2\u19d5\u19d1\3\2\2\2\u19d5\u19d6\3\2"+
		"\2\2\u19d6\u19d7\3\2\2\2\u19d7\u19d8\7\u0165\2\2\u19d8\u19d9\5\u0286\u0144"+
		"\2\u19d9\u19da\7\u01b7\2\2\u19da\u19db\5\u01d8\u00ed\2\u19db\u19dd\3\2"+
		"\2\2\u19dc\u19b3\3\2\2\2\u19dc\u19b7\3\2\2\2\u19dc\u19c2\3\2\2\2\u19dc"+
		"\u19cf\3\2\2\2\u19dd\u19e0\3\2\2\2\u19de\u19dc\3\2\2\2\u19de\u19df\3\2"+
		"\2\2\u19df\u0287\3\2\2\2\u19e0\u19de\3\2\2\2\u19e1\u19e3\7\u01a4\2\2\u19e2"+
		"\u19e1\3\2\2\2\u19e2\u19e3\3\2\2\2\u19e3\u19e4\3\2\2\2\u19e4\u19e6\5\u026a"+
		"\u0136\2\u19e5\u19e7\7\u024f\2\2\u19e6\u19e5\3\2\2\2\u19e6\u19e7\3\2\2"+
		"\2\u19e7\u19e9\3\2\2\2\u19e8\u19ea\5\u028a\u0146\2\u19e9\u19e8\3\2\2\2"+
		"\u19e9\u19ea\3\2\2\2\u19ea\u19fb\3\2\2\2\u19eb\u19ec\7\u016e\2\2\u19ec"+
		"\u19ed\5\u0210\u0109\2\u19ed\u19ee\7\u024b\2\2\u19ee\u19f3\5\u0230\u0119"+
		"\2\u19ef\u19f0\7\u0245\2\2\u19f0\u19f2\5\u0230\u0119\2\u19f1\u19ef\3\2"+
		"\2\2\u19f2\u19f5\3\2\2\2\u19f3\u19f1\3\2\2\2\u19f3\u19f4\3\2\2\2\u19f4"+
		"\u19f6\3\2\2\2\u19f5\u19f3\3\2\2\2\u19f6\u19f9\7\u024c\2\2\u19f7\u19f8"+
		"\7\u00cb\2\2\u19f8\u19fa\5\u0230\u0119\2\u19f9\u19f7\3\2\2\2\u19f9\u19fa"+
		"\3\2\2\2\u19fa\u19fc\3\2\2\2\u19fb\u19eb\3\2\2\2\u19fb\u19fc\3\2\2\2\u19fc"+
		"\u1a50\3\2\2\2\u19fd\u19ff\7\u019b\2\2\u19fe\u19fd\3\2\2\2\u19fe\u19ff"+
		"\3\2\2\2\u19ff\u1a00\3\2\2\2\u1a00\u1a01\5\u026e\u0138\2\u1a01\u1a02\5"+
		"\u028a\u0146\2\u1a02\u1a50\3\2\2\2\u1a03\u1a05\7\u019b\2\2\u1a04\u1a03"+
		"\3\2\2\2\u1a04\u1a05\3\2\2\2\u1a05\u1a06\3\2\2\2\u1a06\u1a09\5\u0246\u0124"+
		"\2\u1a07\u1a08\7\u01bc\2\2\u1a08\u1a0a\7\u00a5\2\2\u1a09\u1a07\3\2\2\2"+
		"\u1a09\u1a0a\3\2\2\2\u1a0a\u1a1f\3\2\2\2\u1a0b\u1a0c\7\u0176\2\2\u1a0c"+
		"\u1a20\5\u028c\u0147\2\u1a0d\u1a0f\7\u0176\2\2\u1a0e\u1a0d\3\2\2\2\u1a0e"+
		"\u1a0f\3\2\2\2\u1a0f\u1a10\3\2\2\2\u1a10\u1a1d\5\u0210\u0109\2\u1a11\u1a12"+
		"\7\u024b\2\2\u1a12\u1a17\5\u0210\u0109\2\u1a13\u1a14\7\u0245\2\2\u1a14"+
		"\u1a16\5\u0210\u0109\2\u1a15\u1a13\3\2\2\2\u1a16\u1a19\3\2\2\2\u1a17\u1a15"+
		"\3\2\2\2\u1a17\u1a18\3\2\2\2\u1a18\u1a1a\3\2\2\2\u1a19\u1a17\3\2\2\2\u1a1a"+
		"\u1a1b\7\u024c\2\2\u1a1b\u1a1e\3\2\2\2\u1a1c\u1a1e\5\u028c\u0147\2\u1a1d"+
		"\u1a11\3\2\2\2\u1a1d\u1a1c\3\2\2\2\u1a1d\u1a1e\3\2\2\2\u1a1e\u1a20\3\2"+
		"\2\2\u1a1f\u1a0b\3\2\2\2\u1a1f\u1a0e\3\2\2\2\u1a1f\u1a20\3\2\2\2\u1a20"+
		"\u1a50\3\2\2\2\u1a21\u1a23\7\u019b\2\2\u1a22\u1a21\3\2\2\2\u1a22\u1a23"+
		"\3\2\2\2\u1a23\u1a24\3\2\2\2\u1a24\u1a25\7\u00d8\2\2\u1a25\u1a26\7\u0193"+
		"\2\2\u1a26\u1a27\7\u024b\2\2\u1a27\u1a2a\5\u0246\u0124\2\u1a28\u1a29\7"+
		"\u0176\2\2\u1a29\u1a2b\5\u028c\u0147\2\u1a2a\u1a28\3\2\2\2\u1a2a\u1a2b"+
		"\3\2\2\2\u1a2b\u1a34\3\2\2\2\u1a2c\u1a2d\7\u0245\2\2\u1a2d\u1a30\5\u0246"+
		"\u0124\2\u1a2e\u1a2f\7\u0176\2\2\u1a2f\u1a31\5\u028c\u0147\2\u1a30\u1a2e"+
		"\3\2\2\2\u1a30\u1a31\3\2\2\2\u1a31\u1a33\3\2\2\2\u1a32\u1a2c\3\2\2\2\u1a33"+
		"\u1a36\3\2\2\2\u1a34\u1a32\3\2\2\2\u1a34\u1a35\3\2\2\2\u1a35\u1a37\3\2"+
		"\2\2\u1a36\u1a34\3\2\2\2\u1a37\u1a3a\7\u024c\2\2\u1a38\u1a39\7\u01bc\2"+
		"\2\u1a39\u1a3b\7\u00a5\2\2\u1a3a\u1a38\3\2\2\2\u1a3a\u1a3b\3\2\2\2\u1a3b"+
		"\u1a4d\3\2\2\2\u1a3c\u1a3e\7\u0176\2\2\u1a3d\u1a3c\3\2\2\2\u1a3d\u1a3e"+
		"\3\2\2\2\u1a3e\u1a3f\3\2\2\2\u1a3f\u1a4b\5\u0210\u0109\2\u1a40\u1a41\7"+
		"\u024b\2\2\u1a41\u1a46\5\u0210\u0109\2\u1a42\u1a43\7\u0245\2\2\u1a43\u1a45"+
		"\5\u0210\u0109\2\u1a44\u1a42\3\2\2\2\u1a45\u1a48\3\2\2\2\u1a46\u1a44\3"+
		"\2\2\2\u1a46\u1a47\3\2\2\2\u1a47\u1a49\3\2\2\2\u1a48\u1a46\3\2\2\2\u1a49"+
		"\u1a4a\7\u024c\2\2\u1a4a\u1a4c\3\2\2\2\u1a4b\u1a40\3\2\2\2\u1a4b\u1a4c"+
		"\3\2\2\2\u1a4c\u1a4e\3\2\2\2\u1a4d\u1a3d\3\2\2\2\u1a4d\u1a4e\3\2\2\2\u1a4e"+
		"\u1a50\3\2\2\2\u1a4f\u19e2\3\2\2\2\u1a4f\u19fe\3\2\2\2\u1a4f\u1a04\3\2"+
		"\2\2\u1a4f\u1a22\3\2\2\2\u1a50\u0289\3\2\2\2\u1a51\u1a53\7\u0176\2\2\u1a52"+
		"\u1a51\3\2\2\2\u1a52\u1a53\3\2\2\2\u1a53\u1a54\3\2\2\2\u1a54\u1a60\5\u0210"+
		"\u0109\2\u1a55\u1a56\7\u024b\2\2\u1a56\u1a5b\5\u0210\u0109\2\u1a57\u1a58"+
		"\7\u0245\2\2\u1a58\u1a5a\5\u0210\u0109\2\u1a59\u1a57\3\2\2\2\u1a5a\u1a5d"+
		"\3\2\2\2\u1a5b\u1a59\3\2\2\2\u1a5b\u1a5c\3\2\2\2\u1a5c\u1a5e\3\2\2\2\u1a5d"+
		"\u1a5b\3\2\2\2\u1a5e\u1a5f\7\u024c\2\2\u1a5f\u1a61\3\2\2\2\u1a60\u1a55"+
		"\3\2\2\2\u1a60\u1a61\3\2\2\2\u1a61\u028b\3\2\2\2\u1a62\u1a63\7\u024b\2"+
		"\2\u1a63\u1a64\5\u0210\u0109\2\u1a64\u1a6b\5\u0224\u0113\2\u1a65\u1a66"+
		"\7\u0245\2\2\u1a66\u1a67\5\u0210\u0109\2\u1a67\u1a68\5\u0224\u0113\2\u1a68"+
		"\u1a6a\3\2\2\2\u1a69\u1a65\3\2\2\2\u1a6a\u1a6d\3\2\2\2\u1a6b\u1a69\3\2"+
		"\2\2\u1a6b\u1a6c\3\2\2\2\u1a6c\u1a6e\3\2\2\2\u1a6d\u1a6b\3\2\2\2\u1a6e"+
		"\u1a6f\7\u024c\2\2\u1a6f\u028d\3\2\2\2\u1a70\u1a71\7\u0195\2\2\u1a71\u1a72"+
		"\7\26\2\2\u1a72\u1a73\5\u0290\u0149\2\u1a73\u028f\3\2\2\2\u1a74\u1a79"+
		"\5\u0292\u014a\2\u1a75\u1a76\7\u0245\2\2\u1a76\u1a78\5\u0292\u014a\2\u1a77"+
		"\u1a75\3\2\2\2\u1a78\u1a7b\3\2\2\2\u1a79\u1a77\3\2\2\2\u1a79\u1a7a\3\2"+
		"\2\2\u1a7a\u0291\3\2\2\2\u1a7b\u1a79\3\2\2\2\u1a7c\u1a8a\5\u0230\u0119"+
		"\2\u1a7d\u1a7e\7\u024b\2\2\u1a7e\u1a8a\7\u024c\2\2\u1a7f\u1a84\7\u00d5"+
		"\2\2\u1a80\u1a84\7\62\2\2\u1a81\u1a82\7\u0134\2\2\u1a82\u1a84\7\u00e7"+
		"\2\2\u1a83\u1a7f\3\2\2\2\u1a83\u1a80\3\2\2\2\u1a83\u1a81\3\2\2\2\u1a84"+
		"\u1a85\3\2\2\2\u1a85\u1a86\7\u024b\2\2\u1a86\u1a87\5\u0290\u0149\2\u1a87"+
		"\u1a88\7\u024c\2\2\u1a88\u1a8a\3\2\2\2\u1a89\u1a7c\3\2\2\2\u1a89\u1a7d"+
		"\3\2\2\2\u1a89\u1a83\3\2\2\2\u1a8a\u0293\3\2\2\2\u1a8b\u1a8c\7\u014c\2"+
		"\2\u1a8c\u1a91\5\u0296\u014c\2\u1a8d\u1a8e\7\u0245\2\2\u1a8e\u1a90\5\u0296"+
		"\u014c\2\u1a8f\u1a8d\3\2\2\2\u1a90\u1a93\3\2\2\2\u1a91\u1a8f\3\2\2\2\u1a91"+
		"\u1a92\3\2\2\2\u1a92\u0295\3\2\2\2\u1a93\u1a91\3\2\2\2\u1a94\u1a97\7\u024b"+
		"\2\2\u1a95\u1a98\5\u0230\u0119\2\u1a96\u1a98\7\u0187\2\2\u1a97\u1a95\3"+
		"\2\2\2\u1a97\u1a96\3\2\2\2\u1a98\u1aa0\3\2\2\2\u1a99\u1a9c\7\u0245\2\2"+
		"\u1a9a\u1a9d\5\u0230\u0119\2\u1a9b\u1a9d\7\u0187\2\2\u1a9c\u1a9a\3\2\2"+
		"\2\u1a9c\u1a9b\3\2\2\2\u1a9d\u1a9f\3\2\2\2\u1a9e\u1a99\3\2\2\2\u1a9f\u1aa2"+
		"\3\2\2\2\u1aa0\u1a9e\3\2\2\2\u1aa0\u1aa1\3\2\2\2\u1aa1\u1aa3\3\2\2\2\u1aa2"+
		"\u1aa0\3\2\2\2\u1aa3\u1aa4\7\u024c\2\2\u1aa4\u0297\3\2\2\2\u1aa5\u1aa6"+
		"\7\u01a6\2\2\u1aa6\u1aa7\7\26\2\2\u1aa7\u1aa8";
	private static final String _serializedATNSegment3 =
		"\5\u029a\u014e\2\u1aa8\u0299\3\2\2\2\u1aa9\u1aae\5\u029c\u014f\2\u1aaa"+
		"\u1aab\7\u0245\2\2\u1aab\u1aad\5\u029c\u014f\2\u1aac\u1aaa\3\2\2\2\u1aad"+
		"\u1ab0\3\2\2\2\u1aae\u1aac\3\2\2\2\u1aae\u1aaf\3\2\2\2\u1aaf\u029b\3\2"+
		"\2\2\u1ab0\u1aae\3\2\2\2\u1ab1\u1ab3\5\u0230\u0119\2\u1ab2\u1ab4\5\u026a"+
		"\u0136\2\u1ab3\u1ab2\3\2\2\2\u1ab3\u1ab4\3\2\2\2\u1ab4\u1ab6\3\2\2\2\u1ab5"+
		"\u1ab7\5\u029e\u0150\2\u1ab6\u1ab5\3\2\2\2\u1ab6\u1ab7\3\2\2\2\u1ab7\u1ab9"+
		"\3\2\2\2\u1ab8\u1aba\5\u02a0\u0151\2\u1ab9\u1ab8\3\2\2\2\u1ab9\u1aba\3"+
		"\2\2\2\u1aba\u029d\3\2\2\2\u1abb\u1ac0\7\u0177\2\2\u1abc\u1ac0\7\u0189"+
		"\2\2\u1abd\u1abe\7\u01b7\2\2\u1abe\u1ac0\5\u0236\u011c\2\u1abf\u1abb\3"+
		"\2\2\2\u1abf\u1abc\3\2\2\2\u1abf\u1abd\3\2\2\2\u1ac0\u029f\3\2\2\2\u1ac1"+
		"\u1ac2\7\u009c\2\2\u1ac2\u1ac3\ta\2\2\u1ac3\u02a1\3\2\2\2\u1ac4\u1ac6"+
		"\5\u0276\u013c\2\u1ac5\u1ac4\3\2\2\2\u1ac5\u1ac6\3\2\2\2\u1ac6\u1ac7\3"+
		"\2\2\2\u1ac7\u1ac8\7x\2\2\u1ac8\u1ac9\7\u019a\2\2\u1ac9\u1acc\5\u026a"+
		"\u0136\2\u1aca\u1acb\7\u0176\2\2\u1acb\u1acd\5\u0210\u0109\2\u1acc\u1aca"+
		"\3\2\2\2\u1acc\u1acd\3\2\2\2\u1acd\u1ad1\3\2\2\2\u1ace\u1acf\7\u00a8\2"+
		"\2\u1acf\u1ad0\tb\2\2\u1ad0\u1ad2\7\u0117\2\2\u1ad1\u1ace\3\2\2\2\u1ad1"+
		"\u1ad2\3\2\2\2\u1ad2\u1ad4\3\2\2\2\u1ad3\u1ad5\5\u02a4\u0153\2\u1ad4\u1ad3"+
		"\3\2\2\2\u1ad4\u1ad5\3\2\2\2\u1ad5\u1ad9\3\2\2\2\u1ad6\u1ada\5\u0270\u0139"+
		"\2\u1ad7\u1ad8\7\u0187\2\2\u1ad8\u1ada\7\u014c\2\2\u1ad9\u1ad6\3\2\2\2"+
		"\u1ad9\u1ad7\3\2\2\2\u1ada\u1ae1\3\2\2\2\u1adb\u1adc\7\u01a3\2\2\u1adc"+
		"\u1ade\7)\2\2\u1add\u1adf\5\u02a8\u0155\2\u1ade\u1add\3\2\2\2\u1ade\u1adf"+
		"\3\2\2\2\u1adf\u1ae0\3\2\2\2\u1ae0\u1ae2\5\u02aa\u0156\2\u1ae1\u1adb\3"+
		"\2\2\2\u1ae1\u1ae2\3\2\2\2\u1ae2\u1ae5\3\2\2\2\u1ae3\u1ae4\7\u01aa\2\2"+
		"\u1ae4\u1ae6\5\u0280\u0141\2\u1ae5\u1ae3\3\2\2\2\u1ae5\u1ae6\3\2\2\2\u1ae6"+
		"\u02a3\3\2\2\2\u1ae7\u1ae8\7\u024b\2\2\u1ae8\u1aed\5\u02a6\u0154\2\u1ae9"+
		"\u1aea\7\u0245\2\2\u1aea\u1aec\5\u02a6\u0154\2\u1aeb\u1ae9\3\2\2\2\u1aec"+
		"\u1aef\3\2\2\2\u1aed\u1aeb\3\2\2\2\u1aed\u1aee\3\2\2\2\u1aee\u1af0\3\2"+
		"\2\2\u1aef\u1aed\3\2\2\2\u1af0\u1af1\7\u024c\2\2\u1af1\u02a5\3\2\2\2\u1af2"+
		"\u1af4\5\u0210\u0109\2\u1af3\u1af5\5\u0200\u0101\2\u1af4\u1af3\3\2\2\2"+
		"\u1af4\u1af5\3\2\2\2\u1af5\u02a7\3\2\2\2\u1af6\u1af8\5\u0094K\2\u1af7"+
		"\u1af9\5\u0098M\2\u1af8\u1af7\3\2\2\2\u1af8\u1af9\3\2\2\2\u1af9\u1afe"+
		"\3\2\2\2\u1afa\u1afb\7\u01a3\2\2\u1afb\u1afc\7\u017f\2\2\u1afc\u1afe\5"+
		"\u0210\u0109\2\u1afd\u1af6\3\2\2\2\u1afd\u1afa\3\2\2\2\u1afe\u02a9\3\2"+
		"\2\2\u1aff\u1b00\7\u018b\2\2\u1b00\u1b11\7\u0099\2\2\u1b01\u1b02\7\u018b"+
		"\2\2\u1b02\u1b03\7\u0112\2\2\u1b03\u1b04\7\u00e6\2\2\u1b04\u1b09\5\u02b0"+
		"\u0159\2\u1b05\u1b06\7\u0245\2\2\u1b06\u1b08\5\u02b0\u0159\2\u1b07\u1b05"+
		"\3\2\2\2\u1b08\u1b0b\3\2\2\2\u1b09\u1b07\3\2\2\2\u1b09\u1b0a\3\2\2\2\u1b0a"+
		"\u1b0e\3\2\2\2\u1b0b\u1b09\3\2\2\2\u1b0c\u1b0d\7\u01ba\2\2\u1b0d\u1b0f"+
		"\5\u0230\u0119\2\u1b0e\u1b0c\3\2\2\2\u1b0e\u1b0f\3\2\2\2\u1b0f\u1b11\3"+
		"\2\2\2\u1b10\u1aff\3\2\2\2\u1b10\u1b01\3\2\2\2\u1b11\u02ab\3\2\2\2\u1b12"+
		"\u1b14\5\u0276\u013c\2\u1b13\u1b12\3\2\2\2\u1b13\u1b14\3\2\2\2\u1b14\u1b15"+
		"\3\2\2\2\u1b15\u1b16\7>\2\2\u1b16\u1b18\7\u0193\2\2\u1b17\u1b19\7\u01a4"+
		"\2\2\u1b18\u1b17\3\2\2\2\u1b18\u1b19\3\2\2\2\u1b19\u1b1a\3\2\2\2\u1b1a"+
		"\u1b1c\5\u026a\u0136\2\u1b1b\u1b1d\7\u024f\2\2\u1b1c\u1b1b\3\2\2\2\u1b1c"+
		"\u1b1d\3\2\2\2\u1b1d\u1b22\3\2\2\2\u1b1e\u1b20\7\u0176\2\2\u1b1f\u1b1e"+
		"\3\2\2\2\u1b1f\u1b20\3\2\2\2\u1b20\u1b21\3\2\2\2\u1b21\u1b23\5\u0210\u0109"+
		"\2\u1b22\u1b1f\3\2\2\2\u1b22\u1b23\3\2\2\2\u1b23\u1b2d\3\2\2\2\u1b24\u1b25"+
		"\7\u01b7\2\2\u1b25\u1b2a\5\u0286\u0144\2\u1b26\u1b27\7\u0245\2\2\u1b27"+
		"\u1b29\5\u0286\u0144\2\u1b28\u1b26\3\2\2\2\u1b29\u1b2c\3\2\2\2\u1b2a\u1b28"+
		"\3\2\2\2\u1b2a\u1b2b\3\2\2\2\u1b2b\u1b2e\3\2\2\2\u1b2c\u1b2a\3\2\2\2\u1b2d"+
		"\u1b24\3\2\2\2\u1b2d\u1b2e\3\2\2\2\u1b2e\u1b36\3\2\2\2\u1b2f\u1b34\7\u01ba"+
		"\2\2\u1b30\u1b35\5\u0230\u0119\2\u1b31\u1b32\7\63\2\2\u1b32\u1b33\7\u009e"+
		"\2\2\u1b33\u1b35\5\u0210\u0109\2\u1b34\u1b30\3\2\2\2\u1b34\u1b31\3\2\2"+
		"\2\u1b35\u1b37\3\2\2\2\u1b36\u1b2f\3\2\2\2\u1b36\u1b37\3\2\2\2\u1b37\u1b3a"+
		"\3\2\2\2\u1b38\u1b39\7\u01aa\2\2\u1b39\u1b3b\5\u0280\u0141\2\u1b3a\u1b38"+
		"\3\2\2\2\u1b3a\u1b3b\3\2\2\2\u1b3b\u02ad\3\2\2\2\u1b3c\u1b3e\5\u0276\u013c"+
		"\2\u1b3d\u1b3c\3\2\2\2\u1b3d\u1b3e\3\2\2\2\u1b3e\u1b3f\3\2\2\2\u1b3f\u1b41"+
		"\7\u0112\2\2\u1b40\u1b42\7\u01a4\2\2\u1b41\u1b40\3\2\2\2\u1b41\u1b42\3"+
		"\2\2\2\u1b42\u1b43\3\2\2\2\u1b43\u1b45\5\u026a\u0136\2\u1b44\u1b46\7\u024f"+
		"\2\2\u1b45\u1b44\3\2\2\2\u1b45\u1b46\3\2\2\2\u1b46\u1b4b\3\2\2\2\u1b47"+
		"\u1b49\7\u0176\2\2\u1b48\u1b47\3\2\2\2\u1b48\u1b49\3\2\2\2\u1b49\u1b4a"+
		"\3\2\2\2\u1b4a\u1b4c\5\u0210\u0109\2\u1b4b\u1b48\3\2\2\2\u1b4b\u1b4c\3"+
		"\2\2\2\u1b4c\u1b4d\3\2\2\2\u1b4d\u1b4e\7\u00e6\2\2\u1b4e\u1b53\5\u02b0"+
		"\u0159\2\u1b4f\u1b50\7\u0245\2\2\u1b50\u1b52\5\u02b0\u0159\2\u1b51\u1b4f"+
		"\3\2\2\2\u1b52\u1b55\3\2\2\2\u1b53\u1b51\3\2\2\2\u1b53\u1b54\3\2\2\2\u1b54"+
		"\u1b5f\3\2\2\2\u1b55\u1b53\3\2\2\2\u1b56\u1b57\7\u0193\2\2\u1b57\u1b5c"+
		"\5\u0286\u0144\2\u1b58\u1b59\7\u0245\2\2\u1b59\u1b5b\5\u0286\u0144\2\u1b5a"+
		"\u1b58\3\2\2\2\u1b5b\u1b5e\3\2\2\2\u1b5c\u1b5a\3\2\2\2\u1b5c\u1b5d\3\2"+
		"\2\2\u1b5d\u1b60\3\2\2\2\u1b5e\u1b5c\3\2\2\2\u1b5f\u1b56\3\2\2\2\u1b5f"+
		"\u1b60\3\2\2\2\u1b60\u1b68\3\2\2\2\u1b61\u1b66\7\u01ba\2\2\u1b62\u1b67"+
		"\5\u0230\u0119\2\u1b63\u1b64\7\63\2\2\u1b64\u1b65\7\u009e\2\2\u1b65\u1b67"+
		"\5\u0210\u0109\2\u1b66\u1b62\3\2\2\2\u1b66\u1b63\3\2\2\2\u1b67\u1b69\3"+
		"\2\2\2\u1b68\u1b61\3\2\2\2\u1b68\u1b69\3\2\2\2\u1b69\u1b6c\3\2\2\2\u1b6a"+
		"\u1b6b\7\u01aa\2\2\u1b6b\u1b6d\5\u0280\u0141\2\u1b6c\u1b6a\3\2\2\2\u1b6c"+
		"\u1b6d\3\2\2\2\u1b6d\u02af\3\2\2\2\u1b6e\u1b6f\5\u02a6\u0154\2\u1b6f\u1b72"+
		"\7\u0242\2\2\u1b70\u1b73\5\u0230\u0119\2\u1b71\u1b73\7\u0187\2\2\u1b72"+
		"\u1b70\3\2\2\2\u1b72\u1b71\3\2\2\2\u1b73\u1b96\3\2\2\2\u1b74\u1b75\7\u024b"+
		"\2\2\u1b75\u1b7a\5\u02a6\u0154\2\u1b76\u1b77\7\u0245\2\2\u1b77\u1b79\5"+
		"\u02a6\u0154\2\u1b78\u1b76\3\2\2\2\u1b79\u1b7c\3\2\2\2\u1b7a\u1b78\3\2"+
		"\2\2\u1b7a\u1b7b\3\2\2\2\u1b7b\u1b7d\3\2\2\2\u1b7c\u1b7a\3\2\2\2\u1b7d"+
		"\u1b7e\7\u024c\2\2\u1b7e\u1b80\7\u0242\2\2\u1b7f\u1b81\7\u0144\2\2\u1b80"+
		"\u1b7f\3\2\2\2\u1b80\u1b81\3\2\2\2\u1b81\u1b93\3\2\2\2\u1b82\u1b85\7\u024b"+
		"\2\2\u1b83\u1b86\5\u0230\u0119\2\u1b84\u1b86\7\u0187\2\2\u1b85\u1b83\3"+
		"\2\2\2\u1b85\u1b84\3\2\2\2\u1b86\u1b8e\3\2\2\2\u1b87\u1b8a\7\u0245\2\2"+
		"\u1b88\u1b8b\5\u0230\u0119\2\u1b89\u1b8b\7\u0187\2\2\u1b8a\u1b88\3\2\2"+
		"\2\u1b8a\u1b89\3\2\2\2\u1b8b\u1b8d\3\2\2\2\u1b8c\u1b87\3\2\2\2\u1b8d\u1b90"+
		"\3\2\2\2\u1b8e\u1b8c\3\2\2\2\u1b8e\u1b8f\3\2\2\2\u1b8f\u1b91\3\2\2\2\u1b90"+
		"\u1b8e\3\2\2\2\u1b91\u1b94\7\u024c\2\2\u1b92\u1b94\5\u026e\u0138\2\u1b93"+
		"\u1b82\3\2\2\2\u1b93\u1b92\3\2\2\2\u1b94\u1b96\3\2\2\2\u1b95\u1b6e\3\2"+
		"\2\2\u1b95\u1b74\3\2\2\2\u1b96\u02b1\3\2\2\2\u1b97\u1b98\7\u009a\2\2\u1b98"+
		"\u1b9b\5\u0210\u0109\2\u1b99\u1b9a\7\u0245\2\2\u1b9a\u1b9c\5\u0146\u00a4"+
		"\2\u1b9b\u1b99\3\2\2\2\u1b9b\u1b9c\3\2\2\2\u1b9c\u02b3\3\2\2\2\u1b9d\u1b9f"+
		"\7\u0107\2\2\u1b9e\u1ba0\7\u01af\2\2\u1b9f\u1b9e\3\2\2\2\u1b9f\u1ba0\3"+
		"\2\2\2\u1ba0\u1ba1\3\2\2\2\u1ba1\u1ba6\5\u0186\u00c4\2\u1ba2\u1ba3\7\u0245"+
		"\2\2\u1ba3\u1ba5\5\u0186\u00c4\2\u1ba4\u1ba2\3\2\2\2\u1ba5\u1ba8\3\2\2"+
		"\2\u1ba6\u1ba4\3\2\2\2\u1ba6\u1ba7\3\2\2\2\u1ba7\u1bab\3\2\2\2\u1ba8\u1ba6"+
		"\3\2\2\2\u1ba9\u1baa\tc\2\2\u1baa\u1bac\7h\2\2\u1bab\u1ba9\3\2\2\2\u1bab"+
		"\u1bac\3\2\2\2\u1bac\u1bae\3\2\2\2\u1bad\u1baf\5\u01f8\u00fd\2\u1bae\u1bad"+
		"\3\2\2\2\u1bae\u1baf\3\2\2\2\u1baf\u02b5\3\2\2\2\u1bb0\u1bb5\5\u0210\u0109"+
		"\2\u1bb1\u1bb2\7\u0245\2\2\u1bb2\u1bb4\5\u0210\u0109\2\u1bb3\u1bb1\3\2"+
		"\2\2\u1bb4\u1bb7\3\2\2\2\u1bb5\u1bb3\3\2\2\2\u1bb5\u1bb6\3\2\2\2\u1bb6"+
		"\u02b7\3\2\2\2\u1bb7\u1bb5\3\2\2\2\u1bb8\u1bbe\7\u018b\2\2\u1bb9\u1bbc"+
		"\7~\2\2\u1bba\u1bbd\5\u0210\u0109\2\u1bbb\u1bbd\5\u0146\u00a4\2\u1bbc"+
		"\u1bba\3\2\2\2\u1bbc\u1bbb\3\2\2\2\u1bbd\u1bbf\3\2\2\2\u1bbe\u1bb9\3\2"+
		"\2\2\u1bbe\u1bbf\3\2\2\2\u1bbf\u1bc0\3\2\2\2\u1bc0\u1bc9\5\u0146\u00a4"+
		"\2\u1bc1\u1bc2\7\u018b\2\2\u1bc2\u1bc3\5\u0146\u00a4\2\u1bc3\u1bc6\7~"+
		"\2\2\u1bc4\u1bc7\5\u0210\u0109\2\u1bc5\u1bc7\5\u0146\u00a4\2\u1bc6\u1bc4"+
		"\3\2\2\2\u1bc6\u1bc5\3\2\2\2\u1bc7\u1bc9\3\2\2\2\u1bc8\u1bb8\3\2\2\2\u1bc8"+
		"\u1bc1\3\2\2\2\u1bc9\u02b9\3\2\2\2\u1bca\u1bcb\7\u025e\2\2\u1bcb\u1bce"+
		"\5\u0210\u0109\2\u1bcc\u1bcf\5\u0210\u0109\2\u1bcd\u1bcf\5\u0240\u0121"+
		"\2\u1bce\u1bcc\3\2\2\2\u1bce\u1bcd\3\2\2\2\u1bcf\u02bb\3\2\2\2\u1bd0\u1bd2"+
		"\5\u02be\u0160\2\u1bd1\u1bd0\3\2\2\2\u1bd1\u1bd2\3\2\2\2\u1bd2\u1bd4\3"+
		"\2\2\2\u1bd3\u1bd5\5\u02c0\u0161\2\u1bd4\u1bd3\3\2\2\2\u1bd4\u1bd5\3\2"+
		"\2\2\u1bd5\u1bd6\3\2\2\2\u1bd6\u1bd7\7\25\2\2\u1bd7\u1bd9\5\u02cc\u0167"+
		"\2\u1bd8\u1bda\5\u02ca\u0166\2\u1bd9\u1bd8\3\2\2\2\u1bd9\u1bda\3\2\2\2"+
		"\u1bda\u1bdb\3\2\2\2\u1bdb\u1bdd\7\u018d\2\2\u1bdc\u1bde\5\u0210\u0109"+
		"\2\u1bdd\u1bdc\3\2\2\2\u1bdd\u1bde\3\2\2\2\u1bde\u02bd\3\2\2\2\u1bdf\u1be0"+
		"\7\u025b\2\2\u1be0\u1be1\5\u0210\u0109\2\u1be1\u1be2\7\u025c\2\2\u1be2"+
		"\u02bf\3\2\2\2\u1be3\u1be7\7:\2\2\u1be4\u1be6\5\u02c2\u0162\2\u1be5\u1be4"+
		"\3\2\2\2\u1be6\u1be9\3\2\2\2\u1be7\u1be5\3\2\2\2\u1be7\u1be8\3\2\2\2\u1be8"+
		"\u02c1\3\2\2\2\u1be9\u1be7\3\2\2\2\u1bea\u1bec\7:\2\2\u1beb\u1bea\3\2"+
		"\2\2\u1bec\u1bef\3\2\2\2\u1bed\u1beb\3\2\2\2\u1bed\u1bee\3\2\2\2\u1bee"+
		"\u1bf0\3\2\2\2\u1bef\u1bed\3\2\2\2\u1bf0\u1bf1\5\u0210\u0109\2\u1bf1\u1bf2"+
		"\5\u02c4\u0163\2\u1bf2\u1bf3\7\u0244\2\2\u1bf3\u02c3\3\2\2\2\u1bf4\u1bf6"+
		"\7\u0222\2\2\u1bf5\u1bf4\3\2\2\2\u1bf5\u1bf6\3\2\2\2\u1bf6\u1bf7\3\2\2"+
		"\2\u1bf7\u1bf9\5\u02c8\u0165\2\u1bf8\u1bfa\5\u01fa\u00fe\2\u1bf9\u1bf8"+
		"\3\2\2\2\u1bf9\u1bfa\3\2\2\2\u1bfa\u1bfd\3\2\2\2\u1bfb\u1bfc\7\u01a0\2"+
		"\2\u1bfc\u1bfe\7\u01a1\2\2\u1bfd\u1bfb\3\2\2\2\u1bfd\u1bfe\3\2\2\2\u1bfe"+
		"\u1c01\3\2\2\2\u1bff\u1c00\td\2\2\u1c00\u1c02\5\u0230\u0119\2\u1c01\u1bff"+
		"\3\2\2\2\u1c01\u1c02\3\2\2\2\u1c02\u1c19\3\2\2\2\u1c03\u1c04\7\u0220\2"+
		"\2\u1c04\u1c07\7\u0191\2\2\u1c05\u1c08\5\u0210\u0109\2\u1c06\u1c08\7\u0264"+
		"\2\2\u1c07\u1c05\3\2\2\2\u1c07\u1c06\3\2\2\2\u1c08\u1c19\3\2\2\2\u1c09"+
		"\u1c0b\7\u0098\2\2\u1c0a\u1c09\3\2\2\2\u1c0a\u1c0b\3\2\2\2\u1c0b\u1c0c"+
		"\3\2\2\2\u1c0c\u1c0e\7\u00dd\2\2\u1c0d\u1c0a\3\2\2\2\u1c0d\u1c0e\3\2\2"+
		"\2\u1c0e\u1c0f\3\2\2\2\u1c0f\u1c14\7\64\2\2\u1c10\u1c11\7\u024b\2\2\u1c11"+
		"\u1c12\5\u02c6\u0164\2\u1c12\u1c13\7\u024c\2\2\u1c13\u1c15\3\2\2\2\u1c14"+
		"\u1c10\3\2\2\2\u1c14\u1c15\3\2\2\2\u1c15\u1c16\3\2\2\2\u1c16\u1c17\te"+
		"\2\2\u1c17\u1c19\5\u0270\u0139\2\u1c18\u1bf5\3\2\2\2\u1c18\u1c03\3\2\2"+
		"\2\u1c18\u1c0d\3\2\2\2\u1c19\u02c5\3\2\2\2\u1c1a\u1c1b\5\u0210\u0109\2"+
		"\u1c1b\u1c22\5\u0224\u0113\2\u1c1c\u1c1d\7\u0245\2\2\u1c1d\u1c1e\5\u0210"+
		"\u0109\2\u1c1e\u1c1f\5\u0224\u0113\2\u1c1f\u1c21\3\2\2\2\u1c20\u1c1c\3"+
		"\2\2\2\u1c21\u1c24\3\2\2\2\u1c22\u1c20\3\2\2\2\u1c22\u1c23\3\2\2\2\u1c23"+
		"\u02c7\3\2\2\2\u1c24\u1c22\3\2\2\2\u1c25\u1c2f\5\u0224\u0113\2\u1c26\u1c27"+
		"\5\u026a\u0136\2\u1c27\u1c28\7\u0251\2\2\u1c28\u1c29\7\u0109\2\2\u1c29"+
		"\u1c2f\3\2\2\2\u1c2a\u1c2b\5\u0220\u0111\2\u1c2b\u1c2c\7\u0251\2\2\u1c2c"+
		"\u1c2d\7\u023b\2\2\u1c2d\u1c2f\3\2\2\2\u1c2e\u1c25\3\2\2\2\u1c2e\u1c26"+
		"\3\2\2\2\u1c2e\u1c2a\3\2\2\2\u1c2f\u02c9\3\2\2\2\u1c30\u1c36\7\u022b\2"+
		"\2\u1c31\u1c32\7\u01b9\2\2\u1c32\u1c33\5\u0230\u0119\2\u1c33\u1c34\7\u01b0"+
		"\2\2\u1c34\u1c35\5\u02cc\u0167\2\u1c35\u1c37\3\2\2\2\u1c36\u1c31\3\2\2"+
		"\2\u1c37\u1c38\3\2\2\2\u1c38\u1c36\3\2\2\2\u1c38\u1c39\3\2\2\2\u1c39\u02cb"+
		"\3\2\2\2\u1c3a\u1c3b\5\u02ce\u0168\2\u1c3b\u1c3c\7\u0244\2\2\u1c3c\u1c3e"+
		"\3\2\2\2\u1c3d\u1c3a\3\2\2\2\u1c3e\u1c41\3\2\2\2\u1c3f\u1c3d\3\2\2\2\u1c3f"+
		"\u1c40\3\2\2\2\u1c40\u02cd\3\2\2\2\u1c41\u1c3f\3\2\2\2\u1c42\u1c4c\5\u02bc"+
		"\u015f\2\u1c43\u1c4c\5\u02d0\u0169\2\u1c44\u1c4c\5\u02dc\u016f\2\u1c45"+
		"\u1c4c\5\u02e2\u0172\2\u1c46\u1c4c\5\u02de\u0170\2\u1c47\u1c4c\5\u02e4"+
		"\u0173\2\u1c48\u1c4c\5<\37\2\u1c49\u1c4c\5\u02f8\u017d\2\u1c4a\u1c4c\5"+
		"\36\20\2\u1c4b\u1c42\3\2\2\2\u1c4b\u1c43\3\2\2\2\u1c4b\u1c44\3\2\2\2\u1c4b"+
		"\u1c45\3\2\2\2\u1c4b\u1c46\3\2\2\2\u1c4b\u1c47\3\2\2\2\u1c4b\u1c48\3\2"+
		"\2\2\u1c4b\u1c49\3\2\2\2\u1c4b\u1c4a\3\2\2\2\u1c4c\u02cf\3\2\2\2\u1c4d"+
		"\u1c5f\5\u02d8\u016d\2\u1c4e\u1c4f\7\u0235\2\2\u1c4f\u1c5f\5\u02d6\u016c"+
		"\2\u1c50\u1c52\7\u022d\2\2\u1c51\u1c53\tf\2\2\u1c52\u1c51\3\2\2\2\u1c52"+
		"\u1c53\3\2\2\2\u1c53\u1c54\3\2\2\2\u1c54\u1c55\7\u0226\2\2\u1c55\u1c5a"+
		"\5\u02d4\u016b\2\u1c56\u1c57\7\u0245\2\2\u1c57\u1c59\5\u02d4\u016b\2\u1c58"+
		"\u1c56\3\2\2\2\u1c59\u1c5c\3\2\2\2\u1c5a\u1c58\3\2\2\2\u1c5a\u1c5b\3\2"+
		"\2\2\u1c5b\u1c5f\3\2\2\2\u1c5c\u1c5a\3\2\2\2\u1c5d\u1c5f\7\u01a1\2\2\u1c5e"+
		"\u1c4d\3\2\2\2\u1c5e\u1c4e\3\2\2\2\u1c5e\u1c50\3\2\2\2\u1c5e\u1c5d\3\2"+
		"\2\2\u1c5f\u02d1\3\2\2\2\u1c60\u1c63\5\u026a\u0136\2\u1c61\u1c63\7\u0264"+
		"\2\2\u1c62\u1c60\3\2\2\2\u1c62\u1c61\3\2\2\2\u1c63\u1c6a\3\2\2\2\u1c64"+
		"\u1c65\7\u0257\2\2\u1c65\u1c66\5\u0230\u0119\2\u1c66\u1c67\7\u0258\2\2"+
		"\u1c67\u1c69\3\2\2\2\u1c68\u1c64\3\2\2\2\u1c69\u1c6c\3\2\2\2\u1c6a\u1c68"+
		"\3\2\2\2\u1c6a\u1c6b\3\2\2\2\u1c6b\u02d3\3\2\2\2\u1c6c\u1c6a\3\2\2\2\u1c6d"+
		"\u1c6e\5\u02d2\u016a\2\u1c6e\u1c6f\tg\2\2\u1c6f\u1c70\5\u0210\u0109\2"+
		"\u1c70\u02d5\3\2\2\2\u1c71\u1c7e\5\u026c\u0137\2\u1c72\u1c73\7\u01a3\2"+
		"\2\u1c73\u1c74\7\u024b\2\2\u1c74\u1c79\5\u0230\u0119\2\u1c75\u1c76\7\u0245"+
		"\2\2\u1c76\u1c78\5\u0230\u0119\2\u1c77\u1c75\3\2\2\2\u1c78\u1c7b\3\2\2"+
		"\2\u1c79\u1c77\3\2\2\2\u1c79\u1c7a\3\2\2\2\u1c7a\u1c7c\3\2\2\2\u1c7b\u1c79"+
		"\3\2\2\2\u1c7c\u1c7d\7\u024c\2\2\u1c7d\u1c7f\3\2\2\2\u1c7e\u1c72\3\2\2"+
		"\2\u1c7e\u1c7f\3\2\2\2\u1c7f\u1c81\3\2\2\2\u1c80\u1c71\3\2\2\2\u1c80\u1c81"+
		"\3\2\2\2\u1c81\u1c82\3\2\2\2\u1c82\u1c8c\5\u0280\u0141\2\u1c83\u1c84\7"+
		"\u0193\2\2\u1c84\u1c89\5\u0286\u0144\2\u1c85\u1c86\7\u0245\2\2\u1c86\u1c88"+
		"\5\u0286\u0144\2\u1c87\u1c85\3\2\2\2\u1c88\u1c8b\3\2\2\2\u1c89\u1c87\3"+
		"\2\2\2\u1c89\u1c8a\3\2\2\2\u1c8a\u1c8d\3\2\2\2\u1c8b\u1c89\3\2\2\2\u1c8c"+
		"\u1c83\3\2\2\2\u1c8c\u1c8d\3\2\2\2\u1c8d\u1c90\3\2\2\2\u1c8e\u1c8f\7\u01ba"+
		"\2\2\u1c8f\u1c91\5\u0230\u0119\2\u1c90\u1c8e\3\2\2\2\u1c90\u1c91\3\2\2"+
		"\2\u1c91\u1c93\3\2\2\2\u1c92\u1c94\5\u028e\u0148\2\u1c93\u1c92\3\2\2\2"+
		"\u1c93\u1c94\3\2\2\2\u1c94\u1c97\3\2\2\2\u1c95\u1c96\7\u0196\2\2\u1c96"+
		"\u1c98\5\u0230\u0119\2\u1c97\u1c95\3\2\2\2\u1c97\u1c98\3\2\2\2\u1c98\u1ca7"+
		"\3\2\2\2\u1c99\u1c9a\7\u01bb\2\2\u1c9a\u1c9b\5\u0210\u0109\2\u1c9b\u1c9c"+
		"\7\u0176\2\2\u1c9c\u1ca4\5\u025e\u0130\2\u1c9d\u1c9e\7\u0245\2\2\u1c9e"+
		"\u1c9f\5\u0210\u0109\2\u1c9f\u1ca0\7\u0176\2\2\u1ca0\u1ca1\5\u025e\u0130"+
		"\2\u1ca1\u1ca3\3\2\2\2\u1ca2\u1c9d\3\2\2\2\u1ca3\u1ca6\3\2\2\2\u1ca4\u1ca2"+
		"\3\2\2\2\u1ca4\u1ca5\3\2\2\2\u1ca5\u1ca8\3\2\2\2\u1ca6\u1ca4\3\2\2\2\u1ca7"+
		"\u1c99\3\2\2\2\u1ca7\u1ca8\3\2\2\2\u1ca8\u1cae\3\2\2\2\u1ca9\u1cab\t^"+
		"\2\2\u1caa\u1cac\5\u026c\u0137\2\u1cab\u1caa\3\2\2\2\u1cab\u1cac\3\2\2"+
		"\2\u1cac\u1cad\3\2\2\2\u1cad\u1caf\5\u027a\u013e\2\u1cae\u1ca9\3\2\2\2"+
		"\u1cae\u1caf\3\2\2\2\u1caf\u1cb3\3\2\2\2\u1cb0\u1cb2\5\u0272\u013a\2\u1cb1"+
		"\u1cb0\3\2\2\2\u1cb2\u1cb5\3\2\2\2\u1cb3\u1cb1\3\2\2\2\u1cb3\u1cb4\3\2"+
		"\2\2\u1cb4\u02d7\3\2\2\2\u1cb5\u1cb3\3\2\2\2\u1cb6\u1cb7\5\u02d2\u016a"+
		"\2\u1cb7\u1cba\tg\2\2\u1cb8\u1cbb\5\u0274\u013b\2\u1cb9\u1cbb\5\u02d6"+
		"\u016c\2\u1cba\u1cb8\3\2\2\2\u1cba\u1cb9\3\2\2\2\u1cbb\u02d9\3\2\2\2\u1cbc"+
		"\u1cbd\7T\2\2\u1cbd\u1cbf\5\u0230\u0119\2\u1cbe\u1cc0\5\u02f2\u017a\2"+
		"\u1cbf\u1cbe\3\2\2\2\u1cbf\u1cc0\3\2\2\2\u1cc0\u02db\3\2\2\2\u1cc1\u1cc8"+
		"\5\u02ec\u0177\2\u1cc2\u1cc3\7\30\2\2\u1cc3\u1cc8\5\u0246\u0124\2\u1cc4"+
		"\u1cc8\5\u02f4\u017b\2\u1cc5\u1cc8\5\u02f6\u017c\2\u1cc6\u1cc8\5\u02ee"+
		"\u0178\2\u1cc7\u1cc1\3\2\2\2\u1cc7\u1cc2\3\2\2\2\u1cc7\u1cc4\3\2\2\2\u1cc7"+
		"\u1cc5\3\2\2\2\u1cc7\u1cc6\3\2\2\2\u1cc8\u02dd\3\2\2\2\u1cc9\u1cca\7\u0234"+
		"\2\2\u1cca\u1ccf\5\u02d2\u016a\2\u1ccb\u1ccd\7\u0098\2\2\u1ccc\u1ccb\3"+
		"\2\2\2\u1ccc\u1ccd\3\2\2\2\u1ccd\u1cce\3\2\2\2\u1cce\u1cd0\7\u00dd\2\2"+
		"\u1ccf\u1ccc\3\2\2\2\u1ccf\u1cd0\3\2\2\2\u1cd0\u1cd1\3\2\2\2\u1cd1\u1cd2"+
		"\7\u0191\2\2\u1cd2\u1cd3\5\u02f8\u017d\2\u1cd3\u1cf6\3\2\2\2\u1cd4\u1cd5"+
		"\7\u0234\2\2\u1cd5\u1ce1\5\u02d2\u016a\2\u1cd6\u1cd7\7\u024b\2\2\u1cd7"+
		"\u1cdc\5\u02e0\u0171\2\u1cd8\u1cd9\7\u0245\2\2\u1cd9\u1cdb\5\u02e0\u0171"+
		"\2\u1cda\u1cd8\3\2\2\2\u1cdb\u1cde\3\2\2\2\u1cdc\u1cda\3\2\2\2\u1cdc\u1cdd"+
		"\3\2\2\2\u1cdd\u1cdf\3\2\2\2\u1cde\u1cdc\3\2\2\2\u1cdf\u1ce0\7\u024c\2"+
		"\2\u1ce0\u1ce2\3\2\2\2\u1ce1\u1cd6\3\2\2\2\u1ce1\u1ce2\3\2\2\2\u1ce2\u1cf6"+
		"\3\2\2\2\u1ce3\u1ce5\7\u0190\2\2\u1ce4\u1ce6\5:\36\2\u1ce5\u1ce4\3\2\2"+
		"\2\u1ce5\u1ce6\3\2\2\2\u1ce6\u1ce8\3\2\2\2\u1ce7\u1ce9\t\7\2\2\u1ce8\u1ce7"+
		"\3\2\2\2\u1ce8\u1ce9\3\2\2\2\u1ce9\u1cea\3\2\2\2\u1cea\u1cf6\5\u02d2\u016a"+
		"\2\u1ceb\u1ced\7\u0093\2\2\u1cec\u1cee\5:\36\2\u1ced\u1cec\3\2\2\2\u1ced"+
		"\u1cee\3\2\2\2\u1cee\u1cf0\3\2\2\2\u1cef\u1cf1\t\7\2\2\u1cf0\u1cef\3\2"+
		"\2\2\u1cf0\u1cf1\3\2\2\2\u1cf1\u1cf2\3\2\2\2\u1cf2\u1cf6\5\u02d2\u016a"+
		"\2\u1cf3\u1cf4\7!\2\2\u1cf4\u1cf6\5\u02d2\u016a\2\u1cf5\u1cc9\3\2\2\2"+
		"\u1cf5\u1cd4\3\2\2\2\u1cf5\u1ce3\3\2\2\2\u1cf5\u1ceb\3\2\2\2\u1cf5\u1cf3"+
		"\3\2\2\2\u1cf6\u02df\3\2\2\2\u1cf7\u1cf8\5\u0210\u0109\2\u1cf8\u1cf9\7"+
		"\u025a\2\2\u1cf9\u1cfb\3\2\2\2\u1cfa\u1cf7\3\2\2\2\u1cfa\u1cfb\3\2\2\2"+
		"\u1cfb\u1cfc\3\2\2\2\u1cfc\u1cfd\5\u0230\u0119\2\u1cfd\u02e1\3\2\2\2\u1cfe"+
		"\u1d04\th\2\2\u1cff\u1d01\7\u0173\2\2\u1d00\u1d02\7\u0098\2\2\u1d01\u1d00"+
		"\3\2\2\2\u1d01\u1d02\3\2\2\2\u1d02\u1d03\3\2\2\2\u1d03\u1d05\7\35\2\2"+
		"\u1d04\u1cff\3\2\2\2\u1d04\u1d05\3\2\2\2\u1d05\u1d08\3\2\2\2\u1d06\u1d08"+
		"\5\30\r\2\u1d07\u1cfe\3\2\2\2\u1d07\u1d06\3\2\2\2\u1d08\u02e3\3\2\2\2"+
		"\u1d09\u1d0b\7\u0237\2\2\u1d0a\u1d0c\5\u02e6\u0174\2\u1d0b\u1d0a\3\2\2"+
		"\2\u1d0b\u1d0c\3\2\2\2\u1d0c\u1d15\3\2\2\2\u1d0d\u1d12\5\u0146\u00a4\2"+
		"\u1d0e\u1d0f\7\u0245\2\2\u1d0f\u1d11\5\u0230\u0119\2\u1d10\u1d0e\3\2\2"+
		"\2\u1d11\u1d14\3\2\2\2\u1d12\u1d10\3\2\2\2\u1d12\u1d13\3\2\2\2\u1d13\u1d16"+
		"\3\2\2\2\u1d14\u1d12\3\2\2\2\u1d15\u1d0d\3\2\2\2\u1d15\u1d16\3\2\2\2\u1d16"+
		"\u1d18\3\2\2\2\u1d17\u1d19\5\u02e8\u0175\2\u1d18\u1d17\3\2\2\2\u1d18\u1d19"+
		"\3\2\2\2\u1d19\u1d32\3\2\2\2\u1d1a\u1d1c\7\u0237\2\2\u1d1b\u1d1d\5\u02e6"+
		"\u0174\2\u1d1c\u1d1b\3\2\2\2\u1d1c\u1d1d\3\2\2\2\u1d1d\u1d1e\3\2\2\2\u1d1e"+
		"\u1d20\5\u0210\u0109\2\u1d1f\u1d21\5\u02e8\u0175\2\u1d20\u1d1f\3\2\2\2"+
		"\u1d20\u1d21\3\2\2\2\u1d21\u1d32\3\2\2\2\u1d22\u1d24\7\u0237\2\2\u1d23"+
		"\u1d25\5\u02e6\u0174\2\u1d24\u1d23\3\2\2\2\u1d24\u1d25\3\2\2\2\u1d25\u1d26"+
		"\3\2\2\2\u1d26\u1d27\7\u023d\2\2\u1d27\u1d29\5\u0146\u00a4\2\u1d28\u1d2a"+
		"\5\u02e8\u0175\2\u1d29\u1d28\3\2\2\2\u1d29\u1d2a\3\2\2\2\u1d2a\u1d32\3"+
		"\2\2\2\u1d2b\u1d2c\7\u0221\2\2\u1d2c\u1d2f\5\u0230\u0119\2\u1d2d\u1d2e"+
		"\7\u0245\2\2\u1d2e\u1d30\5\u0230\u0119\2\u1d2f\u1d2d\3\2\2\2\u1d2f\u1d30"+
		"\3\2\2\2\u1d30\u1d32\3\2\2\2\u1d31\u1d09\3\2\2\2\u1d31\u1d1a\3\2\2\2\u1d31"+
		"\u1d22\3\2\2\2\u1d31\u1d2b\3\2\2\2\u1d32\u02e5\3\2\2\2\u1d33\u1d34\ti"+
		"\2\2\u1d34\u02e7\3\2\2\2\u1d35\u1d36\7\u01b7\2\2\u1d36\u1d37\5\u02ea\u0176"+
		"\2\u1d37\u1d38\7\u0242\2\2\u1d38\u1d40\5\u0230\u0119\2\u1d39\u1d3a\7\u0245"+
		"\2\2\u1d3a\u1d3b\5\u02ea\u0176\2\u1d3b\u1d3c\7\u0242\2\2\u1d3c\u1d3d\5"+
		"\u0230\u0119\2\u1d3d\u1d3f\3\2\2\2\u1d3e\u1d39\3\2\2\2\u1d3f\u1d42\3\2"+
		"\2\2\u1d40\u1d3e\3\2\2\2\u1d40\u1d41\3\2\2\2\u1d41\u02e9\3\2\2\2\u1d42"+
		"\u1d40\3\2\2\2\u1d43\u1d44\tj\2\2\u1d44\u02eb\3\2\2\2\u1d45\u1d47\7\u0239"+
		"\2\2\u1d46\u1d48\5\u02d6\u016c\2\u1d47\u1d46\3\2\2\2\u1d47\u1d48\3\2\2"+
		"\2\u1d48\u1d50\3\2\2\2\u1d49\u1d4a\7\u0239\2\2\u1d4a\u1d4b\7\u0097\2\2"+
		"\u1d4b\u1d50\5\u0230\u0119\2\u1d4c\u1d4d\7\u0239\2\2\u1d4d\u1d4e\7\u0236"+
		"\2\2\u1d4e\u1d50\5\u02f8\u017d\2\u1d4f\u1d45\3\2\2\2\u1d4f\u1d49\3\2\2"+
		"\2\u1d4f\u1d4c\3\2\2\2\u1d50\u02ed\3\2\2\2\u1d51\u1d53\5\u02be\u0160\2"+
		"\u1d52\u1d51\3\2\2\2\u1d52\u1d53\3\2\2\2\u1d53\u1d55\3\2\2\2\u1d54\u1d56"+
		"\5\u02f0\u0179\2\u1d55\u1d54\3\2\2\2\u1d55\u1d56\3\2\2\2\u1d56\u1d57\3"+
		"\2\2\2\u1d57\u1d58\7\u0231\2\2\u1d58\u1d59\5\u02cc\u0167\2\u1d59\u1d5a"+
		"\7\u018d\2\2\u1d5a\u1d5c\7\u0231\2\2\u1d5b\u1d5d\5\u0210\u0109\2\u1d5c"+
		"\u1d5b\3\2\2\2\u1d5c\u1d5d\3\2\2\2\u1d5d\u1d67\3\2\2\2\u1d5e\u1d60\tk"+
		"\2\2\u1d5f\u1d61\5\u0210\u0109\2\u1d60\u1d5f\3\2\2\2\u1d60\u1d61\3\2\2"+
		"\2\u1d61\u1d64\3\2\2\2\u1d62\u1d63\7\u01b9\2\2\u1d63\u1d65\5\u0230\u0119"+
		"\2\u1d64\u1d62\3\2\2\2\u1d64\u1d65\3\2\2\2\u1d65\u1d67\3\2\2\2\u1d66\u1d52"+
		"\3\2\2\2\u1d66\u1d5e\3\2\2\2\u1d67\u02ef\3\2\2\2\u1d68\u1d69\7\u0240\2"+
		"\2\u1d69\u1d98\5\u0230\u0119\2\u1d6a\u1d6b\7\u0191\2\2\u1d6b\u1d6c\5\u0210"+
		"\u0109\2\u1d6c\u1d6e\7\u0197\2\2\u1d6d\u1d6f\7\u023a\2\2\u1d6e\u1d6d\3"+
		"\2\2\2\u1d6e\u1d6f\3\2\2\2\u1d6f\u1d70\3\2\2\2\u1d70\u1d71\5\u0230\u0119"+
		"\2\u1d71\u1d72\7\u025d\2\2\u1d72\u1d75\5\u0230\u0119\2\u1d73\u1d74\7\26"+
		"\2\2\u1d74\u1d76\5\u0230\u0119\2\u1d75\u1d73\3\2\2\2\u1d75\u1d76\3\2\2"+
		"\2\u1d76\u1d98\3\2\2\2\u1d77\u1d78\7\u0191\2\2\u1d78\u1d79\5\u02b6\u015c"+
		"\2\u1d79\u1d7a\7\u0197\2\2\u1d7a\u1d7b\5\u02f8\u017d\2\u1d7b\u1d98\3\2"+
		"\2\2\u1d7c\u1d7d\7\u0191\2\2\u1d7d\u1d7e\5\u0210\u0109\2\u1d7e\u1d7f\7"+
		"\u0197\2\2\u1d7f\u1d8b\5\u0210\u0109\2\u1d80\u1d81\7\u024b\2\2\u1d81\u1d86"+
		"\5\u02e0\u0171\2\u1d82\u1d83\7\u0245\2\2\u1d83\u1d85\5\u02e0\u0171\2\u1d84"+
		"\u1d82\3\2\2\2\u1d85\u1d88\3\2\2\2\u1d86\u1d84\3\2\2\2\u1d86\u1d87\3\2"+
		"\2\2\u1d87\u1d89\3\2\2\2\u1d88\u1d86\3\2\2\2\u1d89\u1d8a\7\u024c\2\2\u1d8a"+
		"\u1d8c\3\2\2\2\u1d8b\u1d80\3\2\2\2\u1d8b\u1d8c\3\2\2\2\u1d8c\u1d98\3\2"+
		"\2\2\u1d8d\u1d8e\7\u022c\2\2\u1d8e\u1d91\5\u02b6\u015c\2\u1d8f\u1d90\7"+
		"\u023c\2\2\u1d90\u1d92\7\u0262\2\2\u1d91\u1d8f\3\2\2\2\u1d91\u1d92\3\2"+
		"\2\2\u1d92\u1d93\3\2\2\2\u1d93\u1d94\7\u0197\2\2\u1d94\u1d95\7\u0175\2"+
		"\2\u1d95\u1d96\5\u0230\u0119\2\u1d96\u1d98\3\2\2\2\u1d97\u1d68\3\2\2\2"+
		"\u1d97\u1d6a\3\2\2\2\u1d97\u1d77\3\2\2\2\u1d97\u1d7c\3\2\2\2\u1d97\u1d8d"+
		"\3\2\2\2\u1d98\u02f1\3\2\2\2\u1d99\u1d9a\7\u01b7\2\2\u1d9a\u1d9f\5\u0230"+
		"\u0119\2\u1d9b\u1d9c\7\u0245\2\2\u1d9c\u1d9e\5\u0230\u0119\2\u1d9d\u1d9b"+
		"\3\2\2\2\u1d9e\u1da1\3\2\2\2\u1d9f\u1d9d\3\2\2\2\u1d9f\u1da0\3\2\2\2\u1da0"+
		"\u02f3\3\2\2\2\u1da1\u1d9f\3\2\2\2\u1da2\u1da3\7i\2\2\u1da3\u1da4\5\u0230"+
		"\u0119\2\u1da4\u1da5\7\u01b0\2\2\u1da5\u1dad\5\u02cc\u0167\2\u1da6\u1da7"+
		"\tl\2\2\u1da7\u1da8\5\u0230\u0119\2\u1da8\u1da9\7\u01b0\2\2\u1da9\u1daa"+
		"\5\u02cc\u0167\2\u1daa\u1dac\3\2\2\2\u1dab\u1da6\3\2\2\2\u1dac\u1daf\3"+
		"\2\2\2\u1dad\u1dab\3\2\2\2\u1dad\u1dae\3\2\2\2\u1dae\u1db2\3\2\2\2\u1daf"+
		"\u1dad\3\2\2\2\u1db0\u1db1\7\u018c\2\2\u1db1\u1db3\5\u02cc\u0167\2\u1db2"+
		"\u1db0\3\2\2\2\u1db2\u1db3\3\2\2\2\u1db3\u1db4\3\2\2\2\u1db4\u1db5\7\u018d"+
		"\2\2\u1db5\u1db6\7i\2\2\u1db6\u02f5\3\2\2\2\u1db7\u1db9\7\u017a\2\2\u1db8"+
		"\u1dba\5\u0230\u0119\2\u1db9\u1db8\3\2\2\2\u1db9\u1dba\3\2\2\2\u1dba\u1dc7"+
		"\3\2\2\2\u1dbb\u1dbc\7\u01b9\2\2\u1dbc\u1dc1\5\u0230\u0119\2\u1dbd\u1dbe"+
		"\7\u0245\2\2\u1dbe\u1dc0\5\u0230\u0119\2\u1dbf\u1dbd\3\2\2\2\u1dc0\u1dc3"+
		"\3\2\2\2\u1dc1\u1dbf\3\2\2\2\u1dc1\u1dc2\3\2\2\2\u1dc2\u1dc4\3\2\2\2\u1dc3"+
		"\u1dc1\3\2\2\2\u1dc4\u1dc5\7\u01b0\2\2\u1dc5\u1dc6\5\u02cc\u0167\2\u1dc6"+
		"\u1dc8\3\2\2\2\u1dc7\u1dbb\3\2\2\2\u1dc8\u1dc9\3\2\2\2\u1dc9\u1dc7\3\2"+
		"\2\2\u1dc9\u1dca\3\2\2\2\u1dca\u1dcd\3\2\2\2\u1dcb\u1dcc\7\u018c\2\2\u1dcc"+
		"\u1dce\5\u02cc\u0167\2\u1dcd\u1dcb\3\2\2\2\u1dcd\u1dce\3\2\2\2\u1dce\u1dcf"+
		"\3\2\2\2\u1dcf\u1dd0\7\u018d\2\2\u1dd0\u1dd1\7\u017a\2\2\u1dd1\u02f7\3"+
		"\2\2\2\u1dd2\u1dd7\5\20\t\2\u1dd3\u1dd7\5\u02da\u016e\2\u1dd4\u1dd7\5"+
		"(\25\2\u1dd5\u1dd7\5 \21\2\u1dd6\u1dd2\3\2\2\2\u1dd6\u1dd3\3\2\2\2\u1dd6"+
		"\u1dd4\3\2\2\2\u1dd6\u1dd5\3\2\2\2\u1dd7\u02f9\3\2\2\2\u040f\u02fb\u0300"+
		"\u0307\u030a\u030e\u0317\u0321\u0327\u032b\u0330\u0337\u033f\u0345\u0349"+
		"\u034f\u0351\u0358\u035b\u035f\u0363\u0366\u036c\u0372\u0374\u037c\u0380"+
		"\u0384\u038f\u0396\u0399\u039d\u03a4\u03ab\u03ae\u03b9\u03bc\u03c2\u03c6"+
		"\u03c9\u03cf\u03d9\u03e1\u03ea\u03f0\u03f3\u03f7\u0400\u0402\u0409\u040d"+
		"\u0413\u0417\u041e\u0426\u042c\u0431\u0434\u043e\u0443\u0450\u0459\u045d"+
		"\u0460\u0468\u046d\u0477\u0479\u0483\u0488\u048d\u0490\u0493\u0496\u049b"+
		"\u04a4\u04af\u04b3\u04b7\u04bc\u04c3\u04cd\u04d2\u04da\u04e0\u04e3\u04e6"+
		"\u04e9\u04eb\u04ef\u04f3\u04fc\u0502\u0506\u0508\u050d\u0536\u053d\u0560"+
		"\u056e\u0577\u057d\u0585\u0589\u0590\u0594\u0596\u0598\u059b\u05a3\u05a9"+
		"\u05b4\u05b6\u05ba\u05db\u05ee\u0616\u061d\u0623\u0626\u062a\u062d\u0631"+
		"\u0638\u063d\u0653\u0657\u065a\u065f\u0662\u0666\u066a\u0673\u067c\u068e"+
		"\u06b8\u06be\u06c1\u06c3\u06c7\u06cc\u06d0\u06d8\u06df\u06ef\u06f1\u06f7"+
		"\u06ff\u0703\u070a\u0710\u0713\u0715\u0720\u0724\u0727\u0731\u073c\u0744"+
		"\u0748\u0758\u075f\u0766\u076b\u076f\u077c\u0782\u0784\u0790\u0793\u07a8"+
		"\u07ad\u07b4\u07b9\u07c0\u07c2\u07c9\u07d4\u07d9\u07db\u07e2\u07e4\u07ec"+
		"\u07ee\u07f5\u07f7\u07fb\u07ff\u0807\u080d\u0810\u0812\u0814\u0819\u081c"+
		"\u0820\u0825\u082a\u0832\u083c\u0840\u0849\u084e\u0856\u0863\u0866\u0873"+
		"\u087f\u0887\u088e\u0896\u08a0\u08ac\u08b3\u08be\u08c2\u08c9\u08cc\u08d1"+
		"\u08d5\u08dc\u08e1\u08e4\u08e6\u08f0\u08f4\u08f7\u08fa\u08fe\u0905\u0909"+
		"\u090c\u090f\u0912\u091f\u0929\u092d\u0931\u0936\u0938\u093d\u093f\u0942"+
		"\u0946\u0949\u094c\u0954\u0958\u095a\u096a\u096f\u0973\u0975\u0984\u0987"+
		"\u0991\u0994\u09a8\u09ba\u09be\u09c2\u09c9\u09cc\u09e9\u0a07\u0a0b\u0a10"+
		"\u0a15\u0a1c\u0a1e\u0a23\u0a28\u0a2c\u0a33\u0a41\u0a55\u0a63\u0a6c\u0a86"+
		"\u0a8f\u0a95\u0aa0\u0aa3\u0aa6\u0aaf\u0ab5\u0aba\u0abf\u0ac4\u0ac9\u0ad0"+
		"\u0ad5\u0ade\u0ae3\u0ae5\u0ae9\u0aee\u0af6\u0b00\u0b0a\u0b0f\u0b1c\u0b36"+
		"\u0b39\u0b3c\u0b3f\u0b4c\u0b56\u0b5d\u0b69\u0b6f\u0b72\u0b76\u0b84\u0b89"+
		"\u0b92\u0b97\u0ba3\u0ba7\u0bab\u0bb2\u0bb6\u0bbc\u0bc1\u0bc7\u0bcf\u0bd2"+
		"\u0bd6\u0bf6\u0bfc\u0bff\u0c04\u0c08\u0c15\u0c1a\u0c1f\u0c28\u0c33\u0c36"+
		"\u0c3b\u0c40\u0c42\u0c46\u0c4c\u0c57\u0c5c\u0c60\u0c67\u0c78\u0c7e\u0c87"+
		"\u0c8c\u0c99\u0ca1\u0cb6\u0cba\u0cbf\u0cc7\u0cd4\u0d0c\u0d14\u0d1d\u0d2c"+
		"\u0d30\u0d36\u0d3d\u0d45\u0d4a\u0d53\u0d55\u0d5c\u0d60\u0d64\u0d6f\u0d73"+
		"\u0d7d\u0d82\u0d86\u0d8d\u0d90\u0d98\u0d9d\u0da2\u0da4\u0da7\u0dab\u0db1"+
		"\u0db4\u0db7\u0dbc\u0dbe\u0dc2\u0dc5\u0dc8\u0dd1\u0ddd\u0ddf\u0de3\u0ded"+
		"\u0df0\u0df3\u0e09\u0e13\u0e23\u0e2a\u0e37\u0e3c\u0e4a\u0e53\u0e59\u0e5f"+
		"\u0e61\u0e68\u0e6d\u0e74\u0e78\u0e82\u0e89\u0e8b\u0e92\u0eaa\u0ebe\u0ec8"+
		"\u0eda\u0f10\u0f20\u0f28\u0f2d\u0f3f\u0f43\u0f4a\u0f4c\u0f53\u0f56\u0f63"+
		"\u0f74\u0f77\u0f7a\u0f7d\u0f88\u0f8f\u0f94\u0f97\u0f9a\u0f9f\u0fa4\u0fa8"+
		"\u0fae\u0fb8\u0fbf\u0fc5\u0fc9\u0fcf\u0fd5\u0fd8\u0fdd\u0fe5\u0fe8\u0fec"+
		"\u0ff4\u0ff8\u1000\u1003\u1007\u100c\u101e\u1021\u1025\u102a\u102c\u1030"+
		"\u1036\u103f\u104b\u1050\u1058\u1069\u106f\u1073\u107b\u1093\u109c\u109f"+
		"\u10aa\u10b1\u10b6\u10b8\u10bb\u10bf\u10c6\u10cb\u10cd\u10d4\u10da\u10e0"+
		"\u10e9\u10f1\u10fa\u10ff\u1102\u110a\u1111\u1116\u1118\u111b\u1121\u112b"+
		"\u1130\u1136\u1139\u1149\u1154\u115a\u115d\u116e\u1171\u1174\u1178\u1183"+
		"\u118d\u1193\u1197\u119a\u11a1\u11a3\u11a7\u11af\u11b3\u11b7\u11ba\u11c1"+
		"\u11c3\u11c7\u11cc\u11d0\u11d5\u11d9\u11dd\u11e2\u11e7\u11f1\u11f9\u120b"+
		"\u120f\u1212\u1215\u1218\u121c\u1220\u1224\u1228\u122b\u1230\u1234\u1237"+
		"\u1246\u124d\u1253\u1257\u125b\u1260\u1264\u1267\u126a\u126d\u1270\u1274"+
		"\u1278\u127c\u1280\u1283\u1286\u1289\u128f\u1293\u1296\u129b\u12a0\u12a7"+
		"\u12ad\u12b5\u12be\u12d0\u12d8\u12e3\u12e6\u12eb\u12f0\u12fd\u1304\u1309"+
		"\u1312\u1318\u131c\u1320\u1328\u1334\u1337\u133c\u1341\u1345\u134a\u134d"+
		"\u1352\u135a\u135e\u1361\u1366\u1373\u137a\u137f\u1384\u138b\u138d\u1396"+
		"\u1399\u139f\u13a2\u13b0\u13bf\u13ce\u13d3\u13d6\u13dc\u13de\u13e9\u13f2"+
		"\u13fa\u13ff\u1409\u1412\u141c\u1423\u1436\u1438\u1443\u144d\u1450\u1457"+
		"\u145c\u1461\u146b\u146f\u1472\u1476\u147a\u147d\u1481\u1487\u148b\u1491"+
		"\u149e\u14a6\u14a9\u14ad\u14bd\u14c2\u14c6\u14cb\u14d0\u14d5\u14dc\u14ed"+
		"\u14f4\u14f8\u14fd\u1502\u1504\u1508\u150f\u1512\u1517\u151b\u1521\u1527"+
		"\u152a\u152d\u1531\u1534\u1538\u153b\u153f\u1545\u154a\u154e\u1553\u1557"+
		"\u1560\u1565\u1567\u1584\u158e\u1597\u159f\u15ab\u15c1\u15c5\u15cd\u15d3"+
		"\u15d8\u15de\u15ea\u15fe\u1608\u160b\u1612\u1616\u161b\u1621\u1627\u1632"+
		"\u1634\u163c\u1644\u164e\u1663\u1670\u1676\u167c\u1683\u1685\u1690\u169a"+
		"\u16ad\u16ba\u16bf\u16c7\u16d0\u16d4\u16e2\u16e9\u16ed\u16ef\u16f8\u16fb"+
		"\u1700\u1702\u170a\u170d\u1712\u171f\u172b\u172e\u1731\u1737\u1743\u1748"+
		"\u174c\u1750\u1754\u1756\u175b\u1762\u1767\u1769\u1774\u1779\u177d\u1791"+
		"\u179b\u17a7\u17ad\u17b1\u17b6\u17bc\u17c6\u17cc\u17d0\u17db\u17e7\u17ef"+
		"\u17f1\u17fb\u1800\u1820\u1826\u182c\u1831\u1839\u183e\u1844\u1848\u184b"+
		"\u184e\u1852\u1858\u1864\u1867\u186a\u186d\u1878\u1881\u1883\u188a\u188f"+
		"\u1894\u1899\u189d\u18a0\u18ab\u18ad\u18b4\u18b6\u18bf\u18c5\u18cc\u18d1"+
		"\u18d6\u18da\u18e4\u18ec\u18ef\u18f4\u18f6\u18f9\u18ff\u1904\u190b\u1915"+
		"\u191a\u191e\u1921\u192d\u1932\u1937\u193d\u1944\u1947\u1952\u1957\u1959"+
		"\u195c\u195f\u1967\u196a\u196e\u1971\u1975\u1982\u1985\u1989\u198d\u1990"+
		"\u1997\u199e\u19a2\u19a5\u19ae\u19b1\u19bc\u19be\u19c6\u19c8\u19d3\u19d5"+
		"\u19dc\u19de\u19e2\u19e6\u19e9\u19f3\u19f9\u19fb\u19fe\u1a04\u1a09\u1a0e"+
		"\u1a17\u1a1d\u1a1f\u1a22\u1a2a\u1a30\u1a34\u1a3a\u1a3d\u1a46\u1a4b\u1a4d"+
		"\u1a4f\u1a52\u1a5b\u1a60\u1a6b\u1a79\u1a83\u1a89\u1a91\u1a97\u1a9c\u1aa0"+
		"\u1aae\u1ab3\u1ab6\u1ab9\u1abf\u1ac5\u1acc\u1ad1\u1ad4\u1ad9\u1ade\u1ae1"+
		"\u1ae5\u1aed\u1af4\u1af8\u1afd\u1b09\u1b0e\u1b10\u1b13\u1b18\u1b1c\u1b1f"+
		"\u1b22\u1b2a\u1b2d\u1b34\u1b36\u1b3a\u1b3d\u1b41\u1b45\u1b48\u1b4b\u1b53"+
		"\u1b5c\u1b5f\u1b66\u1b68\u1b6c\u1b72\u1b7a\u1b80\u1b85\u1b8a\u1b8e\u1b93"+
		"\u1b95\u1b9b\u1b9f\u1ba6\u1bab\u1bae\u1bb5\u1bbc\u1bbe\u1bc6\u1bc8\u1bce"+
		"\u1bd1\u1bd4\u1bd9\u1bdd\u1be7\u1bed\u1bf5\u1bf9\u1bfd\u1c01\u1c07\u1c0a"+
		"\u1c0d\u1c14\u1c18\u1c22\u1c2e\u1c38\u1c3f\u1c4b\u1c52\u1c5a\u1c5e\u1c62"+
		"\u1c6a\u1c79\u1c7e\u1c80\u1c89\u1c8c\u1c90\u1c93\u1c97\u1ca4\u1ca7\u1cab"+
		"\u1cae\u1cb3\u1cba\u1cbf\u1cc7\u1ccc\u1ccf\u1cdc\u1ce1\u1ce5\u1ce8\u1ced"+
		"\u1cf0\u1cf5\u1cfa\u1d01\u1d04\u1d07\u1d0b\u1d12\u1d15\u1d18\u1d1c\u1d20"+
		"\u1d24\u1d29\u1d2f\u1d31\u1d40\u1d47\u1d4f\u1d52\u1d55\u1d5c\u1d60\u1d64"+
		"\u1d66\u1d6e\u1d75\u1d86\u1d8b\u1d91\u1d97\u1d9f\u1dad\u1db2\u1db9\u1dc1"+
		"\u1dc9\u1dcd\u1dd6";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2,
			_serializedATNSegment3
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}