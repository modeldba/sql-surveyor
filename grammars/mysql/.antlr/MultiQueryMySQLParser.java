// Generated from /Users/matt/git/sqlsurveyor/grammars/mysql/MultiQueryMySQLParser.g4 by ANTLR 4.8
/*
 * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License, version 2.0,
 * as published by the Free Software Foundation.
 *
 * This program is also distributed with certain software (including
 * but not limited to OpenSSL) that is licensed under separate terms, as
 * designated in a particular file or component or in included license
 * documentation. The authors of MySQL hereby grant you an additional
 * permission to link the program and your derivative works with the
 * separately licensed software that they have included with MySQL.
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
 * the GNU General Public License, version 2.0, for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 */

import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class MultiQueryMySQLParser extends MySQLBaseParser {
	static { RuntimeMetaData.checkVersion("4.8", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		ACCOUNT_SYMBOL=1, ASCII_SYMBOL=2, ALWAYS_SYMBOL=3, BACKUP_SYMBOL=4, BEGIN_SYMBOL=5, 
		BYTE_SYMBOL=6, CACHE_SYMBOL=7, CHARSET_SYMBOL=8, CHECKSUM_SYMBOL=9, CLOSE_SYMBOL=10, 
		COMMENT_SYMBOL=11, COMMIT_SYMBOL=12, CONTAINS_SYMBOL=13, DEALLOCATE_SYMBOL=14, 
		DO_SYMBOL=15, END_SYMBOL=16, EXECUTE_SYMBOL=17, FLUSH_SYMBOL=18, FOLLOWS_SYMBOL=19, 
		FORMAT_SYMBOL=20, GROUP_REPLICATION_SYMBOL=21, HANDLER_SYMBOL=22, HELP_SYMBOL=23, 
		HOST_SYMBOL=24, INSTALL_SYMBOL=25, LANGUAGE_SYMBOL=26, NO_SYMBOL=27, OPEN_SYMBOL=28, 
		OPTIONS_SYMBOL=29, OWNER_SYMBOL=30, PARSER_SYMBOL=31, PARTITION_SYMBOL=32, 
		PORT_SYMBOL=33, PRECEDES_SYMBOL=34, PREPARE_SYMBOL=35, REMOVE_SYMBOL=36, 
		REPAIR_SYMBOL=37, RESET_SYMBOL=38, RESTORE_SYMBOL=39, ROLLBACK_SYMBOL=40, 
		SAVEPOINT_SYMBOL=41, SECURITY_SYMBOL=42, SERVER_SYMBOL=43, SIGNED_SYMBOL=44, 
		SLAVE_SYMBOL=45, SOCKET_SYMBOL=46, SONAME_SYMBOL=47, START_SYMBOL=48, 
		STOP_SYMBOL=49, TRUNCATE_SYMBOL=50, UNICODE_SYMBOL=51, UNINSTALL_SYMBOL=52, 
		UPGRADE_SYMBOL=53, WRAPPER_SYMBOL=54, XA_SYMBOL=55, SHUTDOWN_SYMBOL=56, 
		ACTION_SYMBOL=57, ADDDATE_SYMBOL=58, AFTER_SYMBOL=59, AGAINST_SYMBOL=60, 
		AGGREGATE_SYMBOL=61, ALGORITHM_SYMBOL=62, ANALYZE_SYMBOL=63, ANY_SYMBOL=64, 
		AT_SYMBOL=65, AUTHORS_SYMBOL=66, AUTO_INCREMENT_SYMBOL=67, AUTOEXTEND_SIZE_SYMBOL=68, 
		AVG_ROW_LENGTH_SYMBOL=69, AVG_SYMBOL=70, BINLOG_SYMBOL=71, BIT_SYMBOL=72, 
		BLOCK_SYMBOL=73, BOOL_SYMBOL=74, BOOLEAN_SYMBOL=75, BTREE_SYMBOL=76, CASCADED_SYMBOL=77, 
		CATALOG_NAME_SYMBOL=78, CHAIN_SYMBOL=79, CHANGED_SYMBOL=80, CHANNEL_SYMBOL=81, 
		CIPHER_SYMBOL=82, CLIENT_SYMBOL=83, CLASS_ORIGIN_SYMBOL=84, COALESCE_SYMBOL=85, 
		CODE_SYMBOL=86, COLLATION_SYMBOL=87, COLUMN_NAME_SYMBOL=88, COLUMN_FORMAT_SYMBOL=89, 
		COLUMNS_SYMBOL=90, COMMITTED_SYMBOL=91, COMPACT_SYMBOL=92, COMPLETION_SYMBOL=93, 
		COMPRESSED_SYMBOL=94, COMPRESSION_SYMBOL=95, ENCRYPTION_SYMBOL=96, CONCURRENT_SYMBOL=97, 
		CONNECTION_SYMBOL=98, CONSISTENT_SYMBOL=99, CONSTRAINT_CATALOG_SYMBOL=100, 
		CONSTRAINT_SCHEMA_SYMBOL=101, CONSTRAINT_NAME_SYMBOL=102, CONTEXT_SYMBOL=103, 
		CONTRIBUTORS_SYMBOL=104, CPU_SYMBOL=105, CUBE_SYMBOL=106, CURRENT_SYMBOL=107, 
		CURSOR_NAME_SYMBOL=108, DATA_SYMBOL=109, DATAFILE_SYMBOL=110, DATETIME_SYMBOL=111, 
		DATE_SYMBOL=112, DAY_SYMBOL=113, DEFAULT_AUTH_SYMBOL=114, DEFINER_SYMBOL=115, 
		DELAY_KEY_WRITE_SYMBOL=116, DES_KEY_FILE_SYMBOL=117, DIAGNOSTICS_SYMBOL=118, 
		DIRECTORY_SYMBOL=119, DISABLE_SYMBOL=120, DISCARD_SYMBOL=121, DISK_SYMBOL=122, 
		DUMPFILE_SYMBOL=123, DUPLICATE_SYMBOL=124, DYNAMIC_SYMBOL=125, ENDS_SYMBOL=126, 
		ENUM_SYMBOL=127, ENGINE_SYMBOL=128, ENGINES_SYMBOL=129, ERROR_SYMBOL=130, 
		ERRORS_SYMBOL=131, ESCAPE_SYMBOL=132, EVENT_SYMBOL=133, EVENTS_SYMBOL=134, 
		EVERY_SYMBOL=135, EXPANSION_SYMBOL=136, EXPORT_SYMBOL=137, EXTENDED_SYMBOL=138, 
		EXTENT_SIZE_SYMBOL=139, FAULTS_SYMBOL=140, FAST_SYMBOL=141, FOUND_SYMBOL=142, 
		ENABLE_SYMBOL=143, FULL_SYMBOL=144, FILE_SYMBOL=145, FILE_BLOCK_SIZE_SYMBOL=146, 
		FILTER_SYMBOL=147, FIRST_SYMBOL=148, FIXED_SYMBOL=149, GENERAL_SYMBOL=150, 
		GEOMETRY_SYMBOL=151, GEOMETRYCOLLECTION_SYMBOL=152, GET_FORMAT_SYMBOL=153, 
		GRANTS_SYMBOL=154, GLOBAL_SYMBOL=155, HASH_SYMBOL=156, HOSTS_SYMBOL=157, 
		HOUR_SYMBOL=158, IDENTIFIED_SYMBOL=159, IGNORE_SERVER_IDS_SYMBOL=160, 
		INVOKER_SYMBOL=161, IMPORT_SYMBOL=162, INDEXES_SYMBOL=163, INITIAL_SIZE_SYMBOL=164, 
		INSTANCE_SYMBOL=165, INNODB_SYMBOL=166, IO_SYMBOL=167, IPC_SYMBOL=168, 
		ISOLATION_SYMBOL=169, ISSUER_SYMBOL=170, INSERT_METHOD_SYMBOL=171, JSON_SYMBOL=172, 
		KEY_BLOCK_SIZE_SYMBOL=173, LAST_SYMBOL=174, LEAVES_SYMBOL=175, LESS_SYMBOL=176, 
		LEVEL_SYMBOL=177, LINESTRING_SYMBOL=178, LIST_SYMBOL=179, LOCAL_SYMBOL=180, 
		LOCKS_SYMBOL=181, LOGFILE_SYMBOL=182, LOGS_SYMBOL=183, MAX_ROWS_SYMBOL=184, 
		MASTER_SYMBOL=185, MASTER_HEARTBEAT_PERIOD_SYMBOL=186, MASTER_HOST_SYMBOL=187, 
		MASTER_PORT_SYMBOL=188, MASTER_LOG_FILE_SYMBOL=189, MASTER_LOG_POS_SYMBOL=190, 
		MASTER_USER_SYMBOL=191, MASTER_PASSWORD_SYMBOL=192, MASTER_SERVER_ID_SYMBOL=193, 
		MASTER_CONNECT_RETRY_SYMBOL=194, MASTER_RETRY_COUNT_SYMBOL=195, MASTER_DELAY_SYMBOL=196, 
		MASTER_SSL_SYMBOL=197, MASTER_SSL_CA_SYMBOL=198, MASTER_SSL_CAPATH_SYMBOL=199, 
		MASTER_TLS_VERSION_SYMBOL=200, MASTER_SSL_CERT_SYMBOL=201, MASTER_SSL_CIPHER_SYMBOL=202, 
		MASTER_SSL_CRL_SYMBOL=203, MASTER_SSL_CRLPATH_SYMBOL=204, MASTER_SSL_KEY_SYMBOL=205, 
		MASTER_AUTO_POSITION_SYMBOL=206, MAX_CONNECTIONS_PER_HOUR_SYMBOL=207, 
		MAX_QUERIES_PER_HOUR_SYMBOL=208, MAX_STATEMENT_TIME_SYMBOL=209, MAX_SIZE_SYMBOL=210, 
		MAX_UPDATES_PER_HOUR_SYMBOL=211, MAX_USER_CONNECTIONS_SYMBOL=212, MEDIUM_SYMBOL=213, 
		MEMORY_SYMBOL=214, MERGE_SYMBOL=215, MESSAGE_TEXT_SYMBOL=216, MICROSECOND_SYMBOL=217, 
		MIGRATE_SYMBOL=218, MINUTE_SYMBOL=219, MIN_ROWS_SYMBOL=220, MODIFY_SYMBOL=221, 
		MODE_SYMBOL=222, MONTH_SYMBOL=223, MULTILINESTRING_SYMBOL=224, MULTIPOINT_SYMBOL=225, 
		MULTIPOLYGON_SYMBOL=226, MUTEX_SYMBOL=227, MYSQL_ERRNO_SYMBOL=228, NAME_SYMBOL=229, 
		NAMES_SYMBOL=230, NATIONAL_SYMBOL=231, NCHAR_SYMBOL=232, NDBCLUSTER_SYMBOL=233, 
		NEVER_SYMBOL=234, NEXT_SYMBOL=235, NEW_SYMBOL=236, NO_WAIT_SYMBOL=237, 
		NODEGROUP_SYMBOL=238, NONE_SYMBOL=239, NUMBER_SYMBOL=240, NVARCHAR_SYMBOL=241, 
		OFFSET_SYMBOL=242, OLD_PASSWORD_SYMBOL=243, ONE_SHOT_SYMBOL=244, ONE_SYMBOL=245, 
		PACK_KEYS_SYMBOL=246, PAGE_SYMBOL=247, PARTIAL_SYMBOL=248, PARTITIONING_SYMBOL=249, 
		PARTITIONS_SYMBOL=250, PASSWORD_SYMBOL=251, PHASE_SYMBOL=252, PLUGIN_DIR_SYMBOL=253, 
		PLUGIN_SYMBOL=254, PLUGINS_SYMBOL=255, POINT_SYMBOL=256, POLYGON_SYMBOL=257, 
		PRESERVE_SYMBOL=258, PREV_SYMBOL=259, PRIVILEGES_SYMBOL=260, PROCESS_SYMBOL=261, 
		PROCESSLIST_SYMBOL=262, PROFILE_SYMBOL=263, PROFILES_SYMBOL=264, PROXY_SYMBOL=265, 
		QUARTER_SYMBOL=266, QUERY_SYMBOL=267, QUICK_SYMBOL=268, READ_ONLY_SYMBOL=269, 
		REBUILD_SYMBOL=270, RECOVER_SYMBOL=271, REDO_BUFFER_SIZE_SYMBOL=272, REDOFILE_SYMBOL=273, 
		REDUNDANT_SYMBOL=274, RELAY_SYMBOL=275, RELAYLOG_SYMBOL=276, RELAY_LOG_FILE_SYMBOL=277, 
		RELAY_LOG_POS_SYMBOL=278, RELAY_THREAD_SYMBOL=279, RELOAD_SYMBOL=280, 
		REORGANIZE_SYMBOL=281, REPEATABLE_SYMBOL=282, REPLICATION_SYMBOL=283, 
		REPLICATE_DO_DB_SYMBOL=284, REPLICATE_IGNORE_DB_SYMBOL=285, REPLICATE_DO_TABLE_SYMBOL=286, 
		REPLICATE_IGNORE_TABLE_SYMBOL=287, REPLICATE_WILD_DO_TABLE_SYMBOL=288, 
		REPLICATE_WILD_IGNORE_TABLE_SYMBOL=289, REPLICATE_REWRITE_DB_SYMBOL=290, 
		RESUME_SYMBOL=291, RETURNED_SQLSTATE_SYMBOL=292, RETURNS_SYMBOL=293, REVERSE_SYMBOL=294, 
		ROLLUP_SYMBOL=295, ROTATE_SYMBOL=296, ROUTINE_SYMBOL=297, ROWS_SYMBOL=298, 
		ROW_COUNT_SYMBOL=299, ROW_FORMAT_SYMBOL=300, ROW_SYMBOL=301, RTREE_SYMBOL=302, 
		SCHEDULE_SYMBOL=303, SCHEMA_NAME_SYMBOL=304, SECOND_SYMBOL=305, SERIAL_SYMBOL=306, 
		SERIALIZABLE_SYMBOL=307, SESSION_SYMBOL=308, SIMPLE_SYMBOL=309, SHARE_SYMBOL=310, 
		SLOW_SYMBOL=311, SNAPSHOT_SYMBOL=312, SOUNDS_SYMBOL=313, SOURCE_SYMBOL=314, 
		SQL_AFTER_GTIDS_SYMBOL=315, SQL_AFTER_MTS_GAPS_SYMBOL=316, SQL_BEFORE_GTIDS_SYMBOL=317, 
		SQL_CACHE_SYMBOL=318, SQL_BUFFER_RESULT_SYMBOL=319, SQL_NO_CACHE_SYMBOL=320, 
		SQL_THREAD_SYMBOL=321, STACKED_SYMBOL=322, STARTS_SYMBOL=323, STATS_AUTO_RECALC_SYMBOL=324, 
		STATS_PERSISTENT_SYMBOL=325, STATS_SAMPLE_PAGES_SYMBOL=326, STATUS_SYMBOL=327, 
		STORAGE_SYMBOL=328, STRING_SYMBOL=329, SUBCLASS_ORIGIN_SYMBOL=330, SUBDATE_SYMBOL=331, 
		SUBJECT_SYMBOL=332, SUBPARTITION_SYMBOL=333, SUBPARTITIONS_SYMBOL=334, 
		SUPER_SYMBOL=335, SUSPEND_SYMBOL=336, SWAPS_SYMBOL=337, SWITCHES_SYMBOL=338, 
		TABLE_NAME_SYMBOL=339, TABLES_SYMBOL=340, TABLE_CHECKSUM_SYMBOL=341, TABLESPACE_SYMBOL=342, 
		TEMPORARY_SYMBOL=343, TEMPTABLE_SYMBOL=344, TEXT_SYMBOL=345, THAN_SYMBOL=346, 
		TRANSACTION_SYMBOL=347, TRIGGERS_SYMBOL=348, TIMESTAMP_SYMBOL=349, TIMESTAMP_ADD_SYMBOL=350, 
		TIMESTAMP_DIFF_SYMBOL=351, TIME_SYMBOL=352, TYPES_SYMBOL=353, TYPE_SYMBOL=354, 
		UDF_RETURNS_SYMBOL=355, FUNCTION_SYMBOL=356, UNCOMMITTED_SYMBOL=357, UNDEFINED_SYMBOL=358, 
		UNDO_BUFFER_SIZE_SYMBOL=359, UNDOFILE_SYMBOL=360, UNKNOWN_SYMBOL=361, 
		UNTIL_SYMBOL=362, USER_RESOURCES_SYMBOL=363, USER_SYMBOL=364, USE_FRM_SYMBOL=365, 
		VARIABLES_SYMBOL=366, VIEW_SYMBOL=367, VALUE_SYMBOL=368, WARNINGS_SYMBOL=369, 
		WAIT_SYMBOL=370, WEEK_SYMBOL=371, WORK_SYMBOL=372, WEIGHT_STRING_SYMBOL=373, 
		X509_SYMBOL=374, XID_SYMBOL=375, XML_SYMBOL=376, YEAR_SYMBOL=377, NOT2_SYMBOL=378, 
		CONCAT_PIPES_SYMBOL=379, INT_NUMBER=380, LONG_NUMBER=381, ULONGLONG_NUMBER=382, 
		EQUAL_OPERATOR=383, ASSIGN_OPERATOR=384, NULL_SAFE_EQUAL_OPERATOR=385, 
		GREATER_OR_EQUAL_OPERATOR=386, GREATER_THAN_OPERATOR=387, LESS_OR_EQUAL_OPERATOR=388, 
		LESS_THAN_OPERATOR=389, NOT_EQUAL_OPERATOR=390, PLUS_OPERATOR=391, MINUS_OPERATOR=392, 
		MULT_OPERATOR=393, DIV_OPERATOR=394, MOD_OPERATOR=395, LOGICAL_NOT_OPERATOR=396, 
		BITWISE_NOT_OPERATOR=397, SHIFT_LEFT_OPERATOR=398, SHIFT_RIGHT_OPERATOR=399, 
		LOGICAL_AND_OPERATOR=400, BITWISE_AND_OPERATOR=401, BITWISE_XOR_OPERATOR=402, 
		LOGICAL_OR_OPERATOR=403, BITWISE_OR_OPERATOR=404, DOT_SYMBOL=405, COMMA_SYMBOL=406, 
		SEMICOLON_SYMBOL=407, COLON_SYMBOL=408, OPEN_PAR_SYMBOL=409, CLOSE_PAR_SYMBOL=410, 
		OPEN_CURLY_SYMBOL=411, CLOSE_CURLY_SYMBOL=412, UNDERLINE_SYMBOL=413, JSON_SEPARATOR_SYMBOL=414, 
		JSON_UNQUOTED_SEPARATOR_SYMBOL=415, AT_SIGN_SYMBOL=416, AT_TEXT_SUFFIX=417, 
		AT_AT_SIGN_SYMBOL=418, NULL2_SYMBOL=419, PARAM_MARKER=420, HEX_NUMBER=421, 
		BIN_NUMBER=422, DECIMAL_NUMBER=423, FLOAT_NUMBER=424, ACCESSIBLE_SYMBOL=425, 
		ADD_SYMBOL=426, ALL_SYMBOL=427, ALTER_SYMBOL=428, ANALYSE_SYMBOL=429, 
		AND_SYMBOL=430, AS_SYMBOL=431, ASC_SYMBOL=432, ASENSITIVE_SYMBOL=433, 
		BEFORE_SYMBOL=434, BETWEEN_SYMBOL=435, BIGINT_SYMBOL=436, BINARY_SYMBOL=437, 
		BIN_NUM_SYMBOL=438, BIT_AND_SYMBOL=439, BIT_OR_SYMBOL=440, BIT_XOR_SYMBOL=441, 
		BLOB_SYMBOL=442, BOTH_SYMBOL=443, BY_SYMBOL=444, CALL_SYMBOL=445, CASCADE_SYMBOL=446, 
		CASE_SYMBOL=447, CAST_SYMBOL=448, CHANGE_SYMBOL=449, CHAR_SYMBOL=450, 
		CHECK_SYMBOL=451, COLLATE_SYMBOL=452, COLUMN_SYMBOL=453, CONDITION_SYMBOL=454, 
		CONSTRAINT_SYMBOL=455, CONTINUE_SYMBOL=456, CONVERT_SYMBOL=457, COUNT_SYMBOL=458, 
		CREATE_SYMBOL=459, CROSS_SYMBOL=460, CURDATE_SYMBOL=461, CURRENT_DATE_SYMBOL=462, 
		CURRENT_TIME_SYMBOL=463, CURRENT_USER_SYMBOL=464, CURSOR_SYMBOL=465, CURTIME_SYMBOL=466, 
		DATABASE_SYMBOL=467, DATABASES_SYMBOL=468, DATE_ADD_SYMBOL=469, DATE_SUB_SYMBOL=470, 
		DAY_HOUR_SYMBOL=471, DAY_MICROSECOND_SYMBOL=472, DAY_MINUTE_SYMBOL=473, 
		DAY_SECOND_SYMBOL=474, DECIMAL_NUM_SYMBOL=475, DECIMAL_SYMBOL=476, DECLARE_SYMBOL=477, 
		DEFAULT_SYMBOL=478, DELAYED_SYMBOL=479, DELETE_SYMBOL=480, DESC_SYMBOL=481, 
		DESCRIBE_SYMBOL=482, DETERMINISTIC_SYMBOL=483, DISTINCT_SYMBOL=484, DIV_SYMBOL=485, 
		DOUBLE_SYMBOL=486, DROP_SYMBOL=487, DUAL_SYMBOL=488, EACH_SYMBOL=489, 
		ELSE_SYMBOL=490, ELSEIF_SYMBOL=491, ENCLOSED_SYMBOL=492, END_OF_INPUT_SYMBOL=493, 
		ESCAPED_SYMBOL=494, EXCHANGE_SYMBOL=495, EXISTS_SYMBOL=496, EXIT_SYMBOL=497, 
		EXPIRE_SYMBOL=498, EXPLAIN_SYMBOL=499, EXTRACT_SYMBOL=500, FALSE_SYMBOL=501, 
		FETCH_SYMBOL=502, FLOAT_SYMBOL=503, FORCE_SYMBOL=504, FOREIGN_SYMBOL=505, 
		FOR_SYMBOL=506, FROM_SYMBOL=507, FULLTEXT_SYMBOL=508, GET_SYMBOL=509, 
		GENERATED_SYMBOL=510, GRANT_SYMBOL=511, GROUP_SYMBOL=512, GROUP_CONCAT_SYMBOL=513, 
		HAVING_SYMBOL=514, HIGH_PRIORITY_SYMBOL=515, HOUR_MICROSECOND_SYMBOL=516, 
		HOUR_MINUTE_SYMBOL=517, HOUR_SECOND_SYMBOL=518, IF_SYMBOL=519, IGNORE_SYMBOL=520, 
		INDEX_SYMBOL=521, INFILE_SYMBOL=522, INNER_SYMBOL=523, INOUT_SYMBOL=524, 
		INSENSITIVE_SYMBOL=525, INSERT_SYMBOL=526, INTERVAL_SYMBOL=527, INTO_SYMBOL=528, 
		INT_SYMBOL=529, IN_SYMBOL=530, IO_AFTER_GTIDS_SYMBOL=531, IO_BEFORE_GTIDS_SYMBOL=532, 
		IS_SYMBOL=533, ITERATE_SYMBOL=534, JOIN_SYMBOL=535, KEYS_SYMBOL=536, KEY_SYMBOL=537, 
		KILL_SYMBOL=538, LEADING_SYMBOL=539, LEAVE_SYMBOL=540, LEFT_SYMBOL=541, 
		LIKE_SYMBOL=542, LIMIT_SYMBOL=543, LINEAR_SYMBOL=544, LINES_SYMBOL=545, 
		LOAD_SYMBOL=546, LOCATOR_SYMBOL=547, LOCK_SYMBOL=548, LONGBLOB_SYMBOL=549, 
		LONGTEXT_SYMBOL=550, LONG_NUM_SYMBOL=551, LONG_SYMBOL=552, LOOP_SYMBOL=553, 
		LOW_PRIORITY_SYMBOL=554, MASTER_BIND_SYMBOL=555, MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL=556, 
		MATCH_SYMBOL=557, MAX_SYMBOL=558, MAXVALUE_SYMBOL=559, MEDIUMBLOB_SYMBOL=560, 
		MEDIUMINT_SYMBOL=561, MEDIUMTEXT_SYMBOL=562, MID_SYMBOL=563, MINUTE_MICROSECOND_SYMBOL=564, 
		MINUTE_SECOND_SYMBOL=565, MIN_SYMBOL=566, MODIFIES_SYMBOL=567, MOD_SYMBOL=568, 
		NATURAL_SYMBOL=569, NCHAR_STRING_SYMBOL=570, NEG_SYMBOL=571, NONBLOCKING_SYMBOL=572, 
		NOT_SYMBOL=573, NOW_SYMBOL=574, NO_WRITE_TO_BINLOG_SYMBOL=575, NULL_SYMBOL=576, 
		NUMERIC_SYMBOL=577, OFFLINE_SYMBOL=578, ON_SYMBOL=579, ONLINE_SYMBOL=580, 
		ONLY_SYMBOL=581, OPTIMIZE_SYMBOL=582, OPTIMIZER_COSTS_SYMBOL=583, OPTION_SYMBOL=584, 
		OPTIONALLY_SYMBOL=585, ORDER_SYMBOL=586, OR_SYMBOL=587, OUTER_SYMBOL=588, 
		OUTFILE_SYMBOL=589, OUT_SYMBOL=590, POSITION_SYMBOL=591, PRECISION_SYMBOL=592, 
		PRIMARY_SYMBOL=593, PROCEDURE_SYMBOL=594, PURGE_SYMBOL=595, RANGE_SYMBOL=596, 
		READS_SYMBOL=597, READ_SYMBOL=598, READ_WRITE_SYMBOL=599, REAL_SYMBOL=600, 
		REFERENCES_SYMBOL=601, REGEXP_SYMBOL=602, RELEASE_SYMBOL=603, RENAME_SYMBOL=604, 
		REPEAT_SYMBOL=605, REPLACE_SYMBOL=606, REQUIRE_SYMBOL=607, RESIGNAL_SYMBOL=608, 
		RESTRICT_SYMBOL=609, RETURN_SYMBOL=610, REVOKE_SYMBOL=611, RIGHT_SYMBOL=612, 
		SECOND_MICROSECOND_SYMBOL=613, SELECT_SYMBOL=614, SENSITIVE_SYMBOL=615, 
		SEPARATOR_SYMBOL=616, SERVER_OPTIONS_SYMBOL=617, SESSION_USER_SYMBOL=618, 
		SET_SYMBOL=619, SET_VAR_SYMBOL=620, SHOW_SYMBOL=621, SIGNAL_SYMBOL=622, 
		SMALLINT_SYMBOL=623, SPATIAL_SYMBOL=624, SPECIFIC_SYMBOL=625, SQLEXCEPTION_SYMBOL=626, 
		SQLSTATE_SYMBOL=627, SQLWARNING_SYMBOL=628, SQL_BIG_RESULT_SYMBOL=629, 
		SQL_CALC_FOUND_ROWS_SYMBOL=630, SQL_SMALL_RESULT_SYMBOL=631, SQL_SYMBOL=632, 
		SSL_SYMBOL=633, STARTING_SYMBOL=634, STDDEV_SAMP_SYMBOL=635, STDDEV_SYMBOL=636, 
		STDDEV_POP_SYMBOL=637, STD_SYMBOL=638, STORED_SYMBOL=639, STRAIGHT_JOIN_SYMBOL=640, 
		SUBSTR_SYMBOL=641, SUBSTRING_SYMBOL=642, SUM_SYMBOL=643, SYSDATE_SYMBOL=644, 
		SYSTEM_USER_SYMBOL=645, TABLE_REF_PRIORITY_SYMBOL=646, TABLE_SYMBOL=647, 
		TERMINATED_SYMBOL=648, THEN_SYMBOL=649, TINYBLOB_SYMBOL=650, TINYINT_SYMBOL=651, 
		TINYTEXT_SYMBOL=652, TO_SYMBOL=653, TRAILING_SYMBOL=654, TRIGGER_SYMBOL=655, 
		TRIM_SYMBOL=656, TRUE_SYMBOL=657, UNDO_SYMBOL=658, UNION_SYMBOL=659, UNIQUE_SYMBOL=660, 
		UNLOCK_SYMBOL=661, UNSIGNED_SYMBOL=662, UPDATE_SYMBOL=663, USAGE_SYMBOL=664, 
		USE_SYMBOL=665, USING_SYMBOL=666, UTC_DATE_SYMBOL=667, UTC_TIMESTAMP_SYMBOL=668, 
		UTC_TIME_SYMBOL=669, VALIDATION_SYMBOL=670, VALUES_SYMBOL=671, VARBINARY_SYMBOL=672, 
		VARCHAR_SYMBOL=673, VARIANCE_SYMBOL=674, VARYING_SYMBOL=675, VAR_POP_SYMBOL=676, 
		VAR_SAMP_SYMBOL=677, VIRTUAL_SYMBOL=678, WHEN_SYMBOL=679, WHERE_SYMBOL=680, 
		WHILE_SYMBOL=681, WITH_SYMBOL=682, WITHOUT_SYMBOL=683, WRITE_SYMBOL=684, 
		XOR_SYMBOL=685, YEAR_MONTH_SYMBOL=686, ZEROFILL_SYMBOL=687, PERSIST_SYMBOL=688, 
		ROLE_SYMBOL=689, ADMIN_SYMBOL=690, INVISIBLE_SYMBOL=691, VISIBLE_SYMBOL=692, 
		EXCEPT_SYMBOL=693, COMPONENT_SYMBOL=694, RECURSIVE_SYMBOL=695, JSON_OBJECTAGG_SYMBOL=696, 
		JSON_ARRAYAGG_SYMBOL=697, OF_SYMBOL=698, SKIP_SYMBOL=699, LOCKED_SYMBOL=700, 
		NOWAIT_SYMBOL=701, GROUPING_SYMBOL=702, PERSIST_ONLY_SYMBOL=703, HISTOGRAM_SYMBOL=704, 
		BUCKETS_SYMBOL=705, REMOTE_SYMBOL=706, CLONE_SYMBOL=707, CUME_DIST_SYMBOL=708, 
		DENSE_RANK_SYMBOL=709, EXCLUDE_SYMBOL=710, FIRST_VALUE_SYMBOL=711, FOLLOWING_SYMBOL=712, 
		GROUPS_SYMBOL=713, LAG_SYMBOL=714, LAST_VALUE_SYMBOL=715, LEAD_SYMBOL=716, 
		NTH_VALUE_SYMBOL=717, NTILE_SYMBOL=718, NULLS_SYMBOL=719, OTHERS_SYMBOL=720, 
		OVER_SYMBOL=721, PERCENT_RANK_SYMBOL=722, PRECEDING_SYMBOL=723, RANK_SYMBOL=724, 
		RESPECT_SYMBOL=725, ROW_NUMBER_SYMBOL=726, TIES_SYMBOL=727, UNBOUNDED_SYMBOL=728, 
		WINDOW_SYMBOL=729, EMPTY_SYMBOL=730, JSON_TABLE_SYMBOL=731, NESTED_SYMBOL=732, 
		ORDINALITY_SYMBOL=733, PATH_SYMBOL=734, HISTORY_SYMBOL=735, REUSE_SYMBOL=736, 
		SRID_SYMBOL=737, THREAD_PRIORITY_SYMBOL=738, RESOURCE_SYMBOL=739, SYSTEM_SYMBOL=740, 
		VCPU_SYMBOL=741, MASTER_PUBLIC_KEY_PATH_SYMBOL=742, GET_MASTER_PUBLIC_KEY_SYMBOL=743, 
		RESTART_SYMBOL=744, DEFINITION_SYMBOL=745, DESCRIPTION_SYMBOL=746, ORGANIZATION_SYMBOL=747, 
		REFERENCE_SYMBOL=748, OPTIONAL_SYMBOL=749, SECONDARY_SYMBOL=750, SECONDARY_ENGINE_SYMBOL=751, 
		SECONDARY_LOAD_SYMBOL=752, SECONDARY_UNLOAD_SYMBOL=753, ACTIVE_SYMBOL=754, 
		INACTIVE_SYMBOL=755, LATERAL_SYMBOL=756, RETAIN_SYMBOL=757, OLD_SYMBOL=758, 
		NETWORK_NAMESPACE_SYMBOL=759, ENFORCED_SYMBOL=760, ARRAY_SYMBOL=761, OJ_SYMBOL=762, 
		MEMBER_SYMBOL=763, RANDOM_SYMBOL=764, MASTER_COMPRESSION_ALGORITHM_SYMBOL=765, 
		MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL=766, PRIVILEGE_CHECKS_USER_SYMBOL=767, 
		MASTER_TLS_CIPHERSUITES_SYMBOL=768, WHITESPACE=769, INVALID_INPUT=770, 
		UNDERSCORE_CHARSET=771, IDENTIFIER=772, NCHAR_TEXT=773, BACK_TICK_QUOTED_ID=774, 
		DOUBLE_QUOTED_TEXT=775, SINGLE_QUOTED_TEXT=776, VERSION_COMMENT_START=777, 
		MYSQL_COMMENT_START=778, VERSION_COMMENT_END=779, BLOCK_COMMENT=780, POUND_COMMENT=781, 
		DASHDASH_COMMENT=782, NOT_EQUAL2_OPERATOR=783;
	public static final int
		RULE_sql_script = 0, RULE_query = 1, RULE_simpleStatement = 2, RULE_alterStatement = 3, 
		RULE_alterDatabase = 4, RULE_alterEvent = 5, RULE_alterLogfileGroup = 6, 
		RULE_alterLogfileGroupOptions = 7, RULE_alterLogfileGroupOption = 8, RULE_alterServer = 9, 
		RULE_alterTable = 10, RULE_alterTableActions = 11, RULE_alterCommandList = 12, 
		RULE_alterCommandsModifierList = 13, RULE_standaloneAlterCommands = 14, 
		RULE_alterPartition = 15, RULE_alterList = 16, RULE_alterCommandsModifier = 17, 
		RULE_alterListItem = 18, RULE_place = 19, RULE_restrict = 20, RULE_alterOrderList = 21, 
		RULE_alterAlgorithmOption = 22, RULE_alterLockOption = 23, RULE_indexLockAndAlgorithm = 24, 
		RULE_withValidation = 25, RULE_removePartitioning = 26, RULE_allOrPartitionNameList = 27, 
		RULE_reorgPartitionRule = 28, RULE_alterTablespace = 29, RULE_alterUndoTablespace = 30, 
		RULE_undoTableSpaceOptions = 31, RULE_undoTableSpaceOption = 32, RULE_alterTablespaceOptions = 33, 
		RULE_alterTablespaceOption = 34, RULE_changeTablespaceOption = 35, RULE_alterView = 36, 
		RULE_viewTail = 37, RULE_viewSelect = 38, RULE_viewCheckOption = 39, RULE_createStatement = 40, 
		RULE_createDatabase = 41, RULE_createDatabaseOption = 42, RULE_createTable = 43, 
		RULE_tableElementList = 44, RULE_tableElement = 45, RULE_duplicateAsQueryExpression = 46, 
		RULE_queryExpressionOrParens = 47, RULE_createRoutine = 48, RULE_createProcedure = 49, 
		RULE_createFunction = 50, RULE_createUdf = 51, RULE_routineCreateOption = 52, 
		RULE_routineAlterOptions = 53, RULE_routineOption = 54, RULE_createIndex = 55, 
		RULE_indexNameAndType = 56, RULE_createIndexTarget = 57, RULE_createLogfileGroup = 58, 
		RULE_logfileGroupOptions = 59, RULE_logfileGroupOption = 60, RULE_createServer = 61, 
		RULE_serverOptions = 62, RULE_serverOption = 63, RULE_createTablespace = 64, 
		RULE_createUndoTablespace = 65, RULE_tsDataFileName = 66, RULE_tsDataFile = 67, 
		RULE_tablespaceOptions = 68, RULE_tablespaceOption = 69, RULE_tsOptionInitialSize = 70, 
		RULE_tsOptionUndoRedoBufferSize = 71, RULE_tsOptionAutoextendSize = 72, 
		RULE_tsOptionMaxSize = 73, RULE_tsOptionExtentSize = 74, RULE_tsOptionNodegroup = 75, 
		RULE_tsOptionEngine = 76, RULE_tsOptionWait = 77, RULE_tsOptionComment = 78, 
		RULE_tsOptionFileblockSize = 79, RULE_tsOptionEncryption = 80, RULE_createView = 81, 
		RULE_viewReplaceOrAlgorithm = 82, RULE_viewAlgorithm = 83, RULE_viewSuid = 84, 
		RULE_createTrigger = 85, RULE_triggerFollowsPrecedesClause = 86, RULE_createEvent = 87, 
		RULE_createRole = 88, RULE_createSpatialReference = 89, RULE_srsAttribute = 90, 
		RULE_dropStatement = 91, RULE_dropDatabase = 92, RULE_dropEvent = 93, 
		RULE_dropFunction = 94, RULE_dropProcedure = 95, RULE_dropIndex = 96, 
		RULE_dropLogfileGroup = 97, RULE_dropLogfileGroupOption = 98, RULE_dropServer = 99, 
		RULE_dropTable = 100, RULE_dropTableSpace = 101, RULE_dropTrigger = 102, 
		RULE_dropView = 103, RULE_dropRole = 104, RULE_dropSpatialReference = 105, 
		RULE_dropUndoTablespace = 106, RULE_renameTableStatement = 107, RULE_renamePair = 108, 
		RULE_truncateTableStatement = 109, RULE_importStatement = 110, RULE_callStatement = 111, 
		RULE_deleteStatement = 112, RULE_partitionDelete = 113, RULE_deleteStatementOption = 114, 
		RULE_doStatement = 115, RULE_handlerStatement = 116, RULE_handlerReadOrScan = 117, 
		RULE_insertStatement = 118, RULE_insertLockOption = 119, RULE_insertFromConstructor = 120, 
		RULE_fields = 121, RULE_insertValues = 122, RULE_insertQueryExpression = 123, 
		RULE_valueList = 124, RULE_values = 125, RULE_valuesReference = 126, RULE_insertUpdateList = 127, 
		RULE_loadStatement = 128, RULE_dataOrXml = 129, RULE_xmlRowsIdentifiedBy = 130, 
		RULE_loadDataFileTail = 131, RULE_loadDataFileTargetList = 132, RULE_fieldOrVariableList = 133, 
		RULE_replaceStatement = 134, RULE_selectStatement = 135, RULE_selectStatementWithInto = 136, 
		RULE_queryExpression = 137, RULE_queryExpressionBody = 138, RULE_queryExpressionParens = 139, 
		RULE_querySpecification = 140, RULE_subquery = 141, RULE_querySpecOption = 142, 
		RULE_limitClause = 143, RULE_simpleLimitClause = 144, RULE_limitOptions = 145, 
		RULE_limitOption = 146, RULE_intoClause = 147, RULE_procedureAnalyseClause = 148, 
		RULE_havingClause = 149, RULE_windowClause = 150, RULE_windowDefinition = 151, 
		RULE_windowSpec = 152, RULE_windowSpecDetails = 153, RULE_windowFrameClause = 154, 
		RULE_windowFrameUnits = 155, RULE_windowFrameExtent = 156, RULE_windowFrameStart = 157, 
		RULE_windowFrameBetween = 158, RULE_windowFrameBound = 159, RULE_windowFrameExclusion = 160, 
		RULE_withClause = 161, RULE_commonTableExpression = 162, RULE_groupByClause = 163, 
		RULE_olapOption = 164, RULE_orderClause = 165, RULE_direction = 166, RULE_fromClause = 167, 
		RULE_tableReferenceList = 168, RULE_selectOption = 169, RULE_lockingClause = 170, 
		RULE_lockStrengh = 171, RULE_lockedRowAction = 172, RULE_selectItemList = 173, 
		RULE_selectItem = 174, RULE_selectAlias = 175, RULE_whereClause = 176, 
		RULE_tableReference = 177, RULE_escapedTableReference = 178, RULE_joinedTable = 179, 
		RULE_naturalJoinType = 180, RULE_innerJoinType = 181, RULE_outerJoinType = 182, 
		RULE_tableFactor = 183, RULE_singleTable = 184, RULE_singleTableParens = 185, 
		RULE_derivedTable = 186, RULE_tableReferenceListParens = 187, RULE_tableFunction = 188, 
		RULE_columnsClause = 189, RULE_jtColumn = 190, RULE_onEmptyOrError = 191, 
		RULE_onEmpty = 192, RULE_onError = 193, RULE_jtOnResponse = 194, RULE_unionOption = 195, 
		RULE_tableAlias = 196, RULE_indexHintList = 197, RULE_indexHint = 198, 
		RULE_indexHintType = 199, RULE_keyOrIndex = 200, RULE_constraintKeyType = 201, 
		RULE_indexHintClause = 202, RULE_indexList = 203, RULE_indexListElement = 204, 
		RULE_updateStatement = 205, RULE_transactionOrLockingStatement = 206, 
		RULE_transactionStatement = 207, RULE_beginWork = 208, RULE_transactionCharacteristic = 209, 
		RULE_savepointStatement = 210, RULE_lockStatement = 211, RULE_lockItem = 212, 
		RULE_lockOption = 213, RULE_xaStatement = 214, RULE_xaConvert = 215, RULE_xid = 216, 
		RULE_replicationStatement = 217, RULE_resetOption = 218, RULE_masterResetOptions = 219, 
		RULE_replicationLoad = 220, RULE_changeMaster = 221, RULE_changeMasterOptions = 222, 
		RULE_masterOption = 223, RULE_privilegeCheckDef = 224, RULE_masterTlsCiphersuitesDef = 225, 
		RULE_masterFileDef = 226, RULE_serverIdList = 227, RULE_changeReplication = 228, 
		RULE_filterDefinition = 229, RULE_filterDbList = 230, RULE_filterTableList = 231, 
		RULE_filterStringList = 232, RULE_filterWildDbTableString = 233, RULE_filterDbPairList = 234, 
		RULE_slave = 235, RULE_slaveUntilOptions = 236, RULE_slaveConnectionOptions = 237, 
		RULE_slaveThreadOptions = 238, RULE_slaveThreadOption = 239, RULE_groupReplication = 240, 
		RULE_preparedStatement = 241, RULE_executeStatement = 242, RULE_executeVarList = 243, 
		RULE_cloneStatement = 244, RULE_dataDirSSL = 245, RULE_ssl = 246, RULE_accountManagementStatement = 247, 
		RULE_alterUser = 248, RULE_alterUserTail = 249, RULE_userFunction = 250, 
		RULE_createUser = 251, RULE_createUserTail = 252, RULE_defaultRoleClause = 253, 
		RULE_requireClause = 254, RULE_connectOptions = 255, RULE_accountLockPasswordExpireOptions = 256, 
		RULE_dropUser = 257, RULE_grant = 258, RULE_grantTargetList = 259, RULE_grantOptions = 260, 
		RULE_exceptRoleList = 261, RULE_withRoles = 262, RULE_grantAs = 263, RULE_versionedRequireClause = 264, 
		RULE_renameUser = 265, RULE_revoke = 266, RULE_onTypeTo = 267, RULE_aclType = 268, 
		RULE_roleOrPrivilegesList = 269, RULE_roleOrPrivilege = 270, RULE_grantIdentifier = 271, 
		RULE_requireList = 272, RULE_requireListElement = 273, RULE_grantOption = 274, 
		RULE_setRole = 275, RULE_roleList = 276, RULE_role = 277, RULE_tableAdministrationStatement = 278, 
		RULE_histogram = 279, RULE_checkOption = 280, RULE_repairType = 281, RULE_installUninstallStatment = 282, 
		RULE_setStatement = 283, RULE_startOptionValueList = 284, RULE_transactionCharacteristics = 285, 
		RULE_transactionAccessMode = 286, RULE_isolationLevel = 287, RULE_optionValueListContinued = 288, 
		RULE_optionValueNoOptionType = 289, RULE_optionValue = 290, RULE_setSystemVariable = 291, 
		RULE_startOptionValueListFollowingOptionType = 292, RULE_optionValueFollowingOptionType = 293, 
		RULE_setExprOrDefault = 294, RULE_showStatement = 295, RULE_showCommandType = 296, 
		RULE_nonBlocking = 297, RULE_fromOrIn = 298, RULE_inDb = 299, RULE_profileType = 300, 
		RULE_otherAdministrativeStatement = 301, RULE_keyCacheListOrParts = 302, 
		RULE_keyCacheList = 303, RULE_assignToKeycache = 304, RULE_assignToKeycachePartition = 305, 
		RULE_cacheKeyList = 306, RULE_keyUsageElement = 307, RULE_keyUsageList = 308, 
		RULE_flushOption = 309, RULE_logType = 310, RULE_flushTables = 311, RULE_flushTablesOptions = 312, 
		RULE_preloadTail = 313, RULE_preloadList = 314, RULE_preloadKeys = 315, 
		RULE_adminPartition = 316, RULE_resourceGroupManagement = 317, RULE_createResourceGroup = 318, 
		RULE_resourceGroupVcpuList = 319, RULE_vcpuNumOrRange = 320, RULE_resourceGroupPriority = 321, 
		RULE_resourceGroupEnableDisable = 322, RULE_alterResourceGroup = 323, 
		RULE_setResourceGroup = 324, RULE_threadIdList = 325, RULE_dropResourceGroup = 326, 
		RULE_utilityStatement = 327, RULE_describeCommand = 328, RULE_explainCommand = 329, 
		RULE_explainableStatement = 330, RULE_helpCommand = 331, RULE_useCommand = 332, 
		RULE_restartServer = 333, RULE_expr = 334, RULE_boolPri = 335, RULE_compOp = 336, 
		RULE_predicate = 337, RULE_predicateOperations = 338, RULE_bitExpr = 339, 
		RULE_simpleExpr = 340, RULE_arrayCast = 341, RULE_jsonOperator = 342, 
		RULE_sumExpr = 343, RULE_groupingOperation = 344, RULE_windowFunctionCall = 345, 
		RULE_windowingClause = 346, RULE_leadLagInfo = 347, RULE_nullTreatment = 348, 
		RULE_jsonFunction = 349, RULE_inSumExpr = 350, RULE_identListArg = 351, 
		RULE_identList = 352, RULE_fulltextOptions = 353, RULE_runtimeFunctionCall = 354, 
		RULE_geometryFunction = 355, RULE_timeFunctionParameters = 356, RULE_fractionalPrecision = 357, 
		RULE_weightStringLevels = 358, RULE_weightStringLevelListItem = 359, RULE_dateTimeTtype = 360, 
		RULE_trimFunction = 361, RULE_substringFunction = 362, RULE_functionCall = 363, 
		RULE_udfExprList = 364, RULE_udfExpr = 365, RULE_variable = 366, RULE_userVariable = 367, 
		RULE_systemVariable = 368, RULE_internalVariableName = 369, RULE_whenExpression = 370, 
		RULE_thenExpression = 371, RULE_elseExpression = 372, RULE_castType = 373, 
		RULE_exprList = 374, RULE_charset = 375, RULE_notRule = 376, RULE_not2Rule = 377, 
		RULE_interval = 378, RULE_intervalTimeStamp = 379, RULE_exprListWithParentheses = 380, 
		RULE_exprWithParentheses = 381, RULE_simpleExprWithParentheses = 382, 
		RULE_orderList = 383, RULE_orderExpression = 384, RULE_groupList = 385, 
		RULE_groupingExpression = 386, RULE_channel = 387, RULE_compoundStatement = 388, 
		RULE_returnStatement = 389, RULE_ifStatement = 390, RULE_ifBody = 391, 
		RULE_thenStatement = 392, RULE_compoundStatementList = 393, RULE_caseStatement = 394, 
		RULE_elseStatement = 395, RULE_labeledBlock = 396, RULE_unlabeledBlock = 397, 
		RULE_label = 398, RULE_beginEndBlock = 399, RULE_labeledControl = 400, 
		RULE_unlabeledControl = 401, RULE_loopBlock = 402, RULE_whileDoBlock = 403, 
		RULE_repeatUntilBlock = 404, RULE_spDeclarations = 405, RULE_spDeclaration = 406, 
		RULE_variableDeclaration = 407, RULE_conditionDeclaration = 408, RULE_spCondition = 409, 
		RULE_sqlstate = 410, RULE_handlerDeclaration = 411, RULE_handlerCondition = 412, 
		RULE_cursorDeclaration = 413, RULE_iterateStatement = 414, RULE_leaveStatement = 415, 
		RULE_getDiagnostics = 416, RULE_signalAllowedExpr = 417, RULE_statementInformationItem = 418, 
		RULE_conditionInformationItem = 419, RULE_signalInformationItemName = 420, 
		RULE_signalStatement = 421, RULE_resignalStatement = 422, RULE_signalInformationItem = 423, 
		RULE_cursorOpen = 424, RULE_cursorClose = 425, RULE_cursorFetch = 426, 
		RULE_schedule = 427, RULE_columnDefinition = 428, RULE_checkOrReferences = 429, 
		RULE_checkConstraint = 430, RULE_constraintEnforcement = 431, RULE_tableConstraintDef = 432, 
		RULE_constraintName = 433, RULE_fieldDefinition = 434, RULE_columnAttribute = 435, 
		RULE_columnFormat = 436, RULE_storageMedia = 437, RULE_gcolAttribute = 438, 
		RULE_references = 439, RULE_deleteOption = 440, RULE_keyList = 441, RULE_keyPart = 442, 
		RULE_keyListWithExpression = 443, RULE_keyPartOrExpression = 444, RULE_keyListVariants = 445, 
		RULE_indexType = 446, RULE_indexOption = 447, RULE_commonIndexOption = 448, 
		RULE_visibility = 449, RULE_indexTypeClause = 450, RULE_fulltextIndexOption = 451, 
		RULE_spatialIndexOption = 452, RULE_dataTypeDefinition = 453, RULE_dataType = 454, 
		RULE_nchar = 455, RULE_realType = 456, RULE_fieldLength = 457, RULE_fieldOptions = 458, 
		RULE_charsetWithOptBinary = 459, RULE_ascii = 460, RULE_unicode = 461, 
		RULE_wsNumCodepoints = 462, RULE_typeDatetimePrecision = 463, RULE_charsetName = 464, 
		RULE_collationName = 465, RULE_createTableOptions = 466, RULE_createTableOptionsSpaceSeparated = 467, 
		RULE_createTableOption = 468, RULE_ternaryOption = 469, RULE_defaultCollation = 470, 
		RULE_defaultEncryption = 471, RULE_defaultCharset = 472, RULE_partitionClause = 473, 
		RULE_partitionTypeDef = 474, RULE_subPartitions = 475, RULE_partitionKeyAlgorithm = 476, 
		RULE_partitionDefinitions = 477, RULE_partitionDefinition = 478, RULE_partitionValuesIn = 479, 
		RULE_partitionOption = 480, RULE_subpartitionDefinition = 481, RULE_partitionValueItemListParen = 482, 
		RULE_partitionValueItem = 483, RULE_definerClause = 484, RULE_ifExists = 485, 
		RULE_ifNotExists = 486, RULE_procedureParameter = 487, RULE_functionParameter = 488, 
		RULE_collate = 489, RULE_typeWithOptCollate = 490, RULE_schemaIdentifierPair = 491, 
		RULE_viewRefList = 492, RULE_updateList = 493, RULE_updateElement = 494, 
		RULE_charsetClause = 495, RULE_fieldsClause = 496, RULE_fieldTerm = 497, 
		RULE_linesClause = 498, RULE_lineTerm = 499, RULE_userList = 500, RULE_createUserList = 501, 
		RULE_alterUserList = 502, RULE_createUserEntry = 503, RULE_alterUserEntry = 504, 
		RULE_retainCurrentPassword = 505, RULE_discardOldPassword = 506, RULE_replacePassword = 507, 
		RULE_userIdentifierOrText = 508, RULE_user = 509, RULE_likeClause = 510, 
		RULE_likeOrWhere = 511, RULE_onlineOption = 512, RULE_noWriteToBinLog = 513, 
		RULE_usePartition = 514, RULE_fieldIdentifier = 515, RULE_columnName = 516, 
		RULE_columnInternalRef = 517, RULE_columnInternalRefList = 518, RULE_columnRef = 519, 
		RULE_insertIdentifier = 520, RULE_indexName = 521, RULE_indexRef = 522, 
		RULE_tableWild = 523, RULE_schemaName = 524, RULE_schemaRef = 525, RULE_procedureName = 526, 
		RULE_procedureRef = 527, RULE_functionName = 528, RULE_functionRef = 529, 
		RULE_triggerName = 530, RULE_triggerRef = 531, RULE_viewName = 532, RULE_viewRef = 533, 
		RULE_tablespaceName = 534, RULE_tablespaceRef = 535, RULE_logfileGroupName = 536, 
		RULE_logfileGroupRef = 537, RULE_eventName = 538, RULE_eventRef = 539, 
		RULE_udfName = 540, RULE_serverName = 541, RULE_serverRef = 542, RULE_engineRef = 543, 
		RULE_tableName = 544, RULE_filterTableRef = 545, RULE_tableRefWithWildcard = 546, 
		RULE_tableRef = 547, RULE_tableRefList = 548, RULE_tableAliasRefList = 549, 
		RULE_parameterName = 550, RULE_labelIdentifier = 551, RULE_labelRef = 552, 
		RULE_roleIdentifier = 553, RULE_roleRef = 554, RULE_pluginRef = 555, RULE_componentRef = 556, 
		RULE_resourceGroupRef = 557, RULE_windowName = 558, RULE_pureIdentifier = 559, 
		RULE_identifier = 560, RULE_identifierList = 561, RULE_identifierListWithParentheses = 562, 
		RULE_qualifiedIdentifier = 563, RULE_simpleIdentifier = 564, RULE_dotIdentifier = 565, 
		RULE_ulong_number = 566, RULE_real_ulong_number = 567, RULE_ulonglong_number = 568, 
		RULE_real_ulonglong_number = 569, RULE_literal = 570, RULE_signedLiteral = 571, 
		RULE_stringList = 572, RULE_textStringLiteral = 573, RULE_textString = 574, 
		RULE_textStringHash = 575, RULE_textLiteral = 576, RULE_textStringNoLinebreak = 577, 
		RULE_textStringLiteralList = 578, RULE_numLiteral = 579, RULE_boolLiteral = 580, 
		RULE_nullLiteral = 581, RULE_temporalLiteral = 582, RULE_floatOptions = 583, 
		RULE_standardFloatOptions = 584, RULE_precision = 585, RULE_textOrIdentifier = 586, 
		RULE_lValueIdentifier = 587, RULE_roleIdentifierOrText = 588, RULE_sizeNumber = 589, 
		RULE_parentheses = 590, RULE_equal = 591, RULE_optionType = 592, RULE_varIdentType = 593, 
		RULE_setVarIdentType = 594, RULE_identifierKeyword = 595, RULE_identifierKeywordsAmbiguous1RolesAndLabels = 596, 
		RULE_identifierKeywordsAmbiguous2Labels = 597, RULE_labelKeyword = 598, 
		RULE_identifierKeywordsAmbiguous3Roles = 599, RULE_identifierKeywordsUnambiguous = 600, 
		RULE_roleKeyword = 601, RULE_lValueKeyword = 602, RULE_identifierKeywordsAmbiguous4SystemVariables = 603, 
		RULE_roleOrIdentifierKeyword = 604, RULE_roleOrLabelKeyword = 605;
	private static String[] makeRuleNames() {
		return new String[] {
			"sql_script", "query", "simpleStatement", "alterStatement", "alterDatabase", 
			"alterEvent", "alterLogfileGroup", "alterLogfileGroupOptions", "alterLogfileGroupOption", 
			"alterServer", "alterTable", "alterTableActions", "alterCommandList", 
			"alterCommandsModifierList", "standaloneAlterCommands", "alterPartition", 
			"alterList", "alterCommandsModifier", "alterListItem", "place", "restrict", 
			"alterOrderList", "alterAlgorithmOption", "alterLockOption", "indexLockAndAlgorithm", 
			"withValidation", "removePartitioning", "allOrPartitionNameList", "reorgPartitionRule", 
			"alterTablespace", "alterUndoTablespace", "undoTableSpaceOptions", "undoTableSpaceOption", 
			"alterTablespaceOptions", "alterTablespaceOption", "changeTablespaceOption", 
			"alterView", "viewTail", "viewSelect", "viewCheckOption", "createStatement", 
			"createDatabase", "createDatabaseOption", "createTable", "tableElementList", 
			"tableElement", "duplicateAsQueryExpression", "queryExpressionOrParens", 
			"createRoutine", "createProcedure", "createFunction", "createUdf", "routineCreateOption", 
			"routineAlterOptions", "routineOption", "createIndex", "indexNameAndType", 
			"createIndexTarget", "createLogfileGroup", "logfileGroupOptions", "logfileGroupOption", 
			"createServer", "serverOptions", "serverOption", "createTablespace", 
			"createUndoTablespace", "tsDataFileName", "tsDataFile", "tablespaceOptions", 
			"tablespaceOption", "tsOptionInitialSize", "tsOptionUndoRedoBufferSize", 
			"tsOptionAutoextendSize", "tsOptionMaxSize", "tsOptionExtentSize", "tsOptionNodegroup", 
			"tsOptionEngine", "tsOptionWait", "tsOptionComment", "tsOptionFileblockSize", 
			"tsOptionEncryption", "createView", "viewReplaceOrAlgorithm", "viewAlgorithm", 
			"viewSuid", "createTrigger", "triggerFollowsPrecedesClause", "createEvent", 
			"createRole", "createSpatialReference", "srsAttribute", "dropStatement", 
			"dropDatabase", "dropEvent", "dropFunction", "dropProcedure", "dropIndex", 
			"dropLogfileGroup", "dropLogfileGroupOption", "dropServer", "dropTable", 
			"dropTableSpace", "dropTrigger", "dropView", "dropRole", "dropSpatialReference", 
			"dropUndoTablespace", "renameTableStatement", "renamePair", "truncateTableStatement", 
			"importStatement", "callStatement", "deleteStatement", "partitionDelete", 
			"deleteStatementOption", "doStatement", "handlerStatement", "handlerReadOrScan", 
			"insertStatement", "insertLockOption", "insertFromConstructor", "fields", 
			"insertValues", "insertQueryExpression", "valueList", "values", "valuesReference", 
			"insertUpdateList", "loadStatement", "dataOrXml", "xmlRowsIdentifiedBy", 
			"loadDataFileTail", "loadDataFileTargetList", "fieldOrVariableList", 
			"replaceStatement", "selectStatement", "selectStatementWithInto", "queryExpression", 
			"queryExpressionBody", "queryExpressionParens", "querySpecification", 
			"subquery", "querySpecOption", "limitClause", "simpleLimitClause", "limitOptions", 
			"limitOption", "intoClause", "procedureAnalyseClause", "havingClause", 
			"windowClause", "windowDefinition", "windowSpec", "windowSpecDetails", 
			"windowFrameClause", "windowFrameUnits", "windowFrameExtent", "windowFrameStart", 
			"windowFrameBetween", "windowFrameBound", "windowFrameExclusion", "withClause", 
			"commonTableExpression", "groupByClause", "olapOption", "orderClause", 
			"direction", "fromClause", "tableReferenceList", "selectOption", "lockingClause", 
			"lockStrengh", "lockedRowAction", "selectItemList", "selectItem", "selectAlias", 
			"whereClause", "tableReference", "escapedTableReference", "joinedTable", 
			"naturalJoinType", "innerJoinType", "outerJoinType", "tableFactor", "singleTable", 
			"singleTableParens", "derivedTable", "tableReferenceListParens", "tableFunction", 
			"columnsClause", "jtColumn", "onEmptyOrError", "onEmpty", "onError", 
			"jtOnResponse", "unionOption", "tableAlias", "indexHintList", "indexHint", 
			"indexHintType", "keyOrIndex", "constraintKeyType", "indexHintClause", 
			"indexList", "indexListElement", "updateStatement", "transactionOrLockingStatement", 
			"transactionStatement", "beginWork", "transactionCharacteristic", "savepointStatement", 
			"lockStatement", "lockItem", "lockOption", "xaStatement", "xaConvert", 
			"xid", "replicationStatement", "resetOption", "masterResetOptions", "replicationLoad", 
			"changeMaster", "changeMasterOptions", "masterOption", "privilegeCheckDef", 
			"masterTlsCiphersuitesDef", "masterFileDef", "serverIdList", "changeReplication", 
			"filterDefinition", "filterDbList", "filterTableList", "filterStringList", 
			"filterWildDbTableString", "filterDbPairList", "slave", "slaveUntilOptions", 
			"slaveConnectionOptions", "slaveThreadOptions", "slaveThreadOption", 
			"groupReplication", "preparedStatement", "executeStatement", "executeVarList", 
			"cloneStatement", "dataDirSSL", "ssl", "accountManagementStatement", 
			"alterUser", "alterUserTail", "userFunction", "createUser", "createUserTail", 
			"defaultRoleClause", "requireClause", "connectOptions", "accountLockPasswordExpireOptions", 
			"dropUser", "grant", "grantTargetList", "grantOptions", "exceptRoleList", 
			"withRoles", "grantAs", "versionedRequireClause", "renameUser", "revoke", 
			"onTypeTo", "aclType", "roleOrPrivilegesList", "roleOrPrivilege", "grantIdentifier", 
			"requireList", "requireListElement", "grantOption", "setRole", "roleList", 
			"role", "tableAdministrationStatement", "histogram", "checkOption", "repairType", 
			"installUninstallStatment", "setStatement", "startOptionValueList", "transactionCharacteristics", 
			"transactionAccessMode", "isolationLevel", "optionValueListContinued", 
			"optionValueNoOptionType", "optionValue", "setSystemVariable", "startOptionValueListFollowingOptionType", 
			"optionValueFollowingOptionType", "setExprOrDefault", "showStatement", 
			"showCommandType", "nonBlocking", "fromOrIn", "inDb", "profileType", 
			"otherAdministrativeStatement", "keyCacheListOrParts", "keyCacheList", 
			"assignToKeycache", "assignToKeycachePartition", "cacheKeyList", "keyUsageElement", 
			"keyUsageList", "flushOption", "logType", "flushTables", "flushTablesOptions", 
			"preloadTail", "preloadList", "preloadKeys", "adminPartition", "resourceGroupManagement", 
			"createResourceGroup", "resourceGroupVcpuList", "vcpuNumOrRange", "resourceGroupPriority", 
			"resourceGroupEnableDisable", "alterResourceGroup", "setResourceGroup", 
			"threadIdList", "dropResourceGroup", "utilityStatement", "describeCommand", 
			"explainCommand", "explainableStatement", "helpCommand", "useCommand", 
			"restartServer", "expr", "boolPri", "compOp", "predicate", "predicateOperations", 
			"bitExpr", "simpleExpr", "arrayCast", "jsonOperator", "sumExpr", "groupingOperation", 
			"windowFunctionCall", "windowingClause", "leadLagInfo", "nullTreatment", 
			"jsonFunction", "inSumExpr", "identListArg", "identList", "fulltextOptions", 
			"runtimeFunctionCall", "geometryFunction", "timeFunctionParameters", 
			"fractionalPrecision", "weightStringLevels", "weightStringLevelListItem", 
			"dateTimeTtype", "trimFunction", "substringFunction", "functionCall", 
			"udfExprList", "udfExpr", "variable", "userVariable", "systemVariable", 
			"internalVariableName", "whenExpression", "thenExpression", "elseExpression", 
			"castType", "exprList", "charset", "notRule", "not2Rule", "interval", 
			"intervalTimeStamp", "exprListWithParentheses", "exprWithParentheses", 
			"simpleExprWithParentheses", "orderList", "orderExpression", "groupList", 
			"groupingExpression", "channel", "compoundStatement", "returnStatement", 
			"ifStatement", "ifBody", "thenStatement", "compoundStatementList", "caseStatement", 
			"elseStatement", "labeledBlock", "unlabeledBlock", "label", "beginEndBlock", 
			"labeledControl", "unlabeledControl", "loopBlock", "whileDoBlock", "repeatUntilBlock", 
			"spDeclarations", "spDeclaration", "variableDeclaration", "conditionDeclaration", 
			"spCondition", "sqlstate", "handlerDeclaration", "handlerCondition", 
			"cursorDeclaration", "iterateStatement", "leaveStatement", "getDiagnostics", 
			"signalAllowedExpr", "statementInformationItem", "conditionInformationItem", 
			"signalInformationItemName", "signalStatement", "resignalStatement", 
			"signalInformationItem", "cursorOpen", "cursorClose", "cursorFetch", 
			"schedule", "columnDefinition", "checkOrReferences", "checkConstraint", 
			"constraintEnforcement", "tableConstraintDef", "constraintName", "fieldDefinition", 
			"columnAttribute", "columnFormat", "storageMedia", "gcolAttribute", "references", 
			"deleteOption", "keyList", "keyPart", "keyListWithExpression", "keyPartOrExpression", 
			"keyListVariants", "indexType", "indexOption", "commonIndexOption", "visibility", 
			"indexTypeClause", "fulltextIndexOption", "spatialIndexOption", "dataTypeDefinition", 
			"dataType", "nchar", "realType", "fieldLength", "fieldOptions", "charsetWithOptBinary", 
			"ascii", "unicode", "wsNumCodepoints", "typeDatetimePrecision", "charsetName", 
			"collationName", "createTableOptions", "createTableOptionsSpaceSeparated", 
			"createTableOption", "ternaryOption", "defaultCollation", "defaultEncryption", 
			"defaultCharset", "partitionClause", "partitionTypeDef", "subPartitions", 
			"partitionKeyAlgorithm", "partitionDefinitions", "partitionDefinition", 
			"partitionValuesIn", "partitionOption", "subpartitionDefinition", "partitionValueItemListParen", 
			"partitionValueItem", "definerClause", "ifExists", "ifNotExists", "procedureParameter", 
			"functionParameter", "collate", "typeWithOptCollate", "schemaIdentifierPair", 
			"viewRefList", "updateList", "updateElement", "charsetClause", "fieldsClause", 
			"fieldTerm", "linesClause", "lineTerm", "userList", "createUserList", 
			"alterUserList", "createUserEntry", "alterUserEntry", "retainCurrentPassword", 
			"discardOldPassword", "replacePassword", "userIdentifierOrText", "user", 
			"likeClause", "likeOrWhere", "onlineOption", "noWriteToBinLog", "usePartition", 
			"fieldIdentifier", "columnName", "columnInternalRef", "columnInternalRefList", 
			"columnRef", "insertIdentifier", "indexName", "indexRef", "tableWild", 
			"schemaName", "schemaRef", "procedureName", "procedureRef", "functionName", 
			"functionRef", "triggerName", "triggerRef", "viewName", "viewRef", "tablespaceName", 
			"tablespaceRef", "logfileGroupName", "logfileGroupRef", "eventName", 
			"eventRef", "udfName", "serverName", "serverRef", "engineRef", "tableName", 
			"filterTableRef", "tableRefWithWildcard", "tableRef", "tableRefList", 
			"tableAliasRefList", "parameterName", "labelIdentifier", "labelRef", 
			"roleIdentifier", "roleRef", "pluginRef", "componentRef", "resourceGroupRef", 
			"windowName", "pureIdentifier", "identifier", "identifierList", "identifierListWithParentheses", 
			"qualifiedIdentifier", "simpleIdentifier", "dotIdentifier", "ulong_number", 
			"real_ulong_number", "ulonglong_number", "real_ulonglong_number", "literal", 
			"signedLiteral", "stringList", "textStringLiteral", "textString", "textStringHash", 
			"textLiteral", "textStringNoLinebreak", "textStringLiteralList", "numLiteral", 
			"boolLiteral", "nullLiteral", "temporalLiteral", "floatOptions", "standardFloatOptions", 
			"precision", "textOrIdentifier", "lValueIdentifier", "roleIdentifierOrText", 
			"sizeNumber", "parentheses", "equal", "optionType", "varIdentType", "setVarIdentType", 
			"identifierKeyword", "identifierKeywordsAmbiguous1RolesAndLabels", "identifierKeywordsAmbiguous2Labels", 
			"labelKeyword", "identifierKeywordsAmbiguous3Roles", "identifierKeywordsUnambiguous", 
			"roleKeyword", "lValueKeyword", "identifierKeywordsAmbiguous4SystemVariables", 
			"roleOrIdentifierKeyword", "roleOrLabelKeyword"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, "'='", 
			"':='", "'<=>'", "'>='", "'>'", "'<='", "'<'", "'!='", "'+'", "'-'", 
			"'*'", "'/'", "'%'", "'!'", "'~'", "'<<'", "'>>'", "'&&'", "'&'", "'^'", 
			"'||'", "'|'", "'.'", "','", "';'", "':'", "'('", "')'", "'{'", "'}'", 
			"'_'", "'->'", "'->>'", "'@'", null, "'@@'", "'\\N'", "'?'", null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			"'<>'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "ACCOUNT_SYMBOL", "ASCII_SYMBOL", "ALWAYS_SYMBOL", "BACKUP_SYMBOL", 
			"BEGIN_SYMBOL", "BYTE_SYMBOL", "CACHE_SYMBOL", "CHARSET_SYMBOL", "CHECKSUM_SYMBOL", 
			"CLOSE_SYMBOL", "COMMENT_SYMBOL", "COMMIT_SYMBOL", "CONTAINS_SYMBOL", 
			"DEALLOCATE_SYMBOL", "DO_SYMBOL", "END_SYMBOL", "EXECUTE_SYMBOL", "FLUSH_SYMBOL", 
			"FOLLOWS_SYMBOL", "FORMAT_SYMBOL", "GROUP_REPLICATION_SYMBOL", "HANDLER_SYMBOL", 
			"HELP_SYMBOL", "HOST_SYMBOL", "INSTALL_SYMBOL", "LANGUAGE_SYMBOL", "NO_SYMBOL", 
			"OPEN_SYMBOL", "OPTIONS_SYMBOL", "OWNER_SYMBOL", "PARSER_SYMBOL", "PARTITION_SYMBOL", 
			"PORT_SYMBOL", "PRECEDES_SYMBOL", "PREPARE_SYMBOL", "REMOVE_SYMBOL", 
			"REPAIR_SYMBOL", "RESET_SYMBOL", "RESTORE_SYMBOL", "ROLLBACK_SYMBOL", 
			"SAVEPOINT_SYMBOL", "SECURITY_SYMBOL", "SERVER_SYMBOL", "SIGNED_SYMBOL", 
			"SLAVE_SYMBOL", "SOCKET_SYMBOL", "SONAME_SYMBOL", "START_SYMBOL", "STOP_SYMBOL", 
			"TRUNCATE_SYMBOL", "UNICODE_SYMBOL", "UNINSTALL_SYMBOL", "UPGRADE_SYMBOL", 
			"WRAPPER_SYMBOL", "XA_SYMBOL", "SHUTDOWN_SYMBOL", "ACTION_SYMBOL", "ADDDATE_SYMBOL", 
			"AFTER_SYMBOL", "AGAINST_SYMBOL", "AGGREGATE_SYMBOL", "ALGORITHM_SYMBOL", 
			"ANALYZE_SYMBOL", "ANY_SYMBOL", "AT_SYMBOL", "AUTHORS_SYMBOL", "AUTO_INCREMENT_SYMBOL", 
			"AUTOEXTEND_SIZE_SYMBOL", "AVG_ROW_LENGTH_SYMBOL", "AVG_SYMBOL", "BINLOG_SYMBOL", 
			"BIT_SYMBOL", "BLOCK_SYMBOL", "BOOL_SYMBOL", "BOOLEAN_SYMBOL", "BTREE_SYMBOL", 
			"CASCADED_SYMBOL", "CATALOG_NAME_SYMBOL", "CHAIN_SYMBOL", "CHANGED_SYMBOL", 
			"CHANNEL_SYMBOL", "CIPHER_SYMBOL", "CLIENT_SYMBOL", "CLASS_ORIGIN_SYMBOL", 
			"COALESCE_SYMBOL", "CODE_SYMBOL", "COLLATION_SYMBOL", "COLUMN_NAME_SYMBOL", 
			"COLUMN_FORMAT_SYMBOL", "COLUMNS_SYMBOL", "COMMITTED_SYMBOL", "COMPACT_SYMBOL", 
			"COMPLETION_SYMBOL", "COMPRESSED_SYMBOL", "COMPRESSION_SYMBOL", "ENCRYPTION_SYMBOL", 
			"CONCURRENT_SYMBOL", "CONNECTION_SYMBOL", "CONSISTENT_SYMBOL", "CONSTRAINT_CATALOG_SYMBOL", 
			"CONSTRAINT_SCHEMA_SYMBOL", "CONSTRAINT_NAME_SYMBOL", "CONTEXT_SYMBOL", 
			"CONTRIBUTORS_SYMBOL", "CPU_SYMBOL", "CUBE_SYMBOL", "CURRENT_SYMBOL", 
			"CURSOR_NAME_SYMBOL", "DATA_SYMBOL", "DATAFILE_SYMBOL", "DATETIME_SYMBOL", 
			"DATE_SYMBOL", "DAY_SYMBOL", "DEFAULT_AUTH_SYMBOL", "DEFINER_SYMBOL", 
			"DELAY_KEY_WRITE_SYMBOL", "DES_KEY_FILE_SYMBOL", "DIAGNOSTICS_SYMBOL", 
			"DIRECTORY_SYMBOL", "DISABLE_SYMBOL", "DISCARD_SYMBOL", "DISK_SYMBOL", 
			"DUMPFILE_SYMBOL", "DUPLICATE_SYMBOL", "DYNAMIC_SYMBOL", "ENDS_SYMBOL", 
			"ENUM_SYMBOL", "ENGINE_SYMBOL", "ENGINES_SYMBOL", "ERROR_SYMBOL", "ERRORS_SYMBOL", 
			"ESCAPE_SYMBOL", "EVENT_SYMBOL", "EVENTS_SYMBOL", "EVERY_SYMBOL", "EXPANSION_SYMBOL", 
			"EXPORT_SYMBOL", "EXTENDED_SYMBOL", "EXTENT_SIZE_SYMBOL", "FAULTS_SYMBOL", 
			"FAST_SYMBOL", "FOUND_SYMBOL", "ENABLE_SYMBOL", "FULL_SYMBOL", "FILE_SYMBOL", 
			"FILE_BLOCK_SIZE_SYMBOL", "FILTER_SYMBOL", "FIRST_SYMBOL", "FIXED_SYMBOL", 
			"GENERAL_SYMBOL", "GEOMETRY_SYMBOL", "GEOMETRYCOLLECTION_SYMBOL", "GET_FORMAT_SYMBOL", 
			"GRANTS_SYMBOL", "GLOBAL_SYMBOL", "HASH_SYMBOL", "HOSTS_SYMBOL", "HOUR_SYMBOL", 
			"IDENTIFIED_SYMBOL", "IGNORE_SERVER_IDS_SYMBOL", "INVOKER_SYMBOL", "IMPORT_SYMBOL", 
			"INDEXES_SYMBOL", "INITIAL_SIZE_SYMBOL", "INSTANCE_SYMBOL", "INNODB_SYMBOL", 
			"IO_SYMBOL", "IPC_SYMBOL", "ISOLATION_SYMBOL", "ISSUER_SYMBOL", "INSERT_METHOD_SYMBOL", 
			"JSON_SYMBOL", "KEY_BLOCK_SIZE_SYMBOL", "LAST_SYMBOL", "LEAVES_SYMBOL", 
			"LESS_SYMBOL", "LEVEL_SYMBOL", "LINESTRING_SYMBOL", "LIST_SYMBOL", "LOCAL_SYMBOL", 
			"LOCKS_SYMBOL", "LOGFILE_SYMBOL", "LOGS_SYMBOL", "MAX_ROWS_SYMBOL", "MASTER_SYMBOL", 
			"MASTER_HEARTBEAT_PERIOD_SYMBOL", "MASTER_HOST_SYMBOL", "MASTER_PORT_SYMBOL", 
			"MASTER_LOG_FILE_SYMBOL", "MASTER_LOG_POS_SYMBOL", "MASTER_USER_SYMBOL", 
			"MASTER_PASSWORD_SYMBOL", "MASTER_SERVER_ID_SYMBOL", "MASTER_CONNECT_RETRY_SYMBOL", 
			"MASTER_RETRY_COUNT_SYMBOL", "MASTER_DELAY_SYMBOL", "MASTER_SSL_SYMBOL", 
			"MASTER_SSL_CA_SYMBOL", "MASTER_SSL_CAPATH_SYMBOL", "MASTER_TLS_VERSION_SYMBOL", 
			"MASTER_SSL_CERT_SYMBOL", "MASTER_SSL_CIPHER_SYMBOL", "MASTER_SSL_CRL_SYMBOL", 
			"MASTER_SSL_CRLPATH_SYMBOL", "MASTER_SSL_KEY_SYMBOL", "MASTER_AUTO_POSITION_SYMBOL", 
			"MAX_CONNECTIONS_PER_HOUR_SYMBOL", "MAX_QUERIES_PER_HOUR_SYMBOL", "MAX_STATEMENT_TIME_SYMBOL", 
			"MAX_SIZE_SYMBOL", "MAX_UPDATES_PER_HOUR_SYMBOL", "MAX_USER_CONNECTIONS_SYMBOL", 
			"MEDIUM_SYMBOL", "MEMORY_SYMBOL", "MERGE_SYMBOL", "MESSAGE_TEXT_SYMBOL", 
			"MICROSECOND_SYMBOL", "MIGRATE_SYMBOL", "MINUTE_SYMBOL", "MIN_ROWS_SYMBOL", 
			"MODIFY_SYMBOL", "MODE_SYMBOL", "MONTH_SYMBOL", "MULTILINESTRING_SYMBOL", 
			"MULTIPOINT_SYMBOL", "MULTIPOLYGON_SYMBOL", "MUTEX_SYMBOL", "MYSQL_ERRNO_SYMBOL", 
			"NAME_SYMBOL", "NAMES_SYMBOL", "NATIONAL_SYMBOL", "NCHAR_SYMBOL", "NDBCLUSTER_SYMBOL", 
			"NEVER_SYMBOL", "NEXT_SYMBOL", "NEW_SYMBOL", "NO_WAIT_SYMBOL", "NODEGROUP_SYMBOL", 
			"NONE_SYMBOL", "NUMBER_SYMBOL", "NVARCHAR_SYMBOL", "OFFSET_SYMBOL", "OLD_PASSWORD_SYMBOL", 
			"ONE_SHOT_SYMBOL", "ONE_SYMBOL", "PACK_KEYS_SYMBOL", "PAGE_SYMBOL", "PARTIAL_SYMBOL", 
			"PARTITIONING_SYMBOL", "PARTITIONS_SYMBOL", "PASSWORD_SYMBOL", "PHASE_SYMBOL", 
			"PLUGIN_DIR_SYMBOL", "PLUGIN_SYMBOL", "PLUGINS_SYMBOL", "POINT_SYMBOL", 
			"POLYGON_SYMBOL", "PRESERVE_SYMBOL", "PREV_SYMBOL", "PRIVILEGES_SYMBOL", 
			"PROCESS_SYMBOL", "PROCESSLIST_SYMBOL", "PROFILE_SYMBOL", "PROFILES_SYMBOL", 
			"PROXY_SYMBOL", "QUARTER_SYMBOL", "QUERY_SYMBOL", "QUICK_SYMBOL", "READ_ONLY_SYMBOL", 
			"REBUILD_SYMBOL", "RECOVER_SYMBOL", "REDO_BUFFER_SIZE_SYMBOL", "REDOFILE_SYMBOL", 
			"REDUNDANT_SYMBOL", "RELAY_SYMBOL", "RELAYLOG_SYMBOL", "RELAY_LOG_FILE_SYMBOL", 
			"RELAY_LOG_POS_SYMBOL", "RELAY_THREAD_SYMBOL", "RELOAD_SYMBOL", "REORGANIZE_SYMBOL", 
			"REPEATABLE_SYMBOL", "REPLICATION_SYMBOL", "REPLICATE_DO_DB_SYMBOL", 
			"REPLICATE_IGNORE_DB_SYMBOL", "REPLICATE_DO_TABLE_SYMBOL", "REPLICATE_IGNORE_TABLE_SYMBOL", 
			"REPLICATE_WILD_DO_TABLE_SYMBOL", "REPLICATE_WILD_IGNORE_TABLE_SYMBOL", 
			"REPLICATE_REWRITE_DB_SYMBOL", "RESUME_SYMBOL", "RETURNED_SQLSTATE_SYMBOL", 
			"RETURNS_SYMBOL", "REVERSE_SYMBOL", "ROLLUP_SYMBOL", "ROTATE_SYMBOL", 
			"ROUTINE_SYMBOL", "ROWS_SYMBOL", "ROW_COUNT_SYMBOL", "ROW_FORMAT_SYMBOL", 
			"ROW_SYMBOL", "RTREE_SYMBOL", "SCHEDULE_SYMBOL", "SCHEMA_NAME_SYMBOL", 
			"SECOND_SYMBOL", "SERIAL_SYMBOL", "SERIALIZABLE_SYMBOL", "SESSION_SYMBOL", 
			"SIMPLE_SYMBOL", "SHARE_SYMBOL", "SLOW_SYMBOL", "SNAPSHOT_SYMBOL", "SOUNDS_SYMBOL", 
			"SOURCE_SYMBOL", "SQL_AFTER_GTIDS_SYMBOL", "SQL_AFTER_MTS_GAPS_SYMBOL", 
			"SQL_BEFORE_GTIDS_SYMBOL", "SQL_CACHE_SYMBOL", "SQL_BUFFER_RESULT_SYMBOL", 
			"SQL_NO_CACHE_SYMBOL", "SQL_THREAD_SYMBOL", "STACKED_SYMBOL", "STARTS_SYMBOL", 
			"STATS_AUTO_RECALC_SYMBOL", "STATS_PERSISTENT_SYMBOL", "STATS_SAMPLE_PAGES_SYMBOL", 
			"STATUS_SYMBOL", "STORAGE_SYMBOL", "STRING_SYMBOL", "SUBCLASS_ORIGIN_SYMBOL", 
			"SUBDATE_SYMBOL", "SUBJECT_SYMBOL", "SUBPARTITION_SYMBOL", "SUBPARTITIONS_SYMBOL", 
			"SUPER_SYMBOL", "SUSPEND_SYMBOL", "SWAPS_SYMBOL", "SWITCHES_SYMBOL", 
			"TABLE_NAME_SYMBOL", "TABLES_SYMBOL", "TABLE_CHECKSUM_SYMBOL", "TABLESPACE_SYMBOL", 
			"TEMPORARY_SYMBOL", "TEMPTABLE_SYMBOL", "TEXT_SYMBOL", "THAN_SYMBOL", 
			"TRANSACTION_SYMBOL", "TRIGGERS_SYMBOL", "TIMESTAMP_SYMBOL", "TIMESTAMP_ADD_SYMBOL", 
			"TIMESTAMP_DIFF_SYMBOL", "TIME_SYMBOL", "TYPES_SYMBOL", "TYPE_SYMBOL", 
			"UDF_RETURNS_SYMBOL", "FUNCTION_SYMBOL", "UNCOMMITTED_SYMBOL", "UNDEFINED_SYMBOL", 
			"UNDO_BUFFER_SIZE_SYMBOL", "UNDOFILE_SYMBOL", "UNKNOWN_SYMBOL", "UNTIL_SYMBOL", 
			"USER_RESOURCES_SYMBOL", "USER_SYMBOL", "USE_FRM_SYMBOL", "VARIABLES_SYMBOL", 
			"VIEW_SYMBOL", "VALUE_SYMBOL", "WARNINGS_SYMBOL", "WAIT_SYMBOL", "WEEK_SYMBOL", 
			"WORK_SYMBOL", "WEIGHT_STRING_SYMBOL", "X509_SYMBOL", "XID_SYMBOL", "XML_SYMBOL", 
			"YEAR_SYMBOL", "NOT2_SYMBOL", "CONCAT_PIPES_SYMBOL", "INT_NUMBER", "LONG_NUMBER", 
			"ULONGLONG_NUMBER", "EQUAL_OPERATOR", "ASSIGN_OPERATOR", "NULL_SAFE_EQUAL_OPERATOR", 
			"GREATER_OR_EQUAL_OPERATOR", "GREATER_THAN_OPERATOR", "LESS_OR_EQUAL_OPERATOR", 
			"LESS_THAN_OPERATOR", "NOT_EQUAL_OPERATOR", "PLUS_OPERATOR", "MINUS_OPERATOR", 
			"MULT_OPERATOR", "DIV_OPERATOR", "MOD_OPERATOR", "LOGICAL_NOT_OPERATOR", 
			"BITWISE_NOT_OPERATOR", "SHIFT_LEFT_OPERATOR", "SHIFT_RIGHT_OPERATOR", 
			"LOGICAL_AND_OPERATOR", "BITWISE_AND_OPERATOR", "BITWISE_XOR_OPERATOR", 
			"LOGICAL_OR_OPERATOR", "BITWISE_OR_OPERATOR", "DOT_SYMBOL", "COMMA_SYMBOL", 
			"SEMICOLON_SYMBOL", "COLON_SYMBOL", "OPEN_PAR_SYMBOL", "CLOSE_PAR_SYMBOL", 
			"OPEN_CURLY_SYMBOL", "CLOSE_CURLY_SYMBOL", "UNDERLINE_SYMBOL", "JSON_SEPARATOR_SYMBOL", 
			"JSON_UNQUOTED_SEPARATOR_SYMBOL", "AT_SIGN_SYMBOL", "AT_TEXT_SUFFIX", 
			"AT_AT_SIGN_SYMBOL", "NULL2_SYMBOL", "PARAM_MARKER", "HEX_NUMBER", "BIN_NUMBER", 
			"DECIMAL_NUMBER", "FLOAT_NUMBER", "ACCESSIBLE_SYMBOL", "ADD_SYMBOL", 
			"ALL_SYMBOL", "ALTER_SYMBOL", "ANALYSE_SYMBOL", "AND_SYMBOL", "AS_SYMBOL", 
			"ASC_SYMBOL", "ASENSITIVE_SYMBOL", "BEFORE_SYMBOL", "BETWEEN_SYMBOL", 
			"BIGINT_SYMBOL", "BINARY_SYMBOL", "BIN_NUM_SYMBOL", "BIT_AND_SYMBOL", 
			"BIT_OR_SYMBOL", "BIT_XOR_SYMBOL", "BLOB_SYMBOL", "BOTH_SYMBOL", "BY_SYMBOL", 
			"CALL_SYMBOL", "CASCADE_SYMBOL", "CASE_SYMBOL", "CAST_SYMBOL", "CHANGE_SYMBOL", 
			"CHAR_SYMBOL", "CHECK_SYMBOL", "COLLATE_SYMBOL", "COLUMN_SYMBOL", "CONDITION_SYMBOL", 
			"CONSTRAINT_SYMBOL", "CONTINUE_SYMBOL", "CONVERT_SYMBOL", "COUNT_SYMBOL", 
			"CREATE_SYMBOL", "CROSS_SYMBOL", "CURDATE_SYMBOL", "CURRENT_DATE_SYMBOL", 
			"CURRENT_TIME_SYMBOL", "CURRENT_USER_SYMBOL", "CURSOR_SYMBOL", "CURTIME_SYMBOL", 
			"DATABASE_SYMBOL", "DATABASES_SYMBOL", "DATE_ADD_SYMBOL", "DATE_SUB_SYMBOL", 
			"DAY_HOUR_SYMBOL", "DAY_MICROSECOND_SYMBOL", "DAY_MINUTE_SYMBOL", "DAY_SECOND_SYMBOL", 
			"DECIMAL_NUM_SYMBOL", "DECIMAL_SYMBOL", "DECLARE_SYMBOL", "DEFAULT_SYMBOL", 
			"DELAYED_SYMBOL", "DELETE_SYMBOL", "DESC_SYMBOL", "DESCRIBE_SYMBOL", 
			"DETERMINISTIC_SYMBOL", "DISTINCT_SYMBOL", "DIV_SYMBOL", "DOUBLE_SYMBOL", 
			"DROP_SYMBOL", "DUAL_SYMBOL", "EACH_SYMBOL", "ELSE_SYMBOL", "ELSEIF_SYMBOL", 
			"ENCLOSED_SYMBOL", "END_OF_INPUT_SYMBOL", "ESCAPED_SYMBOL", "EXCHANGE_SYMBOL", 
			"EXISTS_SYMBOL", "EXIT_SYMBOL", "EXPIRE_SYMBOL", "EXPLAIN_SYMBOL", "EXTRACT_SYMBOL", 
			"FALSE_SYMBOL", "FETCH_SYMBOL", "FLOAT_SYMBOL", "FORCE_SYMBOL", "FOREIGN_SYMBOL", 
			"FOR_SYMBOL", "FROM_SYMBOL", "FULLTEXT_SYMBOL", "GET_SYMBOL", "GENERATED_SYMBOL", 
			"GRANT_SYMBOL", "GROUP_SYMBOL", "GROUP_CONCAT_SYMBOL", "HAVING_SYMBOL", 
			"HIGH_PRIORITY_SYMBOL", "HOUR_MICROSECOND_SYMBOL", "HOUR_MINUTE_SYMBOL", 
			"HOUR_SECOND_SYMBOL", "IF_SYMBOL", "IGNORE_SYMBOL", "INDEX_SYMBOL", "INFILE_SYMBOL", 
			"INNER_SYMBOL", "INOUT_SYMBOL", "INSENSITIVE_SYMBOL", "INSERT_SYMBOL", 
			"INTERVAL_SYMBOL", "INTO_SYMBOL", "INT_SYMBOL", "IN_SYMBOL", "IO_AFTER_GTIDS_SYMBOL", 
			"IO_BEFORE_GTIDS_SYMBOL", "IS_SYMBOL", "ITERATE_SYMBOL", "JOIN_SYMBOL", 
			"KEYS_SYMBOL", "KEY_SYMBOL", "KILL_SYMBOL", "LEADING_SYMBOL", "LEAVE_SYMBOL", 
			"LEFT_SYMBOL", "LIKE_SYMBOL", "LIMIT_SYMBOL", "LINEAR_SYMBOL", "LINES_SYMBOL", 
			"LOAD_SYMBOL", "LOCATOR_SYMBOL", "LOCK_SYMBOL", "LONGBLOB_SYMBOL", "LONGTEXT_SYMBOL", 
			"LONG_NUM_SYMBOL", "LONG_SYMBOL", "LOOP_SYMBOL", "LOW_PRIORITY_SYMBOL", 
			"MASTER_BIND_SYMBOL", "MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL", "MATCH_SYMBOL", 
			"MAX_SYMBOL", "MAXVALUE_SYMBOL", "MEDIUMBLOB_SYMBOL", "MEDIUMINT_SYMBOL", 
			"MEDIUMTEXT_SYMBOL", "MID_SYMBOL", "MINUTE_MICROSECOND_SYMBOL", "MINUTE_SECOND_SYMBOL", 
			"MIN_SYMBOL", "MODIFIES_SYMBOL", "MOD_SYMBOL", "NATURAL_SYMBOL", "NCHAR_STRING_SYMBOL", 
			"NEG_SYMBOL", "NONBLOCKING_SYMBOL", "NOT_SYMBOL", "NOW_SYMBOL", "NO_WRITE_TO_BINLOG_SYMBOL", 
			"NULL_SYMBOL", "NUMERIC_SYMBOL", "OFFLINE_SYMBOL", "ON_SYMBOL", "ONLINE_SYMBOL", 
			"ONLY_SYMBOL", "OPTIMIZE_SYMBOL", "OPTIMIZER_COSTS_SYMBOL", "OPTION_SYMBOL", 
			"OPTIONALLY_SYMBOL", "ORDER_SYMBOL", "OR_SYMBOL", "OUTER_SYMBOL", "OUTFILE_SYMBOL", 
			"OUT_SYMBOL", "POSITION_SYMBOL", "PRECISION_SYMBOL", "PRIMARY_SYMBOL", 
			"PROCEDURE_SYMBOL", "PURGE_SYMBOL", "RANGE_SYMBOL", "READS_SYMBOL", "READ_SYMBOL", 
			"READ_WRITE_SYMBOL", "REAL_SYMBOL", "REFERENCES_SYMBOL", "REGEXP_SYMBOL", 
			"RELEASE_SYMBOL", "RENAME_SYMBOL", "REPEAT_SYMBOL", "REPLACE_SYMBOL", 
			"REQUIRE_SYMBOL", "RESIGNAL_SYMBOL", "RESTRICT_SYMBOL", "RETURN_SYMBOL", 
			"REVOKE_SYMBOL", "RIGHT_SYMBOL", "SECOND_MICROSECOND_SYMBOL", "SELECT_SYMBOL", 
			"SENSITIVE_SYMBOL", "SEPARATOR_SYMBOL", "SERVER_OPTIONS_SYMBOL", "SESSION_USER_SYMBOL", 
			"SET_SYMBOL", "SET_VAR_SYMBOL", "SHOW_SYMBOL", "SIGNAL_SYMBOL", "SMALLINT_SYMBOL", 
			"SPATIAL_SYMBOL", "SPECIFIC_SYMBOL", "SQLEXCEPTION_SYMBOL", "SQLSTATE_SYMBOL", 
			"SQLWARNING_SYMBOL", "SQL_BIG_RESULT_SYMBOL", "SQL_CALC_FOUND_ROWS_SYMBOL", 
			"SQL_SMALL_RESULT_SYMBOL", "SQL_SYMBOL", "SSL_SYMBOL", "STARTING_SYMBOL", 
			"STDDEV_SAMP_SYMBOL", "STDDEV_SYMBOL", "STDDEV_POP_SYMBOL", "STD_SYMBOL", 
			"STORED_SYMBOL", "STRAIGHT_JOIN_SYMBOL", "SUBSTR_SYMBOL", "SUBSTRING_SYMBOL", 
			"SUM_SYMBOL", "SYSDATE_SYMBOL", "SYSTEM_USER_SYMBOL", "TABLE_REF_PRIORITY_SYMBOL", 
			"TABLE_SYMBOL", "TERMINATED_SYMBOL", "THEN_SYMBOL", "TINYBLOB_SYMBOL", 
			"TINYINT_SYMBOL", "TINYTEXT_SYMBOL", "TO_SYMBOL", "TRAILING_SYMBOL", 
			"TRIGGER_SYMBOL", "TRIM_SYMBOL", "TRUE_SYMBOL", "UNDO_SYMBOL", "UNION_SYMBOL", 
			"UNIQUE_SYMBOL", "UNLOCK_SYMBOL", "UNSIGNED_SYMBOL", "UPDATE_SYMBOL", 
			"USAGE_SYMBOL", "USE_SYMBOL", "USING_SYMBOL", "UTC_DATE_SYMBOL", "UTC_TIMESTAMP_SYMBOL", 
			"UTC_TIME_SYMBOL", "VALIDATION_SYMBOL", "VALUES_SYMBOL", "VARBINARY_SYMBOL", 
			"VARCHAR_SYMBOL", "VARIANCE_SYMBOL", "VARYING_SYMBOL", "VAR_POP_SYMBOL", 
			"VAR_SAMP_SYMBOL", "VIRTUAL_SYMBOL", "WHEN_SYMBOL", "WHERE_SYMBOL", "WHILE_SYMBOL", 
			"WITH_SYMBOL", "WITHOUT_SYMBOL", "WRITE_SYMBOL", "XOR_SYMBOL", "YEAR_MONTH_SYMBOL", 
			"ZEROFILL_SYMBOL", "PERSIST_SYMBOL", "ROLE_SYMBOL", "ADMIN_SYMBOL", "INVISIBLE_SYMBOL", 
			"VISIBLE_SYMBOL", "EXCEPT_SYMBOL", "COMPONENT_SYMBOL", "RECURSIVE_SYMBOL", 
			"JSON_OBJECTAGG_SYMBOL", "JSON_ARRAYAGG_SYMBOL", "OF_SYMBOL", "SKIP_SYMBOL", 
			"LOCKED_SYMBOL", "NOWAIT_SYMBOL", "GROUPING_SYMBOL", "PERSIST_ONLY_SYMBOL", 
			"HISTOGRAM_SYMBOL", "BUCKETS_SYMBOL", "REMOTE_SYMBOL", "CLONE_SYMBOL", 
			"CUME_DIST_SYMBOL", "DENSE_RANK_SYMBOL", "EXCLUDE_SYMBOL", "FIRST_VALUE_SYMBOL", 
			"FOLLOWING_SYMBOL", "GROUPS_SYMBOL", "LAG_SYMBOL", "LAST_VALUE_SYMBOL", 
			"LEAD_SYMBOL", "NTH_VALUE_SYMBOL", "NTILE_SYMBOL", "NULLS_SYMBOL", "OTHERS_SYMBOL", 
			"OVER_SYMBOL", "PERCENT_RANK_SYMBOL", "PRECEDING_SYMBOL", "RANK_SYMBOL", 
			"RESPECT_SYMBOL", "ROW_NUMBER_SYMBOL", "TIES_SYMBOL", "UNBOUNDED_SYMBOL", 
			"WINDOW_SYMBOL", "EMPTY_SYMBOL", "JSON_TABLE_SYMBOL", "NESTED_SYMBOL", 
			"ORDINALITY_SYMBOL", "PATH_SYMBOL", "HISTORY_SYMBOL", "REUSE_SYMBOL", 
			"SRID_SYMBOL", "THREAD_PRIORITY_SYMBOL", "RESOURCE_SYMBOL", "SYSTEM_SYMBOL", 
			"VCPU_SYMBOL", "MASTER_PUBLIC_KEY_PATH_SYMBOL", "GET_MASTER_PUBLIC_KEY_SYMBOL", 
			"RESTART_SYMBOL", "DEFINITION_SYMBOL", "DESCRIPTION_SYMBOL", "ORGANIZATION_SYMBOL", 
			"REFERENCE_SYMBOL", "OPTIONAL_SYMBOL", "SECONDARY_SYMBOL", "SECONDARY_ENGINE_SYMBOL", 
			"SECONDARY_LOAD_SYMBOL", "SECONDARY_UNLOAD_SYMBOL", "ACTIVE_SYMBOL", 
			"INACTIVE_SYMBOL", "LATERAL_SYMBOL", "RETAIN_SYMBOL", "OLD_SYMBOL", "NETWORK_NAMESPACE_SYMBOL", 
			"ENFORCED_SYMBOL", "ARRAY_SYMBOL", "OJ_SYMBOL", "MEMBER_SYMBOL", "RANDOM_SYMBOL", 
			"MASTER_COMPRESSION_ALGORITHM_SYMBOL", "MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL", 
			"PRIVILEGE_CHECKS_USER_SYMBOL", "MASTER_TLS_CIPHERSUITES_SYMBOL", "WHITESPACE", 
			"INVALID_INPUT", "UNDERSCORE_CHARSET", "IDENTIFIER", "NCHAR_TEXT", "BACK_TICK_QUOTED_ID", 
			"DOUBLE_QUOTED_TEXT", "SINGLE_QUOTED_TEXT", "VERSION_COMMENT_START", 
			"MYSQL_COMMENT_START", "VERSION_COMMENT_END", "BLOCK_COMMENT", "POUND_COMMENT", 
			"DASHDASH_COMMENT", "NOT_EQUAL2_OPERATOR"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "MultiQueryMySQLParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public MultiQueryMySQLParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class Sql_scriptContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(MultiQueryMySQLParser.EOF, 0); }
		public List<QueryContext> query() {
			return getRuleContexts(QueryContext.class);
		}
		public QueryContext query(int i) {
			return getRuleContext(QueryContext.class,i);
		}
		public Sql_scriptContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_script; }
	}

	public final Sql_scriptContext sql_script() throws RecognitionException {
		Sql_scriptContext _localctx = new Sql_scriptContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_sql_script);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1215);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,0,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1212);
					query();
					}
					} 
				}
				setState(1217);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,0,_ctx);
			}
			setState(1218);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryContext extends ParserRuleContext {
		public SimpleStatementContext simpleStatement() {
			return getRuleContext(SimpleStatementContext.class,0);
		}
		public BeginWorkContext beginWork() {
			return getRuleContext(BeginWorkContext.class,0);
		}
		public TerminalNode SEMICOLON_SYMBOL() { return getToken(MultiQueryMySQLParser.SEMICOLON_SYMBOL, 0); }
		public QueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query; }
	}

	public final QueryContext query() throws RecognitionException {
		QueryContext _localctx = new QueryContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_query);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1222);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1,_ctx) ) {
			case 1:
				{
				setState(1220);
				simpleStatement();
				}
				break;
			case 2:
				{
				setState(1221);
				beginWork();
				}
				break;
			}
			setState(1225);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				setState(1224);
				match(SEMICOLON_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleStatementContext extends ParserRuleContext {
		public AlterStatementContext alterStatement() {
			return getRuleContext(AlterStatementContext.class,0);
		}
		public CreateStatementContext createStatement() {
			return getRuleContext(CreateStatementContext.class,0);
		}
		public DropStatementContext dropStatement() {
			return getRuleContext(DropStatementContext.class,0);
		}
		public RenameTableStatementContext renameTableStatement() {
			return getRuleContext(RenameTableStatementContext.class,0);
		}
		public TruncateTableStatementContext truncateTableStatement() {
			return getRuleContext(TruncateTableStatementContext.class,0);
		}
		public ImportStatementContext importStatement() {
			return getRuleContext(ImportStatementContext.class,0);
		}
		public CallStatementContext callStatement() {
			return getRuleContext(CallStatementContext.class,0);
		}
		public DeleteStatementContext deleteStatement() {
			return getRuleContext(DeleteStatementContext.class,0);
		}
		public DoStatementContext doStatement() {
			return getRuleContext(DoStatementContext.class,0);
		}
		public HandlerStatementContext handlerStatement() {
			return getRuleContext(HandlerStatementContext.class,0);
		}
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public LoadStatementContext loadStatement() {
			return getRuleContext(LoadStatementContext.class,0);
		}
		public ReplaceStatementContext replaceStatement() {
			return getRuleContext(ReplaceStatementContext.class,0);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public UpdateStatementContext updateStatement() {
			return getRuleContext(UpdateStatementContext.class,0);
		}
		public TransactionOrLockingStatementContext transactionOrLockingStatement() {
			return getRuleContext(TransactionOrLockingStatementContext.class,0);
		}
		public ReplicationStatementContext replicationStatement() {
			return getRuleContext(ReplicationStatementContext.class,0);
		}
		public PreparedStatementContext preparedStatement() {
			return getRuleContext(PreparedStatementContext.class,0);
		}
		public CloneStatementContext cloneStatement() {
			return getRuleContext(CloneStatementContext.class,0);
		}
		public AccountManagementStatementContext accountManagementStatement() {
			return getRuleContext(AccountManagementStatementContext.class,0);
		}
		public TableAdministrationStatementContext tableAdministrationStatement() {
			return getRuleContext(TableAdministrationStatementContext.class,0);
		}
		public InstallUninstallStatmentContext installUninstallStatment() {
			return getRuleContext(InstallUninstallStatmentContext.class,0);
		}
		public SetStatementContext setStatement() {
			return getRuleContext(SetStatementContext.class,0);
		}
		public ShowStatementContext showStatement() {
			return getRuleContext(ShowStatementContext.class,0);
		}
		public ResourceGroupManagementContext resourceGroupManagement() {
			return getRuleContext(ResourceGroupManagementContext.class,0);
		}
		public OtherAdministrativeStatementContext otherAdministrativeStatement() {
			return getRuleContext(OtherAdministrativeStatementContext.class,0);
		}
		public UtilityStatementContext utilityStatement() {
			return getRuleContext(UtilityStatementContext.class,0);
		}
		public GetDiagnosticsContext getDiagnostics() {
			return getRuleContext(GetDiagnosticsContext.class,0);
		}
		public SignalStatementContext signalStatement() {
			return getRuleContext(SignalStatementContext.class,0);
		}
		public ResignalStatementContext resignalStatement() {
			return getRuleContext(ResignalStatementContext.class,0);
		}
		public SimpleStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleStatement; }
	}

	public final SimpleStatementContext simpleStatement() throws RecognitionException {
		SimpleStatementContext _localctx = new SimpleStatementContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_simpleStatement);
		try {
			setState(1261);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1227);
				alterStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1228);
				createStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1229);
				dropStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1230);
				renameTableStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1231);
				truncateTableStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1232);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(1233);
				importStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1234);
				callStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1235);
				deleteStatement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1236);
				doStatement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1237);
				handlerStatement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1238);
				insertStatement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1239);
				loadStatement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1240);
				replaceStatement();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1241);
				selectStatement();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1242);
				updateStatement();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1243);
				transactionOrLockingStatement();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1244);
				replicationStatement();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1245);
				preparedStatement();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1246);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(1247);
				cloneStatement();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1248);
				accountManagementStatement();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1249);
				tableAdministrationStatement();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(1250);
				installUninstallStatment();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(1251);
				setStatement();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(1252);
				showStatement();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(1253);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(1254);
				resourceGroupManagement();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(1255);
				otherAdministrativeStatement();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(1256);
				utilityStatement();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(1257);
				if (!(serverVersion >= 50604)) throw new FailedPredicateException(this, "serverVersion >= 50604");
				setState(1258);
				getDiagnostics();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(1259);
				signalStatement();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(1260);
				resignalStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterStatementContext extends ParserRuleContext {
		public TerminalNode ALTER_SYMBOL() { return getToken(MultiQueryMySQLParser.ALTER_SYMBOL, 0); }
		public AlterTableContext alterTable() {
			return getRuleContext(AlterTableContext.class,0);
		}
		public AlterDatabaseContext alterDatabase() {
			return getRuleContext(AlterDatabaseContext.class,0);
		}
		public TerminalNode PROCEDURE_SYMBOL() { return getToken(MultiQueryMySQLParser.PROCEDURE_SYMBOL, 0); }
		public ProcedureRefContext procedureRef() {
			return getRuleContext(ProcedureRefContext.class,0);
		}
		public TerminalNode FUNCTION_SYMBOL() { return getToken(MultiQueryMySQLParser.FUNCTION_SYMBOL, 0); }
		public FunctionRefContext functionRef() {
			return getRuleContext(FunctionRefContext.class,0);
		}
		public AlterViewContext alterView() {
			return getRuleContext(AlterViewContext.class,0);
		}
		public AlterEventContext alterEvent() {
			return getRuleContext(AlterEventContext.class,0);
		}
		public AlterTablespaceContext alterTablespace() {
			return getRuleContext(AlterTablespaceContext.class,0);
		}
		public AlterUndoTablespaceContext alterUndoTablespace() {
			return getRuleContext(AlterUndoTablespaceContext.class,0);
		}
		public AlterLogfileGroupContext alterLogfileGroup() {
			return getRuleContext(AlterLogfileGroupContext.class,0);
		}
		public AlterServerContext alterServer() {
			return getRuleContext(AlterServerContext.class,0);
		}
		public TerminalNode INSTANCE_SYMBOL() { return getToken(MultiQueryMySQLParser.INSTANCE_SYMBOL, 0); }
		public TerminalNode ROTATE_SYMBOL() { return getToken(MultiQueryMySQLParser.ROTATE_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public TerminalNode MASTER_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_SYMBOL, 0); }
		public TerminalNode KEY_SYMBOL() { return getToken(MultiQueryMySQLParser.KEY_SYMBOL, 0); }
		public RoutineAlterOptionsContext routineAlterOptions() {
			return getRuleContext(RoutineAlterOptionsContext.class,0);
		}
		public AlterStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStatement; }
	}

	public final AlterStatementContext alterStatement() throws RecognitionException {
		AlterStatementContext _localctx = new AlterStatementContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_alterStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1263);
			match(ALTER_SYMBOL);
			setState(1290);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				setState(1264);
				alterTable();
				}
				break;
			case 2:
				{
				setState(1265);
				alterDatabase();
				}
				break;
			case 3:
				{
				setState(1266);
				match(PROCEDURE_SYMBOL);
				setState(1267);
				procedureRef();
				setState(1269);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,4,_ctx) ) {
				case 1:
					{
					setState(1268);
					routineAlterOptions();
					}
					break;
				}
				}
				break;
			case 4:
				{
				setState(1271);
				match(FUNCTION_SYMBOL);
				setState(1272);
				functionRef();
				setState(1274);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,5,_ctx) ) {
				case 1:
					{
					setState(1273);
					routineAlterOptions();
					}
					break;
				}
				}
				break;
			case 5:
				{
				setState(1276);
				alterView();
				}
				break;
			case 6:
				{
				setState(1277);
				alterEvent();
				}
				break;
			case 7:
				{
				setState(1278);
				alterTablespace();
				}
				break;
			case 8:
				{
				setState(1279);
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				setState(1280);
				alterUndoTablespace();
				}
				break;
			case 9:
				{
				setState(1281);
				alterLogfileGroup();
				}
				break;
			case 10:
				{
				setState(1282);
				alterServer();
				}
				break;
			case 11:
				{
				setState(1283);
				if (!(serverVersion >= 50713)) throw new FailedPredicateException(this, "serverVersion >= 50713");
				setState(1284);
				match(INSTANCE_SYMBOL);
				setState(1285);
				match(ROTATE_SYMBOL);
				setState(1286);
				textOrIdentifier();
				setState(1287);
				match(MASTER_SYMBOL);
				setState(1288);
				match(KEY_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDatabaseContext extends ParserRuleContext {
		public TerminalNode DATABASE_SYMBOL() { return getToken(MultiQueryMySQLParser.DATABASE_SYMBOL, 0); }
		public SchemaRefContext schemaRef() {
			return getRuleContext(SchemaRefContext.class,0);
		}
		public TerminalNode UPGRADE_SYMBOL() { return getToken(MultiQueryMySQLParser.UPGRADE_SYMBOL, 0); }
		public TerminalNode DATA_SYMBOL() { return getToken(MultiQueryMySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode DIRECTORY_SYMBOL() { return getToken(MultiQueryMySQLParser.DIRECTORY_SYMBOL, 0); }
		public TerminalNode NAME_SYMBOL() { return getToken(MultiQueryMySQLParser.NAME_SYMBOL, 0); }
		public List<CreateDatabaseOptionContext> createDatabaseOption() {
			return getRuleContexts(CreateDatabaseOptionContext.class);
		}
		public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return getRuleContext(CreateDatabaseOptionContext.class,i);
		}
		public AlterDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDatabase; }
	}

	public final AlterDatabaseContext alterDatabase() throws RecognitionException {
		AlterDatabaseContext _localctx = new AlterDatabaseContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_alterDatabase);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1292);
			match(DATABASE_SYMBOL);
			setState(1293);
			schemaRef();
			setState(1304);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,8,_ctx) ) {
			case 1:
				{
				setState(1295); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(1294);
						createDatabaseOption();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1297); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,7,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				{
				setState(1299);
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				setState(1300);
				match(UPGRADE_SYMBOL);
				setState(1301);
				match(DATA_SYMBOL);
				setState(1302);
				match(DIRECTORY_SYMBOL);
				setState(1303);
				match(NAME_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterEventContext extends ParserRuleContext {
		public TerminalNode EVENT_SYMBOL() { return getToken(MultiQueryMySQLParser.EVENT_SYMBOL, 0); }
		public EventRefContext eventRef() {
			return getRuleContext(EventRefContext.class,0);
		}
		public DefinerClauseContext definerClause() {
			return getRuleContext(DefinerClauseContext.class,0);
		}
		public List<TerminalNode> ON_SYMBOL() { return getTokens(MultiQueryMySQLParser.ON_SYMBOL); }
		public TerminalNode ON_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.ON_SYMBOL, i);
		}
		public TerminalNode SCHEDULE_SYMBOL() { return getToken(MultiQueryMySQLParser.SCHEDULE_SYMBOL, 0); }
		public ScheduleContext schedule() {
			return getRuleContext(ScheduleContext.class,0);
		}
		public TerminalNode COMPLETION_SYMBOL() { return getToken(MultiQueryMySQLParser.COMPLETION_SYMBOL, 0); }
		public TerminalNode PRESERVE_SYMBOL() { return getToken(MultiQueryMySQLParser.PRESERVE_SYMBOL, 0); }
		public TerminalNode RENAME_SYMBOL() { return getToken(MultiQueryMySQLParser.RENAME_SYMBOL, 0); }
		public TerminalNode TO_SYMBOL() { return getToken(MultiQueryMySQLParser.TO_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode ENABLE_SYMBOL() { return getToken(MultiQueryMySQLParser.ENABLE_SYMBOL, 0); }
		public TerminalNode DISABLE_SYMBOL() { return getToken(MultiQueryMySQLParser.DISABLE_SYMBOL, 0); }
		public TerminalNode COMMENT_SYMBOL() { return getToken(MultiQueryMySQLParser.COMMENT_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode DO_SYMBOL() { return getToken(MultiQueryMySQLParser.DO_SYMBOL, 0); }
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public TerminalNode NOT_SYMBOL() { return getToken(MultiQueryMySQLParser.NOT_SYMBOL, 0); }
		public TerminalNode SLAVE_SYMBOL() { return getToken(MultiQueryMySQLParser.SLAVE_SYMBOL, 0); }
		public AlterEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterEvent; }
	}

	public final AlterEventContext alterEvent() throws RecognitionException {
		AlterEventContext _localctx = new AlterEventContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_alterEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1307);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				setState(1306);
				definerClause();
				}
			}

			setState(1309);
			match(EVENT_SYMBOL);
			setState(1310);
			eventRef();
			setState(1314);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {
			case 1:
				{
				setState(1311);
				match(ON_SYMBOL);
				setState(1312);
				match(SCHEDULE_SYMBOL);
				setState(1313);
				schedule();
				}
				break;
			}
			setState(1322);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,12,_ctx) ) {
			case 1:
				{
				setState(1316);
				match(ON_SYMBOL);
				setState(1317);
				match(COMPLETION_SYMBOL);
				setState(1319);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT_SYMBOL) {
					{
					setState(1318);
					match(NOT_SYMBOL);
					}
				}

				setState(1321);
				match(PRESERVE_SYMBOL);
				}
				break;
			}
			setState(1327);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,13,_ctx) ) {
			case 1:
				{
				setState(1324);
				match(RENAME_SYMBOL);
				setState(1325);
				match(TO_SYMBOL);
				setState(1326);
				identifier();
				}
				break;
			}
			setState(1335);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,15,_ctx) ) {
			case 1:
				{
				setState(1329);
				match(ENABLE_SYMBOL);
				}
				break;
			case 2:
				{
				setState(1330);
				match(DISABLE_SYMBOL);
				setState(1333);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,14,_ctx) ) {
				case 1:
					{
					setState(1331);
					match(ON_SYMBOL);
					setState(1332);
					match(SLAVE_SYMBOL);
					}
					break;
				}
				}
				break;
			}
			setState(1339);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
			case 1:
				{
				setState(1337);
				match(COMMENT_SYMBOL);
				setState(1338);
				textLiteral();
				}
				break;
			}
			setState(1343);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,17,_ctx) ) {
			case 1:
				{
				setState(1341);
				match(DO_SYMBOL);
				setState(1342);
				compoundStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterLogfileGroupContext extends ParserRuleContext {
		public TerminalNode LOGFILE_SYMBOL() { return getToken(MultiQueryMySQLParser.LOGFILE_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MultiQueryMySQLParser.GROUP_SYMBOL, 0); }
		public LogfileGroupRefContext logfileGroupRef() {
			return getRuleContext(LogfileGroupRefContext.class,0);
		}
		public TerminalNode ADD_SYMBOL() { return getToken(MultiQueryMySQLParser.ADD_SYMBOL, 0); }
		public TerminalNode UNDOFILE_SYMBOL() { return getToken(MultiQueryMySQLParser.UNDOFILE_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public AlterLogfileGroupOptionsContext alterLogfileGroupOptions() {
			return getRuleContext(AlterLogfileGroupOptionsContext.class,0);
		}
		public AlterLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterLogfileGroup; }
	}

	public final AlterLogfileGroupContext alterLogfileGroup() throws RecognitionException {
		AlterLogfileGroupContext _localctx = new AlterLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_alterLogfileGroup);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1345);
			match(LOGFILE_SYMBOL);
			setState(1346);
			match(GROUP_SYMBOL);
			setState(1347);
			logfileGroupRef();
			setState(1348);
			match(ADD_SYMBOL);
			setState(1349);
			match(UNDOFILE_SYMBOL);
			setState(1350);
			textLiteral();
			setState(1352);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,18,_ctx) ) {
			case 1:
				{
				setState(1351);
				alterLogfileGroupOptions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterLogfileGroupOptionsContext extends ParserRuleContext {
		public List<AlterLogfileGroupOptionContext> alterLogfileGroupOption() {
			return getRuleContexts(AlterLogfileGroupOptionContext.class);
		}
		public AlterLogfileGroupOptionContext alterLogfileGroupOption(int i) {
			return getRuleContext(AlterLogfileGroupOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public AlterLogfileGroupOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterLogfileGroupOptions; }
	}

	public final AlterLogfileGroupOptionsContext alterLogfileGroupOptions() throws RecognitionException {
		AlterLogfileGroupOptionsContext _localctx = new AlterLogfileGroupOptionsContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_alterLogfileGroupOptions);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1354);
			alterLogfileGroupOption();
			setState(1361);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,20,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1356);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA_SYMBOL) {
						{
						setState(1355);
						match(COMMA_SYMBOL);
						}
					}

					setState(1358);
					alterLogfileGroupOption();
					}
					} 
				}
				setState(1363);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,20,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterLogfileGroupOptionContext extends ParserRuleContext {
		public TsOptionInitialSizeContext tsOptionInitialSize() {
			return getRuleContext(TsOptionInitialSizeContext.class,0);
		}
		public TsOptionEngineContext tsOptionEngine() {
			return getRuleContext(TsOptionEngineContext.class,0);
		}
		public TsOptionWaitContext tsOptionWait() {
			return getRuleContext(TsOptionWaitContext.class,0);
		}
		public AlterLogfileGroupOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterLogfileGroupOption; }
	}

	public final AlterLogfileGroupOptionContext alterLogfileGroupOption() throws RecognitionException {
		AlterLogfileGroupOptionContext _localctx = new AlterLogfileGroupOptionContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_alterLogfileGroupOption);
		try {
			setState(1367);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INITIAL_SIZE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1364);
				tsOptionInitialSize();
				}
				break;
			case ENGINE_SYMBOL:
			case STORAGE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1365);
				tsOptionEngine();
				}
				break;
			case NO_WAIT_SYMBOL:
			case WAIT_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(1366);
				tsOptionWait();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterServerContext extends ParserRuleContext {
		public TerminalNode SERVER_SYMBOL() { return getToken(MultiQueryMySQLParser.SERVER_SYMBOL, 0); }
		public ServerRefContext serverRef() {
			return getRuleContext(ServerRefContext.class,0);
		}
		public ServerOptionsContext serverOptions() {
			return getRuleContext(ServerOptionsContext.class,0);
		}
		public AlterServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterServer; }
	}

	public final AlterServerContext alterServer() throws RecognitionException {
		AlterServerContext _localctx = new AlterServerContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_alterServer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1369);
			match(SERVER_SYMBOL);
			setState(1370);
			serverRef();
			setState(1371);
			serverOptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableContext extends ParserRuleContext {
		public TerminalNode TABLE_SYMBOL() { return getToken(MultiQueryMySQLParser.TABLE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public OnlineOptionContext onlineOption() {
			return getRuleContext(OnlineOptionContext.class,0);
		}
		public TerminalNode IGNORE_SYMBOL() { return getToken(MultiQueryMySQLParser.IGNORE_SYMBOL, 0); }
		public AlterTableActionsContext alterTableActions() {
			return getRuleContext(AlterTableActionsContext.class,0);
		}
		public AlterTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTable; }
	}

	public final AlterTableContext alterTable() throws RecognitionException {
		AlterTableContext _localctx = new AlterTableContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_alterTable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1374);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,22,_ctx) ) {
			case 1:
				{
				setState(1373);
				onlineOption();
				}
				break;
			}
			setState(1378);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,23,_ctx) ) {
			case 1:
				{
				setState(1376);
				if (!(serverVersion < 50700)) throw new FailedPredicateException(this, "serverVersion < 50700");
				setState(1377);
				match(IGNORE_SYMBOL);
				}
				break;
			}
			setState(1380);
			match(TABLE_SYMBOL);
			setState(1381);
			tableRef();
			setState(1383);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,24,_ctx) ) {
			case 1:
				{
				setState(1382);
				alterTableActions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableActionsContext extends ParserRuleContext {
		public AlterCommandListContext alterCommandList() {
			return getRuleContext(AlterCommandListContext.class,0);
		}
		public PartitionClauseContext partitionClause() {
			return getRuleContext(PartitionClauseContext.class,0);
		}
		public RemovePartitioningContext removePartitioning() {
			return getRuleContext(RemovePartitioningContext.class,0);
		}
		public StandaloneAlterCommandsContext standaloneAlterCommands() {
			return getRuleContext(StandaloneAlterCommandsContext.class,0);
		}
		public AlterCommandsModifierListContext alterCommandsModifierList() {
			return getRuleContext(AlterCommandsModifierListContext.class,0);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, 0); }
		public AlterTableActionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableActions; }
	}

	public final AlterTableActionsContext alterTableActions() throws RecognitionException {
		AlterTableActionsContext _localctx = new AlterTableActionsContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_alterTableActions);
		try {
			setState(1398);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,27,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1385);
				alterCommandList();
				setState(1388);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,25,_ctx) ) {
				case 1:
					{
					setState(1386);
					partitionClause();
					}
					break;
				case 2:
					{
					setState(1387);
					removePartitioning();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1390);
				partitionClause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1391);
				removePartitioning();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1395);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,26,_ctx) ) {
				case 1:
					{
					setState(1392);
					alterCommandsModifierList();
					setState(1393);
					match(COMMA_SYMBOL);
					}
					break;
				}
				setState(1397);
				standaloneAlterCommands();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterCommandListContext extends ParserRuleContext {
		public AlterCommandsModifierListContext alterCommandsModifierList() {
			return getRuleContext(AlterCommandsModifierListContext.class,0);
		}
		public AlterListContext alterList() {
			return getRuleContext(AlterListContext.class,0);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, 0); }
		public AlterCommandListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterCommandList; }
	}

	public final AlterCommandListContext alterCommandList() throws RecognitionException {
		AlterCommandListContext _localctx = new AlterCommandListContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_alterCommandList);
		try {
			setState(1407);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,29,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1400);
				alterCommandsModifierList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1404);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,28,_ctx) ) {
				case 1:
					{
					setState(1401);
					alterCommandsModifierList();
					setState(1402);
					match(COMMA_SYMBOL);
					}
					break;
				}
				setState(1406);
				alterList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterCommandsModifierListContext extends ParserRuleContext {
		public List<AlterCommandsModifierContext> alterCommandsModifier() {
			return getRuleContexts(AlterCommandsModifierContext.class);
		}
		public AlterCommandsModifierContext alterCommandsModifier(int i) {
			return getRuleContext(AlterCommandsModifierContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public AlterCommandsModifierListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterCommandsModifierList; }
	}

	public final AlterCommandsModifierListContext alterCommandsModifierList() throws RecognitionException {
		AlterCommandsModifierListContext _localctx = new AlterCommandsModifierListContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_alterCommandsModifierList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1409);
			alterCommandsModifier();
			setState(1414);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,30,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1410);
					match(COMMA_SYMBOL);
					setState(1411);
					alterCommandsModifier();
					}
					} 
				}
				setState(1416);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,30,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StandaloneAlterCommandsContext extends ParserRuleContext {
		public TerminalNode DISCARD_SYMBOL() { return getToken(MultiQueryMySQLParser.DISCARD_SYMBOL, 0); }
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MultiQueryMySQLParser.TABLESPACE_SYMBOL, 0); }
		public TerminalNode IMPORT_SYMBOL() { return getToken(MultiQueryMySQLParser.IMPORT_SYMBOL, 0); }
		public AlterPartitionContext alterPartition() {
			return getRuleContext(AlterPartitionContext.class,0);
		}
		public TerminalNode SECONDARY_LOAD_SYMBOL() { return getToken(MultiQueryMySQLParser.SECONDARY_LOAD_SYMBOL, 0); }
		public TerminalNode SECONDARY_UNLOAD_SYMBOL() { return getToken(MultiQueryMySQLParser.SECONDARY_UNLOAD_SYMBOL, 0); }
		public StandaloneAlterCommandsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standaloneAlterCommands; }
	}

	public final StandaloneAlterCommandsContext standaloneAlterCommands() throws RecognitionException {
		StandaloneAlterCommandsContext _localctx = new StandaloneAlterCommandsContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_standaloneAlterCommands);
		int _la;
		try {
			setState(1424);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,31,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1417);
				match(DISCARD_SYMBOL);
				setState(1418);
				match(TABLESPACE_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1419);
				match(IMPORT_SYMBOL);
				setState(1420);
				match(TABLESPACE_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1421);
				alterPartition();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1422);
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				setState(1423);
				_la = _input.LA(1);
				if ( !(_la==SECONDARY_LOAD_SYMBOL || _la==SECONDARY_UNLOAD_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterPartitionContext extends ParserRuleContext {
		public TerminalNode ADD_SYMBOL() { return getToken(MultiQueryMySQLParser.ADD_SYMBOL, 0); }
		public TerminalNode PARTITION_SYMBOL() { return getToken(MultiQueryMySQLParser.PARTITION_SYMBOL, 0); }
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public TerminalNode PARTITIONS_SYMBOL() { return getToken(MultiQueryMySQLParser.PARTITIONS_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public List<NoWriteToBinLogContext> noWriteToBinLog() {
			return getRuleContexts(NoWriteToBinLogContext.class);
		}
		public NoWriteToBinLogContext noWriteToBinLog(int i) {
			return getRuleContext(NoWriteToBinLogContext.class,i);
		}
		public TerminalNode DROP_SYMBOL() { return getToken(MultiQueryMySQLParser.DROP_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode REBUILD_SYMBOL() { return getToken(MultiQueryMySQLParser.REBUILD_SYMBOL, 0); }
		public AllOrPartitionNameListContext allOrPartitionNameList() {
			return getRuleContext(AllOrPartitionNameListContext.class,0);
		}
		public TerminalNode OPTIMIZE_SYMBOL() { return getToken(MultiQueryMySQLParser.OPTIMIZE_SYMBOL, 0); }
		public TerminalNode ANALYZE_SYMBOL() { return getToken(MultiQueryMySQLParser.ANALYZE_SYMBOL, 0); }
		public TerminalNode CHECK_SYMBOL() { return getToken(MultiQueryMySQLParser.CHECK_SYMBOL, 0); }
		public List<CheckOptionContext> checkOption() {
			return getRuleContexts(CheckOptionContext.class);
		}
		public CheckOptionContext checkOption(int i) {
			return getRuleContext(CheckOptionContext.class,i);
		}
		public TerminalNode REPAIR_SYMBOL() { return getToken(MultiQueryMySQLParser.REPAIR_SYMBOL, 0); }
		public List<RepairTypeContext> repairType() {
			return getRuleContexts(RepairTypeContext.class);
		}
		public RepairTypeContext repairType(int i) {
			return getRuleContext(RepairTypeContext.class,i);
		}
		public TerminalNode COALESCE_SYMBOL() { return getToken(MultiQueryMySQLParser.COALESCE_SYMBOL, 0); }
		public TerminalNode TRUNCATE_SYMBOL() { return getToken(MultiQueryMySQLParser.TRUNCATE_SYMBOL, 0); }
		public ReorgPartitionRuleContext reorgPartitionRule() {
			return getRuleContext(ReorgPartitionRuleContext.class,0);
		}
		public TerminalNode REORGANIZE_SYMBOL() { return getToken(MultiQueryMySQLParser.REORGANIZE_SYMBOL, 0); }
		public TerminalNode INTO_SYMBOL() { return getToken(MultiQueryMySQLParser.INTO_SYMBOL, 0); }
		public TerminalNode EXCHANGE_SYMBOL() { return getToken(MultiQueryMySQLParser.EXCHANGE_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode WITH_SYMBOL() { return getToken(MultiQueryMySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode TABLE_SYMBOL() { return getToken(MultiQueryMySQLParser.TABLE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public WithValidationContext withValidation() {
			return getRuleContext(WithValidationContext.class,0);
		}
		public TerminalNode DISCARD_SYMBOL() { return getToken(MultiQueryMySQLParser.DISCARD_SYMBOL, 0); }
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MultiQueryMySQLParser.TABLESPACE_SYMBOL, 0); }
		public TerminalNode IMPORT_SYMBOL() { return getToken(MultiQueryMySQLParser.IMPORT_SYMBOL, 0); }
		public AlterPartitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterPartition; }
	}

	public final AlterPartitionContext alterPartition() throws RecognitionException {
		AlterPartitionContext _localctx = new AlterPartitionContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_alterPartition);
		int _la;
		try {
			int _alt;
			setState(1523);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,45,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1426);
				match(ADD_SYMBOL);
				setState(1427);
				match(PARTITION_SYMBOL);
				setState(1429);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					setState(1428);
					noWriteToBinLog();
					}
				}

				setState(1434);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPEN_PAR_SYMBOL:
					{
					setState(1431);
					partitionDefinitions();
					}
					break;
				case PARTITIONS_SYMBOL:
					{
					setState(1432);
					match(PARTITIONS_SYMBOL);
					setState(1433);
					real_ulong_number();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1436);
				match(DROP_SYMBOL);
				setState(1437);
				match(PARTITION_SYMBOL);
				setState(1438);
				identifierList();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1439);
				match(REBUILD_SYMBOL);
				setState(1440);
				match(PARTITION_SYMBOL);
				setState(1442);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,34,_ctx) ) {
				case 1:
					{
					setState(1441);
					noWriteToBinLog();
					}
					break;
				}
				setState(1444);
				allOrPartitionNameList();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1445);
				match(OPTIMIZE_SYMBOL);
				setState(1446);
				match(PARTITION_SYMBOL);
				setState(1448);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,35,_ctx) ) {
				case 1:
					{
					setState(1447);
					noWriteToBinLog();
					}
					break;
				}
				setState(1450);
				allOrPartitionNameList();
				setState(1452);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,36,_ctx) ) {
				case 1:
					{
					setState(1451);
					noWriteToBinLog();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1454);
				match(ANALYZE_SYMBOL);
				setState(1455);
				match(PARTITION_SYMBOL);
				setState(1457);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,37,_ctx) ) {
				case 1:
					{
					setState(1456);
					noWriteToBinLog();
					}
					break;
				}
				setState(1459);
				allOrPartitionNameList();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1460);
				match(CHECK_SYMBOL);
				setState(1461);
				match(PARTITION_SYMBOL);
				setState(1462);
				allOrPartitionNameList();
				setState(1466);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,38,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1463);
						checkOption();
						}
						} 
					}
					setState(1468);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,38,_ctx);
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1469);
				match(REPAIR_SYMBOL);
				setState(1470);
				match(PARTITION_SYMBOL);
				setState(1472);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,39,_ctx) ) {
				case 1:
					{
					setState(1471);
					noWriteToBinLog();
					}
					break;
				}
				setState(1474);
				allOrPartitionNameList();
				setState(1478);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,40,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1475);
						repairType();
						}
						} 
					}
					setState(1480);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,40,_ctx);
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1481);
				match(COALESCE_SYMBOL);
				setState(1482);
				match(PARTITION_SYMBOL);
				setState(1484);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					setState(1483);
					noWriteToBinLog();
					}
				}

				setState(1486);
				real_ulong_number();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1487);
				match(TRUNCATE_SYMBOL);
				setState(1488);
				match(PARTITION_SYMBOL);
				setState(1489);
				allOrPartitionNameList();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1490);
				reorgPartitionRule();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1491);
				match(REORGANIZE_SYMBOL);
				setState(1492);
				match(PARTITION_SYMBOL);
				setState(1494);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,42,_ctx) ) {
				case 1:
					{
					setState(1493);
					noWriteToBinLog();
					}
					break;
				}
				setState(1500);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,43,_ctx) ) {
				case 1:
					{
					setState(1496);
					identifierList();
					setState(1497);
					match(INTO_SYMBOL);
					setState(1498);
					partitionDefinitions();
					}
					break;
				}
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1502);
				match(EXCHANGE_SYMBOL);
				setState(1503);
				match(PARTITION_SYMBOL);
				setState(1504);
				identifier();
				setState(1505);
				match(WITH_SYMBOL);
				setState(1506);
				match(TABLE_SYMBOL);
				setState(1507);
				tableRef();
				setState(1509);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,44,_ctx) ) {
				case 1:
					{
					setState(1508);
					withValidation();
					}
					break;
				}
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1511);
				if (!(serverVersion >= 50704)) throw new FailedPredicateException(this, "serverVersion >= 50704");
				setState(1512);
				match(DISCARD_SYMBOL);
				setState(1513);
				match(PARTITION_SYMBOL);
				setState(1514);
				allOrPartitionNameList();
				setState(1515);
				match(TABLESPACE_SYMBOL);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1517);
				if (!(serverVersion >= 50704)) throw new FailedPredicateException(this, "serverVersion >= 50704");
				setState(1518);
				match(IMPORT_SYMBOL);
				setState(1519);
				match(PARTITION_SYMBOL);
				setState(1520);
				allOrPartitionNameList();
				setState(1521);
				match(TABLESPACE_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterListContext extends ParserRuleContext {
		public List<AlterListItemContext> alterListItem() {
			return getRuleContexts(AlterListItemContext.class);
		}
		public AlterListItemContext alterListItem(int i) {
			return getRuleContext(AlterListItemContext.class,i);
		}
		public List<CreateTableOptionsSpaceSeparatedContext> createTableOptionsSpaceSeparated() {
			return getRuleContexts(CreateTableOptionsSpaceSeparatedContext.class);
		}
		public CreateTableOptionsSpaceSeparatedContext createTableOptionsSpaceSeparated(int i) {
			return getRuleContext(CreateTableOptionsSpaceSeparatedContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public List<AlterCommandsModifierContext> alterCommandsModifier() {
			return getRuleContexts(AlterCommandsModifierContext.class);
		}
		public AlterCommandsModifierContext alterCommandsModifier(int i) {
			return getRuleContext(AlterCommandsModifierContext.class,i);
		}
		public AlterListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterList; }
	}

	public final AlterListContext alterList() throws RecognitionException {
		AlterListContext _localctx = new AlterListContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_alterList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1527);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,46,_ctx) ) {
			case 1:
				{
				setState(1525);
				alterListItem();
				}
				break;
			case 2:
				{
				setState(1526);
				createTableOptionsSpaceSeparated();
				}
				break;
			}
			setState(1537);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,48,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1529);
					match(COMMA_SYMBOL);
					setState(1533);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,47,_ctx) ) {
					case 1:
						{
						setState(1530);
						alterListItem();
						}
						break;
					case 2:
						{
						setState(1531);
						alterCommandsModifier();
						}
						break;
					case 3:
						{
						setState(1532);
						createTableOptionsSpaceSeparated();
						}
						break;
					}
					}
					} 
				}
				setState(1539);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,48,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterCommandsModifierContext extends ParserRuleContext {
		public AlterAlgorithmOptionContext alterAlgorithmOption() {
			return getRuleContext(AlterAlgorithmOptionContext.class,0);
		}
		public AlterLockOptionContext alterLockOption() {
			return getRuleContext(AlterLockOptionContext.class,0);
		}
		public WithValidationContext withValidation() {
			return getRuleContext(WithValidationContext.class,0);
		}
		public AlterCommandsModifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterCommandsModifier; }
	}

	public final AlterCommandsModifierContext alterCommandsModifier() throws RecognitionException {
		AlterCommandsModifierContext _localctx = new AlterCommandsModifierContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_alterCommandsModifier);
		try {
			setState(1543);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,49,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1540);
				alterAlgorithmOption();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1541);
				alterLockOption();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1542);
				withValidation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterListItemContext extends ParserRuleContext {
		public TerminalNode ADD_SYMBOL() { return getToken(MultiQueryMySQLParser.ADD_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public FieldDefinitionContext fieldDefinition() {
			return getRuleContext(FieldDefinitionContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TableElementListContext tableElementList() {
			return getRuleContext(TableElementListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode COLUMN_SYMBOL() { return getToken(MultiQueryMySQLParser.COLUMN_SYMBOL, 0); }
		public CheckOrReferencesContext checkOrReferences() {
			return getRuleContext(CheckOrReferencesContext.class,0);
		}
		public PlaceContext place() {
			return getRuleContext(PlaceContext.class,0);
		}
		public TableConstraintDefContext tableConstraintDef() {
			return getRuleContext(TableConstraintDefContext.class,0);
		}
		public TerminalNode CHANGE_SYMBOL() { return getToken(MultiQueryMySQLParser.CHANGE_SYMBOL, 0); }
		public ColumnInternalRefContext columnInternalRef() {
			return getRuleContext(ColumnInternalRefContext.class,0);
		}
		public TerminalNode MODIFY_SYMBOL() { return getToken(MultiQueryMySQLParser.MODIFY_SYMBOL, 0); }
		public TerminalNode DROP_SYMBOL() { return getToken(MultiQueryMySQLParser.DROP_SYMBOL, 0); }
		public TerminalNode FOREIGN_SYMBOL() { return getToken(MultiQueryMySQLParser.FOREIGN_SYMBOL, 0); }
		public TerminalNode KEY_SYMBOL() { return getToken(MultiQueryMySQLParser.KEY_SYMBOL, 0); }
		public TerminalNode PRIMARY_SYMBOL() { return getToken(MultiQueryMySQLParser.PRIMARY_SYMBOL, 0); }
		public KeyOrIndexContext keyOrIndex() {
			return getRuleContext(KeyOrIndexContext.class,0);
		}
		public IndexRefContext indexRef() {
			return getRuleContext(IndexRefContext.class,0);
		}
		public RestrictContext restrict() {
			return getRuleContext(RestrictContext.class,0);
		}
		public TerminalNode DISABLE_SYMBOL() { return getToken(MultiQueryMySQLParser.DISABLE_SYMBOL, 0); }
		public TerminalNode KEYS_SYMBOL() { return getToken(MultiQueryMySQLParser.KEYS_SYMBOL, 0); }
		public TerminalNode ENABLE_SYMBOL() { return getToken(MultiQueryMySQLParser.ENABLE_SYMBOL, 0); }
		public TerminalNode ALTER_SYMBOL() { return getToken(MultiQueryMySQLParser.ALTER_SYMBOL, 0); }
		public TerminalNode SET_SYMBOL() { return getToken(MultiQueryMySQLParser.SET_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
		public ExprWithParenthesesContext exprWithParentheses() {
			return getRuleContext(ExprWithParenthesesContext.class,0);
		}
		public SignedLiteralContext signedLiteral() {
			return getRuleContext(SignedLiteralContext.class,0);
		}
		public TerminalNode INDEX_SYMBOL() { return getToken(MultiQueryMySQLParser.INDEX_SYMBOL, 0); }
		public VisibilityContext visibility() {
			return getRuleContext(VisibilityContext.class,0);
		}
		public TerminalNode CHECK_SYMBOL() { return getToken(MultiQueryMySQLParser.CHECK_SYMBOL, 0); }
		public ConstraintEnforcementContext constraintEnforcement() {
			return getRuleContext(ConstraintEnforcementContext.class,0);
		}
		public TerminalNode RENAME_SYMBOL() { return getToken(MultiQueryMySQLParser.RENAME_SYMBOL, 0); }
		public TerminalNode TO_SYMBOL() { return getToken(MultiQueryMySQLParser.TO_SYMBOL, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode AS_SYMBOL() { return getToken(MultiQueryMySQLParser.AS_SYMBOL, 0); }
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public TerminalNode CONVERT_SYMBOL() { return getToken(MultiQueryMySQLParser.CONVERT_SYMBOL, 0); }
		public CharsetContext charset() {
			return getRuleContext(CharsetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public CollateContext collate() {
			return getRuleContext(CollateContext.class,0);
		}
		public TerminalNode FORCE_SYMBOL() { return getToken(MultiQueryMySQLParser.FORCE_SYMBOL, 0); }
		public TerminalNode ORDER_SYMBOL() { return getToken(MultiQueryMySQLParser.ORDER_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MultiQueryMySQLParser.BY_SYMBOL, 0); }
		public AlterOrderListContext alterOrderList() {
			return getRuleContext(AlterOrderListContext.class,0);
		}
		public TerminalNode UPGRADE_SYMBOL() { return getToken(MultiQueryMySQLParser.UPGRADE_SYMBOL, 0); }
		public TerminalNode PARTITIONING_SYMBOL() { return getToken(MultiQueryMySQLParser.PARTITIONING_SYMBOL, 0); }
		public AlterListItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterListItem; }
	}

	public final AlterListItemContext alterListItem() throws RecognitionException {
		AlterListItemContext _localctx = new AlterListItemContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_alterListItem);
		int _la;
		try {
			setState(1678);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,69,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1545);
				match(ADD_SYMBOL);
				setState(1547);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,50,_ctx) ) {
				case 1:
					{
					setState(1546);
					match(COLUMN_SYMBOL);
					}
					break;
				}
				setState(1561);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,53,_ctx) ) {
				case 1:
					{
					setState(1549);
					identifier();
					setState(1550);
					fieldDefinition();
					setState(1552);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,51,_ctx) ) {
					case 1:
						{
						setState(1551);
						checkOrReferences();
						}
						break;
					}
					setState(1555);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,52,_ctx) ) {
					case 1:
						{
						setState(1554);
						place();
						}
						break;
					}
					}
					break;
				case 2:
					{
					setState(1557);
					match(OPEN_PAR_SYMBOL);
					setState(1558);
					tableElementList();
					setState(1559);
					match(CLOSE_PAR_SYMBOL);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1563);
				match(ADD_SYMBOL);
				setState(1564);
				tableConstraintDef();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1565);
				match(CHANGE_SYMBOL);
				setState(1567);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,54,_ctx) ) {
				case 1:
					{
					setState(1566);
					match(COLUMN_SYMBOL);
					}
					break;
				}
				setState(1569);
				columnInternalRef();
				setState(1570);
				identifier();
				setState(1571);
				fieldDefinition();
				setState(1573);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,55,_ctx) ) {
				case 1:
					{
					setState(1572);
					place();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1575);
				match(MODIFY_SYMBOL);
				setState(1577);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,56,_ctx) ) {
				case 1:
					{
					setState(1576);
					match(COLUMN_SYMBOL);
					}
					break;
				}
				setState(1579);
				columnInternalRef();
				setState(1580);
				fieldDefinition();
				setState(1582);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,57,_ctx) ) {
				case 1:
					{
					setState(1581);
					place();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1584);
				match(DROP_SYMBOL);
				setState(1607);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,62,_ctx) ) {
				case 1:
					{
					setState(1586);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,58,_ctx) ) {
					case 1:
						{
						setState(1585);
						match(COLUMN_SYMBOL);
						}
						break;
					}
					setState(1588);
					columnInternalRef();
					setState(1590);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,59,_ctx) ) {
					case 1:
						{
						setState(1589);
						restrict();
						}
						break;
					}
					}
					break;
				case 2:
					{
					setState(1592);
					match(FOREIGN_SYMBOL);
					setState(1593);
					match(KEY_SYMBOL);
					setState(1600);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,61,_ctx) ) {
					case 1:
						{
						setState(1594);
						if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
						setState(1595);
						columnInternalRef();
						}
						break;
					case 2:
						{
						setState(1596);
						if (!(serverVersion < 50700)) throw new FailedPredicateException(this, "serverVersion < 50700");
						setState(1598);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,60,_ctx) ) {
						case 1:
							{
							setState(1597);
							columnInternalRef();
							}
							break;
						}
						}
						break;
					}
					}
					break;
				case 3:
					{
					setState(1602);
					match(PRIMARY_SYMBOL);
					setState(1603);
					match(KEY_SYMBOL);
					}
					break;
				case 4:
					{
					setState(1604);
					keyOrIndex();
					setState(1605);
					indexRef();
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1609);
				match(DISABLE_SYMBOL);
				setState(1610);
				match(KEYS_SYMBOL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1611);
				match(ENABLE_SYMBOL);
				setState(1612);
				match(KEYS_SYMBOL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1613);
				match(ALTER_SYMBOL);
				setState(1615);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,63,_ctx) ) {
				case 1:
					{
					setState(1614);
					match(COLUMN_SYMBOL);
					}
					break;
				}
				setState(1617);
				columnInternalRef();
				setState(1627);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SET_SYMBOL:
					{
					setState(1618);
					match(SET_SYMBOL);
					setState(1619);
					match(DEFAULT_SYMBOL);
					setState(1623);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,64,_ctx) ) {
					case 1:
						{
						setState(1620);
						if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
						setState(1621);
						exprWithParentheses();
						}
						break;
					case 2:
						{
						setState(1622);
						signedLiteral();
						}
						break;
					}
					}
					break;
				case DROP_SYMBOL:
					{
					setState(1625);
					match(DROP_SYMBOL);
					setState(1626);
					match(DEFAULT_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1629);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(1630);
				match(ALTER_SYMBOL);
				setState(1631);
				match(INDEX_SYMBOL);
				setState(1632);
				indexRef();
				setState(1633);
				visibility();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1635);
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				setState(1636);
				match(ALTER_SYMBOL);
				setState(1637);
				match(CHECK_SYMBOL);
				setState(1638);
				identifier();
				setState(1639);
				constraintEnforcement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1641);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(1642);
				match(RENAME_SYMBOL);
				setState(1643);
				match(COLUMN_SYMBOL);
				setState(1644);
				columnInternalRef();
				setState(1645);
				match(TO_SYMBOL);
				setState(1646);
				identifier();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1648);
				match(RENAME_SYMBOL);
				setState(1650);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,66,_ctx) ) {
				case 1:
					{
					setState(1649);
					_la = _input.LA(1);
					if ( !(_la==AS_SYMBOL || _la==TO_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(1652);
				tableName();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1653);
				if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
				setState(1654);
				match(RENAME_SYMBOL);
				setState(1655);
				keyOrIndex();
				setState(1656);
				indexRef();
				setState(1657);
				match(TO_SYMBOL);
				setState(1658);
				indexName();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1660);
				match(CONVERT_SYMBOL);
				setState(1661);
				match(TO_SYMBOL);
				setState(1662);
				charset();
				setState(1666);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,67,_ctx) ) {
				case 1:
					{
					setState(1663);
					if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
					setState(1664);
					match(DEFAULT_SYMBOL);
					}
					break;
				case 2:
					{
					setState(1665);
					charsetName();
					}
					break;
				}
				setState(1669);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,68,_ctx) ) {
				case 1:
					{
					setState(1668);
					collate();
					}
					break;
				}
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1671);
				match(FORCE_SYMBOL);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1672);
				match(ORDER_SYMBOL);
				setState(1673);
				match(BY_SYMBOL);
				setState(1674);
				alterOrderList();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1675);
				if (!(serverVersion >= 50708 && serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion >= 50708 && serverVersion < 80000");
				setState(1676);
				match(UPGRADE_SYMBOL);
				setState(1677);
				match(PARTITIONING_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PlaceContext extends ParserRuleContext {
		public TerminalNode AFTER_SYMBOL() { return getToken(MultiQueryMySQLParser.AFTER_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode FIRST_SYMBOL() { return getToken(MultiQueryMySQLParser.FIRST_SYMBOL, 0); }
		public PlaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_place; }
	}

	public final PlaceContext place() throws RecognitionException {
		PlaceContext _localctx = new PlaceContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_place);
		try {
			setState(1683);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AFTER_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1680);
				match(AFTER_SYMBOL);
				setState(1681);
				identifier();
				}
				break;
			case FIRST_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1682);
				match(FIRST_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RestrictContext extends ParserRuleContext {
		public TerminalNode RESTRICT_SYMBOL() { return getToken(MultiQueryMySQLParser.RESTRICT_SYMBOL, 0); }
		public TerminalNode CASCADE_SYMBOL() { return getToken(MultiQueryMySQLParser.CASCADE_SYMBOL, 0); }
		public RestrictContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_restrict; }
	}

	public final RestrictContext restrict() throws RecognitionException {
		RestrictContext _localctx = new RestrictContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_restrict);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1685);
			_la = _input.LA(1);
			if ( !(_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterOrderListContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<DirectionContext> direction() {
			return getRuleContexts(DirectionContext.class);
		}
		public DirectionContext direction(int i) {
			return getRuleContext(DirectionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public AlterOrderListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOrderList; }
	}

	public final AlterOrderListContext alterOrderList() throws RecognitionException {
		AlterOrderListContext _localctx = new AlterOrderListContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_alterOrderList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1687);
			identifier();
			setState(1689);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,71,_ctx) ) {
			case 1:
				{
				setState(1688);
				direction();
				}
				break;
			}
			setState(1698);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,73,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1691);
					match(COMMA_SYMBOL);
					setState(1692);
					identifier();
					setState(1694);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,72,_ctx) ) {
					case 1:
						{
						setState(1693);
						direction();
						}
						break;
					}
					}
					} 
				}
				setState(1700);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,73,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterAlgorithmOptionContext extends ParserRuleContext {
		public TerminalNode ALGORITHM_SYMBOL() { return getToken(MultiQueryMySQLParser.ALGORITHM_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
		public AlterAlgorithmOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterAlgorithmOption; }
	}

	public final AlterAlgorithmOptionContext alterAlgorithmOption() throws RecognitionException {
		AlterAlgorithmOptionContext _localctx = new AlterAlgorithmOptionContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_alterAlgorithmOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1701);
			match(ALGORITHM_SYMBOL);
			setState(1703);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,74,_ctx) ) {
			case 1:
				{
				setState(1702);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(1707);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,75,_ctx) ) {
			case 1:
				{
				setState(1705);
				match(DEFAULT_SYMBOL);
				}
				break;
			case 2:
				{
				setState(1706);
				identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterLockOptionContext extends ParserRuleContext {
		public TerminalNode LOCK_SYMBOL() { return getToken(MultiQueryMySQLParser.LOCK_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
		public AlterLockOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterLockOption; }
	}

	public final AlterLockOptionContext alterLockOption() throws RecognitionException {
		AlterLockOptionContext _localctx = new AlterLockOptionContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_alterLockOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1709);
			match(LOCK_SYMBOL);
			setState(1711);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,76,_ctx) ) {
			case 1:
				{
				setState(1710);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(1715);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,77,_ctx) ) {
			case 1:
				{
				setState(1713);
				match(DEFAULT_SYMBOL);
				}
				break;
			case 2:
				{
				setState(1714);
				identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexLockAndAlgorithmContext extends ParserRuleContext {
		public AlterAlgorithmOptionContext alterAlgorithmOption() {
			return getRuleContext(AlterAlgorithmOptionContext.class,0);
		}
		public AlterLockOptionContext alterLockOption() {
			return getRuleContext(AlterLockOptionContext.class,0);
		}
		public IndexLockAndAlgorithmContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexLockAndAlgorithm; }
	}

	public final IndexLockAndAlgorithmContext indexLockAndAlgorithm() throws RecognitionException {
		IndexLockAndAlgorithmContext _localctx = new IndexLockAndAlgorithmContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_indexLockAndAlgorithm);
		try {
			setState(1725);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALGORITHM_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1717);
				alterAlgorithmOption();
				setState(1719);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,78,_ctx) ) {
				case 1:
					{
					setState(1718);
					alterLockOption();
					}
					break;
				}
				}
				break;
			case LOCK_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1721);
				alterLockOption();
				setState(1723);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {
				case 1:
					{
					setState(1722);
					alterAlgorithmOption();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithValidationContext extends ParserRuleContext {
		public TerminalNode VALIDATION_SYMBOL() { return getToken(MultiQueryMySQLParser.VALIDATION_SYMBOL, 0); }
		public TerminalNode WITH_SYMBOL() { return getToken(MultiQueryMySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode WITHOUT_SYMBOL() { return getToken(MultiQueryMySQLParser.WITHOUT_SYMBOL, 0); }
		public WithValidationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withValidation; }
	}

	public final WithValidationContext withValidation() throws RecognitionException {
		WithValidationContext _localctx = new WithValidationContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_withValidation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1727);
			if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
			setState(1728);
			_la = _input.LA(1);
			if ( !(_la==WITH_SYMBOL || _la==WITHOUT_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1729);
			match(VALIDATION_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RemovePartitioningContext extends ParserRuleContext {
		public TerminalNode REMOVE_SYMBOL() { return getToken(MultiQueryMySQLParser.REMOVE_SYMBOL, 0); }
		public TerminalNode PARTITIONING_SYMBOL() { return getToken(MultiQueryMySQLParser.PARTITIONING_SYMBOL, 0); }
		public RemovePartitioningContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_removePartitioning; }
	}

	public final RemovePartitioningContext removePartitioning() throws RecognitionException {
		RemovePartitioningContext _localctx = new RemovePartitioningContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_removePartitioning);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1731);
			match(REMOVE_SYMBOL);
			setState(1732);
			match(PARTITIONING_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AllOrPartitionNameListContext extends ParserRuleContext {
		public TerminalNode ALL_SYMBOL() { return getToken(MultiQueryMySQLParser.ALL_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public AllOrPartitionNameListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_allOrPartitionNameList; }
	}

	public final AllOrPartitionNameListContext allOrPartitionNameList() throws RecognitionException {
		AllOrPartitionNameListContext _localctx = new AllOrPartitionNameListContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_allOrPartitionNameList);
		try {
			setState(1736);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,81,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1734);
				match(ALL_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1735);
				identifierList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReorgPartitionRuleContext extends ParserRuleContext {
		public TerminalNode REORGANIZE_SYMBOL() { return getToken(MultiQueryMySQLParser.REORGANIZE_SYMBOL, 0); }
		public TerminalNode PARTITION_SYMBOL() { return getToken(MultiQueryMySQLParser.PARTITION_SYMBOL, 0); }
		public NoWriteToBinLogContext noWriteToBinLog() {
			return getRuleContext(NoWriteToBinLogContext.class,0);
		}
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode INTO_SYMBOL() { return getToken(MultiQueryMySQLParser.INTO_SYMBOL, 0); }
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public ReorgPartitionRuleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reorgPartitionRule; }
	}

	public final ReorgPartitionRuleContext reorgPartitionRule() throws RecognitionException {
		ReorgPartitionRuleContext _localctx = new ReorgPartitionRuleContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_reorgPartitionRule);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1738);
			match(REORGANIZE_SYMBOL);
			setState(1739);
			match(PARTITION_SYMBOL);
			setState(1741);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,82,_ctx) ) {
			case 1:
				{
				setState(1740);
				noWriteToBinLog();
				}
				break;
			}
			setState(1747);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,83,_ctx) ) {
			case 1:
				{
				setState(1743);
				identifierList();
				setState(1744);
				match(INTO_SYMBOL);
				setState(1745);
				partitionDefinitions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTablespaceContext extends ParserRuleContext {
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MultiQueryMySQLParser.TABLESPACE_SYMBOL, 0); }
		public TablespaceRefContext tablespaceRef() {
			return getRuleContext(TablespaceRefContext.class,0);
		}
		public TerminalNode DATAFILE_SYMBOL() { return getToken(MultiQueryMySQLParser.DATAFILE_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode RENAME_SYMBOL() { return getToken(MultiQueryMySQLParser.RENAME_SYMBOL, 0); }
		public TerminalNode TO_SYMBOL() { return getToken(MultiQueryMySQLParser.TO_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public AlterTablespaceOptionsContext alterTablespaceOptions() {
			return getRuleContext(AlterTablespaceOptionsContext.class,0);
		}
		public TerminalNode ADD_SYMBOL() { return getToken(MultiQueryMySQLParser.ADD_SYMBOL, 0); }
		public TerminalNode DROP_SYMBOL() { return getToken(MultiQueryMySQLParser.DROP_SYMBOL, 0); }
		public TerminalNode CHANGE_SYMBOL() { return getToken(MultiQueryMySQLParser.CHANGE_SYMBOL, 0); }
		public TerminalNode NOT_SYMBOL() { return getToken(MultiQueryMySQLParser.NOT_SYMBOL, 0); }
		public TerminalNode ACCESSIBLE_SYMBOL() { return getToken(MultiQueryMySQLParser.ACCESSIBLE_SYMBOL, 0); }
		public TerminalNode READ_ONLY_SYMBOL() { return getToken(MultiQueryMySQLParser.READ_ONLY_SYMBOL, 0); }
		public TerminalNode READ_WRITE_SYMBOL() { return getToken(MultiQueryMySQLParser.READ_WRITE_SYMBOL, 0); }
		public List<ChangeTablespaceOptionContext> changeTablespaceOption() {
			return getRuleContexts(ChangeTablespaceOptionContext.class);
		}
		public ChangeTablespaceOptionContext changeTablespaceOption(int i) {
			return getRuleContext(ChangeTablespaceOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public AlterTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTablespace; }
	}

	public final AlterTablespaceContext alterTablespace() throws RecognitionException {
		AlterTablespaceContext _localctx = new AlterTablespaceContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_alterTablespace);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1749);
			match(TABLESPACE_SYMBOL);
			setState(1750);
			tablespaceRef();
			setState(1784);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,89,_ctx) ) {
			case 1:
				{
				setState(1751);
				_la = _input.LA(1);
				if ( !(_la==ADD_SYMBOL || _la==DROP_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1752);
				match(DATAFILE_SYMBOL);
				setState(1753);
				textLiteral();
				setState(1755);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,84,_ctx) ) {
				case 1:
					{
					setState(1754);
					alterTablespaceOptions();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(1757);
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				setState(1777);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,88,_ctx) ) {
				case 1:
					{
					}
					break;
				case 2:
					{
					setState(1759);
					match(CHANGE_SYMBOL);
					setState(1760);
					match(DATAFILE_SYMBOL);
					setState(1761);
					textLiteral();
					setState(1772);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,87,_ctx) ) {
					case 1:
						{
						setState(1762);
						changeTablespaceOption();
						setState(1769);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,86,_ctx);
						while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								setState(1764);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA_SYMBOL) {
									{
									setState(1763);
									match(COMMA_SYMBOL);
									}
								}

								setState(1766);
								changeTablespaceOption();
								}
								} 
							}
							setState(1771);
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,86,_ctx);
						}
						}
						break;
					}
					}
					break;
				case 3:
					{
					setState(1774);
					_la = _input.LA(1);
					if ( !(_la==READ_ONLY_SYMBOL || _la==READ_WRITE_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case 4:
					{
					setState(1775);
					match(NOT_SYMBOL);
					setState(1776);
					match(ACCESSIBLE_SYMBOL);
					}
					break;
				}
				}
				break;
			case 3:
				{
				setState(1779);
				match(RENAME_SYMBOL);
				setState(1780);
				match(TO_SYMBOL);
				setState(1781);
				identifier();
				}
				break;
			case 4:
				{
				setState(1782);
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				setState(1783);
				alterTablespaceOptions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUndoTablespaceContext extends ParserRuleContext {
		public TerminalNode UNDO_SYMBOL() { return getToken(MultiQueryMySQLParser.UNDO_SYMBOL, 0); }
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MultiQueryMySQLParser.TABLESPACE_SYMBOL, 0); }
		public TablespaceRefContext tablespaceRef() {
			return getRuleContext(TablespaceRefContext.class,0);
		}
		public TerminalNode SET_SYMBOL() { return getToken(MultiQueryMySQLParser.SET_SYMBOL, 0); }
		public TerminalNode ACTIVE_SYMBOL() { return getToken(MultiQueryMySQLParser.ACTIVE_SYMBOL, 0); }
		public TerminalNode INACTIVE_SYMBOL() { return getToken(MultiQueryMySQLParser.INACTIVE_SYMBOL, 0); }
		public UndoTableSpaceOptionsContext undoTableSpaceOptions() {
			return getRuleContext(UndoTableSpaceOptionsContext.class,0);
		}
		public AlterUndoTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUndoTablespace; }
	}

	public final AlterUndoTablespaceContext alterUndoTablespace() throws RecognitionException {
		AlterUndoTablespaceContext _localctx = new AlterUndoTablespaceContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_alterUndoTablespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1786);
			match(UNDO_SYMBOL);
			setState(1787);
			match(TABLESPACE_SYMBOL);
			setState(1788);
			tablespaceRef();
			setState(1789);
			match(SET_SYMBOL);
			setState(1790);
			_la = _input.LA(1);
			if ( !(_la==ACTIVE_SYMBOL || _la==INACTIVE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1792);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,90,_ctx) ) {
			case 1:
				{
				setState(1791);
				undoTableSpaceOptions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UndoTableSpaceOptionsContext extends ParserRuleContext {
		public List<UndoTableSpaceOptionContext> undoTableSpaceOption() {
			return getRuleContexts(UndoTableSpaceOptionContext.class);
		}
		public UndoTableSpaceOptionContext undoTableSpaceOption(int i) {
			return getRuleContext(UndoTableSpaceOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public UndoTableSpaceOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_undoTableSpaceOptions; }
	}

	public final UndoTableSpaceOptionsContext undoTableSpaceOptions() throws RecognitionException {
		UndoTableSpaceOptionsContext _localctx = new UndoTableSpaceOptionsContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_undoTableSpaceOptions);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1794);
			undoTableSpaceOption();
			setState(1801);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,92,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1796);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA_SYMBOL) {
						{
						setState(1795);
						match(COMMA_SYMBOL);
						}
					}

					setState(1798);
					undoTableSpaceOption();
					}
					} 
				}
				setState(1803);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,92,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UndoTableSpaceOptionContext extends ParserRuleContext {
		public TsOptionEngineContext tsOptionEngine() {
			return getRuleContext(TsOptionEngineContext.class,0);
		}
		public UndoTableSpaceOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_undoTableSpaceOption; }
	}

	public final UndoTableSpaceOptionContext undoTableSpaceOption() throws RecognitionException {
		UndoTableSpaceOptionContext _localctx = new UndoTableSpaceOptionContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_undoTableSpaceOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1804);
			tsOptionEngine();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTablespaceOptionsContext extends ParserRuleContext {
		public List<AlterTablespaceOptionContext> alterTablespaceOption() {
			return getRuleContexts(AlterTablespaceOptionContext.class);
		}
		public AlterTablespaceOptionContext alterTablespaceOption(int i) {
			return getRuleContext(AlterTablespaceOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public AlterTablespaceOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTablespaceOptions; }
	}

	public final AlterTablespaceOptionsContext alterTablespaceOptions() throws RecognitionException {
		AlterTablespaceOptionsContext _localctx = new AlterTablespaceOptionsContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_alterTablespaceOptions);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1806);
			alterTablespaceOption();
			setState(1813);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,94,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1808);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA_SYMBOL) {
						{
						setState(1807);
						match(COMMA_SYMBOL);
						}
					}

					setState(1810);
					alterTablespaceOption();
					}
					} 
				}
				setState(1815);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,94,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTablespaceOptionContext extends ParserRuleContext {
		public TerminalNode INITIAL_SIZE_SYMBOL() { return getToken(MultiQueryMySQLParser.INITIAL_SIZE_SYMBOL, 0); }
		public SizeNumberContext sizeNumber() {
			return getRuleContext(SizeNumberContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionAutoextendSizeContext tsOptionAutoextendSize() {
			return getRuleContext(TsOptionAutoextendSizeContext.class,0);
		}
		public TsOptionMaxSizeContext tsOptionMaxSize() {
			return getRuleContext(TsOptionMaxSizeContext.class,0);
		}
		public TsOptionEngineContext tsOptionEngine() {
			return getRuleContext(TsOptionEngineContext.class,0);
		}
		public TsOptionWaitContext tsOptionWait() {
			return getRuleContext(TsOptionWaitContext.class,0);
		}
		public TsOptionEncryptionContext tsOptionEncryption() {
			return getRuleContext(TsOptionEncryptionContext.class,0);
		}
		public AlterTablespaceOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTablespaceOption; }
	}

	public final AlterTablespaceOptionContext alterTablespaceOption() throws RecognitionException {
		AlterTablespaceOptionContext _localctx = new AlterTablespaceOptionContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_alterTablespaceOption);
		try {
			setState(1826);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INITIAL_SIZE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1816);
				match(INITIAL_SIZE_SYMBOL);
				setState(1818);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,95,_ctx) ) {
				case 1:
					{
					setState(1817);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(1820);
				sizeNumber();
				}
				break;
			case AUTOEXTEND_SIZE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1821);
				tsOptionAutoextendSize();
				}
				break;
			case MAX_SIZE_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(1822);
				tsOptionMaxSize();
				}
				break;
			case ENGINE_SYMBOL:
			case STORAGE_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(1823);
				tsOptionEngine();
				}
				break;
			case NO_WAIT_SYMBOL:
			case WAIT_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(1824);
				tsOptionWait();
				}
				break;
			case ENCRYPTION_SYMBOL:
				enterOuterAlt(_localctx, 6);
				{
				setState(1825);
				tsOptionEncryption();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChangeTablespaceOptionContext extends ParserRuleContext {
		public TerminalNode INITIAL_SIZE_SYMBOL() { return getToken(MultiQueryMySQLParser.INITIAL_SIZE_SYMBOL, 0); }
		public SizeNumberContext sizeNumber() {
			return getRuleContext(SizeNumberContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionAutoextendSizeContext tsOptionAutoextendSize() {
			return getRuleContext(TsOptionAutoextendSizeContext.class,0);
		}
		public TsOptionMaxSizeContext tsOptionMaxSize() {
			return getRuleContext(TsOptionMaxSizeContext.class,0);
		}
		public ChangeTablespaceOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeTablespaceOption; }
	}

	public final ChangeTablespaceOptionContext changeTablespaceOption() throws RecognitionException {
		ChangeTablespaceOptionContext _localctx = new ChangeTablespaceOptionContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_changeTablespaceOption);
		try {
			setState(1835);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INITIAL_SIZE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1828);
				match(INITIAL_SIZE_SYMBOL);
				setState(1830);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,97,_ctx) ) {
				case 1:
					{
					setState(1829);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(1832);
				sizeNumber();
				}
				break;
			case AUTOEXTEND_SIZE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1833);
				tsOptionAutoextendSize();
				}
				break;
			case MAX_SIZE_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(1834);
				tsOptionMaxSize();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterViewContext extends ParserRuleContext {
		public TerminalNode VIEW_SYMBOL() { return getToken(MultiQueryMySQLParser.VIEW_SYMBOL, 0); }
		public ViewRefContext viewRef() {
			return getRuleContext(ViewRefContext.class,0);
		}
		public ViewTailContext viewTail() {
			return getRuleContext(ViewTailContext.class,0);
		}
		public ViewAlgorithmContext viewAlgorithm() {
			return getRuleContext(ViewAlgorithmContext.class,0);
		}
		public DefinerClauseContext definerClause() {
			return getRuleContext(DefinerClauseContext.class,0);
		}
		public ViewSuidContext viewSuid() {
			return getRuleContext(ViewSuidContext.class,0);
		}
		public AlterViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterView; }
	}

	public final AlterViewContext alterView() throws RecognitionException {
		AlterViewContext _localctx = new AlterViewContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_alterView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1838);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALGORITHM_SYMBOL) {
				{
				setState(1837);
				viewAlgorithm();
				}
			}

			setState(1841);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				setState(1840);
				definerClause();
				}
			}

			setState(1844);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL_SYMBOL) {
				{
				setState(1843);
				viewSuid();
				}
			}

			setState(1846);
			match(VIEW_SYMBOL);
			setState(1847);
			viewRef();
			setState(1848);
			viewTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewTailContext extends ParserRuleContext {
		public TerminalNode AS_SYMBOL() { return getToken(MultiQueryMySQLParser.AS_SYMBOL, 0); }
		public ViewSelectContext viewSelect() {
			return getRuleContext(ViewSelectContext.class,0);
		}
		public ColumnInternalRefListContext columnInternalRefList() {
			return getRuleContext(ColumnInternalRefListContext.class,0);
		}
		public ViewTailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewTail; }
	}

	public final ViewTailContext viewTail() throws RecognitionException {
		ViewTailContext _localctx = new ViewTailContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_viewTail);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1851);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				setState(1850);
				columnInternalRefList();
				}
			}

			setState(1853);
			match(AS_SYMBOL);
			setState(1854);
			viewSelect();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewSelectContext extends ParserRuleContext {
		public QueryExpressionOrParensContext queryExpressionOrParens() {
			return getRuleContext(QueryExpressionOrParensContext.class,0);
		}
		public ViewCheckOptionContext viewCheckOption() {
			return getRuleContext(ViewCheckOptionContext.class,0);
		}
		public ViewSelectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewSelect; }
	}

	public final ViewSelectContext viewSelect() throws RecognitionException {
		ViewSelectContext _localctx = new ViewSelectContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_viewSelect);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1856);
			queryExpressionOrParens();
			setState(1858);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,103,_ctx) ) {
			case 1:
				{
				setState(1857);
				viewCheckOption();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewCheckOptionContext extends ParserRuleContext {
		public TerminalNode WITH_SYMBOL() { return getToken(MultiQueryMySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode CHECK_SYMBOL() { return getToken(MultiQueryMySQLParser.CHECK_SYMBOL, 0); }
		public TerminalNode OPTION_SYMBOL() { return getToken(MultiQueryMySQLParser.OPTION_SYMBOL, 0); }
		public TerminalNode CASCADED_SYMBOL() { return getToken(MultiQueryMySQLParser.CASCADED_SYMBOL, 0); }
		public TerminalNode LOCAL_SYMBOL() { return getToken(MultiQueryMySQLParser.LOCAL_SYMBOL, 0); }
		public ViewCheckOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewCheckOption; }
	}

	public final ViewCheckOptionContext viewCheckOption() throws RecognitionException {
		ViewCheckOptionContext _localctx = new ViewCheckOptionContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_viewCheckOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1860);
			match(WITH_SYMBOL);
			setState(1862);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADED_SYMBOL || _la==LOCAL_SYMBOL) {
				{
				setState(1861);
				_la = _input.LA(1);
				if ( !(_la==CASCADED_SYMBOL || _la==LOCAL_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1864);
			match(CHECK_SYMBOL);
			setState(1865);
			match(OPTION_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateStatementContext extends ParserRuleContext {
		public TerminalNode CREATE_SYMBOL() { return getToken(MultiQueryMySQLParser.CREATE_SYMBOL, 0); }
		public CreateDatabaseContext createDatabase() {
			return getRuleContext(CreateDatabaseContext.class,0);
		}
		public CreateTableContext createTable() {
			return getRuleContext(CreateTableContext.class,0);
		}
		public CreateFunctionContext createFunction() {
			return getRuleContext(CreateFunctionContext.class,0);
		}
		public CreateProcedureContext createProcedure() {
			return getRuleContext(CreateProcedureContext.class,0);
		}
		public CreateUdfContext createUdf() {
			return getRuleContext(CreateUdfContext.class,0);
		}
		public CreateLogfileGroupContext createLogfileGroup() {
			return getRuleContext(CreateLogfileGroupContext.class,0);
		}
		public CreateViewContext createView() {
			return getRuleContext(CreateViewContext.class,0);
		}
		public CreateTriggerContext createTrigger() {
			return getRuleContext(CreateTriggerContext.class,0);
		}
		public CreateIndexContext createIndex() {
			return getRuleContext(CreateIndexContext.class,0);
		}
		public CreateServerContext createServer() {
			return getRuleContext(CreateServerContext.class,0);
		}
		public CreateTablespaceContext createTablespace() {
			return getRuleContext(CreateTablespaceContext.class,0);
		}
		public CreateEventContext createEvent() {
			return getRuleContext(CreateEventContext.class,0);
		}
		public CreateRoleContext createRole() {
			return getRuleContext(CreateRoleContext.class,0);
		}
		public CreateSpatialReferenceContext createSpatialReference() {
			return getRuleContext(CreateSpatialReferenceContext.class,0);
		}
		public CreateUndoTablespaceContext createUndoTablespace() {
			return getRuleContext(CreateUndoTablespaceContext.class,0);
		}
		public CreateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createStatement; }
	}

	public final CreateStatementContext createStatement() throws RecognitionException {
		CreateStatementContext _localctx = new CreateStatementContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_createStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1867);
			match(CREATE_SYMBOL);
			setState(1886);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,105,_ctx) ) {
			case 1:
				{
				setState(1868);
				createDatabase();
				}
				break;
			case 2:
				{
				setState(1869);
				createTable();
				}
				break;
			case 3:
				{
				setState(1870);
				createFunction();
				}
				break;
			case 4:
				{
				setState(1871);
				createProcedure();
				}
				break;
			case 5:
				{
				setState(1872);
				createUdf();
				}
				break;
			case 6:
				{
				setState(1873);
				createLogfileGroup();
				}
				break;
			case 7:
				{
				setState(1874);
				createView();
				}
				break;
			case 8:
				{
				setState(1875);
				createTrigger();
				}
				break;
			case 9:
				{
				setState(1876);
				createIndex();
				}
				break;
			case 10:
				{
				setState(1877);
				createServer();
				}
				break;
			case 11:
				{
				setState(1878);
				createTablespace();
				}
				break;
			case 12:
				{
				setState(1879);
				createEvent();
				}
				break;
			case 13:
				{
				setState(1880);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(1881);
				createRole();
				}
				break;
			case 14:
				{
				setState(1882);
				if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
				setState(1883);
				createSpatialReference();
				}
				break;
			case 15:
				{
				setState(1884);
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				setState(1885);
				createUndoTablespace();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDatabaseContext extends ParserRuleContext {
		public TerminalNode DATABASE_SYMBOL() { return getToken(MultiQueryMySQLParser.DATABASE_SYMBOL, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<CreateDatabaseOptionContext> createDatabaseOption() {
			return getRuleContexts(CreateDatabaseOptionContext.class);
		}
		public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return getRuleContext(CreateDatabaseOptionContext.class,i);
		}
		public CreateDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabase; }
	}

	public final CreateDatabaseContext createDatabase() throws RecognitionException {
		CreateDatabaseContext _localctx = new CreateDatabaseContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_createDatabase);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1888);
			match(DATABASE_SYMBOL);
			setState(1890);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,106,_ctx) ) {
			case 1:
				{
				setState(1889);
				ifNotExists();
				}
				break;
			}
			setState(1892);
			schemaName();
			setState(1896);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,107,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1893);
					createDatabaseOption();
					}
					} 
				}
				setState(1898);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,107,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDatabaseOptionContext extends ParserRuleContext {
		public DefaultCharsetContext defaultCharset() {
			return getRuleContext(DefaultCharsetContext.class,0);
		}
		public DefaultCollationContext defaultCollation() {
			return getRuleContext(DefaultCollationContext.class,0);
		}
		public DefaultEncryptionContext defaultEncryption() {
			return getRuleContext(DefaultEncryptionContext.class,0);
		}
		public CreateDatabaseOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabaseOption; }
	}

	public final CreateDatabaseOptionContext createDatabaseOption() throws RecognitionException {
		CreateDatabaseOptionContext _localctx = new CreateDatabaseOptionContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_createDatabaseOption);
		try {
			setState(1903);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,108,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1899);
				defaultCharset();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1900);
				defaultCollation();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1901);
				if (!(serverVersion >= 80016)) throw new FailedPredicateException(this, "serverVersion >= 80016");
				setState(1902);
				defaultEncryption();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableContext extends ParserRuleContext {
		public TerminalNode TABLE_SYMBOL() { return getToken(MultiQueryMySQLParser.TABLE_SYMBOL, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode LIKE_SYMBOL() { return getToken(MultiQueryMySQLParser.LIKE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode TEMPORARY_SYMBOL() { return getToken(MultiQueryMySQLParser.TEMPORARY_SYMBOL, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public TableElementListContext tableElementList() {
			return getRuleContext(TableElementListContext.class,0);
		}
		public CreateTableOptionsContext createTableOptions() {
			return getRuleContext(CreateTableOptionsContext.class,0);
		}
		public PartitionClauseContext partitionClause() {
			return getRuleContext(PartitionClauseContext.class,0);
		}
		public DuplicateAsQueryExpressionContext duplicateAsQueryExpression() {
			return getRuleContext(DuplicateAsQueryExpressionContext.class,0);
		}
		public CreateTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTable; }
	}

	public final CreateTableContext createTable() throws RecognitionException {
		CreateTableContext _localctx = new CreateTableContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_createTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1906);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMPORARY_SYMBOL) {
				{
				setState(1905);
				match(TEMPORARY_SYMBOL);
				}
			}

			setState(1908);
			match(TABLE_SYMBOL);
			setState(1910);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,110,_ctx) ) {
			case 1:
				{
				setState(1909);
				ifNotExists();
				}
				break;
			}
			setState(1912);
			tableName();
			setState(1935);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,115,_ctx) ) {
			case 1:
				{
				setState(1917);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,111,_ctx) ) {
				case 1:
					{
					setState(1913);
					match(OPEN_PAR_SYMBOL);
					setState(1914);
					tableElementList();
					setState(1915);
					match(CLOSE_PAR_SYMBOL);
					}
					break;
				}
				setState(1920);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,112,_ctx) ) {
				case 1:
					{
					setState(1919);
					createTableOptions();
					}
					break;
				}
				setState(1923);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,113,_ctx) ) {
				case 1:
					{
					setState(1922);
					partitionClause();
					}
					break;
				}
				setState(1926);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,114,_ctx) ) {
				case 1:
					{
					setState(1925);
					duplicateAsQueryExpression();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(1928);
				match(LIKE_SYMBOL);
				setState(1929);
				tableRef();
				}
				break;
			case 3:
				{
				setState(1930);
				match(OPEN_PAR_SYMBOL);
				setState(1931);
				match(LIKE_SYMBOL);
				setState(1932);
				tableRef();
				setState(1933);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableElementListContext extends ParserRuleContext {
		public List<TableElementContext> tableElement() {
			return getRuleContexts(TableElementContext.class);
		}
		public TableElementContext tableElement(int i) {
			return getRuleContext(TableElementContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public TableElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableElementList; }
	}

	public final TableElementListContext tableElementList() throws RecognitionException {
		TableElementListContext _localctx = new TableElementListContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_tableElementList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1937);
			tableElement();
			setState(1942);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(1938);
				match(COMMA_SYMBOL);
				setState(1939);
				tableElement();
				}
				}
				setState(1944);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableElementContext extends ParserRuleContext {
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public TableConstraintDefContext tableConstraintDef() {
			return getRuleContext(TableConstraintDefContext.class,0);
		}
		public TableElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableElement; }
	}

	public final TableElementContext tableElement() throws RecognitionException {
		TableElementContext _localctx = new TableElementContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_tableElement);
		try {
			setState(1947);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,117,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1945);
				columnDefinition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1946);
				tableConstraintDef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DuplicateAsQueryExpressionContext extends ParserRuleContext {
		public QueryExpressionOrParensContext queryExpressionOrParens() {
			return getRuleContext(QueryExpressionOrParensContext.class,0);
		}
		public TerminalNode AS_SYMBOL() { return getToken(MultiQueryMySQLParser.AS_SYMBOL, 0); }
		public TerminalNode REPLACE_SYMBOL() { return getToken(MultiQueryMySQLParser.REPLACE_SYMBOL, 0); }
		public TerminalNode IGNORE_SYMBOL() { return getToken(MultiQueryMySQLParser.IGNORE_SYMBOL, 0); }
		public DuplicateAsQueryExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_duplicateAsQueryExpression; }
	}

	public final DuplicateAsQueryExpressionContext duplicateAsQueryExpression() throws RecognitionException {
		DuplicateAsQueryExpressionContext _localctx = new DuplicateAsQueryExpressionContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_duplicateAsQueryExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1950);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,118,_ctx) ) {
			case 1:
				{
				setState(1949);
				_la = _input.LA(1);
				if ( !(_la==IGNORE_SYMBOL || _la==REPLACE_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(1953);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,119,_ctx) ) {
			case 1:
				{
				setState(1952);
				match(AS_SYMBOL);
				}
				break;
			}
			setState(1955);
			queryExpressionOrParens();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryExpressionOrParensContext extends ParserRuleContext {
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public QueryExpressionParensContext queryExpressionParens() {
			return getRuleContext(QueryExpressionParensContext.class,0);
		}
		public QueryExpressionOrParensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpressionOrParens; }
	}

	public final QueryExpressionOrParensContext queryExpressionOrParens() throws RecognitionException {
		QueryExpressionOrParensContext _localctx = new QueryExpressionOrParensContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_queryExpressionOrParens);
		try {
			setState(1959);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,120,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1957);
				queryExpression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1958);
				queryExpressionParens();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateRoutineContext extends ParserRuleContext {
		public TerminalNode CREATE_SYMBOL() { return getToken(MultiQueryMySQLParser.CREATE_SYMBOL, 0); }
		public TerminalNode EOF() { return getToken(MultiQueryMySQLParser.EOF, 0); }
		public CreateProcedureContext createProcedure() {
			return getRuleContext(CreateProcedureContext.class,0);
		}
		public CreateFunctionContext createFunction() {
			return getRuleContext(CreateFunctionContext.class,0);
		}
		public CreateUdfContext createUdf() {
			return getRuleContext(CreateUdfContext.class,0);
		}
		public TerminalNode SEMICOLON_SYMBOL() { return getToken(MultiQueryMySQLParser.SEMICOLON_SYMBOL, 0); }
		public CreateRoutineContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createRoutine; }
	}

	public final CreateRoutineContext createRoutine() throws RecognitionException {
		CreateRoutineContext _localctx = new CreateRoutineContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_createRoutine);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1961);
			match(CREATE_SYMBOL);
			setState(1965);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,121,_ctx) ) {
			case 1:
				{
				setState(1962);
				createProcedure();
				}
				break;
			case 2:
				{
				setState(1963);
				createFunction();
				}
				break;
			case 3:
				{
				setState(1964);
				createUdf();
				}
				break;
			}
			setState(1968);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEMICOLON_SYMBOL) {
				{
				setState(1967);
				match(SEMICOLON_SYMBOL);
				}
			}

			setState(1970);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateProcedureContext extends ParserRuleContext {
		public TerminalNode PROCEDURE_SYMBOL() { return getToken(MultiQueryMySQLParser.PROCEDURE_SYMBOL, 0); }
		public ProcedureNameContext procedureName() {
			return getRuleContext(ProcedureNameContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public DefinerClauseContext definerClause() {
			return getRuleContext(DefinerClauseContext.class,0);
		}
		public List<ProcedureParameterContext> procedureParameter() {
			return getRuleContexts(ProcedureParameterContext.class);
		}
		public ProcedureParameterContext procedureParameter(int i) {
			return getRuleContext(ProcedureParameterContext.class,i);
		}
		public List<RoutineCreateOptionContext> routineCreateOption() {
			return getRuleContexts(RoutineCreateOptionContext.class);
		}
		public RoutineCreateOptionContext routineCreateOption(int i) {
			return getRuleContext(RoutineCreateOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public CreateProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createProcedure; }
	}

	public final CreateProcedureContext createProcedure() throws RecognitionException {
		CreateProcedureContext _localctx = new CreateProcedureContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_createProcedure);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1973);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				setState(1972);
				definerClause();
				}
			}

			setState(1975);
			match(PROCEDURE_SYMBOL);
			setState(1976);
			procedureName();
			setState(1977);
			match(OPEN_PAR_SYMBOL);
			setState(1986);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,125,_ctx) ) {
			case 1:
				{
				setState(1978);
				procedureParameter();
				setState(1983);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(1979);
					match(COMMA_SYMBOL);
					setState(1980);
					procedureParameter();
					}
					}
					setState(1985);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(1988);
			match(CLOSE_PAR_SYMBOL);
			setState(1992);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,126,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1989);
					routineCreateOption();
					}
					} 
				}
				setState(1994);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,126,_ctx);
			}
			setState(1995);
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionContext extends ParserRuleContext {
		public TerminalNode FUNCTION_SYMBOL() { return getToken(MultiQueryMySQLParser.FUNCTION_SYMBOL, 0); }
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode RETURNS_SYMBOL() { return getToken(MultiQueryMySQLParser.RETURNS_SYMBOL, 0); }
		public TypeWithOptCollateContext typeWithOptCollate() {
			return getRuleContext(TypeWithOptCollateContext.class,0);
		}
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public DefinerClauseContext definerClause() {
			return getRuleContext(DefinerClauseContext.class,0);
		}
		public List<FunctionParameterContext> functionParameter() {
			return getRuleContexts(FunctionParameterContext.class);
		}
		public FunctionParameterContext functionParameter(int i) {
			return getRuleContext(FunctionParameterContext.class,i);
		}
		public List<RoutineCreateOptionContext> routineCreateOption() {
			return getRuleContexts(RoutineCreateOptionContext.class);
		}
		public RoutineCreateOptionContext routineCreateOption(int i) {
			return getRuleContext(RoutineCreateOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public CreateFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunction; }
	}

	public final CreateFunctionContext createFunction() throws RecognitionException {
		CreateFunctionContext _localctx = new CreateFunctionContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_createFunction);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1998);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				setState(1997);
				definerClause();
				}
			}

			setState(2000);
			match(FUNCTION_SYMBOL);
			setState(2001);
			functionName();
			setState(2002);
			match(OPEN_PAR_SYMBOL);
			setState(2011);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,129,_ctx) ) {
			case 1:
				{
				setState(2003);
				functionParameter();
				setState(2008);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(2004);
					match(COMMA_SYMBOL);
					setState(2005);
					functionParameter();
					}
					}
					setState(2010);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(2013);
			match(CLOSE_PAR_SYMBOL);
			setState(2014);
			match(RETURNS_SYMBOL);
			setState(2015);
			typeWithOptCollate();
			setState(2019);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,130,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2016);
					routineCreateOption();
					}
					} 
				}
				setState(2021);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,130,_ctx);
			}
			setState(2022);
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUdfContext extends ParserRuleContext {
		public Token type;
		public TerminalNode FUNCTION_SYMBOL() { return getToken(MultiQueryMySQLParser.FUNCTION_SYMBOL, 0); }
		public UdfNameContext udfName() {
			return getRuleContext(UdfNameContext.class,0);
		}
		public TerminalNode RETURNS_SYMBOL() { return getToken(MultiQueryMySQLParser.RETURNS_SYMBOL, 0); }
		public TerminalNode SONAME_SYMBOL() { return getToken(MultiQueryMySQLParser.SONAME_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode STRING_SYMBOL() { return getToken(MultiQueryMySQLParser.STRING_SYMBOL, 0); }
		public TerminalNode INT_SYMBOL() { return getToken(MultiQueryMySQLParser.INT_SYMBOL, 0); }
		public TerminalNode REAL_SYMBOL() { return getToken(MultiQueryMySQLParser.REAL_SYMBOL, 0); }
		public TerminalNode DECIMAL_SYMBOL() { return getToken(MultiQueryMySQLParser.DECIMAL_SYMBOL, 0); }
		public TerminalNode AGGREGATE_SYMBOL() { return getToken(MultiQueryMySQLParser.AGGREGATE_SYMBOL, 0); }
		public CreateUdfContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUdf; }
	}

	public final CreateUdfContext createUdf() throws RecognitionException {
		CreateUdfContext _localctx = new CreateUdfContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_createUdf);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2025);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AGGREGATE_SYMBOL) {
				{
				setState(2024);
				match(AGGREGATE_SYMBOL);
				}
			}

			setState(2027);
			match(FUNCTION_SYMBOL);
			setState(2028);
			udfName();
			setState(2029);
			match(RETURNS_SYMBOL);
			setState(2030);
			((CreateUdfContext)_localctx).type = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==STRING_SYMBOL || _la==DECIMAL_SYMBOL || _la==INT_SYMBOL || _la==REAL_SYMBOL) ) {
				((CreateUdfContext)_localctx).type = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2031);
			match(SONAME_SYMBOL);
			setState(2032);
			textLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoutineCreateOptionContext extends ParserRuleContext {
		public RoutineOptionContext routineOption() {
			return getRuleContext(RoutineOptionContext.class,0);
		}
		public TerminalNode DETERMINISTIC_SYMBOL() { return getToken(MultiQueryMySQLParser.DETERMINISTIC_SYMBOL, 0); }
		public TerminalNode NOT_SYMBOL() { return getToken(MultiQueryMySQLParser.NOT_SYMBOL, 0); }
		public RoutineCreateOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineCreateOption; }
	}

	public final RoutineCreateOptionContext routineCreateOption() throws RecognitionException {
		RoutineCreateOptionContext _localctx = new RoutineCreateOptionContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_routineCreateOption);
		int _la;
		try {
			setState(2039);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMMENT_SYMBOL:
			case CONTAINS_SYMBOL:
			case LANGUAGE_SYMBOL:
			case NO_SYMBOL:
			case MODIFIES_SYMBOL:
			case READS_SYMBOL:
			case SQL_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2034);
				routineOption();
				}
				break;
			case DETERMINISTIC_SYMBOL:
			case NOT_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2036);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT_SYMBOL) {
					{
					setState(2035);
					match(NOT_SYMBOL);
					}
				}

				setState(2038);
				match(DETERMINISTIC_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoutineAlterOptionsContext extends ParserRuleContext {
		public List<RoutineCreateOptionContext> routineCreateOption() {
			return getRuleContexts(RoutineCreateOptionContext.class);
		}
		public RoutineCreateOptionContext routineCreateOption(int i) {
			return getRuleContext(RoutineCreateOptionContext.class,i);
		}
		public RoutineAlterOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineAlterOptions; }
	}

	public final RoutineAlterOptionsContext routineAlterOptions() throws RecognitionException {
		RoutineAlterOptionsContext _localctx = new RoutineAlterOptionsContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_routineAlterOptions);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2042); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2041);
					routineCreateOption();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2044); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,134,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoutineOptionContext extends ParserRuleContext {
		public Token option;
		public Token security;
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode COMMENT_SYMBOL() { return getToken(MultiQueryMySQLParser.COMMENT_SYMBOL, 0); }
		public TerminalNode SQL_SYMBOL() { return getToken(MultiQueryMySQLParser.SQL_SYMBOL, 0); }
		public TerminalNode LANGUAGE_SYMBOL() { return getToken(MultiQueryMySQLParser.LANGUAGE_SYMBOL, 0); }
		public TerminalNode NO_SYMBOL() { return getToken(MultiQueryMySQLParser.NO_SYMBOL, 0); }
		public TerminalNode CONTAINS_SYMBOL() { return getToken(MultiQueryMySQLParser.CONTAINS_SYMBOL, 0); }
		public TerminalNode DATA_SYMBOL() { return getToken(MultiQueryMySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode READS_SYMBOL() { return getToken(MultiQueryMySQLParser.READS_SYMBOL, 0); }
		public TerminalNode MODIFIES_SYMBOL() { return getToken(MultiQueryMySQLParser.MODIFIES_SYMBOL, 0); }
		public TerminalNode SECURITY_SYMBOL() { return getToken(MultiQueryMySQLParser.SECURITY_SYMBOL, 0); }
		public TerminalNode DEFINER_SYMBOL() { return getToken(MultiQueryMySQLParser.DEFINER_SYMBOL, 0); }
		public TerminalNode INVOKER_SYMBOL() { return getToken(MultiQueryMySQLParser.INVOKER_SYMBOL, 0); }
		public RoutineOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineOption; }
	}

	public final RoutineOptionContext routineOption() throws RecognitionException {
		RoutineOptionContext _localctx = new RoutineOptionContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_routineOption);
		int _la;
		try {
			setState(2063);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMMENT_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2046);
				((RoutineOptionContext)_localctx).option = match(COMMENT_SYMBOL);
				setState(2047);
				textLiteral();
				}
				break;
			case LANGUAGE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2048);
				((RoutineOptionContext)_localctx).option = match(LANGUAGE_SYMBOL);
				setState(2049);
				match(SQL_SYMBOL);
				}
				break;
			case NO_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(2050);
				((RoutineOptionContext)_localctx).option = match(NO_SYMBOL);
				setState(2051);
				match(SQL_SYMBOL);
				}
				break;
			case CONTAINS_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(2052);
				((RoutineOptionContext)_localctx).option = match(CONTAINS_SYMBOL);
				setState(2053);
				match(SQL_SYMBOL);
				}
				break;
			case READS_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(2054);
				((RoutineOptionContext)_localctx).option = match(READS_SYMBOL);
				setState(2055);
				match(SQL_SYMBOL);
				setState(2056);
				match(DATA_SYMBOL);
				}
				break;
			case MODIFIES_SYMBOL:
				enterOuterAlt(_localctx, 6);
				{
				setState(2057);
				((RoutineOptionContext)_localctx).option = match(MODIFIES_SYMBOL);
				setState(2058);
				match(SQL_SYMBOL);
				setState(2059);
				match(DATA_SYMBOL);
				}
				break;
			case SQL_SYMBOL:
				enterOuterAlt(_localctx, 7);
				{
				setState(2060);
				((RoutineOptionContext)_localctx).option = match(SQL_SYMBOL);
				setState(2061);
				match(SECURITY_SYMBOL);
				setState(2062);
				((RoutineOptionContext)_localctx).security = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFINER_SYMBOL || _la==INVOKER_SYMBOL) ) {
					((RoutineOptionContext)_localctx).security = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateIndexContext extends ParserRuleContext {
		public Token type;
		public CreateIndexTargetContext createIndexTarget() {
			return getRuleContext(CreateIndexTargetContext.class,0);
		}
		public TerminalNode INDEX_SYMBOL() { return getToken(MultiQueryMySQLParser.INDEX_SYMBOL, 0); }
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public OnlineOptionContext onlineOption() {
			return getRuleContext(OnlineOptionContext.class,0);
		}
		public TerminalNode FULLTEXT_SYMBOL() { return getToken(MultiQueryMySQLParser.FULLTEXT_SYMBOL, 0); }
		public TerminalNode SPATIAL_SYMBOL() { return getToken(MultiQueryMySQLParser.SPATIAL_SYMBOL, 0); }
		public IndexLockAndAlgorithmContext indexLockAndAlgorithm() {
			return getRuleContext(IndexLockAndAlgorithmContext.class,0);
		}
		public TerminalNode UNIQUE_SYMBOL() { return getToken(MultiQueryMySQLParser.UNIQUE_SYMBOL, 0); }
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<FulltextIndexOptionContext> fulltextIndexOption() {
			return getRuleContexts(FulltextIndexOptionContext.class);
		}
		public FulltextIndexOptionContext fulltextIndexOption(int i) {
			return getRuleContext(FulltextIndexOptionContext.class,i);
		}
		public List<SpatialIndexOptionContext> spatialIndexOption() {
			return getRuleContexts(SpatialIndexOptionContext.class);
		}
		public SpatialIndexOptionContext spatialIndexOption(int i) {
			return getRuleContext(SpatialIndexOptionContext.class,i);
		}
		public IndexTypeClauseContext indexTypeClause() {
			return getRuleContext(IndexTypeClauseContext.class,0);
		}
		public IndexNameAndTypeContext indexNameAndType() {
			return getRuleContext(IndexNameAndTypeContext.class,0);
		}
		public CreateIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createIndex; }
	}

	public final CreateIndexContext createIndex() throws RecognitionException {
		CreateIndexContext _localctx = new CreateIndexContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_createIndex);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2066);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFLINE_SYMBOL || _la==ONLINE_SYMBOL) {
				{
				setState(2065);
				onlineOption();
				}
			}

			setState(2109);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INDEX_SYMBOL:
			case UNIQUE_SYMBOL:
				{
				setState(2069);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNIQUE_SYMBOL) {
					{
					setState(2068);
					match(UNIQUE_SYMBOL);
					}
				}

				setState(2071);
				((CreateIndexContext)_localctx).type = match(INDEX_SYMBOL);
				setState(2080);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,140,_ctx) ) {
				case 1:
					{
					setState(2072);
					if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
					setState(2073);
					indexName();
					setState(2075);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==TYPE_SYMBOL || _la==USING_SYMBOL) {
						{
						setState(2074);
						indexTypeClause();
						}
					}

					}
					break;
				case 2:
					{
					setState(2078);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,139,_ctx) ) {
					case 1:
						{
						setState(2077);
						indexNameAndType();
						}
						break;
					}
					}
					break;
				}
				setState(2082);
				createIndexTarget();
				setState(2086);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,141,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2083);
						indexOption();
						}
						} 
					}
					setState(2088);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,141,_ctx);
				}
				}
				break;
			case FULLTEXT_SYMBOL:
				{
				setState(2089);
				((CreateIndexContext)_localctx).type = match(FULLTEXT_SYMBOL);
				setState(2090);
				match(INDEX_SYMBOL);
				setState(2091);
				indexName();
				setState(2092);
				createIndexTarget();
				setState(2096);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,142,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2093);
						fulltextIndexOption();
						}
						} 
					}
					setState(2098);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,142,_ctx);
				}
				}
				break;
			case SPATIAL_SYMBOL:
				{
				setState(2099);
				((CreateIndexContext)_localctx).type = match(SPATIAL_SYMBOL);
				setState(2100);
				match(INDEX_SYMBOL);
				setState(2101);
				indexName();
				setState(2102);
				createIndexTarget();
				setState(2106);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,143,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2103);
						spatialIndexOption();
						}
						} 
					}
					setState(2108);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,143,_ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2112);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,145,_ctx) ) {
			case 1:
				{
				setState(2111);
				indexLockAndAlgorithm();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexNameAndTypeContext extends ParserRuleContext {
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public TerminalNode USING_SYMBOL() { return getToken(MultiQueryMySQLParser.USING_SYMBOL, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public TerminalNode TYPE_SYMBOL() { return getToken(MultiQueryMySQLParser.TYPE_SYMBOL, 0); }
		public IndexNameAndTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexNameAndType; }
	}

	public final IndexNameAndTypeContext indexNameAndType() throws RecognitionException {
		IndexNameAndTypeContext _localctx = new IndexNameAndTypeContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_indexNameAndType);
		try {
			setState(2123);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,147,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2114);
				indexName();
				setState(2117);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,146,_ctx) ) {
				case 1:
					{
					setState(2115);
					match(USING_SYMBOL);
					setState(2116);
					indexType();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2119);
				indexName();
				setState(2120);
				match(TYPE_SYMBOL);
				setState(2121);
				indexType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateIndexTargetContext extends ParserRuleContext {
		public TerminalNode ON_SYMBOL() { return getToken(MultiQueryMySQLParser.ON_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public KeyListVariantsContext keyListVariants() {
			return getRuleContext(KeyListVariantsContext.class,0);
		}
		public CreateIndexTargetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createIndexTarget; }
	}

	public final CreateIndexTargetContext createIndexTarget() throws RecognitionException {
		CreateIndexTargetContext _localctx = new CreateIndexTargetContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_createIndexTarget);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2125);
			match(ON_SYMBOL);
			setState(2126);
			tableRef();
			setState(2127);
			keyListVariants();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateLogfileGroupContext extends ParserRuleContext {
		public TerminalNode LOGFILE_SYMBOL() { return getToken(MultiQueryMySQLParser.LOGFILE_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MultiQueryMySQLParser.GROUP_SYMBOL, 0); }
		public LogfileGroupNameContext logfileGroupName() {
			return getRuleContext(LogfileGroupNameContext.class,0);
		}
		public TerminalNode ADD_SYMBOL() { return getToken(MultiQueryMySQLParser.ADD_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode UNDOFILE_SYMBOL() { return getToken(MultiQueryMySQLParser.UNDOFILE_SYMBOL, 0); }
		public TerminalNode REDOFILE_SYMBOL() { return getToken(MultiQueryMySQLParser.REDOFILE_SYMBOL, 0); }
		public LogfileGroupOptionsContext logfileGroupOptions() {
			return getRuleContext(LogfileGroupOptionsContext.class,0);
		}
		public CreateLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createLogfileGroup; }
	}

	public final CreateLogfileGroupContext createLogfileGroup() throws RecognitionException {
		CreateLogfileGroupContext _localctx = new CreateLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_createLogfileGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2129);
			match(LOGFILE_SYMBOL);
			setState(2130);
			match(GROUP_SYMBOL);
			setState(2131);
			logfileGroupName();
			setState(2132);
			match(ADD_SYMBOL);
			setState(2133);
			_la = _input.LA(1);
			if ( !(_la==REDOFILE_SYMBOL || _la==UNDOFILE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2134);
			textLiteral();
			setState(2136);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,148,_ctx) ) {
			case 1:
				{
				setState(2135);
				logfileGroupOptions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LogfileGroupOptionsContext extends ParserRuleContext {
		public List<LogfileGroupOptionContext> logfileGroupOption() {
			return getRuleContexts(LogfileGroupOptionContext.class);
		}
		public LogfileGroupOptionContext logfileGroupOption(int i) {
			return getRuleContext(LogfileGroupOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public LogfileGroupOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logfileGroupOptions; }
	}

	public final LogfileGroupOptionsContext logfileGroupOptions() throws RecognitionException {
		LogfileGroupOptionsContext _localctx = new LogfileGroupOptionsContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_logfileGroupOptions);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2138);
			logfileGroupOption();
			setState(2145);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,150,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2140);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA_SYMBOL) {
						{
						setState(2139);
						match(COMMA_SYMBOL);
						}
					}

					setState(2142);
					logfileGroupOption();
					}
					} 
				}
				setState(2147);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,150,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LogfileGroupOptionContext extends ParserRuleContext {
		public TsOptionInitialSizeContext tsOptionInitialSize() {
			return getRuleContext(TsOptionInitialSizeContext.class,0);
		}
		public TsOptionUndoRedoBufferSizeContext tsOptionUndoRedoBufferSize() {
			return getRuleContext(TsOptionUndoRedoBufferSizeContext.class,0);
		}
		public TsOptionNodegroupContext tsOptionNodegroup() {
			return getRuleContext(TsOptionNodegroupContext.class,0);
		}
		public TsOptionEngineContext tsOptionEngine() {
			return getRuleContext(TsOptionEngineContext.class,0);
		}
		public TsOptionWaitContext tsOptionWait() {
			return getRuleContext(TsOptionWaitContext.class,0);
		}
		public TsOptionCommentContext tsOptionComment() {
			return getRuleContext(TsOptionCommentContext.class,0);
		}
		public LogfileGroupOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logfileGroupOption; }
	}

	public final LogfileGroupOptionContext logfileGroupOption() throws RecognitionException {
		LogfileGroupOptionContext _localctx = new LogfileGroupOptionContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_logfileGroupOption);
		try {
			setState(2154);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INITIAL_SIZE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2148);
				tsOptionInitialSize();
				}
				break;
			case REDO_BUFFER_SIZE_SYMBOL:
			case UNDO_BUFFER_SIZE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2149);
				tsOptionUndoRedoBufferSize();
				}
				break;
			case NODEGROUP_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(2150);
				tsOptionNodegroup();
				}
				break;
			case ENGINE_SYMBOL:
			case STORAGE_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(2151);
				tsOptionEngine();
				}
				break;
			case NO_WAIT_SYMBOL:
			case WAIT_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(2152);
				tsOptionWait();
				}
				break;
			case COMMENT_SYMBOL:
				enterOuterAlt(_localctx, 6);
				{
				setState(2153);
				tsOptionComment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateServerContext extends ParserRuleContext {
		public TerminalNode SERVER_SYMBOL() { return getToken(MultiQueryMySQLParser.SERVER_SYMBOL, 0); }
		public ServerNameContext serverName() {
			return getRuleContext(ServerNameContext.class,0);
		}
		public TerminalNode FOREIGN_SYMBOL() { return getToken(MultiQueryMySQLParser.FOREIGN_SYMBOL, 0); }
		public TerminalNode DATA_SYMBOL() { return getToken(MultiQueryMySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode WRAPPER_SYMBOL() { return getToken(MultiQueryMySQLParser.WRAPPER_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public ServerOptionsContext serverOptions() {
			return getRuleContext(ServerOptionsContext.class,0);
		}
		public CreateServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createServer; }
	}

	public final CreateServerContext createServer() throws RecognitionException {
		CreateServerContext _localctx = new CreateServerContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_createServer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2156);
			match(SERVER_SYMBOL);
			setState(2157);
			serverName();
			setState(2158);
			match(FOREIGN_SYMBOL);
			setState(2159);
			match(DATA_SYMBOL);
			setState(2160);
			match(WRAPPER_SYMBOL);
			setState(2161);
			textOrIdentifier();
			setState(2162);
			serverOptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ServerOptionsContext extends ParserRuleContext {
		public TerminalNode OPTIONS_SYMBOL() { return getToken(MultiQueryMySQLParser.OPTIONS_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<ServerOptionContext> serverOption() {
			return getRuleContexts(ServerOptionContext.class);
		}
		public ServerOptionContext serverOption(int i) {
			return getRuleContext(ServerOptionContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public ServerOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serverOptions; }
	}

	public final ServerOptionsContext serverOptions() throws RecognitionException {
		ServerOptionsContext _localctx = new ServerOptionsContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_serverOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2164);
			match(OPTIONS_SYMBOL);
			setState(2165);
			match(OPEN_PAR_SYMBOL);
			setState(2166);
			serverOption();
			setState(2171);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(2167);
				match(COMMA_SYMBOL);
				setState(2168);
				serverOption();
				}
				}
				setState(2173);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2174);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ServerOptionContext extends ParserRuleContext {
		public Token option;
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode HOST_SYMBOL() { return getToken(MultiQueryMySQLParser.HOST_SYMBOL, 0); }
		public TerminalNode DATABASE_SYMBOL() { return getToken(MultiQueryMySQLParser.DATABASE_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MultiQueryMySQLParser.USER_SYMBOL, 0); }
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MultiQueryMySQLParser.PASSWORD_SYMBOL, 0); }
		public TerminalNode SOCKET_SYMBOL() { return getToken(MultiQueryMySQLParser.SOCKET_SYMBOL, 0); }
		public TerminalNode OWNER_SYMBOL() { return getToken(MultiQueryMySQLParser.OWNER_SYMBOL, 0); }
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public TerminalNode PORT_SYMBOL() { return getToken(MultiQueryMySQLParser.PORT_SYMBOL, 0); }
		public ServerOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serverOption; }
	}

	public final ServerOptionContext serverOption() throws RecognitionException {
		ServerOptionContext _localctx = new ServerOptionContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_serverOption);
		try {
			setState(2190);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case HOST_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2176);
				((ServerOptionContext)_localctx).option = match(HOST_SYMBOL);
				setState(2177);
				textLiteral();
				}
				break;
			case DATABASE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2178);
				((ServerOptionContext)_localctx).option = match(DATABASE_SYMBOL);
				setState(2179);
				textLiteral();
				}
				break;
			case USER_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(2180);
				((ServerOptionContext)_localctx).option = match(USER_SYMBOL);
				setState(2181);
				textLiteral();
				}
				break;
			case PASSWORD_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(2182);
				((ServerOptionContext)_localctx).option = match(PASSWORD_SYMBOL);
				setState(2183);
				textLiteral();
				}
				break;
			case SOCKET_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(2184);
				((ServerOptionContext)_localctx).option = match(SOCKET_SYMBOL);
				setState(2185);
				textLiteral();
				}
				break;
			case OWNER_SYMBOL:
				enterOuterAlt(_localctx, 6);
				{
				setState(2186);
				((ServerOptionContext)_localctx).option = match(OWNER_SYMBOL);
				setState(2187);
				textLiteral();
				}
				break;
			case PORT_SYMBOL:
				enterOuterAlt(_localctx, 7);
				{
				setState(2188);
				((ServerOptionContext)_localctx).option = match(PORT_SYMBOL);
				setState(2189);
				ulong_number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTablespaceContext extends ParserRuleContext {
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MultiQueryMySQLParser.TABLESPACE_SYMBOL, 0); }
		public TablespaceNameContext tablespaceName() {
			return getRuleContext(TablespaceNameContext.class,0);
		}
		public TsDataFileNameContext tsDataFileName() {
			return getRuleContext(TsDataFileNameContext.class,0);
		}
		public TerminalNode USE_SYMBOL() { return getToken(MultiQueryMySQLParser.USE_SYMBOL, 0); }
		public TerminalNode LOGFILE_SYMBOL() { return getToken(MultiQueryMySQLParser.LOGFILE_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MultiQueryMySQLParser.GROUP_SYMBOL, 0); }
		public LogfileGroupRefContext logfileGroupRef() {
			return getRuleContext(LogfileGroupRefContext.class,0);
		}
		public TablespaceOptionsContext tablespaceOptions() {
			return getRuleContext(TablespaceOptionsContext.class,0);
		}
		public CreateTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTablespace; }
	}

	public final CreateTablespaceContext createTablespace() throws RecognitionException {
		CreateTablespaceContext _localctx = new CreateTablespaceContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_createTablespace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2192);
			match(TABLESPACE_SYMBOL);
			setState(2193);
			tablespaceName();
			setState(2194);
			tsDataFileName();
			setState(2199);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,154,_ctx) ) {
			case 1:
				{
				setState(2195);
				match(USE_SYMBOL);
				setState(2196);
				match(LOGFILE_SYMBOL);
				setState(2197);
				match(GROUP_SYMBOL);
				setState(2198);
				logfileGroupRef();
				}
				break;
			}
			setState(2202);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,155,_ctx) ) {
			case 1:
				{
				setState(2201);
				tablespaceOptions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUndoTablespaceContext extends ParserRuleContext {
		public TerminalNode UNDO_SYMBOL() { return getToken(MultiQueryMySQLParser.UNDO_SYMBOL, 0); }
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MultiQueryMySQLParser.TABLESPACE_SYMBOL, 0); }
		public TablespaceNameContext tablespaceName() {
			return getRuleContext(TablespaceNameContext.class,0);
		}
		public TerminalNode ADD_SYMBOL() { return getToken(MultiQueryMySQLParser.ADD_SYMBOL, 0); }
		public TsDataFileContext tsDataFile() {
			return getRuleContext(TsDataFileContext.class,0);
		}
		public UndoTableSpaceOptionsContext undoTableSpaceOptions() {
			return getRuleContext(UndoTableSpaceOptionsContext.class,0);
		}
		public CreateUndoTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUndoTablespace; }
	}

	public final CreateUndoTablespaceContext createUndoTablespace() throws RecognitionException {
		CreateUndoTablespaceContext _localctx = new CreateUndoTablespaceContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_createUndoTablespace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2204);
			match(UNDO_SYMBOL);
			setState(2205);
			match(TABLESPACE_SYMBOL);
			setState(2206);
			tablespaceName();
			setState(2207);
			match(ADD_SYMBOL);
			setState(2208);
			tsDataFile();
			setState(2210);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,156,_ctx) ) {
			case 1:
				{
				setState(2209);
				undoTableSpaceOptions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TsDataFileNameContext extends ParserRuleContext {
		public TerminalNode ADD_SYMBOL() { return getToken(MultiQueryMySQLParser.ADD_SYMBOL, 0); }
		public TsDataFileContext tsDataFile() {
			return getRuleContext(TsDataFileContext.class,0);
		}
		public TsDataFileNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsDataFileName; }
	}

	public final TsDataFileNameContext tsDataFileName() throws RecognitionException {
		TsDataFileNameContext _localctx = new TsDataFileNameContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_tsDataFileName);
		try {
			setState(2219);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,158,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2212);
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				setState(2215);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,157,_ctx) ) {
				case 1:
					{
					setState(2213);
					match(ADD_SYMBOL);
					setState(2214);
					tsDataFile();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2217);
				match(ADD_SYMBOL);
				setState(2218);
				tsDataFile();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TsDataFileContext extends ParserRuleContext {
		public TerminalNode DATAFILE_SYMBOL() { return getToken(MultiQueryMySQLParser.DATAFILE_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TsDataFileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsDataFile; }
	}

	public final TsDataFileContext tsDataFile() throws RecognitionException {
		TsDataFileContext _localctx = new TsDataFileContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_tsDataFile);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2221);
			match(DATAFILE_SYMBOL);
			setState(2222);
			textLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablespaceOptionsContext extends ParserRuleContext {
		public List<TablespaceOptionContext> tablespaceOption() {
			return getRuleContexts(TablespaceOptionContext.class);
		}
		public TablespaceOptionContext tablespaceOption(int i) {
			return getRuleContext(TablespaceOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public TablespaceOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespaceOptions; }
	}

	public final TablespaceOptionsContext tablespaceOptions() throws RecognitionException {
		TablespaceOptionsContext _localctx = new TablespaceOptionsContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_tablespaceOptions);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2224);
			tablespaceOption();
			setState(2231);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,160,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2226);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,159,_ctx) ) {
					case 1:
						{
						setState(2225);
						match(COMMA_SYMBOL);
						}
						break;
					}
					setState(2228);
					tablespaceOption();
					}
					} 
				}
				setState(2233);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,160,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablespaceOptionContext extends ParserRuleContext {
		public TsOptionInitialSizeContext tsOptionInitialSize() {
			return getRuleContext(TsOptionInitialSizeContext.class,0);
		}
		public TsOptionAutoextendSizeContext tsOptionAutoextendSize() {
			return getRuleContext(TsOptionAutoextendSizeContext.class,0);
		}
		public TsOptionMaxSizeContext tsOptionMaxSize() {
			return getRuleContext(TsOptionMaxSizeContext.class,0);
		}
		public TsOptionExtentSizeContext tsOptionExtentSize() {
			return getRuleContext(TsOptionExtentSizeContext.class,0);
		}
		public TsOptionNodegroupContext tsOptionNodegroup() {
			return getRuleContext(TsOptionNodegroupContext.class,0);
		}
		public TsOptionEngineContext tsOptionEngine() {
			return getRuleContext(TsOptionEngineContext.class,0);
		}
		public TsOptionWaitContext tsOptionWait() {
			return getRuleContext(TsOptionWaitContext.class,0);
		}
		public TsOptionCommentContext tsOptionComment() {
			return getRuleContext(TsOptionCommentContext.class,0);
		}
		public TsOptionFileblockSizeContext tsOptionFileblockSize() {
			return getRuleContext(TsOptionFileblockSizeContext.class,0);
		}
		public TsOptionEncryptionContext tsOptionEncryption() {
			return getRuleContext(TsOptionEncryptionContext.class,0);
		}
		public TablespaceOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespaceOption; }
	}

	public final TablespaceOptionContext tablespaceOption() throws RecognitionException {
		TablespaceOptionContext _localctx = new TablespaceOptionContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_tablespaceOption);
		try {
			setState(2246);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,161,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2234);
				tsOptionInitialSize();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2235);
				tsOptionAutoextendSize();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2236);
				tsOptionMaxSize();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2237);
				tsOptionExtentSize();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2238);
				tsOptionNodegroup();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2239);
				tsOptionEngine();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2240);
				tsOptionWait();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2241);
				tsOptionComment();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2242);
				if (!(serverVersion >= 50707)) throw new FailedPredicateException(this, "serverVersion >= 50707");
				setState(2243);
				tsOptionFileblockSize();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2244);
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				setState(2245);
				tsOptionEncryption();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TsOptionInitialSizeContext extends ParserRuleContext {
		public TerminalNode INITIAL_SIZE_SYMBOL() { return getToken(MultiQueryMySQLParser.INITIAL_SIZE_SYMBOL, 0); }
		public SizeNumberContext sizeNumber() {
			return getRuleContext(SizeNumberContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionInitialSizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsOptionInitialSize; }
	}

	public final TsOptionInitialSizeContext tsOptionInitialSize() throws RecognitionException {
		TsOptionInitialSizeContext _localctx = new TsOptionInitialSizeContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_tsOptionInitialSize);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2248);
			match(INITIAL_SIZE_SYMBOL);
			setState(2250);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,162,_ctx) ) {
			case 1:
				{
				setState(2249);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(2252);
			sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TsOptionUndoRedoBufferSizeContext extends ParserRuleContext {
		public SizeNumberContext sizeNumber() {
			return getRuleContext(SizeNumberContext.class,0);
		}
		public TerminalNode UNDO_BUFFER_SIZE_SYMBOL() { return getToken(MultiQueryMySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0); }
		public TerminalNode REDO_BUFFER_SIZE_SYMBOL() { return getToken(MultiQueryMySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionUndoRedoBufferSizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsOptionUndoRedoBufferSize; }
	}

	public final TsOptionUndoRedoBufferSizeContext tsOptionUndoRedoBufferSize() throws RecognitionException {
		TsOptionUndoRedoBufferSizeContext _localctx = new TsOptionUndoRedoBufferSizeContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_tsOptionUndoRedoBufferSize);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2254);
			_la = _input.LA(1);
			if ( !(_la==REDO_BUFFER_SIZE_SYMBOL || _la==UNDO_BUFFER_SIZE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2256);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,163,_ctx) ) {
			case 1:
				{
				setState(2255);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(2258);
			sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TsOptionAutoextendSizeContext extends ParserRuleContext {
		public TerminalNode AUTOEXTEND_SIZE_SYMBOL() { return getToken(MultiQueryMySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0); }
		public SizeNumberContext sizeNumber() {
			return getRuleContext(SizeNumberContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionAutoextendSizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsOptionAutoextendSize; }
	}

	public final TsOptionAutoextendSizeContext tsOptionAutoextendSize() throws RecognitionException {
		TsOptionAutoextendSizeContext _localctx = new TsOptionAutoextendSizeContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_tsOptionAutoextendSize);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2260);
			match(AUTOEXTEND_SIZE_SYMBOL);
			setState(2262);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,164,_ctx) ) {
			case 1:
				{
				setState(2261);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(2264);
			sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TsOptionMaxSizeContext extends ParserRuleContext {
		public TerminalNode MAX_SIZE_SYMBOL() { return getToken(MultiQueryMySQLParser.MAX_SIZE_SYMBOL, 0); }
		public SizeNumberContext sizeNumber() {
			return getRuleContext(SizeNumberContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionMaxSizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsOptionMaxSize; }
	}

	public final TsOptionMaxSizeContext tsOptionMaxSize() throws RecognitionException {
		TsOptionMaxSizeContext _localctx = new TsOptionMaxSizeContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_tsOptionMaxSize);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2266);
			match(MAX_SIZE_SYMBOL);
			setState(2268);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,165,_ctx) ) {
			case 1:
				{
				setState(2267);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(2270);
			sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TsOptionExtentSizeContext extends ParserRuleContext {
		public TerminalNode EXTENT_SIZE_SYMBOL() { return getToken(MultiQueryMySQLParser.EXTENT_SIZE_SYMBOL, 0); }
		public SizeNumberContext sizeNumber() {
			return getRuleContext(SizeNumberContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionExtentSizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsOptionExtentSize; }
	}

	public final TsOptionExtentSizeContext tsOptionExtentSize() throws RecognitionException {
		TsOptionExtentSizeContext _localctx = new TsOptionExtentSizeContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_tsOptionExtentSize);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2272);
			match(EXTENT_SIZE_SYMBOL);
			setState(2274);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,166,_ctx) ) {
			case 1:
				{
				setState(2273);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(2276);
			sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TsOptionNodegroupContext extends ParserRuleContext {
		public TerminalNode NODEGROUP_SYMBOL() { return getToken(MultiQueryMySQLParser.NODEGROUP_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionNodegroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsOptionNodegroup; }
	}

	public final TsOptionNodegroupContext tsOptionNodegroup() throws RecognitionException {
		TsOptionNodegroupContext _localctx = new TsOptionNodegroupContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_tsOptionNodegroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2278);
			match(NODEGROUP_SYMBOL);
			setState(2280);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_OPERATOR) {
				{
				setState(2279);
				match(EQUAL_OPERATOR);
				}
			}

			setState(2282);
			real_ulong_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TsOptionEngineContext extends ParserRuleContext {
		public TerminalNode ENGINE_SYMBOL() { return getToken(MultiQueryMySQLParser.ENGINE_SYMBOL, 0); }
		public EngineRefContext engineRef() {
			return getRuleContext(EngineRefContext.class,0);
		}
		public TerminalNode STORAGE_SYMBOL() { return getToken(MultiQueryMySQLParser.STORAGE_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionEngineContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsOptionEngine; }
	}

	public final TsOptionEngineContext tsOptionEngine() throws RecognitionException {
		TsOptionEngineContext _localctx = new TsOptionEngineContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_tsOptionEngine);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2285);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STORAGE_SYMBOL) {
				{
				setState(2284);
				match(STORAGE_SYMBOL);
				}
			}

			setState(2287);
			match(ENGINE_SYMBOL);
			setState(2289);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,169,_ctx) ) {
			case 1:
				{
				setState(2288);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(2291);
			engineRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TsOptionWaitContext extends ParserRuleContext {
		public TerminalNode WAIT_SYMBOL() { return getToken(MultiQueryMySQLParser.WAIT_SYMBOL, 0); }
		public TerminalNode NO_WAIT_SYMBOL() { return getToken(MultiQueryMySQLParser.NO_WAIT_SYMBOL, 0); }
		public TsOptionWaitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsOptionWait; }
	}

	public final TsOptionWaitContext tsOptionWait() throws RecognitionException {
		TsOptionWaitContext _localctx = new TsOptionWaitContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_tsOptionWait);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2293);
			_la = _input.LA(1);
			if ( !(_la==NO_WAIT_SYMBOL || _la==WAIT_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TsOptionCommentContext extends ParserRuleContext {
		public TerminalNode COMMENT_SYMBOL() { return getToken(MultiQueryMySQLParser.COMMENT_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionCommentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsOptionComment; }
	}

	public final TsOptionCommentContext tsOptionComment() throws RecognitionException {
		TsOptionCommentContext _localctx = new TsOptionCommentContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_tsOptionComment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2295);
			match(COMMENT_SYMBOL);
			setState(2297);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,170,_ctx) ) {
			case 1:
				{
				setState(2296);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(2299);
			textLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TsOptionFileblockSizeContext extends ParserRuleContext {
		public TerminalNode FILE_BLOCK_SIZE_SYMBOL() { return getToken(MultiQueryMySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0); }
		public SizeNumberContext sizeNumber() {
			return getRuleContext(SizeNumberContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionFileblockSizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsOptionFileblockSize; }
	}

	public final TsOptionFileblockSizeContext tsOptionFileblockSize() throws RecognitionException {
		TsOptionFileblockSizeContext _localctx = new TsOptionFileblockSizeContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_tsOptionFileblockSize);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2301);
			match(FILE_BLOCK_SIZE_SYMBOL);
			setState(2303);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,171,_ctx) ) {
			case 1:
				{
				setState(2302);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(2305);
			sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TsOptionEncryptionContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION_SYMBOL() { return getToken(MultiQueryMySQLParser.ENCRYPTION_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionEncryptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsOptionEncryption; }
	}

	public final TsOptionEncryptionContext tsOptionEncryption() throws RecognitionException {
		TsOptionEncryptionContext _localctx = new TsOptionEncryptionContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_tsOptionEncryption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2307);
			match(ENCRYPTION_SYMBOL);
			setState(2309);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,172,_ctx) ) {
			case 1:
				{
				setState(2308);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(2311);
			textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateViewContext extends ParserRuleContext {
		public TerminalNode VIEW_SYMBOL() { return getToken(MultiQueryMySQLParser.VIEW_SYMBOL, 0); }
		public ViewNameContext viewName() {
			return getRuleContext(ViewNameContext.class,0);
		}
		public ViewTailContext viewTail() {
			return getRuleContext(ViewTailContext.class,0);
		}
		public ViewReplaceOrAlgorithmContext viewReplaceOrAlgorithm() {
			return getRuleContext(ViewReplaceOrAlgorithmContext.class,0);
		}
		public DefinerClauseContext definerClause() {
			return getRuleContext(DefinerClauseContext.class,0);
		}
		public ViewSuidContext viewSuid() {
			return getRuleContext(ViewSuidContext.class,0);
		}
		public CreateViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createView; }
	}

	public final CreateViewContext createView() throws RecognitionException {
		CreateViewContext _localctx = new CreateViewContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_createView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2314);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALGORITHM_SYMBOL || _la==OR_SYMBOL) {
				{
				setState(2313);
				viewReplaceOrAlgorithm();
				}
			}

			setState(2317);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				setState(2316);
				definerClause();
				}
			}

			setState(2320);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL_SYMBOL) {
				{
				setState(2319);
				viewSuid();
				}
			}

			setState(2322);
			match(VIEW_SYMBOL);
			setState(2323);
			viewName();
			setState(2324);
			viewTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewReplaceOrAlgorithmContext extends ParserRuleContext {
		public TerminalNode OR_SYMBOL() { return getToken(MultiQueryMySQLParser.OR_SYMBOL, 0); }
		public TerminalNode REPLACE_SYMBOL() { return getToken(MultiQueryMySQLParser.REPLACE_SYMBOL, 0); }
		public ViewAlgorithmContext viewAlgorithm() {
			return getRuleContext(ViewAlgorithmContext.class,0);
		}
		public ViewReplaceOrAlgorithmContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewReplaceOrAlgorithm; }
	}

	public final ViewReplaceOrAlgorithmContext viewReplaceOrAlgorithm() throws RecognitionException {
		ViewReplaceOrAlgorithmContext _localctx = new ViewReplaceOrAlgorithmContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_viewReplaceOrAlgorithm);
		int _la;
		try {
			setState(2332);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OR_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2326);
				match(OR_SYMBOL);
				setState(2327);
				match(REPLACE_SYMBOL);
				setState(2329);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALGORITHM_SYMBOL) {
					{
					setState(2328);
					viewAlgorithm();
					}
				}

				}
				break;
			case ALGORITHM_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2331);
				viewAlgorithm();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewAlgorithmContext extends ParserRuleContext {
		public Token algorithm;
		public TerminalNode ALGORITHM_SYMBOL() { return getToken(MultiQueryMySQLParser.ALGORITHM_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
		public TerminalNode UNDEFINED_SYMBOL() { return getToken(MultiQueryMySQLParser.UNDEFINED_SYMBOL, 0); }
		public TerminalNode MERGE_SYMBOL() { return getToken(MultiQueryMySQLParser.MERGE_SYMBOL, 0); }
		public TerminalNode TEMPTABLE_SYMBOL() { return getToken(MultiQueryMySQLParser.TEMPTABLE_SYMBOL, 0); }
		public ViewAlgorithmContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewAlgorithm; }
	}

	public final ViewAlgorithmContext viewAlgorithm() throws RecognitionException {
		ViewAlgorithmContext _localctx = new ViewAlgorithmContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_viewAlgorithm);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2334);
			match(ALGORITHM_SYMBOL);
			setState(2335);
			match(EQUAL_OPERATOR);
			setState(2336);
			((ViewAlgorithmContext)_localctx).algorithm = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==MERGE_SYMBOL || _la==TEMPTABLE_SYMBOL || _la==UNDEFINED_SYMBOL) ) {
				((ViewAlgorithmContext)_localctx).algorithm = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewSuidContext extends ParserRuleContext {
		public TerminalNode SQL_SYMBOL() { return getToken(MultiQueryMySQLParser.SQL_SYMBOL, 0); }
		public TerminalNode SECURITY_SYMBOL() { return getToken(MultiQueryMySQLParser.SECURITY_SYMBOL, 0); }
		public TerminalNode DEFINER_SYMBOL() { return getToken(MultiQueryMySQLParser.DEFINER_SYMBOL, 0); }
		public TerminalNode INVOKER_SYMBOL() { return getToken(MultiQueryMySQLParser.INVOKER_SYMBOL, 0); }
		public ViewSuidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewSuid; }
	}

	public final ViewSuidContext viewSuid() throws RecognitionException {
		ViewSuidContext _localctx = new ViewSuidContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_viewSuid);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2338);
			match(SQL_SYMBOL);
			setState(2339);
			match(SECURITY_SYMBOL);
			setState(2340);
			_la = _input.LA(1);
			if ( !(_la==DEFINER_SYMBOL || _la==INVOKER_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTriggerContext extends ParserRuleContext {
		public Token timing;
		public Token event;
		public TerminalNode TRIGGER_SYMBOL() { return getToken(MultiQueryMySQLParser.TRIGGER_SYMBOL, 0); }
		public TriggerNameContext triggerName() {
			return getRuleContext(TriggerNameContext.class,0);
		}
		public TerminalNode ON_SYMBOL() { return getToken(MultiQueryMySQLParser.ON_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public TerminalNode FOR_SYMBOL() { return getToken(MultiQueryMySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode EACH_SYMBOL() { return getToken(MultiQueryMySQLParser.EACH_SYMBOL, 0); }
		public TerminalNode ROW_SYMBOL() { return getToken(MultiQueryMySQLParser.ROW_SYMBOL, 0); }
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public TerminalNode BEFORE_SYMBOL() { return getToken(MultiQueryMySQLParser.BEFORE_SYMBOL, 0); }
		public TerminalNode AFTER_SYMBOL() { return getToken(MultiQueryMySQLParser.AFTER_SYMBOL, 0); }
		public TerminalNode INSERT_SYMBOL() { return getToken(MultiQueryMySQLParser.INSERT_SYMBOL, 0); }
		public TerminalNode UPDATE_SYMBOL() { return getToken(MultiQueryMySQLParser.UPDATE_SYMBOL, 0); }
		public TerminalNode DELETE_SYMBOL() { return getToken(MultiQueryMySQLParser.DELETE_SYMBOL, 0); }
		public DefinerClauseContext definerClause() {
			return getRuleContext(DefinerClauseContext.class,0);
		}
		public TriggerFollowsPrecedesClauseContext triggerFollowsPrecedesClause() {
			return getRuleContext(TriggerFollowsPrecedesClauseContext.class,0);
		}
		public CreateTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTrigger; }
	}

	public final CreateTriggerContext createTrigger() throws RecognitionException {
		CreateTriggerContext _localctx = new CreateTriggerContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_createTrigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2343);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				setState(2342);
				definerClause();
				}
			}

			setState(2345);
			match(TRIGGER_SYMBOL);
			setState(2346);
			triggerName();
			setState(2347);
			((CreateTriggerContext)_localctx).timing = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==AFTER_SYMBOL || _la==BEFORE_SYMBOL) ) {
				((CreateTriggerContext)_localctx).timing = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2348);
			((CreateTriggerContext)_localctx).event = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DELETE_SYMBOL || _la==INSERT_SYMBOL || _la==UPDATE_SYMBOL) ) {
				((CreateTriggerContext)_localctx).event = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2349);
			match(ON_SYMBOL);
			setState(2350);
			tableRef();
			setState(2351);
			match(FOR_SYMBOL);
			setState(2352);
			match(EACH_SYMBOL);
			setState(2353);
			match(ROW_SYMBOL);
			setState(2355);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,179,_ctx) ) {
			case 1:
				{
				setState(2354);
				triggerFollowsPrecedesClause();
				}
				break;
			}
			setState(2357);
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerFollowsPrecedesClauseContext extends ParserRuleContext {
		public Token ordering;
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public TerminalNode FOLLOWS_SYMBOL() { return getToken(MultiQueryMySQLParser.FOLLOWS_SYMBOL, 0); }
		public TerminalNode PRECEDES_SYMBOL() { return getToken(MultiQueryMySQLParser.PRECEDES_SYMBOL, 0); }
		public TriggerFollowsPrecedesClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerFollowsPrecedesClause; }
	}

	public final TriggerFollowsPrecedesClauseContext triggerFollowsPrecedesClause() throws RecognitionException {
		TriggerFollowsPrecedesClauseContext _localctx = new TriggerFollowsPrecedesClauseContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_triggerFollowsPrecedesClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2359);
			if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
			setState(2360);
			((TriggerFollowsPrecedesClauseContext)_localctx).ordering = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==FOLLOWS_SYMBOL || _la==PRECEDES_SYMBOL) ) {
				((TriggerFollowsPrecedesClauseContext)_localctx).ordering = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2361);
			textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateEventContext extends ParserRuleContext {
		public TerminalNode EVENT_SYMBOL() { return getToken(MultiQueryMySQLParser.EVENT_SYMBOL, 0); }
		public EventNameContext eventName() {
			return getRuleContext(EventNameContext.class,0);
		}
		public List<TerminalNode> ON_SYMBOL() { return getTokens(MultiQueryMySQLParser.ON_SYMBOL); }
		public TerminalNode ON_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.ON_SYMBOL, i);
		}
		public TerminalNode SCHEDULE_SYMBOL() { return getToken(MultiQueryMySQLParser.SCHEDULE_SYMBOL, 0); }
		public ScheduleContext schedule() {
			return getRuleContext(ScheduleContext.class,0);
		}
		public TerminalNode DO_SYMBOL() { return getToken(MultiQueryMySQLParser.DO_SYMBOL, 0); }
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public DefinerClauseContext definerClause() {
			return getRuleContext(DefinerClauseContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public TerminalNode COMPLETION_SYMBOL() { return getToken(MultiQueryMySQLParser.COMPLETION_SYMBOL, 0); }
		public TerminalNode PRESERVE_SYMBOL() { return getToken(MultiQueryMySQLParser.PRESERVE_SYMBOL, 0); }
		public TerminalNode ENABLE_SYMBOL() { return getToken(MultiQueryMySQLParser.ENABLE_SYMBOL, 0); }
		public TerminalNode DISABLE_SYMBOL() { return getToken(MultiQueryMySQLParser.DISABLE_SYMBOL, 0); }
		public TerminalNode COMMENT_SYMBOL() { return getToken(MultiQueryMySQLParser.COMMENT_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode NOT_SYMBOL() { return getToken(MultiQueryMySQLParser.NOT_SYMBOL, 0); }
		public TerminalNode SLAVE_SYMBOL() { return getToken(MultiQueryMySQLParser.SLAVE_SYMBOL, 0); }
		public CreateEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createEvent; }
	}

	public final CreateEventContext createEvent() throws RecognitionException {
		CreateEventContext _localctx = new CreateEventContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_createEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2364);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				setState(2363);
				definerClause();
				}
			}

			setState(2366);
			match(EVENT_SYMBOL);
			setState(2368);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,181,_ctx) ) {
			case 1:
				{
				setState(2367);
				ifNotExists();
				}
				break;
			}
			setState(2370);
			eventName();
			setState(2371);
			match(ON_SYMBOL);
			setState(2372);
			match(SCHEDULE_SYMBOL);
			setState(2373);
			schedule();
			setState(2380);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON_SYMBOL) {
				{
				setState(2374);
				match(ON_SYMBOL);
				setState(2375);
				match(COMPLETION_SYMBOL);
				setState(2377);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT_SYMBOL) {
					{
					setState(2376);
					match(NOT_SYMBOL);
					}
				}

				setState(2379);
				match(PRESERVE_SYMBOL);
				}
			}

			setState(2388);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENABLE_SYMBOL:
				{
				setState(2382);
				match(ENABLE_SYMBOL);
				}
				break;
			case DISABLE_SYMBOL:
				{
				setState(2383);
				match(DISABLE_SYMBOL);
				setState(2386);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON_SYMBOL) {
					{
					setState(2384);
					match(ON_SYMBOL);
					setState(2385);
					match(SLAVE_SYMBOL);
					}
				}

				}
				break;
			case COMMENT_SYMBOL:
			case DO_SYMBOL:
				break;
			default:
				break;
			}
			setState(2392);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT_SYMBOL) {
				{
				setState(2390);
				match(COMMENT_SYMBOL);
				setState(2391);
				textLiteral();
				}
			}

			setState(2394);
			match(DO_SYMBOL);
			setState(2395);
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateRoleContext extends ParserRuleContext {
		public TerminalNode ROLE_SYMBOL() { return getToken(MultiQueryMySQLParser.ROLE_SYMBOL, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CreateRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createRole; }
	}

	public final CreateRoleContext createRole() throws RecognitionException {
		CreateRoleContext _localctx = new CreateRoleContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_createRole);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2397);
			match(ROLE_SYMBOL);
			setState(2399);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,187,_ctx) ) {
			case 1:
				{
				setState(2398);
				ifNotExists();
				}
				break;
			}
			setState(2401);
			roleList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateSpatialReferenceContext extends ParserRuleContext {
		public TerminalNode OR_SYMBOL() { return getToken(MultiQueryMySQLParser.OR_SYMBOL, 0); }
		public TerminalNode REPLACE_SYMBOL() { return getToken(MultiQueryMySQLParser.REPLACE_SYMBOL, 0); }
		public TerminalNode SPATIAL_SYMBOL() { return getToken(MultiQueryMySQLParser.SPATIAL_SYMBOL, 0); }
		public TerminalNode REFERENCE_SYMBOL() { return getToken(MultiQueryMySQLParser.REFERENCE_SYMBOL, 0); }
		public TerminalNode SYSTEM_SYMBOL() { return getToken(MultiQueryMySQLParser.SYSTEM_SYMBOL, 0); }
		public Real_ulonglong_numberContext real_ulonglong_number() {
			return getRuleContext(Real_ulonglong_numberContext.class,0);
		}
		public List<SrsAttributeContext> srsAttribute() {
			return getRuleContexts(SrsAttributeContext.class);
		}
		public SrsAttributeContext srsAttribute(int i) {
			return getRuleContext(SrsAttributeContext.class,i);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CreateSpatialReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createSpatialReference; }
	}

	public final CreateSpatialReferenceContext createSpatialReference() throws RecognitionException {
		CreateSpatialReferenceContext _localctx = new CreateSpatialReferenceContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_createSpatialReference);
		try {
			int _alt;
			setState(2428);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OR_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2403);
				match(OR_SYMBOL);
				setState(2404);
				match(REPLACE_SYMBOL);
				setState(2405);
				match(SPATIAL_SYMBOL);
				setState(2406);
				match(REFERENCE_SYMBOL);
				setState(2407);
				match(SYSTEM_SYMBOL);
				setState(2408);
				real_ulonglong_number();
				setState(2412);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,188,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2409);
						srsAttribute();
						}
						} 
					}
					setState(2414);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,188,_ctx);
				}
				}
				break;
			case SPATIAL_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2415);
				match(SPATIAL_SYMBOL);
				setState(2416);
				match(REFERENCE_SYMBOL);
				setState(2417);
				match(SYSTEM_SYMBOL);
				setState(2419);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,189,_ctx) ) {
				case 1:
					{
					setState(2418);
					ifNotExists();
					}
					break;
				}
				setState(2421);
				real_ulonglong_number();
				setState(2425);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,190,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2422);
						srsAttribute();
						}
						} 
					}
					setState(2427);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,190,_ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SrsAttributeContext extends ParserRuleContext {
		public TerminalNode NAME_SYMBOL() { return getToken(MultiQueryMySQLParser.NAME_SYMBOL, 0); }
		public TerminalNode TEXT_SYMBOL() { return getToken(MultiQueryMySQLParser.TEXT_SYMBOL, 0); }
		public TextStringNoLinebreakContext textStringNoLinebreak() {
			return getRuleContext(TextStringNoLinebreakContext.class,0);
		}
		public TerminalNode DEFINITION_SYMBOL() { return getToken(MultiQueryMySQLParser.DEFINITION_SYMBOL, 0); }
		public TerminalNode ORGANIZATION_SYMBOL() { return getToken(MultiQueryMySQLParser.ORGANIZATION_SYMBOL, 0); }
		public TerminalNode IDENTIFIED_SYMBOL() { return getToken(MultiQueryMySQLParser.IDENTIFIED_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MultiQueryMySQLParser.BY_SYMBOL, 0); }
		public Real_ulonglong_numberContext real_ulonglong_number() {
			return getRuleContext(Real_ulonglong_numberContext.class,0);
		}
		public TerminalNode DESCRIPTION_SYMBOL() { return getToken(MultiQueryMySQLParser.DESCRIPTION_SYMBOL, 0); }
		public SrsAttributeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_srsAttribute; }
	}

	public final SrsAttributeContext srsAttribute() throws RecognitionException {
		SrsAttributeContext _localctx = new SrsAttributeContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_srsAttribute);
		try {
			setState(2445);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NAME_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2430);
				match(NAME_SYMBOL);
				setState(2431);
				match(TEXT_SYMBOL);
				setState(2432);
				textStringNoLinebreak();
				}
				break;
			case DEFINITION_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2433);
				match(DEFINITION_SYMBOL);
				setState(2434);
				match(TEXT_SYMBOL);
				setState(2435);
				textStringNoLinebreak();
				}
				break;
			case ORGANIZATION_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(2436);
				match(ORGANIZATION_SYMBOL);
				setState(2437);
				textStringNoLinebreak();
				setState(2438);
				match(IDENTIFIED_SYMBOL);
				setState(2439);
				match(BY_SYMBOL);
				setState(2440);
				real_ulonglong_number();
				}
				break;
			case DESCRIPTION_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(2442);
				match(DESCRIPTION_SYMBOL);
				setState(2443);
				match(TEXT_SYMBOL);
				setState(2444);
				textStringNoLinebreak();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropStatementContext extends ParserRuleContext {
		public TerminalNode DROP_SYMBOL() { return getToken(MultiQueryMySQLParser.DROP_SYMBOL, 0); }
		public DropDatabaseContext dropDatabase() {
			return getRuleContext(DropDatabaseContext.class,0);
		}
		public DropEventContext dropEvent() {
			return getRuleContext(DropEventContext.class,0);
		}
		public DropFunctionContext dropFunction() {
			return getRuleContext(DropFunctionContext.class,0);
		}
		public DropProcedureContext dropProcedure() {
			return getRuleContext(DropProcedureContext.class,0);
		}
		public DropIndexContext dropIndex() {
			return getRuleContext(DropIndexContext.class,0);
		}
		public DropLogfileGroupContext dropLogfileGroup() {
			return getRuleContext(DropLogfileGroupContext.class,0);
		}
		public DropServerContext dropServer() {
			return getRuleContext(DropServerContext.class,0);
		}
		public DropTableContext dropTable() {
			return getRuleContext(DropTableContext.class,0);
		}
		public DropTableSpaceContext dropTableSpace() {
			return getRuleContext(DropTableSpaceContext.class,0);
		}
		public DropTriggerContext dropTrigger() {
			return getRuleContext(DropTriggerContext.class,0);
		}
		public DropViewContext dropView() {
			return getRuleContext(DropViewContext.class,0);
		}
		public DropRoleContext dropRole() {
			return getRuleContext(DropRoleContext.class,0);
		}
		public DropSpatialReferenceContext dropSpatialReference() {
			return getRuleContext(DropSpatialReferenceContext.class,0);
		}
		public DropUndoTablespaceContext dropUndoTablespace() {
			return getRuleContext(DropUndoTablespaceContext.class,0);
		}
		public DropStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropStatement; }
	}

	public final DropStatementContext dropStatement() throws RecognitionException {
		DropStatementContext _localctx = new DropStatementContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_dropStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2447);
			match(DROP_SYMBOL);
			setState(2465);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,193,_ctx) ) {
			case 1:
				{
				setState(2448);
				dropDatabase();
				}
				break;
			case 2:
				{
				setState(2449);
				dropEvent();
				}
				break;
			case 3:
				{
				setState(2450);
				dropFunction();
				}
				break;
			case 4:
				{
				setState(2451);
				dropProcedure();
				}
				break;
			case 5:
				{
				setState(2452);
				dropIndex();
				}
				break;
			case 6:
				{
				setState(2453);
				dropLogfileGroup();
				}
				break;
			case 7:
				{
				setState(2454);
				dropServer();
				}
				break;
			case 8:
				{
				setState(2455);
				dropTable();
				}
				break;
			case 9:
				{
				setState(2456);
				dropTableSpace();
				}
				break;
			case 10:
				{
				setState(2457);
				dropTrigger();
				}
				break;
			case 11:
				{
				setState(2458);
				dropView();
				}
				break;
			case 12:
				{
				setState(2459);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(2460);
				dropRole();
				}
				break;
			case 13:
				{
				setState(2461);
				if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
				setState(2462);
				dropSpatialReference();
				}
				break;
			case 14:
				{
				setState(2463);
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				setState(2464);
				dropUndoTablespace();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropDatabaseContext extends ParserRuleContext {
		public TerminalNode DATABASE_SYMBOL() { return getToken(MultiQueryMySQLParser.DATABASE_SYMBOL, 0); }
		public SchemaRefContext schemaRef() {
			return getRuleContext(SchemaRefContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropDatabase; }
	}

	public final DropDatabaseContext dropDatabase() throws RecognitionException {
		DropDatabaseContext _localctx = new DropDatabaseContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_dropDatabase);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2467);
			match(DATABASE_SYMBOL);
			setState(2469);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,194,_ctx) ) {
			case 1:
				{
				setState(2468);
				ifExists();
				}
				break;
			}
			setState(2471);
			schemaRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropEventContext extends ParserRuleContext {
		public TerminalNode EVENT_SYMBOL() { return getToken(MultiQueryMySQLParser.EVENT_SYMBOL, 0); }
		public EventRefContext eventRef() {
			return getRuleContext(EventRefContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropEvent; }
	}

	public final DropEventContext dropEvent() throws RecognitionException {
		DropEventContext _localctx = new DropEventContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_dropEvent);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2473);
			match(EVENT_SYMBOL);
			setState(2475);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,195,_ctx) ) {
			case 1:
				{
				setState(2474);
				ifExists();
				}
				break;
			}
			setState(2477);
			eventRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropFunctionContext extends ParserRuleContext {
		public TerminalNode FUNCTION_SYMBOL() { return getToken(MultiQueryMySQLParser.FUNCTION_SYMBOL, 0); }
		public FunctionRefContext functionRef() {
			return getRuleContext(FunctionRefContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropFunction; }
	}

	public final DropFunctionContext dropFunction() throws RecognitionException {
		DropFunctionContext _localctx = new DropFunctionContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_dropFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2479);
			match(FUNCTION_SYMBOL);
			setState(2481);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,196,_ctx) ) {
			case 1:
				{
				setState(2480);
				ifExists();
				}
				break;
			}
			setState(2483);
			functionRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropProcedureContext extends ParserRuleContext {
		public TerminalNode PROCEDURE_SYMBOL() { return getToken(MultiQueryMySQLParser.PROCEDURE_SYMBOL, 0); }
		public ProcedureRefContext procedureRef() {
			return getRuleContext(ProcedureRefContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropProcedure; }
	}

	public final DropProcedureContext dropProcedure() throws RecognitionException {
		DropProcedureContext _localctx = new DropProcedureContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_dropProcedure);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2485);
			match(PROCEDURE_SYMBOL);
			setState(2487);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,197,_ctx) ) {
			case 1:
				{
				setState(2486);
				ifExists();
				}
				break;
			}
			setState(2489);
			procedureRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropIndexContext extends ParserRuleContext {
		public Token type;
		public IndexRefContext indexRef() {
			return getRuleContext(IndexRefContext.class,0);
		}
		public TerminalNode ON_SYMBOL() { return getToken(MultiQueryMySQLParser.ON_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public TerminalNode INDEX_SYMBOL() { return getToken(MultiQueryMySQLParser.INDEX_SYMBOL, 0); }
		public OnlineOptionContext onlineOption() {
			return getRuleContext(OnlineOptionContext.class,0);
		}
		public IndexLockAndAlgorithmContext indexLockAndAlgorithm() {
			return getRuleContext(IndexLockAndAlgorithmContext.class,0);
		}
		public DropIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropIndex; }
	}

	public final DropIndexContext dropIndex() throws RecognitionException {
		DropIndexContext _localctx = new DropIndexContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_dropIndex);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2492);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFLINE_SYMBOL || _la==ONLINE_SYMBOL) {
				{
				setState(2491);
				onlineOption();
				}
			}

			setState(2494);
			((DropIndexContext)_localctx).type = match(INDEX_SYMBOL);
			setState(2495);
			indexRef();
			setState(2496);
			match(ON_SYMBOL);
			setState(2497);
			tableRef();
			setState(2499);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,199,_ctx) ) {
			case 1:
				{
				setState(2498);
				indexLockAndAlgorithm();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropLogfileGroupContext extends ParserRuleContext {
		public TerminalNode LOGFILE_SYMBOL() { return getToken(MultiQueryMySQLParser.LOGFILE_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MultiQueryMySQLParser.GROUP_SYMBOL, 0); }
		public LogfileGroupRefContext logfileGroupRef() {
			return getRuleContext(LogfileGroupRefContext.class,0);
		}
		public List<DropLogfileGroupOptionContext> dropLogfileGroupOption() {
			return getRuleContexts(DropLogfileGroupOptionContext.class);
		}
		public DropLogfileGroupOptionContext dropLogfileGroupOption(int i) {
			return getRuleContext(DropLogfileGroupOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public DropLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropLogfileGroup; }
	}

	public final DropLogfileGroupContext dropLogfileGroup() throws RecognitionException {
		DropLogfileGroupContext _localctx = new DropLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_dropLogfileGroup);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2501);
			match(LOGFILE_SYMBOL);
			setState(2502);
			match(GROUP_SYMBOL);
			setState(2503);
			logfileGroupRef();
			setState(2514);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,202,_ctx) ) {
			case 1:
				{
				setState(2504);
				dropLogfileGroupOption();
				setState(2511);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,201,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2506);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA_SYMBOL) {
							{
							setState(2505);
							match(COMMA_SYMBOL);
							}
						}

						setState(2508);
						dropLogfileGroupOption();
						}
						} 
					}
					setState(2513);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,201,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropLogfileGroupOptionContext extends ParserRuleContext {
		public TsOptionWaitContext tsOptionWait() {
			return getRuleContext(TsOptionWaitContext.class,0);
		}
		public TsOptionEngineContext tsOptionEngine() {
			return getRuleContext(TsOptionEngineContext.class,0);
		}
		public DropLogfileGroupOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropLogfileGroupOption; }
	}

	public final DropLogfileGroupOptionContext dropLogfileGroupOption() throws RecognitionException {
		DropLogfileGroupOptionContext _localctx = new DropLogfileGroupOptionContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_dropLogfileGroupOption);
		try {
			setState(2518);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO_WAIT_SYMBOL:
			case WAIT_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2516);
				tsOptionWait();
				}
				break;
			case ENGINE_SYMBOL:
			case STORAGE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2517);
				tsOptionEngine();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropServerContext extends ParserRuleContext {
		public TerminalNode SERVER_SYMBOL() { return getToken(MultiQueryMySQLParser.SERVER_SYMBOL, 0); }
		public ServerRefContext serverRef() {
			return getRuleContext(ServerRefContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropServer; }
	}

	public final DropServerContext dropServer() throws RecognitionException {
		DropServerContext _localctx = new DropServerContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_dropServer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2520);
			match(SERVER_SYMBOL);
			setState(2522);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,204,_ctx) ) {
			case 1:
				{
				setState(2521);
				ifExists();
				}
				break;
			}
			setState(2524);
			serverRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTableContext extends ParserRuleContext {
		public Token type;
		public TableRefListContext tableRefList() {
			return getRuleContext(TableRefListContext.class,0);
		}
		public TerminalNode TABLE_SYMBOL() { return getToken(MultiQueryMySQLParser.TABLE_SYMBOL, 0); }
		public TerminalNode TABLES_SYMBOL() { return getToken(MultiQueryMySQLParser.TABLES_SYMBOL, 0); }
		public TerminalNode TEMPORARY_SYMBOL() { return getToken(MultiQueryMySQLParser.TEMPORARY_SYMBOL, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public TerminalNode RESTRICT_SYMBOL() { return getToken(MultiQueryMySQLParser.RESTRICT_SYMBOL, 0); }
		public TerminalNode CASCADE_SYMBOL() { return getToken(MultiQueryMySQLParser.CASCADE_SYMBOL, 0); }
		public DropTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTable; }
	}

	public final DropTableContext dropTable() throws RecognitionException {
		DropTableContext _localctx = new DropTableContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_dropTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2527);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMPORARY_SYMBOL) {
				{
				setState(2526);
				match(TEMPORARY_SYMBOL);
				}
			}

			setState(2529);
			((DropTableContext)_localctx).type = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==TABLES_SYMBOL || _la==TABLE_SYMBOL) ) {
				((DropTableContext)_localctx).type = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2531);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,206,_ctx) ) {
			case 1:
				{
				setState(2530);
				ifExists();
				}
				break;
			}
			setState(2533);
			tableRefList();
			setState(2535);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,207,_ctx) ) {
			case 1:
				{
				setState(2534);
				_la = _input.LA(1);
				if ( !(_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTableSpaceContext extends ParserRuleContext {
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MultiQueryMySQLParser.TABLESPACE_SYMBOL, 0); }
		public TablespaceRefContext tablespaceRef() {
			return getRuleContext(TablespaceRefContext.class,0);
		}
		public List<DropLogfileGroupOptionContext> dropLogfileGroupOption() {
			return getRuleContexts(DropLogfileGroupOptionContext.class);
		}
		public DropLogfileGroupOptionContext dropLogfileGroupOption(int i) {
			return getRuleContext(DropLogfileGroupOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public DropTableSpaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTableSpace; }
	}

	public final DropTableSpaceContext dropTableSpace() throws RecognitionException {
		DropTableSpaceContext _localctx = new DropTableSpaceContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_dropTableSpace);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2537);
			match(TABLESPACE_SYMBOL);
			setState(2538);
			tablespaceRef();
			setState(2549);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,210,_ctx) ) {
			case 1:
				{
				setState(2539);
				dropLogfileGroupOption();
				setState(2546);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,209,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2541);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA_SYMBOL) {
							{
							setState(2540);
							match(COMMA_SYMBOL);
							}
						}

						setState(2543);
						dropLogfileGroupOption();
						}
						} 
					}
					setState(2548);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,209,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTriggerContext extends ParserRuleContext {
		public TerminalNode TRIGGER_SYMBOL() { return getToken(MultiQueryMySQLParser.TRIGGER_SYMBOL, 0); }
		public TriggerRefContext triggerRef() {
			return getRuleContext(TriggerRefContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTrigger; }
	}

	public final DropTriggerContext dropTrigger() throws RecognitionException {
		DropTriggerContext _localctx = new DropTriggerContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_dropTrigger);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2551);
			match(TRIGGER_SYMBOL);
			setState(2553);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,211,_ctx) ) {
			case 1:
				{
				setState(2552);
				ifExists();
				}
				break;
			}
			setState(2555);
			triggerRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropViewContext extends ParserRuleContext {
		public TerminalNode VIEW_SYMBOL() { return getToken(MultiQueryMySQLParser.VIEW_SYMBOL, 0); }
		public ViewRefListContext viewRefList() {
			return getRuleContext(ViewRefListContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public TerminalNode RESTRICT_SYMBOL() { return getToken(MultiQueryMySQLParser.RESTRICT_SYMBOL, 0); }
		public TerminalNode CASCADE_SYMBOL() { return getToken(MultiQueryMySQLParser.CASCADE_SYMBOL, 0); }
		public DropViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropView; }
	}

	public final DropViewContext dropView() throws RecognitionException {
		DropViewContext _localctx = new DropViewContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_dropView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2557);
			match(VIEW_SYMBOL);
			setState(2559);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,212,_ctx) ) {
			case 1:
				{
				setState(2558);
				ifExists();
				}
				break;
			}
			setState(2561);
			viewRefList();
			setState(2563);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,213,_ctx) ) {
			case 1:
				{
				setState(2562);
				_la = _input.LA(1);
				if ( !(_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropRoleContext extends ParserRuleContext {
		public TerminalNode ROLE_SYMBOL() { return getToken(MultiQueryMySQLParser.ROLE_SYMBOL, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropRole; }
	}

	public final DropRoleContext dropRole() throws RecognitionException {
		DropRoleContext _localctx = new DropRoleContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_dropRole);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2565);
			match(ROLE_SYMBOL);
			setState(2567);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,214,_ctx) ) {
			case 1:
				{
				setState(2566);
				ifExists();
				}
				break;
			}
			setState(2569);
			roleList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropSpatialReferenceContext extends ParserRuleContext {
		public TerminalNode SPATIAL_SYMBOL() { return getToken(MultiQueryMySQLParser.SPATIAL_SYMBOL, 0); }
		public TerminalNode REFERENCE_SYMBOL() { return getToken(MultiQueryMySQLParser.REFERENCE_SYMBOL, 0); }
		public TerminalNode SYSTEM_SYMBOL() { return getToken(MultiQueryMySQLParser.SYSTEM_SYMBOL, 0); }
		public Real_ulonglong_numberContext real_ulonglong_number() {
			return getRuleContext(Real_ulonglong_numberContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropSpatialReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropSpatialReference; }
	}

	public final DropSpatialReferenceContext dropSpatialReference() throws RecognitionException {
		DropSpatialReferenceContext _localctx = new DropSpatialReferenceContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_dropSpatialReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2571);
			match(SPATIAL_SYMBOL);
			setState(2572);
			match(REFERENCE_SYMBOL);
			setState(2573);
			match(SYSTEM_SYMBOL);
			setState(2575);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,215,_ctx) ) {
			case 1:
				{
				setState(2574);
				ifExists();
				}
				break;
			}
			setState(2577);
			real_ulonglong_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropUndoTablespaceContext extends ParserRuleContext {
		public TerminalNode UNDO_SYMBOL() { return getToken(MultiQueryMySQLParser.UNDO_SYMBOL, 0); }
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MultiQueryMySQLParser.TABLESPACE_SYMBOL, 0); }
		public TablespaceRefContext tablespaceRef() {
			return getRuleContext(TablespaceRefContext.class,0);
		}
		public UndoTableSpaceOptionsContext undoTableSpaceOptions() {
			return getRuleContext(UndoTableSpaceOptionsContext.class,0);
		}
		public DropUndoTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropUndoTablespace; }
	}

	public final DropUndoTablespaceContext dropUndoTablespace() throws RecognitionException {
		DropUndoTablespaceContext _localctx = new DropUndoTablespaceContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_dropUndoTablespace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2579);
			match(UNDO_SYMBOL);
			setState(2580);
			match(TABLESPACE_SYMBOL);
			setState(2581);
			tablespaceRef();
			setState(2583);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,216,_ctx) ) {
			case 1:
				{
				setState(2582);
				undoTableSpaceOptions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameTableStatementContext extends ParserRuleContext {
		public TerminalNode RENAME_SYMBOL() { return getToken(MultiQueryMySQLParser.RENAME_SYMBOL, 0); }
		public List<RenamePairContext> renamePair() {
			return getRuleContexts(RenamePairContext.class);
		}
		public RenamePairContext renamePair(int i) {
			return getRuleContext(RenamePairContext.class,i);
		}
		public TerminalNode TABLE_SYMBOL() { return getToken(MultiQueryMySQLParser.TABLE_SYMBOL, 0); }
		public TerminalNode TABLES_SYMBOL() { return getToken(MultiQueryMySQLParser.TABLES_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public RenameTableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameTableStatement; }
	}

	public final RenameTableStatementContext renameTableStatement() throws RecognitionException {
		RenameTableStatementContext _localctx = new RenameTableStatementContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_renameTableStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2585);
			match(RENAME_SYMBOL);
			setState(2586);
			_la = _input.LA(1);
			if ( !(_la==TABLES_SYMBOL || _la==TABLE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2587);
			renamePair();
			setState(2592);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,217,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2588);
					match(COMMA_SYMBOL);
					setState(2589);
					renamePair();
					}
					} 
				}
				setState(2594);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,217,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenamePairContext extends ParserRuleContext {
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public TerminalNode TO_SYMBOL() { return getToken(MultiQueryMySQLParser.TO_SYMBOL, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public RenamePairContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renamePair; }
	}

	public final RenamePairContext renamePair() throws RecognitionException {
		RenamePairContext _localctx = new RenamePairContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_renamePair);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2595);
			tableRef();
			setState(2596);
			match(TO_SYMBOL);
			setState(2597);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TruncateTableStatementContext extends ParserRuleContext {
		public TerminalNode TRUNCATE_SYMBOL() { return getToken(MultiQueryMySQLParser.TRUNCATE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public TerminalNode TABLE_SYMBOL() { return getToken(MultiQueryMySQLParser.TABLE_SYMBOL, 0); }
		public TruncateTableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncateTableStatement; }
	}

	public final TruncateTableStatementContext truncateTableStatement() throws RecognitionException {
		TruncateTableStatementContext _localctx = new TruncateTableStatementContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_truncateTableStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2599);
			match(TRUNCATE_SYMBOL);
			setState(2601);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,218,_ctx) ) {
			case 1:
				{
				setState(2600);
				match(TABLE_SYMBOL);
				}
				break;
			}
			setState(2603);
			tableRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ImportStatementContext extends ParserRuleContext {
		public TerminalNode IMPORT_SYMBOL() { return getToken(MultiQueryMySQLParser.IMPORT_SYMBOL, 0); }
		public TerminalNode TABLE_SYMBOL() { return getToken(MultiQueryMySQLParser.TABLE_SYMBOL, 0); }
		public TerminalNode FROM_SYMBOL() { return getToken(MultiQueryMySQLParser.FROM_SYMBOL, 0); }
		public TextStringLiteralListContext textStringLiteralList() {
			return getRuleContext(TextStringLiteralListContext.class,0);
		}
		public ImportStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_importStatement; }
	}

	public final ImportStatementContext importStatement() throws RecognitionException {
		ImportStatementContext _localctx = new ImportStatementContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_importStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2605);
			match(IMPORT_SYMBOL);
			setState(2606);
			match(TABLE_SYMBOL);
			setState(2607);
			match(FROM_SYMBOL);
			setState(2608);
			textStringLiteralList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CallStatementContext extends ParserRuleContext {
		public TerminalNode CALL_SYMBOL() { return getToken(MultiQueryMySQLParser.CALL_SYMBOL, 0); }
		public ProcedureRefContext procedureRef() {
			return getRuleContext(ProcedureRefContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public CallStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_callStatement; }
	}

	public final CallStatementContext callStatement() throws RecognitionException {
		CallStatementContext _localctx = new CallStatementContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_callStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2610);
			match(CALL_SYMBOL);
			setState(2611);
			procedureRef();
			setState(2617);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,220,_ctx) ) {
			case 1:
				{
				setState(2612);
				match(OPEN_PAR_SYMBOL);
				setState(2614);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,219,_ctx) ) {
				case 1:
					{
					setState(2613);
					exprList();
					}
					break;
				}
				setState(2616);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteStatementContext extends ParserRuleContext {
		public TerminalNode DELETE_SYMBOL() { return getToken(MultiQueryMySQLParser.DELETE_SYMBOL, 0); }
		public TerminalNode FROM_SYMBOL() { return getToken(MultiQueryMySQLParser.FROM_SYMBOL, 0); }
		public TableAliasRefListContext tableAliasRefList() {
			return getRuleContext(TableAliasRefListContext.class,0);
		}
		public TableReferenceListContext tableReferenceList() {
			return getRuleContext(TableReferenceListContext.class,0);
		}
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public List<DeleteStatementOptionContext> deleteStatementOption() {
			return getRuleContexts(DeleteStatementOptionContext.class);
		}
		public DeleteStatementOptionContext deleteStatementOption(int i) {
			return getRuleContext(DeleteStatementOptionContext.class,i);
		}
		public TerminalNode USING_SYMBOL() { return getToken(MultiQueryMySQLParser.USING_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public PartitionDeleteContext partitionDelete() {
			return getRuleContext(PartitionDeleteContext.class,0);
		}
		public OrderClauseContext orderClause() {
			return getRuleContext(OrderClauseContext.class,0);
		}
		public SimpleLimitClauseContext simpleLimitClause() {
			return getRuleContext(SimpleLimitClauseContext.class,0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteStatement; }
	}

	public final DeleteStatementContext deleteStatement() throws RecognitionException {
		DeleteStatementContext _localctx = new DeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_deleteStatement);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2621);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,221,_ctx) ) {
			case 1:
				{
				setState(2619);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(2620);
				withClause();
				}
				break;
			}
			setState(2623);
			match(DELETE_SYMBOL);
			setState(2627);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,222,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2624);
					deleteStatementOption();
					}
					} 
				}
				setState(2629);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,222,_ctx);
			}
			setState(2662);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,231,_ctx) ) {
			case 1:
				{
				setState(2630);
				match(FROM_SYMBOL);
				setState(2654);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,229,_ctx) ) {
				case 1:
					{
					setState(2631);
					tableAliasRefList();
					setState(2632);
					match(USING_SYMBOL);
					setState(2633);
					tableReferenceList();
					setState(2635);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,223,_ctx) ) {
					case 1:
						{
						setState(2634);
						whereClause();
						}
						break;
					}
					}
					break;
				case 2:
					{
					setState(2637);
					tableRef();
					setState(2640);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,224,_ctx) ) {
					case 1:
						{
						setState(2638);
						if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
						setState(2639);
						tableAlias();
						}
						break;
					}
					setState(2643);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,225,_ctx) ) {
					case 1:
						{
						setState(2642);
						partitionDelete();
						}
						break;
					}
					setState(2646);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,226,_ctx) ) {
					case 1:
						{
						setState(2645);
						whereClause();
						}
						break;
					}
					setState(2649);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,227,_ctx) ) {
					case 1:
						{
						setState(2648);
						orderClause();
						}
						break;
					}
					setState(2652);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,228,_ctx) ) {
					case 1:
						{
						setState(2651);
						simpleLimitClause();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(2656);
				tableAliasRefList();
				setState(2657);
				match(FROM_SYMBOL);
				setState(2658);
				tableReferenceList();
				setState(2660);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,230,_ctx) ) {
				case 1:
					{
					setState(2659);
					whereClause();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDeleteContext extends ParserRuleContext {
		public TerminalNode PARTITION_SYMBOL() { return getToken(MultiQueryMySQLParser.PARTITION_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public PartitionDeleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDelete; }
	}

	public final PartitionDeleteContext partitionDelete() throws RecognitionException {
		PartitionDeleteContext _localctx = new PartitionDeleteContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_partitionDelete);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2664);
			if (!(serverVersion >= 50602)) throw new FailedPredicateException(this, "serverVersion >= 50602");
			setState(2665);
			match(PARTITION_SYMBOL);
			setState(2666);
			match(OPEN_PAR_SYMBOL);
			setState(2667);
			identifierList();
			setState(2668);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteStatementOptionContext extends ParserRuleContext {
		public TerminalNode QUICK_SYMBOL() { return getToken(MultiQueryMySQLParser.QUICK_SYMBOL, 0); }
		public TerminalNode LOW_PRIORITY_SYMBOL() { return getToken(MultiQueryMySQLParser.LOW_PRIORITY_SYMBOL, 0); }
		public TerminalNode IGNORE_SYMBOL() { return getToken(MultiQueryMySQLParser.IGNORE_SYMBOL, 0); }
		public DeleteStatementOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteStatementOption; }
	}

	public final DeleteStatementOptionContext deleteStatementOption() throws RecognitionException {
		DeleteStatementOptionContext _localctx = new DeleteStatementOptionContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_deleteStatementOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2670);
			_la = _input.LA(1);
			if ( !(_la==QUICK_SYMBOL || _la==IGNORE_SYMBOL || _la==LOW_PRIORITY_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DoStatementContext extends ParserRuleContext {
		public TerminalNode DO_SYMBOL() { return getToken(MultiQueryMySQLParser.DO_SYMBOL, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public SelectItemListContext selectItemList() {
			return getRuleContext(SelectItemListContext.class,0);
		}
		public DoStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_doStatement; }
	}

	public final DoStatementContext doStatement() throws RecognitionException {
		DoStatementContext _localctx = new DoStatementContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_doStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2672);
			match(DO_SYMBOL);
			setState(2677);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,232,_ctx) ) {
			case 1:
				{
				setState(2673);
				if (!(serverVersion < 50709)) throw new FailedPredicateException(this, "serverVersion < 50709");
				setState(2674);
				exprList();
				}
				break;
			case 2:
				{
				setState(2675);
				if (!(serverVersion >= 50709)) throw new FailedPredicateException(this, "serverVersion >= 50709");
				setState(2676);
				selectItemList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerStatementContext extends ParserRuleContext {
		public TerminalNode HANDLER_SYMBOL() { return getToken(MultiQueryMySQLParser.HANDLER_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public TerminalNode OPEN_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode CLOSE_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_SYMBOL, 0); }
		public TerminalNode READ_SYMBOL() { return getToken(MultiQueryMySQLParser.READ_SYMBOL, 0); }
		public HandlerReadOrScanContext handlerReadOrScan() {
			return getRuleContext(HandlerReadOrScanContext.class,0);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public HandlerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerStatement; }
	}

	public final HandlerStatementContext handlerStatement() throws RecognitionException {
		HandlerStatementContext _localctx = new HandlerStatementContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_handlerStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2679);
			match(HANDLER_SYMBOL);
			setState(2697);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,237,_ctx) ) {
			case 1:
				{
				setState(2680);
				tableRef();
				setState(2681);
				match(OPEN_SYMBOL);
				setState(2683);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,233,_ctx) ) {
				case 1:
					{
					setState(2682);
					tableAlias();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(2685);
				identifier();
				setState(2695);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CLOSE_SYMBOL:
					{
					setState(2686);
					match(CLOSE_SYMBOL);
					}
					break;
				case READ_SYMBOL:
					{
					setState(2687);
					match(READ_SYMBOL);
					setState(2688);
					handlerReadOrScan();
					setState(2690);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,234,_ctx) ) {
					case 1:
						{
						setState(2689);
						whereClause();
						}
						break;
					}
					setState(2693);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,235,_ctx) ) {
					case 1:
						{
						setState(2692);
						limitClause();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerReadOrScanContext extends ParserRuleContext {
		public TerminalNode FIRST_SYMBOL() { return getToken(MultiQueryMySQLParser.FIRST_SYMBOL, 0); }
		public TerminalNode NEXT_SYMBOL() { return getToken(MultiQueryMySQLParser.NEXT_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ValuesContext values() {
			return getRuleContext(ValuesContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode PREV_SYMBOL() { return getToken(MultiQueryMySQLParser.PREV_SYMBOL, 0); }
		public TerminalNode LAST_SYMBOL() { return getToken(MultiQueryMySQLParser.LAST_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
		public TerminalNode LESS_THAN_OPERATOR() { return getToken(MultiQueryMySQLParser.LESS_THAN_OPERATOR, 0); }
		public TerminalNode GREATER_THAN_OPERATOR() { return getToken(MultiQueryMySQLParser.GREATER_THAN_OPERATOR, 0); }
		public TerminalNode LESS_OR_EQUAL_OPERATOR() { return getToken(MultiQueryMySQLParser.LESS_OR_EQUAL_OPERATOR, 0); }
		public TerminalNode GREATER_OR_EQUAL_OPERATOR() { return getToken(MultiQueryMySQLParser.GREATER_OR_EQUAL_OPERATOR, 0); }
		public HandlerReadOrScanContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerReadOrScan; }
	}

	public final HandlerReadOrScanContext handlerReadOrScan() throws RecognitionException {
		HandlerReadOrScanContext _localctx = new HandlerReadOrScanContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_handlerReadOrScan);
		int _la;
		try {
			setState(2709);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,239,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2699);
				_la = _input.LA(1);
				if ( !(_la==FIRST_SYMBOL || _la==NEXT_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2700);
				identifier();
				setState(2707);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FIRST_SYMBOL:
				case LAST_SYMBOL:
				case NEXT_SYMBOL:
				case PREV_SYMBOL:
					{
					setState(2701);
					_la = _input.LA(1);
					if ( !(_la==FIRST_SYMBOL || _la==LAST_SYMBOL || _la==NEXT_SYMBOL || _la==PREV_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case EQUAL_OPERATOR:
				case GREATER_OR_EQUAL_OPERATOR:
				case GREATER_THAN_OPERATOR:
				case LESS_OR_EQUAL_OPERATOR:
				case LESS_THAN_OPERATOR:
					{
					setState(2702);
					_la = _input.LA(1);
					if ( !(((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (EQUAL_OPERATOR - 383)) | (1L << (GREATER_OR_EQUAL_OPERATOR - 383)) | (1L << (GREATER_THAN_OPERATOR - 383)) | (1L << (LESS_OR_EQUAL_OPERATOR - 383)) | (1L << (LESS_THAN_OPERATOR - 383)))) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2703);
					match(OPEN_PAR_SYMBOL);
					setState(2704);
					values();
					setState(2705);
					match(CLOSE_PAR_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertStatementContext extends ParserRuleContext {
		public TerminalNode INSERT_SYMBOL() { return getToken(MultiQueryMySQLParser.INSERT_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public InsertFromConstructorContext insertFromConstructor() {
			return getRuleContext(InsertFromConstructorContext.class,0);
		}
		public TerminalNode SET_SYMBOL() { return getToken(MultiQueryMySQLParser.SET_SYMBOL, 0); }
		public UpdateListContext updateList() {
			return getRuleContext(UpdateListContext.class,0);
		}
		public InsertQueryExpressionContext insertQueryExpression() {
			return getRuleContext(InsertQueryExpressionContext.class,0);
		}
		public InsertLockOptionContext insertLockOption() {
			return getRuleContext(InsertLockOptionContext.class,0);
		}
		public TerminalNode IGNORE_SYMBOL() { return getToken(MultiQueryMySQLParser.IGNORE_SYMBOL, 0); }
		public TerminalNode INTO_SYMBOL() { return getToken(MultiQueryMySQLParser.INTO_SYMBOL, 0); }
		public UsePartitionContext usePartition() {
			return getRuleContext(UsePartitionContext.class,0);
		}
		public InsertUpdateListContext insertUpdateList() {
			return getRuleContext(InsertUpdateListContext.class,0);
		}
		public ValuesReferenceContext valuesReference() {
			return getRuleContext(ValuesReferenceContext.class,0);
		}
		public InsertStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertStatement; }
	}

	public final InsertStatementContext insertStatement() throws RecognitionException {
		InsertStatementContext _localctx = new InsertStatementContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_insertStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2711);
			match(INSERT_SYMBOL);
			setState(2713);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,240,_ctx) ) {
			case 1:
				{
				setState(2712);
				insertLockOption();
				}
				break;
			}
			setState(2716);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,241,_ctx) ) {
			case 1:
				{
				setState(2715);
				match(IGNORE_SYMBOL);
				}
				break;
			}
			setState(2719);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,242,_ctx) ) {
			case 1:
				{
				setState(2718);
				match(INTO_SYMBOL);
				}
				break;
			}
			setState(2721);
			tableRef();
			setState(2723);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,243,_ctx) ) {
			case 1:
				{
				setState(2722);
				usePartition();
				}
				break;
			}
			setState(2737);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,246,_ctx) ) {
			case 1:
				{
				setState(2725);
				insertFromConstructor();
				setState(2728);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,244,_ctx) ) {
				case 1:
					{
					setState(2726);
					if (!( serverVersion >= 80018)) throw new FailedPredicateException(this, " serverVersion >= 80018");
					setState(2727);
					valuesReference();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(2730);
				match(SET_SYMBOL);
				setState(2731);
				updateList();
				setState(2734);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,245,_ctx) ) {
				case 1:
					{
					setState(2732);
					if (!( serverVersion >= 80018)) throw new FailedPredicateException(this, " serverVersion >= 80018");
					setState(2733);
					valuesReference();
					}
					break;
				}
				}
				break;
			case 3:
				{
				setState(2736);
				insertQueryExpression();
				}
				break;
			}
			setState(2740);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,247,_ctx) ) {
			case 1:
				{
				setState(2739);
				insertUpdateList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertLockOptionContext extends ParserRuleContext {
		public TerminalNode LOW_PRIORITY_SYMBOL() { return getToken(MultiQueryMySQLParser.LOW_PRIORITY_SYMBOL, 0); }
		public TerminalNode DELAYED_SYMBOL() { return getToken(MultiQueryMySQLParser.DELAYED_SYMBOL, 0); }
		public TerminalNode HIGH_PRIORITY_SYMBOL() { return getToken(MultiQueryMySQLParser.HIGH_PRIORITY_SYMBOL, 0); }
		public InsertLockOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertLockOption; }
	}

	public final InsertLockOptionContext insertLockOption() throws RecognitionException {
		InsertLockOptionContext _localctx = new InsertLockOptionContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_insertLockOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2742);
			_la = _input.LA(1);
			if ( !(_la==DELAYED_SYMBOL || _la==HIGH_PRIORITY_SYMBOL || _la==LOW_PRIORITY_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertFromConstructorContext extends ParserRuleContext {
		public InsertValuesContext insertValues() {
			return getRuleContext(InsertValuesContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public FieldsContext fields() {
			return getRuleContext(FieldsContext.class,0);
		}
		public InsertFromConstructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertFromConstructor; }
	}

	public final InsertFromConstructorContext insertFromConstructor() throws RecognitionException {
		InsertFromConstructorContext _localctx = new InsertFromConstructorContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_insertFromConstructor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2749);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				setState(2744);
				match(OPEN_PAR_SYMBOL);
				setState(2746);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,248,_ctx) ) {
				case 1:
					{
					setState(2745);
					fields();
					}
					break;
				}
				setState(2748);
				match(CLOSE_PAR_SYMBOL);
				}
			}

			setState(2751);
			insertValues();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FieldsContext extends ParserRuleContext {
		public List<InsertIdentifierContext> insertIdentifier() {
			return getRuleContexts(InsertIdentifierContext.class);
		}
		public InsertIdentifierContext insertIdentifier(int i) {
			return getRuleContext(InsertIdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public FieldsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fields; }
	}

	public final FieldsContext fields() throws RecognitionException {
		FieldsContext _localctx = new FieldsContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_fields);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2753);
			insertIdentifier();
			setState(2758);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(2754);
				match(COMMA_SYMBOL);
				setState(2755);
				insertIdentifier();
				}
				}
				setState(2760);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertValuesContext extends ParserRuleContext {
		public ValueListContext valueList() {
			return getRuleContext(ValueListContext.class,0);
		}
		public TerminalNode VALUES_SYMBOL() { return getToken(MultiQueryMySQLParser.VALUES_SYMBOL, 0); }
		public TerminalNode VALUE_SYMBOL() { return getToken(MultiQueryMySQLParser.VALUE_SYMBOL, 0); }
		public InsertValuesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertValues; }
	}

	public final InsertValuesContext insertValues() throws RecognitionException {
		InsertValuesContext _localctx = new InsertValuesContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_insertValues);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2761);
			_la = _input.LA(1);
			if ( !(_la==VALUE_SYMBOL || _la==VALUES_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2762);
			valueList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertQueryExpressionContext extends ParserRuleContext {
		public QueryExpressionOrParensContext queryExpressionOrParens() {
			return getRuleContext(QueryExpressionOrParensContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public FieldsContext fields() {
			return getRuleContext(FieldsContext.class,0);
		}
		public InsertQueryExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertQueryExpression; }
	}

	public final InsertQueryExpressionContext insertQueryExpression() throws RecognitionException {
		InsertQueryExpressionContext _localctx = new InsertQueryExpressionContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_insertQueryExpression);
		try {
			setState(2771);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,252,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2764);
				queryExpressionOrParens();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2765);
				match(OPEN_PAR_SYMBOL);
				setState(2767);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,251,_ctx) ) {
				case 1:
					{
					setState(2766);
					fields();
					}
					break;
				}
				setState(2769);
				match(CLOSE_PAR_SYMBOL);
				setState(2770);
				queryExpressionOrParens();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValueListContext extends ParserRuleContext {
		public List<TerminalNode> OPEN_PAR_SYMBOL() { return getTokens(MultiQueryMySQLParser.OPEN_PAR_SYMBOL); }
		public TerminalNode OPEN_PAR_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, i);
		}
		public List<TerminalNode> CLOSE_PAR_SYMBOL() { return getTokens(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL); }
		public TerminalNode CLOSE_PAR_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, i);
		}
		public List<ValuesContext> values() {
			return getRuleContexts(ValuesContext.class);
		}
		public ValuesContext values(int i) {
			return getRuleContext(ValuesContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public ValueListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valueList; }
	}

	public final ValueListContext valueList() throws RecognitionException {
		ValueListContext _localctx = new ValueListContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_valueList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2773);
			match(OPEN_PAR_SYMBOL);
			setState(2775);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,253,_ctx) ) {
			case 1:
				{
				setState(2774);
				values();
				}
				break;
			}
			setState(2777);
			match(CLOSE_PAR_SYMBOL);
			setState(2786);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,255,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2778);
					match(COMMA_SYMBOL);
					setState(2779);
					match(OPEN_PAR_SYMBOL);
					setState(2781);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,254,_ctx) ) {
					case 1:
						{
						setState(2780);
						values();
						}
						break;
					}
					setState(2783);
					match(CLOSE_PAR_SYMBOL);
					}
					} 
				}
				setState(2788);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,255,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesContext extends ParserRuleContext {
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> DEFAULT_SYMBOL() { return getTokens(MultiQueryMySQLParser.DEFAULT_SYMBOL); }
		public TerminalNode DEFAULT_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public ValuesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_values; }
	}

	public final ValuesContext values() throws RecognitionException {
		ValuesContext _localctx = new ValuesContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_values);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2791);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,256,_ctx) ) {
			case 1:
				{
				setState(2789);
				expr(0);
				}
				break;
			case 2:
				{
				setState(2790);
				match(DEFAULT_SYMBOL);
				}
				break;
			}
			setState(2800);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(2793);
				match(COMMA_SYMBOL);
				setState(2796);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,257,_ctx) ) {
				case 1:
					{
					setState(2794);
					expr(0);
					}
					break;
				case 2:
					{
					setState(2795);
					match(DEFAULT_SYMBOL);
					}
					break;
				}
				}
				}
				setState(2802);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesReferenceContext extends ParserRuleContext {
		public TerminalNode AS_SYMBOL() { return getToken(MultiQueryMySQLParser.AS_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ColumnInternalRefListContext columnInternalRefList() {
			return getRuleContext(ColumnInternalRefListContext.class,0);
		}
		public ValuesReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesReference; }
	}

	public final ValuesReferenceContext valuesReference() throws RecognitionException {
		ValuesReferenceContext _localctx = new ValuesReferenceContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_valuesReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2803);
			match(AS_SYMBOL);
			setState(2804);
			identifier();
			setState(2806);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,259,_ctx) ) {
			case 1:
				{
				setState(2805);
				columnInternalRefList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertUpdateListContext extends ParserRuleContext {
		public TerminalNode ON_SYMBOL() { return getToken(MultiQueryMySQLParser.ON_SYMBOL, 0); }
		public TerminalNode DUPLICATE_SYMBOL() { return getToken(MultiQueryMySQLParser.DUPLICATE_SYMBOL, 0); }
		public TerminalNode KEY_SYMBOL() { return getToken(MultiQueryMySQLParser.KEY_SYMBOL, 0); }
		public TerminalNode UPDATE_SYMBOL() { return getToken(MultiQueryMySQLParser.UPDATE_SYMBOL, 0); }
		public UpdateListContext updateList() {
			return getRuleContext(UpdateListContext.class,0);
		}
		public InsertUpdateListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertUpdateList; }
	}

	public final InsertUpdateListContext insertUpdateList() throws RecognitionException {
		InsertUpdateListContext _localctx = new InsertUpdateListContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_insertUpdateList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2808);
			match(ON_SYMBOL);
			setState(2809);
			match(DUPLICATE_SYMBOL);
			setState(2810);
			match(KEY_SYMBOL);
			setState(2811);
			match(UPDATE_SYMBOL);
			setState(2812);
			updateList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadStatementContext extends ParserRuleContext {
		public TerminalNode LOAD_SYMBOL() { return getToken(MultiQueryMySQLParser.LOAD_SYMBOL, 0); }
		public DataOrXmlContext dataOrXml() {
			return getRuleContext(DataOrXmlContext.class,0);
		}
		public TerminalNode INFILE_SYMBOL() { return getToken(MultiQueryMySQLParser.INFILE_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode INTO_SYMBOL() { return getToken(MultiQueryMySQLParser.INTO_SYMBOL, 0); }
		public TerminalNode TABLE_SYMBOL() { return getToken(MultiQueryMySQLParser.TABLE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public LoadDataFileTailContext loadDataFileTail() {
			return getRuleContext(LoadDataFileTailContext.class,0);
		}
		public TerminalNode LOCAL_SYMBOL() { return getToken(MultiQueryMySQLParser.LOCAL_SYMBOL, 0); }
		public UsePartitionContext usePartition() {
			return getRuleContext(UsePartitionContext.class,0);
		}
		public CharsetClauseContext charsetClause() {
			return getRuleContext(CharsetClauseContext.class,0);
		}
		public XmlRowsIdentifiedByContext xmlRowsIdentifiedBy() {
			return getRuleContext(XmlRowsIdentifiedByContext.class,0);
		}
		public FieldsClauseContext fieldsClause() {
			return getRuleContext(FieldsClauseContext.class,0);
		}
		public LinesClauseContext linesClause() {
			return getRuleContext(LinesClauseContext.class,0);
		}
		public TerminalNode LOW_PRIORITY_SYMBOL() { return getToken(MultiQueryMySQLParser.LOW_PRIORITY_SYMBOL, 0); }
		public TerminalNode CONCURRENT_SYMBOL() { return getToken(MultiQueryMySQLParser.CONCURRENT_SYMBOL, 0); }
		public TerminalNode REPLACE_SYMBOL() { return getToken(MultiQueryMySQLParser.REPLACE_SYMBOL, 0); }
		public TerminalNode IGNORE_SYMBOL() { return getToken(MultiQueryMySQLParser.IGNORE_SYMBOL, 0); }
		public LoadStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadStatement; }
	}

	public final LoadStatementContext loadStatement() throws RecognitionException {
		LoadStatementContext _localctx = new LoadStatementContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_loadStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2814);
			match(LOAD_SYMBOL);
			setState(2815);
			dataOrXml();
			setState(2817);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONCURRENT_SYMBOL || _la==LOW_PRIORITY_SYMBOL) {
				{
				setState(2816);
				_la = _input.LA(1);
				if ( !(_la==CONCURRENT_SYMBOL || _la==LOW_PRIORITY_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2820);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL_SYMBOL) {
				{
				setState(2819);
				match(LOCAL_SYMBOL);
				}
			}

			setState(2822);
			match(INFILE_SYMBOL);
			setState(2823);
			textLiteral();
			setState(2825);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE_SYMBOL || _la==REPLACE_SYMBOL) {
				{
				setState(2824);
				_la = _input.LA(1);
				if ( !(_la==IGNORE_SYMBOL || _la==REPLACE_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2827);
			match(INTO_SYMBOL);
			setState(2828);
			match(TABLE_SYMBOL);
			setState(2829);
			tableRef();
			setState(2831);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,263,_ctx) ) {
			case 1:
				{
				setState(2830);
				usePartition();
				}
				break;
			}
			setState(2834);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,264,_ctx) ) {
			case 1:
				{
				setState(2833);
				charsetClause();
				}
				break;
			}
			setState(2837);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,265,_ctx) ) {
			case 1:
				{
				setState(2836);
				xmlRowsIdentifiedBy();
				}
				break;
			}
			setState(2840);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,266,_ctx) ) {
			case 1:
				{
				setState(2839);
				fieldsClause();
				}
				break;
			}
			setState(2843);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,267,_ctx) ) {
			case 1:
				{
				setState(2842);
				linesClause();
				}
				break;
			}
			setState(2845);
			loadDataFileTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataOrXmlContext extends ParserRuleContext {
		public TerminalNode DATA_SYMBOL() { return getToken(MultiQueryMySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode XML_SYMBOL() { return getToken(MultiQueryMySQLParser.XML_SYMBOL, 0); }
		public DataOrXmlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataOrXml; }
	}

	public final DataOrXmlContext dataOrXml() throws RecognitionException {
		DataOrXmlContext _localctx = new DataOrXmlContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_dataOrXml);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2847);
			_la = _input.LA(1);
			if ( !(_la==DATA_SYMBOL || _la==XML_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlRowsIdentifiedByContext extends ParserRuleContext {
		public TerminalNode ROWS_SYMBOL() { return getToken(MultiQueryMySQLParser.ROWS_SYMBOL, 0); }
		public TerminalNode IDENTIFIED_SYMBOL() { return getToken(MultiQueryMySQLParser.IDENTIFIED_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MultiQueryMySQLParser.BY_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public XmlRowsIdentifiedByContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlRowsIdentifiedBy; }
	}

	public final XmlRowsIdentifiedByContext xmlRowsIdentifiedBy() throws RecognitionException {
		XmlRowsIdentifiedByContext _localctx = new XmlRowsIdentifiedByContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_xmlRowsIdentifiedBy);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2849);
			match(ROWS_SYMBOL);
			setState(2850);
			match(IDENTIFIED_SYMBOL);
			setState(2851);
			match(BY_SYMBOL);
			setState(2852);
			textString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadDataFileTailContext extends ParserRuleContext {
		public TerminalNode IGNORE_SYMBOL() { return getToken(MultiQueryMySQLParser.IGNORE_SYMBOL, 0); }
		public TerminalNode INT_NUMBER() { return getToken(MultiQueryMySQLParser.INT_NUMBER, 0); }
		public LoadDataFileTargetListContext loadDataFileTargetList() {
			return getRuleContext(LoadDataFileTargetListContext.class,0);
		}
		public TerminalNode SET_SYMBOL() { return getToken(MultiQueryMySQLParser.SET_SYMBOL, 0); }
		public UpdateListContext updateList() {
			return getRuleContext(UpdateListContext.class,0);
		}
		public TerminalNode LINES_SYMBOL() { return getToken(MultiQueryMySQLParser.LINES_SYMBOL, 0); }
		public TerminalNode ROWS_SYMBOL() { return getToken(MultiQueryMySQLParser.ROWS_SYMBOL, 0); }
		public LoadDataFileTailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadDataFileTail; }
	}

	public final LoadDataFileTailContext loadDataFileTail() throws RecognitionException {
		LoadDataFileTailContext _localctx = new LoadDataFileTailContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_loadDataFileTail);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2857);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,268,_ctx) ) {
			case 1:
				{
				setState(2854);
				match(IGNORE_SYMBOL);
				setState(2855);
				match(INT_NUMBER);
				setState(2856);
				_la = _input.LA(1);
				if ( !(_la==ROWS_SYMBOL || _la==LINES_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(2860);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,269,_ctx) ) {
			case 1:
				{
				setState(2859);
				loadDataFileTargetList();
				}
				break;
			}
			setState(2864);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,270,_ctx) ) {
			case 1:
				{
				setState(2862);
				match(SET_SYMBOL);
				setState(2863);
				updateList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadDataFileTargetListContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public FieldOrVariableListContext fieldOrVariableList() {
			return getRuleContext(FieldOrVariableListContext.class,0);
		}
		public LoadDataFileTargetListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadDataFileTargetList; }
	}

	public final LoadDataFileTargetListContext loadDataFileTargetList() throws RecognitionException {
		LoadDataFileTargetListContext _localctx = new LoadDataFileTargetListContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_loadDataFileTargetList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2866);
			match(OPEN_PAR_SYMBOL);
			setState(2868);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,271,_ctx) ) {
			case 1:
				{
				setState(2867);
				fieldOrVariableList();
				}
				break;
			}
			setState(2870);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FieldOrVariableListContext extends ParserRuleContext {
		public List<ColumnRefContext> columnRef() {
			return getRuleContexts(ColumnRefContext.class);
		}
		public ColumnRefContext columnRef(int i) {
			return getRuleContext(ColumnRefContext.class,i);
		}
		public List<UserVariableContext> userVariable() {
			return getRuleContexts(UserVariableContext.class);
		}
		public UserVariableContext userVariable(int i) {
			return getRuleContext(UserVariableContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public FieldOrVariableListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldOrVariableList; }
	}

	public final FieldOrVariableListContext fieldOrVariableList() throws RecognitionException {
		FieldOrVariableListContext _localctx = new FieldOrVariableListContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_fieldOrVariableList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2874);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,272,_ctx) ) {
			case 1:
				{
				setState(2872);
				columnRef();
				}
				break;
			case 2:
				{
				setState(2873);
				userVariable();
				}
				break;
			}
			setState(2883);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(2876);
				match(COMMA_SYMBOL);
				setState(2879);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,273,_ctx) ) {
				case 1:
					{
					setState(2877);
					columnRef();
					}
					break;
				case 2:
					{
					setState(2878);
					userVariable();
					}
					break;
				}
				}
				}
				setState(2885);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplaceStatementContext extends ParserRuleContext {
		public TerminalNode REPLACE_SYMBOL() { return getToken(MultiQueryMySQLParser.REPLACE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public InsertFromConstructorContext insertFromConstructor() {
			return getRuleContext(InsertFromConstructorContext.class,0);
		}
		public TerminalNode SET_SYMBOL() { return getToken(MultiQueryMySQLParser.SET_SYMBOL, 0); }
		public UpdateListContext updateList() {
			return getRuleContext(UpdateListContext.class,0);
		}
		public InsertQueryExpressionContext insertQueryExpression() {
			return getRuleContext(InsertQueryExpressionContext.class,0);
		}
		public TerminalNode INTO_SYMBOL() { return getToken(MultiQueryMySQLParser.INTO_SYMBOL, 0); }
		public UsePartitionContext usePartition() {
			return getRuleContext(UsePartitionContext.class,0);
		}
		public TerminalNode LOW_PRIORITY_SYMBOL() { return getToken(MultiQueryMySQLParser.LOW_PRIORITY_SYMBOL, 0); }
		public TerminalNode DELAYED_SYMBOL() { return getToken(MultiQueryMySQLParser.DELAYED_SYMBOL, 0); }
		public ReplaceStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replaceStatement; }
	}

	public final ReplaceStatementContext replaceStatement() throws RecognitionException {
		ReplaceStatementContext _localctx = new ReplaceStatementContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_replaceStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2886);
			match(REPLACE_SYMBOL);
			setState(2888);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,275,_ctx) ) {
			case 1:
				{
				setState(2887);
				_la = _input.LA(1);
				if ( !(_la==DELAYED_SYMBOL || _la==LOW_PRIORITY_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(2891);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,276,_ctx) ) {
			case 1:
				{
				setState(2890);
				match(INTO_SYMBOL);
				}
				break;
			}
			setState(2893);
			tableRef();
			setState(2895);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,277,_ctx) ) {
			case 1:
				{
				setState(2894);
				usePartition();
				}
				break;
			}
			setState(2901);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,278,_ctx) ) {
			case 1:
				{
				setState(2897);
				insertFromConstructor();
				}
				break;
			case 2:
				{
				setState(2898);
				match(SET_SYMBOL);
				setState(2899);
				updateList();
				}
				break;
			case 3:
				{
				setState(2900);
				insertQueryExpression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectStatementContext extends ParserRuleContext {
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public QueryExpressionParensContext queryExpressionParens() {
			return getRuleContext(QueryExpressionParensContext.class,0);
		}
		public SelectStatementWithIntoContext selectStatementWithInto() {
			return getRuleContext(SelectStatementWithIntoContext.class,0);
		}
		public SelectStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectStatement; }
	}

	public final SelectStatementContext selectStatement() throws RecognitionException {
		SelectStatementContext _localctx = new SelectStatementContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_selectStatement);
		try {
			setState(2906);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,279,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2903);
				queryExpression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2904);
				queryExpressionParens();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2905);
				selectStatementWithInto();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectStatementWithIntoContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public SelectStatementWithIntoContext selectStatementWithInto() {
			return getRuleContext(SelectStatementWithIntoContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public IntoClauseContext intoClause() {
			return getRuleContext(IntoClauseContext.class,0);
		}
		public SelectStatementWithIntoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectStatementWithInto; }
	}

	public final SelectStatementWithIntoContext selectStatementWithInto() throws RecognitionException {
		SelectStatementWithIntoContext _localctx = new SelectStatementWithIntoContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_selectStatementWithInto);
		try {
			setState(2915);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,280,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2908);
				match(OPEN_PAR_SYMBOL);
				setState(2909);
				selectStatementWithInto();
				setState(2910);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2912);
				queryExpression();
				setState(2913);
				intoClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryExpressionContext extends ParserRuleContext {
		public QueryExpressionBodyContext queryExpressionBody() {
			return getRuleContext(QueryExpressionBodyContext.class,0);
		}
		public QueryExpressionParensContext queryExpressionParens() {
			return getRuleContext(QueryExpressionParensContext.class,0);
		}
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public ProcedureAnalyseClauseContext procedureAnalyseClause() {
			return getRuleContext(ProcedureAnalyseClauseContext.class,0);
		}
		public LockingClauseContext lockingClause() {
			return getRuleContext(LockingClauseContext.class,0);
		}
		public OrderClauseContext orderClause() {
			return getRuleContext(OrderClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public QueryExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpression; }
	}

	public final QueryExpressionContext queryExpression() throws RecognitionException {
		QueryExpressionContext _localctx = new QueryExpressionContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_queryExpression);
		try {
			setState(2951);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,290,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2919);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,281,_ctx) ) {
				case 1:
					{
					setState(2917);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(2918);
					withClause();
					}
					break;
				}
				setState(2936);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,286,_ctx) ) {
				case 1:
					{
					setState(2921);
					queryExpressionBody(0);
					setState(2923);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,282,_ctx) ) {
					case 1:
						{
						setState(2922);
						orderClause();
						}
						break;
					}
					setState(2926);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,283,_ctx) ) {
					case 1:
						{
						setState(2925);
						limitClause();
						}
						break;
					}
					}
					break;
				case 2:
					{
					setState(2928);
					queryExpressionParens();
					setState(2934);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ORDER_SYMBOL:
						{
						setState(2929);
						orderClause();
						setState(2931);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,284,_ctx) ) {
						case 1:
							{
							setState(2930);
							limitClause();
							}
							break;
						}
						}
						break;
					case LIMIT_SYMBOL:
						{
						setState(2933);
						limitClause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				setState(2940);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,287,_ctx) ) {
				case 1:
					{
					setState(2938);
					if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
					setState(2939);
					procedureAnalyseClause();
					}
					break;
				}
				setState(2943);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,288,_ctx) ) {
				case 1:
					{
					setState(2942);
					lockingClause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2945);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(2946);
				withClause();
				setState(2947);
				queryExpressionParens();
				setState(2949);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,289,_ctx) ) {
				case 1:
					{
					setState(2948);
					lockingClause();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryExpressionBodyContext extends ParserRuleContext {
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public List<QueryExpressionParensContext> queryExpressionParens() {
			return getRuleContexts(QueryExpressionParensContext.class);
		}
		public QueryExpressionParensContext queryExpressionParens(int i) {
			return getRuleContext(QueryExpressionParensContext.class,i);
		}
		public TerminalNode UNION_SYMBOL() { return getToken(MultiQueryMySQLParser.UNION_SYMBOL, 0); }
		public UnionOptionContext unionOption() {
			return getRuleContext(UnionOptionContext.class,0);
		}
		public QueryExpressionBodyContext queryExpressionBody() {
			return getRuleContext(QueryExpressionBodyContext.class,0);
		}
		public QueryExpressionBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpressionBody; }
	}

	public final QueryExpressionBodyContext queryExpressionBody() throws RecognitionException {
		return queryExpressionBody(0);
	}

	private QueryExpressionBodyContext queryExpressionBody(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		QueryExpressionBodyContext _localctx = new QueryExpressionBodyContext(_ctx, _parentState);
		QueryExpressionBodyContext _prevctx = _localctx;
		int _startState = 276;
		enterRecursionRule(_localctx, 276, RULE_queryExpressionBody, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2964);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT_SYMBOL:
				{
				setState(2954);
				querySpecification();
				}
				break;
			case OPEN_PAR_SYMBOL:
				{
				setState(2955);
				queryExpressionParens();
				setState(2956);
				match(UNION_SYMBOL);
				setState(2958);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL_SYMBOL || _la==DISTINCT_SYMBOL) {
					{
					setState(2957);
					unionOption();
					}
				}

				setState(2962);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SELECT_SYMBOL:
					{
					setState(2960);
					querySpecification();
					}
					break;
				case OPEN_PAR_SYMBOL:
					{
					setState(2961);
					queryExpressionParens();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(2977);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,296,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new QueryExpressionBodyContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_queryExpressionBody);
					setState(2966);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2967);
					match(UNION_SYMBOL);
					setState(2969);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL_SYMBOL || _la==DISTINCT_SYMBOL) {
						{
						setState(2968);
						unionOption();
						}
					}

					setState(2973);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case SELECT_SYMBOL:
						{
						setState(2971);
						querySpecification();
						}
						break;
					case OPEN_PAR_SYMBOL:
						{
						setState(2972);
						queryExpressionParens();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				setState(2979);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,296,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class QueryExpressionParensContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public QueryExpressionParensContext queryExpressionParens() {
			return getRuleContext(QueryExpressionParensContext.class,0);
		}
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public QueryExpressionParensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpressionParens; }
	}

	public final QueryExpressionParensContext queryExpressionParens() throws RecognitionException {
		QueryExpressionParensContext _localctx = new QueryExpressionParensContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_queryExpressionParens);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2980);
			match(OPEN_PAR_SYMBOL);
			setState(2983);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,297,_ctx) ) {
			case 1:
				{
				setState(2981);
				queryExpressionParens();
				}
				break;
			case 2:
				{
				setState(2982);
				queryExpression();
				}
				break;
			}
			setState(2985);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuerySpecificationContext extends ParserRuleContext {
		public TerminalNode SELECT_SYMBOL() { return getToken(MultiQueryMySQLParser.SELECT_SYMBOL, 0); }
		public SelectItemListContext selectItemList() {
			return getRuleContext(SelectItemListContext.class,0);
		}
		public List<SelectOptionContext> selectOption() {
			return getRuleContexts(SelectOptionContext.class);
		}
		public SelectOptionContext selectOption(int i) {
			return getRuleContext(SelectOptionContext.class,i);
		}
		public IntoClauseContext intoClause() {
			return getRuleContext(IntoClauseContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public GroupByClauseContext groupByClause() {
			return getRuleContext(GroupByClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public WindowClauseContext windowClause() {
			return getRuleContext(WindowClauseContext.class,0);
		}
		public QuerySpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querySpecification; }
	}

	public final QuerySpecificationContext querySpecification() throws RecognitionException {
		QuerySpecificationContext _localctx = new QuerySpecificationContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_querySpecification);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2987);
			match(SELECT_SYMBOL);
			setState(2991);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,298,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2988);
					selectOption();
					}
					} 
				}
				setState(2993);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,298,_ctx);
			}
			setState(2994);
			selectItemList();
			setState(2996);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,299,_ctx) ) {
			case 1:
				{
				setState(2995);
				intoClause();
				}
				break;
			}
			setState(2999);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,300,_ctx) ) {
			case 1:
				{
				setState(2998);
				fromClause();
				}
				break;
			}
			setState(3002);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,301,_ctx) ) {
			case 1:
				{
				setState(3001);
				whereClause();
				}
				break;
			}
			setState(3005);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,302,_ctx) ) {
			case 1:
				{
				setState(3004);
				groupByClause();
				}
				break;
			}
			setState(3008);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,303,_ctx) ) {
			case 1:
				{
				setState(3007);
				havingClause();
				}
				break;
			}
			setState(3012);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,304,_ctx) ) {
			case 1:
				{
				setState(3010);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(3011);
				windowClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubqueryContext extends ParserRuleContext {
		public QueryExpressionParensContext queryExpressionParens() {
			return getRuleContext(QueryExpressionParensContext.class,0);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery; }
	}

	public final SubqueryContext subquery() throws RecognitionException {
		SubqueryContext _localctx = new SubqueryContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_subquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3014);
			queryExpressionParens();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuerySpecOptionContext extends ParserRuleContext {
		public TerminalNode ALL_SYMBOL() { return getToken(MultiQueryMySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode DISTINCT_SYMBOL() { return getToken(MultiQueryMySQLParser.DISTINCT_SYMBOL, 0); }
		public TerminalNode STRAIGHT_JOIN_SYMBOL() { return getToken(MultiQueryMySQLParser.STRAIGHT_JOIN_SYMBOL, 0); }
		public TerminalNode HIGH_PRIORITY_SYMBOL() { return getToken(MultiQueryMySQLParser.HIGH_PRIORITY_SYMBOL, 0); }
		public TerminalNode SQL_SMALL_RESULT_SYMBOL() { return getToken(MultiQueryMySQLParser.SQL_SMALL_RESULT_SYMBOL, 0); }
		public TerminalNode SQL_BIG_RESULT_SYMBOL() { return getToken(MultiQueryMySQLParser.SQL_BIG_RESULT_SYMBOL, 0); }
		public TerminalNode SQL_BUFFER_RESULT_SYMBOL() { return getToken(MultiQueryMySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0); }
		public TerminalNode SQL_CALC_FOUND_ROWS_SYMBOL() { return getToken(MultiQueryMySQLParser.SQL_CALC_FOUND_ROWS_SYMBOL, 0); }
		public QuerySpecOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querySpecOption; }
	}

	public final QuerySpecOptionContext querySpecOption() throws RecognitionException {
		QuerySpecOptionContext _localctx = new QuerySpecOptionContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_querySpecOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3016);
			_la = _input.LA(1);
			if ( !(_la==SQL_BUFFER_RESULT_SYMBOL || _la==ALL_SYMBOL || _la==DISTINCT_SYMBOL || _la==HIGH_PRIORITY_SYMBOL || ((((_la - 629)) & ~0x3f) == 0 && ((1L << (_la - 629)) & ((1L << (SQL_BIG_RESULT_SYMBOL - 629)) | (1L << (SQL_CALC_FOUND_ROWS_SYMBOL - 629)) | (1L << (SQL_SMALL_RESULT_SYMBOL - 629)) | (1L << (STRAIGHT_JOIN_SYMBOL - 629)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitClauseContext extends ParserRuleContext {
		public TerminalNode LIMIT_SYMBOL() { return getToken(MultiQueryMySQLParser.LIMIT_SYMBOL, 0); }
		public LimitOptionsContext limitOptions() {
			return getRuleContext(LimitOptionsContext.class,0);
		}
		public LimitClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClause; }
	}

	public final LimitClauseContext limitClause() throws RecognitionException {
		LimitClauseContext _localctx = new LimitClauseContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_limitClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3018);
			match(LIMIT_SYMBOL);
			setState(3019);
			limitOptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleLimitClauseContext extends ParserRuleContext {
		public TerminalNode LIMIT_SYMBOL() { return getToken(MultiQueryMySQLParser.LIMIT_SYMBOL, 0); }
		public LimitOptionContext limitOption() {
			return getRuleContext(LimitOptionContext.class,0);
		}
		public SimpleLimitClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleLimitClause; }
	}

	public final SimpleLimitClauseContext simpleLimitClause() throws RecognitionException {
		SimpleLimitClauseContext _localctx = new SimpleLimitClauseContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_simpleLimitClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3021);
			match(LIMIT_SYMBOL);
			setState(3022);
			limitOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitOptionsContext extends ParserRuleContext {
		public List<LimitOptionContext> limitOption() {
			return getRuleContexts(LimitOptionContext.class);
		}
		public LimitOptionContext limitOption(int i) {
			return getRuleContext(LimitOptionContext.class,i);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, 0); }
		public TerminalNode OFFSET_SYMBOL() { return getToken(MultiQueryMySQLParser.OFFSET_SYMBOL, 0); }
		public LimitOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitOptions; }
	}

	public final LimitOptionsContext limitOptions() throws RecognitionException {
		LimitOptionsContext _localctx = new LimitOptionsContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_limitOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3024);
			limitOption();
			setState(3027);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,305,_ctx) ) {
			case 1:
				{
				setState(3025);
				_la = _input.LA(1);
				if ( !(_la==OFFSET_SYMBOL || _la==COMMA_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3026);
				limitOption();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitOptionContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode PARAM_MARKER() { return getToken(MultiQueryMySQLParser.PARAM_MARKER, 0); }
		public TerminalNode ULONGLONG_NUMBER() { return getToken(MultiQueryMySQLParser.ULONGLONG_NUMBER, 0); }
		public TerminalNode LONG_NUMBER() { return getToken(MultiQueryMySQLParser.LONG_NUMBER, 0); }
		public TerminalNode INT_NUMBER() { return getToken(MultiQueryMySQLParser.INT_NUMBER, 0); }
		public LimitOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitOption; }
	}

	public final LimitOptionContext limitOption() throws RecognitionException {
		LimitOptionContext _localctx = new LimitOptionContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_limitOption);
		int _la;
		try {
			setState(3031);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,306,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3029);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3030);
				_la = _input.LA(1);
				if ( !(((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (INT_NUMBER - 380)) | (1L << (LONG_NUMBER - 380)) | (1L << (ULONGLONG_NUMBER - 380)) | (1L << (PARAM_MARKER - 380)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntoClauseContext extends ParserRuleContext {
		public TerminalNode INTO_SYMBOL() { return getToken(MultiQueryMySQLParser.INTO_SYMBOL, 0); }
		public TerminalNode OUTFILE_SYMBOL() { return getToken(MultiQueryMySQLParser.OUTFILE_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode DUMPFILE_SYMBOL() { return getToken(MultiQueryMySQLParser.DUMPFILE_SYMBOL, 0); }
		public List<TextOrIdentifierContext> textOrIdentifier() {
			return getRuleContexts(TextOrIdentifierContext.class);
		}
		public TextOrIdentifierContext textOrIdentifier(int i) {
			return getRuleContext(TextOrIdentifierContext.class,i);
		}
		public List<UserVariableContext> userVariable() {
			return getRuleContexts(UserVariableContext.class);
		}
		public UserVariableContext userVariable(int i) {
			return getRuleContext(UserVariableContext.class,i);
		}
		public CharsetClauseContext charsetClause() {
			return getRuleContext(CharsetClauseContext.class,0);
		}
		public FieldsClauseContext fieldsClause() {
			return getRuleContext(FieldsClauseContext.class,0);
		}
		public LinesClauseContext linesClause() {
			return getRuleContext(LinesClauseContext.class,0);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public IntoClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intoClause; }
	}

	public final IntoClauseContext intoClause() throws RecognitionException {
		IntoClauseContext _localctx = new IntoClauseContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_intoClause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3033);
			match(INTO_SYMBOL);
			setState(3061);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,313,_ctx) ) {
			case 1:
				{
				setState(3034);
				match(OUTFILE_SYMBOL);
				setState(3035);
				textStringLiteral();
				setState(3037);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,307,_ctx) ) {
				case 1:
					{
					setState(3036);
					charsetClause();
					}
					break;
				}
				setState(3040);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,308,_ctx) ) {
				case 1:
					{
					setState(3039);
					fieldsClause();
					}
					break;
				}
				setState(3043);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,309,_ctx) ) {
				case 1:
					{
					setState(3042);
					linesClause();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(3045);
				match(DUMPFILE_SYMBOL);
				setState(3046);
				textStringLiteral();
				}
				break;
			case 3:
				{
				setState(3049);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,310,_ctx) ) {
				case 1:
					{
					setState(3047);
					textOrIdentifier();
					}
					break;
				case 2:
					{
					setState(3048);
					userVariable();
					}
					break;
				}
				setState(3058);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,312,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3051);
						match(COMMA_SYMBOL);
						setState(3054);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,311,_ctx) ) {
						case 1:
							{
							setState(3052);
							textOrIdentifier();
							}
							break;
						case 2:
							{
							setState(3053);
							userVariable();
							}
							break;
						}
						}
						} 
					}
					setState(3060);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,312,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureAnalyseClauseContext extends ParserRuleContext {
		public TerminalNode PROCEDURE_SYMBOL() { return getToken(MultiQueryMySQLParser.PROCEDURE_SYMBOL, 0); }
		public TerminalNode ANALYSE_SYMBOL() { return getToken(MultiQueryMySQLParser.ANALYSE_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> INT_NUMBER() { return getTokens(MultiQueryMySQLParser.INT_NUMBER); }
		public TerminalNode INT_NUMBER(int i) {
			return getToken(MultiQueryMySQLParser.INT_NUMBER, i);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, 0); }
		public ProcedureAnalyseClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureAnalyseClause; }
	}

	public final ProcedureAnalyseClauseContext procedureAnalyseClause() throws RecognitionException {
		ProcedureAnalyseClauseContext _localctx = new ProcedureAnalyseClauseContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_procedureAnalyseClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3063);
			match(PROCEDURE_SYMBOL);
			setState(3064);
			match(ANALYSE_SYMBOL);
			setState(3065);
			match(OPEN_PAR_SYMBOL);
			setState(3071);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INT_NUMBER) {
				{
				setState(3066);
				match(INT_NUMBER);
				setState(3069);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(3067);
					match(COMMA_SYMBOL);
					setState(3068);
					match(INT_NUMBER);
					}
				}

				}
			}

			setState(3073);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HavingClauseContext extends ParserRuleContext {
		public TerminalNode HAVING_SYMBOL() { return getToken(MultiQueryMySQLParser.HAVING_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_havingClause; }
	}

	public final HavingClauseContext havingClause() throws RecognitionException {
		HavingClauseContext _localctx = new HavingClauseContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_havingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3075);
			match(HAVING_SYMBOL);
			setState(3076);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowClauseContext extends ParserRuleContext {
		public TerminalNode WINDOW_SYMBOL() { return getToken(MultiQueryMySQLParser.WINDOW_SYMBOL, 0); }
		public List<WindowDefinitionContext> windowDefinition() {
			return getRuleContexts(WindowDefinitionContext.class);
		}
		public WindowDefinitionContext windowDefinition(int i) {
			return getRuleContext(WindowDefinitionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public WindowClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowClause; }
	}

	public final WindowClauseContext windowClause() throws RecognitionException {
		WindowClauseContext _localctx = new WindowClauseContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_windowClause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3078);
			match(WINDOW_SYMBOL);
			setState(3079);
			windowDefinition();
			setState(3084);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,316,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3080);
					match(COMMA_SYMBOL);
					setState(3081);
					windowDefinition();
					}
					} 
				}
				setState(3086);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,316,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowDefinitionContext extends ParserRuleContext {
		public WindowNameContext windowName() {
			return getRuleContext(WindowNameContext.class,0);
		}
		public TerminalNode AS_SYMBOL() { return getToken(MultiQueryMySQLParser.AS_SYMBOL, 0); }
		public WindowSpecContext windowSpec() {
			return getRuleContext(WindowSpecContext.class,0);
		}
		public WindowDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowDefinition; }
	}

	public final WindowDefinitionContext windowDefinition() throws RecognitionException {
		WindowDefinitionContext _localctx = new WindowDefinitionContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_windowDefinition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3087);
			windowName();
			setState(3088);
			match(AS_SYMBOL);
			setState(3089);
			windowSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowSpecContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public WindowSpecDetailsContext windowSpecDetails() {
			return getRuleContext(WindowSpecDetailsContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public WindowSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowSpec; }
	}

	public final WindowSpecContext windowSpec() throws RecognitionException {
		WindowSpecContext _localctx = new WindowSpecContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_windowSpec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3091);
			match(OPEN_PAR_SYMBOL);
			setState(3092);
			windowSpecDetails();
			setState(3093);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowSpecDetailsContext extends ParserRuleContext {
		public WindowNameContext windowName() {
			return getRuleContext(WindowNameContext.class,0);
		}
		public TerminalNode PARTITION_SYMBOL() { return getToken(MultiQueryMySQLParser.PARTITION_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MultiQueryMySQLParser.BY_SYMBOL, 0); }
		public OrderListContext orderList() {
			return getRuleContext(OrderListContext.class,0);
		}
		public OrderClauseContext orderClause() {
			return getRuleContext(OrderClauseContext.class,0);
		}
		public WindowFrameClauseContext windowFrameClause() {
			return getRuleContext(WindowFrameClauseContext.class,0);
		}
		public WindowSpecDetailsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowSpecDetails; }
	}

	public final WindowSpecDetailsContext windowSpecDetails() throws RecognitionException {
		WindowSpecDetailsContext _localctx = new WindowSpecDetailsContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_windowSpecDetails);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3096);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,317,_ctx) ) {
			case 1:
				{
				setState(3095);
				windowName();
				}
				break;
			}
			setState(3101);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION_SYMBOL) {
				{
				setState(3098);
				match(PARTITION_SYMBOL);
				setState(3099);
				match(BY_SYMBOL);
				setState(3100);
				orderList();
				}
			}

			setState(3104);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER_SYMBOL) {
				{
				setState(3103);
				orderClause();
				}
			}

			setState(3107);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ROWS_SYMBOL || _la==RANGE_SYMBOL || _la==GROUPS_SYMBOL) {
				{
				setState(3106);
				windowFrameClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFrameClauseContext extends ParserRuleContext {
		public WindowFrameUnitsContext windowFrameUnits() {
			return getRuleContext(WindowFrameUnitsContext.class,0);
		}
		public WindowFrameExtentContext windowFrameExtent() {
			return getRuleContext(WindowFrameExtentContext.class,0);
		}
		public WindowFrameExclusionContext windowFrameExclusion() {
			return getRuleContext(WindowFrameExclusionContext.class,0);
		}
		public WindowFrameClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrameClause; }
	}

	public final WindowFrameClauseContext windowFrameClause() throws RecognitionException {
		WindowFrameClauseContext _localctx = new WindowFrameClauseContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_windowFrameClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3109);
			windowFrameUnits();
			setState(3110);
			windowFrameExtent();
			setState(3112);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCLUDE_SYMBOL) {
				{
				setState(3111);
				windowFrameExclusion();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFrameUnitsContext extends ParserRuleContext {
		public TerminalNode ROWS_SYMBOL() { return getToken(MultiQueryMySQLParser.ROWS_SYMBOL, 0); }
		public TerminalNode RANGE_SYMBOL() { return getToken(MultiQueryMySQLParser.RANGE_SYMBOL, 0); }
		public TerminalNode GROUPS_SYMBOL() { return getToken(MultiQueryMySQLParser.GROUPS_SYMBOL, 0); }
		public WindowFrameUnitsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrameUnits; }
	}

	public final WindowFrameUnitsContext windowFrameUnits() throws RecognitionException {
		WindowFrameUnitsContext _localctx = new WindowFrameUnitsContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_windowFrameUnits);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3114);
			_la = _input.LA(1);
			if ( !(_la==ROWS_SYMBOL || _la==RANGE_SYMBOL || _la==GROUPS_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFrameExtentContext extends ParserRuleContext {
		public WindowFrameStartContext windowFrameStart() {
			return getRuleContext(WindowFrameStartContext.class,0);
		}
		public WindowFrameBetweenContext windowFrameBetween() {
			return getRuleContext(WindowFrameBetweenContext.class,0);
		}
		public WindowFrameExtentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrameExtent; }
	}

	public final WindowFrameExtentContext windowFrameExtent() throws RecognitionException {
		WindowFrameExtentContext _localctx = new WindowFrameExtentContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_windowFrameExtent);
		try {
			setState(3118);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT_SYMBOL:
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case PARAM_MARKER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
			case INTERVAL_SYMBOL:
			case UNBOUNDED_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3116);
				windowFrameStart();
				}
				break;
			case BETWEEN_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3117);
				windowFrameBetween();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFrameStartContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED_SYMBOL() { return getToken(MultiQueryMySQLParser.UNBOUNDED_SYMBOL, 0); }
		public TerminalNode PRECEDING_SYMBOL() { return getToken(MultiQueryMySQLParser.PRECEDING_SYMBOL, 0); }
		public Ulonglong_numberContext ulonglong_number() {
			return getRuleContext(Ulonglong_numberContext.class,0);
		}
		public TerminalNode PARAM_MARKER() { return getToken(MultiQueryMySQLParser.PARAM_MARKER, 0); }
		public TerminalNode INTERVAL_SYMBOL() { return getToken(MultiQueryMySQLParser.INTERVAL_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public IntervalContext interval() {
			return getRuleContext(IntervalContext.class,0);
		}
		public TerminalNode CURRENT_SYMBOL() { return getToken(MultiQueryMySQLParser.CURRENT_SYMBOL, 0); }
		public TerminalNode ROW_SYMBOL() { return getToken(MultiQueryMySQLParser.ROW_SYMBOL, 0); }
		public WindowFrameStartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrameStart; }
	}

	public final WindowFrameStartContext windowFrameStart() throws RecognitionException {
		WindowFrameStartContext _localctx = new WindowFrameStartContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_windowFrameStart);
		try {
			setState(3134);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNBOUNDED_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3120);
				match(UNBOUNDED_SYMBOL);
				setState(3121);
				match(PRECEDING_SYMBOL);
				}
				break;
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3122);
				ulonglong_number();
				setState(3123);
				match(PRECEDING_SYMBOL);
				}
				break;
			case PARAM_MARKER:
				enterOuterAlt(_localctx, 3);
				{
				setState(3125);
				match(PARAM_MARKER);
				setState(3126);
				match(PRECEDING_SYMBOL);
				}
				break;
			case INTERVAL_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(3127);
				match(INTERVAL_SYMBOL);
				setState(3128);
				expr(0);
				setState(3129);
				interval();
				setState(3130);
				match(PRECEDING_SYMBOL);
				}
				break;
			case CURRENT_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(3132);
				match(CURRENT_SYMBOL);
				setState(3133);
				match(ROW_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFrameBetweenContext extends ParserRuleContext {
		public TerminalNode BETWEEN_SYMBOL() { return getToken(MultiQueryMySQLParser.BETWEEN_SYMBOL, 0); }
		public List<WindowFrameBoundContext> windowFrameBound() {
			return getRuleContexts(WindowFrameBoundContext.class);
		}
		public WindowFrameBoundContext windowFrameBound(int i) {
			return getRuleContext(WindowFrameBoundContext.class,i);
		}
		public TerminalNode AND_SYMBOL() { return getToken(MultiQueryMySQLParser.AND_SYMBOL, 0); }
		public WindowFrameBetweenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrameBetween; }
	}

	public final WindowFrameBetweenContext windowFrameBetween() throws RecognitionException {
		WindowFrameBetweenContext _localctx = new WindowFrameBetweenContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_windowFrameBetween);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3136);
			match(BETWEEN_SYMBOL);
			setState(3137);
			windowFrameBound();
			setState(3138);
			match(AND_SYMBOL);
			setState(3139);
			windowFrameBound();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFrameBoundContext extends ParserRuleContext {
		public WindowFrameStartContext windowFrameStart() {
			return getRuleContext(WindowFrameStartContext.class,0);
		}
		public TerminalNode UNBOUNDED_SYMBOL() { return getToken(MultiQueryMySQLParser.UNBOUNDED_SYMBOL, 0); }
		public TerminalNode FOLLOWING_SYMBOL() { return getToken(MultiQueryMySQLParser.FOLLOWING_SYMBOL, 0); }
		public Ulonglong_numberContext ulonglong_number() {
			return getRuleContext(Ulonglong_numberContext.class,0);
		}
		public TerminalNode PARAM_MARKER() { return getToken(MultiQueryMySQLParser.PARAM_MARKER, 0); }
		public TerminalNode INTERVAL_SYMBOL() { return getToken(MultiQueryMySQLParser.INTERVAL_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public IntervalContext interval() {
			return getRuleContext(IntervalContext.class,0);
		}
		public WindowFrameBoundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrameBound; }
	}

	public final WindowFrameBoundContext windowFrameBound() throws RecognitionException {
		WindowFrameBoundContext _localctx = new WindowFrameBoundContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_windowFrameBound);
		try {
			setState(3154);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,324,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3141);
				windowFrameStart();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3142);
				match(UNBOUNDED_SYMBOL);
				setState(3143);
				match(FOLLOWING_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3144);
				ulonglong_number();
				setState(3145);
				match(FOLLOWING_SYMBOL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3147);
				match(PARAM_MARKER);
				setState(3148);
				match(FOLLOWING_SYMBOL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3149);
				match(INTERVAL_SYMBOL);
				setState(3150);
				expr(0);
				setState(3151);
				interval();
				setState(3152);
				match(FOLLOWING_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFrameExclusionContext extends ParserRuleContext {
		public TerminalNode EXCLUDE_SYMBOL() { return getToken(MultiQueryMySQLParser.EXCLUDE_SYMBOL, 0); }
		public TerminalNode CURRENT_SYMBOL() { return getToken(MultiQueryMySQLParser.CURRENT_SYMBOL, 0); }
		public TerminalNode ROW_SYMBOL() { return getToken(MultiQueryMySQLParser.ROW_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MultiQueryMySQLParser.GROUP_SYMBOL, 0); }
		public TerminalNode TIES_SYMBOL() { return getToken(MultiQueryMySQLParser.TIES_SYMBOL, 0); }
		public TerminalNode NO_SYMBOL() { return getToken(MultiQueryMySQLParser.NO_SYMBOL, 0); }
		public TerminalNode OTHERS_SYMBOL() { return getToken(MultiQueryMySQLParser.OTHERS_SYMBOL, 0); }
		public WindowFrameExclusionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrameExclusion; }
	}

	public final WindowFrameExclusionContext windowFrameExclusion() throws RecognitionException {
		WindowFrameExclusionContext _localctx = new WindowFrameExclusionContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_windowFrameExclusion);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3156);
			match(EXCLUDE_SYMBOL);
			setState(3163);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT_SYMBOL:
				{
				setState(3157);
				match(CURRENT_SYMBOL);
				setState(3158);
				match(ROW_SYMBOL);
				}
				break;
			case GROUP_SYMBOL:
				{
				setState(3159);
				match(GROUP_SYMBOL);
				}
				break;
			case TIES_SYMBOL:
				{
				setState(3160);
				match(TIES_SYMBOL);
				}
				break;
			case NO_SYMBOL:
				{
				setState(3161);
				match(NO_SYMBOL);
				setState(3162);
				match(OTHERS_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithClauseContext extends ParserRuleContext {
		public TerminalNode WITH_SYMBOL() { return getToken(MultiQueryMySQLParser.WITH_SYMBOL, 0); }
		public List<CommonTableExpressionContext> commonTableExpression() {
			return getRuleContexts(CommonTableExpressionContext.class);
		}
		public CommonTableExpressionContext commonTableExpression(int i) {
			return getRuleContext(CommonTableExpressionContext.class,i);
		}
		public TerminalNode RECURSIVE_SYMBOL() { return getToken(MultiQueryMySQLParser.RECURSIVE_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public WithClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withClause; }
	}

	public final WithClauseContext withClause() throws RecognitionException {
		WithClauseContext _localctx = new WithClauseContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_withClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3165);
			match(WITH_SYMBOL);
			setState(3167);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,326,_ctx) ) {
			case 1:
				{
				setState(3166);
				match(RECURSIVE_SYMBOL);
				}
				break;
			}
			setState(3169);
			commonTableExpression();
			setState(3174);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(3170);
				match(COMMA_SYMBOL);
				setState(3171);
				commonTableExpression();
				}
				}
				setState(3176);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommonTableExpressionContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode AS_SYMBOL() { return getToken(MultiQueryMySQLParser.AS_SYMBOL, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public ColumnInternalRefListContext columnInternalRefList() {
			return getRuleContext(ColumnInternalRefListContext.class,0);
		}
		public CommonTableExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commonTableExpression; }
	}

	public final CommonTableExpressionContext commonTableExpression() throws RecognitionException {
		CommonTableExpressionContext _localctx = new CommonTableExpressionContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_commonTableExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3177);
			identifier();
			setState(3179);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				setState(3178);
				columnInternalRefList();
				}
			}

			setState(3181);
			match(AS_SYMBOL);
			setState(3182);
			subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByClauseContext extends ParserRuleContext {
		public TerminalNode GROUP_SYMBOL() { return getToken(MultiQueryMySQLParser.GROUP_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MultiQueryMySQLParser.BY_SYMBOL, 0); }
		public OrderListContext orderList() {
			return getRuleContext(OrderListContext.class,0);
		}
		public OlapOptionContext olapOption() {
			return getRuleContext(OlapOptionContext.class,0);
		}
		public GroupByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByClause; }
	}

	public final GroupByClauseContext groupByClause() throws RecognitionException {
		GroupByClauseContext _localctx = new GroupByClauseContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_groupByClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3184);
			match(GROUP_SYMBOL);
			setState(3185);
			match(BY_SYMBOL);
			setState(3186);
			orderList();
			setState(3188);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,329,_ctx) ) {
			case 1:
				{
				setState(3187);
				olapOption();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OlapOptionContext extends ParserRuleContext {
		public TerminalNode WITH_SYMBOL() { return getToken(MultiQueryMySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode ROLLUP_SYMBOL() { return getToken(MultiQueryMySQLParser.ROLLUP_SYMBOL, 0); }
		public TerminalNode CUBE_SYMBOL() { return getToken(MultiQueryMySQLParser.CUBE_SYMBOL, 0); }
		public OlapOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_olapOption; }
	}

	public final OlapOptionContext olapOption() throws RecognitionException {
		OlapOptionContext _localctx = new OlapOptionContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_olapOption);
		try {
			setState(3195);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,330,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3190);
				match(WITH_SYMBOL);
				setState(3191);
				match(ROLLUP_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3192);
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				setState(3193);
				match(WITH_SYMBOL);
				setState(3194);
				match(CUBE_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderClauseContext extends ParserRuleContext {
		public TerminalNode ORDER_SYMBOL() { return getToken(MultiQueryMySQLParser.ORDER_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MultiQueryMySQLParser.BY_SYMBOL, 0); }
		public OrderListContext orderList() {
			return getRuleContext(OrderListContext.class,0);
		}
		public OrderClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderClause; }
	}

	public final OrderClauseContext orderClause() throws RecognitionException {
		OrderClauseContext _localctx = new OrderClauseContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_orderClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3197);
			match(ORDER_SYMBOL);
			setState(3198);
			match(BY_SYMBOL);
			setState(3199);
			orderList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DirectionContext extends ParserRuleContext {
		public TerminalNode ASC_SYMBOL() { return getToken(MultiQueryMySQLParser.ASC_SYMBOL, 0); }
		public TerminalNode DESC_SYMBOL() { return getToken(MultiQueryMySQLParser.DESC_SYMBOL, 0); }
		public DirectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_direction; }
	}

	public final DirectionContext direction() throws RecognitionException {
		DirectionContext _localctx = new DirectionContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_direction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3201);
			_la = _input.LA(1);
			if ( !(_la==ASC_SYMBOL || _la==DESC_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromClauseContext extends ParserRuleContext {
		public TerminalNode FROM_SYMBOL() { return getToken(MultiQueryMySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode DUAL_SYMBOL() { return getToken(MultiQueryMySQLParser.DUAL_SYMBOL, 0); }
		public TableReferenceListContext tableReferenceList() {
			return getRuleContext(TableReferenceListContext.class,0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromClause; }
	}

	public final FromClauseContext fromClause() throws RecognitionException {
		FromClauseContext _localctx = new FromClauseContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_fromClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3203);
			match(FROM_SYMBOL);
			setState(3206);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,331,_ctx) ) {
			case 1:
				{
				setState(3204);
				match(DUAL_SYMBOL);
				}
				break;
			case 2:
				{
				setState(3205);
				tableReferenceList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableReferenceListContext extends ParserRuleContext {
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public TableReferenceListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableReferenceList; }
	}

	public final TableReferenceListContext tableReferenceList() throws RecognitionException {
		TableReferenceListContext _localctx = new TableReferenceListContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_tableReferenceList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3208);
			tableReference();
			setState(3213);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,332,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3209);
					match(COMMA_SYMBOL);
					setState(3210);
					tableReference();
					}
					} 
				}
				setState(3215);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,332,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectOptionContext extends ParserRuleContext {
		public QuerySpecOptionContext querySpecOption() {
			return getRuleContext(QuerySpecOptionContext.class,0);
		}
		public TerminalNode SQL_NO_CACHE_SYMBOL() { return getToken(MultiQueryMySQLParser.SQL_NO_CACHE_SYMBOL, 0); }
		public TerminalNode SQL_CACHE_SYMBOL() { return getToken(MultiQueryMySQLParser.SQL_CACHE_SYMBOL, 0); }
		public TerminalNode MAX_STATEMENT_TIME_SYMBOL() { return getToken(MultiQueryMySQLParser.MAX_STATEMENT_TIME_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public SelectOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectOption; }
	}

	public final SelectOptionContext selectOption() throws RecognitionException {
		SelectOptionContext _localctx = new SelectOptionContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_selectOption);
		try {
			setState(3224);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,333,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3216);
				querySpecOption();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3217);
				match(SQL_NO_CACHE_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3218);
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				setState(3219);
				match(SQL_CACHE_SYMBOL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3220);
				if (!(serverVersion >= 50704 && serverVersion < 50708)) throw new FailedPredicateException(this, "serverVersion >= 50704 && serverVersion < 50708");
				setState(3221);
				match(MAX_STATEMENT_TIME_SYMBOL);
				setState(3222);
				match(EQUAL_OPERATOR);
				setState(3223);
				real_ulong_number();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockingClauseContext extends ParserRuleContext {
		public TerminalNode FOR_SYMBOL() { return getToken(MultiQueryMySQLParser.FOR_SYMBOL, 0); }
		public LockStrenghContext lockStrengh() {
			return getRuleContext(LockStrenghContext.class,0);
		}
		public TerminalNode OF_SYMBOL() { return getToken(MultiQueryMySQLParser.OF_SYMBOL, 0); }
		public TableAliasRefListContext tableAliasRefList() {
			return getRuleContext(TableAliasRefListContext.class,0);
		}
		public LockedRowActionContext lockedRowAction() {
			return getRuleContext(LockedRowActionContext.class,0);
		}
		public TerminalNode LOCK_SYMBOL() { return getToken(MultiQueryMySQLParser.LOCK_SYMBOL, 0); }
		public TerminalNode IN_SYMBOL() { return getToken(MultiQueryMySQLParser.IN_SYMBOL, 0); }
		public TerminalNode SHARE_SYMBOL() { return getToken(MultiQueryMySQLParser.SHARE_SYMBOL, 0); }
		public TerminalNode MODE_SYMBOL() { return getToken(MultiQueryMySQLParser.MODE_SYMBOL, 0); }
		public LockingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockingClause; }
	}

	public final LockingClauseContext lockingClause() throws RecognitionException {
		LockingClauseContext _localctx = new LockingClauseContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_lockingClause);
		try {
			setState(3241);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3226);
				match(FOR_SYMBOL);
				setState(3227);
				lockStrengh();
				setState(3231);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,334,_ctx) ) {
				case 1:
					{
					setState(3228);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(3229);
					match(OF_SYMBOL);
					setState(3230);
					tableAliasRefList();
					}
					break;
				}
				setState(3235);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,335,_ctx) ) {
				case 1:
					{
					setState(3233);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(3234);
					lockedRowAction();
					}
					break;
				}
				}
				break;
			case LOCK_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3237);
				match(LOCK_SYMBOL);
				setState(3238);
				match(IN_SYMBOL);
				setState(3239);
				match(SHARE_SYMBOL);
				setState(3240);
				match(MODE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockStrenghContext extends ParserRuleContext {
		public TerminalNode UPDATE_SYMBOL() { return getToken(MultiQueryMySQLParser.UPDATE_SYMBOL, 0); }
		public TerminalNode SHARE_SYMBOL() { return getToken(MultiQueryMySQLParser.SHARE_SYMBOL, 0); }
		public LockStrenghContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockStrengh; }
	}

	public final LockStrenghContext lockStrengh() throws RecognitionException {
		LockStrenghContext _localctx = new LockStrenghContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_lockStrengh);
		try {
			setState(3246);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,337,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3243);
				match(UPDATE_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3244);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(3245);
				match(SHARE_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockedRowActionContext extends ParserRuleContext {
		public TerminalNode SKIP_SYMBOL() { return getToken(MultiQueryMySQLParser.SKIP_SYMBOL, 0); }
		public TerminalNode LOCKED_SYMBOL() { return getToken(MultiQueryMySQLParser.LOCKED_SYMBOL, 0); }
		public TerminalNode NOWAIT_SYMBOL() { return getToken(MultiQueryMySQLParser.NOWAIT_SYMBOL, 0); }
		public LockedRowActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockedRowAction; }
	}

	public final LockedRowActionContext lockedRowAction() throws RecognitionException {
		LockedRowActionContext _localctx = new LockedRowActionContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_lockedRowAction);
		try {
			setState(3251);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SKIP_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3248);
				match(SKIP_SYMBOL);
				setState(3249);
				match(LOCKED_SYMBOL);
				}
				break;
			case NOWAIT_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3250);
				match(NOWAIT_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectItemListContext extends ParserRuleContext {
		public List<SelectItemContext> selectItem() {
			return getRuleContexts(SelectItemContext.class);
		}
		public SelectItemContext selectItem(int i) {
			return getRuleContext(SelectItemContext.class,i);
		}
		public TerminalNode MULT_OPERATOR() { return getToken(MultiQueryMySQLParser.MULT_OPERATOR, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public SelectItemListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectItemList; }
	}

	public final SelectItemListContext selectItemList() throws RecognitionException {
		SelectItemListContext _localctx = new SelectItemListContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_selectItemList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3255);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,339,_ctx) ) {
			case 1:
				{
				setState(3253);
				selectItem();
				}
				break;
			case 2:
				{
				setState(3254);
				match(MULT_OPERATOR);
				}
				break;
			}
			setState(3261);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,340,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3257);
					match(COMMA_SYMBOL);
					setState(3258);
					selectItem();
					}
					} 
				}
				setState(3263);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,340,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectItemContext extends ParserRuleContext {
		public TableWildContext tableWild() {
			return getRuleContext(TableWildContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public SelectAliasContext selectAlias() {
			return getRuleContext(SelectAliasContext.class,0);
		}
		public SelectItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectItem; }
	}

	public final SelectItemContext selectItem() throws RecognitionException {
		SelectItemContext _localctx = new SelectItemContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_selectItem);
		try {
			setState(3269);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,342,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3264);
				tableWild();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3265);
				expr(0);
				setState(3267);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,341,_ctx) ) {
				case 1:
					{
					setState(3266);
					selectAlias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectAliasContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode AS_SYMBOL() { return getToken(MultiQueryMySQLParser.AS_SYMBOL, 0); }
		public SelectAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectAlias; }
	}

	public final SelectAliasContext selectAlias() throws RecognitionException {
		SelectAliasContext _localctx = new SelectAliasContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_selectAlias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3272);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,343,_ctx) ) {
			case 1:
				{
				setState(3271);
				match(AS_SYMBOL);
				}
				break;
			}
			setState(3276);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,344,_ctx) ) {
			case 1:
				{
				setState(3274);
				identifier();
				}
				break;
			case 2:
				{
				setState(3275);
				textStringLiteral();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhereClauseContext extends ParserRuleContext {
		public TerminalNode WHERE_SYMBOL() { return getToken(MultiQueryMySQLParser.WHERE_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whereClause; }
	}

	public final WhereClauseContext whereClause() throws RecognitionException {
		WhereClauseContext _localctx = new WhereClauseContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_whereClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3278);
			match(WHERE_SYMBOL);
			setState(3279);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableReferenceContext extends ParserRuleContext {
		public TableFactorContext tableFactor() {
			return getRuleContext(TableFactorContext.class,0);
		}
		public TerminalNode OPEN_CURLY_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_CURLY_SYMBOL, 0); }
		public EscapedTableReferenceContext escapedTableReference() {
			return getRuleContext(EscapedTableReferenceContext.class,0);
		}
		public TerminalNode CLOSE_CURLY_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_CURLY_SYMBOL, 0); }
		public List<JoinedTableContext> joinedTable() {
			return getRuleContexts(JoinedTableContext.class);
		}
		public JoinedTableContext joinedTable(int i) {
			return getRuleContext(JoinedTableContext.class,i);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode OJ_SYMBOL() { return getToken(MultiQueryMySQLParser.OJ_SYMBOL, 0); }
		public TableReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableReference; }
	}

	public final TableReferenceContext tableReference() throws RecognitionException {
		TableReferenceContext _localctx = new TableReferenceContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_tableReference);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3291);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,346,_ctx) ) {
			case 1:
				{
				setState(3281);
				tableFactor();
				}
				break;
			case 2:
				{
				setState(3282);
				match(OPEN_CURLY_SYMBOL);
				setState(3286);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,345,_ctx) ) {
				case 1:
					{
					setState(3283);
					if (!(serverVersion < 80017)) throw new FailedPredicateException(this, "serverVersion < 80017");
					setState(3284);
					identifier();
					}
					break;
				case 2:
					{
					setState(3285);
					match(OJ_SYMBOL);
					}
					break;
				}
				setState(3288);
				escapedTableReference();
				setState(3289);
				match(CLOSE_CURLY_SYMBOL);
				}
				break;
			}
			setState(3296);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,347,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3293);
					joinedTable();
					}
					} 
				}
				setState(3298);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,347,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EscapedTableReferenceContext extends ParserRuleContext {
		public TableFactorContext tableFactor() {
			return getRuleContext(TableFactorContext.class,0);
		}
		public List<JoinedTableContext> joinedTable() {
			return getRuleContexts(JoinedTableContext.class);
		}
		public JoinedTableContext joinedTable(int i) {
			return getRuleContext(JoinedTableContext.class,i);
		}
		public EscapedTableReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_escapedTableReference; }
	}

	public final EscapedTableReferenceContext escapedTableReference() throws RecognitionException {
		EscapedTableReferenceContext _localctx = new EscapedTableReferenceContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_escapedTableReference);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3299);
			tableFactor();
			setState(3303);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CROSS_SYMBOL || _la==INNER_SYMBOL || ((((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & ((1L << (JOIN_SYMBOL - 535)) | (1L << (LEFT_SYMBOL - 535)) | (1L << (NATURAL_SYMBOL - 535)))) != 0) || _la==RIGHT_SYMBOL || _la==STRAIGHT_JOIN_SYMBOL) {
				{
				{
				setState(3300);
				joinedTable();
				}
				}
				setState(3305);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinedTableContext extends ParserRuleContext {
		public InnerJoinTypeContext innerJoinType() {
			return getRuleContext(InnerJoinTypeContext.class,0);
		}
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public TerminalNode ON_SYMBOL() { return getToken(MultiQueryMySQLParser.ON_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode USING_SYMBOL() { return getToken(MultiQueryMySQLParser.USING_SYMBOL, 0); }
		public IdentifierListWithParenthesesContext identifierListWithParentheses() {
			return getRuleContext(IdentifierListWithParenthesesContext.class,0);
		}
		public OuterJoinTypeContext outerJoinType() {
			return getRuleContext(OuterJoinTypeContext.class,0);
		}
		public NaturalJoinTypeContext naturalJoinType() {
			return getRuleContext(NaturalJoinTypeContext.class,0);
		}
		public TableFactorContext tableFactor() {
			return getRuleContext(TableFactorContext.class,0);
		}
		public JoinedTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinedTable; }
	}

	public final JoinedTableContext joinedTable() throws RecognitionException {
		JoinedTableContext _localctx = new JoinedTableContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_joinedTable);
		try {
			setState(3325);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CROSS_SYMBOL:
			case INNER_SYMBOL:
			case JOIN_SYMBOL:
			case STRAIGHT_JOIN_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3306);
				innerJoinType();
				setState(3307);
				tableReference();
				setState(3312);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,349,_ctx) ) {
				case 1:
					{
					setState(3308);
					match(ON_SYMBOL);
					setState(3309);
					expr(0);
					}
					break;
				case 2:
					{
					setState(3310);
					match(USING_SYMBOL);
					setState(3311);
					identifierListWithParentheses();
					}
					break;
				}
				}
				break;
			case LEFT_SYMBOL:
			case RIGHT_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3314);
				outerJoinType();
				setState(3315);
				tableReference();
				setState(3320);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ON_SYMBOL:
					{
					setState(3316);
					match(ON_SYMBOL);
					setState(3317);
					expr(0);
					}
					break;
				case USING_SYMBOL:
					{
					setState(3318);
					match(USING_SYMBOL);
					setState(3319);
					identifierListWithParentheses();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NATURAL_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(3322);
				naturalJoinType();
				setState(3323);
				tableFactor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NaturalJoinTypeContext extends ParserRuleContext {
		public TerminalNode NATURAL_SYMBOL() { return getToken(MultiQueryMySQLParser.NATURAL_SYMBOL, 0); }
		public TerminalNode JOIN_SYMBOL() { return getToken(MultiQueryMySQLParser.JOIN_SYMBOL, 0); }
		public TerminalNode INNER_SYMBOL() { return getToken(MultiQueryMySQLParser.INNER_SYMBOL, 0); }
		public TerminalNode LEFT_SYMBOL() { return getToken(MultiQueryMySQLParser.LEFT_SYMBOL, 0); }
		public TerminalNode RIGHT_SYMBOL() { return getToken(MultiQueryMySQLParser.RIGHT_SYMBOL, 0); }
		public TerminalNode OUTER_SYMBOL() { return getToken(MultiQueryMySQLParser.OUTER_SYMBOL, 0); }
		public NaturalJoinTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_naturalJoinType; }
	}

	public final NaturalJoinTypeContext naturalJoinType() throws RecognitionException {
		NaturalJoinTypeContext _localctx = new NaturalJoinTypeContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_naturalJoinType);
		int _la;
		try {
			setState(3338);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,354,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3327);
				match(NATURAL_SYMBOL);
				setState(3329);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INNER_SYMBOL) {
					{
					setState(3328);
					match(INNER_SYMBOL);
					}
				}

				setState(3331);
				match(JOIN_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3332);
				match(NATURAL_SYMBOL);
				setState(3333);
				_la = _input.LA(1);
				if ( !(_la==LEFT_SYMBOL || _la==RIGHT_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3335);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER_SYMBOL) {
					{
					setState(3334);
					match(OUTER_SYMBOL);
					}
				}

				setState(3337);
				match(JOIN_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InnerJoinTypeContext extends ParserRuleContext {
		public Token type;
		public TerminalNode JOIN_SYMBOL() { return getToken(MultiQueryMySQLParser.JOIN_SYMBOL, 0); }
		public TerminalNode INNER_SYMBOL() { return getToken(MultiQueryMySQLParser.INNER_SYMBOL, 0); }
		public TerminalNode CROSS_SYMBOL() { return getToken(MultiQueryMySQLParser.CROSS_SYMBOL, 0); }
		public TerminalNode STRAIGHT_JOIN_SYMBOL() { return getToken(MultiQueryMySQLParser.STRAIGHT_JOIN_SYMBOL, 0); }
		public InnerJoinTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_innerJoinType; }
	}

	public final InnerJoinTypeContext innerJoinType() throws RecognitionException {
		InnerJoinTypeContext _localctx = new InnerJoinTypeContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_innerJoinType);
		int _la;
		try {
			setState(3345);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CROSS_SYMBOL:
			case INNER_SYMBOL:
			case JOIN_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3341);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CROSS_SYMBOL || _la==INNER_SYMBOL) {
					{
					setState(3340);
					((InnerJoinTypeContext)_localctx).type = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==CROSS_SYMBOL || _la==INNER_SYMBOL) ) {
						((InnerJoinTypeContext)_localctx).type = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3343);
				match(JOIN_SYMBOL);
				}
				break;
			case STRAIGHT_JOIN_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3344);
				((InnerJoinTypeContext)_localctx).type = match(STRAIGHT_JOIN_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OuterJoinTypeContext extends ParserRuleContext {
		public Token type;
		public TerminalNode JOIN_SYMBOL() { return getToken(MultiQueryMySQLParser.JOIN_SYMBOL, 0); }
		public TerminalNode LEFT_SYMBOL() { return getToken(MultiQueryMySQLParser.LEFT_SYMBOL, 0); }
		public TerminalNode RIGHT_SYMBOL() { return getToken(MultiQueryMySQLParser.RIGHT_SYMBOL, 0); }
		public TerminalNode OUTER_SYMBOL() { return getToken(MultiQueryMySQLParser.OUTER_SYMBOL, 0); }
		public OuterJoinTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outerJoinType; }
	}

	public final OuterJoinTypeContext outerJoinType() throws RecognitionException {
		OuterJoinTypeContext _localctx = new OuterJoinTypeContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_outerJoinType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3347);
			((OuterJoinTypeContext)_localctx).type = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==LEFT_SYMBOL || _la==RIGHT_SYMBOL) ) {
				((OuterJoinTypeContext)_localctx).type = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3349);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUTER_SYMBOL) {
				{
				setState(3348);
				match(OUTER_SYMBOL);
				}
			}

			setState(3351);
			match(JOIN_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableFactorContext extends ParserRuleContext {
		public SingleTableContext singleTable() {
			return getRuleContext(SingleTableContext.class,0);
		}
		public SingleTableParensContext singleTableParens() {
			return getRuleContext(SingleTableParensContext.class,0);
		}
		public DerivedTableContext derivedTable() {
			return getRuleContext(DerivedTableContext.class,0);
		}
		public TableReferenceListParensContext tableReferenceListParens() {
			return getRuleContext(TableReferenceListParensContext.class,0);
		}
		public TableFunctionContext tableFunction() {
			return getRuleContext(TableFunctionContext.class,0);
		}
		public TableFactorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFactor; }
	}

	public final TableFactorContext tableFactor() throws RecognitionException {
		TableFactorContext _localctx = new TableFactorContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_tableFactor);
		try {
			setState(3359);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,358,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3353);
				singleTable();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3354);
				singleTableParens();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3355);
				derivedTable();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3356);
				tableReferenceListParens();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3357);
				if (!(serverVersion >= 80004)) throw new FailedPredicateException(this, "serverVersion >= 80004");
				setState(3358);
				tableFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleTableContext extends ParserRuleContext {
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public UsePartitionContext usePartition() {
			return getRuleContext(UsePartitionContext.class,0);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public IndexHintListContext indexHintList() {
			return getRuleContext(IndexHintListContext.class,0);
		}
		public SingleTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleTable; }
	}

	public final SingleTableContext singleTable() throws RecognitionException {
		SingleTableContext _localctx = new SingleTableContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_singleTable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3361);
			tableRef();
			setState(3363);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,359,_ctx) ) {
			case 1:
				{
				setState(3362);
				usePartition();
				}
				break;
			}
			setState(3366);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,360,_ctx) ) {
			case 1:
				{
				setState(3365);
				tableAlias();
				}
				break;
			}
			setState(3369);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,361,_ctx) ) {
			case 1:
				{
				setState(3368);
				indexHintList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleTableParensContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SingleTableContext singleTable() {
			return getRuleContext(SingleTableContext.class,0);
		}
		public SingleTableParensContext singleTableParens() {
			return getRuleContext(SingleTableParensContext.class,0);
		}
		public SingleTableParensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleTableParens; }
	}

	public final SingleTableParensContext singleTableParens() throws RecognitionException {
		SingleTableParensContext _localctx = new SingleTableParensContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_singleTableParens);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3371);
			match(OPEN_PAR_SYMBOL);
			setState(3374);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,362,_ctx) ) {
			case 1:
				{
				setState(3372);
				singleTable();
				}
				break;
			case 2:
				{
				setState(3373);
				singleTableParens();
				}
				break;
			}
			setState(3376);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DerivedTableContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public ColumnInternalRefListContext columnInternalRefList() {
			return getRuleContext(ColumnInternalRefListContext.class,0);
		}
		public TerminalNode LATERAL_SYMBOL() { return getToken(MultiQueryMySQLParser.LATERAL_SYMBOL, 0); }
		public DerivedTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_derivedTable; }
	}

	public final DerivedTableContext derivedTable() throws RecognitionException {
		DerivedTableContext _localctx = new DerivedTableContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_derivedTable);
		try {
			setState(3395);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,367,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3378);
				subquery();
				setState(3380);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,363,_ctx) ) {
				case 1:
					{
					setState(3379);
					tableAlias();
					}
					break;
				}
				setState(3384);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,364,_ctx) ) {
				case 1:
					{
					setState(3382);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(3383);
					columnInternalRefList();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3386);
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				setState(3387);
				match(LATERAL_SYMBOL);
				setState(3388);
				subquery();
				setState(3390);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,365,_ctx) ) {
				case 1:
					{
					setState(3389);
					tableAlias();
					}
					break;
				}
				setState(3393);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,366,_ctx) ) {
				case 1:
					{
					setState(3392);
					columnInternalRefList();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableReferenceListParensContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TableReferenceListContext tableReferenceList() {
			return getRuleContext(TableReferenceListContext.class,0);
		}
		public TableReferenceListParensContext tableReferenceListParens() {
			return getRuleContext(TableReferenceListParensContext.class,0);
		}
		public TableReferenceListParensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableReferenceListParens; }
	}

	public final TableReferenceListParensContext tableReferenceListParens() throws RecognitionException {
		TableReferenceListParensContext _localctx = new TableReferenceListParensContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_tableReferenceListParens);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3397);
			match(OPEN_PAR_SYMBOL);
			setState(3400);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,368,_ctx) ) {
			case 1:
				{
				setState(3398);
				tableReferenceList();
				}
				break;
			case 2:
				{
				setState(3399);
				tableReferenceListParens();
				}
				break;
			}
			setState(3402);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableFunctionContext extends ParserRuleContext {
		public TerminalNode JSON_TABLE_SYMBOL() { return getToken(MultiQueryMySQLParser.JSON_TABLE_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public ColumnsClauseContext columnsClause() {
			return getRuleContext(ColumnsClauseContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public TableFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFunction; }
	}

	public final TableFunctionContext tableFunction() throws RecognitionException {
		TableFunctionContext _localctx = new TableFunctionContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_tableFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3404);
			match(JSON_TABLE_SYMBOL);
			setState(3405);
			match(OPEN_PAR_SYMBOL);
			setState(3406);
			expr(0);
			setState(3407);
			match(COMMA_SYMBOL);
			setState(3408);
			textStringLiteral();
			setState(3409);
			columnsClause();
			setState(3410);
			match(CLOSE_PAR_SYMBOL);
			setState(3412);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,369,_ctx) ) {
			case 1:
				{
				setState(3411);
				tableAlias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnsClauseContext extends ParserRuleContext {
		public TerminalNode COLUMNS_SYMBOL() { return getToken(MultiQueryMySQLParser.COLUMNS_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<JtColumnContext> jtColumn() {
			return getRuleContexts(JtColumnContext.class);
		}
		public JtColumnContext jtColumn(int i) {
			return getRuleContext(JtColumnContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public ColumnsClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnsClause; }
	}

	public final ColumnsClauseContext columnsClause() throws RecognitionException {
		ColumnsClauseContext _localctx = new ColumnsClauseContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_columnsClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3414);
			match(COLUMNS_SYMBOL);
			setState(3415);
			match(OPEN_PAR_SYMBOL);
			setState(3416);
			jtColumn();
			setState(3421);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(3417);
				match(COMMA_SYMBOL);
				setState(3418);
				jtColumn();
				}
				}
				setState(3423);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3424);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JtColumnContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode FOR_SYMBOL() { return getToken(MultiQueryMySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode ORDINALITY_SYMBOL() { return getToken(MultiQueryMySQLParser.ORDINALITY_SYMBOL, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode PATH_SYMBOL() { return getToken(MultiQueryMySQLParser.PATH_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public CollateContext collate() {
			return getRuleContext(CollateContext.class,0);
		}
		public TerminalNode EXISTS_SYMBOL() { return getToken(MultiQueryMySQLParser.EXISTS_SYMBOL, 0); }
		public OnEmptyOrErrorContext onEmptyOrError() {
			return getRuleContext(OnEmptyOrErrorContext.class,0);
		}
		public TerminalNode NESTED_SYMBOL() { return getToken(MultiQueryMySQLParser.NESTED_SYMBOL, 0); }
		public ColumnsClauseContext columnsClause() {
			return getRuleContext(ColumnsClauseContext.class,0);
		}
		public JtColumnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jtColumn; }
	}

	public final JtColumnContext jtColumn() throws RecognitionException {
		JtColumnContext _localctx = new JtColumnContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_jtColumn);
		int _la;
		try {
			setState(3449);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,374,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3426);
				identifier();
				setState(3427);
				match(FOR_SYMBOL);
				setState(3428);
				match(ORDINALITY_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3430);
				identifier();
				setState(3431);
				dataType();
				setState(3434);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,371,_ctx) ) {
				case 1:
					{
					setState(3432);
					if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
					setState(3433);
					collate();
					}
					break;
				}
				setState(3437);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXISTS_SYMBOL) {
					{
					setState(3436);
					match(EXISTS_SYMBOL);
					}
				}

				setState(3439);
				match(PATH_SYMBOL);
				setState(3440);
				textStringLiteral();
				setState(3442);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ERROR_SYMBOL || _la==DEFAULT_SYMBOL || _la==NULL_SYMBOL) {
					{
					setState(3441);
					onEmptyOrError();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3444);
				match(NESTED_SYMBOL);
				setState(3445);
				match(PATH_SYMBOL);
				setState(3446);
				textStringLiteral();
				setState(3447);
				columnsClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OnEmptyOrErrorContext extends ParserRuleContext {
		public OnEmptyContext onEmpty() {
			return getRuleContext(OnEmptyContext.class,0);
		}
		public OnErrorContext onError() {
			return getRuleContext(OnErrorContext.class,0);
		}
		public OnEmptyOrErrorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onEmptyOrError; }
	}

	public final OnEmptyOrErrorContext onEmptyOrError() throws RecognitionException {
		OnEmptyOrErrorContext _localctx = new OnEmptyOrErrorContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_onEmptyOrError);
		int _la;
		try {
			setState(3459);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,377,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3451);
				onEmpty();
				setState(3453);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ERROR_SYMBOL || _la==DEFAULT_SYMBOL || _la==NULL_SYMBOL) {
					{
					setState(3452);
					onError();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3455);
				onError();
				setState(3457);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ERROR_SYMBOL || _la==DEFAULT_SYMBOL || _la==NULL_SYMBOL) {
					{
					setState(3456);
					onEmpty();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OnEmptyContext extends ParserRuleContext {
		public JtOnResponseContext jtOnResponse() {
			return getRuleContext(JtOnResponseContext.class,0);
		}
		public TerminalNode ON_SYMBOL() { return getToken(MultiQueryMySQLParser.ON_SYMBOL, 0); }
		public TerminalNode EMPTY_SYMBOL() { return getToken(MultiQueryMySQLParser.EMPTY_SYMBOL, 0); }
		public OnEmptyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onEmpty; }
	}

	public final OnEmptyContext onEmpty() throws RecognitionException {
		OnEmptyContext _localctx = new OnEmptyContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_onEmpty);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3461);
			jtOnResponse();
			setState(3462);
			match(ON_SYMBOL);
			setState(3463);
			match(EMPTY_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OnErrorContext extends ParserRuleContext {
		public JtOnResponseContext jtOnResponse() {
			return getRuleContext(JtOnResponseContext.class,0);
		}
		public TerminalNode ON_SYMBOL() { return getToken(MultiQueryMySQLParser.ON_SYMBOL, 0); }
		public TerminalNode ERROR_SYMBOL() { return getToken(MultiQueryMySQLParser.ERROR_SYMBOL, 0); }
		public OnErrorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onError; }
	}

	public final OnErrorContext onError() throws RecognitionException {
		OnErrorContext _localctx = new OnErrorContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_onError);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3465);
			jtOnResponse();
			setState(3466);
			match(ON_SYMBOL);
			setState(3467);
			match(ERROR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JtOnResponseContext extends ParserRuleContext {
		public TerminalNode ERROR_SYMBOL() { return getToken(MultiQueryMySQLParser.ERROR_SYMBOL, 0); }
		public TerminalNode NULL_SYMBOL() { return getToken(MultiQueryMySQLParser.NULL_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public JtOnResponseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jtOnResponse; }
	}

	public final JtOnResponseContext jtOnResponse() throws RecognitionException {
		JtOnResponseContext _localctx = new JtOnResponseContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_jtOnResponse);
		try {
			setState(3473);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ERROR_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3469);
				match(ERROR_SYMBOL);
				}
				break;
			case NULL_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3470);
				match(NULL_SYMBOL);
				}
				break;
			case DEFAULT_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(3471);
				match(DEFAULT_SYMBOL);
				setState(3472);
				textStringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnionOptionContext extends ParserRuleContext {
		public TerminalNode DISTINCT_SYMBOL() { return getToken(MultiQueryMySQLParser.DISTINCT_SYMBOL, 0); }
		public TerminalNode ALL_SYMBOL() { return getToken(MultiQueryMySQLParser.ALL_SYMBOL, 0); }
		public UnionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unionOption; }
	}

	public final UnionOptionContext unionOption() throws RecognitionException {
		UnionOptionContext _localctx = new UnionOptionContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_unionOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3475);
			_la = _input.LA(1);
			if ( !(_la==ALL_SYMBOL || _la==DISTINCT_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableAliasContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode AS_SYMBOL() { return getToken(MultiQueryMySQLParser.AS_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
		public TableAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableAlias; }
	}

	public final TableAliasContext tableAlias() throws RecognitionException {
		TableAliasContext _localctx = new TableAliasContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_tableAlias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3480);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,379,_ctx) ) {
			case 1:
				{
				setState(3477);
				match(AS_SYMBOL);
				}
				break;
			case 2:
				{
				setState(3478);
				if (!(serverVersion < 80017)) throw new FailedPredicateException(this, "serverVersion < 80017");
				setState(3479);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(3482);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintListContext extends ParserRuleContext {
		public List<IndexHintContext> indexHint() {
			return getRuleContexts(IndexHintContext.class);
		}
		public IndexHintContext indexHint(int i) {
			return getRuleContext(IndexHintContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public IndexHintListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHintList; }
	}

	public final IndexHintListContext indexHintList() throws RecognitionException {
		IndexHintListContext _localctx = new IndexHintListContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_indexHintList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3484);
			indexHint();
			setState(3489);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,380,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3485);
					match(COMMA_SYMBOL);
					setState(3486);
					indexHint();
					}
					} 
				}
				setState(3491);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,380,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintContext extends ParserRuleContext {
		public IndexHintTypeContext indexHintType() {
			return getRuleContext(IndexHintTypeContext.class,0);
		}
		public KeyOrIndexContext keyOrIndex() {
			return getRuleContext(KeyOrIndexContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public IndexListContext indexList() {
			return getRuleContext(IndexListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public IndexHintClauseContext indexHintClause() {
			return getRuleContext(IndexHintClauseContext.class,0);
		}
		public TerminalNode USE_SYMBOL() { return getToken(MultiQueryMySQLParser.USE_SYMBOL, 0); }
		public IndexHintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHint; }
	}

	public final IndexHintContext indexHint() throws RecognitionException {
		IndexHintContext _localctx = new IndexHintContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_indexHint);
		int _la;
		try {
			setState(3512);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FORCE_SYMBOL:
			case IGNORE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3492);
				indexHintType();
				setState(3493);
				keyOrIndex();
				setState(3495);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					setState(3494);
					indexHintClause();
					}
				}

				setState(3497);
				match(OPEN_PAR_SYMBOL);
				setState(3498);
				indexList();
				setState(3499);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case USE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3501);
				match(USE_SYMBOL);
				setState(3502);
				keyOrIndex();
				setState(3504);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					setState(3503);
					indexHintClause();
					}
				}

				setState(3506);
				match(OPEN_PAR_SYMBOL);
				setState(3508);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,383,_ctx) ) {
				case 1:
					{
					setState(3507);
					indexList();
					}
					break;
				}
				setState(3510);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintTypeContext extends ParserRuleContext {
		public TerminalNode FORCE_SYMBOL() { return getToken(MultiQueryMySQLParser.FORCE_SYMBOL, 0); }
		public TerminalNode IGNORE_SYMBOL() { return getToken(MultiQueryMySQLParser.IGNORE_SYMBOL, 0); }
		public IndexHintTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHintType; }
	}

	public final IndexHintTypeContext indexHintType() throws RecognitionException {
		IndexHintTypeContext _localctx = new IndexHintTypeContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_indexHintType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3514);
			_la = _input.LA(1);
			if ( !(_la==FORCE_SYMBOL || _la==IGNORE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyOrIndexContext extends ParserRuleContext {
		public TerminalNode KEY_SYMBOL() { return getToken(MultiQueryMySQLParser.KEY_SYMBOL, 0); }
		public TerminalNode INDEX_SYMBOL() { return getToken(MultiQueryMySQLParser.INDEX_SYMBOL, 0); }
		public KeyOrIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyOrIndex; }
	}

	public final KeyOrIndexContext keyOrIndex() throws RecognitionException {
		KeyOrIndexContext _localctx = new KeyOrIndexContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_keyOrIndex);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3516);
			_la = _input.LA(1);
			if ( !(_la==INDEX_SYMBOL || _la==KEY_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintKeyTypeContext extends ParserRuleContext {
		public TerminalNode PRIMARY_SYMBOL() { return getToken(MultiQueryMySQLParser.PRIMARY_SYMBOL, 0); }
		public TerminalNode KEY_SYMBOL() { return getToken(MultiQueryMySQLParser.KEY_SYMBOL, 0); }
		public TerminalNode UNIQUE_SYMBOL() { return getToken(MultiQueryMySQLParser.UNIQUE_SYMBOL, 0); }
		public KeyOrIndexContext keyOrIndex() {
			return getRuleContext(KeyOrIndexContext.class,0);
		}
		public ConstraintKeyTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintKeyType; }
	}

	public final ConstraintKeyTypeContext constraintKeyType() throws RecognitionException {
		ConstraintKeyTypeContext _localctx = new ConstraintKeyTypeContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_constraintKeyType);
		int _la;
		try {
			setState(3524);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRIMARY_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3518);
				match(PRIMARY_SYMBOL);
				setState(3519);
				match(KEY_SYMBOL);
				}
				break;
			case UNIQUE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3520);
				match(UNIQUE_SYMBOL);
				setState(3522);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX_SYMBOL || _la==KEY_SYMBOL) {
					{
					setState(3521);
					keyOrIndex();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintClauseContext extends ParserRuleContext {
		public TerminalNode FOR_SYMBOL() { return getToken(MultiQueryMySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode JOIN_SYMBOL() { return getToken(MultiQueryMySQLParser.JOIN_SYMBOL, 0); }
		public TerminalNode ORDER_SYMBOL() { return getToken(MultiQueryMySQLParser.ORDER_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MultiQueryMySQLParser.BY_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MultiQueryMySQLParser.GROUP_SYMBOL, 0); }
		public IndexHintClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHintClause; }
	}

	public final IndexHintClauseContext indexHintClause() throws RecognitionException {
		IndexHintClauseContext _localctx = new IndexHintClauseContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_indexHintClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3526);
			match(FOR_SYMBOL);
			setState(3532);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JOIN_SYMBOL:
				{
				setState(3527);
				match(JOIN_SYMBOL);
				}
				break;
			case ORDER_SYMBOL:
				{
				setState(3528);
				match(ORDER_SYMBOL);
				setState(3529);
				match(BY_SYMBOL);
				}
				break;
			case GROUP_SYMBOL:
				{
				setState(3530);
				match(GROUP_SYMBOL);
				setState(3531);
				match(BY_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexListContext extends ParserRuleContext {
		public List<IndexListElementContext> indexListElement() {
			return getRuleContexts(IndexListElementContext.class);
		}
		public IndexListElementContext indexListElement(int i) {
			return getRuleContext(IndexListElementContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public IndexListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexList; }
	}

	public final IndexListContext indexList() throws RecognitionException {
		IndexListContext _localctx = new IndexListContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_indexList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3534);
			indexListElement();
			setState(3539);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(3535);
				match(COMMA_SYMBOL);
				setState(3536);
				indexListElement();
				}
				}
				setState(3541);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexListElementContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode PRIMARY_SYMBOL() { return getToken(MultiQueryMySQLParser.PRIMARY_SYMBOL, 0); }
		public IndexListElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexListElement; }
	}

	public final IndexListElementContext indexListElement() throws RecognitionException {
		IndexListElementContext _localctx = new IndexListElementContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_indexListElement);
		try {
			setState(3544);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,389,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3542);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3543);
				match(PRIMARY_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateStatementContext extends ParserRuleContext {
		public TerminalNode UPDATE_SYMBOL() { return getToken(MultiQueryMySQLParser.UPDATE_SYMBOL, 0); }
		public TableReferenceListContext tableReferenceList() {
			return getRuleContext(TableReferenceListContext.class,0);
		}
		public TerminalNode SET_SYMBOL() { return getToken(MultiQueryMySQLParser.SET_SYMBOL, 0); }
		public UpdateListContext updateList() {
			return getRuleContext(UpdateListContext.class,0);
		}
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public TerminalNode LOW_PRIORITY_SYMBOL() { return getToken(MultiQueryMySQLParser.LOW_PRIORITY_SYMBOL, 0); }
		public TerminalNode IGNORE_SYMBOL() { return getToken(MultiQueryMySQLParser.IGNORE_SYMBOL, 0); }
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public OrderClauseContext orderClause() {
			return getRuleContext(OrderClauseContext.class,0);
		}
		public SimpleLimitClauseContext simpleLimitClause() {
			return getRuleContext(SimpleLimitClauseContext.class,0);
		}
		public UpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateStatement; }
	}

	public final UpdateStatementContext updateStatement() throws RecognitionException {
		UpdateStatementContext _localctx = new UpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_updateStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3548);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,390,_ctx) ) {
			case 1:
				{
				setState(3546);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(3547);
				withClause();
				}
				break;
			}
			setState(3550);
			match(UPDATE_SYMBOL);
			setState(3552);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,391,_ctx) ) {
			case 1:
				{
				setState(3551);
				match(LOW_PRIORITY_SYMBOL);
				}
				break;
			}
			setState(3555);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,392,_ctx) ) {
			case 1:
				{
				setState(3554);
				match(IGNORE_SYMBOL);
				}
				break;
			}
			setState(3557);
			tableReferenceList();
			setState(3558);
			match(SET_SYMBOL);
			setState(3559);
			updateList();
			setState(3561);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,393,_ctx) ) {
			case 1:
				{
				setState(3560);
				whereClause();
				}
				break;
			}
			setState(3564);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,394,_ctx) ) {
			case 1:
				{
				setState(3563);
				orderClause();
				}
				break;
			}
			setState(3567);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,395,_ctx) ) {
			case 1:
				{
				setState(3566);
				simpleLimitClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionOrLockingStatementContext extends ParserRuleContext {
		public TransactionStatementContext transactionStatement() {
			return getRuleContext(TransactionStatementContext.class,0);
		}
		public SavepointStatementContext savepointStatement() {
			return getRuleContext(SavepointStatementContext.class,0);
		}
		public LockStatementContext lockStatement() {
			return getRuleContext(LockStatementContext.class,0);
		}
		public XaStatementContext xaStatement() {
			return getRuleContext(XaStatementContext.class,0);
		}
		public TransactionOrLockingStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionOrLockingStatement; }
	}

	public final TransactionOrLockingStatementContext transactionOrLockingStatement() throws RecognitionException {
		TransactionOrLockingStatementContext _localctx = new TransactionOrLockingStatementContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_transactionOrLockingStatement);
		try {
			setState(3573);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,396,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3569);
				transactionStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3570);
				savepointStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3571);
				lockStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3572);
				xaStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionStatementContext extends ParserRuleContext {
		public TerminalNode START_SYMBOL() { return getToken(MultiQueryMySQLParser.START_SYMBOL, 0); }
		public TerminalNode TRANSACTION_SYMBOL() { return getToken(MultiQueryMySQLParser.TRANSACTION_SYMBOL, 0); }
		public List<TransactionCharacteristicContext> transactionCharacteristic() {
			return getRuleContexts(TransactionCharacteristicContext.class);
		}
		public TransactionCharacteristicContext transactionCharacteristic(int i) {
			return getRuleContext(TransactionCharacteristicContext.class,i);
		}
		public TerminalNode COMMIT_SYMBOL() { return getToken(MultiQueryMySQLParser.COMMIT_SYMBOL, 0); }
		public TerminalNode WORK_SYMBOL() { return getToken(MultiQueryMySQLParser.WORK_SYMBOL, 0); }
		public TerminalNode AND_SYMBOL() { return getToken(MultiQueryMySQLParser.AND_SYMBOL, 0); }
		public TerminalNode CHAIN_SYMBOL() { return getToken(MultiQueryMySQLParser.CHAIN_SYMBOL, 0); }
		public TerminalNode RELEASE_SYMBOL() { return getToken(MultiQueryMySQLParser.RELEASE_SYMBOL, 0); }
		public List<TerminalNode> NO_SYMBOL() { return getTokens(MultiQueryMySQLParser.NO_SYMBOL); }
		public TerminalNode NO_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.NO_SYMBOL, i);
		}
		public TransactionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionStatement; }
	}

	public final TransactionStatementContext transactionStatement() throws RecognitionException {
		TransactionStatementContext _localctx = new TransactionStatementContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_transactionStatement);
		int _la;
		try {
			int _alt;
			setState(3600);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case START_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3575);
				match(START_SYMBOL);
				setState(3576);
				match(TRANSACTION_SYMBOL);
				setState(3580);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,397,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3577);
						transactionCharacteristic();
						}
						} 
					}
					setState(3582);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,397,_ctx);
				}
				}
				break;
			case COMMIT_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3583);
				match(COMMIT_SYMBOL);
				setState(3585);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,398,_ctx) ) {
				case 1:
					{
					setState(3584);
					match(WORK_SYMBOL);
					}
					break;
				}
				setState(3592);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,400,_ctx) ) {
				case 1:
					{
					setState(3587);
					match(AND_SYMBOL);
					setState(3589);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NO_SYMBOL) {
						{
						setState(3588);
						match(NO_SYMBOL);
						}
					}

					setState(3591);
					match(CHAIN_SYMBOL);
					}
					break;
				}
				setState(3598);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,402,_ctx) ) {
				case 1:
					{
					setState(3595);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NO_SYMBOL) {
						{
						setState(3594);
						match(NO_SYMBOL);
						}
					}

					setState(3597);
					match(RELEASE_SYMBOL);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BeginWorkContext extends ParserRuleContext {
		public TerminalNode BEGIN_SYMBOL() { return getToken(MultiQueryMySQLParser.BEGIN_SYMBOL, 0); }
		public TerminalNode WORK_SYMBOL() { return getToken(MultiQueryMySQLParser.WORK_SYMBOL, 0); }
		public BeginWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_beginWork; }
	}

	public final BeginWorkContext beginWork() throws RecognitionException {
		BeginWorkContext _localctx = new BeginWorkContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_beginWork);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3602);
			match(BEGIN_SYMBOL);
			setState(3604);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,404,_ctx) ) {
			case 1:
				{
				setState(3603);
				match(WORK_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionCharacteristicContext extends ParserRuleContext {
		public TerminalNode WITH_SYMBOL() { return getToken(MultiQueryMySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode CONSISTENT_SYMBOL() { return getToken(MultiQueryMySQLParser.CONSISTENT_SYMBOL, 0); }
		public TerminalNode SNAPSHOT_SYMBOL() { return getToken(MultiQueryMySQLParser.SNAPSHOT_SYMBOL, 0); }
		public TerminalNode READ_SYMBOL() { return getToken(MultiQueryMySQLParser.READ_SYMBOL, 0); }
		public TerminalNode WRITE_SYMBOL() { return getToken(MultiQueryMySQLParser.WRITE_SYMBOL, 0); }
		public TerminalNode ONLY_SYMBOL() { return getToken(MultiQueryMySQLParser.ONLY_SYMBOL, 0); }
		public TransactionCharacteristicContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionCharacteristic; }
	}

	public final TransactionCharacteristicContext transactionCharacteristic() throws RecognitionException {
		TransactionCharacteristicContext _localctx = new TransactionCharacteristicContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_transactionCharacteristic);
		int _la;
		try {
			setState(3612);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,405,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3606);
				match(WITH_SYMBOL);
				setState(3607);
				match(CONSISTENT_SYMBOL);
				setState(3608);
				match(SNAPSHOT_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3609);
				if (!(serverVersion >= 50605)) throw new FailedPredicateException(this, "serverVersion >= 50605");
				setState(3610);
				match(READ_SYMBOL);
				setState(3611);
				_la = _input.LA(1);
				if ( !(_la==ONLY_SYMBOL || _la==WRITE_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SavepointStatementContext extends ParserRuleContext {
		public TerminalNode SAVEPOINT_SYMBOL() { return getToken(MultiQueryMySQLParser.SAVEPOINT_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode ROLLBACK_SYMBOL() { return getToken(MultiQueryMySQLParser.ROLLBACK_SYMBOL, 0); }
		public TerminalNode TO_SYMBOL() { return getToken(MultiQueryMySQLParser.TO_SYMBOL, 0); }
		public TerminalNode WORK_SYMBOL() { return getToken(MultiQueryMySQLParser.WORK_SYMBOL, 0); }
		public TerminalNode AND_SYMBOL() { return getToken(MultiQueryMySQLParser.AND_SYMBOL, 0); }
		public TerminalNode CHAIN_SYMBOL() { return getToken(MultiQueryMySQLParser.CHAIN_SYMBOL, 0); }
		public TerminalNode RELEASE_SYMBOL() { return getToken(MultiQueryMySQLParser.RELEASE_SYMBOL, 0); }
		public List<TerminalNode> NO_SYMBOL() { return getTokens(MultiQueryMySQLParser.NO_SYMBOL); }
		public TerminalNode NO_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.NO_SYMBOL, i);
		}
		public SavepointStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepointStatement; }
	}

	public final SavepointStatementContext savepointStatement() throws RecognitionException {
		SavepointStatementContext _localctx = new SavepointStatementContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_savepointStatement);
		int _la;
		try {
			setState(3643);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SAVEPOINT_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3614);
				match(SAVEPOINT_SYMBOL);
				setState(3615);
				identifier();
				}
				break;
			case ROLLBACK_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3616);
				match(ROLLBACK_SYMBOL);
				setState(3618);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,406,_ctx) ) {
				case 1:
					{
					setState(3617);
					match(WORK_SYMBOL);
					}
					break;
				}
				setState(3638);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,412,_ctx) ) {
				case 1:
					{
					setState(3620);
					match(TO_SYMBOL);
					setState(3622);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,407,_ctx) ) {
					case 1:
						{
						setState(3621);
						match(SAVEPOINT_SYMBOL);
						}
						break;
					}
					setState(3624);
					identifier();
					}
					break;
				case 2:
					{
					setState(3630);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,409,_ctx) ) {
					case 1:
						{
						setState(3625);
						match(AND_SYMBOL);
						setState(3627);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NO_SYMBOL) {
							{
							setState(3626);
							match(NO_SYMBOL);
							}
						}

						setState(3629);
						match(CHAIN_SYMBOL);
						}
						break;
					}
					setState(3636);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,411,_ctx) ) {
					case 1:
						{
						setState(3633);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NO_SYMBOL) {
							{
							setState(3632);
							match(NO_SYMBOL);
							}
						}

						setState(3635);
						match(RELEASE_SYMBOL);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case RELEASE_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(3640);
				match(RELEASE_SYMBOL);
				setState(3641);
				match(SAVEPOINT_SYMBOL);
				setState(3642);
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockStatementContext extends ParserRuleContext {
		public TerminalNode LOCK_SYMBOL() { return getToken(MultiQueryMySQLParser.LOCK_SYMBOL, 0); }
		public List<LockItemContext> lockItem() {
			return getRuleContexts(LockItemContext.class);
		}
		public LockItemContext lockItem(int i) {
			return getRuleContext(LockItemContext.class,i);
		}
		public TerminalNode TABLES_SYMBOL() { return getToken(MultiQueryMySQLParser.TABLES_SYMBOL, 0); }
		public TerminalNode TABLE_SYMBOL() { return getToken(MultiQueryMySQLParser.TABLE_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public TerminalNode INSTANCE_SYMBOL() { return getToken(MultiQueryMySQLParser.INSTANCE_SYMBOL, 0); }
		public TerminalNode FOR_SYMBOL() { return getToken(MultiQueryMySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode BACKUP_SYMBOL() { return getToken(MultiQueryMySQLParser.BACKUP_SYMBOL, 0); }
		public TerminalNode UNLOCK_SYMBOL() { return getToken(MultiQueryMySQLParser.UNLOCK_SYMBOL, 0); }
		public LockStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockStatement; }
	}

	public final LockStatementContext lockStatement() throws RecognitionException {
		LockStatementContext _localctx = new LockStatementContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_lockStatement);
		int _la;
		try {
			int _alt;
			setState(3667);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,416,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3645);
				match(LOCK_SYMBOL);
				setState(3646);
				_la = _input.LA(1);
				if ( !(_la==TABLES_SYMBOL || _la==TABLE_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3647);
				lockItem();
				setState(3652);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,414,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3648);
						match(COMMA_SYMBOL);
						setState(3649);
						lockItem();
						}
						} 
					}
					setState(3654);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,414,_ctx);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3655);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(3656);
				match(LOCK_SYMBOL);
				setState(3657);
				match(INSTANCE_SYMBOL);
				setState(3658);
				match(FOR_SYMBOL);
				setState(3659);
				match(BACKUP_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3660);
				match(UNLOCK_SYMBOL);
				setState(3665);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,415,_ctx) ) {
				case 1:
					{
					setState(3661);
					match(TABLES_SYMBOL);
					}
					break;
				case 2:
					{
					setState(3662);
					match(TABLE_SYMBOL);
					}
					break;
				case 3:
					{
					setState(3663);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(3664);
					match(INSTANCE_SYMBOL);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockItemContext extends ParserRuleContext {
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public LockOptionContext lockOption() {
			return getRuleContext(LockOptionContext.class,0);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public LockItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockItem; }
	}

	public final LockItemContext lockItem() throws RecognitionException {
		LockItemContext _localctx = new LockItemContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_lockItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3669);
			tableRef();
			setState(3671);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,417,_ctx) ) {
			case 1:
				{
				setState(3670);
				tableAlias();
				}
				break;
			}
			setState(3673);
			lockOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockOptionContext extends ParserRuleContext {
		public TerminalNode READ_SYMBOL() { return getToken(MultiQueryMySQLParser.READ_SYMBOL, 0); }
		public TerminalNode LOCAL_SYMBOL() { return getToken(MultiQueryMySQLParser.LOCAL_SYMBOL, 0); }
		public TerminalNode WRITE_SYMBOL() { return getToken(MultiQueryMySQLParser.WRITE_SYMBOL, 0); }
		public TerminalNode LOW_PRIORITY_SYMBOL() { return getToken(MultiQueryMySQLParser.LOW_PRIORITY_SYMBOL, 0); }
		public LockOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockOption; }
	}

	public final LockOptionContext lockOption() throws RecognitionException {
		LockOptionContext _localctx = new LockOptionContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_lockOption);
		int _la;
		try {
			setState(3683);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READ_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3675);
				match(READ_SYMBOL);
				setState(3677);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,418,_ctx) ) {
				case 1:
					{
					setState(3676);
					match(LOCAL_SYMBOL);
					}
					break;
				}
				}
				break;
			case LOW_PRIORITY_SYMBOL:
			case WRITE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3680);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOW_PRIORITY_SYMBOL) {
					{
					setState(3679);
					match(LOW_PRIORITY_SYMBOL);
					}
				}

				setState(3682);
				match(WRITE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaStatementContext extends ParserRuleContext {
		public TerminalNode XA_SYMBOL() { return getToken(MultiQueryMySQLParser.XA_SYMBOL, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode END_SYMBOL() { return getToken(MultiQueryMySQLParser.END_SYMBOL, 0); }
		public TerminalNode PREPARE_SYMBOL() { return getToken(MultiQueryMySQLParser.PREPARE_SYMBOL, 0); }
		public TerminalNode COMMIT_SYMBOL() { return getToken(MultiQueryMySQLParser.COMMIT_SYMBOL, 0); }
		public TerminalNode ROLLBACK_SYMBOL() { return getToken(MultiQueryMySQLParser.ROLLBACK_SYMBOL, 0); }
		public TerminalNode RECOVER_SYMBOL() { return getToken(MultiQueryMySQLParser.RECOVER_SYMBOL, 0); }
		public XaConvertContext xaConvert() {
			return getRuleContext(XaConvertContext.class,0);
		}
		public TerminalNode START_SYMBOL() { return getToken(MultiQueryMySQLParser.START_SYMBOL, 0); }
		public TerminalNode BEGIN_SYMBOL() { return getToken(MultiQueryMySQLParser.BEGIN_SYMBOL, 0); }
		public TerminalNode SUSPEND_SYMBOL() { return getToken(MultiQueryMySQLParser.SUSPEND_SYMBOL, 0); }
		public TerminalNode ONE_SYMBOL() { return getToken(MultiQueryMySQLParser.ONE_SYMBOL, 0); }
		public TerminalNode PHASE_SYMBOL() { return getToken(MultiQueryMySQLParser.PHASE_SYMBOL, 0); }
		public TerminalNode JOIN_SYMBOL() { return getToken(MultiQueryMySQLParser.JOIN_SYMBOL, 0); }
		public TerminalNode RESUME_SYMBOL() { return getToken(MultiQueryMySQLParser.RESUME_SYMBOL, 0); }
		public TerminalNode FOR_SYMBOL() { return getToken(MultiQueryMySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode MIGRATE_SYMBOL() { return getToken(MultiQueryMySQLParser.MIGRATE_SYMBOL, 0); }
		public XaStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaStatement; }
	}

	public final XaStatementContext xaStatement() throws RecognitionException {
		XaStatementContext _localctx = new XaStatementContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_xaStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3685);
			match(XA_SYMBOL);
			setState(3712);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BEGIN_SYMBOL:
			case START_SYMBOL:
				{
				setState(3686);
				_la = _input.LA(1);
				if ( !(_la==BEGIN_SYMBOL || _la==START_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3687);
				xid();
				setState(3689);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,421,_ctx) ) {
				case 1:
					{
					setState(3688);
					_la = _input.LA(1);
					if ( !(_la==RESUME_SYMBOL || _la==JOIN_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case END_SYMBOL:
				{
				setState(3691);
				match(END_SYMBOL);
				setState(3692);
				xid();
				setState(3698);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,423,_ctx) ) {
				case 1:
					{
					setState(3693);
					match(SUSPEND_SYMBOL);
					setState(3696);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,422,_ctx) ) {
					case 1:
						{
						setState(3694);
						match(FOR_SYMBOL);
						setState(3695);
						match(MIGRATE_SYMBOL);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case PREPARE_SYMBOL:
				{
				setState(3700);
				match(PREPARE_SYMBOL);
				setState(3701);
				xid();
				}
				break;
			case COMMIT_SYMBOL:
				{
				setState(3702);
				match(COMMIT_SYMBOL);
				setState(3703);
				xid();
				setState(3706);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,424,_ctx) ) {
				case 1:
					{
					setState(3704);
					match(ONE_SYMBOL);
					setState(3705);
					match(PHASE_SYMBOL);
					}
					break;
				}
				}
				break;
			case ROLLBACK_SYMBOL:
				{
				setState(3708);
				match(ROLLBACK_SYMBOL);
				setState(3709);
				xid();
				}
				break;
			case RECOVER_SYMBOL:
				{
				setState(3710);
				match(RECOVER_SYMBOL);
				setState(3711);
				xaConvert();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaConvertContext extends ParserRuleContext {
		public TerminalNode CONVERT_SYMBOL() { return getToken(MultiQueryMySQLParser.CONVERT_SYMBOL, 0); }
		public TerminalNode XID_SYMBOL() { return getToken(MultiQueryMySQLParser.XID_SYMBOL, 0); }
		public XaConvertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaConvert; }
	}

	public final XaConvertContext xaConvert() throws RecognitionException {
		XaConvertContext _localctx = new XaConvertContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_xaConvert);
		try {
			setState(3720);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,427,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3714);
				if (!(serverVersion >= 50704)) throw new FailedPredicateException(this, "serverVersion >= 50704");
				setState(3717);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,426,_ctx) ) {
				case 1:
					{
					setState(3715);
					match(CONVERT_SYMBOL);
					setState(3716);
					match(XID_SYMBOL);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XidContext extends ParserRuleContext {
		public List<TextStringContext> textString() {
			return getRuleContexts(TextStringContext.class);
		}
		public TextStringContext textString(int i) {
			return getRuleContext(TextStringContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public XidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xid; }
	}

	public final XidContext xid() throws RecognitionException {
		XidContext _localctx = new XidContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_xid);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3722);
			textString();
			setState(3729);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,429,_ctx) ) {
			case 1:
				{
				setState(3723);
				match(COMMA_SYMBOL);
				setState(3724);
				textString();
				setState(3727);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,428,_ctx) ) {
				case 1:
					{
					setState(3725);
					match(COMMA_SYMBOL);
					setState(3726);
					ulong_number();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplicationStatementContext extends ParserRuleContext {
		public TerminalNode PURGE_SYMBOL() { return getToken(MultiQueryMySQLParser.PURGE_SYMBOL, 0); }
		public TerminalNode LOGS_SYMBOL() { return getToken(MultiQueryMySQLParser.LOGS_SYMBOL, 0); }
		public TerminalNode BINARY_SYMBOL() { return getToken(MultiQueryMySQLParser.BINARY_SYMBOL, 0); }
		public TerminalNode MASTER_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_SYMBOL, 0); }
		public TerminalNode TO_SYMBOL() { return getToken(MultiQueryMySQLParser.TO_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode BEFORE_SYMBOL() { return getToken(MultiQueryMySQLParser.BEFORE_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ChangeMasterContext changeMaster() {
			return getRuleContext(ChangeMasterContext.class,0);
		}
		public TerminalNode RESET_SYMBOL() { return getToken(MultiQueryMySQLParser.RESET_SYMBOL, 0); }
		public List<ResetOptionContext> resetOption() {
			return getRuleContexts(ResetOptionContext.class);
		}
		public ResetOptionContext resetOption(int i) {
			return getRuleContext(ResetOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public TerminalNode PERSIST_SYMBOL() { return getToken(MultiQueryMySQLParser.PERSIST_SYMBOL, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SlaveContext slave() {
			return getRuleContext(SlaveContext.class,0);
		}
		public ChangeReplicationContext changeReplication() {
			return getRuleContext(ChangeReplicationContext.class,0);
		}
		public ReplicationLoadContext replicationLoad() {
			return getRuleContext(ReplicationLoadContext.class,0);
		}
		public GroupReplicationContext groupReplication() {
			return getRuleContext(GroupReplicationContext.class,0);
		}
		public ReplicationStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replicationStatement; }
	}

	public final ReplicationStatementContext replicationStatement() throws RecognitionException {
		ReplicationStatementContext _localctx = new ReplicationStatementContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_replicationStatement);
		int _la;
		try {
			int _alt;
			setState(3764);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,433,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3731);
				match(PURGE_SYMBOL);
				setState(3732);
				_la = _input.LA(1);
				if ( !(_la==MASTER_SYMBOL || _la==BINARY_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3733);
				match(LOGS_SYMBOL);
				setState(3738);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case TO_SYMBOL:
					{
					setState(3734);
					match(TO_SYMBOL);
					setState(3735);
					textLiteral();
					}
					break;
				case BEFORE_SYMBOL:
					{
					setState(3736);
					match(BEFORE_SYMBOL);
					setState(3737);
					expr(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3740);
				changeMaster();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3741);
				match(RESET_SYMBOL);
				setState(3742);
				resetOption();
				setState(3747);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,431,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3743);
						match(COMMA_SYMBOL);
						setState(3744);
						resetOption();
						}
						} 
					}
					setState(3749);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,431,_ctx);
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3750);
				if (!(serverVersion > 80000)) throw new FailedPredicateException(this, "serverVersion > 80000");
				setState(3751);
				match(RESET_SYMBOL);
				setState(3752);
				match(PERSIST_SYMBOL);
				setState(3756);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,432,_ctx) ) {
				case 1:
					{
					setState(3753);
					ifExists();
					setState(3754);
					identifier();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3758);
				slave();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3759);
				if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
				setState(3760);
				changeReplication();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3761);
				replicationLoad();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3762);
				if (!(serverVersion > 50706)) throw new FailedPredicateException(this, "serverVersion > 50706");
				setState(3763);
				groupReplication();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetOptionContext extends ParserRuleContext {
		public Token option;
		public TerminalNode MASTER_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_SYMBOL, 0); }
		public MasterResetOptionsContext masterResetOptions() {
			return getRuleContext(MasterResetOptionsContext.class,0);
		}
		public TerminalNode CACHE_SYMBOL() { return getToken(MultiQueryMySQLParser.CACHE_SYMBOL, 0); }
		public TerminalNode QUERY_SYMBOL() { return getToken(MultiQueryMySQLParser.QUERY_SYMBOL, 0); }
		public TerminalNode SLAVE_SYMBOL() { return getToken(MultiQueryMySQLParser.SLAVE_SYMBOL, 0); }
		public TerminalNode ALL_SYMBOL() { return getToken(MultiQueryMySQLParser.ALL_SYMBOL, 0); }
		public ChannelContext channel() {
			return getRuleContext(ChannelContext.class,0);
		}
		public ResetOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetOption; }
	}

	public final ResetOptionContext resetOption() throws RecognitionException {
		ResetOptionContext _localctx = new ResetOptionContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_resetOption);
		try {
			setState(3780);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,437,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3766);
				((ResetOptionContext)_localctx).option = match(MASTER_SYMBOL);
				setState(3768);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,434,_ctx) ) {
				case 1:
					{
					setState(3767);
					masterResetOptions();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3770);
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				setState(3771);
				((ResetOptionContext)_localctx).option = match(QUERY_SYMBOL);
				setState(3772);
				match(CACHE_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3773);
				((ResetOptionContext)_localctx).option = match(SLAVE_SYMBOL);
				setState(3775);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,435,_ctx) ) {
				case 1:
					{
					setState(3774);
					match(ALL_SYMBOL);
					}
					break;
				}
				setState(3778);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,436,_ctx) ) {
				case 1:
					{
					setState(3777);
					channel();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MasterResetOptionsContext extends ParserRuleContext {
		public TerminalNode TO_SYMBOL() { return getToken(MultiQueryMySQLParser.TO_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public Real_ulonglong_numberContext real_ulonglong_number() {
			return getRuleContext(Real_ulonglong_numberContext.class,0);
		}
		public MasterResetOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_masterResetOptions; }
	}

	public final MasterResetOptionsContext masterResetOptions() throws RecognitionException {
		MasterResetOptionsContext _localctx = new MasterResetOptionsContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_masterResetOptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3782);
			if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
			setState(3783);
			match(TO_SYMBOL);
			setState(3788);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,438,_ctx) ) {
			case 1:
				{
				setState(3784);
				if (!(serverVersion < 80017)) throw new FailedPredicateException(this, "serverVersion < 80017");
				setState(3785);
				real_ulong_number();
				}
				break;
			case 2:
				{
				setState(3786);
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				setState(3787);
				real_ulonglong_number();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplicationLoadContext extends ParserRuleContext {
		public TerminalNode LOAD_SYMBOL() { return getToken(MultiQueryMySQLParser.LOAD_SYMBOL, 0); }
		public TerminalNode FROM_SYMBOL() { return getToken(MultiQueryMySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode MASTER_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_SYMBOL, 0); }
		public TerminalNode DATA_SYMBOL() { return getToken(MultiQueryMySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode TABLE_SYMBOL() { return getToken(MultiQueryMySQLParser.TABLE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public ReplicationLoadContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replicationLoad; }
	}

	public final ReplicationLoadContext replicationLoad() throws RecognitionException {
		ReplicationLoadContext _localctx = new ReplicationLoadContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_replicationLoad);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3790);
			match(LOAD_SYMBOL);
			setState(3794);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATA_SYMBOL:
				{
				setState(3791);
				match(DATA_SYMBOL);
				}
				break;
			case TABLE_SYMBOL:
				{
				setState(3792);
				match(TABLE_SYMBOL);
				setState(3793);
				tableRef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3796);
			match(FROM_SYMBOL);
			setState(3797);
			match(MASTER_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChangeMasterContext extends ParserRuleContext {
		public TerminalNode CHANGE_SYMBOL() { return getToken(MultiQueryMySQLParser.CHANGE_SYMBOL, 0); }
		public TerminalNode MASTER_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_SYMBOL, 0); }
		public TerminalNode TO_SYMBOL() { return getToken(MultiQueryMySQLParser.TO_SYMBOL, 0); }
		public ChangeMasterOptionsContext changeMasterOptions() {
			return getRuleContext(ChangeMasterOptionsContext.class,0);
		}
		public ChannelContext channel() {
			return getRuleContext(ChannelContext.class,0);
		}
		public ChangeMasterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeMaster; }
	}

	public final ChangeMasterContext changeMaster() throws RecognitionException {
		ChangeMasterContext _localctx = new ChangeMasterContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_changeMaster);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3799);
			match(CHANGE_SYMBOL);
			setState(3800);
			match(MASTER_SYMBOL);
			setState(3801);
			match(TO_SYMBOL);
			setState(3802);
			changeMasterOptions();
			setState(3804);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,440,_ctx) ) {
			case 1:
				{
				setState(3803);
				channel();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChangeMasterOptionsContext extends ParserRuleContext {
		public List<MasterOptionContext> masterOption() {
			return getRuleContexts(MasterOptionContext.class);
		}
		public MasterOptionContext masterOption(int i) {
			return getRuleContext(MasterOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public ChangeMasterOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeMasterOptions; }
	}

	public final ChangeMasterOptionsContext changeMasterOptions() throws RecognitionException {
		ChangeMasterOptionsContext _localctx = new ChangeMasterOptionsContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_changeMasterOptions);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3806);
			masterOption();
			setState(3811);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,441,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3807);
					match(COMMA_SYMBOL);
					setState(3808);
					masterOption();
					}
					} 
				}
				setState(3813);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,441,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MasterOptionContext extends ParserRuleContext {
		public TerminalNode MASTER_HOST_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_HOST_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
		public TextStringNoLinebreakContext textStringNoLinebreak() {
			return getRuleContext(TextStringNoLinebreakContext.class,0);
		}
		public TerminalNode NETWORK_NAMESPACE_SYMBOL() { return getToken(MultiQueryMySQLParser.NETWORK_NAMESPACE_SYMBOL, 0); }
		public TerminalNode MASTER_BIND_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_BIND_SYMBOL, 0); }
		public TerminalNode MASTER_USER_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_USER_SYMBOL, 0); }
		public TerminalNode MASTER_PASSWORD_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_PASSWORD_SYMBOL, 0); }
		public TerminalNode MASTER_PORT_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_PORT_SYMBOL, 0); }
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public TerminalNode MASTER_CONNECT_RETRY_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0); }
		public TerminalNode MASTER_RETRY_COUNT_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0); }
		public TerminalNode MASTER_DELAY_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_DELAY_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_SSL_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CA_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_SSL_CA_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CAPATH_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0); }
		public TerminalNode MASTER_TLS_VERSION_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_TLS_VERSION_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CERT_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_SSL_CERT_SYMBOL, 0); }
		public TerminalNode MASTER_TLS_CIPHERSUITES_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL, 0); }
		public MasterTlsCiphersuitesDefContext masterTlsCiphersuitesDef() {
			return getRuleContext(MasterTlsCiphersuitesDefContext.class,0);
		}
		public TerminalNode MASTER_SSL_CIPHER_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_KEY_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_SSL_KEY_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CRL_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_SSL_CRL_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode MASTER_SSL_CRLPATH_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0); }
		public TerminalNode MASTER_PUBLIC_KEY_PATH_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0); }
		public TerminalNode GET_MASTER_PUBLIC_KEY_SYMBOL() { return getToken(MultiQueryMySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL, 0); }
		public TerminalNode MASTER_HEARTBEAT_PERIOD_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0); }
		public TerminalNode IGNORE_SERVER_IDS_SYMBOL() { return getToken(MultiQueryMySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0); }
		public ServerIdListContext serverIdList() {
			return getRuleContext(ServerIdListContext.class,0);
		}
		public TerminalNode MASTER_COMPRESSION_ALGORITHM_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0); }
		public TerminalNode MASTER_AUTO_POSITION_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0); }
		public TerminalNode PRIVILEGE_CHECKS_USER_SYMBOL() { return getToken(MultiQueryMySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL, 0); }
		public PrivilegeCheckDefContext privilegeCheckDef() {
			return getRuleContext(PrivilegeCheckDefContext.class,0);
		}
		public MasterFileDefContext masterFileDef() {
			return getRuleContext(MasterFileDefContext.class,0);
		}
		public MasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_masterOption; }
	}

	public final MasterOptionContext masterOption() throws RecognitionException {
		MasterOptionContext _localctx = new MasterOptionContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_masterOption);
		try {
			setState(3899);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MASTER_HOST_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3814);
				match(MASTER_HOST_SYMBOL);
				setState(3815);
				match(EQUAL_OPERATOR);
				setState(3816);
				textStringNoLinebreak();
				}
				break;
			case NETWORK_NAMESPACE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3817);
				match(NETWORK_NAMESPACE_SYMBOL);
				setState(3818);
				match(EQUAL_OPERATOR);
				setState(3819);
				textStringNoLinebreak();
				}
				break;
			case MASTER_BIND_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(3820);
				match(MASTER_BIND_SYMBOL);
				setState(3821);
				match(EQUAL_OPERATOR);
				setState(3822);
				textStringNoLinebreak();
				}
				break;
			case MASTER_USER_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(3823);
				match(MASTER_USER_SYMBOL);
				setState(3824);
				match(EQUAL_OPERATOR);
				setState(3825);
				textStringNoLinebreak();
				}
				break;
			case MASTER_PASSWORD_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(3826);
				match(MASTER_PASSWORD_SYMBOL);
				setState(3827);
				match(EQUAL_OPERATOR);
				setState(3828);
				textStringNoLinebreak();
				}
				break;
			case MASTER_PORT_SYMBOL:
				enterOuterAlt(_localctx, 6);
				{
				setState(3829);
				match(MASTER_PORT_SYMBOL);
				setState(3830);
				match(EQUAL_OPERATOR);
				setState(3831);
				ulong_number();
				}
				break;
			case MASTER_CONNECT_RETRY_SYMBOL:
				enterOuterAlt(_localctx, 7);
				{
				setState(3832);
				match(MASTER_CONNECT_RETRY_SYMBOL);
				setState(3833);
				match(EQUAL_OPERATOR);
				setState(3834);
				ulong_number();
				}
				break;
			case MASTER_RETRY_COUNT_SYMBOL:
				enterOuterAlt(_localctx, 8);
				{
				setState(3835);
				match(MASTER_RETRY_COUNT_SYMBOL);
				setState(3836);
				match(EQUAL_OPERATOR);
				setState(3837);
				ulong_number();
				}
				break;
			case MASTER_DELAY_SYMBOL:
				enterOuterAlt(_localctx, 9);
				{
				setState(3838);
				match(MASTER_DELAY_SYMBOL);
				setState(3839);
				match(EQUAL_OPERATOR);
				setState(3840);
				ulong_number();
				}
				break;
			case MASTER_SSL_SYMBOL:
				enterOuterAlt(_localctx, 10);
				{
				setState(3841);
				match(MASTER_SSL_SYMBOL);
				setState(3842);
				match(EQUAL_OPERATOR);
				setState(3843);
				ulong_number();
				}
				break;
			case MASTER_SSL_CA_SYMBOL:
				enterOuterAlt(_localctx, 11);
				{
				setState(3844);
				match(MASTER_SSL_CA_SYMBOL);
				setState(3845);
				match(EQUAL_OPERATOR);
				setState(3846);
				textStringNoLinebreak();
				}
				break;
			case MASTER_SSL_CAPATH_SYMBOL:
				enterOuterAlt(_localctx, 12);
				{
				setState(3847);
				match(MASTER_SSL_CAPATH_SYMBOL);
				setState(3848);
				match(EQUAL_OPERATOR);
				setState(3849);
				textStringNoLinebreak();
				}
				break;
			case MASTER_TLS_VERSION_SYMBOL:
				enterOuterAlt(_localctx, 13);
				{
				setState(3850);
				match(MASTER_TLS_VERSION_SYMBOL);
				setState(3851);
				match(EQUAL_OPERATOR);
				setState(3852);
				textStringNoLinebreak();
				}
				break;
			case MASTER_SSL_CERT_SYMBOL:
				enterOuterAlt(_localctx, 14);
				{
				setState(3853);
				match(MASTER_SSL_CERT_SYMBOL);
				setState(3854);
				match(EQUAL_OPERATOR);
				setState(3855);
				textStringNoLinebreak();
				}
				break;
			case MASTER_TLS_CIPHERSUITES_SYMBOL:
				enterOuterAlt(_localctx, 15);
				{
				setState(3856);
				match(MASTER_TLS_CIPHERSUITES_SYMBOL);
				setState(3857);
				match(EQUAL_OPERATOR);
				setState(3858);
				masterTlsCiphersuitesDef();
				}
				break;
			case MASTER_SSL_CIPHER_SYMBOL:
				enterOuterAlt(_localctx, 16);
				{
				setState(3859);
				match(MASTER_SSL_CIPHER_SYMBOL);
				setState(3860);
				match(EQUAL_OPERATOR);
				setState(3861);
				textStringNoLinebreak();
				}
				break;
			case MASTER_SSL_KEY_SYMBOL:
				enterOuterAlt(_localctx, 17);
				{
				setState(3862);
				match(MASTER_SSL_KEY_SYMBOL);
				setState(3863);
				match(EQUAL_OPERATOR);
				setState(3864);
				textStringNoLinebreak();
				}
				break;
			case MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL:
				enterOuterAlt(_localctx, 18);
				{
				setState(3865);
				match(MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL);
				setState(3866);
				match(EQUAL_OPERATOR);
				setState(3867);
				ulong_number();
				}
				break;
			case MASTER_SSL_CRL_SYMBOL:
				enterOuterAlt(_localctx, 19);
				{
				setState(3868);
				match(MASTER_SSL_CRL_SYMBOL);
				setState(3869);
				match(EQUAL_OPERATOR);
				setState(3870);
				textLiteral();
				}
				break;
			case MASTER_SSL_CRLPATH_SYMBOL:
				enterOuterAlt(_localctx, 20);
				{
				setState(3871);
				match(MASTER_SSL_CRLPATH_SYMBOL);
				setState(3872);
				match(EQUAL_OPERATOR);
				setState(3873);
				textStringNoLinebreak();
				}
				break;
			case MASTER_PUBLIC_KEY_PATH_SYMBOL:
				enterOuterAlt(_localctx, 21);
				{
				setState(3874);
				match(MASTER_PUBLIC_KEY_PATH_SYMBOL);
				setState(3875);
				match(EQUAL_OPERATOR);
				setState(3876);
				textStringNoLinebreak();
				}
				break;
			case GET_MASTER_PUBLIC_KEY_SYMBOL:
				enterOuterAlt(_localctx, 22);
				{
				setState(3877);
				match(GET_MASTER_PUBLIC_KEY_SYMBOL);
				setState(3878);
				match(EQUAL_OPERATOR);
				setState(3879);
				ulong_number();
				}
				break;
			case MASTER_HEARTBEAT_PERIOD_SYMBOL:
				enterOuterAlt(_localctx, 23);
				{
				setState(3880);
				match(MASTER_HEARTBEAT_PERIOD_SYMBOL);
				setState(3881);
				match(EQUAL_OPERATOR);
				setState(3882);
				ulong_number();
				}
				break;
			case IGNORE_SERVER_IDS_SYMBOL:
				enterOuterAlt(_localctx, 24);
				{
				setState(3883);
				match(IGNORE_SERVER_IDS_SYMBOL);
				setState(3884);
				match(EQUAL_OPERATOR);
				setState(3885);
				serverIdList();
				}
				break;
			case MASTER_COMPRESSION_ALGORITHM_SYMBOL:
				enterOuterAlt(_localctx, 25);
				{
				setState(3886);
				match(MASTER_COMPRESSION_ALGORITHM_SYMBOL);
				setState(3887);
				match(EQUAL_OPERATOR);
				setState(3888);
				textStringLiteral();
				}
				break;
			case MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL:
				enterOuterAlt(_localctx, 26);
				{
				setState(3889);
				match(MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL);
				setState(3890);
				match(EQUAL_OPERATOR);
				setState(3891);
				ulong_number();
				}
				break;
			case MASTER_AUTO_POSITION_SYMBOL:
				enterOuterAlt(_localctx, 27);
				{
				setState(3892);
				match(MASTER_AUTO_POSITION_SYMBOL);
				setState(3893);
				match(EQUAL_OPERATOR);
				setState(3894);
				ulong_number();
				}
				break;
			case PRIVILEGE_CHECKS_USER_SYMBOL:
				enterOuterAlt(_localctx, 28);
				{
				setState(3895);
				match(PRIVILEGE_CHECKS_USER_SYMBOL);
				setState(3896);
				match(EQUAL_OPERATOR);
				setState(3897);
				privilegeCheckDef();
				}
				break;
			case MASTER_LOG_FILE_SYMBOL:
			case MASTER_LOG_POS_SYMBOL:
			case RELAY_LOG_FILE_SYMBOL:
			case RELAY_LOG_POS_SYMBOL:
				enterOuterAlt(_localctx, 29);
				{
				setState(3898);
				masterFileDef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeCheckDefContext extends ParserRuleContext {
		public UserIdentifierOrTextContext userIdentifierOrText() {
			return getRuleContext(UserIdentifierOrTextContext.class,0);
		}
		public TerminalNode NULL_SYMBOL() { return getToken(MultiQueryMySQLParser.NULL_SYMBOL, 0); }
		public PrivilegeCheckDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegeCheckDef; }
	}

	public final PrivilegeCheckDefContext privilegeCheckDef() throws RecognitionException {
		PrivilegeCheckDefContext _localctx = new PrivilegeCheckDefContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_privilegeCheckDef);
		try {
			setState(3903);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,443,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3901);
				userIdentifierOrText();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3902);
				match(NULL_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MasterTlsCiphersuitesDefContext extends ParserRuleContext {
		public TextStringNoLinebreakContext textStringNoLinebreak() {
			return getRuleContext(TextStringNoLinebreakContext.class,0);
		}
		public TerminalNode NULL_SYMBOL() { return getToken(MultiQueryMySQLParser.NULL_SYMBOL, 0); }
		public MasterTlsCiphersuitesDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_masterTlsCiphersuitesDef; }
	}

	public final MasterTlsCiphersuitesDefContext masterTlsCiphersuitesDef() throws RecognitionException {
		MasterTlsCiphersuitesDefContext _localctx = new MasterTlsCiphersuitesDefContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_masterTlsCiphersuitesDef);
		try {
			setState(3907);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,444,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3905);
				textStringNoLinebreak();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3906);
				match(NULL_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MasterFileDefContext extends ParserRuleContext {
		public TerminalNode MASTER_LOG_FILE_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_LOG_FILE_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
		public TextStringNoLinebreakContext textStringNoLinebreak() {
			return getRuleContext(TextStringNoLinebreakContext.class,0);
		}
		public TerminalNode MASTER_LOG_POS_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_LOG_POS_SYMBOL, 0); }
		public Ulonglong_numberContext ulonglong_number() {
			return getRuleContext(Ulonglong_numberContext.class,0);
		}
		public TerminalNode RELAY_LOG_FILE_SYMBOL() { return getToken(MultiQueryMySQLParser.RELAY_LOG_FILE_SYMBOL, 0); }
		public TerminalNode RELAY_LOG_POS_SYMBOL() { return getToken(MultiQueryMySQLParser.RELAY_LOG_POS_SYMBOL, 0); }
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public MasterFileDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_masterFileDef; }
	}

	public final MasterFileDefContext masterFileDef() throws RecognitionException {
		MasterFileDefContext _localctx = new MasterFileDefContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_masterFileDef);
		try {
			setState(3921);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MASTER_LOG_FILE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3909);
				match(MASTER_LOG_FILE_SYMBOL);
				setState(3910);
				match(EQUAL_OPERATOR);
				setState(3911);
				textStringNoLinebreak();
				}
				break;
			case MASTER_LOG_POS_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3912);
				match(MASTER_LOG_POS_SYMBOL);
				setState(3913);
				match(EQUAL_OPERATOR);
				setState(3914);
				ulonglong_number();
				}
				break;
			case RELAY_LOG_FILE_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(3915);
				match(RELAY_LOG_FILE_SYMBOL);
				setState(3916);
				match(EQUAL_OPERATOR);
				setState(3917);
				textStringNoLinebreak();
				}
				break;
			case RELAY_LOG_POS_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(3918);
				match(RELAY_LOG_POS_SYMBOL);
				setState(3919);
				match(EQUAL_OPERATOR);
				setState(3920);
				ulong_number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ServerIdListContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<Ulong_numberContext> ulong_number() {
			return getRuleContexts(Ulong_numberContext.class);
		}
		public Ulong_numberContext ulong_number(int i) {
			return getRuleContext(Ulong_numberContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public ServerIdListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serverIdList; }
	}

	public final ServerIdListContext serverIdList() throws RecognitionException {
		ServerIdListContext _localctx = new ServerIdListContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_serverIdList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3923);
			match(OPEN_PAR_SYMBOL);
			setState(3932);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (INT_NUMBER - 380)) | (1L << (LONG_NUMBER - 380)) | (1L << (ULONGLONG_NUMBER - 380)) | (1L << (HEX_NUMBER - 380)) | (1L << (DECIMAL_NUMBER - 380)) | (1L << (FLOAT_NUMBER - 380)))) != 0)) {
				{
				setState(3924);
				ulong_number();
				setState(3929);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(3925);
					match(COMMA_SYMBOL);
					setState(3926);
					ulong_number();
					}
					}
					setState(3931);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(3934);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChangeReplicationContext extends ParserRuleContext {
		public TerminalNode CHANGE_SYMBOL() { return getToken(MultiQueryMySQLParser.CHANGE_SYMBOL, 0); }
		public TerminalNode REPLICATION_SYMBOL() { return getToken(MultiQueryMySQLParser.REPLICATION_SYMBOL, 0); }
		public TerminalNode FILTER_SYMBOL() { return getToken(MultiQueryMySQLParser.FILTER_SYMBOL, 0); }
		public List<FilterDefinitionContext> filterDefinition() {
			return getRuleContexts(FilterDefinitionContext.class);
		}
		public FilterDefinitionContext filterDefinition(int i) {
			return getRuleContext(FilterDefinitionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public ChannelContext channel() {
			return getRuleContext(ChannelContext.class,0);
		}
		public ChangeReplicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeReplication; }
	}

	public final ChangeReplicationContext changeReplication() throws RecognitionException {
		ChangeReplicationContext _localctx = new ChangeReplicationContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_changeReplication);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3936);
			match(CHANGE_SYMBOL);
			setState(3937);
			match(REPLICATION_SYMBOL);
			setState(3938);
			match(FILTER_SYMBOL);
			setState(3939);
			filterDefinition();
			setState(3944);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,448,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3940);
					match(COMMA_SYMBOL);
					setState(3941);
					filterDefinition();
					}
					} 
				}
				setState(3946);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,448,_ctx);
			}
			setState(3949);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,449,_ctx) ) {
			case 1:
				{
				setState(3947);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(3948);
				channel();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FilterDefinitionContext extends ParserRuleContext {
		public TerminalNode REPLICATE_DO_DB_SYMBOL() { return getToken(MultiQueryMySQLParser.REPLICATE_DO_DB_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public FilterDbListContext filterDbList() {
			return getRuleContext(FilterDbListContext.class,0);
		}
		public TerminalNode REPLICATE_IGNORE_DB_SYMBOL() { return getToken(MultiQueryMySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0); }
		public TerminalNode REPLICATE_DO_TABLE_SYMBOL() { return getToken(MultiQueryMySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0); }
		public FilterTableListContext filterTableList() {
			return getRuleContext(FilterTableListContext.class,0);
		}
		public TerminalNode REPLICATE_IGNORE_TABLE_SYMBOL() { return getToken(MultiQueryMySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_WILD_DO_TABLE_SYMBOL() { return getToken(MultiQueryMySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0); }
		public FilterStringListContext filterStringList() {
			return getRuleContext(FilterStringListContext.class,0);
		}
		public TerminalNode REPLICATE_WILD_IGNORE_TABLE_SYMBOL() { return getToken(MultiQueryMySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_REWRITE_DB_SYMBOL() { return getToken(MultiQueryMySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0); }
		public FilterDbPairListContext filterDbPairList() {
			return getRuleContext(FilterDbPairListContext.class,0);
		}
		public FilterDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filterDefinition; }
	}

	public final FilterDefinitionContext filterDefinition() throws RecognitionException {
		FilterDefinitionContext _localctx = new FilterDefinitionContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_filterDefinition);
		int _la;
		try {
			setState(4000);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REPLICATE_DO_DB_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3951);
				match(REPLICATE_DO_DB_SYMBOL);
				setState(3952);
				match(EQUAL_OPERATOR);
				setState(3953);
				match(OPEN_PAR_SYMBOL);
				setState(3955);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,450,_ctx) ) {
				case 1:
					{
					setState(3954);
					filterDbList();
					}
					break;
				}
				setState(3957);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_IGNORE_DB_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3958);
				match(REPLICATE_IGNORE_DB_SYMBOL);
				setState(3959);
				match(EQUAL_OPERATOR);
				setState(3960);
				match(OPEN_PAR_SYMBOL);
				setState(3962);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,451,_ctx) ) {
				case 1:
					{
					setState(3961);
					filterDbList();
					}
					break;
				}
				setState(3964);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_DO_TABLE_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(3965);
				match(REPLICATE_DO_TABLE_SYMBOL);
				setState(3966);
				match(EQUAL_OPERATOR);
				setState(3967);
				match(OPEN_PAR_SYMBOL);
				setState(3969);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,452,_ctx) ) {
				case 1:
					{
					setState(3968);
					filterTableList();
					}
					break;
				}
				setState(3971);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_IGNORE_TABLE_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(3972);
				match(REPLICATE_IGNORE_TABLE_SYMBOL);
				setState(3973);
				match(EQUAL_OPERATOR);
				setState(3974);
				match(OPEN_PAR_SYMBOL);
				setState(3976);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,453,_ctx) ) {
				case 1:
					{
					setState(3975);
					filterTableList();
					}
					break;
				}
				setState(3978);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_WILD_DO_TABLE_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(3979);
				match(REPLICATE_WILD_DO_TABLE_SYMBOL);
				setState(3980);
				match(EQUAL_OPERATOR);
				setState(3981);
				match(OPEN_PAR_SYMBOL);
				setState(3983);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,454,_ctx) ) {
				case 1:
					{
					setState(3982);
					filterStringList();
					}
					break;
				}
				setState(3985);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_WILD_IGNORE_TABLE_SYMBOL:
				enterOuterAlt(_localctx, 6);
				{
				setState(3986);
				match(REPLICATE_WILD_IGNORE_TABLE_SYMBOL);
				setState(3987);
				match(EQUAL_OPERATOR);
				setState(3988);
				match(OPEN_PAR_SYMBOL);
				setState(3990);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,455,_ctx) ) {
				case 1:
					{
					setState(3989);
					filterStringList();
					}
					break;
				}
				setState(3992);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_REWRITE_DB_SYMBOL:
				enterOuterAlt(_localctx, 7);
				{
				setState(3993);
				match(REPLICATE_REWRITE_DB_SYMBOL);
				setState(3994);
				match(EQUAL_OPERATOR);
				setState(3995);
				match(OPEN_PAR_SYMBOL);
				setState(3997);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAR_SYMBOL) {
					{
					setState(3996);
					filterDbPairList();
					}
				}

				setState(3999);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FilterDbListContext extends ParserRuleContext {
		public List<SchemaRefContext> schemaRef() {
			return getRuleContexts(SchemaRefContext.class);
		}
		public SchemaRefContext schemaRef(int i) {
			return getRuleContext(SchemaRefContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public FilterDbListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filterDbList; }
	}

	public final FilterDbListContext filterDbList() throws RecognitionException {
		FilterDbListContext _localctx = new FilterDbListContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_filterDbList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4002);
			schemaRef();
			setState(4007);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(4003);
				match(COMMA_SYMBOL);
				setState(4004);
				schemaRef();
				}
				}
				setState(4009);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FilterTableListContext extends ParserRuleContext {
		public List<FilterTableRefContext> filterTableRef() {
			return getRuleContexts(FilterTableRefContext.class);
		}
		public FilterTableRefContext filterTableRef(int i) {
			return getRuleContext(FilterTableRefContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public FilterTableListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filterTableList; }
	}

	public final FilterTableListContext filterTableList() throws RecognitionException {
		FilterTableListContext _localctx = new FilterTableListContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_filterTableList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4010);
			filterTableRef();
			setState(4015);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(4011);
				match(COMMA_SYMBOL);
				setState(4012);
				filterTableRef();
				}
				}
				setState(4017);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FilterStringListContext extends ParserRuleContext {
		public List<FilterWildDbTableStringContext> filterWildDbTableString() {
			return getRuleContexts(FilterWildDbTableStringContext.class);
		}
		public FilterWildDbTableStringContext filterWildDbTableString(int i) {
			return getRuleContext(FilterWildDbTableStringContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public FilterStringListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filterStringList; }
	}

	public final FilterStringListContext filterStringList() throws RecognitionException {
		FilterStringListContext _localctx = new FilterStringListContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_filterStringList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4018);
			filterWildDbTableString();
			setState(4023);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(4019);
				match(COMMA_SYMBOL);
				setState(4020);
				filterWildDbTableString();
				}
				}
				setState(4025);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FilterWildDbTableStringContext extends ParserRuleContext {
		public TextStringNoLinebreakContext textStringNoLinebreak() {
			return getRuleContext(TextStringNoLinebreakContext.class,0);
		}
		public FilterWildDbTableStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filterWildDbTableString; }
	}

	public final FilterWildDbTableStringContext filterWildDbTableString() throws RecognitionException {
		FilterWildDbTableStringContext _localctx = new FilterWildDbTableStringContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_filterWildDbTableString);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4026);
			textStringNoLinebreak();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FilterDbPairListContext extends ParserRuleContext {
		public List<SchemaIdentifierPairContext> schemaIdentifierPair() {
			return getRuleContexts(SchemaIdentifierPairContext.class);
		}
		public SchemaIdentifierPairContext schemaIdentifierPair(int i) {
			return getRuleContext(SchemaIdentifierPairContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public FilterDbPairListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filterDbPairList; }
	}

	public final FilterDbPairListContext filterDbPairList() throws RecognitionException {
		FilterDbPairListContext _localctx = new FilterDbPairListContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_filterDbPairList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4028);
			schemaIdentifierPair();
			setState(4033);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(4029);
				match(COMMA_SYMBOL);
				setState(4030);
				schemaIdentifierPair();
				}
				}
				setState(4035);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SlaveContext extends ParserRuleContext {
		public TerminalNode START_SYMBOL() { return getToken(MultiQueryMySQLParser.START_SYMBOL, 0); }
		public TerminalNode SLAVE_SYMBOL() { return getToken(MultiQueryMySQLParser.SLAVE_SYMBOL, 0); }
		public SlaveConnectionOptionsContext slaveConnectionOptions() {
			return getRuleContext(SlaveConnectionOptionsContext.class,0);
		}
		public SlaveThreadOptionsContext slaveThreadOptions() {
			return getRuleContext(SlaveThreadOptionsContext.class,0);
		}
		public TerminalNode UNTIL_SYMBOL() { return getToken(MultiQueryMySQLParser.UNTIL_SYMBOL, 0); }
		public SlaveUntilOptionsContext slaveUntilOptions() {
			return getRuleContext(SlaveUntilOptionsContext.class,0);
		}
		public ChannelContext channel() {
			return getRuleContext(ChannelContext.class,0);
		}
		public TerminalNode STOP_SYMBOL() { return getToken(MultiQueryMySQLParser.STOP_SYMBOL, 0); }
		public SlaveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_slave; }
	}

	public final SlaveContext slave() throws RecognitionException {
		SlaveContext _localctx = new SlaveContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_slave);
		try {
			setState(4057);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case START_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4036);
				match(START_SYMBOL);
				setState(4037);
				match(SLAVE_SYMBOL);
				setState(4039);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,462,_ctx) ) {
				case 1:
					{
					setState(4038);
					slaveThreadOptions();
					}
					break;
				}
				setState(4043);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,463,_ctx) ) {
				case 1:
					{
					setState(4041);
					match(UNTIL_SYMBOL);
					setState(4042);
					slaveUntilOptions();
					}
					break;
				}
				setState(4045);
				slaveConnectionOptions();
				setState(4047);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,464,_ctx) ) {
				case 1:
					{
					setState(4046);
					channel();
					}
					break;
				}
				}
				break;
			case STOP_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4049);
				match(STOP_SYMBOL);
				setState(4050);
				match(SLAVE_SYMBOL);
				setState(4052);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,465,_ctx) ) {
				case 1:
					{
					setState(4051);
					slaveThreadOptions();
					}
					break;
				}
				setState(4055);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,466,_ctx) ) {
				case 1:
					{
					setState(4054);
					channel();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SlaveUntilOptionsContext extends ParserRuleContext {
		public List<MasterFileDefContext> masterFileDef() {
			return getRuleContexts(MasterFileDefContext.class);
		}
		public MasterFileDefContext masterFileDef(int i) {
			return getRuleContext(MasterFileDefContext.class,i);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public TerminalNode SQL_AFTER_MTS_GAPS_SYMBOL() { return getToken(MultiQueryMySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0); }
		public TerminalNode SQL_BEFORE_GTIDS_SYMBOL() { return getToken(MultiQueryMySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0); }
		public TerminalNode SQL_AFTER_GTIDS_SYMBOL() { return getToken(MultiQueryMySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public SlaveUntilOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_slaveUntilOptions; }
	}

	public final SlaveUntilOptionsContext slaveUntilOptions() throws RecognitionException {
		SlaveUntilOptionsContext _localctx = new SlaveUntilOptionsContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_slaveUntilOptions);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4066);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,468,_ctx) ) {
			case 1:
				{
				setState(4059);
				masterFileDef();
				}
				break;
			case 2:
				{
				setState(4060);
				if (!(serverVersion >= 50606)) throw new FailedPredicateException(this, "serverVersion >= 50606");
				setState(4061);
				_la = _input.LA(1);
				if ( !(_la==SQL_AFTER_GTIDS_SYMBOL || _la==SQL_BEFORE_GTIDS_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4062);
				match(EQUAL_OPERATOR);
				setState(4063);
				textString();
				}
				break;
			case 3:
				{
				setState(4064);
				if (!(serverVersion >= 50606)) throw new FailedPredicateException(this, "serverVersion >= 50606");
				setState(4065);
				match(SQL_AFTER_MTS_GAPS_SYMBOL);
				}
				break;
			}
			setState(4072);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,469,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4068);
					match(COMMA_SYMBOL);
					setState(4069);
					masterFileDef();
					}
					} 
				}
				setState(4074);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,469,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SlaveConnectionOptionsContext extends ParserRuleContext {
		public TerminalNode USER_SYMBOL() { return getToken(MultiQueryMySQLParser.USER_SYMBOL, 0); }
		public List<TerminalNode> EQUAL_OPERATOR() { return getTokens(MultiQueryMySQLParser.EQUAL_OPERATOR); }
		public TerminalNode EQUAL_OPERATOR(int i) {
			return getToken(MultiQueryMySQLParser.EQUAL_OPERATOR, i);
		}
		public List<TextStringContext> textString() {
			return getRuleContexts(TextStringContext.class);
		}
		public TextStringContext textString(int i) {
			return getRuleContext(TextStringContext.class,i);
		}
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MultiQueryMySQLParser.PASSWORD_SYMBOL, 0); }
		public TerminalNode DEFAULT_AUTH_SYMBOL() { return getToken(MultiQueryMySQLParser.DEFAULT_AUTH_SYMBOL, 0); }
		public TerminalNode PLUGIN_DIR_SYMBOL() { return getToken(MultiQueryMySQLParser.PLUGIN_DIR_SYMBOL, 0); }
		public SlaveConnectionOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_slaveConnectionOptions; }
	}

	public final SlaveConnectionOptionsContext slaveConnectionOptions() throws RecognitionException {
		SlaveConnectionOptionsContext _localctx = new SlaveConnectionOptionsContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_slaveConnectionOptions);
		try {
			setState(4097);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,474,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4075);
				if (!(serverVersion >= 50604)) throw new FailedPredicateException(this, "serverVersion >= 50604");
				setState(4079);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,470,_ctx) ) {
				case 1:
					{
					setState(4076);
					match(USER_SYMBOL);
					setState(4077);
					match(EQUAL_OPERATOR);
					setState(4078);
					textString();
					}
					break;
				}
				setState(4084);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,471,_ctx) ) {
				case 1:
					{
					setState(4081);
					match(PASSWORD_SYMBOL);
					setState(4082);
					match(EQUAL_OPERATOR);
					setState(4083);
					textString();
					}
					break;
				}
				setState(4089);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,472,_ctx) ) {
				case 1:
					{
					setState(4086);
					match(DEFAULT_AUTH_SYMBOL);
					setState(4087);
					match(EQUAL_OPERATOR);
					setState(4088);
					textString();
					}
					break;
				}
				setState(4094);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,473,_ctx) ) {
				case 1:
					{
					setState(4091);
					match(PLUGIN_DIR_SYMBOL);
					setState(4092);
					match(EQUAL_OPERATOR);
					setState(4093);
					textString();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SlaveThreadOptionsContext extends ParserRuleContext {
		public List<SlaveThreadOptionContext> slaveThreadOption() {
			return getRuleContexts(SlaveThreadOptionContext.class);
		}
		public SlaveThreadOptionContext slaveThreadOption(int i) {
			return getRuleContext(SlaveThreadOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public SlaveThreadOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_slaveThreadOptions; }
	}

	public final SlaveThreadOptionsContext slaveThreadOptions() throws RecognitionException {
		SlaveThreadOptionsContext _localctx = new SlaveThreadOptionsContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_slaveThreadOptions);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4099);
			slaveThreadOption();
			setState(4104);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,475,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4100);
					match(COMMA_SYMBOL);
					setState(4101);
					slaveThreadOption();
					}
					} 
				}
				setState(4106);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,475,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SlaveThreadOptionContext extends ParserRuleContext {
		public TerminalNode RELAY_THREAD_SYMBOL() { return getToken(MultiQueryMySQLParser.RELAY_THREAD_SYMBOL, 0); }
		public TerminalNode SQL_THREAD_SYMBOL() { return getToken(MultiQueryMySQLParser.SQL_THREAD_SYMBOL, 0); }
		public SlaveThreadOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_slaveThreadOption; }
	}

	public final SlaveThreadOptionContext slaveThreadOption() throws RecognitionException {
		SlaveThreadOptionContext _localctx = new SlaveThreadOptionContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_slaveThreadOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4107);
			_la = _input.LA(1);
			if ( !(_la==RELAY_THREAD_SYMBOL || _la==SQL_THREAD_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupReplicationContext extends ParserRuleContext {
		public TerminalNode GROUP_REPLICATION_SYMBOL() { return getToken(MultiQueryMySQLParser.GROUP_REPLICATION_SYMBOL, 0); }
		public TerminalNode START_SYMBOL() { return getToken(MultiQueryMySQLParser.START_SYMBOL, 0); }
		public TerminalNode STOP_SYMBOL() { return getToken(MultiQueryMySQLParser.STOP_SYMBOL, 0); }
		public GroupReplicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupReplication; }
	}

	public final GroupReplicationContext groupReplication() throws RecognitionException {
		GroupReplicationContext _localctx = new GroupReplicationContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_groupReplication);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4109);
			_la = _input.LA(1);
			if ( !(_la==START_SYMBOL || _la==STOP_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4110);
			match(GROUP_REPLICATION_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PreparedStatementContext extends ParserRuleContext {
		public Token type;
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode FROM_SYMBOL() { return getToken(MultiQueryMySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode PREPARE_SYMBOL() { return getToken(MultiQueryMySQLParser.PREPARE_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public UserVariableContext userVariable() {
			return getRuleContext(UserVariableContext.class,0);
		}
		public ExecuteStatementContext executeStatement() {
			return getRuleContext(ExecuteStatementContext.class,0);
		}
		public TerminalNode DEALLOCATE_SYMBOL() { return getToken(MultiQueryMySQLParser.DEALLOCATE_SYMBOL, 0); }
		public TerminalNode DROP_SYMBOL() { return getToken(MultiQueryMySQLParser.DROP_SYMBOL, 0); }
		public PreparedStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preparedStatement; }
	}

	public final PreparedStatementContext preparedStatement() throws RecognitionException {
		PreparedStatementContext _localctx = new PreparedStatementContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_preparedStatement);
		int _la;
		try {
			setState(4123);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PREPARE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4112);
				((PreparedStatementContext)_localctx).type = match(PREPARE_SYMBOL);
				setState(4113);
				identifier();
				setState(4114);
				match(FROM_SYMBOL);
				setState(4117);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,476,_ctx) ) {
				case 1:
					{
					setState(4115);
					textLiteral();
					}
					break;
				case 2:
					{
					setState(4116);
					userVariable();
					}
					break;
				}
				}
				break;
			case EXECUTE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4119);
				executeStatement();
				}
				break;
			case DEALLOCATE_SYMBOL:
			case DROP_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(4120);
				((PreparedStatementContext)_localctx).type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEALLOCATE_SYMBOL || _la==DROP_SYMBOL) ) {
					((PreparedStatementContext)_localctx).type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4121);
				match(PREPARE_SYMBOL);
				setState(4122);
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExecuteStatementContext extends ParserRuleContext {
		public TerminalNode EXECUTE_SYMBOL() { return getToken(MultiQueryMySQLParser.EXECUTE_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode USING_SYMBOL() { return getToken(MultiQueryMySQLParser.USING_SYMBOL, 0); }
		public ExecuteVarListContext executeVarList() {
			return getRuleContext(ExecuteVarListContext.class,0);
		}
		public ExecuteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executeStatement; }
	}

	public final ExecuteStatementContext executeStatement() throws RecognitionException {
		ExecuteStatementContext _localctx = new ExecuteStatementContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_executeStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4125);
			match(EXECUTE_SYMBOL);
			setState(4126);
			identifier();
			setState(4129);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,478,_ctx) ) {
			case 1:
				{
				setState(4127);
				match(USING_SYMBOL);
				setState(4128);
				executeVarList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExecuteVarListContext extends ParserRuleContext {
		public List<UserVariableContext> userVariable() {
			return getRuleContexts(UserVariableContext.class);
		}
		public UserVariableContext userVariable(int i) {
			return getRuleContext(UserVariableContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public ExecuteVarListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executeVarList; }
	}

	public final ExecuteVarListContext executeVarList() throws RecognitionException {
		ExecuteVarListContext _localctx = new ExecuteVarListContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_executeVarList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4131);
			userVariable();
			setState(4136);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,479,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4132);
					match(COMMA_SYMBOL);
					setState(4133);
					userVariable();
					}
					} 
				}
				setState(4138);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,479,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CloneStatementContext extends ParserRuleContext {
		public TerminalNode CLONE_SYMBOL() { return getToken(MultiQueryMySQLParser.CLONE_SYMBOL, 0); }
		public TerminalNode LOCAL_SYMBOL() { return getToken(MultiQueryMySQLParser.LOCAL_SYMBOL, 0); }
		public TerminalNode DATA_SYMBOL() { return getToken(MultiQueryMySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode DIRECTORY_SYMBOL() { return getToken(MultiQueryMySQLParser.DIRECTORY_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode REMOTE_SYMBOL() { return getToken(MultiQueryMySQLParser.REMOTE_SYMBOL, 0); }
		public TerminalNode INSTANCE_SYMBOL() { return getToken(MultiQueryMySQLParser.INSTANCE_SYMBOL, 0); }
		public TerminalNode FROM_SYMBOL() { return getToken(MultiQueryMySQLParser.FROM_SYMBOL, 0); }
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public TerminalNode COLON_SYMBOL() { return getToken(MultiQueryMySQLParser.COLON_SYMBOL, 0); }
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public TerminalNode IDENTIFIED_SYMBOL() { return getToken(MultiQueryMySQLParser.IDENTIFIED_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MultiQueryMySQLParser.BY_SYMBOL, 0); }
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public TerminalNode FOR_SYMBOL() { return getToken(MultiQueryMySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode REPLICATION_SYMBOL() { return getToken(MultiQueryMySQLParser.REPLICATION_SYMBOL, 0); }
		public DataDirSSLContext dataDirSSL() {
			return getRuleContext(DataDirSSLContext.class,0);
		}
		public CloneStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cloneStatement; }
	}

	public final CloneStatementContext cloneStatement() throws RecognitionException {
		CloneStatementContext _localctx = new CloneStatementContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_cloneStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4139);
			match(CLONE_SYMBOL);
			setState(4164);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,483,_ctx) ) {
			case 1:
				{
				setState(4140);
				match(LOCAL_SYMBOL);
				setState(4141);
				match(DATA_SYMBOL);
				setState(4142);
				match(DIRECTORY_SYMBOL);
				setState(4144);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,480,_ctx) ) {
				case 1:
					{
					setState(4143);
					equal();
					}
					break;
				}
				setState(4146);
				textStringLiteral();
				}
				break;
			case 2:
				{
				setState(4147);
				match(REMOTE_SYMBOL);
				setState(4150);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,481,_ctx) ) {
				case 1:
					{
					setState(4148);
					match(FOR_SYMBOL);
					setState(4149);
					match(REPLICATION_SYMBOL);
					}
					break;
				}
				}
				break;
			case 3:
				{
				setState(4152);
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				setState(4153);
				match(INSTANCE_SYMBOL);
				setState(4154);
				match(FROM_SYMBOL);
				setState(4155);
				user();
				setState(4156);
				match(COLON_SYMBOL);
				setState(4157);
				ulong_number();
				setState(4158);
				match(IDENTIFIED_SYMBOL);
				setState(4159);
				match(BY_SYMBOL);
				setState(4160);
				textStringLiteral();
				setState(4162);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,482,_ctx) ) {
				case 1:
					{
					setState(4161);
					dataDirSSL();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataDirSSLContext extends ParserRuleContext {
		public SslContext ssl() {
			return getRuleContext(SslContext.class,0);
		}
		public TerminalNode DATA_SYMBOL() { return getToken(MultiQueryMySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode DIRECTORY_SYMBOL() { return getToken(MultiQueryMySQLParser.DIRECTORY_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public DataDirSSLContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataDirSSL; }
	}

	public final DataDirSSLContext dataDirSSL() throws RecognitionException {
		DataDirSSLContext _localctx = new DataDirSSLContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_dataDirSSL);
		try {
			setState(4176);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REQUIRE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4166);
				ssl();
				}
				break;
			case DATA_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4167);
				match(DATA_SYMBOL);
				setState(4168);
				match(DIRECTORY_SYMBOL);
				setState(4170);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,484,_ctx) ) {
				case 1:
					{
					setState(4169);
					equal();
					}
					break;
				}
				setState(4172);
				textStringLiteral();
				setState(4174);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,485,_ctx) ) {
				case 1:
					{
					setState(4173);
					ssl();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SslContext extends ParserRuleContext {
		public TerminalNode REQUIRE_SYMBOL() { return getToken(MultiQueryMySQLParser.REQUIRE_SYMBOL, 0); }
		public TerminalNode SSL_SYMBOL() { return getToken(MultiQueryMySQLParser.SSL_SYMBOL, 0); }
		public TerminalNode NO_SYMBOL() { return getToken(MultiQueryMySQLParser.NO_SYMBOL, 0); }
		public SslContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ssl; }
	}

	public final SslContext ssl() throws RecognitionException {
		SslContext _localctx = new SslContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_ssl);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4178);
			match(REQUIRE_SYMBOL);
			setState(4180);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_SYMBOL) {
				{
				setState(4179);
				match(NO_SYMBOL);
				}
			}

			setState(4182);
			match(SSL_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AccountManagementStatementContext extends ParserRuleContext {
		public AlterUserContext alterUser() {
			return getRuleContext(AlterUserContext.class,0);
		}
		public CreateUserContext createUser() {
			return getRuleContext(CreateUserContext.class,0);
		}
		public DropUserContext dropUser() {
			return getRuleContext(DropUserContext.class,0);
		}
		public GrantContext grant() {
			return getRuleContext(GrantContext.class,0);
		}
		public RenameUserContext renameUser() {
			return getRuleContext(RenameUserContext.class,0);
		}
		public RevokeContext revoke() {
			return getRuleContext(RevokeContext.class,0);
		}
		public SetRoleContext setRole() {
			return getRuleContext(SetRoleContext.class,0);
		}
		public AccountManagementStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accountManagementStatement; }
	}

	public final AccountManagementStatementContext accountManagementStatement() throws RecognitionException {
		AccountManagementStatementContext _localctx = new AccountManagementStatementContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_accountManagementStatement);
		try {
			setState(4193);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,488,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4184);
				if (!(serverVersion >= 50606)) throw new FailedPredicateException(this, "serverVersion >= 50606");
				setState(4185);
				alterUser();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4186);
				createUser();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4187);
				dropUser();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4188);
				grant();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4189);
				renameUser();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4190);
				revoke();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4191);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(4192);
				setRole();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUserContext extends ParserRuleContext {
		public TerminalNode ALTER_SYMBOL() { return getToken(MultiQueryMySQLParser.ALTER_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MultiQueryMySQLParser.USER_SYMBOL, 0); }
		public AlterUserTailContext alterUserTail() {
			return getRuleContext(AlterUserTailContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public AlterUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUser; }
	}

	public final AlterUserContext alterUser() throws RecognitionException {
		AlterUserContext _localctx = new AlterUserContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_alterUser);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4195);
			match(ALTER_SYMBOL);
			setState(4196);
			match(USER_SYMBOL);
			setState(4199);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,489,_ctx) ) {
			case 1:
				{
				setState(4197);
				if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
				setState(4198);
				ifExists();
				}
				break;
			}
			setState(4201);
			alterUserTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUserTailContext extends ParserRuleContext {
		public CreateUserTailContext createUserTail() {
			return getRuleContext(CreateUserTailContext.class,0);
		}
		public CreateUserListContext createUserList() {
			return getRuleContext(CreateUserListContext.class,0);
		}
		public AlterUserListContext alterUserList() {
			return getRuleContext(AlterUserListContext.class,0);
		}
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public TerminalNode IDENTIFIED_SYMBOL() { return getToken(MultiQueryMySQLParser.IDENTIFIED_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MultiQueryMySQLParser.BY_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public ReplacePasswordContext replacePassword() {
			return getRuleContext(ReplacePasswordContext.class,0);
		}
		public RetainCurrentPasswordContext retainCurrentPassword() {
			return getRuleContext(RetainCurrentPasswordContext.class,0);
		}
		public DiscardOldPasswordContext discardOldPassword() {
			return getRuleContext(DiscardOldPasswordContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode ROLE_SYMBOL() { return getToken(MultiQueryMySQLParser.ROLE_SYMBOL, 0); }
		public TerminalNode ALL_SYMBOL() { return getToken(MultiQueryMySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode NONE_SYMBOL() { return getToken(MultiQueryMySQLParser.NONE_SYMBOL, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public TerminalNode RANDOM_SYMBOL() { return getToken(MultiQueryMySQLParser.RANDOM_SYMBOL, 0); }
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MultiQueryMySQLParser.PASSWORD_SYMBOL, 0); }
		public TerminalNode WITH_SYMBOL() { return getToken(MultiQueryMySQLParser.WITH_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public AlterUserTailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUserTail; }
	}

	public final AlterUserTailContext alterUserTail() throws RecognitionException {
		AlterUserTailContext _localctx = new AlterUserTailContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_alterUserTail);
		int _la;
		try {
			setState(4250);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,496,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4207);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,490,_ctx) ) {
				case 1:
					{
					setState(4203);
					if (!(serverVersion < 80014)) throw new FailedPredicateException(this, "serverVersion < 80014");
					setState(4204);
					createUserList();
					}
					break;
				case 2:
					{
					setState(4205);
					if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
					setState(4206);
					alterUserList();
					}
					break;
				}
				setState(4209);
				createUserTail();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4211);
				if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
				setState(4212);
				user();
				setState(4213);
				match(IDENTIFIED_SYMBOL);
				setState(4214);
				match(BY_SYMBOL);
				setState(4215);
				textString();
				setState(4218);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,491,_ctx) ) {
				case 1:
					{
					setState(4216);
					if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
					setState(4217);
					replacePassword();
					}
					break;
				}
				setState(4222);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,492,_ctx) ) {
				case 1:
					{
					setState(4220);
					if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
					setState(4221);
					retainCurrentPassword();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4224);
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				setState(4225);
				user();
				setState(4226);
				discardOldPassword();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4228);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(4229);
				user();
				setState(4230);
				match(DEFAULT_SYMBOL);
				setState(4231);
				match(ROLE_SYMBOL);
				setState(4235);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,493,_ctx) ) {
				case 1:
					{
					setState(4232);
					match(ALL_SYMBOL);
					}
					break;
				case 2:
					{
					setState(4233);
					match(NONE_SYMBOL);
					}
					break;
				case 3:
					{
					setState(4234);
					roleList();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4237);
				if (!(serverVersion >= 80018)) throw new FailedPredicateException(this, "serverVersion >= 80018");
				setState(4238);
				user();
				setState(4239);
				match(IDENTIFIED_SYMBOL);
				setState(4242);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH_SYMBOL) {
					{
					setState(4240);
					match(WITH_SYMBOL);
					setState(4241);
					textOrIdentifier();
					}
				}

				setState(4244);
				match(BY_SYMBOL);
				setState(4245);
				match(RANDOM_SYMBOL);
				setState(4246);
				match(PASSWORD_SYMBOL);
				setState(4248);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,495,_ctx) ) {
				case 1:
					{
					setState(4247);
					retainCurrentPassword();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserFunctionContext extends ParserRuleContext {
		public TerminalNode USER_SYMBOL() { return getToken(MultiQueryMySQLParser.USER_SYMBOL, 0); }
		public ParenthesesContext parentheses() {
			return getRuleContext(ParenthesesContext.class,0);
		}
		public UserFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userFunction; }
	}

	public final UserFunctionContext userFunction() throws RecognitionException {
		UserFunctionContext _localctx = new UserFunctionContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_userFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4252);
			match(USER_SYMBOL);
			setState(4253);
			parentheses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUserContext extends ParserRuleContext {
		public TerminalNode CREATE_SYMBOL() { return getToken(MultiQueryMySQLParser.CREATE_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MultiQueryMySQLParser.USER_SYMBOL, 0); }
		public CreateUserListContext createUserList() {
			return getRuleContext(CreateUserListContext.class,0);
		}
		public DefaultRoleClauseContext defaultRoleClause() {
			return getRuleContext(DefaultRoleClauseContext.class,0);
		}
		public CreateUserTailContext createUserTail() {
			return getRuleContext(CreateUserTailContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CreateUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUser; }
	}

	public final CreateUserContext createUser() throws RecognitionException {
		CreateUserContext _localctx = new CreateUserContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_createUser);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4255);
			match(CREATE_SYMBOL);
			setState(4256);
			match(USER_SYMBOL);
			setState(4260);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,497,_ctx) ) {
			case 1:
				{
				setState(4257);
				if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
				setState(4258);
				ifNotExists();
				}
				break;
			case 2:
				{
				}
				break;
			}
			setState(4262);
			createUserList();
			setState(4263);
			defaultRoleClause();
			setState(4264);
			createUserTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUserTailContext extends ParserRuleContext {
		public RequireClauseContext requireClause() {
			return getRuleContext(RequireClauseContext.class,0);
		}
		public ConnectOptionsContext connectOptions() {
			return getRuleContext(ConnectOptionsContext.class,0);
		}
		public List<AccountLockPasswordExpireOptionsContext> accountLockPasswordExpireOptions() {
			return getRuleContexts(AccountLockPasswordExpireOptionsContext.class);
		}
		public AccountLockPasswordExpireOptionsContext accountLockPasswordExpireOptions(int i) {
			return getRuleContext(AccountLockPasswordExpireOptionsContext.class,i);
		}
		public CreateUserTailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUserTail; }
	}

	public final CreateUserTailContext createUserTail() throws RecognitionException {
		CreateUserTailContext _localctx = new CreateUserTailContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_createUserTail);
		try {
			int _alt;
			setState(4280);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,501,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4266);
				if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
				setState(4268);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,498,_ctx) ) {
				case 1:
					{
					setState(4267);
					requireClause();
					}
					break;
				}
				setState(4271);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,499,_ctx) ) {
				case 1:
					{
					setState(4270);
					connectOptions();
					}
					break;
				}
				setState(4276);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,500,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4273);
						accountLockPasswordExpireOptions();
						}
						} 
					}
					setState(4278);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,500,_ctx);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultRoleClauseContext extends ParserRuleContext {
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode ROLE_SYMBOL() { return getToken(MultiQueryMySQLParser.ROLE_SYMBOL, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public DefaultRoleClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultRoleClause; }
	}

	public final DefaultRoleClauseContext defaultRoleClause() throws RecognitionException {
		DefaultRoleClauseContext _localctx = new DefaultRoleClauseContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_defaultRoleClause);
		try {
			setState(4289);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,503,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4282);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(4286);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,502,_ctx) ) {
				case 1:
					{
					setState(4283);
					match(DEFAULT_SYMBOL);
					setState(4284);
					match(ROLE_SYMBOL);
					setState(4285);
					roleList();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RequireClauseContext extends ParserRuleContext {
		public Token option;
		public TerminalNode REQUIRE_SYMBOL() { return getToken(MultiQueryMySQLParser.REQUIRE_SYMBOL, 0); }
		public RequireListContext requireList() {
			return getRuleContext(RequireListContext.class,0);
		}
		public TerminalNode SSL_SYMBOL() { return getToken(MultiQueryMySQLParser.SSL_SYMBOL, 0); }
		public TerminalNode X509_SYMBOL() { return getToken(MultiQueryMySQLParser.X509_SYMBOL, 0); }
		public TerminalNode NONE_SYMBOL() { return getToken(MultiQueryMySQLParser.NONE_SYMBOL, 0); }
		public RequireClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_requireClause; }
	}

	public final RequireClauseContext requireClause() throws RecognitionException {
		RequireClauseContext _localctx = new RequireClauseContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_requireClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4291);
			match(REQUIRE_SYMBOL);
			setState(4294);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CIPHER_SYMBOL:
			case ISSUER_SYMBOL:
			case SUBJECT_SYMBOL:
				{
				setState(4292);
				requireList();
				}
				break;
			case NONE_SYMBOL:
			case X509_SYMBOL:
			case SSL_SYMBOL:
				{
				setState(4293);
				((RequireClauseContext)_localctx).option = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NONE_SYMBOL || _la==X509_SYMBOL || _la==SSL_SYMBOL) ) {
					((RequireClauseContext)_localctx).option = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConnectOptionsContext extends ParserRuleContext {
		public TerminalNode WITH_SYMBOL() { return getToken(MultiQueryMySQLParser.WITH_SYMBOL, 0); }
		public List<TerminalNode> MAX_QUERIES_PER_HOUR_SYMBOL() { return getTokens(MultiQueryMySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL); }
		public TerminalNode MAX_QUERIES_PER_HOUR_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, i);
		}
		public List<Ulong_numberContext> ulong_number() {
			return getRuleContexts(Ulong_numberContext.class);
		}
		public Ulong_numberContext ulong_number(int i) {
			return getRuleContext(Ulong_numberContext.class,i);
		}
		public List<TerminalNode> MAX_UPDATES_PER_HOUR_SYMBOL() { return getTokens(MultiQueryMySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL); }
		public TerminalNode MAX_UPDATES_PER_HOUR_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, i);
		}
		public List<TerminalNode> MAX_CONNECTIONS_PER_HOUR_SYMBOL() { return getTokens(MultiQueryMySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, i);
		}
		public List<TerminalNode> MAX_USER_CONNECTIONS_SYMBOL() { return getTokens(MultiQueryMySQLParser.MAX_USER_CONNECTIONS_SYMBOL); }
		public TerminalNode MAX_USER_CONNECTIONS_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.MAX_USER_CONNECTIONS_SYMBOL, i);
		}
		public ConnectOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_connectOptions; }
	}

	public final ConnectOptionsContext connectOptions() throws RecognitionException {
		ConnectOptionsContext _localctx = new ConnectOptionsContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_connectOptions);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4296);
			match(WITH_SYMBOL);
			setState(4305); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(4305);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case MAX_QUERIES_PER_HOUR_SYMBOL:
						{
						setState(4297);
						match(MAX_QUERIES_PER_HOUR_SYMBOL);
						setState(4298);
						ulong_number();
						}
						break;
					case MAX_UPDATES_PER_HOUR_SYMBOL:
						{
						setState(4299);
						match(MAX_UPDATES_PER_HOUR_SYMBOL);
						setState(4300);
						ulong_number();
						}
						break;
					case MAX_CONNECTIONS_PER_HOUR_SYMBOL:
						{
						setState(4301);
						match(MAX_CONNECTIONS_PER_HOUR_SYMBOL);
						setState(4302);
						ulong_number();
						}
						break;
					case MAX_USER_CONNECTIONS_SYMBOL:
						{
						setState(4303);
						match(MAX_USER_CONNECTIONS_SYMBOL);
						setState(4304);
						ulong_number();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4307); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,506,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AccountLockPasswordExpireOptionsContext extends ParserRuleContext {
		public TerminalNode ACCOUNT_SYMBOL() { return getToken(MultiQueryMySQLParser.ACCOUNT_SYMBOL, 0); }
		public TerminalNode LOCK_SYMBOL() { return getToken(MultiQueryMySQLParser.LOCK_SYMBOL, 0); }
		public TerminalNode UNLOCK_SYMBOL() { return getToken(MultiQueryMySQLParser.UNLOCK_SYMBOL, 0); }
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MultiQueryMySQLParser.PASSWORD_SYMBOL, 0); }
		public TerminalNode EXPIRE_SYMBOL() { return getToken(MultiQueryMySQLParser.EXPIRE_SYMBOL, 0); }
		public TerminalNode HISTORY_SYMBOL() { return getToken(MultiQueryMySQLParser.HISTORY_SYMBOL, 0); }
		public TerminalNode REUSE_SYMBOL() { return getToken(MultiQueryMySQLParser.REUSE_SYMBOL, 0); }
		public TerminalNode INTERVAL_SYMBOL() { return getToken(MultiQueryMySQLParser.INTERVAL_SYMBOL, 0); }
		public TerminalNode REQUIRE_SYMBOL() { return getToken(MultiQueryMySQLParser.REQUIRE_SYMBOL, 0); }
		public TerminalNode CURRENT_SYMBOL() { return getToken(MultiQueryMySQLParser.CURRENT_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode DAY_SYMBOL() { return getToken(MultiQueryMySQLParser.DAY_SYMBOL, 0); }
		public TerminalNode NEVER_SYMBOL() { return getToken(MultiQueryMySQLParser.NEVER_SYMBOL, 0); }
		public TerminalNode OPTIONAL_SYMBOL() { return getToken(MultiQueryMySQLParser.OPTIONAL_SYMBOL, 0); }
		public AccountLockPasswordExpireOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accountLockPasswordExpireOptions; }
	}

	public final AccountLockPasswordExpireOptionsContext accountLockPasswordExpireOptions() throws RecognitionException {
		AccountLockPasswordExpireOptionsContext _localctx = new AccountLockPasswordExpireOptionsContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_accountLockPasswordExpireOptions);
		int _la;
		try {
			setState(4342);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ACCOUNT_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4309);
				match(ACCOUNT_SYMBOL);
				setState(4310);
				_la = _input.LA(1);
				if ( !(_la==LOCK_SYMBOL || _la==UNLOCK_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case PASSWORD_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4311);
				match(PASSWORD_SYMBOL);
				setState(4340);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,511,_ctx) ) {
				case 1:
					{
					setState(4312);
					match(EXPIRE_SYMBOL);
					setState(4319);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,507,_ctx) ) {
					case 1:
						{
						setState(4313);
						match(INTERVAL_SYMBOL);
						setState(4314);
						real_ulong_number();
						setState(4315);
						match(DAY_SYMBOL);
						}
						break;
					case 2:
						{
						setState(4317);
						match(NEVER_SYMBOL);
						}
						break;
					case 3:
						{
						setState(4318);
						match(DEFAULT_SYMBOL);
						}
						break;
					}
					}
					break;
				case 2:
					{
					setState(4321);
					match(HISTORY_SYMBOL);
					setState(4324);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case INT_NUMBER:
					case LONG_NUMBER:
					case ULONGLONG_NUMBER:
					case HEX_NUMBER:
						{
						setState(4322);
						real_ulong_number();
						}
						break;
					case DEFAULT_SYMBOL:
						{
						setState(4323);
						match(DEFAULT_SYMBOL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case 3:
					{
					setState(4326);
					match(REUSE_SYMBOL);
					setState(4327);
					match(INTERVAL_SYMBOL);
					setState(4332);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case INT_NUMBER:
					case LONG_NUMBER:
					case ULONGLONG_NUMBER:
					case HEX_NUMBER:
						{
						setState(4328);
						real_ulong_number();
						setState(4329);
						match(DAY_SYMBOL);
						}
						break;
					case DEFAULT_SYMBOL:
						{
						setState(4331);
						match(DEFAULT_SYMBOL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case 4:
					{
					setState(4334);
					if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
					setState(4335);
					match(REQUIRE_SYMBOL);
					setState(4336);
					match(CURRENT_SYMBOL);
					setState(4338);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,510,_ctx) ) {
					case 1:
						{
						setState(4337);
						_la = _input.LA(1);
						if ( !(_la==DEFAULT_SYMBOL || _la==OPTIONAL_SYMBOL) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					}
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropUserContext extends ParserRuleContext {
		public TerminalNode DROP_SYMBOL() { return getToken(MultiQueryMySQLParser.DROP_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MultiQueryMySQLParser.USER_SYMBOL, 0); }
		public UserListContext userList() {
			return getRuleContext(UserListContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropUser; }
	}

	public final DropUserContext dropUser() throws RecognitionException {
		DropUserContext _localctx = new DropUserContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_dropUser);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4344);
			match(DROP_SYMBOL);
			setState(4345);
			match(USER_SYMBOL);
			setState(4348);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,513,_ctx) ) {
			case 1:
				{
				setState(4346);
				if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
				setState(4347);
				ifExists();
				}
				break;
			}
			setState(4350);
			userList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantContext extends ParserRuleContext {
		public List<TerminalNode> GRANT_SYMBOL() { return getTokens(MultiQueryMySQLParser.GRANT_SYMBOL); }
		public TerminalNode GRANT_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.GRANT_SYMBOL, i);
		}
		public RoleOrPrivilegesListContext roleOrPrivilegesList() {
			return getRuleContext(RoleOrPrivilegesListContext.class,0);
		}
		public TerminalNode TO_SYMBOL() { return getToken(MultiQueryMySQLParser.TO_SYMBOL, 0); }
		public UserListContext userList() {
			return getRuleContext(UserListContext.class,0);
		}
		public TerminalNode ON_SYMBOL() { return getToken(MultiQueryMySQLParser.ON_SYMBOL, 0); }
		public GrantIdentifierContext grantIdentifier() {
			return getRuleContext(GrantIdentifierContext.class,0);
		}
		public GrantTargetListContext grantTargetList() {
			return getRuleContext(GrantTargetListContext.class,0);
		}
		public TerminalNode PROXY_SYMBOL() { return getToken(MultiQueryMySQLParser.PROXY_SYMBOL, 0); }
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public TerminalNode ALL_SYMBOL() { return getToken(MultiQueryMySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode WITH_SYMBOL() { return getToken(MultiQueryMySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode ADMIN_SYMBOL() { return getToken(MultiQueryMySQLParser.ADMIN_SYMBOL, 0); }
		public TerminalNode OPTION_SYMBOL() { return getToken(MultiQueryMySQLParser.OPTION_SYMBOL, 0); }
		public AclTypeContext aclType() {
			return getRuleContext(AclTypeContext.class,0);
		}
		public VersionedRequireClauseContext versionedRequireClause() {
			return getRuleContext(VersionedRequireClauseContext.class,0);
		}
		public GrantOptionsContext grantOptions() {
			return getRuleContext(GrantOptionsContext.class,0);
		}
		public GrantAsContext grantAs() {
			return getRuleContext(GrantAsContext.class,0);
		}
		public TerminalNode PRIVILEGES_SYMBOL() { return getToken(MultiQueryMySQLParser.PRIVILEGES_SYMBOL, 0); }
		public GrantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant; }
	}

	public final GrantContext grant() throws RecognitionException {
		GrantContext _localctx = new GrantContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_grant);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4352);
			match(GRANT_SYMBOL);
			setState(4395);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,522,_ctx) ) {
			case 1:
				{
				setState(4353);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(4354);
				roleOrPrivilegesList();
				setState(4355);
				match(TO_SYMBOL);
				setState(4356);
				userList();
				setState(4360);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,514,_ctx) ) {
				case 1:
					{
					setState(4357);
					match(WITH_SYMBOL);
					setState(4358);
					match(ADMIN_SYMBOL);
					setState(4359);
					match(OPTION_SYMBOL);
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(4367);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,516,_ctx) ) {
				case 1:
					{
					setState(4362);
					roleOrPrivilegesList();
					}
					break;
				case 2:
					{
					setState(4363);
					match(ALL_SYMBOL);
					setState(4365);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PRIVILEGES_SYMBOL) {
						{
						setState(4364);
						match(PRIVILEGES_SYMBOL);
						}
					}

					}
					break;
				}
				setState(4369);
				match(ON_SYMBOL);
				setState(4371);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,517,_ctx) ) {
				case 1:
					{
					setState(4370);
					aclType();
					}
					break;
				}
				setState(4373);
				grantIdentifier();
				setState(4374);
				match(TO_SYMBOL);
				setState(4375);
				grantTargetList();
				setState(4377);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,518,_ctx) ) {
				case 1:
					{
					setState(4376);
					versionedRequireClause();
					}
					break;
				}
				setState(4380);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,519,_ctx) ) {
				case 1:
					{
					setState(4379);
					grantOptions();
					}
					break;
				}
				setState(4383);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,520,_ctx) ) {
				case 1:
					{
					setState(4382);
					grantAs();
					}
					break;
				}
				}
				break;
			case 3:
				{
				setState(4385);
				match(PROXY_SYMBOL);
				setState(4386);
				match(ON_SYMBOL);
				setState(4387);
				user();
				setState(4388);
				match(TO_SYMBOL);
				setState(4389);
				grantTargetList();
				setState(4393);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,521,_ctx) ) {
				case 1:
					{
					setState(4390);
					match(WITH_SYMBOL);
					setState(4391);
					match(GRANT_SYMBOL);
					setState(4392);
					match(OPTION_SYMBOL);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantTargetListContext extends ParserRuleContext {
		public CreateUserListContext createUserList() {
			return getRuleContext(CreateUserListContext.class,0);
		}
		public UserListContext userList() {
			return getRuleContext(UserListContext.class,0);
		}
		public GrantTargetListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantTargetList; }
	}

	public final GrantTargetListContext grantTargetList() throws RecognitionException {
		GrantTargetListContext _localctx = new GrantTargetListContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_grantTargetList);
		try {
			setState(4401);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,523,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4397);
				if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
				setState(4398);
				createUserList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4399);
				if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
				setState(4400);
				userList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantOptionsContext extends ParserRuleContext {
		public TerminalNode WITH_SYMBOL() { return getToken(MultiQueryMySQLParser.WITH_SYMBOL, 0); }
		public List<GrantOptionContext> grantOption() {
			return getRuleContexts(GrantOptionContext.class);
		}
		public GrantOptionContext grantOption(int i) {
			return getRuleContext(GrantOptionContext.class,i);
		}
		public TerminalNode GRANT_SYMBOL() { return getToken(MultiQueryMySQLParser.GRANT_SYMBOL, 0); }
		public TerminalNode OPTION_SYMBOL() { return getToken(MultiQueryMySQLParser.OPTION_SYMBOL, 0); }
		public GrantOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantOptions; }
	}

	public final GrantOptionsContext grantOptions() throws RecognitionException {
		GrantOptionsContext _localctx = new GrantOptionsContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_grantOptions);
		try {
			int _alt;
			setState(4414);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,525,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4403);
				if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
				setState(4404);
				match(WITH_SYMBOL);
				setState(4406); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4405);
						grantOption();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4408); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,524,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4410);
				if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
				setState(4411);
				match(WITH_SYMBOL);
				setState(4412);
				match(GRANT_SYMBOL);
				setState(4413);
				match(OPTION_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExceptRoleListContext extends ParserRuleContext {
		public TerminalNode EXCEPT_SYMBOL() { return getToken(MultiQueryMySQLParser.EXCEPT_SYMBOL, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public ExceptRoleListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exceptRoleList; }
	}

	public final ExceptRoleListContext exceptRoleList() throws RecognitionException {
		ExceptRoleListContext _localctx = new ExceptRoleListContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_exceptRoleList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4416);
			match(EXCEPT_SYMBOL);
			setState(4417);
			roleList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithRolesContext extends ParserRuleContext {
		public TerminalNode WITH_SYMBOL() { return getToken(MultiQueryMySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode ROLE_SYMBOL() { return getToken(MultiQueryMySQLParser.ROLE_SYMBOL, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public TerminalNode ALL_SYMBOL() { return getToken(MultiQueryMySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode NONE_SYMBOL() { return getToken(MultiQueryMySQLParser.NONE_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
		public ExceptRoleListContext exceptRoleList() {
			return getRuleContext(ExceptRoleListContext.class,0);
		}
		public WithRolesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withRoles; }
	}

	public final WithRolesContext withRoles() throws RecognitionException {
		WithRolesContext _localctx = new WithRolesContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_withRoles);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4419);
			match(WITH_SYMBOL);
			setState(4420);
			match(ROLE_SYMBOL);
			setState(4428);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,527,_ctx) ) {
			case 1:
				{
				setState(4421);
				roleList();
				}
				break;
			case 2:
				{
				setState(4422);
				match(ALL_SYMBOL);
				setState(4424);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,526,_ctx) ) {
				case 1:
					{
					setState(4423);
					exceptRoleList();
					}
					break;
				}
				}
				break;
			case 3:
				{
				setState(4426);
				match(NONE_SYMBOL);
				}
				break;
			case 4:
				{
				setState(4427);
				match(DEFAULT_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantAsContext extends ParserRuleContext {
		public TerminalNode AS_SYMBOL() { return getToken(MultiQueryMySQLParser.AS_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MultiQueryMySQLParser.USER_SYMBOL, 0); }
		public WithRolesContext withRoles() {
			return getRuleContext(WithRolesContext.class,0);
		}
		public GrantAsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantAs; }
	}

	public final GrantAsContext grantAs() throws RecognitionException {
		GrantAsContext _localctx = new GrantAsContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_grantAs);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4430);
			match(AS_SYMBOL);
			setState(4431);
			match(USER_SYMBOL);
			setState(4433);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,528,_ctx) ) {
			case 1:
				{
				setState(4432);
				withRoles();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VersionedRequireClauseContext extends ParserRuleContext {
		public RequireClauseContext requireClause() {
			return getRuleContext(RequireClauseContext.class,0);
		}
		public VersionedRequireClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_versionedRequireClause; }
	}

	public final VersionedRequireClauseContext versionedRequireClause() throws RecognitionException {
		VersionedRequireClauseContext _localctx = new VersionedRequireClauseContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_versionedRequireClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4435);
			if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
			setState(4436);
			requireClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameUserContext extends ParserRuleContext {
		public TerminalNode RENAME_SYMBOL() { return getToken(MultiQueryMySQLParser.RENAME_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MultiQueryMySQLParser.USER_SYMBOL, 0); }
		public List<UserContext> user() {
			return getRuleContexts(UserContext.class);
		}
		public UserContext user(int i) {
			return getRuleContext(UserContext.class,i);
		}
		public List<TerminalNode> TO_SYMBOL() { return getTokens(MultiQueryMySQLParser.TO_SYMBOL); }
		public TerminalNode TO_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.TO_SYMBOL, i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public RenameUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameUser; }
	}

	public final RenameUserContext renameUser() throws RecognitionException {
		RenameUserContext _localctx = new RenameUserContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_renameUser);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4438);
			match(RENAME_SYMBOL);
			setState(4439);
			match(USER_SYMBOL);
			setState(4440);
			user();
			setState(4441);
			match(TO_SYMBOL);
			setState(4442);
			user();
			setState(4450);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,529,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4443);
					match(COMMA_SYMBOL);
					setState(4444);
					user();
					setState(4445);
					match(TO_SYMBOL);
					setState(4446);
					user();
					}
					} 
				}
				setState(4452);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,529,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokeContext extends ParserRuleContext {
		public TerminalNode REVOKE_SYMBOL() { return getToken(MultiQueryMySQLParser.REVOKE_SYMBOL, 0); }
		public RoleOrPrivilegesListContext roleOrPrivilegesList() {
			return getRuleContext(RoleOrPrivilegesListContext.class,0);
		}
		public TerminalNode FROM_SYMBOL() { return getToken(MultiQueryMySQLParser.FROM_SYMBOL, 0); }
		public UserListContext userList() {
			return getRuleContext(UserListContext.class,0);
		}
		public OnTypeToContext onTypeTo() {
			return getRuleContext(OnTypeToContext.class,0);
		}
		public TerminalNode ALL_SYMBOL() { return getToken(MultiQueryMySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode PROXY_SYMBOL() { return getToken(MultiQueryMySQLParser.PROXY_SYMBOL, 0); }
		public TerminalNode ON_SYMBOL() { return getToken(MultiQueryMySQLParser.ON_SYMBOL, 0); }
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public GrantIdentifierContext grantIdentifier() {
			return getRuleContext(GrantIdentifierContext.class,0);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, 0); }
		public TerminalNode GRANT_SYMBOL() { return getToken(MultiQueryMySQLParser.GRANT_SYMBOL, 0); }
		public TerminalNode OPTION_SYMBOL() { return getToken(MultiQueryMySQLParser.OPTION_SYMBOL, 0); }
		public TerminalNode PRIVILEGES_SYMBOL() { return getToken(MultiQueryMySQLParser.PRIVILEGES_SYMBOL, 0); }
		public AclTypeContext aclType() {
			return getRuleContext(AclTypeContext.class,0);
		}
		public RevokeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke; }
	}

	public final RevokeContext revoke() throws RecognitionException {
		RevokeContext _localctx = new RevokeContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_revoke);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4453);
			match(REVOKE_SYMBOL);
			setState(4487);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,533,_ctx) ) {
			case 1:
				{
				setState(4454);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(4455);
				roleOrPrivilegesList();
				setState(4456);
				match(FROM_SYMBOL);
				setState(4457);
				userList();
				}
				break;
			case 2:
				{
				setState(4459);
				roleOrPrivilegesList();
				setState(4460);
				onTypeTo();
				setState(4461);
				match(FROM_SYMBOL);
				setState(4462);
				userList();
				}
				break;
			case 3:
				{
				setState(4464);
				match(ALL_SYMBOL);
				setState(4466);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,530,_ctx) ) {
				case 1:
					{
					setState(4465);
					match(PRIVILEGES_SYMBOL);
					}
					break;
				}
				setState(4479);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,532,_ctx) ) {
				case 1:
					{
					setState(4468);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(4469);
					match(ON_SYMBOL);
					setState(4471);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,531,_ctx) ) {
					case 1:
						{
						setState(4470);
						aclType();
						}
						break;
					}
					setState(4473);
					grantIdentifier();
					}
					break;
				case 2:
					{
					setState(4474);
					match(COMMA_SYMBOL);
					setState(4475);
					match(GRANT_SYMBOL);
					setState(4476);
					match(OPTION_SYMBOL);
					setState(4477);
					match(FROM_SYMBOL);
					setState(4478);
					userList();
					}
					break;
				}
				}
				break;
			case 4:
				{
				setState(4481);
				match(PROXY_SYMBOL);
				setState(4482);
				match(ON_SYMBOL);
				setState(4483);
				user();
				setState(4484);
				match(FROM_SYMBOL);
				setState(4485);
				userList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OnTypeToContext extends ParserRuleContext {
		public TerminalNode ON_SYMBOL() { return getToken(MultiQueryMySQLParser.ON_SYMBOL, 0); }
		public GrantIdentifierContext grantIdentifier() {
			return getRuleContext(GrantIdentifierContext.class,0);
		}
		public AclTypeContext aclType() {
			return getRuleContext(AclTypeContext.class,0);
		}
		public OnTypeToContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onTypeTo; }
	}

	public final OnTypeToContext onTypeTo() throws RecognitionException {
		OnTypeToContext _localctx = new OnTypeToContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_onTypeTo);
		int _la;
		try {
			setState(4503);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,537,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4489);
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				setState(4490);
				match(ON_SYMBOL);
				setState(4492);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,534,_ctx) ) {
				case 1:
					{
					setState(4491);
					aclType();
					}
					break;
				}
				setState(4494);
				grantIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4495);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(4501);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON_SYMBOL) {
					{
					setState(4496);
					match(ON_SYMBOL);
					setState(4498);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,535,_ctx) ) {
					case 1:
						{
						setState(4497);
						aclType();
						}
						break;
					}
					setState(4500);
					grantIdentifier();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AclTypeContext extends ParserRuleContext {
		public TerminalNode TABLE_SYMBOL() { return getToken(MultiQueryMySQLParser.TABLE_SYMBOL, 0); }
		public TerminalNode FUNCTION_SYMBOL() { return getToken(MultiQueryMySQLParser.FUNCTION_SYMBOL, 0); }
		public TerminalNode PROCEDURE_SYMBOL() { return getToken(MultiQueryMySQLParser.PROCEDURE_SYMBOL, 0); }
		public AclTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aclType; }
	}

	public final AclTypeContext aclType() throws RecognitionException {
		AclTypeContext _localctx = new AclTypeContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_aclType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4505);
			_la = _input.LA(1);
			if ( !(_la==FUNCTION_SYMBOL || _la==PROCEDURE_SYMBOL || _la==TABLE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleOrPrivilegesListContext extends ParserRuleContext {
		public List<RoleOrPrivilegeContext> roleOrPrivilege() {
			return getRuleContexts(RoleOrPrivilegeContext.class);
		}
		public RoleOrPrivilegeContext roleOrPrivilege(int i) {
			return getRuleContext(RoleOrPrivilegeContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public RoleOrPrivilegesListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleOrPrivilegesList; }
	}

	public final RoleOrPrivilegesListContext roleOrPrivilegesList() throws RecognitionException {
		RoleOrPrivilegesListContext _localctx = new RoleOrPrivilegesListContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_roleOrPrivilegesList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4507);
			roleOrPrivilege();
			setState(4512);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,538,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4508);
					match(COMMA_SYMBOL);
					setState(4509);
					roleOrPrivilege();
					}
					} 
				}
				setState(4514);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,538,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleOrPrivilegeContext extends ParserRuleContext {
		public Token object;
		public RoleIdentifierOrTextContext roleIdentifierOrText() {
			return getRuleContext(RoleIdentifierOrTextContext.class,0);
		}
		public TerminalNode AT_TEXT_SUFFIX() { return getToken(MultiQueryMySQLParser.AT_TEXT_SUFFIX, 0); }
		public TerminalNode AT_SIGN_SYMBOL() { return getToken(MultiQueryMySQLParser.AT_SIGN_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public ColumnInternalRefListContext columnInternalRefList() {
			return getRuleContext(ColumnInternalRefListContext.class,0);
		}
		public TerminalNode SELECT_SYMBOL() { return getToken(MultiQueryMySQLParser.SELECT_SYMBOL, 0); }
		public TerminalNode INSERT_SYMBOL() { return getToken(MultiQueryMySQLParser.INSERT_SYMBOL, 0); }
		public TerminalNode UPDATE_SYMBOL() { return getToken(MultiQueryMySQLParser.UPDATE_SYMBOL, 0); }
		public TerminalNode REFERENCES_SYMBOL() { return getToken(MultiQueryMySQLParser.REFERENCES_SYMBOL, 0); }
		public TerminalNode DELETE_SYMBOL() { return getToken(MultiQueryMySQLParser.DELETE_SYMBOL, 0); }
		public TerminalNode USAGE_SYMBOL() { return getToken(MultiQueryMySQLParser.USAGE_SYMBOL, 0); }
		public TerminalNode INDEX_SYMBOL() { return getToken(MultiQueryMySQLParser.INDEX_SYMBOL, 0); }
		public TerminalNode DROP_SYMBOL() { return getToken(MultiQueryMySQLParser.DROP_SYMBOL, 0); }
		public TerminalNode EXECUTE_SYMBOL() { return getToken(MultiQueryMySQLParser.EXECUTE_SYMBOL, 0); }
		public TerminalNode RELOAD_SYMBOL() { return getToken(MultiQueryMySQLParser.RELOAD_SYMBOL, 0); }
		public TerminalNode SHUTDOWN_SYMBOL() { return getToken(MultiQueryMySQLParser.SHUTDOWN_SYMBOL, 0); }
		public TerminalNode PROCESS_SYMBOL() { return getToken(MultiQueryMySQLParser.PROCESS_SYMBOL, 0); }
		public TerminalNode FILE_SYMBOL() { return getToken(MultiQueryMySQLParser.FILE_SYMBOL, 0); }
		public TerminalNode PROXY_SYMBOL() { return getToken(MultiQueryMySQLParser.PROXY_SYMBOL, 0); }
		public TerminalNode SUPER_SYMBOL() { return getToken(MultiQueryMySQLParser.SUPER_SYMBOL, 0); }
		public TerminalNode EVENT_SYMBOL() { return getToken(MultiQueryMySQLParser.EVENT_SYMBOL, 0); }
		public TerminalNode TRIGGER_SYMBOL() { return getToken(MultiQueryMySQLParser.TRIGGER_SYMBOL, 0); }
		public TerminalNode GRANT_SYMBOL() { return getToken(MultiQueryMySQLParser.GRANT_SYMBOL, 0); }
		public TerminalNode OPTION_SYMBOL() { return getToken(MultiQueryMySQLParser.OPTION_SYMBOL, 0); }
		public TerminalNode SHOW_SYMBOL() { return getToken(MultiQueryMySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode DATABASES_SYMBOL() { return getToken(MultiQueryMySQLParser.DATABASES_SYMBOL, 0); }
		public TerminalNode CREATE_SYMBOL() { return getToken(MultiQueryMySQLParser.CREATE_SYMBOL, 0); }
		public TerminalNode TEMPORARY_SYMBOL() { return getToken(MultiQueryMySQLParser.TEMPORARY_SYMBOL, 0); }
		public TerminalNode TABLES_SYMBOL() { return getToken(MultiQueryMySQLParser.TABLES_SYMBOL, 0); }
		public TerminalNode ROUTINE_SYMBOL() { return getToken(MultiQueryMySQLParser.ROUTINE_SYMBOL, 0); }
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MultiQueryMySQLParser.TABLESPACE_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MultiQueryMySQLParser.USER_SYMBOL, 0); }
		public TerminalNode VIEW_SYMBOL() { return getToken(MultiQueryMySQLParser.VIEW_SYMBOL, 0); }
		public TerminalNode LOCK_SYMBOL() { return getToken(MultiQueryMySQLParser.LOCK_SYMBOL, 0); }
		public TerminalNode REPLICATION_SYMBOL() { return getToken(MultiQueryMySQLParser.REPLICATION_SYMBOL, 0); }
		public TerminalNode CLIENT_SYMBOL() { return getToken(MultiQueryMySQLParser.CLIENT_SYMBOL, 0); }
		public TerminalNode SLAVE_SYMBOL() { return getToken(MultiQueryMySQLParser.SLAVE_SYMBOL, 0); }
		public TerminalNode ALTER_SYMBOL() { return getToken(MultiQueryMySQLParser.ALTER_SYMBOL, 0); }
		public TerminalNode ROLE_SYMBOL() { return getToken(MultiQueryMySQLParser.ROLE_SYMBOL, 0); }
		public RoleOrPrivilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleOrPrivilege; }
	}

	public final RoleOrPrivilegeContext roleOrPrivilege() throws RecognitionException {
		RoleOrPrivilegeContext _localctx = new RoleOrPrivilegeContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_roleOrPrivilege);
		int _la;
		try {
			setState(4556);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,545,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4515);
				if (!(serverVersion > 80000)) throw new FailedPredicateException(this, "serverVersion > 80000");
				setState(4526);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,541,_ctx) ) {
				case 1:
					{
					setState(4516);
					roleIdentifierOrText();
					setState(4518);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,539,_ctx) ) {
					case 1:
						{
						setState(4517);
						columnInternalRefList();
						}
						break;
					}
					}
					break;
				case 2:
					{
					setState(4520);
					roleIdentifierOrText();
					setState(4524);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case AT_TEXT_SUFFIX:
						{
						setState(4521);
						match(AT_TEXT_SUFFIX);
						}
						break;
					case AT_SIGN_SYMBOL:
						{
						setState(4522);
						match(AT_SIGN_SYMBOL);
						setState(4523);
						textOrIdentifier();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4528);
				_la = _input.LA(1);
				if ( !(_la==INSERT_SYMBOL || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (REFERENCES_SYMBOL - 601)) | (1L << (SELECT_SYMBOL - 601)) | (1L << (UPDATE_SYMBOL - 601)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4530);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,542,_ctx) ) {
				case 1:
					{
					setState(4529);
					columnInternalRefList();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4532);
				_la = _input.LA(1);
				if ( !(_la==EXECUTE_SYMBOL || _la==SHUTDOWN_SYMBOL || _la==EVENT_SYMBOL || _la==FILE_SYMBOL || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (PROCESS_SYMBOL - 261)) | (1L << (PROXY_SYMBOL - 261)) | (1L << (RELOAD_SYMBOL - 261)))) != 0) || _la==SUPER_SYMBOL || ((((_la - 480)) & ~0x3f) == 0 && ((1L << (_la - 480)) & ((1L << (DELETE_SYMBOL - 480)) | (1L << (DROP_SYMBOL - 480)) | (1L << (INDEX_SYMBOL - 480)))) != 0) || _la==TRIGGER_SYMBOL || _la==USAGE_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4533);
				match(GRANT_SYMBOL);
				setState(4534);
				match(OPTION_SYMBOL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4535);
				match(SHOW_SYMBOL);
				setState(4536);
				match(DATABASES_SYMBOL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4537);
				match(CREATE_SYMBOL);
				setState(4541);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,543,_ctx) ) {
				case 1:
					{
					setState(4538);
					match(TEMPORARY_SYMBOL);
					setState(4539);
					((RoleOrPrivilegeContext)_localctx).object = match(TABLES_SYMBOL);
					}
					break;
				case 2:
					{
					setState(4540);
					((RoleOrPrivilegeContext)_localctx).object = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ROUTINE_SYMBOL || _la==TABLESPACE_SYMBOL || _la==USER_SYMBOL || _la==VIEW_SYMBOL) ) {
						((RoleOrPrivilegeContext)_localctx).object = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4543);
				match(LOCK_SYMBOL);
				setState(4544);
				match(TABLES_SYMBOL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4545);
				match(REPLICATION_SYMBOL);
				setState(4546);
				((RoleOrPrivilegeContext)_localctx).object = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==SLAVE_SYMBOL || _la==CLIENT_SYMBOL) ) {
					((RoleOrPrivilegeContext)_localctx).object = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4547);
				match(SHOW_SYMBOL);
				setState(4548);
				match(VIEW_SYMBOL);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4549);
				match(ALTER_SYMBOL);
				setState(4551);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,544,_ctx) ) {
				case 1:
					{
					setState(4550);
					match(ROUTINE_SYMBOL);
					}
					break;
				}
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4553);
				if (!(serverVersion > 80000)) throw new FailedPredicateException(this, "serverVersion > 80000");
				setState(4554);
				_la = _input.LA(1);
				if ( !(_la==CREATE_SYMBOL || _la==DROP_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4555);
				match(ROLE_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantIdentifierContext extends ParserRuleContext {
		public List<TerminalNode> MULT_OPERATOR() { return getTokens(MultiQueryMySQLParser.MULT_OPERATOR); }
		public TerminalNode MULT_OPERATOR(int i) {
			return getToken(MultiQueryMySQLParser.MULT_OPERATOR, i);
		}
		public TerminalNode DOT_SYMBOL() { return getToken(MultiQueryMySQLParser.DOT_SYMBOL, 0); }
		public SchemaRefContext schemaRef() {
			return getRuleContext(SchemaRefContext.class,0);
		}
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public GrantIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantIdentifier; }
	}

	public final GrantIdentifierContext grantIdentifier() throws RecognitionException {
		GrantIdentifierContext _localctx = new GrantIdentifierContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_grantIdentifier);
		try {
			setState(4574);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,548,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4558);
				match(MULT_OPERATOR);
				setState(4561);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,546,_ctx) ) {
				case 1:
					{
					setState(4559);
					match(DOT_SYMBOL);
					setState(4560);
					match(MULT_OPERATOR);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4563);
				schemaRef();
				setState(4566);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,547,_ctx) ) {
				case 1:
					{
					setState(4564);
					match(DOT_SYMBOL);
					setState(4565);
					match(MULT_OPERATOR);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4568);
				tableRef();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4569);
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				setState(4570);
				schemaRef();
				setState(4571);
				match(DOT_SYMBOL);
				setState(4572);
				tableRef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RequireListContext extends ParserRuleContext {
		public List<RequireListElementContext> requireListElement() {
			return getRuleContexts(RequireListElementContext.class);
		}
		public RequireListElementContext requireListElement(int i) {
			return getRuleContext(RequireListElementContext.class,i);
		}
		public List<TerminalNode> AND_SYMBOL() { return getTokens(MultiQueryMySQLParser.AND_SYMBOL); }
		public TerminalNode AND_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.AND_SYMBOL, i);
		}
		public RequireListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_requireList; }
	}

	public final RequireListContext requireList() throws RecognitionException {
		RequireListContext _localctx = new RequireListContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_requireList);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4576);
			requireListElement();
			setState(4583);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,550,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4578);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AND_SYMBOL) {
						{
						setState(4577);
						match(AND_SYMBOL);
						}
					}

					setState(4580);
					requireListElement();
					}
					} 
				}
				setState(4585);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,550,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RequireListElementContext extends ParserRuleContext {
		public Token element;
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public TerminalNode CIPHER_SYMBOL() { return getToken(MultiQueryMySQLParser.CIPHER_SYMBOL, 0); }
		public TerminalNode ISSUER_SYMBOL() { return getToken(MultiQueryMySQLParser.ISSUER_SYMBOL, 0); }
		public TerminalNode SUBJECT_SYMBOL() { return getToken(MultiQueryMySQLParser.SUBJECT_SYMBOL, 0); }
		public RequireListElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_requireListElement; }
	}

	public final RequireListElementContext requireListElement() throws RecognitionException {
		RequireListElementContext _localctx = new RequireListElementContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_requireListElement);
		try {
			setState(4592);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CIPHER_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4586);
				((RequireListElementContext)_localctx).element = match(CIPHER_SYMBOL);
				setState(4587);
				textString();
				}
				break;
			case ISSUER_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4588);
				((RequireListElementContext)_localctx).element = match(ISSUER_SYMBOL);
				setState(4589);
				textString();
				}
				break;
			case SUBJECT_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(4590);
				((RequireListElementContext)_localctx).element = match(SUBJECT_SYMBOL);
				setState(4591);
				textString();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantOptionContext extends ParserRuleContext {
		public Token option;
		public TerminalNode OPTION_SYMBOL() { return getToken(MultiQueryMySQLParser.OPTION_SYMBOL, 0); }
		public TerminalNode GRANT_SYMBOL() { return getToken(MultiQueryMySQLParser.GRANT_SYMBOL, 0); }
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public TerminalNode MAX_QUERIES_PER_HOUR_SYMBOL() { return getToken(MultiQueryMySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0); }
		public TerminalNode MAX_UPDATES_PER_HOUR_SYMBOL() { return getToken(MultiQueryMySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR_SYMBOL() { return getToken(MultiQueryMySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0); }
		public TerminalNode MAX_USER_CONNECTIONS_SYMBOL() { return getToken(MultiQueryMySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0); }
		public GrantOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantOption; }
	}

	public final GrantOptionContext grantOption() throws RecognitionException {
		GrantOptionContext _localctx = new GrantOptionContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_grantOption);
		try {
			setState(4604);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GRANT_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4594);
				((GrantOptionContext)_localctx).option = match(GRANT_SYMBOL);
				setState(4595);
				match(OPTION_SYMBOL);
				}
				break;
			case MAX_QUERIES_PER_HOUR_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4596);
				((GrantOptionContext)_localctx).option = match(MAX_QUERIES_PER_HOUR_SYMBOL);
				setState(4597);
				ulong_number();
				}
				break;
			case MAX_UPDATES_PER_HOUR_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(4598);
				((GrantOptionContext)_localctx).option = match(MAX_UPDATES_PER_HOUR_SYMBOL);
				setState(4599);
				ulong_number();
				}
				break;
			case MAX_CONNECTIONS_PER_HOUR_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(4600);
				((GrantOptionContext)_localctx).option = match(MAX_CONNECTIONS_PER_HOUR_SYMBOL);
				setState(4601);
				ulong_number();
				}
				break;
			case MAX_USER_CONNECTIONS_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(4602);
				((GrantOptionContext)_localctx).option = match(MAX_USER_CONNECTIONS_SYMBOL);
				setState(4603);
				ulong_number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetRoleContext extends ParserRuleContext {
		public TerminalNode SET_SYMBOL() { return getToken(MultiQueryMySQLParser.SET_SYMBOL, 0); }
		public TerminalNode ROLE_SYMBOL() { return getToken(MultiQueryMySQLParser.ROLE_SYMBOL, 0); }
		public List<RoleListContext> roleList() {
			return getRuleContexts(RoleListContext.class);
		}
		public RoleListContext roleList(int i) {
			return getRuleContext(RoleListContext.class,i);
		}
		public TerminalNode NONE_SYMBOL() { return getToken(MultiQueryMySQLParser.NONE_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode TO_SYMBOL() { return getToken(MultiQueryMySQLParser.TO_SYMBOL, 0); }
		public TerminalNode ALL_SYMBOL() { return getToken(MultiQueryMySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode EXCEPT_SYMBOL() { return getToken(MultiQueryMySQLParser.EXCEPT_SYMBOL, 0); }
		public SetRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setRole; }
	}

	public final SetRoleContext setRole() throws RecognitionException {
		SetRoleContext _localctx = new SetRoleContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_setRole);
		int _la;
		try {
			setState(4629);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,555,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4606);
				match(SET_SYMBOL);
				setState(4607);
				match(ROLE_SYMBOL);
				setState(4608);
				roleList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4609);
				match(SET_SYMBOL);
				setState(4610);
				match(ROLE_SYMBOL);
				setState(4611);
				_la = _input.LA(1);
				if ( !(_la==NONE_SYMBOL || _la==DEFAULT_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4612);
				match(SET_SYMBOL);
				setState(4613);
				match(DEFAULT_SYMBOL);
				setState(4614);
				match(ROLE_SYMBOL);
				setState(4618);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,553,_ctx) ) {
				case 1:
					{
					setState(4615);
					roleList();
					}
					break;
				case 2:
					{
					setState(4616);
					match(NONE_SYMBOL);
					}
					break;
				case 3:
					{
					setState(4617);
					match(ALL_SYMBOL);
					}
					break;
				}
				setState(4620);
				match(TO_SYMBOL);
				setState(4621);
				roleList();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4622);
				match(SET_SYMBOL);
				setState(4623);
				match(ROLE_SYMBOL);
				setState(4624);
				match(ALL_SYMBOL);
				setState(4627);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,554,_ctx) ) {
				case 1:
					{
					setState(4625);
					match(EXCEPT_SYMBOL);
					setState(4626);
					roleList();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleListContext extends ParserRuleContext {
		public List<RoleContext> role() {
			return getRuleContexts(RoleContext.class);
		}
		public RoleContext role(int i) {
			return getRuleContext(RoleContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public RoleListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleList; }
	}

	public final RoleListContext roleList() throws RecognitionException {
		RoleListContext _localctx = new RoleListContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_roleList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4631);
			role();
			setState(4636);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,556,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4632);
					match(COMMA_SYMBOL);
					setState(4633);
					role();
					}
					} 
				}
				setState(4638);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,556,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleContext extends ParserRuleContext {
		public RoleIdentifierOrTextContext roleIdentifierOrText() {
			return getRuleContext(RoleIdentifierOrTextContext.class,0);
		}
		public TerminalNode AT_SIGN_SYMBOL() { return getToken(MultiQueryMySQLParser.AT_SIGN_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public TerminalNode AT_TEXT_SUFFIX() { return getToken(MultiQueryMySQLParser.AT_TEXT_SUFFIX, 0); }
		public RoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_role; }
	}

	public final RoleContext role() throws RecognitionException {
		RoleContext _localctx = new RoleContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_role);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4639);
			roleIdentifierOrText();
			setState(4643);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,557,_ctx) ) {
			case 1:
				{
				setState(4640);
				match(AT_SIGN_SYMBOL);
				setState(4641);
				textOrIdentifier();
				}
				break;
			case 2:
				{
				setState(4642);
				match(AT_TEXT_SUFFIX);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableAdministrationStatementContext extends ParserRuleContext {
		public Token type;
		public TerminalNode TABLE_SYMBOL() { return getToken(MultiQueryMySQLParser.TABLE_SYMBOL, 0); }
		public TableRefListContext tableRefList() {
			return getRuleContext(TableRefListContext.class,0);
		}
		public TerminalNode ANALYZE_SYMBOL() { return getToken(MultiQueryMySQLParser.ANALYZE_SYMBOL, 0); }
		public NoWriteToBinLogContext noWriteToBinLog() {
			return getRuleContext(NoWriteToBinLogContext.class,0);
		}
		public HistogramContext histogram() {
			return getRuleContext(HistogramContext.class,0);
		}
		public TerminalNode CHECK_SYMBOL() { return getToken(MultiQueryMySQLParser.CHECK_SYMBOL, 0); }
		public List<CheckOptionContext> checkOption() {
			return getRuleContexts(CheckOptionContext.class);
		}
		public CheckOptionContext checkOption(int i) {
			return getRuleContext(CheckOptionContext.class,i);
		}
		public TerminalNode CHECKSUM_SYMBOL() { return getToken(MultiQueryMySQLParser.CHECKSUM_SYMBOL, 0); }
		public TerminalNode QUICK_SYMBOL() { return getToken(MultiQueryMySQLParser.QUICK_SYMBOL, 0); }
		public TerminalNode EXTENDED_SYMBOL() { return getToken(MultiQueryMySQLParser.EXTENDED_SYMBOL, 0); }
		public TerminalNode OPTIMIZE_SYMBOL() { return getToken(MultiQueryMySQLParser.OPTIMIZE_SYMBOL, 0); }
		public TerminalNode REPAIR_SYMBOL() { return getToken(MultiQueryMySQLParser.REPAIR_SYMBOL, 0); }
		public List<RepairTypeContext> repairType() {
			return getRuleContexts(RepairTypeContext.class);
		}
		public RepairTypeContext repairType(int i) {
			return getRuleContext(RepairTypeContext.class,i);
		}
		public TableAdministrationStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableAdministrationStatement; }
	}

	public final TableAdministrationStatementContext tableAdministrationStatement() throws RecognitionException {
		TableAdministrationStatementContext _localctx = new TableAdministrationStatementContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_tableAdministrationStatement);
		int _la;
		try {
			int _alt;
			setState(4688);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ANALYZE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4645);
				((TableAdministrationStatementContext)_localctx).type = match(ANALYZE_SYMBOL);
				setState(4647);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					setState(4646);
					noWriteToBinLog();
					}
				}

				setState(4649);
				match(TABLE_SYMBOL);
				setState(4650);
				tableRefList();
				setState(4653);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,559,_ctx) ) {
				case 1:
					{
					setState(4651);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(4652);
					histogram();
					}
					break;
				}
				}
				break;
			case CHECK_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4655);
				((TableAdministrationStatementContext)_localctx).type = match(CHECK_SYMBOL);
				setState(4656);
				match(TABLE_SYMBOL);
				setState(4657);
				tableRefList();
				setState(4661);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,560,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4658);
						checkOption();
						}
						} 
					}
					setState(4663);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,560,_ctx);
				}
				}
				break;
			case CHECKSUM_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(4664);
				((TableAdministrationStatementContext)_localctx).type = match(CHECKSUM_SYMBOL);
				setState(4665);
				match(TABLE_SYMBOL);
				setState(4666);
				tableRefList();
				setState(4668);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,561,_ctx) ) {
				case 1:
					{
					setState(4667);
					_la = _input.LA(1);
					if ( !(_la==EXTENDED_SYMBOL || _la==QUICK_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case OPTIMIZE_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(4670);
				((TableAdministrationStatementContext)_localctx).type = match(OPTIMIZE_SYMBOL);
				setState(4672);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					setState(4671);
					noWriteToBinLog();
					}
				}

				setState(4674);
				match(TABLE_SYMBOL);
				setState(4675);
				tableRefList();
				}
				break;
			case REPAIR_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(4676);
				((TableAdministrationStatementContext)_localctx).type = match(REPAIR_SYMBOL);
				setState(4678);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					setState(4677);
					noWriteToBinLog();
					}
				}

				setState(4680);
				match(TABLE_SYMBOL);
				setState(4681);
				tableRefList();
				setState(4685);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,564,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4682);
						repairType();
						}
						} 
					}
					setState(4687);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,564,_ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HistogramContext extends ParserRuleContext {
		public TerminalNode UPDATE_SYMBOL() { return getToken(MultiQueryMySQLParser.UPDATE_SYMBOL, 0); }
		public TerminalNode HISTOGRAM_SYMBOL() { return getToken(MultiQueryMySQLParser.HISTOGRAM_SYMBOL, 0); }
		public TerminalNode ON_SYMBOL() { return getToken(MultiQueryMySQLParser.ON_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode WITH_SYMBOL() { return getToken(MultiQueryMySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode INT_NUMBER() { return getToken(MultiQueryMySQLParser.INT_NUMBER, 0); }
		public TerminalNode BUCKETS_SYMBOL() { return getToken(MultiQueryMySQLParser.BUCKETS_SYMBOL, 0); }
		public TerminalNode DROP_SYMBOL() { return getToken(MultiQueryMySQLParser.DROP_SYMBOL, 0); }
		public HistogramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_histogram; }
	}

	public final HistogramContext histogram() throws RecognitionException {
		HistogramContext _localctx = new HistogramContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_histogram);
		try {
			setState(4703);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UPDATE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4690);
				match(UPDATE_SYMBOL);
				setState(4691);
				match(HISTOGRAM_SYMBOL);
				setState(4692);
				match(ON_SYMBOL);
				setState(4693);
				identifierList();
				setState(4697);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,566,_ctx) ) {
				case 1:
					{
					setState(4694);
					match(WITH_SYMBOL);
					setState(4695);
					match(INT_NUMBER);
					setState(4696);
					match(BUCKETS_SYMBOL);
					}
					break;
				}
				}
				break;
			case DROP_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4699);
				match(DROP_SYMBOL);
				setState(4700);
				match(HISTOGRAM_SYMBOL);
				setState(4701);
				match(ON_SYMBOL);
				setState(4702);
				identifierList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckOptionContext extends ParserRuleContext {
		public TerminalNode FOR_SYMBOL() { return getToken(MultiQueryMySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode UPGRADE_SYMBOL() { return getToken(MultiQueryMySQLParser.UPGRADE_SYMBOL, 0); }
		public TerminalNode QUICK_SYMBOL() { return getToken(MultiQueryMySQLParser.QUICK_SYMBOL, 0); }
		public TerminalNode FAST_SYMBOL() { return getToken(MultiQueryMySQLParser.FAST_SYMBOL, 0); }
		public TerminalNode MEDIUM_SYMBOL() { return getToken(MultiQueryMySQLParser.MEDIUM_SYMBOL, 0); }
		public TerminalNode EXTENDED_SYMBOL() { return getToken(MultiQueryMySQLParser.EXTENDED_SYMBOL, 0); }
		public TerminalNode CHANGED_SYMBOL() { return getToken(MultiQueryMySQLParser.CHANGED_SYMBOL, 0); }
		public CheckOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkOption; }
	}

	public final CheckOptionContext checkOption() throws RecognitionException {
		CheckOptionContext _localctx = new CheckOptionContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_checkOption);
		int _la;
		try {
			setState(4708);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4705);
				match(FOR_SYMBOL);
				setState(4706);
				match(UPGRADE_SYMBOL);
				}
				break;
			case CHANGED_SYMBOL:
			case EXTENDED_SYMBOL:
			case FAST_SYMBOL:
			case MEDIUM_SYMBOL:
			case QUICK_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4707);
				_la = _input.LA(1);
				if ( !(((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & ((1L << (CHANGED_SYMBOL - 80)) | (1L << (EXTENDED_SYMBOL - 80)) | (1L << (FAST_SYMBOL - 80)))) != 0) || _la==MEDIUM_SYMBOL || _la==QUICK_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RepairTypeContext extends ParserRuleContext {
		public TerminalNode QUICK_SYMBOL() { return getToken(MultiQueryMySQLParser.QUICK_SYMBOL, 0); }
		public TerminalNode EXTENDED_SYMBOL() { return getToken(MultiQueryMySQLParser.EXTENDED_SYMBOL, 0); }
		public TerminalNode USE_FRM_SYMBOL() { return getToken(MultiQueryMySQLParser.USE_FRM_SYMBOL, 0); }
		public RepairTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repairType; }
	}

	public final RepairTypeContext repairType() throws RecognitionException {
		RepairTypeContext _localctx = new RepairTypeContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_repairType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4710);
			_la = _input.LA(1);
			if ( !(_la==EXTENDED_SYMBOL || _la==QUICK_SYMBOL || _la==USE_FRM_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InstallUninstallStatmentContext extends ParserRuleContext {
		public Token action;
		public Token type;
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode SONAME_SYMBOL() { return getToken(MultiQueryMySQLParser.SONAME_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode INSTALL_SYMBOL() { return getToken(MultiQueryMySQLParser.INSTALL_SYMBOL, 0); }
		public TerminalNode PLUGIN_SYMBOL() { return getToken(MultiQueryMySQLParser.PLUGIN_SYMBOL, 0); }
		public TextStringLiteralListContext textStringLiteralList() {
			return getRuleContext(TextStringLiteralListContext.class,0);
		}
		public TerminalNode COMPONENT_SYMBOL() { return getToken(MultiQueryMySQLParser.COMPONENT_SYMBOL, 0); }
		public PluginRefContext pluginRef() {
			return getRuleContext(PluginRefContext.class,0);
		}
		public TerminalNode UNINSTALL_SYMBOL() { return getToken(MultiQueryMySQLParser.UNINSTALL_SYMBOL, 0); }
		public List<ComponentRefContext> componentRef() {
			return getRuleContexts(ComponentRefContext.class);
		}
		public ComponentRefContext componentRef(int i) {
			return getRuleContext(ComponentRefContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public InstallUninstallStatmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_installUninstallStatment; }
	}

	public final InstallUninstallStatmentContext installUninstallStatment() throws RecognitionException {
		InstallUninstallStatmentContext _localctx = new InstallUninstallStatmentContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_installUninstallStatment);
		try {
			int _alt;
			setState(4734);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,570,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4712);
				((InstallUninstallStatmentContext)_localctx).action = match(INSTALL_SYMBOL);
				setState(4713);
				((InstallUninstallStatmentContext)_localctx).type = match(PLUGIN_SYMBOL);
				setState(4714);
				identifier();
				setState(4715);
				match(SONAME_SYMBOL);
				setState(4716);
				textStringLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4718);
				((InstallUninstallStatmentContext)_localctx).action = match(INSTALL_SYMBOL);
				setState(4719);
				((InstallUninstallStatmentContext)_localctx).type = match(COMPONENT_SYMBOL);
				setState(4720);
				textStringLiteralList();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4721);
				((InstallUninstallStatmentContext)_localctx).action = match(UNINSTALL_SYMBOL);
				setState(4722);
				((InstallUninstallStatmentContext)_localctx).type = match(PLUGIN_SYMBOL);
				setState(4723);
				pluginRef();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4724);
				((InstallUninstallStatmentContext)_localctx).action = match(UNINSTALL_SYMBOL);
				setState(4725);
				((InstallUninstallStatmentContext)_localctx).type = match(COMPONENT_SYMBOL);
				setState(4726);
				componentRef();
				setState(4731);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,569,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4727);
						match(COMMA_SYMBOL);
						setState(4728);
						componentRef();
						}
						} 
					}
					setState(4733);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,569,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetStatementContext extends ParserRuleContext {
		public TerminalNode SET_SYMBOL() { return getToken(MultiQueryMySQLParser.SET_SYMBOL, 0); }
		public StartOptionValueListContext startOptionValueList() {
			return getRuleContext(StartOptionValueListContext.class,0);
		}
		public SetStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setStatement; }
	}

	public final SetStatementContext setStatement() throws RecognitionException {
		SetStatementContext _localctx = new SetStatementContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_setStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4736);
			match(SET_SYMBOL);
			setState(4737);
			startOptionValueList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StartOptionValueListContext extends ParserRuleContext {
		public OptionValueNoOptionTypeContext optionValueNoOptionType() {
			return getRuleContext(OptionValueNoOptionTypeContext.class,0);
		}
		public OptionValueListContinuedContext optionValueListContinued() {
			return getRuleContext(OptionValueListContinuedContext.class,0);
		}
		public TerminalNode TRANSACTION_SYMBOL() { return getToken(MultiQueryMySQLParser.TRANSACTION_SYMBOL, 0); }
		public TransactionCharacteristicsContext transactionCharacteristics() {
			return getRuleContext(TransactionCharacteristicsContext.class,0);
		}
		public OptionTypeContext optionType() {
			return getRuleContext(OptionTypeContext.class,0);
		}
		public StartOptionValueListFollowingOptionTypeContext startOptionValueListFollowingOptionType() {
			return getRuleContext(StartOptionValueListFollowingOptionTypeContext.class,0);
		}
		public List<TerminalNode> PASSWORD_SYMBOL() { return getTokens(MultiQueryMySQLParser.PASSWORD_SYMBOL); }
		public TerminalNode PASSWORD_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.PASSWORD_SYMBOL, i);
		}
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public TerminalNode OLD_PASSWORD_SYMBOL() { return getToken(MultiQueryMySQLParser.OLD_PASSWORD_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode FOR_SYMBOL() { return getToken(MultiQueryMySQLParser.FOR_SYMBOL, 0); }
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public ReplacePasswordContext replacePassword() {
			return getRuleContext(ReplacePasswordContext.class,0);
		}
		public RetainCurrentPasswordContext retainCurrentPassword() {
			return getRuleContext(RetainCurrentPasswordContext.class,0);
		}
		public TerminalNode TO_SYMBOL() { return getToken(MultiQueryMySQLParser.TO_SYMBOL, 0); }
		public TerminalNode RANDOM_SYMBOL() { return getToken(MultiQueryMySQLParser.RANDOM_SYMBOL, 0); }
		public StartOptionValueListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startOptionValueList; }
	}

	public final StartOptionValueListContext startOptionValueList() throws RecognitionException {
		StartOptionValueListContext _localctx = new StartOptionValueListContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_startOptionValueList);
		int _la;
		try {
			setState(4795);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,580,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4739);
				optionValueNoOptionType();
				setState(4740);
				optionValueListContinued();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4742);
				match(TRANSACTION_SYMBOL);
				setState(4743);
				transactionCharacteristics();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4744);
				optionType();
				setState(4745);
				startOptionValueListFollowingOptionType();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4747);
				match(PASSWORD_SYMBOL);
				setState(4750);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					setState(4748);
					match(FOR_SYMBOL);
					setState(4749);
					user();
					}
				}

				setState(4752);
				equal();
				setState(4779);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,576,_ctx) ) {
				case 1:
					{
					setState(4753);
					textString();
					setState(4755);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,572,_ctx) ) {
					case 1:
						{
						setState(4754);
						replacePassword();
						}
						break;
					}
					setState(4758);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,573,_ctx) ) {
					case 1:
						{
						setState(4757);
						retainCurrentPassword();
						}
						break;
					}
					}
					break;
				case 2:
					{
					setState(4760);
					textString();
					setState(4762);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,574,_ctx) ) {
					case 1:
						{
						setState(4761);
						replacePassword();
						}
						break;
					}
					setState(4765);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,575,_ctx) ) {
					case 1:
						{
						setState(4764);
						retainCurrentPassword();
						}
						break;
					}
					}
					break;
				case 3:
					{
					setState(4767);
					if (!(serverVersion < 50706)) throw new FailedPredicateException(this, "serverVersion < 50706");
					setState(4768);
					match(OLD_PASSWORD_SYMBOL);
					setState(4769);
					match(OPEN_PAR_SYMBOL);
					setState(4770);
					textString();
					setState(4771);
					match(CLOSE_PAR_SYMBOL);
					}
					break;
				case 4:
					{
					setState(4773);
					if (!(serverVersion < 80014)) throw new FailedPredicateException(this, "serverVersion < 80014");
					setState(4774);
					match(PASSWORD_SYMBOL);
					setState(4775);
					match(OPEN_PAR_SYMBOL);
					setState(4776);
					textString();
					setState(4777);
					match(CLOSE_PAR_SYMBOL);
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4781);
				if (!(serverVersion >= 80018)) throw new FailedPredicateException(this, "serverVersion >= 80018");
				setState(4782);
				match(PASSWORD_SYMBOL);
				setState(4785);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					setState(4783);
					match(FOR_SYMBOL);
					setState(4784);
					user();
					}
				}

				setState(4787);
				match(TO_SYMBOL);
				setState(4788);
				match(RANDOM_SYMBOL);
				setState(4790);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,578,_ctx) ) {
				case 1:
					{
					setState(4789);
					replacePassword();
					}
					break;
				}
				setState(4793);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,579,_ctx) ) {
				case 1:
					{
					setState(4792);
					retainCurrentPassword();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionCharacteristicsContext extends ParserRuleContext {
		public TransactionAccessModeContext transactionAccessMode() {
			return getRuleContext(TransactionAccessModeContext.class,0);
		}
		public IsolationLevelContext isolationLevel() {
			return getRuleContext(IsolationLevelContext.class,0);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, 0); }
		public TransactionCharacteristicsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionCharacteristics; }
	}

	public final TransactionCharacteristicsContext transactionCharacteristics() throws RecognitionException {
		TransactionCharacteristicsContext _localctx = new TransactionCharacteristicsContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_transactionCharacteristics);
		try {
			setState(4806);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READ_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4797);
				transactionAccessMode();
				setState(4799);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,581,_ctx) ) {
				case 1:
					{
					setState(4798);
					isolationLevel();
					}
					break;
				}
				}
				break;
			case ISOLATION_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4801);
				isolationLevel();
				setState(4804);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,582,_ctx) ) {
				case 1:
					{
					setState(4802);
					match(COMMA_SYMBOL);
					setState(4803);
					transactionAccessMode();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionAccessModeContext extends ParserRuleContext {
		public TerminalNode READ_SYMBOL() { return getToken(MultiQueryMySQLParser.READ_SYMBOL, 0); }
		public TerminalNode WRITE_SYMBOL() { return getToken(MultiQueryMySQLParser.WRITE_SYMBOL, 0); }
		public TerminalNode ONLY_SYMBOL() { return getToken(MultiQueryMySQLParser.ONLY_SYMBOL, 0); }
		public TransactionAccessModeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionAccessMode; }
	}

	public final TransactionAccessModeContext transactionAccessMode() throws RecognitionException {
		TransactionAccessModeContext _localctx = new TransactionAccessModeContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_transactionAccessMode);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4808);
			match(READ_SYMBOL);
			setState(4809);
			_la = _input.LA(1);
			if ( !(_la==ONLY_SYMBOL || _la==WRITE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IsolationLevelContext extends ParserRuleContext {
		public TerminalNode ISOLATION_SYMBOL() { return getToken(MultiQueryMySQLParser.ISOLATION_SYMBOL, 0); }
		public TerminalNode LEVEL_SYMBOL() { return getToken(MultiQueryMySQLParser.LEVEL_SYMBOL, 0); }
		public TerminalNode REPEATABLE_SYMBOL() { return getToken(MultiQueryMySQLParser.REPEATABLE_SYMBOL, 0); }
		public TerminalNode READ_SYMBOL() { return getToken(MultiQueryMySQLParser.READ_SYMBOL, 0); }
		public TerminalNode SERIALIZABLE_SYMBOL() { return getToken(MultiQueryMySQLParser.SERIALIZABLE_SYMBOL, 0); }
		public TerminalNode COMMITTED_SYMBOL() { return getToken(MultiQueryMySQLParser.COMMITTED_SYMBOL, 0); }
		public TerminalNode UNCOMMITTED_SYMBOL() { return getToken(MultiQueryMySQLParser.UNCOMMITTED_SYMBOL, 0); }
		public IsolationLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_isolationLevel; }
	}

	public final IsolationLevelContext isolationLevel() throws RecognitionException {
		IsolationLevelContext _localctx = new IsolationLevelContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_isolationLevel);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4811);
			match(ISOLATION_SYMBOL);
			setState(4812);
			match(LEVEL_SYMBOL);
			setState(4818);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REPEATABLE_SYMBOL:
				{
				setState(4813);
				match(REPEATABLE_SYMBOL);
				setState(4814);
				match(READ_SYMBOL);
				}
				break;
			case READ_SYMBOL:
				{
				setState(4815);
				match(READ_SYMBOL);
				setState(4816);
				_la = _input.LA(1);
				if ( !(_la==COMMITTED_SYMBOL || _la==UNCOMMITTED_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SERIALIZABLE_SYMBOL:
				{
				setState(4817);
				match(SERIALIZABLE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptionValueListContinuedContext extends ParserRuleContext {
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public List<OptionValueContext> optionValue() {
			return getRuleContexts(OptionValueContext.class);
		}
		public OptionValueContext optionValue(int i) {
			return getRuleContext(OptionValueContext.class,i);
		}
		public OptionValueListContinuedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optionValueListContinued; }
	}

	public final OptionValueListContinuedContext optionValueListContinued() throws RecognitionException {
		OptionValueListContinuedContext _localctx = new OptionValueListContinuedContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_optionValueListContinued);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4824);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,585,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4820);
					match(COMMA_SYMBOL);
					setState(4821);
					optionValue();
					}
					} 
				}
				setState(4826);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,585,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptionValueNoOptionTypeContext extends ParserRuleContext {
		public InternalVariableNameContext internalVariableName() {
			return getRuleContext(InternalVariableNameContext.class,0);
		}
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public SetExprOrDefaultContext setExprOrDefault() {
			return getRuleContext(SetExprOrDefaultContext.class,0);
		}
		public CharsetClauseContext charsetClause() {
			return getRuleContext(CharsetClauseContext.class,0);
		}
		public UserVariableContext userVariable() {
			return getRuleContext(UserVariableContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public SetSystemVariableContext setSystemVariable() {
			return getRuleContext(SetSystemVariableContext.class,0);
		}
		public TerminalNode NAMES_SYMBOL() { return getToken(MultiQueryMySQLParser.NAMES_SYMBOL, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
		public CollateContext collate() {
			return getRuleContext(CollateContext.class,0);
		}
		public OptionValueNoOptionTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optionValueNoOptionType; }
	}

	public final OptionValueNoOptionTypeContext optionValueNoOptionType() throws RecognitionException {
		OptionValueNoOptionTypeContext _localctx = new OptionValueNoOptionTypeContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_optionValueNoOptionType);
		try {
			setState(4852);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,588,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4827);
				internalVariableName();
				setState(4828);
				equal();
				setState(4829);
				setExprOrDefault();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4831);
				charsetClause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4832);
				userVariable();
				setState(4833);
				equal();
				setState(4834);
				expr(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4836);
				setSystemVariable();
				setState(4837);
				equal();
				setState(4838);
				setExprOrDefault();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4840);
				match(NAMES_SYMBOL);
				setState(4850);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,587,_ctx) ) {
				case 1:
					{
					setState(4841);
					equal();
					setState(4842);
					expr(0);
					}
					break;
				case 2:
					{
					setState(4844);
					charsetName();
					setState(4846);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,586,_ctx) ) {
					case 1:
						{
						setState(4845);
						collate();
						}
						break;
					}
					}
					break;
				case 3:
					{
					setState(4848);
					if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
					setState(4849);
					match(DEFAULT_SYMBOL);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptionValueContext extends ParserRuleContext {
		public OptionTypeContext optionType() {
			return getRuleContext(OptionTypeContext.class,0);
		}
		public InternalVariableNameContext internalVariableName() {
			return getRuleContext(InternalVariableNameContext.class,0);
		}
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public SetExprOrDefaultContext setExprOrDefault() {
			return getRuleContext(SetExprOrDefaultContext.class,0);
		}
		public OptionValueNoOptionTypeContext optionValueNoOptionType() {
			return getRuleContext(OptionValueNoOptionTypeContext.class,0);
		}
		public OptionValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optionValue; }
	}

	public final OptionValueContext optionValue() throws RecognitionException {
		OptionValueContext _localctx = new OptionValueContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_optionValue);
		try {
			setState(4860);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,589,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4854);
				optionType();
				setState(4855);
				internalVariableName();
				setState(4856);
				equal();
				setState(4857);
				setExprOrDefault();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4859);
				optionValueNoOptionType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetSystemVariableContext extends ParserRuleContext {
		public TerminalNode AT_AT_SIGN_SYMBOL() { return getToken(MultiQueryMySQLParser.AT_AT_SIGN_SYMBOL, 0); }
		public InternalVariableNameContext internalVariableName() {
			return getRuleContext(InternalVariableNameContext.class,0);
		}
		public SetVarIdentTypeContext setVarIdentType() {
			return getRuleContext(SetVarIdentTypeContext.class,0);
		}
		public SetSystemVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setSystemVariable; }
	}

	public final SetSystemVariableContext setSystemVariable() throws RecognitionException {
		SetSystemVariableContext _localctx = new SetSystemVariableContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_setSystemVariable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4862);
			match(AT_AT_SIGN_SYMBOL);
			setState(4864);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,590,_ctx) ) {
			case 1:
				{
				setState(4863);
				setVarIdentType();
				}
				break;
			}
			setState(4866);
			internalVariableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StartOptionValueListFollowingOptionTypeContext extends ParserRuleContext {
		public OptionValueFollowingOptionTypeContext optionValueFollowingOptionType() {
			return getRuleContext(OptionValueFollowingOptionTypeContext.class,0);
		}
		public OptionValueListContinuedContext optionValueListContinued() {
			return getRuleContext(OptionValueListContinuedContext.class,0);
		}
		public TerminalNode TRANSACTION_SYMBOL() { return getToken(MultiQueryMySQLParser.TRANSACTION_SYMBOL, 0); }
		public TransactionCharacteristicsContext transactionCharacteristics() {
			return getRuleContext(TransactionCharacteristicsContext.class,0);
		}
		public StartOptionValueListFollowingOptionTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startOptionValueListFollowingOptionType; }
	}

	public final StartOptionValueListFollowingOptionTypeContext startOptionValueListFollowingOptionType() throws RecognitionException {
		StartOptionValueListFollowingOptionTypeContext _localctx = new StartOptionValueListFollowingOptionTypeContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_startOptionValueListFollowingOptionType);
		try {
			setState(4873);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,591,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4868);
				optionValueFollowingOptionType();
				setState(4869);
				optionValueListContinued();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4871);
				match(TRANSACTION_SYMBOL);
				setState(4872);
				transactionCharacteristics();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptionValueFollowingOptionTypeContext extends ParserRuleContext {
		public InternalVariableNameContext internalVariableName() {
			return getRuleContext(InternalVariableNameContext.class,0);
		}
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public SetExprOrDefaultContext setExprOrDefault() {
			return getRuleContext(SetExprOrDefaultContext.class,0);
		}
		public OptionValueFollowingOptionTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optionValueFollowingOptionType; }
	}

	public final OptionValueFollowingOptionTypeContext optionValueFollowingOptionType() throws RecognitionException {
		OptionValueFollowingOptionTypeContext _localctx = new OptionValueFollowingOptionTypeContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_optionValueFollowingOptionType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4875);
			internalVariableName();
			setState(4876);
			equal();
			setState(4877);
			setExprOrDefault();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetExprOrDefaultContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode ON_SYMBOL() { return getToken(MultiQueryMySQLParser.ON_SYMBOL, 0); }
		public TerminalNode ALL_SYMBOL() { return getToken(MultiQueryMySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode BINARY_SYMBOL() { return getToken(MultiQueryMySQLParser.BINARY_SYMBOL, 0); }
		public TerminalNode ROW_SYMBOL() { return getToken(MultiQueryMySQLParser.ROW_SYMBOL, 0); }
		public TerminalNode SYSTEM_SYMBOL() { return getToken(MultiQueryMySQLParser.SYSTEM_SYMBOL, 0); }
		public SetExprOrDefaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setExprOrDefault; }
	}

	public final SetExprOrDefaultContext setExprOrDefault() throws RecognitionException {
		SetExprOrDefaultContext _localctx = new SetExprOrDefaultContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_setExprOrDefault);
		int _la;
		try {
			setState(4883);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,592,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4879);
				expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4880);
				_la = _input.LA(1);
				if ( !(((((_la - 427)) & ~0x3f) == 0 && ((1L << (_la - 427)) & ((1L << (ALL_SYMBOL - 427)) | (1L << (BINARY_SYMBOL - 427)) | (1L << (DEFAULT_SYMBOL - 427)))) != 0) || _la==ON_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4881);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(4882);
				_la = _input.LA(1);
				if ( !(_la==ROW_SYMBOL || _la==SYSTEM_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowStatementContext extends ParserRuleContext {
		public Token value;
		public Token object;
		public TerminalNode SHOW_SYMBOL() { return getToken(MultiQueryMySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode STATUS_SYMBOL() { return getToken(MultiQueryMySQLParser.STATUS_SYMBOL, 0); }
		public TerminalNode TABLES_SYMBOL() { return getToken(MultiQueryMySQLParser.TABLES_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public TerminalNode EVENTS_SYMBOL() { return getToken(MultiQueryMySQLParser.EVENTS_SYMBOL, 0); }
		public FromOrInContext fromOrIn() {
			return getRuleContext(FromOrInContext.class,0);
		}
		public TerminalNode COUNT_SYMBOL() { return getToken(MultiQueryMySQLParser.COUNT_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode MULT_OPERATOR() { return getToken(MultiQueryMySQLParser.MULT_OPERATOR, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public CharsetContext charset() {
			return getRuleContext(CharsetContext.class,0);
		}
		public TerminalNode FOR_SYMBOL() { return getToken(MultiQueryMySQLParser.FOR_SYMBOL, 0); }
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public TerminalNode USING_SYMBOL() { return getToken(MultiQueryMySQLParser.USING_SYMBOL, 0); }
		public UserListContext userList() {
			return getRuleContext(UserListContext.class,0);
		}
		public TerminalNode CODE_SYMBOL() { return getToken(MultiQueryMySQLParser.CODE_SYMBOL, 0); }
		public ProcedureRefContext procedureRef() {
			return getRuleContext(ProcedureRefContext.class,0);
		}
		public FunctionRefContext functionRef() {
			return getRuleContext(FunctionRefContext.class,0);
		}
		public TerminalNode AUTHORS_SYMBOL() { return getToken(MultiQueryMySQLParser.AUTHORS_SYMBOL, 0); }
		public TerminalNode DATABASES_SYMBOL() { return getToken(MultiQueryMySQLParser.DATABASES_SYMBOL, 0); }
		public TerminalNode TRIGGERS_SYMBOL() { return getToken(MultiQueryMySQLParser.TRIGGERS_SYMBOL, 0); }
		public TerminalNode TABLE_SYMBOL() { return getToken(MultiQueryMySQLParser.TABLE_SYMBOL, 0); }
		public TerminalNode OPEN_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_SYMBOL, 0); }
		public TerminalNode PLUGINS_SYMBOL() { return getToken(MultiQueryMySQLParser.PLUGINS_SYMBOL, 0); }
		public TerminalNode ENGINE_SYMBOL() { return getToken(MultiQueryMySQLParser.ENGINE_SYMBOL, 0); }
		public TerminalNode MUTEX_SYMBOL() { return getToken(MultiQueryMySQLParser.MUTEX_SYMBOL, 0); }
		public TerminalNode LOGS_SYMBOL() { return getToken(MultiQueryMySQLParser.LOGS_SYMBOL, 0); }
		public TerminalNode COLUMNS_SYMBOL() { return getToken(MultiQueryMySQLParser.COLUMNS_SYMBOL, 0); }
		public TerminalNode FROM_SYMBOL() { return getToken(MultiQueryMySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode IN_SYMBOL() { return getToken(MultiQueryMySQLParser.IN_SYMBOL, 0); }
		public TerminalNode BINARY_SYMBOL() { return getToken(MultiQueryMySQLParser.BINARY_SYMBOL, 0); }
		public TerminalNode MASTER_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_SYMBOL, 0); }
		public TerminalNode SLAVE_SYMBOL() { return getToken(MultiQueryMySQLParser.SLAVE_SYMBOL, 0); }
		public TerminalNode ENGINES_SYMBOL() { return getToken(MultiQueryMySQLParser.ENGINES_SYMBOL, 0); }
		public TerminalNode WARNINGS_SYMBOL() { return getToken(MultiQueryMySQLParser.WARNINGS_SYMBOL, 0); }
		public TerminalNode ERRORS_SYMBOL() { return getToken(MultiQueryMySQLParser.ERRORS_SYMBOL, 0); }
		public TerminalNode PROFILES_SYMBOL() { return getToken(MultiQueryMySQLParser.PROFILES_SYMBOL, 0); }
		public TerminalNode PROFILE_SYMBOL() { return getToken(MultiQueryMySQLParser.PROFILE_SYMBOL, 0); }
		public TerminalNode PROCESSLIST_SYMBOL() { return getToken(MultiQueryMySQLParser.PROCESSLIST_SYMBOL, 0); }
		public TerminalNode COLLATION_SYMBOL() { return getToken(MultiQueryMySQLParser.COLLATION_SYMBOL, 0); }
		public TerminalNode CONTRIBUTORS_SYMBOL() { return getToken(MultiQueryMySQLParser.CONTRIBUTORS_SYMBOL, 0); }
		public TerminalNode PRIVILEGES_SYMBOL() { return getToken(MultiQueryMySQLParser.PRIVILEGES_SYMBOL, 0); }
		public TerminalNode GRANTS_SYMBOL() { return getToken(MultiQueryMySQLParser.GRANTS_SYMBOL, 0); }
		public TerminalNode CREATE_SYMBOL() { return getToken(MultiQueryMySQLParser.CREATE_SYMBOL, 0); }
		public TerminalNode PROCEDURE_SYMBOL() { return getToken(MultiQueryMySQLParser.PROCEDURE_SYMBOL, 0); }
		public TerminalNode FUNCTION_SYMBOL() { return getToken(MultiQueryMySQLParser.FUNCTION_SYMBOL, 0); }
		public EngineRefContext engineRef() {
			return getRuleContext(EngineRefContext.class,0);
		}
		public TerminalNode ALL_SYMBOL() { return getToken(MultiQueryMySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode HOSTS_SYMBOL() { return getToken(MultiQueryMySQLParser.HOSTS_SYMBOL, 0); }
		public NonBlockingContext nonBlocking() {
			return getRuleContext(NonBlockingContext.class,0);
		}
		public TerminalNode BINLOG_SYMBOL() { return getToken(MultiQueryMySQLParser.BINLOG_SYMBOL, 0); }
		public TerminalNode RELAYLOG_SYMBOL() { return getToken(MultiQueryMySQLParser.RELAYLOG_SYMBOL, 0); }
		public TerminalNode INDEX_SYMBOL() { return getToken(MultiQueryMySQLParser.INDEX_SYMBOL, 0); }
		public TerminalNode INDEXES_SYMBOL() { return getToken(MultiQueryMySQLParser.INDEXES_SYMBOL, 0); }
		public TerminalNode KEYS_SYMBOL() { return getToken(MultiQueryMySQLParser.KEYS_SYMBOL, 0); }
		public TerminalNode VARIABLES_SYMBOL() { return getToken(MultiQueryMySQLParser.VARIABLES_SYMBOL, 0); }
		public SchemaRefContext schemaRef() {
			return getRuleContext(SchemaRefContext.class,0);
		}
		public EventRefContext eventRef() {
			return getRuleContext(EventRefContext.class,0);
		}
		public TriggerRefContext triggerRef() {
			return getRuleContext(TriggerRefContext.class,0);
		}
		public ViewRefContext viewRef() {
			return getRuleContext(ViewRefContext.class,0);
		}
		public LikeOrWhereContext likeOrWhere() {
			return getRuleContext(LikeOrWhereContext.class,0);
		}
		public ShowCommandTypeContext showCommandType() {
			return getRuleContext(ShowCommandTypeContext.class,0);
		}
		public InDbContext inDb() {
			return getRuleContext(InDbContext.class,0);
		}
		public TerminalNode FULL_SYMBOL() { return getToken(MultiQueryMySQLParser.FULL_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public Ulonglong_numberContext ulonglong_number() {
			return getRuleContext(Ulonglong_numberContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public ChannelContext channel() {
			return getRuleContext(ChannelContext.class,0);
		}
		public TerminalNode EXTENDED_SYMBOL() { return getToken(MultiQueryMySQLParser.EXTENDED_SYMBOL, 0); }
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public TerminalNode STORAGE_SYMBOL() { return getToken(MultiQueryMySQLParser.STORAGE_SYMBOL, 0); }
		public List<ProfileTypeContext> profileType() {
			return getRuleContexts(ProfileTypeContext.class);
		}
		public ProfileTypeContext profileType(int i) {
			return getRuleContext(ProfileTypeContext.class,i);
		}
		public TerminalNode QUERY_SYMBOL() { return getToken(MultiQueryMySQLParser.QUERY_SYMBOL, 0); }
		public TerminalNode INT_NUMBER() { return getToken(MultiQueryMySQLParser.INT_NUMBER, 0); }
		public OptionTypeContext optionType() {
			return getRuleContext(OptionTypeContext.class,0);
		}
		public TerminalNode DATABASE_SYMBOL() { return getToken(MultiQueryMySQLParser.DATABASE_SYMBOL, 0); }
		public TerminalNode EVENT_SYMBOL() { return getToken(MultiQueryMySQLParser.EVENT_SYMBOL, 0); }
		public TerminalNode TRIGGER_SYMBOL() { return getToken(MultiQueryMySQLParser.TRIGGER_SYMBOL, 0); }
		public TerminalNode VIEW_SYMBOL() { return getToken(MultiQueryMySQLParser.VIEW_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MultiQueryMySQLParser.USER_SYMBOL, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public ShowStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showStatement; }
	}

	public final ShowStatementContext showStatement() throws RecognitionException {
		ShowStatementContext _localctx = new ShowStatementContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_showStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4885);
			match(SHOW_SYMBOL);
			setState(5105);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,636,_ctx) ) {
			case 1:
				{
				setState(4886);
				if (!(serverVersion < 50700)) throw new FailedPredicateException(this, "serverVersion < 50700");
				setState(4887);
				((ShowStatementContext)_localctx).value = match(AUTHORS_SYMBOL);
				}
				break;
			case 2:
				{
				setState(4888);
				((ShowStatementContext)_localctx).value = match(DATABASES_SYMBOL);
				setState(4890);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,593,_ctx) ) {
				case 1:
					{
					setState(4889);
					likeOrWhere();
					}
					break;
				}
				}
				break;
			case 3:
				{
				setState(4893);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,594,_ctx) ) {
				case 1:
					{
					setState(4892);
					showCommandType();
					}
					break;
				}
				setState(4895);
				((ShowStatementContext)_localctx).value = match(TABLES_SYMBOL);
				setState(4897);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,595,_ctx) ) {
				case 1:
					{
					setState(4896);
					inDb();
					}
					break;
				}
				setState(4900);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,596,_ctx) ) {
				case 1:
					{
					setState(4899);
					likeOrWhere();
					}
					break;
				}
				}
				break;
			case 4:
				{
				setState(4903);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL_SYMBOL) {
					{
					setState(4902);
					match(FULL_SYMBOL);
					}
				}

				setState(4905);
				((ShowStatementContext)_localctx).value = match(TRIGGERS_SYMBOL);
				setState(4907);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,598,_ctx) ) {
				case 1:
					{
					setState(4906);
					inDb();
					}
					break;
				}
				setState(4910);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,599,_ctx) ) {
				case 1:
					{
					setState(4909);
					likeOrWhere();
					}
					break;
				}
				}
				break;
			case 5:
				{
				setState(4912);
				((ShowStatementContext)_localctx).value = match(EVENTS_SYMBOL);
				setState(4914);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,600,_ctx) ) {
				case 1:
					{
					setState(4913);
					inDb();
					}
					break;
				}
				setState(4917);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,601,_ctx) ) {
				case 1:
					{
					setState(4916);
					likeOrWhere();
					}
					break;
				}
				}
				break;
			case 6:
				{
				setState(4919);
				((ShowStatementContext)_localctx).value = match(TABLE_SYMBOL);
				setState(4920);
				match(STATUS_SYMBOL);
				setState(4922);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,602,_ctx) ) {
				case 1:
					{
					setState(4921);
					inDb();
					}
					break;
				}
				setState(4925);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,603,_ctx) ) {
				case 1:
					{
					setState(4924);
					likeOrWhere();
					}
					break;
				}
				}
				break;
			case 7:
				{
				setState(4927);
				((ShowStatementContext)_localctx).value = match(OPEN_SYMBOL);
				setState(4928);
				match(TABLES_SYMBOL);
				setState(4930);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,604,_ctx) ) {
				case 1:
					{
					setState(4929);
					inDb();
					}
					break;
				}
				setState(4933);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,605,_ctx) ) {
				case 1:
					{
					setState(4932);
					likeOrWhere();
					}
					break;
				}
				}
				break;
			case 8:
				{
				setState(4935);
				((ShowStatementContext)_localctx).value = match(PLUGINS_SYMBOL);
				}
				break;
			case 9:
				{
				setState(4936);
				((ShowStatementContext)_localctx).value = match(ENGINE_SYMBOL);
				setState(4939);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,606,_ctx) ) {
				case 1:
					{
					setState(4937);
					engineRef();
					}
					break;
				case 2:
					{
					setState(4938);
					match(ALL_SYMBOL);
					}
					break;
				}
				setState(4941);
				_la = _input.LA(1);
				if ( !(_la==LOGS_SYMBOL || _la==MUTEX_SYMBOL || _la==STATUS_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 10:
				{
				setState(4943);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,607,_ctx) ) {
				case 1:
					{
					setState(4942);
					showCommandType();
					}
					break;
				}
				setState(4945);
				((ShowStatementContext)_localctx).value = match(COLUMNS_SYMBOL);
				setState(4946);
				_la = _input.LA(1);
				if ( !(_la==FROM_SYMBOL || _la==IN_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4947);
				tableRef();
				setState(4949);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,608,_ctx) ) {
				case 1:
					{
					setState(4948);
					inDb();
					}
					break;
				}
				setState(4952);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,609,_ctx) ) {
				case 1:
					{
					setState(4951);
					likeOrWhere();
					}
					break;
				}
				}
				break;
			case 11:
				{
				setState(4954);
				_la = _input.LA(1);
				if ( !(_la==MASTER_SYMBOL || _la==BINARY_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4955);
				((ShowStatementContext)_localctx).value = match(LOGS_SYMBOL);
				}
				break;
			case 12:
				{
				setState(4956);
				((ShowStatementContext)_localctx).value = match(SLAVE_SYMBOL);
				setState(4963);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case HOSTS_SYMBOL:
					{
					setState(4957);
					match(HOSTS_SYMBOL);
					}
					break;
				case STATUS_SYMBOL:
					{
					setState(4958);
					match(STATUS_SYMBOL);
					setState(4959);
					nonBlocking();
					setState(4961);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,610,_ctx) ) {
					case 1:
						{
						setState(4960);
						channel();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 13:
				{
				setState(4965);
				((ShowStatementContext)_localctx).value = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINLOG_SYMBOL || _la==RELAYLOG_SYMBOL) ) {
					((ShowStatementContext)_localctx).value = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4966);
				match(EVENTS_SYMBOL);
				setState(4969);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,612,_ctx) ) {
				case 1:
					{
					setState(4967);
					match(IN_SYMBOL);
					setState(4968);
					textString();
					}
					break;
				}
				setState(4973);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,613,_ctx) ) {
				case 1:
					{
					setState(4971);
					match(FROM_SYMBOL);
					setState(4972);
					ulonglong_number();
					}
					break;
				}
				setState(4976);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,614,_ctx) ) {
				case 1:
					{
					setState(4975);
					limitClause();
					}
					break;
				}
				setState(4979);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,615,_ctx) ) {
				case 1:
					{
					setState(4978);
					channel();
					}
					break;
				}
				}
				break;
			case 14:
				{
				setState(4983);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,616,_ctx) ) {
				case 1:
					{
					setState(4981);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(4982);
					match(EXTENDED_SYMBOL);
					}
					break;
				}
				setState(4985);
				((ShowStatementContext)_localctx).value = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEXES_SYMBOL || _la==INDEX_SYMBOL || _la==KEYS_SYMBOL) ) {
					((ShowStatementContext)_localctx).value = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4986);
				fromOrIn();
				setState(4987);
				tableRef();
				setState(4989);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,617,_ctx) ) {
				case 1:
					{
					setState(4988);
					inDb();
					}
					break;
				}
				setState(4992);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,618,_ctx) ) {
				case 1:
					{
					setState(4991);
					whereClause();
					}
					break;
				}
				}
				break;
			case 15:
				{
				setState(4995);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE_SYMBOL) {
					{
					setState(4994);
					match(STORAGE_SYMBOL);
					}
				}

				setState(4997);
				((ShowStatementContext)_localctx).value = match(ENGINES_SYMBOL);
				}
				break;
			case 16:
				{
				setState(4998);
				match(COUNT_SYMBOL);
				setState(4999);
				match(OPEN_PAR_SYMBOL);
				setState(5000);
				match(MULT_OPERATOR);
				setState(5001);
				match(CLOSE_PAR_SYMBOL);
				setState(5002);
				((ShowStatementContext)_localctx).value = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ERRORS_SYMBOL || _la==WARNINGS_SYMBOL) ) {
					((ShowStatementContext)_localctx).value = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 17:
				{
				setState(5003);
				((ShowStatementContext)_localctx).value = match(WARNINGS_SYMBOL);
				setState(5005);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,620,_ctx) ) {
				case 1:
					{
					setState(5004);
					limitClause();
					}
					break;
				}
				}
				break;
			case 18:
				{
				setState(5007);
				((ShowStatementContext)_localctx).value = match(ERRORS_SYMBOL);
				setState(5009);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,621,_ctx) ) {
				case 1:
					{
					setState(5008);
					limitClause();
					}
					break;
				}
				}
				break;
			case 19:
				{
				setState(5011);
				((ShowStatementContext)_localctx).value = match(PROFILES_SYMBOL);
				}
				break;
			case 20:
				{
				setState(5012);
				((ShowStatementContext)_localctx).value = match(PROFILE_SYMBOL);
				setState(5021);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,623,_ctx) ) {
				case 1:
					{
					setState(5013);
					profileType();
					setState(5018);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,622,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(5014);
							match(COMMA_SYMBOL);
							setState(5015);
							profileType();
							}
							} 
						}
						setState(5020);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,622,_ctx);
					}
					}
					break;
				}
				setState(5026);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,624,_ctx) ) {
				case 1:
					{
					setState(5023);
					match(FOR_SYMBOL);
					setState(5024);
					match(QUERY_SYMBOL);
					setState(5025);
					match(INT_NUMBER);
					}
					break;
				}
				setState(5029);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,625,_ctx) ) {
				case 1:
					{
					setState(5028);
					limitClause();
					}
					break;
				}
				}
				break;
			case 21:
				{
				setState(5032);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GLOBAL_SYMBOL || _la==LOCAL_SYMBOL || _la==SESSION_SYMBOL || _la==PERSIST_SYMBOL || _la==PERSIST_ONLY_SYMBOL) {
					{
					setState(5031);
					optionType();
					}
				}

				setState(5034);
				((ShowStatementContext)_localctx).value = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==STATUS_SYMBOL || _la==VARIABLES_SYMBOL) ) {
					((ShowStatementContext)_localctx).value = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5036);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,627,_ctx) ) {
				case 1:
					{
					setState(5035);
					likeOrWhere();
					}
					break;
				}
				}
				break;
			case 22:
				{
				setState(5039);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL_SYMBOL) {
					{
					setState(5038);
					match(FULL_SYMBOL);
					}
				}

				setState(5041);
				((ShowStatementContext)_localctx).value = match(PROCESSLIST_SYMBOL);
				}
				break;
			case 23:
				{
				setState(5042);
				charset();
				setState(5044);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,629,_ctx) ) {
				case 1:
					{
					setState(5043);
					likeOrWhere();
					}
					break;
				}
				}
				break;
			case 24:
				{
				setState(5046);
				((ShowStatementContext)_localctx).value = match(COLLATION_SYMBOL);
				setState(5048);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,630,_ctx) ) {
				case 1:
					{
					setState(5047);
					likeOrWhere();
					}
					break;
				}
				}
				break;
			case 25:
				{
				setState(5050);
				if (!(serverVersion < 50700)) throw new FailedPredicateException(this, "serverVersion < 50700");
				setState(5051);
				((ShowStatementContext)_localctx).value = match(CONTRIBUTORS_SYMBOL);
				}
				break;
			case 26:
				{
				setState(5052);
				((ShowStatementContext)_localctx).value = match(PRIVILEGES_SYMBOL);
				}
				break;
			case 27:
				{
				setState(5053);
				((ShowStatementContext)_localctx).value = match(GRANTS_SYMBOL);
				setState(5056);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,631,_ctx) ) {
				case 1:
					{
					setState(5054);
					match(FOR_SYMBOL);
					setState(5055);
					user();
					}
					break;
				}
				}
				break;
			case 28:
				{
				setState(5058);
				((ShowStatementContext)_localctx).value = match(GRANTS_SYMBOL);
				setState(5059);
				match(FOR_SYMBOL);
				setState(5060);
				user();
				setState(5061);
				match(USING_SYMBOL);
				setState(5062);
				userList();
				}
				break;
			case 29:
				{
				setState(5064);
				((ShowStatementContext)_localctx).value = match(MASTER_SYMBOL);
				setState(5065);
				match(STATUS_SYMBOL);
				}
				break;
			case 30:
				{
				setState(5066);
				((ShowStatementContext)_localctx).value = match(CREATE_SYMBOL);
				setState(5087);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,633,_ctx) ) {
				case 1:
					{
					setState(5067);
					((ShowStatementContext)_localctx).object = match(DATABASE_SYMBOL);
					setState(5069);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,632,_ctx) ) {
					case 1:
						{
						setState(5068);
						ifNotExists();
						}
						break;
					}
					setState(5071);
					schemaRef();
					}
					break;
				case 2:
					{
					setState(5072);
					((ShowStatementContext)_localctx).object = match(EVENT_SYMBOL);
					setState(5073);
					eventRef();
					}
					break;
				case 3:
					{
					setState(5074);
					((ShowStatementContext)_localctx).object = match(FUNCTION_SYMBOL);
					setState(5075);
					functionRef();
					}
					break;
				case 4:
					{
					setState(5076);
					((ShowStatementContext)_localctx).object = match(PROCEDURE_SYMBOL);
					setState(5077);
					procedureRef();
					}
					break;
				case 5:
					{
					setState(5078);
					((ShowStatementContext)_localctx).object = match(TABLE_SYMBOL);
					setState(5079);
					tableRef();
					}
					break;
				case 6:
					{
					setState(5080);
					((ShowStatementContext)_localctx).object = match(TRIGGER_SYMBOL);
					setState(5081);
					triggerRef();
					}
					break;
				case 7:
					{
					setState(5082);
					((ShowStatementContext)_localctx).object = match(VIEW_SYMBOL);
					setState(5083);
					viewRef();
					}
					break;
				case 8:
					{
					setState(5084);
					if (!(serverVersion >= 50704)) throw new FailedPredicateException(this, "serverVersion >= 50704");
					setState(5085);
					((ShowStatementContext)_localctx).object = match(USER_SYMBOL);
					setState(5086);
					user();
					}
					break;
				}
				}
				break;
			case 31:
				{
				setState(5089);
				((ShowStatementContext)_localctx).value = match(PROCEDURE_SYMBOL);
				setState(5090);
				match(STATUS_SYMBOL);
				setState(5092);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,634,_ctx) ) {
				case 1:
					{
					setState(5091);
					likeOrWhere();
					}
					break;
				}
				}
				break;
			case 32:
				{
				setState(5094);
				((ShowStatementContext)_localctx).value = match(FUNCTION_SYMBOL);
				setState(5095);
				match(STATUS_SYMBOL);
				setState(5097);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,635,_ctx) ) {
				case 1:
					{
					setState(5096);
					likeOrWhere();
					}
					break;
				}
				}
				break;
			case 33:
				{
				setState(5099);
				((ShowStatementContext)_localctx).value = match(PROCEDURE_SYMBOL);
				setState(5100);
				match(CODE_SYMBOL);
				setState(5101);
				procedureRef();
				}
				break;
			case 34:
				{
				setState(5102);
				((ShowStatementContext)_localctx).value = match(FUNCTION_SYMBOL);
				setState(5103);
				match(CODE_SYMBOL);
				setState(5104);
				functionRef();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowCommandTypeContext extends ParserRuleContext {
		public TerminalNode FULL_SYMBOL() { return getToken(MultiQueryMySQLParser.FULL_SYMBOL, 0); }
		public TerminalNode EXTENDED_SYMBOL() { return getToken(MultiQueryMySQLParser.EXTENDED_SYMBOL, 0); }
		public ShowCommandTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCommandType; }
	}

	public final ShowCommandTypeContext showCommandType() throws RecognitionException {
		ShowCommandTypeContext _localctx = new ShowCommandTypeContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_showCommandType);
		int _la;
		try {
			setState(5113);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,638,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5107);
				match(FULL_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5108);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(5109);
				match(EXTENDED_SYMBOL);
				setState(5111);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL_SYMBOL) {
					{
					setState(5110);
					match(FULL_SYMBOL);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NonBlockingContext extends ParserRuleContext {
		public TerminalNode NONBLOCKING_SYMBOL() { return getToken(MultiQueryMySQLParser.NONBLOCKING_SYMBOL, 0); }
		public NonBlockingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonBlocking; }
	}

	public final NonBlockingContext nonBlocking() throws RecognitionException {
		NonBlockingContext _localctx = new NonBlockingContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_nonBlocking);
		try {
			setState(5120);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,640,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5115);
				if (!(serverVersion >= 50700 && serverVersion < 50706)) throw new FailedPredicateException(this, "serverVersion >= 50700 && serverVersion < 50706");
				setState(5117);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,639,_ctx) ) {
				case 1:
					{
					setState(5116);
					match(NONBLOCKING_SYMBOL);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromOrInContext extends ParserRuleContext {
		public TerminalNode FROM_SYMBOL() { return getToken(MultiQueryMySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode IN_SYMBOL() { return getToken(MultiQueryMySQLParser.IN_SYMBOL, 0); }
		public FromOrInContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromOrIn; }
	}

	public final FromOrInContext fromOrIn() throws RecognitionException {
		FromOrInContext _localctx = new FromOrInContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_fromOrIn);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5122);
			_la = _input.LA(1);
			if ( !(_la==FROM_SYMBOL || _la==IN_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InDbContext extends ParserRuleContext {
		public FromOrInContext fromOrIn() {
			return getRuleContext(FromOrInContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public InDbContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inDb; }
	}

	public final InDbContext inDb() throws RecognitionException {
		InDbContext _localctx = new InDbContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_inDb);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5124);
			fromOrIn();
			setState(5125);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProfileTypeContext extends ParserRuleContext {
		public TerminalNode BLOCK_SYMBOL() { return getToken(MultiQueryMySQLParser.BLOCK_SYMBOL, 0); }
		public TerminalNode IO_SYMBOL() { return getToken(MultiQueryMySQLParser.IO_SYMBOL, 0); }
		public TerminalNode CONTEXT_SYMBOL() { return getToken(MultiQueryMySQLParser.CONTEXT_SYMBOL, 0); }
		public TerminalNode SWITCHES_SYMBOL() { return getToken(MultiQueryMySQLParser.SWITCHES_SYMBOL, 0); }
		public TerminalNode PAGE_SYMBOL() { return getToken(MultiQueryMySQLParser.PAGE_SYMBOL, 0); }
		public TerminalNode FAULTS_SYMBOL() { return getToken(MultiQueryMySQLParser.FAULTS_SYMBOL, 0); }
		public TerminalNode ALL_SYMBOL() { return getToken(MultiQueryMySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode CPU_SYMBOL() { return getToken(MultiQueryMySQLParser.CPU_SYMBOL, 0); }
		public TerminalNode IPC_SYMBOL() { return getToken(MultiQueryMySQLParser.IPC_SYMBOL, 0); }
		public TerminalNode MEMORY_SYMBOL() { return getToken(MultiQueryMySQLParser.MEMORY_SYMBOL, 0); }
		public TerminalNode SOURCE_SYMBOL() { return getToken(MultiQueryMySQLParser.SOURCE_SYMBOL, 0); }
		public TerminalNode SWAPS_SYMBOL() { return getToken(MultiQueryMySQLParser.SWAPS_SYMBOL, 0); }
		public ProfileTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_profileType; }
	}

	public final ProfileTypeContext profileType() throws RecognitionException {
		ProfileTypeContext _localctx = new ProfileTypeContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_profileType);
		int _la;
		try {
			setState(5134);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BLOCK_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5127);
				match(BLOCK_SYMBOL);
				setState(5128);
				match(IO_SYMBOL);
				}
				break;
			case CONTEXT_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5129);
				match(CONTEXT_SYMBOL);
				setState(5130);
				match(SWITCHES_SYMBOL);
				}
				break;
			case PAGE_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5131);
				match(PAGE_SYMBOL);
				setState(5132);
				match(FAULTS_SYMBOL);
				}
				break;
			case CPU_SYMBOL:
			case IPC_SYMBOL:
			case MEMORY_SYMBOL:
			case SOURCE_SYMBOL:
			case SWAPS_SYMBOL:
			case ALL_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(5133);
				_la = _input.LA(1);
				if ( !(_la==CPU_SYMBOL || _la==IPC_SYMBOL || _la==MEMORY_SYMBOL || _la==SOURCE_SYMBOL || _la==SWAPS_SYMBOL || _la==ALL_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OtherAdministrativeStatementContext extends ParserRuleContext {
		public Token type;
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode BINLOG_SYMBOL() { return getToken(MultiQueryMySQLParser.BINLOG_SYMBOL, 0); }
		public TerminalNode INDEX_SYMBOL() { return getToken(MultiQueryMySQLParser.INDEX_SYMBOL, 0); }
		public KeyCacheListOrPartsContext keyCacheListOrParts() {
			return getRuleContext(KeyCacheListOrPartsContext.class,0);
		}
		public TerminalNode IN_SYMBOL() { return getToken(MultiQueryMySQLParser.IN_SYMBOL, 0); }
		public TerminalNode CACHE_SYMBOL() { return getToken(MultiQueryMySQLParser.CACHE_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode FLUSH_SYMBOL() { return getToken(MultiQueryMySQLParser.FLUSH_SYMBOL, 0); }
		public FlushTablesContext flushTables() {
			return getRuleContext(FlushTablesContext.class,0);
		}
		public List<FlushOptionContext> flushOption() {
			return getRuleContexts(FlushOptionContext.class);
		}
		public FlushOptionContext flushOption(int i) {
			return getRuleContext(FlushOptionContext.class,i);
		}
		public NoWriteToBinLogContext noWriteToBinLog() {
			return getRuleContext(NoWriteToBinLogContext.class,0);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode KILL_SYMBOL() { return getToken(MultiQueryMySQLParser.KILL_SYMBOL, 0); }
		public TerminalNode CONNECTION_SYMBOL() { return getToken(MultiQueryMySQLParser.CONNECTION_SYMBOL, 0); }
		public TerminalNode QUERY_SYMBOL() { return getToken(MultiQueryMySQLParser.QUERY_SYMBOL, 0); }
		public TerminalNode INTO_SYMBOL() { return getToken(MultiQueryMySQLParser.INTO_SYMBOL, 0); }
		public PreloadTailContext preloadTail() {
			return getRuleContext(PreloadTailContext.class,0);
		}
		public TerminalNode LOAD_SYMBOL() { return getToken(MultiQueryMySQLParser.LOAD_SYMBOL, 0); }
		public TerminalNode SHUTDOWN_SYMBOL() { return getToken(MultiQueryMySQLParser.SHUTDOWN_SYMBOL, 0); }
		public OtherAdministrativeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_otherAdministrativeStatement; }
	}

	public final OtherAdministrativeStatementContext otherAdministrativeStatement() throws RecognitionException {
		OtherAdministrativeStatementContext _localctx = new OtherAdministrativeStatementContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_otherAdministrativeStatement);
		int _la;
		try {
			int _alt;
			setState(5173);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,647,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5136);
				((OtherAdministrativeStatementContext)_localctx).type = match(BINLOG_SYMBOL);
				setState(5137);
				textLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5138);
				((OtherAdministrativeStatementContext)_localctx).type = match(CACHE_SYMBOL);
				setState(5139);
				match(INDEX_SYMBOL);
				setState(5140);
				keyCacheListOrParts();
				setState(5141);
				match(IN_SYMBOL);
				setState(5144);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,642,_ctx) ) {
				case 1:
					{
					setState(5142);
					identifier();
					}
					break;
				case 2:
					{
					setState(5143);
					match(DEFAULT_SYMBOL);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5146);
				((OtherAdministrativeStatementContext)_localctx).type = match(FLUSH_SYMBOL);
				setState(5148);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,643,_ctx) ) {
				case 1:
					{
					setState(5147);
					noWriteToBinLog();
					}
					break;
				}
				setState(5159);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,645,_ctx) ) {
				case 1:
					{
					setState(5150);
					flushTables();
					}
					break;
				case 2:
					{
					setState(5151);
					flushOption();
					setState(5156);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,644,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(5152);
							match(COMMA_SYMBOL);
							setState(5153);
							flushOption();
							}
							} 
						}
						setState(5158);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,644,_ctx);
					}
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5161);
				((OtherAdministrativeStatementContext)_localctx).type = match(KILL_SYMBOL);
				setState(5163);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,646,_ctx) ) {
				case 1:
					{
					setState(5162);
					_la = _input.LA(1);
					if ( !(_la==CONNECTION_SYMBOL || _la==QUERY_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5165);
				expr(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5166);
				((OtherAdministrativeStatementContext)_localctx).type = match(LOAD_SYMBOL);
				setState(5167);
				match(INDEX_SYMBOL);
				setState(5168);
				match(INTO_SYMBOL);
				setState(5169);
				match(CACHE_SYMBOL);
				setState(5170);
				preloadTail();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5171);
				if (!(serverVersion >= 50709)) throw new FailedPredicateException(this, "serverVersion >= 50709");
				setState(5172);
				((OtherAdministrativeStatementContext)_localctx).type = match(SHUTDOWN_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyCacheListOrPartsContext extends ParserRuleContext {
		public KeyCacheListContext keyCacheList() {
			return getRuleContext(KeyCacheListContext.class,0);
		}
		public AssignToKeycachePartitionContext assignToKeycachePartition() {
			return getRuleContext(AssignToKeycachePartitionContext.class,0);
		}
		public KeyCacheListOrPartsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyCacheListOrParts; }
	}

	public final KeyCacheListOrPartsContext keyCacheListOrParts() throws RecognitionException {
		KeyCacheListOrPartsContext _localctx = new KeyCacheListOrPartsContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_keyCacheListOrParts);
		try {
			setState(5177);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,648,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5175);
				keyCacheList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5176);
				assignToKeycachePartition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyCacheListContext extends ParserRuleContext {
		public List<AssignToKeycacheContext> assignToKeycache() {
			return getRuleContexts(AssignToKeycacheContext.class);
		}
		public AssignToKeycacheContext assignToKeycache(int i) {
			return getRuleContext(AssignToKeycacheContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public KeyCacheListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyCacheList; }
	}

	public final KeyCacheListContext keyCacheList() throws RecognitionException {
		KeyCacheListContext _localctx = new KeyCacheListContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_keyCacheList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5179);
			assignToKeycache();
			setState(5184);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(5180);
				match(COMMA_SYMBOL);
				setState(5181);
				assignToKeycache();
				}
				}
				setState(5186);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssignToKeycacheContext extends ParserRuleContext {
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public CacheKeyListContext cacheKeyList() {
			return getRuleContext(CacheKeyListContext.class,0);
		}
		public AssignToKeycacheContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignToKeycache; }
	}

	public final AssignToKeycacheContext assignToKeycache() throws RecognitionException {
		AssignToKeycacheContext _localctx = new AssignToKeycacheContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_assignToKeycache);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5187);
			tableRef();
			setState(5189);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INDEX_SYMBOL || _la==KEY_SYMBOL) {
				{
				setState(5188);
				cacheKeyList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssignToKeycachePartitionContext extends ParserRuleContext {
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public TerminalNode PARTITION_SYMBOL() { return getToken(MultiQueryMySQLParser.PARTITION_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public AllOrPartitionNameListContext allOrPartitionNameList() {
			return getRuleContext(AllOrPartitionNameListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public CacheKeyListContext cacheKeyList() {
			return getRuleContext(CacheKeyListContext.class,0);
		}
		public AssignToKeycachePartitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignToKeycachePartition; }
	}

	public final AssignToKeycachePartitionContext assignToKeycachePartition() throws RecognitionException {
		AssignToKeycachePartitionContext _localctx = new AssignToKeycachePartitionContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_assignToKeycachePartition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5191);
			tableRef();
			setState(5192);
			match(PARTITION_SYMBOL);
			setState(5193);
			match(OPEN_PAR_SYMBOL);
			setState(5194);
			allOrPartitionNameList();
			setState(5195);
			match(CLOSE_PAR_SYMBOL);
			setState(5197);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INDEX_SYMBOL || _la==KEY_SYMBOL) {
				{
				setState(5196);
				cacheKeyList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CacheKeyListContext extends ParserRuleContext {
		public KeyOrIndexContext keyOrIndex() {
			return getRuleContext(KeyOrIndexContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public KeyUsageListContext keyUsageList() {
			return getRuleContext(KeyUsageListContext.class,0);
		}
		public CacheKeyListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cacheKeyList; }
	}

	public final CacheKeyListContext cacheKeyList() throws RecognitionException {
		CacheKeyListContext _localctx = new CacheKeyListContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_cacheKeyList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5199);
			keyOrIndex();
			setState(5200);
			match(OPEN_PAR_SYMBOL);
			setState(5202);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,652,_ctx) ) {
			case 1:
				{
				setState(5201);
				keyUsageList();
				}
				break;
			}
			setState(5204);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyUsageElementContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode PRIMARY_SYMBOL() { return getToken(MultiQueryMySQLParser.PRIMARY_SYMBOL, 0); }
		public KeyUsageElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyUsageElement; }
	}

	public final KeyUsageElementContext keyUsageElement() throws RecognitionException {
		KeyUsageElementContext _localctx = new KeyUsageElementContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_keyUsageElement);
		try {
			setState(5208);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,653,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5206);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5207);
				match(PRIMARY_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyUsageListContext extends ParserRuleContext {
		public List<KeyUsageElementContext> keyUsageElement() {
			return getRuleContexts(KeyUsageElementContext.class);
		}
		public KeyUsageElementContext keyUsageElement(int i) {
			return getRuleContext(KeyUsageElementContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public KeyUsageListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyUsageList; }
	}

	public final KeyUsageListContext keyUsageList() throws RecognitionException {
		KeyUsageListContext _localctx = new KeyUsageListContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_keyUsageList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5210);
			keyUsageElement();
			setState(5215);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(5211);
				match(COMMA_SYMBOL);
				setState(5212);
				keyUsageElement();
				}
				}
				setState(5217);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushOptionContext extends ParserRuleContext {
		public Token option;
		public TerminalNode DES_KEY_FILE_SYMBOL() { return getToken(MultiQueryMySQLParser.DES_KEY_FILE_SYMBOL, 0); }
		public TerminalNode HOSTS_SYMBOL() { return getToken(MultiQueryMySQLParser.HOSTS_SYMBOL, 0); }
		public TerminalNode PRIVILEGES_SYMBOL() { return getToken(MultiQueryMySQLParser.PRIVILEGES_SYMBOL, 0); }
		public TerminalNode STATUS_SYMBOL() { return getToken(MultiQueryMySQLParser.STATUS_SYMBOL, 0); }
		public TerminalNode USER_RESOURCES_SYMBOL() { return getToken(MultiQueryMySQLParser.USER_RESOURCES_SYMBOL, 0); }
		public TerminalNode LOGS_SYMBOL() { return getToken(MultiQueryMySQLParser.LOGS_SYMBOL, 0); }
		public LogTypeContext logType() {
			return getRuleContext(LogTypeContext.class,0);
		}
		public TerminalNode RELAY_SYMBOL() { return getToken(MultiQueryMySQLParser.RELAY_SYMBOL, 0); }
		public ChannelContext channel() {
			return getRuleContext(ChannelContext.class,0);
		}
		public TerminalNode CACHE_SYMBOL() { return getToken(MultiQueryMySQLParser.CACHE_SYMBOL, 0); }
		public TerminalNode QUERY_SYMBOL() { return getToken(MultiQueryMySQLParser.QUERY_SYMBOL, 0); }
		public TerminalNode OPTIMIZER_COSTS_SYMBOL() { return getToken(MultiQueryMySQLParser.OPTIMIZER_COSTS_SYMBOL, 0); }
		public FlushOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushOption; }
	}

	public final FlushOptionContext flushOption() throws RecognitionException {
		FlushOptionContext _localctx = new FlushOptionContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_flushOption);
		int _la;
		try {
			setState(5233);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,657,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5218);
				((FlushOptionContext)_localctx).option = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DES_KEY_FILE_SYMBOL || _la==HOSTS_SYMBOL || _la==PRIVILEGES_SYMBOL || _la==STATUS_SYMBOL || _la==USER_RESOURCES_SYMBOL) ) {
					((FlushOptionContext)_localctx).option = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5220);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENGINE_SYMBOL - 128)) | (1L << (ERROR_SYMBOL - 128)) | (1L << (GENERAL_SYMBOL - 128)))) != 0) || _la==SLOW_SYMBOL || _la==BINARY_SYMBOL) {
					{
					setState(5219);
					logType();
					}
				}

				setState(5222);
				((FlushOptionContext)_localctx).option = match(LOGS_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5223);
				((FlushOptionContext)_localctx).option = match(RELAY_SYMBOL);
				setState(5224);
				match(LOGS_SYMBOL);
				setState(5226);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,656,_ctx) ) {
				case 1:
					{
					setState(5225);
					channel();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5228);
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				setState(5229);
				((FlushOptionContext)_localctx).option = match(QUERY_SYMBOL);
				setState(5230);
				match(CACHE_SYMBOL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5231);
				if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
				setState(5232);
				((FlushOptionContext)_localctx).option = match(OPTIMIZER_COSTS_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LogTypeContext extends ParserRuleContext {
		public TerminalNode BINARY_SYMBOL() { return getToken(MultiQueryMySQLParser.BINARY_SYMBOL, 0); }
		public TerminalNode ENGINE_SYMBOL() { return getToken(MultiQueryMySQLParser.ENGINE_SYMBOL, 0); }
		public TerminalNode ERROR_SYMBOL() { return getToken(MultiQueryMySQLParser.ERROR_SYMBOL, 0); }
		public TerminalNode GENERAL_SYMBOL() { return getToken(MultiQueryMySQLParser.GENERAL_SYMBOL, 0); }
		public TerminalNode SLOW_SYMBOL() { return getToken(MultiQueryMySQLParser.SLOW_SYMBOL, 0); }
		public LogTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logType; }
	}

	public final LogTypeContext logType() throws RecognitionException {
		LogTypeContext _localctx = new LogTypeContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_logType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5235);
			_la = _input.LA(1);
			if ( !(((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENGINE_SYMBOL - 128)) | (1L << (ERROR_SYMBOL - 128)) | (1L << (GENERAL_SYMBOL - 128)))) != 0) || _la==SLOW_SYMBOL || _la==BINARY_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushTablesContext extends ParserRuleContext {
		public TerminalNode TABLES_SYMBOL() { return getToken(MultiQueryMySQLParser.TABLES_SYMBOL, 0); }
		public TerminalNode TABLE_SYMBOL() { return getToken(MultiQueryMySQLParser.TABLE_SYMBOL, 0); }
		public TerminalNode WITH_SYMBOL() { return getToken(MultiQueryMySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode READ_SYMBOL() { return getToken(MultiQueryMySQLParser.READ_SYMBOL, 0); }
		public TerminalNode LOCK_SYMBOL() { return getToken(MultiQueryMySQLParser.LOCK_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public FlushTablesOptionsContext flushTablesOptions() {
			return getRuleContext(FlushTablesOptionsContext.class,0);
		}
		public FlushTablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushTables; }
	}

	public final FlushTablesContext flushTables() throws RecognitionException {
		FlushTablesContext _localctx = new FlushTablesContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_flushTables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5237);
			_la = _input.LA(1);
			if ( !(_la==TABLES_SYMBOL || _la==TABLE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5245);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,659,_ctx) ) {
			case 1:
				{
				setState(5238);
				match(WITH_SYMBOL);
				setState(5239);
				match(READ_SYMBOL);
				setState(5240);
				match(LOCK_SYMBOL);
				}
				break;
			case 2:
				{
				setState(5241);
				identifierList();
				setState(5243);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,658,_ctx) ) {
				case 1:
					{
					setState(5242);
					flushTablesOptions();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushTablesOptionsContext extends ParserRuleContext {
		public TerminalNode FOR_SYMBOL() { return getToken(MultiQueryMySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode EXPORT_SYMBOL() { return getToken(MultiQueryMySQLParser.EXPORT_SYMBOL, 0); }
		public TerminalNode WITH_SYMBOL() { return getToken(MultiQueryMySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode READ_SYMBOL() { return getToken(MultiQueryMySQLParser.READ_SYMBOL, 0); }
		public TerminalNode LOCK_SYMBOL() { return getToken(MultiQueryMySQLParser.LOCK_SYMBOL, 0); }
		public FlushTablesOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushTablesOptions; }
	}

	public final FlushTablesOptionsContext flushTablesOptions() throws RecognitionException {
		FlushTablesOptionsContext _localctx = new FlushTablesOptionsContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_flushTablesOptions);
		try {
			setState(5253);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,660,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5247);
				if (!(serverVersion >= 50606)) throw new FailedPredicateException(this, "serverVersion >= 50606");
				setState(5248);
				match(FOR_SYMBOL);
				setState(5249);
				match(EXPORT_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5250);
				match(WITH_SYMBOL);
				setState(5251);
				match(READ_SYMBOL);
				setState(5252);
				match(LOCK_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PreloadTailContext extends ParserRuleContext {
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public AdminPartitionContext adminPartition() {
			return getRuleContext(AdminPartitionContext.class,0);
		}
		public CacheKeyListContext cacheKeyList() {
			return getRuleContext(CacheKeyListContext.class,0);
		}
		public TerminalNode IGNORE_SYMBOL() { return getToken(MultiQueryMySQLParser.IGNORE_SYMBOL, 0); }
		public TerminalNode LEAVES_SYMBOL() { return getToken(MultiQueryMySQLParser.LEAVES_SYMBOL, 0); }
		public PreloadListContext preloadList() {
			return getRuleContext(PreloadListContext.class,0);
		}
		public PreloadTailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preloadTail; }
	}

	public final PreloadTailContext preloadTail() throws RecognitionException {
		PreloadTailContext _localctx = new PreloadTailContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_preloadTail);
		try {
			setState(5265);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,663,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5255);
				tableRef();
				setState(5256);
				adminPartition();
				setState(5258);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,661,_ctx) ) {
				case 1:
					{
					setState(5257);
					cacheKeyList();
					}
					break;
				}
				setState(5262);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,662,_ctx) ) {
				case 1:
					{
					setState(5260);
					match(IGNORE_SYMBOL);
					setState(5261);
					match(LEAVES_SYMBOL);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5264);
				preloadList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PreloadListContext extends ParserRuleContext {
		public List<PreloadKeysContext> preloadKeys() {
			return getRuleContexts(PreloadKeysContext.class);
		}
		public PreloadKeysContext preloadKeys(int i) {
			return getRuleContext(PreloadKeysContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public PreloadListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preloadList; }
	}

	public final PreloadListContext preloadList() throws RecognitionException {
		PreloadListContext _localctx = new PreloadListContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_preloadList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5267);
			preloadKeys();
			setState(5272);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,664,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5268);
					match(COMMA_SYMBOL);
					setState(5269);
					preloadKeys();
					}
					} 
				}
				setState(5274);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,664,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PreloadKeysContext extends ParserRuleContext {
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public CacheKeyListContext cacheKeyList() {
			return getRuleContext(CacheKeyListContext.class,0);
		}
		public TerminalNode IGNORE_SYMBOL() { return getToken(MultiQueryMySQLParser.IGNORE_SYMBOL, 0); }
		public TerminalNode LEAVES_SYMBOL() { return getToken(MultiQueryMySQLParser.LEAVES_SYMBOL, 0); }
		public PreloadKeysContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preloadKeys; }
	}

	public final PreloadKeysContext preloadKeys() throws RecognitionException {
		PreloadKeysContext _localctx = new PreloadKeysContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_preloadKeys);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5275);
			tableRef();
			setState(5277);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,665,_ctx) ) {
			case 1:
				{
				setState(5276);
				cacheKeyList();
				}
				break;
			}
			setState(5281);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,666,_ctx) ) {
			case 1:
				{
				setState(5279);
				match(IGNORE_SYMBOL);
				setState(5280);
				match(LEAVES_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AdminPartitionContext extends ParserRuleContext {
		public TerminalNode PARTITION_SYMBOL() { return getToken(MultiQueryMySQLParser.PARTITION_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public AllOrPartitionNameListContext allOrPartitionNameList() {
			return getRuleContext(AllOrPartitionNameListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public AdminPartitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_adminPartition; }
	}

	public final AdminPartitionContext adminPartition() throws RecognitionException {
		AdminPartitionContext _localctx = new AdminPartitionContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_adminPartition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5283);
			match(PARTITION_SYMBOL);
			setState(5284);
			match(OPEN_PAR_SYMBOL);
			setState(5285);
			allOrPartitionNameList();
			setState(5286);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResourceGroupManagementContext extends ParserRuleContext {
		public CreateResourceGroupContext createResourceGroup() {
			return getRuleContext(CreateResourceGroupContext.class,0);
		}
		public AlterResourceGroupContext alterResourceGroup() {
			return getRuleContext(AlterResourceGroupContext.class,0);
		}
		public SetResourceGroupContext setResourceGroup() {
			return getRuleContext(SetResourceGroupContext.class,0);
		}
		public DropResourceGroupContext dropResourceGroup() {
			return getRuleContext(DropResourceGroupContext.class,0);
		}
		public ResourceGroupManagementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resourceGroupManagement; }
	}

	public final ResourceGroupManagementContext resourceGroupManagement() throws RecognitionException {
		ResourceGroupManagementContext _localctx = new ResourceGroupManagementContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_resourceGroupManagement);
		try {
			setState(5292);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CREATE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5288);
				createResourceGroup();
				}
				break;
			case ALTER_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5289);
				alterResourceGroup();
				}
				break;
			case SET_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5290);
				setResourceGroup();
				}
				break;
			case DROP_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(5291);
				dropResourceGroup();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateResourceGroupContext extends ParserRuleContext {
		public TerminalNode CREATE_SYMBOL() { return getToken(MultiQueryMySQLParser.CREATE_SYMBOL, 0); }
		public TerminalNode RESOURCE_SYMBOL() { return getToken(MultiQueryMySQLParser.RESOURCE_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MultiQueryMySQLParser.GROUP_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode TYPE_SYMBOL() { return getToken(MultiQueryMySQLParser.TYPE_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MultiQueryMySQLParser.USER_SYMBOL, 0); }
		public TerminalNode SYSTEM_SYMBOL() { return getToken(MultiQueryMySQLParser.SYSTEM_SYMBOL, 0); }
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public ResourceGroupVcpuListContext resourceGroupVcpuList() {
			return getRuleContext(ResourceGroupVcpuListContext.class,0);
		}
		public ResourceGroupPriorityContext resourceGroupPriority() {
			return getRuleContext(ResourceGroupPriorityContext.class,0);
		}
		public ResourceGroupEnableDisableContext resourceGroupEnableDisable() {
			return getRuleContext(ResourceGroupEnableDisableContext.class,0);
		}
		public CreateResourceGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createResourceGroup; }
	}

	public final CreateResourceGroupContext createResourceGroup() throws RecognitionException {
		CreateResourceGroupContext _localctx = new CreateResourceGroupContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_createResourceGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5294);
			match(CREATE_SYMBOL);
			setState(5295);
			match(RESOURCE_SYMBOL);
			setState(5296);
			match(GROUP_SYMBOL);
			setState(5297);
			identifier();
			setState(5298);
			match(TYPE_SYMBOL);
			setState(5300);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_OPERATOR || _la==ASSIGN_OPERATOR) {
				{
				setState(5299);
				equal();
				}
			}

			setState(5302);
			_la = _input.LA(1);
			if ( !(_la==USER_SYMBOL || _la==SYSTEM_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5304);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,669,_ctx) ) {
			case 1:
				{
				setState(5303);
				resourceGroupVcpuList();
				}
				break;
			}
			setState(5307);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,670,_ctx) ) {
			case 1:
				{
				setState(5306);
				resourceGroupPriority();
				}
				break;
			}
			setState(5310);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,671,_ctx) ) {
			case 1:
				{
				setState(5309);
				resourceGroupEnableDisable();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResourceGroupVcpuListContext extends ParserRuleContext {
		public TerminalNode VCPU_SYMBOL() { return getToken(MultiQueryMySQLParser.VCPU_SYMBOL, 0); }
		public List<VcpuNumOrRangeContext> vcpuNumOrRange() {
			return getRuleContexts(VcpuNumOrRangeContext.class);
		}
		public VcpuNumOrRangeContext vcpuNumOrRange(int i) {
			return getRuleContext(VcpuNumOrRangeContext.class,i);
		}
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public ResourceGroupVcpuListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resourceGroupVcpuList; }
	}

	public final ResourceGroupVcpuListContext resourceGroupVcpuList() throws RecognitionException {
		ResourceGroupVcpuListContext _localctx = new ResourceGroupVcpuListContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_resourceGroupVcpuList);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5312);
			match(VCPU_SYMBOL);
			setState(5314);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_OPERATOR || _la==ASSIGN_OPERATOR) {
				{
				setState(5313);
				equal();
				}
			}

			setState(5316);
			vcpuNumOrRange();
			setState(5323);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,674,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5318);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA_SYMBOL) {
						{
						setState(5317);
						match(COMMA_SYMBOL);
						}
					}

					setState(5320);
					vcpuNumOrRange();
					}
					} 
				}
				setState(5325);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,674,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VcpuNumOrRangeContext extends ParserRuleContext {
		public List<TerminalNode> INT_NUMBER() { return getTokens(MultiQueryMySQLParser.INT_NUMBER); }
		public TerminalNode INT_NUMBER(int i) {
			return getToken(MultiQueryMySQLParser.INT_NUMBER, i);
		}
		public TerminalNode MINUS_OPERATOR() { return getToken(MultiQueryMySQLParser.MINUS_OPERATOR, 0); }
		public VcpuNumOrRangeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vcpuNumOrRange; }
	}

	public final VcpuNumOrRangeContext vcpuNumOrRange() throws RecognitionException {
		VcpuNumOrRangeContext _localctx = new VcpuNumOrRangeContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_vcpuNumOrRange);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5326);
			match(INT_NUMBER);
			setState(5329);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,675,_ctx) ) {
			case 1:
				{
				setState(5327);
				match(MINUS_OPERATOR);
				setState(5328);
				match(INT_NUMBER);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResourceGroupPriorityContext extends ParserRuleContext {
		public TerminalNode THREAD_PRIORITY_SYMBOL() { return getToken(MultiQueryMySQLParser.THREAD_PRIORITY_SYMBOL, 0); }
		public TerminalNode INT_NUMBER() { return getToken(MultiQueryMySQLParser.INT_NUMBER, 0); }
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public ResourceGroupPriorityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resourceGroupPriority; }
	}

	public final ResourceGroupPriorityContext resourceGroupPriority() throws RecognitionException {
		ResourceGroupPriorityContext _localctx = new ResourceGroupPriorityContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_resourceGroupPriority);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5331);
			match(THREAD_PRIORITY_SYMBOL);
			setState(5333);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_OPERATOR || _la==ASSIGN_OPERATOR) {
				{
				setState(5332);
				equal();
				}
			}

			setState(5335);
			match(INT_NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResourceGroupEnableDisableContext extends ParserRuleContext {
		public TerminalNode ENABLE_SYMBOL() { return getToken(MultiQueryMySQLParser.ENABLE_SYMBOL, 0); }
		public TerminalNode DISABLE_SYMBOL() { return getToken(MultiQueryMySQLParser.DISABLE_SYMBOL, 0); }
		public ResourceGroupEnableDisableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resourceGroupEnableDisable; }
	}

	public final ResourceGroupEnableDisableContext resourceGroupEnableDisable() throws RecognitionException {
		ResourceGroupEnableDisableContext _localctx = new ResourceGroupEnableDisableContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_resourceGroupEnableDisable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5337);
			_la = _input.LA(1);
			if ( !(_la==DISABLE_SYMBOL || _la==ENABLE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterResourceGroupContext extends ParserRuleContext {
		public TerminalNode ALTER_SYMBOL() { return getToken(MultiQueryMySQLParser.ALTER_SYMBOL, 0); }
		public TerminalNode RESOURCE_SYMBOL() { return getToken(MultiQueryMySQLParser.RESOURCE_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MultiQueryMySQLParser.GROUP_SYMBOL, 0); }
		public ResourceGroupRefContext resourceGroupRef() {
			return getRuleContext(ResourceGroupRefContext.class,0);
		}
		public ResourceGroupVcpuListContext resourceGroupVcpuList() {
			return getRuleContext(ResourceGroupVcpuListContext.class,0);
		}
		public ResourceGroupPriorityContext resourceGroupPriority() {
			return getRuleContext(ResourceGroupPriorityContext.class,0);
		}
		public ResourceGroupEnableDisableContext resourceGroupEnableDisable() {
			return getRuleContext(ResourceGroupEnableDisableContext.class,0);
		}
		public TerminalNode FORCE_SYMBOL() { return getToken(MultiQueryMySQLParser.FORCE_SYMBOL, 0); }
		public AlterResourceGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterResourceGroup; }
	}

	public final AlterResourceGroupContext alterResourceGroup() throws RecognitionException {
		AlterResourceGroupContext _localctx = new AlterResourceGroupContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_alterResourceGroup);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5339);
			match(ALTER_SYMBOL);
			setState(5340);
			match(RESOURCE_SYMBOL);
			setState(5341);
			match(GROUP_SYMBOL);
			setState(5342);
			resourceGroupRef();
			setState(5344);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,677,_ctx) ) {
			case 1:
				{
				setState(5343);
				resourceGroupVcpuList();
				}
				break;
			}
			setState(5347);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,678,_ctx) ) {
			case 1:
				{
				setState(5346);
				resourceGroupPriority();
				}
				break;
			}
			setState(5350);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,679,_ctx) ) {
			case 1:
				{
				setState(5349);
				resourceGroupEnableDisable();
				}
				break;
			}
			setState(5353);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,680,_ctx) ) {
			case 1:
				{
				setState(5352);
				match(FORCE_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetResourceGroupContext extends ParserRuleContext {
		public TerminalNode SET_SYMBOL() { return getToken(MultiQueryMySQLParser.SET_SYMBOL, 0); }
		public TerminalNode RESOURCE_SYMBOL() { return getToken(MultiQueryMySQLParser.RESOURCE_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MultiQueryMySQLParser.GROUP_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode FOR_SYMBOL() { return getToken(MultiQueryMySQLParser.FOR_SYMBOL, 0); }
		public ThreadIdListContext threadIdList() {
			return getRuleContext(ThreadIdListContext.class,0);
		}
		public SetResourceGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setResourceGroup; }
	}

	public final SetResourceGroupContext setResourceGroup() throws RecognitionException {
		SetResourceGroupContext _localctx = new SetResourceGroupContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_setResourceGroup);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5355);
			match(SET_SYMBOL);
			setState(5356);
			match(RESOURCE_SYMBOL);
			setState(5357);
			match(GROUP_SYMBOL);
			setState(5358);
			identifier();
			setState(5361);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,681,_ctx) ) {
			case 1:
				{
				setState(5359);
				match(FOR_SYMBOL);
				setState(5360);
				threadIdList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ThreadIdListContext extends ParserRuleContext {
		public List<Real_ulong_numberContext> real_ulong_number() {
			return getRuleContexts(Real_ulong_numberContext.class);
		}
		public Real_ulong_numberContext real_ulong_number(int i) {
			return getRuleContext(Real_ulong_numberContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public ThreadIdListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_threadIdList; }
	}

	public final ThreadIdListContext threadIdList() throws RecognitionException {
		ThreadIdListContext _localctx = new ThreadIdListContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_threadIdList);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5363);
			real_ulong_number();
			setState(5370);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,683,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5365);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA_SYMBOL) {
						{
						setState(5364);
						match(COMMA_SYMBOL);
						}
					}

					setState(5367);
					real_ulong_number();
					}
					} 
				}
				setState(5372);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,683,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropResourceGroupContext extends ParserRuleContext {
		public TerminalNode DROP_SYMBOL() { return getToken(MultiQueryMySQLParser.DROP_SYMBOL, 0); }
		public TerminalNode RESOURCE_SYMBOL() { return getToken(MultiQueryMySQLParser.RESOURCE_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MultiQueryMySQLParser.GROUP_SYMBOL, 0); }
		public ResourceGroupRefContext resourceGroupRef() {
			return getRuleContext(ResourceGroupRefContext.class,0);
		}
		public TerminalNode FORCE_SYMBOL() { return getToken(MultiQueryMySQLParser.FORCE_SYMBOL, 0); }
		public DropResourceGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropResourceGroup; }
	}

	public final DropResourceGroupContext dropResourceGroup() throws RecognitionException {
		DropResourceGroupContext _localctx = new DropResourceGroupContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_dropResourceGroup);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5373);
			match(DROP_SYMBOL);
			setState(5374);
			match(RESOURCE_SYMBOL);
			setState(5375);
			match(GROUP_SYMBOL);
			setState(5376);
			resourceGroupRef();
			setState(5378);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,684,_ctx) ) {
			case 1:
				{
				setState(5377);
				match(FORCE_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UtilityStatementContext extends ParserRuleContext {
		public DescribeCommandContext describeCommand() {
			return getRuleContext(DescribeCommandContext.class,0);
		}
		public ExplainCommandContext explainCommand() {
			return getRuleContext(ExplainCommandContext.class,0);
		}
		public HelpCommandContext helpCommand() {
			return getRuleContext(HelpCommandContext.class,0);
		}
		public UseCommandContext useCommand() {
			return getRuleContext(UseCommandContext.class,0);
		}
		public RestartServerContext restartServer() {
			return getRuleContext(RestartServerContext.class,0);
		}
		public UtilityStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_utilityStatement; }
	}

	public final UtilityStatementContext utilityStatement() throws RecognitionException {
		UtilityStatementContext _localctx = new UtilityStatementContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_utilityStatement);
		try {
			setState(5386);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,685,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5380);
				describeCommand();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5381);
				explainCommand();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5382);
				helpCommand();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5383);
				useCommand();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5384);
				if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
				setState(5385);
				restartServer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DescribeCommandContext extends ParserRuleContext {
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public TerminalNode EXPLAIN_SYMBOL() { return getToken(MultiQueryMySQLParser.EXPLAIN_SYMBOL, 0); }
		public TerminalNode DESCRIBE_SYMBOL() { return getToken(MultiQueryMySQLParser.DESCRIBE_SYMBOL, 0); }
		public TerminalNode DESC_SYMBOL() { return getToken(MultiQueryMySQLParser.DESC_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public ColumnRefContext columnRef() {
			return getRuleContext(ColumnRefContext.class,0);
		}
		public DescribeCommandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describeCommand; }
	}

	public final DescribeCommandContext describeCommand() throws RecognitionException {
		DescribeCommandContext _localctx = new DescribeCommandContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_describeCommand);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5388);
			_la = _input.LA(1);
			if ( !(((((_la - 481)) & ~0x3f) == 0 && ((1L << (_la - 481)) & ((1L << (DESC_SYMBOL - 481)) | (1L << (DESCRIBE_SYMBOL - 481)) | (1L << (EXPLAIN_SYMBOL - 481)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5389);
			tableRef();
			setState(5392);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,686,_ctx) ) {
			case 1:
				{
				setState(5390);
				textString();
				}
				break;
			case 2:
				{
				setState(5391);
				columnRef();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExplainCommandContext extends ParserRuleContext {
		public ExplainableStatementContext explainableStatement() {
			return getRuleContext(ExplainableStatementContext.class,0);
		}
		public TerminalNode EXPLAIN_SYMBOL() { return getToken(MultiQueryMySQLParser.EXPLAIN_SYMBOL, 0); }
		public TerminalNode DESCRIBE_SYMBOL() { return getToken(MultiQueryMySQLParser.DESCRIBE_SYMBOL, 0); }
		public TerminalNode DESC_SYMBOL() { return getToken(MultiQueryMySQLParser.DESC_SYMBOL, 0); }
		public TerminalNode EXTENDED_SYMBOL() { return getToken(MultiQueryMySQLParser.EXTENDED_SYMBOL, 0); }
		public TerminalNode PARTITIONS_SYMBOL() { return getToken(MultiQueryMySQLParser.PARTITIONS_SYMBOL, 0); }
		public TerminalNode FORMAT_SYMBOL() { return getToken(MultiQueryMySQLParser.FORMAT_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public TerminalNode ANALYZE_SYMBOL() { return getToken(MultiQueryMySQLParser.ANALYZE_SYMBOL, 0); }
		public ExplainCommandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainCommand; }
	}

	public final ExplainCommandContext explainCommand() throws RecognitionException {
		ExplainCommandContext _localctx = new ExplainCommandContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_explainCommand);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5394);
			_la = _input.LA(1);
			if ( !(((((_la - 481)) & ~0x3f) == 0 && ((1L << (_la - 481)) & ((1L << (DESC_SYMBOL - 481)) | (1L << (DESCRIBE_SYMBOL - 481)) | (1L << (EXPLAIN_SYMBOL - 481)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5405);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,687,_ctx) ) {
			case 1:
				{
				setState(5395);
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				setState(5396);
				match(EXTENDED_SYMBOL);
				}
				break;
			case 2:
				{
				setState(5397);
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				setState(5398);
				match(PARTITIONS_SYMBOL);
				}
				break;
			case 3:
				{
				setState(5399);
				if (!(serverVersion >= 50605)) throw new FailedPredicateException(this, "serverVersion >= 50605");
				setState(5400);
				match(FORMAT_SYMBOL);
				setState(5401);
				match(EQUAL_OPERATOR);
				setState(5402);
				textOrIdentifier();
				}
				break;
			case 4:
				{
				setState(5403);
				if (!(serverVersion >= 80018)) throw new FailedPredicateException(this, "serverVersion >= 80018");
				setState(5404);
				match(ANALYZE_SYMBOL);
				}
				break;
			}
			setState(5407);
			explainableStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExplainableStatementContext extends ParserRuleContext {
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public DeleteStatementContext deleteStatement() {
			return getRuleContext(DeleteStatementContext.class,0);
		}
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public ReplaceStatementContext replaceStatement() {
			return getRuleContext(ReplaceStatementContext.class,0);
		}
		public UpdateStatementContext updateStatement() {
			return getRuleContext(UpdateStatementContext.class,0);
		}
		public TerminalNode FOR_SYMBOL() { return getToken(MultiQueryMySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode CONNECTION_SYMBOL() { return getToken(MultiQueryMySQLParser.CONNECTION_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public ExplainableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainableStatement; }
	}

	public final ExplainableStatementContext explainableStatement() throws RecognitionException {
		ExplainableStatementContext _localctx = new ExplainableStatementContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_explainableStatement);
		try {
			setState(5421);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,689,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5409);
				selectStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5410);
				if (!(serverVersion >= 50603)) throw new FailedPredicateException(this, "serverVersion >= 50603");
				setState(5415);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,688,_ctx) ) {
				case 1:
					{
					setState(5411);
					deleteStatement();
					}
					break;
				case 2:
					{
					setState(5412);
					insertStatement();
					}
					break;
				case 3:
					{
					setState(5413);
					replaceStatement();
					}
					break;
				case 4:
					{
					setState(5414);
					updateStatement();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5417);
				if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
				setState(5418);
				match(FOR_SYMBOL);
				setState(5419);
				match(CONNECTION_SYMBOL);
				setState(5420);
				real_ulong_number();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HelpCommandContext extends ParserRuleContext {
		public TerminalNode HELP_SYMBOL() { return getToken(MultiQueryMySQLParser.HELP_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public HelpCommandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_helpCommand; }
	}

	public final HelpCommandContext helpCommand() throws RecognitionException {
		HelpCommandContext _localctx = new HelpCommandContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_helpCommand);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5423);
			match(HELP_SYMBOL);
			setState(5424);
			textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UseCommandContext extends ParserRuleContext {
		public TerminalNode USE_SYMBOL() { return getToken(MultiQueryMySQLParser.USE_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public UseCommandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_useCommand; }
	}

	public final UseCommandContext useCommand() throws RecognitionException {
		UseCommandContext _localctx = new UseCommandContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_useCommand);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5426);
			match(USE_SYMBOL);
			setState(5427);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RestartServerContext extends ParserRuleContext {
		public TerminalNode RESTART_SYMBOL() { return getToken(MultiQueryMySQLParser.RESTART_SYMBOL, 0); }
		public RestartServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_restartServer; }
	}

	public final RestartServerContext restartServer() throws RecognitionException {
		RestartServerContext _localctx = new RestartServerContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_restartServer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5429);
			match(RESTART_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExprContext extends ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr; }
	 
		public ExprContext() { }
		public void copyFrom(ExprContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ExprOrContext extends ExprContext {
		public Token op;
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode OR_SYMBOL() { return getToken(MultiQueryMySQLParser.OR_SYMBOL, 0); }
		public TerminalNode LOGICAL_OR_OPERATOR() { return getToken(MultiQueryMySQLParser.LOGICAL_OR_OPERATOR, 0); }
		public ExprOrContext(ExprContext ctx) { copyFrom(ctx); }
	}
	public static class ExprNotContext extends ExprContext {
		public TerminalNode NOT_SYMBOL() { return getToken(MultiQueryMySQLParser.NOT_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ExprNotContext(ExprContext ctx) { copyFrom(ctx); }
	}
	public static class ExprIsContext extends ExprContext {
		public Token type;
		public BoolPriContext boolPri() {
			return getRuleContext(BoolPriContext.class,0);
		}
		public TerminalNode IS_SYMBOL() { return getToken(MultiQueryMySQLParser.IS_SYMBOL, 0); }
		public TerminalNode TRUE_SYMBOL() { return getToken(MultiQueryMySQLParser.TRUE_SYMBOL, 0); }
		public TerminalNode FALSE_SYMBOL() { return getToken(MultiQueryMySQLParser.FALSE_SYMBOL, 0); }
		public TerminalNode UNKNOWN_SYMBOL() { return getToken(MultiQueryMySQLParser.UNKNOWN_SYMBOL, 0); }
		public NotRuleContext notRule() {
			return getRuleContext(NotRuleContext.class,0);
		}
		public ExprIsContext(ExprContext ctx) { copyFrom(ctx); }
	}
	public static class ExprAndContext extends ExprContext {
		public Token op;
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode AND_SYMBOL() { return getToken(MultiQueryMySQLParser.AND_SYMBOL, 0); }
		public TerminalNode LOGICAL_AND_OPERATOR() { return getToken(MultiQueryMySQLParser.LOGICAL_AND_OPERATOR, 0); }
		public ExprAndContext(ExprContext ctx) { copyFrom(ctx); }
	}
	public static class ExprXorContext extends ExprContext {
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode XOR_SYMBOL() { return getToken(MultiQueryMySQLParser.XOR_SYMBOL, 0); }
		public ExprXorContext(ExprContext ctx) { copyFrom(ctx); }
	}

	public final ExprContext expr() throws RecognitionException {
		return expr(0);
	}

	private ExprContext expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 668;
		enterRecursionRule(_localctx, 668, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5442);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,692,_ctx) ) {
			case 1:
				{
				_localctx = new ExprIsContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(5432);
				boolPri(0);
				setState(5438);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,691,_ctx) ) {
				case 1:
					{
					setState(5433);
					match(IS_SYMBOL);
					setState(5435);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NOT2_SYMBOL || _la==NOT_SYMBOL) {
						{
						setState(5434);
						notRule();
						}
					}

					setState(5437);
					((ExprIsContext)_localctx).type = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==UNKNOWN_SYMBOL || _la==FALSE_SYMBOL || _la==TRUE_SYMBOL) ) {
						((ExprIsContext)_localctx).type = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case 2:
				{
				_localctx = new ExprNotContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5440);
				match(NOT_SYMBOL);
				setState(5441);
				expr(4);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(5455);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,694,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(5453);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,693,_ctx) ) {
					case 1:
						{
						_localctx = new ExprAndContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(5444);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(5445);
						((ExprAndContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==LOGICAL_AND_OPERATOR || _la==AND_SYMBOL) ) {
							((ExprAndContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5446);
						expr(4);
						}
						break;
					case 2:
						{
						_localctx = new ExprXorContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(5447);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(5448);
						match(XOR_SYMBOL);
						setState(5449);
						expr(3);
						}
						break;
					case 3:
						{
						_localctx = new ExprOrContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(5450);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(5451);
						((ExprOrContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==LOGICAL_OR_OPERATOR || _la==OR_SYMBOL) ) {
							((ExprOrContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5452);
						expr(2);
						}
						break;
					}
					} 
				}
				setState(5457);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,694,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class BoolPriContext extends ParserRuleContext {
		public BoolPriContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolPri; }
	 
		public BoolPriContext() { }
		public void copyFrom(BoolPriContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PrimaryExprPredicateContext extends BoolPriContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public PrimaryExprPredicateContext(BoolPriContext ctx) { copyFrom(ctx); }
	}
	public static class PrimaryExprCompareContext extends BoolPriContext {
		public BoolPriContext boolPri() {
			return getRuleContext(BoolPriContext.class,0);
		}
		public CompOpContext compOp() {
			return getRuleContext(CompOpContext.class,0);
		}
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public PrimaryExprCompareContext(BoolPriContext ctx) { copyFrom(ctx); }
	}
	public static class PrimaryExprAllAnyContext extends BoolPriContext {
		public BoolPriContext boolPri() {
			return getRuleContext(BoolPriContext.class,0);
		}
		public CompOpContext compOp() {
			return getRuleContext(CompOpContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode ALL_SYMBOL() { return getToken(MultiQueryMySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode ANY_SYMBOL() { return getToken(MultiQueryMySQLParser.ANY_SYMBOL, 0); }
		public PrimaryExprAllAnyContext(BoolPriContext ctx) { copyFrom(ctx); }
	}
	public static class PrimaryExprIsNullContext extends BoolPriContext {
		public BoolPriContext boolPri() {
			return getRuleContext(BoolPriContext.class,0);
		}
		public TerminalNode IS_SYMBOL() { return getToken(MultiQueryMySQLParser.IS_SYMBOL, 0); }
		public TerminalNode NULL_SYMBOL() { return getToken(MultiQueryMySQLParser.NULL_SYMBOL, 0); }
		public NotRuleContext notRule() {
			return getRuleContext(NotRuleContext.class,0);
		}
		public PrimaryExprIsNullContext(BoolPriContext ctx) { copyFrom(ctx); }
	}

	public final BoolPriContext boolPri() throws RecognitionException {
		return boolPri(0);
	}

	private BoolPriContext boolPri(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		BoolPriContext _localctx = new BoolPriContext(_ctx, _parentState);
		BoolPriContext _prevctx = _localctx;
		int _startState = 670;
		enterRecursionRule(_localctx, 670, RULE_boolPri, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PrimaryExprPredicateContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			setState(5459);
			predicate();
			}
			_ctx.stop = _input.LT(-1);
			setState(5478);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,697,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(5476);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,696,_ctx) ) {
					case 1:
						{
						_localctx = new PrimaryExprIsNullContext(new BoolPriContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_boolPri);
						setState(5461);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(5462);
						match(IS_SYMBOL);
						setState(5464);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT2_SYMBOL || _la==NOT_SYMBOL) {
							{
							setState(5463);
							notRule();
							}
						}

						setState(5466);
						match(NULL_SYMBOL);
						}
						break;
					case 2:
						{
						_localctx = new PrimaryExprCompareContext(new BoolPriContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_boolPri);
						setState(5467);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(5468);
						compOp();
						setState(5469);
						predicate();
						}
						break;
					case 3:
						{
						_localctx = new PrimaryExprAllAnyContext(new BoolPriContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_boolPri);
						setState(5471);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(5472);
						compOp();
						setState(5473);
						_la = _input.LA(1);
						if ( !(_la==ANY_SYMBOL || _la==ALL_SYMBOL) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5474);
						subquery();
						}
						break;
					}
					} 
				}
				setState(5480);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,697,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class CompOpContext extends ParserRuleContext {
		public TerminalNode EQUAL_OPERATOR() { return getToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
		public TerminalNode NULL_SAFE_EQUAL_OPERATOR() { return getToken(MultiQueryMySQLParser.NULL_SAFE_EQUAL_OPERATOR, 0); }
		public TerminalNode GREATER_OR_EQUAL_OPERATOR() { return getToken(MultiQueryMySQLParser.GREATER_OR_EQUAL_OPERATOR, 0); }
		public TerminalNode GREATER_THAN_OPERATOR() { return getToken(MultiQueryMySQLParser.GREATER_THAN_OPERATOR, 0); }
		public TerminalNode LESS_OR_EQUAL_OPERATOR() { return getToken(MultiQueryMySQLParser.LESS_OR_EQUAL_OPERATOR, 0); }
		public TerminalNode LESS_THAN_OPERATOR() { return getToken(MultiQueryMySQLParser.LESS_THAN_OPERATOR, 0); }
		public TerminalNode NOT_EQUAL_OPERATOR() { return getToken(MultiQueryMySQLParser.NOT_EQUAL_OPERATOR, 0); }
		public CompOpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compOp; }
	}

	public final CompOpContext compOp() throws RecognitionException {
		CompOpContext _localctx = new CompOpContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_compOp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5481);
			_la = _input.LA(1);
			if ( !(((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (EQUAL_OPERATOR - 383)) | (1L << (NULL_SAFE_EQUAL_OPERATOR - 383)) | (1L << (GREATER_OR_EQUAL_OPERATOR - 383)) | (1L << (GREATER_THAN_OPERATOR - 383)) | (1L << (LESS_OR_EQUAL_OPERATOR - 383)) | (1L << (LESS_THAN_OPERATOR - 383)) | (1L << (NOT_EQUAL_OPERATOR - 383)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public List<BitExprContext> bitExpr() {
			return getRuleContexts(BitExprContext.class);
		}
		public BitExprContext bitExpr(int i) {
			return getRuleContext(BitExprContext.class,i);
		}
		public PredicateOperationsContext predicateOperations() {
			return getRuleContext(PredicateOperationsContext.class,0);
		}
		public TerminalNode MEMBER_SYMBOL() { return getToken(MultiQueryMySQLParser.MEMBER_SYMBOL, 0); }
		public SimpleExprWithParenthesesContext simpleExprWithParentheses() {
			return getRuleContext(SimpleExprWithParenthesesContext.class,0);
		}
		public TerminalNode SOUNDS_SYMBOL() { return getToken(MultiQueryMySQLParser.SOUNDS_SYMBOL, 0); }
		public TerminalNode LIKE_SYMBOL() { return getToken(MultiQueryMySQLParser.LIKE_SYMBOL, 0); }
		public NotRuleContext notRule() {
			return getRuleContext(NotRuleContext.class,0);
		}
		public TerminalNode OF_SYMBOL() { return getToken(MultiQueryMySQLParser.OF_SYMBOL, 0); }
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
	}

	public final PredicateContext predicate() throws RecognitionException {
		PredicateContext _localctx = new PredicateContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_predicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5483);
			bitExpr(0);
			setState(5497);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,700,_ctx) ) {
			case 1:
				{
				setState(5485);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT2_SYMBOL || _la==NOT_SYMBOL) {
					{
					setState(5484);
					notRule();
					}
				}

				setState(5487);
				predicateOperations();
				}
				break;
			case 2:
				{
				setState(5488);
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				setState(5489);
				match(MEMBER_SYMBOL);
				setState(5491);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OF_SYMBOL) {
					{
					setState(5490);
					match(OF_SYMBOL);
					}
				}

				setState(5493);
				simpleExprWithParentheses();
				}
				break;
			case 3:
				{
				setState(5494);
				match(SOUNDS_SYMBOL);
				setState(5495);
				match(LIKE_SYMBOL);
				setState(5496);
				bitExpr(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PredicateOperationsContext extends ParserRuleContext {
		public PredicateOperationsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicateOperations; }
	 
		public PredicateOperationsContext() { }
		public void copyFrom(PredicateOperationsContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PredicateExprRegexContext extends PredicateOperationsContext {
		public TerminalNode REGEXP_SYMBOL() { return getToken(MultiQueryMySQLParser.REGEXP_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return getRuleContext(BitExprContext.class,0);
		}
		public PredicateExprRegexContext(PredicateOperationsContext ctx) { copyFrom(ctx); }
	}
	public static class PredicateExprBetweenContext extends PredicateOperationsContext {
		public TerminalNode BETWEEN_SYMBOL() { return getToken(MultiQueryMySQLParser.BETWEEN_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return getRuleContext(BitExprContext.class,0);
		}
		public TerminalNode AND_SYMBOL() { return getToken(MultiQueryMySQLParser.AND_SYMBOL, 0); }
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public PredicateExprBetweenContext(PredicateOperationsContext ctx) { copyFrom(ctx); }
	}
	public static class PredicateExprInContext extends PredicateOperationsContext {
		public TerminalNode IN_SYMBOL() { return getToken(MultiQueryMySQLParser.IN_SYMBOL, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public PredicateExprInContext(PredicateOperationsContext ctx) { copyFrom(ctx); }
	}
	public static class PredicateExprLikeContext extends PredicateOperationsContext {
		public TerminalNode LIKE_SYMBOL() { return getToken(MultiQueryMySQLParser.LIKE_SYMBOL, 0); }
		public List<SimpleExprContext> simpleExpr() {
			return getRuleContexts(SimpleExprContext.class);
		}
		public SimpleExprContext simpleExpr(int i) {
			return getRuleContext(SimpleExprContext.class,i);
		}
		public TerminalNode ESCAPE_SYMBOL() { return getToken(MultiQueryMySQLParser.ESCAPE_SYMBOL, 0); }
		public PredicateExprLikeContext(PredicateOperationsContext ctx) { copyFrom(ctx); }
	}

	public final PredicateOperationsContext predicateOperations() throws RecognitionException {
		PredicateOperationsContext _localctx = new PredicateOperationsContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_predicateOperations);
		try {
			setState(5520);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IN_SYMBOL:
				_localctx = new PredicateExprInContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5499);
				match(IN_SYMBOL);
				setState(5505);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,701,_ctx) ) {
				case 1:
					{
					setState(5500);
					subquery();
					}
					break;
				case 2:
					{
					setState(5501);
					match(OPEN_PAR_SYMBOL);
					setState(5502);
					exprList();
					setState(5503);
					match(CLOSE_PAR_SYMBOL);
					}
					break;
				}
				}
				break;
			case BETWEEN_SYMBOL:
				_localctx = new PredicateExprBetweenContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5507);
				match(BETWEEN_SYMBOL);
				setState(5508);
				bitExpr(0);
				setState(5509);
				match(AND_SYMBOL);
				setState(5510);
				predicate();
				}
				break;
			case LIKE_SYMBOL:
				_localctx = new PredicateExprLikeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5512);
				match(LIKE_SYMBOL);
				setState(5513);
				simpleExpr(0);
				setState(5516);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,702,_ctx) ) {
				case 1:
					{
					setState(5514);
					match(ESCAPE_SYMBOL);
					setState(5515);
					simpleExpr(0);
					}
					break;
				}
				}
				break;
			case REGEXP_SYMBOL:
				_localctx = new PredicateExprRegexContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5518);
				match(REGEXP_SYMBOL);
				setState(5519);
				bitExpr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitExprContext extends ParserRuleContext {
		public Token op;
		public SimpleExprContext simpleExpr() {
			return getRuleContext(SimpleExprContext.class,0);
		}
		public List<BitExprContext> bitExpr() {
			return getRuleContexts(BitExprContext.class);
		}
		public BitExprContext bitExpr(int i) {
			return getRuleContext(BitExprContext.class,i);
		}
		public TerminalNode BITWISE_XOR_OPERATOR() { return getToken(MultiQueryMySQLParser.BITWISE_XOR_OPERATOR, 0); }
		public TerminalNode MULT_OPERATOR() { return getToken(MultiQueryMySQLParser.MULT_OPERATOR, 0); }
		public TerminalNode DIV_OPERATOR() { return getToken(MultiQueryMySQLParser.DIV_OPERATOR, 0); }
		public TerminalNode MOD_OPERATOR() { return getToken(MultiQueryMySQLParser.MOD_OPERATOR, 0); }
		public TerminalNode DIV_SYMBOL() { return getToken(MultiQueryMySQLParser.DIV_SYMBOL, 0); }
		public TerminalNode MOD_SYMBOL() { return getToken(MultiQueryMySQLParser.MOD_SYMBOL, 0); }
		public TerminalNode PLUS_OPERATOR() { return getToken(MultiQueryMySQLParser.PLUS_OPERATOR, 0); }
		public TerminalNode MINUS_OPERATOR() { return getToken(MultiQueryMySQLParser.MINUS_OPERATOR, 0); }
		public TerminalNode SHIFT_LEFT_OPERATOR() { return getToken(MultiQueryMySQLParser.SHIFT_LEFT_OPERATOR, 0); }
		public TerminalNode SHIFT_RIGHT_OPERATOR() { return getToken(MultiQueryMySQLParser.SHIFT_RIGHT_OPERATOR, 0); }
		public TerminalNode BITWISE_AND_OPERATOR() { return getToken(MultiQueryMySQLParser.BITWISE_AND_OPERATOR, 0); }
		public TerminalNode BITWISE_OR_OPERATOR() { return getToken(MultiQueryMySQLParser.BITWISE_OR_OPERATOR, 0); }
		public TerminalNode INTERVAL_SYMBOL() { return getToken(MultiQueryMySQLParser.INTERVAL_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public IntervalContext interval() {
			return getRuleContext(IntervalContext.class,0);
		}
		public BitExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitExpr; }
	}

	public final BitExprContext bitExpr() throws RecognitionException {
		return bitExpr(0);
	}

	private BitExprContext bitExpr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		BitExprContext _localctx = new BitExprContext(_ctx, _parentState);
		BitExprContext _prevctx = _localctx;
		int _startState = 678;
		enterRecursionRule(_localctx, 678, RULE_bitExpr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5523);
			simpleExpr(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(5551);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,705,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(5549);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,704,_ctx) ) {
					case 1:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(5525);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(5526);
						((BitExprContext)_localctx).op = match(BITWISE_XOR_OPERATOR);
						setState(5527);
						bitExpr(8);
						}
						break;
					case 2:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(5528);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(5529);
						((BitExprContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (MULT_OPERATOR - 393)) | (1L << (DIV_OPERATOR - 393)) | (1L << (MOD_OPERATOR - 393)))) != 0) || _la==DIV_SYMBOL || _la==MOD_SYMBOL) ) {
							((BitExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5530);
						bitExpr(7);
						}
						break;
					case 3:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(5531);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(5532);
						((BitExprContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==PLUS_OPERATOR || _la==MINUS_OPERATOR) ) {
							((BitExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5533);
						bitExpr(6);
						}
						break;
					case 4:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(5534);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(5535);
						((BitExprContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==SHIFT_LEFT_OPERATOR || _la==SHIFT_RIGHT_OPERATOR) ) {
							((BitExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5536);
						bitExpr(4);
						}
						break;
					case 5:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(5537);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(5538);
						((BitExprContext)_localctx).op = match(BITWISE_AND_OPERATOR);
						setState(5539);
						bitExpr(3);
						}
						break;
					case 6:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(5540);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(5541);
						((BitExprContext)_localctx).op = match(BITWISE_OR_OPERATOR);
						setState(5542);
						bitExpr(2);
						}
						break;
					case 7:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(5543);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(5544);
						((BitExprContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==PLUS_OPERATOR || _la==MINUS_OPERATOR) ) {
							((BitExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5545);
						match(INTERVAL_SYMBOL);
						setState(5546);
						expr(0);
						setState(5547);
						interval();
						}
						break;
					}
					} 
				}
				setState(5553);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,705,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class SimpleExprContext extends ParserRuleContext {
		public SimpleExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleExpr; }
	 
		public SimpleExprContext() { }
		public void copyFrom(SimpleExprContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SimpleExprConvertContext extends SimpleExprContext {
		public TerminalNode CONVERT_SYMBOL() { return getToken(MultiQueryMySQLParser.CONVERT_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, 0); }
		public CastTypeContext castType() {
			return getRuleContext(CastTypeContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprConvertContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleExprVariableContext extends SimpleExprContext {
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public SimpleExprVariableContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleExprCastContext extends SimpleExprContext {
		public TerminalNode CAST_SYMBOL() { return getToken(MultiQueryMySQLParser.CAST_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode AS_SYMBOL() { return getToken(MultiQueryMySQLParser.AS_SYMBOL, 0); }
		public CastTypeContext castType() {
			return getRuleContext(CastTypeContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ArrayCastContext arrayCast() {
			return getRuleContext(ArrayCastContext.class,0);
		}
		public SimpleExprCastContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleExprUnaryContext extends SimpleExprContext {
		public Token op;
		public SimpleExprContext simpleExpr() {
			return getRuleContext(SimpleExprContext.class,0);
		}
		public TerminalNode PLUS_OPERATOR() { return getToken(MultiQueryMySQLParser.PLUS_OPERATOR, 0); }
		public TerminalNode MINUS_OPERATOR() { return getToken(MultiQueryMySQLParser.MINUS_OPERATOR, 0); }
		public TerminalNode BITWISE_NOT_OPERATOR() { return getToken(MultiQueryMySQLParser.BITWISE_NOT_OPERATOR, 0); }
		public SimpleExprUnaryContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleExprOdbcContext extends SimpleExprContext {
		public TerminalNode OPEN_CURLY_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_CURLY_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode CLOSE_CURLY_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_CURLY_SYMBOL, 0); }
		public SimpleExprOdbcContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleExprRuntimeFunctionContext extends SimpleExprContext {
		public RuntimeFunctionCallContext runtimeFunctionCall() {
			return getRuleContext(RuntimeFunctionCallContext.class,0);
		}
		public SimpleExprRuntimeFunctionContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleExprFunctionContext extends SimpleExprContext {
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public SimpleExprFunctionContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleExprCollateContext extends SimpleExprContext {
		public SimpleExprContext simpleExpr() {
			return getRuleContext(SimpleExprContext.class,0);
		}
		public TerminalNode COLLATE_SYMBOL() { return getToken(MultiQueryMySQLParser.COLLATE_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public SimpleExprCollateContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleExprMatchContext extends SimpleExprContext {
		public TerminalNode MATCH_SYMBOL() { return getToken(MultiQueryMySQLParser.MATCH_SYMBOL, 0); }
		public IdentListArgContext identListArg() {
			return getRuleContext(IdentListArgContext.class,0);
		}
		public TerminalNode AGAINST_SYMBOL() { return getToken(MultiQueryMySQLParser.AGAINST_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return getRuleContext(BitExprContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public FulltextOptionsContext fulltextOptions() {
			return getRuleContext(FulltextOptionsContext.class,0);
		}
		public SimpleExprMatchContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleExprWindowingFunctionContext extends SimpleExprContext {
		public WindowFunctionCallContext windowFunctionCall() {
			return getRuleContext(WindowFunctionCallContext.class,0);
		}
		public SimpleExprWindowingFunctionContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleExprBinaryContext extends SimpleExprContext {
		public TerminalNode BINARY_SYMBOL() { return getToken(MultiQueryMySQLParser.BINARY_SYMBOL, 0); }
		public SimpleExprContext simpleExpr() {
			return getRuleContext(SimpleExprContext.class,0);
		}
		public SimpleExprBinaryContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleExprColumnRefContext extends SimpleExprContext {
		public ColumnRefContext columnRef() {
			return getRuleContext(ColumnRefContext.class,0);
		}
		public JsonOperatorContext jsonOperator() {
			return getRuleContext(JsonOperatorContext.class,0);
		}
		public SimpleExprColumnRefContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleExprParamMarkerContext extends SimpleExprContext {
		public TerminalNode PARAM_MARKER() { return getToken(MultiQueryMySQLParser.PARAM_MARKER, 0); }
		public SimpleExprParamMarkerContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleExprSumContext extends SimpleExprContext {
		public SumExprContext sumExpr() {
			return getRuleContext(SumExprContext.class,0);
		}
		public SimpleExprSumContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleExprConvertUsingContext extends SimpleExprContext {
		public TerminalNode CONVERT_SYMBOL() { return getToken(MultiQueryMySQLParser.CONVERT_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode USING_SYMBOL() { return getToken(MultiQueryMySQLParser.USING_SYMBOL, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprConvertUsingContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleExprSubQueryContext extends SimpleExprContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode EXISTS_SYMBOL() { return getToken(MultiQueryMySQLParser.EXISTS_SYMBOL, 0); }
		public SimpleExprSubQueryContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleExprGroupingOperationContext extends SimpleExprContext {
		public GroupingOperationContext groupingOperation() {
			return getRuleContext(GroupingOperationContext.class,0);
		}
		public SimpleExprGroupingOperationContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleExprNotContext extends SimpleExprContext {
		public Not2RuleContext not2Rule() {
			return getRuleContext(Not2RuleContext.class,0);
		}
		public SimpleExprContext simpleExpr() {
			return getRuleContext(SimpleExprContext.class,0);
		}
		public SimpleExprNotContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleExprValuesContext extends SimpleExprContext {
		public TerminalNode VALUES_SYMBOL() { return getToken(MultiQueryMySQLParser.VALUES_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public SimpleIdentifierContext simpleIdentifier() {
			return getRuleContext(SimpleIdentifierContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprValuesContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleExprDefaultContext extends SimpleExprContext {
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public SimpleIdentifierContext simpleIdentifier() {
			return getRuleContext(SimpleIdentifierContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprDefaultContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleExprListContext extends SimpleExprContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode ROW_SYMBOL() { return getToken(MultiQueryMySQLParser.ROW_SYMBOL, 0); }
		public SimpleExprListContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleExprIntervalContext extends SimpleExprContext {
		public TerminalNode INTERVAL_SYMBOL() { return getToken(MultiQueryMySQLParser.INTERVAL_SYMBOL, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public IntervalContext interval() {
			return getRuleContext(IntervalContext.class,0);
		}
		public TerminalNode PLUS_OPERATOR() { return getToken(MultiQueryMySQLParser.PLUS_OPERATOR, 0); }
		public SimpleExprIntervalContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleExprCaseContext extends SimpleExprContext {
		public TerminalNode CASE_SYMBOL() { return getToken(MultiQueryMySQLParser.CASE_SYMBOL, 0); }
		public TerminalNode END_SYMBOL() { return getToken(MultiQueryMySQLParser.END_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public List<WhenExpressionContext> whenExpression() {
			return getRuleContexts(WhenExpressionContext.class);
		}
		public WhenExpressionContext whenExpression(int i) {
			return getRuleContext(WhenExpressionContext.class,i);
		}
		public List<ThenExpressionContext> thenExpression() {
			return getRuleContexts(ThenExpressionContext.class);
		}
		public ThenExpressionContext thenExpression(int i) {
			return getRuleContext(ThenExpressionContext.class,i);
		}
		public ElseExpressionContext elseExpression() {
			return getRuleContext(ElseExpressionContext.class,0);
		}
		public SimpleExprCaseContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleExprConcatContext extends SimpleExprContext {
		public List<SimpleExprContext> simpleExpr() {
			return getRuleContexts(SimpleExprContext.class);
		}
		public SimpleExprContext simpleExpr(int i) {
			return getRuleContext(SimpleExprContext.class,i);
		}
		public TerminalNode CONCAT_PIPES_SYMBOL() { return getToken(MultiQueryMySQLParser.CONCAT_PIPES_SYMBOL, 0); }
		public SimpleExprConcatContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleExprLiteralContext extends SimpleExprContext {
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public SimpleExprLiteralContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}

	public final SimpleExprContext simpleExpr() throws RecognitionException {
		return simpleExpr(0);
	}

	private SimpleExprContext simpleExpr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		SimpleExprContext _localctx = new SimpleExprContext(_ctx, _parentState);
		SimpleExprContext _prevctx = _localctx;
		int _startState = 680;
		enterRecursionRule(_localctx, 680, RULE_simpleExpr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5658);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,714,_ctx) ) {
			case 1:
				{
				_localctx = new SimpleExprVariableContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(5555);
				variable();
				}
				break;
			case 2:
				{
				_localctx = new SimpleExprColumnRefContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5556);
				columnRef();
				setState(5558);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,706,_ctx) ) {
				case 1:
					{
					setState(5557);
					jsonOperator();
					}
					break;
				}
				}
				break;
			case 3:
				{
				_localctx = new SimpleExprRuntimeFunctionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5560);
				runtimeFunctionCall();
				}
				break;
			case 4:
				{
				_localctx = new SimpleExprFunctionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5561);
				functionCall();
				}
				break;
			case 5:
				{
				_localctx = new SimpleExprLiteralContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5562);
				literal();
				}
				break;
			case 6:
				{
				_localctx = new SimpleExprParamMarkerContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5563);
				match(PARAM_MARKER);
				}
				break;
			case 7:
				{
				_localctx = new SimpleExprSumContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5564);
				sumExpr();
				}
				break;
			case 8:
				{
				_localctx = new SimpleExprGroupingOperationContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5565);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(5566);
				groupingOperation();
				}
				break;
			case 9:
				{
				_localctx = new SimpleExprWindowingFunctionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5567);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(5568);
				windowFunctionCall();
				}
				break;
			case 10:
				{
				_localctx = new SimpleExprUnaryContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5569);
				((SimpleExprUnaryContext)_localctx).op = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 391)) & ~0x3f) == 0 && ((1L << (_la - 391)) & ((1L << (PLUS_OPERATOR - 391)) | (1L << (MINUS_OPERATOR - 391)) | (1L << (BITWISE_NOT_OPERATOR - 391)))) != 0)) ) {
					((SimpleExprUnaryContext)_localctx).op = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5570);
				simpleExpr(14);
				}
				break;
			case 11:
				{
				_localctx = new SimpleExprNotContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5571);
				not2Rule();
				setState(5572);
				simpleExpr(13);
				}
				break;
			case 12:
				{
				_localctx = new SimpleExprListContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5575);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROW_SYMBOL) {
					{
					setState(5574);
					match(ROW_SYMBOL);
					}
				}

				setState(5577);
				match(OPEN_PAR_SYMBOL);
				setState(5578);
				exprList();
				setState(5579);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 13:
				{
				_localctx = new SimpleExprSubQueryContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5582);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXISTS_SYMBOL) {
					{
					setState(5581);
					match(EXISTS_SYMBOL);
					}
				}

				setState(5584);
				subquery();
				}
				break;
			case 14:
				{
				_localctx = new SimpleExprOdbcContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5585);
				match(OPEN_CURLY_SYMBOL);
				setState(5586);
				identifier();
				setState(5587);
				expr(0);
				setState(5588);
				match(CLOSE_CURLY_SYMBOL);
				}
				break;
			case 15:
				{
				_localctx = new SimpleExprMatchContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5590);
				match(MATCH_SYMBOL);
				setState(5591);
				identListArg();
				setState(5592);
				match(AGAINST_SYMBOL);
				setState(5593);
				match(OPEN_PAR_SYMBOL);
				setState(5594);
				bitExpr(0);
				setState(5596);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN_SYMBOL || _la==WITH_SYMBOL) {
					{
					setState(5595);
					fulltextOptions();
					}
				}

				setState(5598);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 16:
				{
				_localctx = new SimpleExprBinaryContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5600);
				match(BINARY_SYMBOL);
				setState(5601);
				simpleExpr(8);
				}
				break;
			case 17:
				{
				_localctx = new SimpleExprCastContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5602);
				match(CAST_SYMBOL);
				setState(5603);
				match(OPEN_PAR_SYMBOL);
				setState(5604);
				expr(0);
				setState(5605);
				match(AS_SYMBOL);
				setState(5606);
				castType();
				setState(5608);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,710,_ctx) ) {
				case 1:
					{
					setState(5607);
					arrayCast();
					}
					break;
				}
				setState(5610);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 18:
				{
				_localctx = new SimpleExprCaseContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5612);
				match(CASE_SYMBOL);
				setState(5614);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,711,_ctx) ) {
				case 1:
					{
					setState(5613);
					expr(0);
					}
					break;
				}
				setState(5619); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5616);
					whenExpression();
					setState(5617);
					thenExpression();
					}
					}
					setState(5621); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN_SYMBOL );
				setState(5624);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE_SYMBOL) {
					{
					setState(5623);
					elseExpression();
					}
				}

				setState(5626);
				match(END_SYMBOL);
				}
				break;
			case 19:
				{
				_localctx = new SimpleExprConvertContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5628);
				match(CONVERT_SYMBOL);
				setState(5629);
				match(OPEN_PAR_SYMBOL);
				setState(5630);
				expr(0);
				setState(5631);
				match(COMMA_SYMBOL);
				setState(5632);
				castType();
				setState(5633);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 20:
				{
				_localctx = new SimpleExprConvertUsingContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5635);
				match(CONVERT_SYMBOL);
				setState(5636);
				match(OPEN_PAR_SYMBOL);
				setState(5637);
				expr(0);
				setState(5638);
				match(USING_SYMBOL);
				setState(5639);
				charsetName();
				setState(5640);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 21:
				{
				_localctx = new SimpleExprDefaultContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5642);
				match(DEFAULT_SYMBOL);
				setState(5643);
				match(OPEN_PAR_SYMBOL);
				setState(5644);
				simpleIdentifier();
				setState(5645);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 22:
				{
				_localctx = new SimpleExprValuesContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5647);
				match(VALUES_SYMBOL);
				setState(5648);
				match(OPEN_PAR_SYMBOL);
				setState(5649);
				simpleIdentifier();
				setState(5650);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 23:
				{
				_localctx = new SimpleExprIntervalContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5652);
				match(INTERVAL_SYMBOL);
				setState(5653);
				expr(0);
				setState(5654);
				interval();
				setState(5655);
				match(PLUS_OPERATOR);
				setState(5656);
				expr(0);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(5668);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,716,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(5666);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,715,_ctx) ) {
					case 1:
						{
						_localctx = new SimpleExprConcatContext(new SimpleExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_simpleExpr);
						setState(5660);
						if (!(precpred(_ctx, 15))) throw new FailedPredicateException(this, "precpred(_ctx, 15)");
						setState(5661);
						match(CONCAT_PIPES_SYMBOL);
						setState(5662);
						simpleExpr(16);
						}
						break;
					case 2:
						{
						_localctx = new SimpleExprCollateContext(new SimpleExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_simpleExpr);
						setState(5663);
						if (!(precpred(_ctx, 21))) throw new FailedPredicateException(this, "precpred(_ctx, 21)");
						setState(5664);
						match(COLLATE_SYMBOL);
						setState(5665);
						textOrIdentifier();
						}
						break;
					}
					} 
				}
				setState(5670);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,716,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ArrayCastContext extends ParserRuleContext {
		public TerminalNode ARRAY_SYMBOL() { return getToken(MultiQueryMySQLParser.ARRAY_SYMBOL, 0); }
		public ArrayCastContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arrayCast; }
	}

	public final ArrayCastContext arrayCast() throws RecognitionException {
		ArrayCastContext _localctx = new ArrayCastContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_arrayCast);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5671);
			if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
			setState(5672);
			match(ARRAY_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonOperatorContext extends ParserRuleContext {
		public TerminalNode JSON_SEPARATOR_SYMBOL() { return getToken(MultiQueryMySQLParser.JSON_SEPARATOR_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode JSON_UNQUOTED_SEPARATOR_SYMBOL() { return getToken(MultiQueryMySQLParser.JSON_UNQUOTED_SEPARATOR_SYMBOL, 0); }
		public JsonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonOperator; }
	}

	public final JsonOperatorContext jsonOperator() throws RecognitionException {
		JsonOperatorContext _localctx = new JsonOperatorContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_jsonOperator);
		try {
			setState(5680);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,717,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5674);
				if (!(serverVersion >= 50708)) throw new FailedPredicateException(this, "serverVersion >= 50708");
				setState(5675);
				match(JSON_SEPARATOR_SYMBOL);
				setState(5676);
				textStringLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5677);
				if (!(serverVersion >= 50713)) throw new FailedPredicateException(this, "serverVersion >= 50713");
				setState(5678);
				match(JSON_UNQUOTED_SEPARATOR_SYMBOL);
				setState(5679);
				textStringLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SumExprContext extends ParserRuleContext {
		public Token name;
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public InSumExprContext inSumExpr() {
			return getRuleContext(InSumExprContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode AVG_SYMBOL() { return getToken(MultiQueryMySQLParser.AVG_SYMBOL, 0); }
		public TerminalNode DISTINCT_SYMBOL() { return getToken(MultiQueryMySQLParser.DISTINCT_SYMBOL, 0); }
		public WindowingClauseContext windowingClause() {
			return getRuleContext(WindowingClauseContext.class,0);
		}
		public TerminalNode BIT_AND_SYMBOL() { return getToken(MultiQueryMySQLParser.BIT_AND_SYMBOL, 0); }
		public TerminalNode BIT_OR_SYMBOL() { return getToken(MultiQueryMySQLParser.BIT_OR_SYMBOL, 0); }
		public TerminalNode BIT_XOR_SYMBOL() { return getToken(MultiQueryMySQLParser.BIT_XOR_SYMBOL, 0); }
		public JsonFunctionContext jsonFunction() {
			return getRuleContext(JsonFunctionContext.class,0);
		}
		public TerminalNode MULT_OPERATOR() { return getToken(MultiQueryMySQLParser.MULT_OPERATOR, 0); }
		public TerminalNode COUNT_SYMBOL() { return getToken(MultiQueryMySQLParser.COUNT_SYMBOL, 0); }
		public TerminalNode ALL_SYMBOL() { return getToken(MultiQueryMySQLParser.ALL_SYMBOL, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode MIN_SYMBOL() { return getToken(MultiQueryMySQLParser.MIN_SYMBOL, 0); }
		public TerminalNode MAX_SYMBOL() { return getToken(MultiQueryMySQLParser.MAX_SYMBOL, 0); }
		public TerminalNode STD_SYMBOL() { return getToken(MultiQueryMySQLParser.STD_SYMBOL, 0); }
		public TerminalNode VARIANCE_SYMBOL() { return getToken(MultiQueryMySQLParser.VARIANCE_SYMBOL, 0); }
		public TerminalNode STDDEV_SAMP_SYMBOL() { return getToken(MultiQueryMySQLParser.STDDEV_SAMP_SYMBOL, 0); }
		public TerminalNode VAR_SAMP_SYMBOL() { return getToken(MultiQueryMySQLParser.VAR_SAMP_SYMBOL, 0); }
		public TerminalNode SUM_SYMBOL() { return getToken(MultiQueryMySQLParser.SUM_SYMBOL, 0); }
		public TerminalNode GROUP_CONCAT_SYMBOL() { return getToken(MultiQueryMySQLParser.GROUP_CONCAT_SYMBOL, 0); }
		public OrderClauseContext orderClause() {
			return getRuleContext(OrderClauseContext.class,0);
		}
		public TerminalNode SEPARATOR_SYMBOL() { return getToken(MultiQueryMySQLParser.SEPARATOR_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public SumExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sumExpr; }
	}

	public final SumExprContext sumExpr() throws RecognitionException {
		SumExprContext _localctx = new SumExprContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_sumExpr);
		int _la;
		try {
			setState(5813);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,740,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5682);
				((SumExprContext)_localctx).name = match(AVG_SYMBOL);
				setState(5683);
				match(OPEN_PAR_SYMBOL);
				setState(5685);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,718,_ctx) ) {
				case 1:
					{
					setState(5684);
					match(DISTINCT_SYMBOL);
					}
					break;
				}
				setState(5687);
				inSumExpr();
				setState(5688);
				match(CLOSE_PAR_SYMBOL);
				setState(5691);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,719,_ctx) ) {
				case 1:
					{
					setState(5689);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5690);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5693);
				((SumExprContext)_localctx).name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 439)) & ~0x3f) == 0 && ((1L << (_la - 439)) & ((1L << (BIT_AND_SYMBOL - 439)) | (1L << (BIT_OR_SYMBOL - 439)) | (1L << (BIT_XOR_SYMBOL - 439)))) != 0)) ) {
					((SumExprContext)_localctx).name = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5694);
				match(OPEN_PAR_SYMBOL);
				setState(5695);
				inSumExpr();
				setState(5696);
				match(CLOSE_PAR_SYMBOL);
				setState(5699);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,720,_ctx) ) {
				case 1:
					{
					setState(5697);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5698);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5701);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(5702);
				jsonFunction();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5703);
				((SumExprContext)_localctx).name = match(COUNT_SYMBOL);
				setState(5704);
				match(OPEN_PAR_SYMBOL);
				setState(5706);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL_SYMBOL) {
					{
					setState(5705);
					match(ALL_SYMBOL);
					}
				}

				setState(5708);
				match(MULT_OPERATOR);
				setState(5709);
				match(CLOSE_PAR_SYMBOL);
				setState(5712);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,722,_ctx) ) {
				case 1:
					{
					setState(5710);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5711);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5714);
				((SumExprContext)_localctx).name = match(COUNT_SYMBOL);
				setState(5715);
				match(OPEN_PAR_SYMBOL);
				setState(5723);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,724,_ctx) ) {
				case 1:
					{
					setState(5717);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL_SYMBOL) {
						{
						setState(5716);
						match(ALL_SYMBOL);
						}
					}

					setState(5719);
					match(MULT_OPERATOR);
					}
					break;
				case 2:
					{
					setState(5720);
					inSumExpr();
					}
					break;
				case 3:
					{
					setState(5721);
					match(DISTINCT_SYMBOL);
					setState(5722);
					exprList();
					}
					break;
				}
				setState(5725);
				match(CLOSE_PAR_SYMBOL);
				setState(5728);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,725,_ctx) ) {
				case 1:
					{
					setState(5726);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5727);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5730);
				((SumExprContext)_localctx).name = match(MIN_SYMBOL);
				setState(5731);
				match(OPEN_PAR_SYMBOL);
				setState(5733);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,726,_ctx) ) {
				case 1:
					{
					setState(5732);
					match(DISTINCT_SYMBOL);
					}
					break;
				}
				setState(5735);
				inSumExpr();
				setState(5736);
				match(CLOSE_PAR_SYMBOL);
				setState(5739);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,727,_ctx) ) {
				case 1:
					{
					setState(5737);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5738);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5741);
				((SumExprContext)_localctx).name = match(MAX_SYMBOL);
				setState(5742);
				match(OPEN_PAR_SYMBOL);
				setState(5744);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,728,_ctx) ) {
				case 1:
					{
					setState(5743);
					match(DISTINCT_SYMBOL);
					}
					break;
				}
				setState(5746);
				inSumExpr();
				setState(5747);
				match(CLOSE_PAR_SYMBOL);
				setState(5750);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,729,_ctx) ) {
				case 1:
					{
					setState(5748);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5749);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5752);
				((SumExprContext)_localctx).name = match(STD_SYMBOL);
				setState(5753);
				match(OPEN_PAR_SYMBOL);
				setState(5754);
				inSumExpr();
				setState(5755);
				match(CLOSE_PAR_SYMBOL);
				setState(5758);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,730,_ctx) ) {
				case 1:
					{
					setState(5756);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5757);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5760);
				((SumExprContext)_localctx).name = match(VARIANCE_SYMBOL);
				setState(5761);
				match(OPEN_PAR_SYMBOL);
				setState(5762);
				inSumExpr();
				setState(5763);
				match(CLOSE_PAR_SYMBOL);
				setState(5766);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,731,_ctx) ) {
				case 1:
					{
					setState(5764);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5765);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5768);
				((SumExprContext)_localctx).name = match(STDDEV_SAMP_SYMBOL);
				setState(5769);
				match(OPEN_PAR_SYMBOL);
				setState(5770);
				inSumExpr();
				setState(5771);
				match(CLOSE_PAR_SYMBOL);
				setState(5774);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,732,_ctx) ) {
				case 1:
					{
					setState(5772);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5773);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5776);
				((SumExprContext)_localctx).name = match(VAR_SAMP_SYMBOL);
				setState(5777);
				match(OPEN_PAR_SYMBOL);
				setState(5778);
				inSumExpr();
				setState(5779);
				match(CLOSE_PAR_SYMBOL);
				setState(5782);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,733,_ctx) ) {
				case 1:
					{
					setState(5780);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5781);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5784);
				((SumExprContext)_localctx).name = match(SUM_SYMBOL);
				setState(5785);
				match(OPEN_PAR_SYMBOL);
				setState(5787);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,734,_ctx) ) {
				case 1:
					{
					setState(5786);
					match(DISTINCT_SYMBOL);
					}
					break;
				}
				setState(5789);
				inSumExpr();
				setState(5790);
				match(CLOSE_PAR_SYMBOL);
				setState(5793);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,735,_ctx) ) {
				case 1:
					{
					setState(5791);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5792);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5795);
				((SumExprContext)_localctx).name = match(GROUP_CONCAT_SYMBOL);
				setState(5796);
				match(OPEN_PAR_SYMBOL);
				setState(5798);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,736,_ctx) ) {
				case 1:
					{
					setState(5797);
					match(DISTINCT_SYMBOL);
					}
					break;
				}
				setState(5800);
				exprList();
				setState(5802);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER_SYMBOL) {
					{
					setState(5801);
					orderClause();
					}
				}

				setState(5806);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEPARATOR_SYMBOL) {
					{
					setState(5804);
					match(SEPARATOR_SYMBOL);
					setState(5805);
					textString();
					}
				}

				setState(5808);
				match(CLOSE_PAR_SYMBOL);
				setState(5811);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,739,_ctx) ) {
				case 1:
					{
					setState(5809);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5810);
					windowingClause();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupingOperationContext extends ParserRuleContext {
		public TerminalNode GROUPING_SYMBOL() { return getToken(MultiQueryMySQLParser.GROUPING_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public GroupingOperationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingOperation; }
	}

	public final GroupingOperationContext groupingOperation() throws RecognitionException {
		GroupingOperationContext _localctx = new GroupingOperationContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_groupingOperation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5815);
			match(GROUPING_SYMBOL);
			setState(5816);
			match(OPEN_PAR_SYMBOL);
			setState(5817);
			exprList();
			setState(5818);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFunctionCallContext extends ParserRuleContext {
		public ParenthesesContext parentheses() {
			return getRuleContext(ParenthesesContext.class,0);
		}
		public WindowingClauseContext windowingClause() {
			return getRuleContext(WindowingClauseContext.class,0);
		}
		public TerminalNode ROW_NUMBER_SYMBOL() { return getToken(MultiQueryMySQLParser.ROW_NUMBER_SYMBOL, 0); }
		public TerminalNode RANK_SYMBOL() { return getToken(MultiQueryMySQLParser.RANK_SYMBOL, 0); }
		public TerminalNode DENSE_RANK_SYMBOL() { return getToken(MultiQueryMySQLParser.DENSE_RANK_SYMBOL, 0); }
		public TerminalNode CUME_DIST_SYMBOL() { return getToken(MultiQueryMySQLParser.CUME_DIST_SYMBOL, 0); }
		public TerminalNode PERCENT_RANK_SYMBOL() { return getToken(MultiQueryMySQLParser.PERCENT_RANK_SYMBOL, 0); }
		public TerminalNode NTILE_SYMBOL() { return getToken(MultiQueryMySQLParser.NTILE_SYMBOL, 0); }
		public SimpleExprWithParenthesesContext simpleExprWithParentheses() {
			return getRuleContext(SimpleExprWithParenthesesContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode LEAD_SYMBOL() { return getToken(MultiQueryMySQLParser.LEAD_SYMBOL, 0); }
		public TerminalNode LAG_SYMBOL() { return getToken(MultiQueryMySQLParser.LAG_SYMBOL, 0); }
		public LeadLagInfoContext leadLagInfo() {
			return getRuleContext(LeadLagInfoContext.class,0);
		}
		public NullTreatmentContext nullTreatment() {
			return getRuleContext(NullTreatmentContext.class,0);
		}
		public ExprWithParenthesesContext exprWithParentheses() {
			return getRuleContext(ExprWithParenthesesContext.class,0);
		}
		public TerminalNode FIRST_VALUE_SYMBOL() { return getToken(MultiQueryMySQLParser.FIRST_VALUE_SYMBOL, 0); }
		public TerminalNode LAST_VALUE_SYMBOL() { return getToken(MultiQueryMySQLParser.LAST_VALUE_SYMBOL, 0); }
		public TerminalNode NTH_VALUE_SYMBOL() { return getToken(MultiQueryMySQLParser.NTH_VALUE_SYMBOL, 0); }
		public TerminalNode COMMA_SYMBOL() { return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, 0); }
		public SimpleExprContext simpleExpr() {
			return getRuleContext(SimpleExprContext.class,0);
		}
		public TerminalNode FROM_SYMBOL() { return getToken(MultiQueryMySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode FIRST_SYMBOL() { return getToken(MultiQueryMySQLParser.FIRST_SYMBOL, 0); }
		public TerminalNode LAST_SYMBOL() { return getToken(MultiQueryMySQLParser.LAST_SYMBOL, 0); }
		public WindowFunctionCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFunctionCall; }
	}

	public final WindowFunctionCallContext windowFunctionCall() throws RecognitionException {
		WindowFunctionCallContext _localctx = new WindowFunctionCallContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_windowFunctionCall);
		int _la;
		try {
			setState(5862);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CUME_DIST_SYMBOL:
			case DENSE_RANK_SYMBOL:
			case PERCENT_RANK_SYMBOL:
			case RANK_SYMBOL:
			case ROW_NUMBER_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5820);
				_la = _input.LA(1);
				if ( !(((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CUME_DIST_SYMBOL - 708)) | (1L << (DENSE_RANK_SYMBOL - 708)) | (1L << (PERCENT_RANK_SYMBOL - 708)) | (1L << (RANK_SYMBOL - 708)) | (1L << (ROW_NUMBER_SYMBOL - 708)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5821);
				parentheses();
				setState(5822);
				windowingClause();
				}
				break;
			case NTILE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5824);
				match(NTILE_SYMBOL);
				setState(5825);
				simpleExprWithParentheses();
				setState(5826);
				windowingClause();
				}
				break;
			case LAG_SYMBOL:
			case LEAD_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5828);
				_la = _input.LA(1);
				if ( !(_la==LAG_SYMBOL || _la==LEAD_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5829);
				match(OPEN_PAR_SYMBOL);
				setState(5830);
				expr(0);
				setState(5832);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(5831);
					leadLagInfo();
					}
				}

				setState(5834);
				match(CLOSE_PAR_SYMBOL);
				setState(5836);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE_SYMBOL || _la==RESPECT_SYMBOL) {
					{
					setState(5835);
					nullTreatment();
					}
				}

				setState(5838);
				windowingClause();
				}
				break;
			case FIRST_VALUE_SYMBOL:
			case LAST_VALUE_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(5840);
				_la = _input.LA(1);
				if ( !(_la==FIRST_VALUE_SYMBOL || _la==LAST_VALUE_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5841);
				exprWithParentheses();
				setState(5843);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE_SYMBOL || _la==RESPECT_SYMBOL) {
					{
					setState(5842);
					nullTreatment();
					}
				}

				setState(5845);
				windowingClause();
				}
				break;
			case NTH_VALUE_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(5847);
				match(NTH_VALUE_SYMBOL);
				setState(5848);
				match(OPEN_PAR_SYMBOL);
				setState(5849);
				expr(0);
				setState(5850);
				match(COMMA_SYMBOL);
				setState(5851);
				simpleExpr(0);
				setState(5852);
				match(CLOSE_PAR_SYMBOL);
				setState(5855);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM_SYMBOL) {
					{
					setState(5853);
					match(FROM_SYMBOL);
					setState(5854);
					_la = _input.LA(1);
					if ( !(_la==FIRST_SYMBOL || _la==LAST_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5858);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE_SYMBOL || _la==RESPECT_SYMBOL) {
					{
					setState(5857);
					nullTreatment();
					}
				}

				setState(5860);
				windowingClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowingClauseContext extends ParserRuleContext {
		public TerminalNode OVER_SYMBOL() { return getToken(MultiQueryMySQLParser.OVER_SYMBOL, 0); }
		public WindowNameContext windowName() {
			return getRuleContext(WindowNameContext.class,0);
		}
		public WindowSpecContext windowSpec() {
			return getRuleContext(WindowSpecContext.class,0);
		}
		public WindowingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowingClause; }
	}

	public final WindowingClauseContext windowingClause() throws RecognitionException {
		WindowingClauseContext _localctx = new WindowingClauseContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_windowingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5864);
			match(OVER_SYMBOL);
			setState(5867);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,747,_ctx) ) {
			case 1:
				{
				setState(5865);
				windowName();
				}
				break;
			case 2:
				{
				setState(5866);
				windowSpec();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LeadLagInfoContext extends ParserRuleContext {
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public Ulonglong_numberContext ulonglong_number() {
			return getRuleContext(Ulonglong_numberContext.class,0);
		}
		public TerminalNode PARAM_MARKER() { return getToken(MultiQueryMySQLParser.PARAM_MARKER, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public LeadLagInfoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_leadLagInfo; }
	}

	public final LeadLagInfoContext leadLagInfo() throws RecognitionException {
		LeadLagInfoContext _localctx = new LeadLagInfoContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_leadLagInfo);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5869);
			match(COMMA_SYMBOL);
			setState(5872);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
				{
				setState(5870);
				ulonglong_number();
				}
				break;
			case PARAM_MARKER:
				{
				setState(5871);
				match(PARAM_MARKER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5876);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA_SYMBOL) {
				{
				setState(5874);
				match(COMMA_SYMBOL);
				setState(5875);
				expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullTreatmentContext extends ParserRuleContext {
		public TerminalNode NULLS_SYMBOL() { return getToken(MultiQueryMySQLParser.NULLS_SYMBOL, 0); }
		public TerminalNode RESPECT_SYMBOL() { return getToken(MultiQueryMySQLParser.RESPECT_SYMBOL, 0); }
		public TerminalNode IGNORE_SYMBOL() { return getToken(MultiQueryMySQLParser.IGNORE_SYMBOL, 0); }
		public NullTreatmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullTreatment; }
	}

	public final NullTreatmentContext nullTreatment() throws RecognitionException {
		NullTreatmentContext _localctx = new NullTreatmentContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_nullTreatment);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5878);
			_la = _input.LA(1);
			if ( !(_la==IGNORE_SYMBOL || _la==RESPECT_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5879);
			match(NULLS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonFunctionContext extends ParserRuleContext {
		public TerminalNode JSON_ARRAYAGG_SYMBOL() { return getToken(MultiQueryMySQLParser.JSON_ARRAYAGG_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<InSumExprContext> inSumExpr() {
			return getRuleContexts(InSumExprContext.class);
		}
		public InSumExprContext inSumExpr(int i) {
			return getRuleContext(InSumExprContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public WindowingClauseContext windowingClause() {
			return getRuleContext(WindowingClauseContext.class,0);
		}
		public TerminalNode JSON_OBJECTAGG_SYMBOL() { return getToken(MultiQueryMySQLParser.JSON_OBJECTAGG_SYMBOL, 0); }
		public TerminalNode COMMA_SYMBOL() { return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, 0); }
		public JsonFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonFunction; }
	}

	public final JsonFunctionContext jsonFunction() throws RecognitionException {
		JsonFunctionContext _localctx = new JsonFunctionContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_jsonFunction);
		try {
			setState(5897);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JSON_ARRAYAGG_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5881);
				match(JSON_ARRAYAGG_SYMBOL);
				setState(5882);
				match(OPEN_PAR_SYMBOL);
				setState(5883);
				inSumExpr();
				setState(5884);
				match(CLOSE_PAR_SYMBOL);
				setState(5886);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,750,_ctx) ) {
				case 1:
					{
					setState(5885);
					windowingClause();
					}
					break;
				}
				}
				break;
			case JSON_OBJECTAGG_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5888);
				match(JSON_OBJECTAGG_SYMBOL);
				setState(5889);
				match(OPEN_PAR_SYMBOL);
				setState(5890);
				inSumExpr();
				setState(5891);
				match(COMMA_SYMBOL);
				setState(5892);
				inSumExpr();
				setState(5893);
				match(CLOSE_PAR_SYMBOL);
				setState(5895);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,751,_ctx) ) {
				case 1:
					{
					setState(5894);
					windowingClause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InSumExprContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode ALL_SYMBOL() { return getToken(MultiQueryMySQLParser.ALL_SYMBOL, 0); }
		public InSumExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inSumExpr; }
	}

	public final InSumExprContext inSumExpr() throws RecognitionException {
		InSumExprContext _localctx = new InSumExprContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_inSumExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5900);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,753,_ctx) ) {
			case 1:
				{
				setState(5899);
				match(ALL_SYMBOL);
				}
				break;
			}
			setState(5902);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentListArgContext extends ParserRuleContext {
		public IdentListContext identList() {
			return getRuleContext(IdentListContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public IdentListArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identListArg; }
	}

	public final IdentListArgContext identListArg() throws RecognitionException {
		IdentListArgContext _localctx = new IdentListArgContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_identListArg);
		try {
			setState(5909);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,754,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5904);
				identList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5905);
				match(OPEN_PAR_SYMBOL);
				setState(5906);
				identList();
				setState(5907);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentListContext extends ParserRuleContext {
		public List<SimpleIdentifierContext> simpleIdentifier() {
			return getRuleContexts(SimpleIdentifierContext.class);
		}
		public SimpleIdentifierContext simpleIdentifier(int i) {
			return getRuleContext(SimpleIdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public IdentListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identList; }
	}

	public final IdentListContext identList() throws RecognitionException {
		IdentListContext _localctx = new IdentListContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_identList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5911);
			simpleIdentifier();
			setState(5916);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(5912);
				match(COMMA_SYMBOL);
				setState(5913);
				simpleIdentifier();
				}
				}
				setState(5918);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FulltextOptionsContext extends ParserRuleContext {
		public TerminalNode IN_SYMBOL() { return getToken(MultiQueryMySQLParser.IN_SYMBOL, 0); }
		public TerminalNode BOOLEAN_SYMBOL() { return getToken(MultiQueryMySQLParser.BOOLEAN_SYMBOL, 0); }
		public TerminalNode MODE_SYMBOL() { return getToken(MultiQueryMySQLParser.MODE_SYMBOL, 0); }
		public TerminalNode NATURAL_SYMBOL() { return getToken(MultiQueryMySQLParser.NATURAL_SYMBOL, 0); }
		public TerminalNode LANGUAGE_SYMBOL() { return getToken(MultiQueryMySQLParser.LANGUAGE_SYMBOL, 0); }
		public TerminalNode WITH_SYMBOL() { return getToken(MultiQueryMySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode QUERY_SYMBOL() { return getToken(MultiQueryMySQLParser.QUERY_SYMBOL, 0); }
		public TerminalNode EXPANSION_SYMBOL() { return getToken(MultiQueryMySQLParser.EXPANSION_SYMBOL, 0); }
		public FulltextOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fulltextOptions; }
	}

	public final FulltextOptionsContext fulltextOptions() throws RecognitionException {
		FulltextOptionsContext _localctx = new FulltextOptionsContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_fulltextOptions);
		int _la;
		try {
			setState(5934);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,757,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5919);
				match(IN_SYMBOL);
				setState(5920);
				match(BOOLEAN_SYMBOL);
				setState(5921);
				match(MODE_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5922);
				match(IN_SYMBOL);
				setState(5923);
				match(NATURAL_SYMBOL);
				setState(5924);
				match(LANGUAGE_SYMBOL);
				setState(5925);
				match(MODE_SYMBOL);
				setState(5929);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH_SYMBOL) {
					{
					setState(5926);
					match(WITH_SYMBOL);
					setState(5927);
					match(QUERY_SYMBOL);
					setState(5928);
					match(EXPANSION_SYMBOL);
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5931);
				match(WITH_SYMBOL);
				setState(5932);
				match(QUERY_SYMBOL);
				setState(5933);
				match(EXPANSION_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RuntimeFunctionCallContext extends ParserRuleContext {
		public Token name;
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode CHAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CHAR_SYMBOL, 0); }
		public TerminalNode USING_SYMBOL() { return getToken(MultiQueryMySQLParser.USING_SYMBOL, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode CURRENT_USER_SYMBOL() { return getToken(MultiQueryMySQLParser.CURRENT_USER_SYMBOL, 0); }
		public ParenthesesContext parentheses() {
			return getRuleContext(ParenthesesContext.class,0);
		}
		public ExprWithParenthesesContext exprWithParentheses() {
			return getRuleContext(ExprWithParenthesesContext.class,0);
		}
		public TerminalNode DATE_SYMBOL() { return getToken(MultiQueryMySQLParser.DATE_SYMBOL, 0); }
		public TerminalNode DAY_SYMBOL() { return getToken(MultiQueryMySQLParser.DAY_SYMBOL, 0); }
		public TerminalNode HOUR_SYMBOL() { return getToken(MultiQueryMySQLParser.HOUR_SYMBOL, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public TerminalNode INSERT_SYMBOL() { return getToken(MultiQueryMySQLParser.INSERT_SYMBOL, 0); }
		public TerminalNode INTERVAL_SYMBOL() { return getToken(MultiQueryMySQLParser.INTERVAL_SYMBOL, 0); }
		public TerminalNode LEFT_SYMBOL() { return getToken(MultiQueryMySQLParser.LEFT_SYMBOL, 0); }
		public TerminalNode MINUTE_SYMBOL() { return getToken(MultiQueryMySQLParser.MINUTE_SYMBOL, 0); }
		public TerminalNode MONTH_SYMBOL() { return getToken(MultiQueryMySQLParser.MONTH_SYMBOL, 0); }
		public TerminalNode RIGHT_SYMBOL() { return getToken(MultiQueryMySQLParser.RIGHT_SYMBOL, 0); }
		public TerminalNode SECOND_SYMBOL() { return getToken(MultiQueryMySQLParser.SECOND_SYMBOL, 0); }
		public TerminalNode TIME_SYMBOL() { return getToken(MultiQueryMySQLParser.TIME_SYMBOL, 0); }
		public TerminalNode TIMESTAMP_SYMBOL() { return getToken(MultiQueryMySQLParser.TIMESTAMP_SYMBOL, 0); }
		public TrimFunctionContext trimFunction() {
			return getRuleContext(TrimFunctionContext.class,0);
		}
		public TerminalNode USER_SYMBOL() { return getToken(MultiQueryMySQLParser.USER_SYMBOL, 0); }
		public TerminalNode VALUES_SYMBOL() { return getToken(MultiQueryMySQLParser.VALUES_SYMBOL, 0); }
		public TerminalNode YEAR_SYMBOL() { return getToken(MultiQueryMySQLParser.YEAR_SYMBOL, 0); }
		public TerminalNode ADDDATE_SYMBOL() { return getToken(MultiQueryMySQLParser.ADDDATE_SYMBOL, 0); }
		public TerminalNode SUBDATE_SYMBOL() { return getToken(MultiQueryMySQLParser.SUBDATE_SYMBOL, 0); }
		public IntervalContext interval() {
			return getRuleContext(IntervalContext.class,0);
		}
		public TerminalNode CURDATE_SYMBOL() { return getToken(MultiQueryMySQLParser.CURDATE_SYMBOL, 0); }
		public TerminalNode CURTIME_SYMBOL() { return getToken(MultiQueryMySQLParser.CURTIME_SYMBOL, 0); }
		public TimeFunctionParametersContext timeFunctionParameters() {
			return getRuleContext(TimeFunctionParametersContext.class,0);
		}
		public TerminalNode DATE_ADD_SYMBOL() { return getToken(MultiQueryMySQLParser.DATE_ADD_SYMBOL, 0); }
		public TerminalNode DATE_SUB_SYMBOL() { return getToken(MultiQueryMySQLParser.DATE_SUB_SYMBOL, 0); }
		public TerminalNode FROM_SYMBOL() { return getToken(MultiQueryMySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode EXTRACT_SYMBOL() { return getToken(MultiQueryMySQLParser.EXTRACT_SYMBOL, 0); }
		public DateTimeTtypeContext dateTimeTtype() {
			return getRuleContext(DateTimeTtypeContext.class,0);
		}
		public TerminalNode GET_FORMAT_SYMBOL() { return getToken(MultiQueryMySQLParser.GET_FORMAT_SYMBOL, 0); }
		public TerminalNode NOW_SYMBOL() { return getToken(MultiQueryMySQLParser.NOW_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return getRuleContext(BitExprContext.class,0);
		}
		public TerminalNode IN_SYMBOL() { return getToken(MultiQueryMySQLParser.IN_SYMBOL, 0); }
		public TerminalNode POSITION_SYMBOL() { return getToken(MultiQueryMySQLParser.POSITION_SYMBOL, 0); }
		public SubstringFunctionContext substringFunction() {
			return getRuleContext(SubstringFunctionContext.class,0);
		}
		public TerminalNode SYSDATE_SYMBOL() { return getToken(MultiQueryMySQLParser.SYSDATE_SYMBOL, 0); }
		public IntervalTimeStampContext intervalTimeStamp() {
			return getRuleContext(IntervalTimeStampContext.class,0);
		}
		public TerminalNode TIMESTAMP_ADD_SYMBOL() { return getToken(MultiQueryMySQLParser.TIMESTAMP_ADD_SYMBOL, 0); }
		public TerminalNode TIMESTAMP_DIFF_SYMBOL() { return getToken(MultiQueryMySQLParser.TIMESTAMP_DIFF_SYMBOL, 0); }
		public TerminalNode UTC_DATE_SYMBOL() { return getToken(MultiQueryMySQLParser.UTC_DATE_SYMBOL, 0); }
		public TerminalNode UTC_TIME_SYMBOL() { return getToken(MultiQueryMySQLParser.UTC_TIME_SYMBOL, 0); }
		public TerminalNode UTC_TIMESTAMP_SYMBOL() { return getToken(MultiQueryMySQLParser.UTC_TIMESTAMP_SYMBOL, 0); }
		public TerminalNode ASCII_SYMBOL() { return getToken(MultiQueryMySQLParser.ASCII_SYMBOL, 0); }
		public TerminalNode CHARSET_SYMBOL() { return getToken(MultiQueryMySQLParser.CHARSET_SYMBOL, 0); }
		public ExprListWithParenthesesContext exprListWithParentheses() {
			return getRuleContext(ExprListWithParenthesesContext.class,0);
		}
		public TerminalNode COALESCE_SYMBOL() { return getToken(MultiQueryMySQLParser.COALESCE_SYMBOL, 0); }
		public TerminalNode COLLATION_SYMBOL() { return getToken(MultiQueryMySQLParser.COLLATION_SYMBOL, 0); }
		public TerminalNode DATABASE_SYMBOL() { return getToken(MultiQueryMySQLParser.DATABASE_SYMBOL, 0); }
		public TerminalNode IF_SYMBOL() { return getToken(MultiQueryMySQLParser.IF_SYMBOL, 0); }
		public TerminalNode FORMAT_SYMBOL() { return getToken(MultiQueryMySQLParser.FORMAT_SYMBOL, 0); }
		public TerminalNode MICROSECOND_SYMBOL() { return getToken(MultiQueryMySQLParser.MICROSECOND_SYMBOL, 0); }
		public TerminalNode MOD_SYMBOL() { return getToken(MultiQueryMySQLParser.MOD_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode OLD_PASSWORD_SYMBOL() { return getToken(MultiQueryMySQLParser.OLD_PASSWORD_SYMBOL, 0); }
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MultiQueryMySQLParser.PASSWORD_SYMBOL, 0); }
		public TerminalNode QUARTER_SYMBOL() { return getToken(MultiQueryMySQLParser.QUARTER_SYMBOL, 0); }
		public TerminalNode REPEAT_SYMBOL() { return getToken(MultiQueryMySQLParser.REPEAT_SYMBOL, 0); }
		public TerminalNode REPLACE_SYMBOL() { return getToken(MultiQueryMySQLParser.REPLACE_SYMBOL, 0); }
		public TerminalNode REVERSE_SYMBOL() { return getToken(MultiQueryMySQLParser.REVERSE_SYMBOL, 0); }
		public TerminalNode ROW_COUNT_SYMBOL() { return getToken(MultiQueryMySQLParser.ROW_COUNT_SYMBOL, 0); }
		public TerminalNode TRUNCATE_SYMBOL() { return getToken(MultiQueryMySQLParser.TRUNCATE_SYMBOL, 0); }
		public TerminalNode WEEK_SYMBOL() { return getToken(MultiQueryMySQLParser.WEEK_SYMBOL, 0); }
		public TerminalNode WEIGHT_STRING_SYMBOL() { return getToken(MultiQueryMySQLParser.WEIGHT_STRING_SYMBOL, 0); }
		public TerminalNode AS_SYMBOL() { return getToken(MultiQueryMySQLParser.AS_SYMBOL, 0); }
		public TerminalNode BINARY_SYMBOL() { return getToken(MultiQueryMySQLParser.BINARY_SYMBOL, 0); }
		public WsNumCodepointsContext wsNumCodepoints() {
			return getRuleContext(WsNumCodepointsContext.class,0);
		}
		public List<Ulong_numberContext> ulong_number() {
			return getRuleContexts(Ulong_numberContext.class);
		}
		public Ulong_numberContext ulong_number(int i) {
			return getRuleContext(Ulong_numberContext.class,i);
		}
		public WeightStringLevelsContext weightStringLevels() {
			return getRuleContext(WeightStringLevelsContext.class,0);
		}
		public GeometryFunctionContext geometryFunction() {
			return getRuleContext(GeometryFunctionContext.class,0);
		}
		public RuntimeFunctionCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_runtimeFunctionCall; }
	}

	public final RuntimeFunctionCallContext runtimeFunctionCall() throws RecognitionException {
		RuntimeFunctionCallContext _localctx = new RuntimeFunctionCallContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_runtimeFunctionCall);
		int _la;
		try {
			setState(6209);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,775,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5936);
				((RuntimeFunctionCallContext)_localctx).name = match(CHAR_SYMBOL);
				setState(5937);
				match(OPEN_PAR_SYMBOL);
				setState(5938);
				exprList();
				setState(5941);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING_SYMBOL) {
					{
					setState(5939);
					match(USING_SYMBOL);
					setState(5940);
					charsetName();
					}
				}

				setState(5943);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5945);
				((RuntimeFunctionCallContext)_localctx).name = match(CURRENT_USER_SYMBOL);
				setState(5947);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,759,_ctx) ) {
				case 1:
					{
					setState(5946);
					parentheses();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5949);
				((RuntimeFunctionCallContext)_localctx).name = match(DATE_SYMBOL);
				setState(5950);
				exprWithParentheses();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5951);
				((RuntimeFunctionCallContext)_localctx).name = match(DAY_SYMBOL);
				setState(5952);
				exprWithParentheses();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5953);
				((RuntimeFunctionCallContext)_localctx).name = match(HOUR_SYMBOL);
				setState(5954);
				exprWithParentheses();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5955);
				((RuntimeFunctionCallContext)_localctx).name = match(INSERT_SYMBOL);
				setState(5956);
				match(OPEN_PAR_SYMBOL);
				setState(5957);
				expr(0);
				setState(5958);
				match(COMMA_SYMBOL);
				setState(5959);
				expr(0);
				setState(5960);
				match(COMMA_SYMBOL);
				setState(5961);
				expr(0);
				setState(5962);
				match(COMMA_SYMBOL);
				setState(5963);
				expr(0);
				setState(5964);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5966);
				((RuntimeFunctionCallContext)_localctx).name = match(INTERVAL_SYMBOL);
				setState(5967);
				match(OPEN_PAR_SYMBOL);
				setState(5968);
				expr(0);
				setState(5971); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5969);
					match(COMMA_SYMBOL);
					setState(5970);
					expr(0);
					}
					}
					setState(5973); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA_SYMBOL );
				setState(5975);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5977);
				((RuntimeFunctionCallContext)_localctx).name = match(LEFT_SYMBOL);
				setState(5978);
				match(OPEN_PAR_SYMBOL);
				setState(5979);
				expr(0);
				setState(5980);
				match(COMMA_SYMBOL);
				setState(5981);
				expr(0);
				setState(5982);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5984);
				((RuntimeFunctionCallContext)_localctx).name = match(MINUTE_SYMBOL);
				setState(5985);
				exprWithParentheses();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5986);
				((RuntimeFunctionCallContext)_localctx).name = match(MONTH_SYMBOL);
				setState(5987);
				exprWithParentheses();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5988);
				((RuntimeFunctionCallContext)_localctx).name = match(RIGHT_SYMBOL);
				setState(5989);
				match(OPEN_PAR_SYMBOL);
				setState(5990);
				expr(0);
				setState(5991);
				match(COMMA_SYMBOL);
				setState(5992);
				expr(0);
				setState(5993);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5995);
				((RuntimeFunctionCallContext)_localctx).name = match(SECOND_SYMBOL);
				setState(5996);
				exprWithParentheses();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5997);
				((RuntimeFunctionCallContext)_localctx).name = match(TIME_SYMBOL);
				setState(5998);
				exprWithParentheses();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5999);
				((RuntimeFunctionCallContext)_localctx).name = match(TIMESTAMP_SYMBOL);
				setState(6000);
				match(OPEN_PAR_SYMBOL);
				setState(6001);
				expr(0);
				setState(6004);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(6002);
					match(COMMA_SYMBOL);
					setState(6003);
					expr(0);
					}
				}

				setState(6006);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(6008);
				trimFunction();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(6009);
				((RuntimeFunctionCallContext)_localctx).name = match(USER_SYMBOL);
				setState(6010);
				parentheses();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(6011);
				((RuntimeFunctionCallContext)_localctx).name = match(VALUES_SYMBOL);
				setState(6012);
				exprWithParentheses();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(6013);
				((RuntimeFunctionCallContext)_localctx).name = match(YEAR_SYMBOL);
				setState(6014);
				exprWithParentheses();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(6015);
				((RuntimeFunctionCallContext)_localctx).name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ADDDATE_SYMBOL || _la==SUBDATE_SYMBOL) ) {
					((RuntimeFunctionCallContext)_localctx).name = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6016);
				match(OPEN_PAR_SYMBOL);
				setState(6017);
				expr(0);
				setState(6018);
				match(COMMA_SYMBOL);
				setState(6024);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,762,_ctx) ) {
				case 1:
					{
					setState(6019);
					expr(0);
					}
					break;
				case 2:
					{
					setState(6020);
					match(INTERVAL_SYMBOL);
					setState(6021);
					expr(0);
					setState(6022);
					interval();
					}
					break;
				}
				setState(6026);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(6028);
				((RuntimeFunctionCallContext)_localctx).name = match(CURDATE_SYMBOL);
				setState(6030);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,763,_ctx) ) {
				case 1:
					{
					setState(6029);
					parentheses();
					}
					break;
				}
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(6032);
				((RuntimeFunctionCallContext)_localctx).name = match(CURTIME_SYMBOL);
				setState(6034);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,764,_ctx) ) {
				case 1:
					{
					setState(6033);
					timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(6036);
				((RuntimeFunctionCallContext)_localctx).name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATE_ADD_SYMBOL || _la==DATE_SUB_SYMBOL) ) {
					((RuntimeFunctionCallContext)_localctx).name = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6037);
				match(OPEN_PAR_SYMBOL);
				setState(6038);
				expr(0);
				setState(6039);
				match(COMMA_SYMBOL);
				setState(6040);
				match(INTERVAL_SYMBOL);
				setState(6041);
				expr(0);
				setState(6042);
				interval();
				setState(6043);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(6045);
				((RuntimeFunctionCallContext)_localctx).name = match(EXTRACT_SYMBOL);
				setState(6046);
				match(OPEN_PAR_SYMBOL);
				setState(6047);
				interval();
				setState(6048);
				match(FROM_SYMBOL);
				setState(6049);
				expr(0);
				setState(6050);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(6052);
				((RuntimeFunctionCallContext)_localctx).name = match(GET_FORMAT_SYMBOL);
				setState(6053);
				match(OPEN_PAR_SYMBOL);
				setState(6054);
				dateTimeTtype();
				setState(6055);
				match(COMMA_SYMBOL);
				setState(6056);
				expr(0);
				setState(6057);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(6059);
				((RuntimeFunctionCallContext)_localctx).name = match(NOW_SYMBOL);
				setState(6061);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,765,_ctx) ) {
				case 1:
					{
					setState(6060);
					timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(6063);
				((RuntimeFunctionCallContext)_localctx).name = match(POSITION_SYMBOL);
				setState(6064);
				match(OPEN_PAR_SYMBOL);
				setState(6065);
				bitExpr(0);
				setState(6066);
				match(IN_SYMBOL);
				setState(6067);
				expr(0);
				setState(6068);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(6070);
				substringFunction();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(6071);
				((RuntimeFunctionCallContext)_localctx).name = match(SYSDATE_SYMBOL);
				setState(6073);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,766,_ctx) ) {
				case 1:
					{
					setState(6072);
					timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(6075);
				((RuntimeFunctionCallContext)_localctx).name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==TIMESTAMP_ADD_SYMBOL || _la==TIMESTAMP_DIFF_SYMBOL) ) {
					((RuntimeFunctionCallContext)_localctx).name = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6076);
				match(OPEN_PAR_SYMBOL);
				setState(6077);
				intervalTimeStamp();
				setState(6078);
				match(COMMA_SYMBOL);
				setState(6079);
				expr(0);
				setState(6080);
				match(COMMA_SYMBOL);
				setState(6081);
				expr(0);
				setState(6082);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(6084);
				((RuntimeFunctionCallContext)_localctx).name = match(UTC_DATE_SYMBOL);
				setState(6086);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,767,_ctx) ) {
				case 1:
					{
					setState(6085);
					parentheses();
					}
					break;
				}
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(6088);
				((RuntimeFunctionCallContext)_localctx).name = match(UTC_TIME_SYMBOL);
				setState(6090);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,768,_ctx) ) {
				case 1:
					{
					setState(6089);
					timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(6092);
				((RuntimeFunctionCallContext)_localctx).name = match(UTC_TIMESTAMP_SYMBOL);
				setState(6094);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,769,_ctx) ) {
				case 1:
					{
					setState(6093);
					timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(6096);
				((RuntimeFunctionCallContext)_localctx).name = match(ASCII_SYMBOL);
				setState(6097);
				exprWithParentheses();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(6098);
				((RuntimeFunctionCallContext)_localctx).name = match(CHARSET_SYMBOL);
				setState(6099);
				exprWithParentheses();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(6100);
				((RuntimeFunctionCallContext)_localctx).name = match(COALESCE_SYMBOL);
				setState(6101);
				exprListWithParentheses();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(6102);
				((RuntimeFunctionCallContext)_localctx).name = match(COLLATION_SYMBOL);
				setState(6103);
				exprWithParentheses();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(6104);
				((RuntimeFunctionCallContext)_localctx).name = match(DATABASE_SYMBOL);
				setState(6105);
				parentheses();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(6106);
				((RuntimeFunctionCallContext)_localctx).name = match(IF_SYMBOL);
				setState(6107);
				match(OPEN_PAR_SYMBOL);
				setState(6108);
				expr(0);
				setState(6109);
				match(COMMA_SYMBOL);
				setState(6110);
				expr(0);
				setState(6111);
				match(COMMA_SYMBOL);
				setState(6112);
				expr(0);
				setState(6113);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(6115);
				((RuntimeFunctionCallContext)_localctx).name = match(FORMAT_SYMBOL);
				setState(6116);
				match(OPEN_PAR_SYMBOL);
				setState(6117);
				expr(0);
				setState(6118);
				match(COMMA_SYMBOL);
				setState(6119);
				expr(0);
				setState(6122);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(6120);
					match(COMMA_SYMBOL);
					setState(6121);
					expr(0);
					}
				}

				setState(6124);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(6126);
				((RuntimeFunctionCallContext)_localctx).name = match(MICROSECOND_SYMBOL);
				setState(6127);
				exprWithParentheses();
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(6128);
				((RuntimeFunctionCallContext)_localctx).name = match(MOD_SYMBOL);
				setState(6129);
				match(OPEN_PAR_SYMBOL);
				setState(6130);
				expr(0);
				setState(6131);
				match(COMMA_SYMBOL);
				setState(6132);
				expr(0);
				setState(6133);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(6135);
				if (!(serverVersion < 50607)) throw new FailedPredicateException(this, "serverVersion < 50607");
				setState(6136);
				((RuntimeFunctionCallContext)_localctx).name = match(OLD_PASSWORD_SYMBOL);
				setState(6137);
				match(OPEN_PAR_SYMBOL);
				setState(6138);
				textLiteral();
				setState(6139);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(6141);
				if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
				setState(6142);
				((RuntimeFunctionCallContext)_localctx).name = match(PASSWORD_SYMBOL);
				setState(6143);
				exprWithParentheses();
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(6144);
				((RuntimeFunctionCallContext)_localctx).name = match(QUARTER_SYMBOL);
				setState(6145);
				exprWithParentheses();
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(6146);
				((RuntimeFunctionCallContext)_localctx).name = match(REPEAT_SYMBOL);
				setState(6147);
				match(OPEN_PAR_SYMBOL);
				setState(6148);
				expr(0);
				setState(6149);
				match(COMMA_SYMBOL);
				setState(6150);
				expr(0);
				setState(6151);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(6153);
				((RuntimeFunctionCallContext)_localctx).name = match(REPLACE_SYMBOL);
				setState(6154);
				match(OPEN_PAR_SYMBOL);
				setState(6155);
				expr(0);
				setState(6156);
				match(COMMA_SYMBOL);
				setState(6157);
				expr(0);
				setState(6158);
				match(COMMA_SYMBOL);
				setState(6159);
				expr(0);
				setState(6160);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(6162);
				((RuntimeFunctionCallContext)_localctx).name = match(REVERSE_SYMBOL);
				setState(6163);
				exprWithParentheses();
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(6164);
				((RuntimeFunctionCallContext)_localctx).name = match(ROW_COUNT_SYMBOL);
				setState(6165);
				parentheses();
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(6166);
				((RuntimeFunctionCallContext)_localctx).name = match(TRUNCATE_SYMBOL);
				setState(6167);
				match(OPEN_PAR_SYMBOL);
				setState(6168);
				expr(0);
				setState(6169);
				match(COMMA_SYMBOL);
				setState(6170);
				expr(0);
				setState(6171);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(6173);
				((RuntimeFunctionCallContext)_localctx).name = match(WEEK_SYMBOL);
				setState(6174);
				match(OPEN_PAR_SYMBOL);
				setState(6175);
				expr(0);
				setState(6178);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(6176);
					match(COMMA_SYMBOL);
					setState(6177);
					expr(0);
					}
				}

				setState(6180);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(6182);
				((RuntimeFunctionCallContext)_localctx).name = match(WEIGHT_STRING_SYMBOL);
				setState(6183);
				match(OPEN_PAR_SYMBOL);
				setState(6184);
				expr(0);
				setState(6204);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,774,_ctx) ) {
				case 1:
					{
					setState(6188);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,772,_ctx) ) {
					case 1:
						{
						setState(6185);
						match(AS_SYMBOL);
						setState(6186);
						match(CHAR_SYMBOL);
						setState(6187);
						wsNumCodepoints();
						}
						break;
					}
					setState(6192);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,773,_ctx) ) {
					case 1:
						{
						setState(6190);
						if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
						setState(6191);
						weightStringLevels();
						}
						break;
					}
					}
					break;
				case 2:
					{
					setState(6194);
					match(AS_SYMBOL);
					setState(6195);
					match(BINARY_SYMBOL);
					setState(6196);
					wsNumCodepoints();
					}
					break;
				case 3:
					{
					setState(6197);
					match(COMMA_SYMBOL);
					setState(6198);
					ulong_number();
					setState(6199);
					match(COMMA_SYMBOL);
					setState(6200);
					ulong_number();
					setState(6201);
					match(COMMA_SYMBOL);
					setState(6202);
					ulong_number();
					}
					break;
				}
				setState(6206);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(6208);
				geometryFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GeometryFunctionContext extends ParserRuleContext {
		public Token name;
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode CONTAINS_SYMBOL() { return getToken(MultiQueryMySQLParser.CONTAINS_SYMBOL, 0); }
		public TerminalNode GEOMETRYCOLLECTION_SYMBOL() { return getToken(MultiQueryMySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public ExprListWithParenthesesContext exprListWithParentheses() {
			return getRuleContext(ExprListWithParenthesesContext.class,0);
		}
		public TerminalNode LINESTRING_SYMBOL() { return getToken(MultiQueryMySQLParser.LINESTRING_SYMBOL, 0); }
		public TerminalNode MULTILINESTRING_SYMBOL() { return getToken(MultiQueryMySQLParser.MULTILINESTRING_SYMBOL, 0); }
		public TerminalNode MULTIPOINT_SYMBOL() { return getToken(MultiQueryMySQLParser.MULTIPOINT_SYMBOL, 0); }
		public TerminalNode MULTIPOLYGON_SYMBOL() { return getToken(MultiQueryMySQLParser.MULTIPOLYGON_SYMBOL, 0); }
		public TerminalNode POINT_SYMBOL() { return getToken(MultiQueryMySQLParser.POINT_SYMBOL, 0); }
		public TerminalNode POLYGON_SYMBOL() { return getToken(MultiQueryMySQLParser.POLYGON_SYMBOL, 0); }
		public GeometryFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_geometryFunction; }
	}

	public final GeometryFunctionContext geometryFunction() throws RecognitionException {
		GeometryFunctionContext _localctx = new GeometryFunctionContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_geometryFunction);
		try {
			setState(6242);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,777,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6211);
				if (!(serverVersion < 50706)) throw new FailedPredicateException(this, "serverVersion < 50706");
				setState(6212);
				((GeometryFunctionContext)_localctx).name = match(CONTAINS_SYMBOL);
				setState(6213);
				match(OPEN_PAR_SYMBOL);
				setState(6214);
				expr(0);
				setState(6215);
				match(COMMA_SYMBOL);
				setState(6216);
				expr(0);
				setState(6217);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6219);
				((GeometryFunctionContext)_localctx).name = match(GEOMETRYCOLLECTION_SYMBOL);
				setState(6220);
				match(OPEN_PAR_SYMBOL);
				setState(6222);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,776,_ctx) ) {
				case 1:
					{
					setState(6221);
					exprList();
					}
					break;
				}
				setState(6224);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6225);
				((GeometryFunctionContext)_localctx).name = match(LINESTRING_SYMBOL);
				setState(6226);
				exprListWithParentheses();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6227);
				((GeometryFunctionContext)_localctx).name = match(MULTILINESTRING_SYMBOL);
				setState(6228);
				exprListWithParentheses();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6229);
				((GeometryFunctionContext)_localctx).name = match(MULTIPOINT_SYMBOL);
				setState(6230);
				exprListWithParentheses();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6231);
				((GeometryFunctionContext)_localctx).name = match(MULTIPOLYGON_SYMBOL);
				setState(6232);
				exprListWithParentheses();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6233);
				((GeometryFunctionContext)_localctx).name = match(POINT_SYMBOL);
				setState(6234);
				match(OPEN_PAR_SYMBOL);
				setState(6235);
				expr(0);
				setState(6236);
				match(COMMA_SYMBOL);
				setState(6237);
				expr(0);
				setState(6238);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6240);
				((GeometryFunctionContext)_localctx).name = match(POLYGON_SYMBOL);
				setState(6241);
				exprListWithParentheses();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TimeFunctionParametersContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public FractionalPrecisionContext fractionalPrecision() {
			return getRuleContext(FractionalPrecisionContext.class,0);
		}
		public TimeFunctionParametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timeFunctionParameters; }
	}

	public final TimeFunctionParametersContext timeFunctionParameters() throws RecognitionException {
		TimeFunctionParametersContext _localctx = new TimeFunctionParametersContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_timeFunctionParameters);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6244);
			match(OPEN_PAR_SYMBOL);
			setState(6246);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,778,_ctx) ) {
			case 1:
				{
				setState(6245);
				fractionalPrecision();
				}
				break;
			}
			setState(6248);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FractionalPrecisionContext extends ParserRuleContext {
		public TerminalNode INT_NUMBER() { return getToken(MultiQueryMySQLParser.INT_NUMBER, 0); }
		public FractionalPrecisionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fractionalPrecision; }
	}

	public final FractionalPrecisionContext fractionalPrecision() throws RecognitionException {
		FractionalPrecisionContext _localctx = new FractionalPrecisionContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_fractionalPrecision);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6250);
			if (!(serverVersion >= 50604)) throw new FailedPredicateException(this, "serverVersion >= 50604");
			setState(6251);
			match(INT_NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WeightStringLevelsContext extends ParserRuleContext {
		public TerminalNode LEVEL_SYMBOL() { return getToken(MultiQueryMySQLParser.LEVEL_SYMBOL, 0); }
		public List<Real_ulong_numberContext> real_ulong_number() {
			return getRuleContexts(Real_ulong_numberContext.class);
		}
		public Real_ulong_numberContext real_ulong_number(int i) {
			return getRuleContext(Real_ulong_numberContext.class,i);
		}
		public TerminalNode MINUS_OPERATOR() { return getToken(MultiQueryMySQLParser.MINUS_OPERATOR, 0); }
		public List<WeightStringLevelListItemContext> weightStringLevelListItem() {
			return getRuleContexts(WeightStringLevelListItemContext.class);
		}
		public WeightStringLevelListItemContext weightStringLevelListItem(int i) {
			return getRuleContext(WeightStringLevelListItemContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public WeightStringLevelsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_weightStringLevels; }
	}

	public final WeightStringLevelsContext weightStringLevels() throws RecognitionException {
		WeightStringLevelsContext _localctx = new WeightStringLevelsContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_weightStringLevels);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6253);
			match(LEVEL_SYMBOL);
			setState(6266);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,780,_ctx) ) {
			case 1:
				{
				setState(6254);
				real_ulong_number();
				setState(6255);
				match(MINUS_OPERATOR);
				setState(6256);
				real_ulong_number();
				}
				break;
			case 2:
				{
				setState(6258);
				weightStringLevelListItem();
				setState(6263);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(6259);
					match(COMMA_SYMBOL);
					setState(6260);
					weightStringLevelListItem();
					}
					}
					setState(6265);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WeightStringLevelListItemContext extends ParserRuleContext {
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public TerminalNode REVERSE_SYMBOL() { return getToken(MultiQueryMySQLParser.REVERSE_SYMBOL, 0); }
		public TerminalNode ASC_SYMBOL() { return getToken(MultiQueryMySQLParser.ASC_SYMBOL, 0); }
		public TerminalNode DESC_SYMBOL() { return getToken(MultiQueryMySQLParser.DESC_SYMBOL, 0); }
		public WeightStringLevelListItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_weightStringLevelListItem; }
	}

	public final WeightStringLevelListItemContext weightStringLevelListItem() throws RecognitionException {
		WeightStringLevelListItemContext _localctx = new WeightStringLevelListItemContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_weightStringLevelListItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6268);
			real_ulong_number();
			setState(6274);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASC_SYMBOL:
			case DESC_SYMBOL:
				{
				setState(6269);
				_la = _input.LA(1);
				if ( !(_la==ASC_SYMBOL || _la==DESC_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6271);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REVERSE_SYMBOL) {
					{
					setState(6270);
					match(REVERSE_SYMBOL);
					}
				}

				}
				break;
			case REVERSE_SYMBOL:
				{
				setState(6273);
				match(REVERSE_SYMBOL);
				}
				break;
			case COMMA_SYMBOL:
			case CLOSE_PAR_SYMBOL:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DateTimeTtypeContext extends ParserRuleContext {
		public TerminalNode DATE_SYMBOL() { return getToken(MultiQueryMySQLParser.DATE_SYMBOL, 0); }
		public TerminalNode TIME_SYMBOL() { return getToken(MultiQueryMySQLParser.TIME_SYMBOL, 0); }
		public TerminalNode DATETIME_SYMBOL() { return getToken(MultiQueryMySQLParser.DATETIME_SYMBOL, 0); }
		public TerminalNode TIMESTAMP_SYMBOL() { return getToken(MultiQueryMySQLParser.TIMESTAMP_SYMBOL, 0); }
		public DateTimeTtypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dateTimeTtype; }
	}

	public final DateTimeTtypeContext dateTimeTtype() throws RecognitionException {
		DateTimeTtypeContext _localctx = new DateTimeTtypeContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_dateTimeTtype);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6276);
			_la = _input.LA(1);
			if ( !(_la==DATETIME_SYMBOL || _la==DATE_SYMBOL || _la==TIMESTAMP_SYMBOL || _la==TIME_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TrimFunctionContext extends ParserRuleContext {
		public TerminalNode TRIM_SYMBOL() { return getToken(MultiQueryMySQLParser.TRIM_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode LEADING_SYMBOL() { return getToken(MultiQueryMySQLParser.LEADING_SYMBOL, 0); }
		public TerminalNode FROM_SYMBOL() { return getToken(MultiQueryMySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode TRAILING_SYMBOL() { return getToken(MultiQueryMySQLParser.TRAILING_SYMBOL, 0); }
		public TerminalNode BOTH_SYMBOL() { return getToken(MultiQueryMySQLParser.BOTH_SYMBOL, 0); }
		public TrimFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trimFunction; }
	}

	public final TrimFunctionContext trimFunction() throws RecognitionException {
		TrimFunctionContext _localctx = new TrimFunctionContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_trimFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6278);
			match(TRIM_SYMBOL);
			setState(6279);
			match(OPEN_PAR_SYMBOL);
			setState(6303);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,787,_ctx) ) {
			case 1:
				{
				setState(6280);
				expr(0);
				setState(6283);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM_SYMBOL) {
					{
					setState(6281);
					match(FROM_SYMBOL);
					setState(6282);
					expr(0);
					}
				}

				}
				break;
			case 2:
				{
				setState(6285);
				match(LEADING_SYMBOL);
				setState(6287);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,784,_ctx) ) {
				case 1:
					{
					setState(6286);
					expr(0);
					}
					break;
				}
				setState(6289);
				match(FROM_SYMBOL);
				setState(6290);
				expr(0);
				}
				break;
			case 3:
				{
				setState(6291);
				match(TRAILING_SYMBOL);
				setState(6293);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,785,_ctx) ) {
				case 1:
					{
					setState(6292);
					expr(0);
					}
					break;
				}
				setState(6295);
				match(FROM_SYMBOL);
				setState(6296);
				expr(0);
				}
				break;
			case 4:
				{
				setState(6297);
				match(BOTH_SYMBOL);
				setState(6299);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,786,_ctx) ) {
				case 1:
					{
					setState(6298);
					expr(0);
					}
					break;
				}
				setState(6301);
				match(FROM_SYMBOL);
				setState(6302);
				expr(0);
				}
				break;
			}
			setState(6305);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubstringFunctionContext extends ParserRuleContext {
		public TerminalNode SUBSTRING_SYMBOL() { return getToken(MultiQueryMySQLParser.SUBSTRING_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public TerminalNode FROM_SYMBOL() { return getToken(MultiQueryMySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode FOR_SYMBOL() { return getToken(MultiQueryMySQLParser.FOR_SYMBOL, 0); }
		public SubstringFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_substringFunction; }
	}

	public final SubstringFunctionContext substringFunction() throws RecognitionException {
		SubstringFunctionContext _localctx = new SubstringFunctionContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_substringFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6307);
			match(SUBSTRING_SYMBOL);
			setState(6308);
			match(OPEN_PAR_SYMBOL);
			setState(6309);
			expr(0);
			setState(6322);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMMA_SYMBOL:
				{
				setState(6310);
				match(COMMA_SYMBOL);
				setState(6311);
				expr(0);
				setState(6314);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(6312);
					match(COMMA_SYMBOL);
					setState(6313);
					expr(0);
					}
				}

				}
				break;
			case FROM_SYMBOL:
				{
				setState(6316);
				match(FROM_SYMBOL);
				setState(6317);
				expr(0);
				setState(6320);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					setState(6318);
					match(FOR_SYMBOL);
					setState(6319);
					expr(0);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6324);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionCallContext extends ParserRuleContext {
		public PureIdentifierContext pureIdentifier() {
			return getRuleContext(PureIdentifierContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public UdfExprListContext udfExprList() {
			return getRuleContext(UdfExprListContext.class,0);
		}
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionCall; }
	}

	public final FunctionCallContext functionCall() throws RecognitionException {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_functionCall);
		try {
			setState(6340);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,793,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6326);
				pureIdentifier();
				setState(6327);
				match(OPEN_PAR_SYMBOL);
				setState(6329);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,791,_ctx) ) {
				case 1:
					{
					setState(6328);
					udfExprList();
					}
					break;
				}
				setState(6331);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6333);
				qualifiedIdentifier();
				setState(6334);
				match(OPEN_PAR_SYMBOL);
				setState(6336);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,792,_ctx) ) {
				case 1:
					{
					setState(6335);
					exprList();
					}
					break;
				}
				setState(6338);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UdfExprListContext extends ParserRuleContext {
		public List<UdfExprContext> udfExpr() {
			return getRuleContexts(UdfExprContext.class);
		}
		public UdfExprContext udfExpr(int i) {
			return getRuleContext(UdfExprContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public UdfExprListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_udfExprList; }
	}

	public final UdfExprListContext udfExprList() throws RecognitionException {
		UdfExprListContext _localctx = new UdfExprListContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_udfExprList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6342);
			udfExpr();
			setState(6347);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(6343);
				match(COMMA_SYMBOL);
				setState(6344);
				udfExpr();
				}
				}
				setState(6349);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UdfExprContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public SelectAliasContext selectAlias() {
			return getRuleContext(SelectAliasContext.class,0);
		}
		public UdfExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_udfExpr; }
	}

	public final UdfExprContext udfExpr() throws RecognitionException {
		UdfExprContext _localctx = new UdfExprContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_udfExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6350);
			expr(0);
			setState(6352);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,795,_ctx) ) {
			case 1:
				{
				setState(6351);
				selectAlias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableContext extends ParserRuleContext {
		public UserVariableContext userVariable() {
			return getRuleContext(UserVariableContext.class,0);
		}
		public TerminalNode ASSIGN_OPERATOR() { return getToken(MultiQueryMySQLParser.ASSIGN_OPERATOR, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public SystemVariableContext systemVariable() {
			return getRuleContext(SystemVariableContext.class,0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable; }
	}

	public final VariableContext variable() throws RecognitionException {
		VariableContext _localctx = new VariableContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_variable);
		try {
			setState(6360);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AT_SIGN_SYMBOL:
			case AT_TEXT_SUFFIX:
				enterOuterAlt(_localctx, 1);
				{
				setState(6354);
				userVariable();
				setState(6357);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,796,_ctx) ) {
				case 1:
					{
					setState(6355);
					match(ASSIGN_OPERATOR);
					setState(6356);
					expr(0);
					}
					break;
				}
				}
				break;
			case AT_AT_SIGN_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6359);
				systemVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserVariableContext extends ParserRuleContext {
		public TerminalNode AT_SIGN_SYMBOL() { return getToken(MultiQueryMySQLParser.AT_SIGN_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public TerminalNode AT_TEXT_SUFFIX() { return getToken(MultiQueryMySQLParser.AT_TEXT_SUFFIX, 0); }
		public UserVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userVariable; }
	}

	public final UserVariableContext userVariable() throws RecognitionException {
		UserVariableContext _localctx = new UserVariableContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_userVariable);
		try {
			setState(6365);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AT_SIGN_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6362);
				match(AT_SIGN_SYMBOL);
				setState(6363);
				textOrIdentifier();
				}
				break;
			case AT_TEXT_SUFFIX:
				enterOuterAlt(_localctx, 2);
				{
				setState(6364);
				match(AT_TEXT_SUFFIX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SystemVariableContext extends ParserRuleContext {
		public TerminalNode AT_AT_SIGN_SYMBOL() { return getToken(MultiQueryMySQLParser.AT_AT_SIGN_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public VarIdentTypeContext varIdentType() {
			return getRuleContext(VarIdentTypeContext.class,0);
		}
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public SystemVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_systemVariable; }
	}

	public final SystemVariableContext systemVariable() throws RecognitionException {
		SystemVariableContext _localctx = new SystemVariableContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_systemVariable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6367);
			match(AT_AT_SIGN_SYMBOL);
			setState(6369);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,799,_ctx) ) {
			case 1:
				{
				setState(6368);
				varIdentType();
				}
				break;
			}
			setState(6371);
			textOrIdentifier();
			setState(6373);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,800,_ctx) ) {
			case 1:
				{
				setState(6372);
				dotIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InternalVariableNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public LValueIdentifierContext lValueIdentifier() {
			return getRuleContext(LValueIdentifierContext.class,0);
		}
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
		public InternalVariableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_internalVariableName; }
	}

	public final InternalVariableNameContext internalVariableName() throws RecognitionException {
		InternalVariableNameContext _localctx = new InternalVariableNameContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_internalVariableName);
		int _la;
		try {
			setState(6389);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,804,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6385);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,803,_ctx) ) {
				case 1:
					{
					setState(6375);
					if (!(serverVersion < 80017)) throw new FailedPredicateException(this, "serverVersion < 80017");
					setState(6376);
					identifier();
					setState(6378);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT_SYMBOL) {
						{
						setState(6377);
						dotIdentifier();
						}
					}

					}
					break;
				case 2:
					{
					setState(6380);
					if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
					setState(6381);
					lValueIdentifier();
					setState(6383);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT_SYMBOL) {
						{
						setState(6382);
						dotIdentifier();
						}
					}

					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6387);
				match(DEFAULT_SYMBOL);
				setState(6388);
				dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhenExpressionContext extends ParserRuleContext {
		public TerminalNode WHEN_SYMBOL() { return getToken(MultiQueryMySQLParser.WHEN_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public WhenExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whenExpression; }
	}

	public final WhenExpressionContext whenExpression() throws RecognitionException {
		WhenExpressionContext _localctx = new WhenExpressionContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_whenExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6391);
			match(WHEN_SYMBOL);
			setState(6392);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ThenExpressionContext extends ParserRuleContext {
		public TerminalNode THEN_SYMBOL() { return getToken(MultiQueryMySQLParser.THEN_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ThenExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_thenExpression; }
	}

	public final ThenExpressionContext thenExpression() throws RecognitionException {
		ThenExpressionContext _localctx = new ThenExpressionContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_thenExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6394);
			match(THEN_SYMBOL);
			setState(6395);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ElseExpressionContext extends ParserRuleContext {
		public TerminalNode ELSE_SYMBOL() { return getToken(MultiQueryMySQLParser.ELSE_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ElseExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elseExpression; }
	}

	public final ElseExpressionContext elseExpression() throws RecognitionException {
		ElseExpressionContext _localctx = new ElseExpressionContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_elseExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6397);
			match(ELSE_SYMBOL);
			setState(6398);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CastTypeContext extends ParserRuleContext {
		public TerminalNode BINARY_SYMBOL() { return getToken(MultiQueryMySQLParser.BINARY_SYMBOL, 0); }
		public FieldLengthContext fieldLength() {
			return getRuleContext(FieldLengthContext.class,0);
		}
		public TerminalNode CHAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CHAR_SYMBOL, 0); }
		public CharsetWithOptBinaryContext charsetWithOptBinary() {
			return getRuleContext(CharsetWithOptBinaryContext.class,0);
		}
		public NcharContext nchar() {
			return getRuleContext(NcharContext.class,0);
		}
		public TerminalNode SIGNED_SYMBOL() { return getToken(MultiQueryMySQLParser.SIGNED_SYMBOL, 0); }
		public TerminalNode INT_SYMBOL() { return getToken(MultiQueryMySQLParser.INT_SYMBOL, 0); }
		public TerminalNode UNSIGNED_SYMBOL() { return getToken(MultiQueryMySQLParser.UNSIGNED_SYMBOL, 0); }
		public TerminalNode DATE_SYMBOL() { return getToken(MultiQueryMySQLParser.DATE_SYMBOL, 0); }
		public TerminalNode TIME_SYMBOL() { return getToken(MultiQueryMySQLParser.TIME_SYMBOL, 0); }
		public TypeDatetimePrecisionContext typeDatetimePrecision() {
			return getRuleContext(TypeDatetimePrecisionContext.class,0);
		}
		public TerminalNode DATETIME_SYMBOL() { return getToken(MultiQueryMySQLParser.DATETIME_SYMBOL, 0); }
		public TerminalNode DECIMAL_SYMBOL() { return getToken(MultiQueryMySQLParser.DECIMAL_SYMBOL, 0); }
		public FloatOptionsContext floatOptions() {
			return getRuleContext(FloatOptionsContext.class,0);
		}
		public TerminalNode JSON_SYMBOL() { return getToken(MultiQueryMySQLParser.JSON_SYMBOL, 0); }
		public RealTypeContext realType() {
			return getRuleContext(RealTypeContext.class,0);
		}
		public TerminalNode FLOAT_SYMBOL() { return getToken(MultiQueryMySQLParser.FLOAT_SYMBOL, 0); }
		public StandardFloatOptionsContext standardFloatOptions() {
			return getRuleContext(StandardFloatOptionsContext.class,0);
		}
		public CastTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_castType; }
	}

	public final CastTypeContext castType() throws RecognitionException {
		CastTypeContext _localctx = new CastTypeContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_castType);
		try {
			setState(6445);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,815,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6400);
				match(BINARY_SYMBOL);
				setState(6402);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,805,_ctx) ) {
				case 1:
					{
					setState(6401);
					fieldLength();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6404);
				match(CHAR_SYMBOL);
				setState(6406);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,806,_ctx) ) {
				case 1:
					{
					setState(6405);
					fieldLength();
					}
					break;
				}
				setState(6409);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,807,_ctx) ) {
				case 1:
					{
					setState(6408);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6411);
				nchar();
				setState(6413);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,808,_ctx) ) {
				case 1:
					{
					setState(6412);
					fieldLength();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6415);
				match(SIGNED_SYMBOL);
				setState(6417);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,809,_ctx) ) {
				case 1:
					{
					setState(6416);
					match(INT_SYMBOL);
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6419);
				match(UNSIGNED_SYMBOL);
				setState(6421);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,810,_ctx) ) {
				case 1:
					{
					setState(6420);
					match(INT_SYMBOL);
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6423);
				match(DATE_SYMBOL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6424);
				match(TIME_SYMBOL);
				setState(6426);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,811,_ctx) ) {
				case 1:
					{
					setState(6425);
					typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6428);
				match(DATETIME_SYMBOL);
				setState(6430);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,812,_ctx) ) {
				case 1:
					{
					setState(6429);
					typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6432);
				match(DECIMAL_SYMBOL);
				setState(6434);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,813,_ctx) ) {
				case 1:
					{
					setState(6433);
					floatOptions();
					}
					break;
				}
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6436);
				if (!(serverVersion >= 50708)) throw new FailedPredicateException(this, "serverVersion >= 50708");
				setState(6437);
				match(JSON_SYMBOL);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6438);
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				setState(6439);
				realType();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6440);
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				setState(6441);
				match(FLOAT_SYMBOL);
				setState(6443);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,814,_ctx) ) {
				case 1:
					{
					setState(6442);
					standardFloatOptions();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExprListContext extends ParserRuleContext {
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public ExprListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exprList; }
	}

	public final ExprListContext exprList() throws RecognitionException {
		ExprListContext _localctx = new ExprListContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_exprList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6447);
			expr(0);
			setState(6452);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,816,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6448);
					match(COMMA_SYMBOL);
					setState(6449);
					expr(0);
					}
					} 
				}
				setState(6454);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,816,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetContext extends ParserRuleContext {
		public TerminalNode CHAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CHAR_SYMBOL, 0); }
		public TerminalNode SET_SYMBOL() { return getToken(MultiQueryMySQLParser.SET_SYMBOL, 0); }
		public TerminalNode CHARSET_SYMBOL() { return getToken(MultiQueryMySQLParser.CHARSET_SYMBOL, 0); }
		public CharsetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charset; }
	}

	public final CharsetContext charset() throws RecognitionException {
		CharsetContext _localctx = new CharsetContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_charset);
		try {
			setState(6458);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHAR_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6455);
				match(CHAR_SYMBOL);
				setState(6456);
				match(SET_SYMBOL);
				}
				break;
			case CHARSET_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6457);
				match(CHARSET_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NotRuleContext extends ParserRuleContext {
		public TerminalNode NOT_SYMBOL() { return getToken(MultiQueryMySQLParser.NOT_SYMBOL, 0); }
		public TerminalNode NOT2_SYMBOL() { return getToken(MultiQueryMySQLParser.NOT2_SYMBOL, 0); }
		public NotRuleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notRule; }
	}

	public final NotRuleContext notRule() throws RecognitionException {
		NotRuleContext _localctx = new NotRuleContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_notRule);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6460);
			_la = _input.LA(1);
			if ( !(_la==NOT2_SYMBOL || _la==NOT_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Not2RuleContext extends ParserRuleContext {
		public TerminalNode LOGICAL_NOT_OPERATOR() { return getToken(MultiQueryMySQLParser.LOGICAL_NOT_OPERATOR, 0); }
		public TerminalNode NOT2_SYMBOL() { return getToken(MultiQueryMySQLParser.NOT2_SYMBOL, 0); }
		public Not2RuleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_not2Rule; }
	}

	public final Not2RuleContext not2Rule() throws RecognitionException {
		Not2RuleContext _localctx = new Not2RuleContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_not2Rule);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6462);
			_la = _input.LA(1);
			if ( !(_la==NOT2_SYMBOL || _la==LOGICAL_NOT_OPERATOR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalContext extends ParserRuleContext {
		public IntervalTimeStampContext intervalTimeStamp() {
			return getRuleContext(IntervalTimeStampContext.class,0);
		}
		public TerminalNode SECOND_MICROSECOND_SYMBOL() { return getToken(MultiQueryMySQLParser.SECOND_MICROSECOND_SYMBOL, 0); }
		public TerminalNode MINUTE_MICROSECOND_SYMBOL() { return getToken(MultiQueryMySQLParser.MINUTE_MICROSECOND_SYMBOL, 0); }
		public TerminalNode MINUTE_SECOND_SYMBOL() { return getToken(MultiQueryMySQLParser.MINUTE_SECOND_SYMBOL, 0); }
		public TerminalNode HOUR_MICROSECOND_SYMBOL() { return getToken(MultiQueryMySQLParser.HOUR_MICROSECOND_SYMBOL, 0); }
		public TerminalNode HOUR_SECOND_SYMBOL() { return getToken(MultiQueryMySQLParser.HOUR_SECOND_SYMBOL, 0); }
		public TerminalNode HOUR_MINUTE_SYMBOL() { return getToken(MultiQueryMySQLParser.HOUR_MINUTE_SYMBOL, 0); }
		public TerminalNode DAY_MICROSECOND_SYMBOL() { return getToken(MultiQueryMySQLParser.DAY_MICROSECOND_SYMBOL, 0); }
		public TerminalNode DAY_SECOND_SYMBOL() { return getToken(MultiQueryMySQLParser.DAY_SECOND_SYMBOL, 0); }
		public TerminalNode DAY_MINUTE_SYMBOL() { return getToken(MultiQueryMySQLParser.DAY_MINUTE_SYMBOL, 0); }
		public TerminalNode DAY_HOUR_SYMBOL() { return getToken(MultiQueryMySQLParser.DAY_HOUR_SYMBOL, 0); }
		public TerminalNode YEAR_MONTH_SYMBOL() { return getToken(MultiQueryMySQLParser.YEAR_MONTH_SYMBOL, 0); }
		public IntervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval; }
	}

	public final IntervalContext interval() throws RecognitionException {
		IntervalContext _localctx = new IntervalContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_interval);
		int _la;
		try {
			setState(6466);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DAY_SYMBOL:
			case HOUR_SYMBOL:
			case MICROSECOND_SYMBOL:
			case MINUTE_SYMBOL:
			case MONTH_SYMBOL:
			case QUARTER_SYMBOL:
			case SECOND_SYMBOL:
			case WEEK_SYMBOL:
			case YEAR_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6464);
				intervalTimeStamp();
				}
				break;
			case DAY_HOUR_SYMBOL:
			case DAY_MICROSECOND_SYMBOL:
			case DAY_MINUTE_SYMBOL:
			case DAY_SECOND_SYMBOL:
			case HOUR_MICROSECOND_SYMBOL:
			case HOUR_MINUTE_SYMBOL:
			case HOUR_SECOND_SYMBOL:
			case MINUTE_MICROSECOND_SYMBOL:
			case MINUTE_SECOND_SYMBOL:
			case SECOND_MICROSECOND_SYMBOL:
			case YEAR_MONTH_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6465);
				_la = _input.LA(1);
				if ( !(((((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & ((1L << (DAY_HOUR_SYMBOL - 471)) | (1L << (DAY_MICROSECOND_SYMBOL - 471)) | (1L << (DAY_MINUTE_SYMBOL - 471)) | (1L << (DAY_SECOND_SYMBOL - 471)) | (1L << (HOUR_MICROSECOND_SYMBOL - 471)) | (1L << (HOUR_MINUTE_SYMBOL - 471)) | (1L << (HOUR_SECOND_SYMBOL - 471)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (MINUTE_MICROSECOND_SYMBOL - 564)) | (1L << (MINUTE_SECOND_SYMBOL - 564)) | (1L << (SECOND_MICROSECOND_SYMBOL - 564)))) != 0) || _la==YEAR_MONTH_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalTimeStampContext extends ParserRuleContext {
		public TerminalNode MICROSECOND_SYMBOL() { return getToken(MultiQueryMySQLParser.MICROSECOND_SYMBOL, 0); }
		public TerminalNode SECOND_SYMBOL() { return getToken(MultiQueryMySQLParser.SECOND_SYMBOL, 0); }
		public TerminalNode MINUTE_SYMBOL() { return getToken(MultiQueryMySQLParser.MINUTE_SYMBOL, 0); }
		public TerminalNode HOUR_SYMBOL() { return getToken(MultiQueryMySQLParser.HOUR_SYMBOL, 0); }
		public TerminalNode DAY_SYMBOL() { return getToken(MultiQueryMySQLParser.DAY_SYMBOL, 0); }
		public TerminalNode WEEK_SYMBOL() { return getToken(MultiQueryMySQLParser.WEEK_SYMBOL, 0); }
		public TerminalNode MONTH_SYMBOL() { return getToken(MultiQueryMySQLParser.MONTH_SYMBOL, 0); }
		public TerminalNode QUARTER_SYMBOL() { return getToken(MultiQueryMySQLParser.QUARTER_SYMBOL, 0); }
		public TerminalNode YEAR_SYMBOL() { return getToken(MultiQueryMySQLParser.YEAR_SYMBOL, 0); }
		public IntervalTimeStampContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalTimeStamp; }
	}

	public final IntervalTimeStampContext intervalTimeStamp() throws RecognitionException {
		IntervalTimeStampContext _localctx = new IntervalTimeStampContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_intervalTimeStamp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6468);
			_la = _input.LA(1);
			if ( !(_la==DAY_SYMBOL || _la==HOUR_SYMBOL || ((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (MICROSECOND_SYMBOL - 217)) | (1L << (MINUTE_SYMBOL - 217)) | (1L << (MONTH_SYMBOL - 217)) | (1L << (QUARTER_SYMBOL - 217)))) != 0) || _la==SECOND_SYMBOL || _la==WEEK_SYMBOL || _la==YEAR_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExprListWithParenthesesContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ExprListWithParenthesesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exprListWithParentheses; }
	}

	public final ExprListWithParenthesesContext exprListWithParentheses() throws RecognitionException {
		ExprListWithParenthesesContext _localctx = new ExprListWithParenthesesContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_exprListWithParentheses);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6470);
			match(OPEN_PAR_SYMBOL);
			setState(6471);
			exprList();
			setState(6472);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExprWithParenthesesContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ExprWithParenthesesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exprWithParentheses; }
	}

	public final ExprWithParenthesesContext exprWithParentheses() throws RecognitionException {
		ExprWithParenthesesContext _localctx = new ExprWithParenthesesContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_exprWithParentheses);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6474);
			match(OPEN_PAR_SYMBOL);
			setState(6475);
			expr(0);
			setState(6476);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleExprWithParenthesesContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public SimpleExprContext simpleExpr() {
			return getRuleContext(SimpleExprContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprWithParenthesesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleExprWithParentheses; }
	}

	public final SimpleExprWithParenthesesContext simpleExprWithParentheses() throws RecognitionException {
		SimpleExprWithParenthesesContext _localctx = new SimpleExprWithParenthesesContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_simpleExprWithParentheses);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6478);
			match(OPEN_PAR_SYMBOL);
			setState(6479);
			simpleExpr(0);
			setState(6480);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderListContext extends ParserRuleContext {
		public List<OrderExpressionContext> orderExpression() {
			return getRuleContexts(OrderExpressionContext.class);
		}
		public OrderExpressionContext orderExpression(int i) {
			return getRuleContext(OrderExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public OrderListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderList; }
	}

	public final OrderListContext orderList() throws RecognitionException {
		OrderListContext _localctx = new OrderListContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_orderList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6482);
			orderExpression();
			setState(6487);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,819,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6483);
					match(COMMA_SYMBOL);
					setState(6484);
					orderExpression();
					}
					} 
				}
				setState(6489);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,819,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderExpressionContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public DirectionContext direction() {
			return getRuleContext(DirectionContext.class,0);
		}
		public OrderExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderExpression; }
	}

	public final OrderExpressionContext orderExpression() throws RecognitionException {
		OrderExpressionContext _localctx = new OrderExpressionContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_orderExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6490);
			expr(0);
			setState(6492);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,820,_ctx) ) {
			case 1:
				{
				setState(6491);
				direction();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupListContext extends ParserRuleContext {
		public List<GroupingExpressionContext> groupingExpression() {
			return getRuleContexts(GroupingExpressionContext.class);
		}
		public GroupingExpressionContext groupingExpression(int i) {
			return getRuleContext(GroupingExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public GroupListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupList; }
	}

	public final GroupListContext groupList() throws RecognitionException {
		GroupListContext _localctx = new GroupListContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_groupList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6494);
			groupingExpression();
			setState(6499);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(6495);
				match(COMMA_SYMBOL);
				setState(6496);
				groupingExpression();
				}
				}
				setState(6501);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupingExpressionContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public GroupingExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingExpression; }
	}

	public final GroupingExpressionContext groupingExpression() throws RecognitionException {
		GroupingExpressionContext _localctx = new GroupingExpressionContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_groupingExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6502);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChannelContext extends ParserRuleContext {
		public TerminalNode FOR_SYMBOL() { return getToken(MultiQueryMySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode CHANNEL_SYMBOL() { return getToken(MultiQueryMySQLParser.CHANNEL_SYMBOL, 0); }
		public TextStringNoLinebreakContext textStringNoLinebreak() {
			return getRuleContext(TextStringNoLinebreakContext.class,0);
		}
		public ChannelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_channel; }
	}

	public final ChannelContext channel() throws RecognitionException {
		ChannelContext _localctx = new ChannelContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_channel);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6504);
			if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
			setState(6505);
			match(FOR_SYMBOL);
			setState(6506);
			match(CHANNEL_SYMBOL);
			setState(6507);
			textStringNoLinebreak();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CompoundStatementContext extends ParserRuleContext {
		public SimpleStatementContext simpleStatement() {
			return getRuleContext(SimpleStatementContext.class,0);
		}
		public ReturnStatementContext returnStatement() {
			return getRuleContext(ReturnStatementContext.class,0);
		}
		public IfStatementContext ifStatement() {
			return getRuleContext(IfStatementContext.class,0);
		}
		public CaseStatementContext caseStatement() {
			return getRuleContext(CaseStatementContext.class,0);
		}
		public LabeledBlockContext labeledBlock() {
			return getRuleContext(LabeledBlockContext.class,0);
		}
		public UnlabeledBlockContext unlabeledBlock() {
			return getRuleContext(UnlabeledBlockContext.class,0);
		}
		public LabeledControlContext labeledControl() {
			return getRuleContext(LabeledControlContext.class,0);
		}
		public UnlabeledControlContext unlabeledControl() {
			return getRuleContext(UnlabeledControlContext.class,0);
		}
		public LeaveStatementContext leaveStatement() {
			return getRuleContext(LeaveStatementContext.class,0);
		}
		public IterateStatementContext iterateStatement() {
			return getRuleContext(IterateStatementContext.class,0);
		}
		public CursorOpenContext cursorOpen() {
			return getRuleContext(CursorOpenContext.class,0);
		}
		public CursorFetchContext cursorFetch() {
			return getRuleContext(CursorFetchContext.class,0);
		}
		public CursorCloseContext cursorClose() {
			return getRuleContext(CursorCloseContext.class,0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compoundStatement; }
	}

	public final CompoundStatementContext compoundStatement() throws RecognitionException {
		CompoundStatementContext _localctx = new CompoundStatementContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_compoundStatement);
		try {
			setState(6522);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,822,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6509);
				simpleStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6510);
				returnStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6511);
				ifStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6512);
				caseStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6513);
				labeledBlock();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6514);
				unlabeledBlock();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6515);
				labeledControl();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6516);
				unlabeledControl();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6517);
				leaveStatement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6518);
				iterateStatement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6519);
				cursorOpen();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6520);
				cursorFetch();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6521);
				cursorClose();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReturnStatementContext extends ParserRuleContext {
		public TerminalNode RETURN_SYMBOL() { return getToken(MultiQueryMySQLParser.RETURN_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returnStatement; }
	}

	public final ReturnStatementContext returnStatement() throws RecognitionException {
		ReturnStatementContext _localctx = new ReturnStatementContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_returnStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6524);
			match(RETURN_SYMBOL);
			setState(6525);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfStatementContext extends ParserRuleContext {
		public List<TerminalNode> IF_SYMBOL() { return getTokens(MultiQueryMySQLParser.IF_SYMBOL); }
		public TerminalNode IF_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.IF_SYMBOL, i);
		}
		public IfBodyContext ifBody() {
			return getRuleContext(IfBodyContext.class,0);
		}
		public TerminalNode END_SYMBOL() { return getToken(MultiQueryMySQLParser.END_SYMBOL, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifStatement; }
	}

	public final IfStatementContext ifStatement() throws RecognitionException {
		IfStatementContext _localctx = new IfStatementContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_ifStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6527);
			match(IF_SYMBOL);
			setState(6528);
			ifBody();
			setState(6529);
			match(END_SYMBOL);
			setState(6530);
			match(IF_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfBodyContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ThenStatementContext thenStatement() {
			return getRuleContext(ThenStatementContext.class,0);
		}
		public TerminalNode ELSEIF_SYMBOL() { return getToken(MultiQueryMySQLParser.ELSEIF_SYMBOL, 0); }
		public IfBodyContext ifBody() {
			return getRuleContext(IfBodyContext.class,0);
		}
		public TerminalNode ELSE_SYMBOL() { return getToken(MultiQueryMySQLParser.ELSE_SYMBOL, 0); }
		public CompoundStatementListContext compoundStatementList() {
			return getRuleContext(CompoundStatementListContext.class,0);
		}
		public IfBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifBody; }
	}

	public final IfBodyContext ifBody() throws RecognitionException {
		IfBodyContext _localctx = new IfBodyContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_ifBody);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6532);
			expr(0);
			setState(6533);
			thenStatement();
			setState(6538);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ELSEIF_SYMBOL:
				{
				setState(6534);
				match(ELSEIF_SYMBOL);
				setState(6535);
				ifBody();
				}
				break;
			case ELSE_SYMBOL:
				{
				setState(6536);
				match(ELSE_SYMBOL);
				setState(6537);
				compoundStatementList();
				}
				break;
			case END_SYMBOL:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ThenStatementContext extends ParserRuleContext {
		public TerminalNode THEN_SYMBOL() { return getToken(MultiQueryMySQLParser.THEN_SYMBOL, 0); }
		public CompoundStatementListContext compoundStatementList() {
			return getRuleContext(CompoundStatementListContext.class,0);
		}
		public ThenStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_thenStatement; }
	}

	public final ThenStatementContext thenStatement() throws RecognitionException {
		ThenStatementContext _localctx = new ThenStatementContext(_ctx, getState());
		enterRule(_localctx, 784, RULE_thenStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6540);
			match(THEN_SYMBOL);
			setState(6541);
			compoundStatementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CompoundStatementListContext extends ParserRuleContext {
		public List<CompoundStatementContext> compoundStatement() {
			return getRuleContexts(CompoundStatementContext.class);
		}
		public CompoundStatementContext compoundStatement(int i) {
			return getRuleContext(CompoundStatementContext.class,i);
		}
		public List<TerminalNode> SEMICOLON_SYMBOL() { return getTokens(MultiQueryMySQLParser.SEMICOLON_SYMBOL); }
		public TerminalNode SEMICOLON_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.SEMICOLON_SYMBOL, i);
		}
		public CompoundStatementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compoundStatementList; }
	}

	public final CompoundStatementListContext compoundStatementList() throws RecognitionException {
		CompoundStatementListContext _localctx = new CompoundStatementListContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_compoundStatementList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6546); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(6543);
					compoundStatement();
					setState(6544);
					match(SEMICOLON_SYMBOL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6548); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,824,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseStatementContext extends ParserRuleContext {
		public List<TerminalNode> CASE_SYMBOL() { return getTokens(MultiQueryMySQLParser.CASE_SYMBOL); }
		public TerminalNode CASE_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.CASE_SYMBOL, i);
		}
		public TerminalNode END_SYMBOL() { return getToken(MultiQueryMySQLParser.END_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public List<WhenExpressionContext> whenExpression() {
			return getRuleContexts(WhenExpressionContext.class);
		}
		public WhenExpressionContext whenExpression(int i) {
			return getRuleContext(WhenExpressionContext.class,i);
		}
		public List<ThenStatementContext> thenStatement() {
			return getRuleContexts(ThenStatementContext.class);
		}
		public ThenStatementContext thenStatement(int i) {
			return getRuleContext(ThenStatementContext.class,i);
		}
		public ElseStatementContext elseStatement() {
			return getRuleContext(ElseStatementContext.class,0);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseStatement; }
	}

	public final CaseStatementContext caseStatement() throws RecognitionException {
		CaseStatementContext _localctx = new CaseStatementContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_caseStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6550);
			match(CASE_SYMBOL);
			setState(6552);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,825,_ctx) ) {
			case 1:
				{
				setState(6551);
				expr(0);
				}
				break;
			}
			setState(6557); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(6554);
				whenExpression();
				setState(6555);
				thenStatement();
				}
				}
				setState(6559); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN_SYMBOL );
			setState(6562);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE_SYMBOL) {
				{
				setState(6561);
				elseStatement();
				}
			}

			setState(6564);
			match(END_SYMBOL);
			setState(6565);
			match(CASE_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ElseStatementContext extends ParserRuleContext {
		public TerminalNode ELSE_SYMBOL() { return getToken(MultiQueryMySQLParser.ELSE_SYMBOL, 0); }
		public CompoundStatementListContext compoundStatementList() {
			return getRuleContext(CompoundStatementListContext.class,0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elseStatement; }
	}

	public final ElseStatementContext elseStatement() throws RecognitionException {
		ElseStatementContext _localctx = new ElseStatementContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_elseStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6567);
			match(ELSE_SYMBOL);
			setState(6568);
			compoundStatementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LabeledBlockContext extends ParserRuleContext {
		public LabelContext label() {
			return getRuleContext(LabelContext.class,0);
		}
		public BeginEndBlockContext beginEndBlock() {
			return getRuleContext(BeginEndBlockContext.class,0);
		}
		public LabelRefContext labelRef() {
			return getRuleContext(LabelRefContext.class,0);
		}
		public LabeledBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labeledBlock; }
	}

	public final LabeledBlockContext labeledBlock() throws RecognitionException {
		LabeledBlockContext _localctx = new LabeledBlockContext(_ctx, getState());
		enterRule(_localctx, 792, RULE_labeledBlock);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6570);
			label();
			setState(6571);
			beginEndBlock();
			setState(6573);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,828,_ctx) ) {
			case 1:
				{
				setState(6572);
				labelRef();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnlabeledBlockContext extends ParserRuleContext {
		public BeginEndBlockContext beginEndBlock() {
			return getRuleContext(BeginEndBlockContext.class,0);
		}
		public UnlabeledBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unlabeledBlock; }
	}

	public final UnlabeledBlockContext unlabeledBlock() throws RecognitionException {
		UnlabeledBlockContext _localctx = new UnlabeledBlockContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_unlabeledBlock);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6575);
			beginEndBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LabelContext extends ParserRuleContext {
		public LabelIdentifierContext labelIdentifier() {
			return getRuleContext(LabelIdentifierContext.class,0);
		}
		public TerminalNode COLON_SYMBOL() { return getToken(MultiQueryMySQLParser.COLON_SYMBOL, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_label; }
	}

	public final LabelContext label() throws RecognitionException {
		LabelContext _localctx = new LabelContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_label);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6577);
			labelIdentifier();
			setState(6578);
			match(COLON_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BeginEndBlockContext extends ParserRuleContext {
		public TerminalNode BEGIN_SYMBOL() { return getToken(MultiQueryMySQLParser.BEGIN_SYMBOL, 0); }
		public TerminalNode END_SYMBOL() { return getToken(MultiQueryMySQLParser.END_SYMBOL, 0); }
		public SpDeclarationsContext spDeclarations() {
			return getRuleContext(SpDeclarationsContext.class,0);
		}
		public CompoundStatementListContext compoundStatementList() {
			return getRuleContext(CompoundStatementListContext.class,0);
		}
		public BeginEndBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_beginEndBlock; }
	}

	public final BeginEndBlockContext beginEndBlock() throws RecognitionException {
		BeginEndBlockContext _localctx = new BeginEndBlockContext(_ctx, getState());
		enterRule(_localctx, 798, RULE_beginEndBlock);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6580);
			match(BEGIN_SYMBOL);
			setState(6582);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,829,_ctx) ) {
			case 1:
				{
				setState(6581);
				spDeclarations();
				}
				break;
			}
			setState(6585);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,830,_ctx) ) {
			case 1:
				{
				setState(6584);
				compoundStatementList();
				}
				break;
			}
			setState(6587);
			match(END_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LabeledControlContext extends ParserRuleContext {
		public LabelContext label() {
			return getRuleContext(LabelContext.class,0);
		}
		public UnlabeledControlContext unlabeledControl() {
			return getRuleContext(UnlabeledControlContext.class,0);
		}
		public LabelRefContext labelRef() {
			return getRuleContext(LabelRefContext.class,0);
		}
		public LabeledControlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labeledControl; }
	}

	public final LabeledControlContext labeledControl() throws RecognitionException {
		LabeledControlContext _localctx = new LabeledControlContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_labeledControl);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6589);
			label();
			setState(6590);
			unlabeledControl();
			setState(6592);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,831,_ctx) ) {
			case 1:
				{
				setState(6591);
				labelRef();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnlabeledControlContext extends ParserRuleContext {
		public LoopBlockContext loopBlock() {
			return getRuleContext(LoopBlockContext.class,0);
		}
		public WhileDoBlockContext whileDoBlock() {
			return getRuleContext(WhileDoBlockContext.class,0);
		}
		public RepeatUntilBlockContext repeatUntilBlock() {
			return getRuleContext(RepeatUntilBlockContext.class,0);
		}
		public UnlabeledControlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unlabeledControl; }
	}

	public final UnlabeledControlContext unlabeledControl() throws RecognitionException {
		UnlabeledControlContext _localctx = new UnlabeledControlContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_unlabeledControl);
		try {
			setState(6597);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOOP_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6594);
				loopBlock();
				}
				break;
			case WHILE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6595);
				whileDoBlock();
				}
				break;
			case REPEAT_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(6596);
				repeatUntilBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoopBlockContext extends ParserRuleContext {
		public List<TerminalNode> LOOP_SYMBOL() { return getTokens(MultiQueryMySQLParser.LOOP_SYMBOL); }
		public TerminalNode LOOP_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.LOOP_SYMBOL, i);
		}
		public CompoundStatementListContext compoundStatementList() {
			return getRuleContext(CompoundStatementListContext.class,0);
		}
		public TerminalNode END_SYMBOL() { return getToken(MultiQueryMySQLParser.END_SYMBOL, 0); }
		public LoopBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loopBlock; }
	}

	public final LoopBlockContext loopBlock() throws RecognitionException {
		LoopBlockContext _localctx = new LoopBlockContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_loopBlock);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6599);
			match(LOOP_SYMBOL);
			setState(6600);
			compoundStatementList();
			setState(6601);
			match(END_SYMBOL);
			setState(6602);
			match(LOOP_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhileDoBlockContext extends ParserRuleContext {
		public List<TerminalNode> WHILE_SYMBOL() { return getTokens(MultiQueryMySQLParser.WHILE_SYMBOL); }
		public TerminalNode WHILE_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.WHILE_SYMBOL, i);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode DO_SYMBOL() { return getToken(MultiQueryMySQLParser.DO_SYMBOL, 0); }
		public CompoundStatementListContext compoundStatementList() {
			return getRuleContext(CompoundStatementListContext.class,0);
		}
		public TerminalNode END_SYMBOL() { return getToken(MultiQueryMySQLParser.END_SYMBOL, 0); }
		public WhileDoBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whileDoBlock; }
	}

	public final WhileDoBlockContext whileDoBlock() throws RecognitionException {
		WhileDoBlockContext _localctx = new WhileDoBlockContext(_ctx, getState());
		enterRule(_localctx, 806, RULE_whileDoBlock);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6604);
			match(WHILE_SYMBOL);
			setState(6605);
			expr(0);
			setState(6606);
			match(DO_SYMBOL);
			setState(6607);
			compoundStatementList();
			setState(6608);
			match(END_SYMBOL);
			setState(6609);
			match(WHILE_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RepeatUntilBlockContext extends ParserRuleContext {
		public List<TerminalNode> REPEAT_SYMBOL() { return getTokens(MultiQueryMySQLParser.REPEAT_SYMBOL); }
		public TerminalNode REPEAT_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.REPEAT_SYMBOL, i);
		}
		public CompoundStatementListContext compoundStatementList() {
			return getRuleContext(CompoundStatementListContext.class,0);
		}
		public TerminalNode UNTIL_SYMBOL() { return getToken(MultiQueryMySQLParser.UNTIL_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode END_SYMBOL() { return getToken(MultiQueryMySQLParser.END_SYMBOL, 0); }
		public RepeatUntilBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repeatUntilBlock; }
	}

	public final RepeatUntilBlockContext repeatUntilBlock() throws RecognitionException {
		RepeatUntilBlockContext _localctx = new RepeatUntilBlockContext(_ctx, getState());
		enterRule(_localctx, 808, RULE_repeatUntilBlock);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6611);
			match(REPEAT_SYMBOL);
			setState(6612);
			compoundStatementList();
			setState(6613);
			match(UNTIL_SYMBOL);
			setState(6614);
			expr(0);
			setState(6615);
			match(END_SYMBOL);
			setState(6616);
			match(REPEAT_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpDeclarationsContext extends ParserRuleContext {
		public List<SpDeclarationContext> spDeclaration() {
			return getRuleContexts(SpDeclarationContext.class);
		}
		public SpDeclarationContext spDeclaration(int i) {
			return getRuleContext(SpDeclarationContext.class,i);
		}
		public List<TerminalNode> SEMICOLON_SYMBOL() { return getTokens(MultiQueryMySQLParser.SEMICOLON_SYMBOL); }
		public TerminalNode SEMICOLON_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.SEMICOLON_SYMBOL, i);
		}
		public SpDeclarationsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_spDeclarations; }
	}

	public final SpDeclarationsContext spDeclarations() throws RecognitionException {
		SpDeclarationsContext _localctx = new SpDeclarationsContext(_ctx, getState());
		enterRule(_localctx, 810, RULE_spDeclarations);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6621); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(6618);
					spDeclaration();
					setState(6619);
					match(SEMICOLON_SYMBOL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6623); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,833,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpDeclarationContext extends ParserRuleContext {
		public VariableDeclarationContext variableDeclaration() {
			return getRuleContext(VariableDeclarationContext.class,0);
		}
		public ConditionDeclarationContext conditionDeclaration() {
			return getRuleContext(ConditionDeclarationContext.class,0);
		}
		public HandlerDeclarationContext handlerDeclaration() {
			return getRuleContext(HandlerDeclarationContext.class,0);
		}
		public CursorDeclarationContext cursorDeclaration() {
			return getRuleContext(CursorDeclarationContext.class,0);
		}
		public SpDeclarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_spDeclaration; }
	}

	public final SpDeclarationContext spDeclaration() throws RecognitionException {
		SpDeclarationContext _localctx = new SpDeclarationContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_spDeclaration);
		try {
			setState(6629);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,834,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6625);
				variableDeclaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6626);
				conditionDeclaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6627);
				handlerDeclaration();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6628);
				cursorDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableDeclarationContext extends ParserRuleContext {
		public TerminalNode DECLARE_SYMBOL() { return getToken(MultiQueryMySQLParser.DECLARE_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public CollateContext collate() {
			return getRuleContext(CollateContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableDeclaration; }
	}

	public final VariableDeclarationContext variableDeclaration() throws RecognitionException {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_variableDeclaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6631);
			match(DECLARE_SYMBOL);
			setState(6632);
			identifierList();
			setState(6633);
			dataType();
			setState(6635);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLLATE_SYMBOL) {
				{
				setState(6634);
				collate();
				}
			}

			setState(6639);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT_SYMBOL) {
				{
				setState(6637);
				match(DEFAULT_SYMBOL);
				setState(6638);
				expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConditionDeclarationContext extends ParserRuleContext {
		public TerminalNode DECLARE_SYMBOL() { return getToken(MultiQueryMySQLParser.DECLARE_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode CONDITION_SYMBOL() { return getToken(MultiQueryMySQLParser.CONDITION_SYMBOL, 0); }
		public TerminalNode FOR_SYMBOL() { return getToken(MultiQueryMySQLParser.FOR_SYMBOL, 0); }
		public SpConditionContext spCondition() {
			return getRuleContext(SpConditionContext.class,0);
		}
		public ConditionDeclarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditionDeclaration; }
	}

	public final ConditionDeclarationContext conditionDeclaration() throws RecognitionException {
		ConditionDeclarationContext _localctx = new ConditionDeclarationContext(_ctx, getState());
		enterRule(_localctx, 816, RULE_conditionDeclaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6641);
			match(DECLARE_SYMBOL);
			setState(6642);
			identifier();
			setState(6643);
			match(CONDITION_SYMBOL);
			setState(6644);
			match(FOR_SYMBOL);
			setState(6645);
			spCondition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpConditionContext extends ParserRuleContext {
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public SqlstateContext sqlstate() {
			return getRuleContext(SqlstateContext.class,0);
		}
		public SpConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_spCondition; }
	}

	public final SpConditionContext spCondition() throws RecognitionException {
		SpConditionContext _localctx = new SpConditionContext(_ctx, getState());
		enterRule(_localctx, 818, RULE_spCondition);
		try {
			setState(6649);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case HEX_NUMBER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
				enterOuterAlt(_localctx, 1);
				{
				setState(6647);
				ulong_number();
				}
				break;
			case SQLSTATE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6648);
				sqlstate();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlstateContext extends ParserRuleContext {
		public TerminalNode SQLSTATE_SYMBOL() { return getToken(MultiQueryMySQLParser.SQLSTATE_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode VALUE_SYMBOL() { return getToken(MultiQueryMySQLParser.VALUE_SYMBOL, 0); }
		public SqlstateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlstate; }
	}

	public final SqlstateContext sqlstate() throws RecognitionException {
		SqlstateContext _localctx = new SqlstateContext(_ctx, getState());
		enterRule(_localctx, 820, RULE_sqlstate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6651);
			match(SQLSTATE_SYMBOL);
			setState(6653);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,838,_ctx) ) {
			case 1:
				{
				setState(6652);
				match(VALUE_SYMBOL);
				}
				break;
			}
			setState(6655);
			textLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerDeclarationContext extends ParserRuleContext {
		public TerminalNode DECLARE_SYMBOL() { return getToken(MultiQueryMySQLParser.DECLARE_SYMBOL, 0); }
		public TerminalNode HANDLER_SYMBOL() { return getToken(MultiQueryMySQLParser.HANDLER_SYMBOL, 0); }
		public TerminalNode FOR_SYMBOL() { return getToken(MultiQueryMySQLParser.FOR_SYMBOL, 0); }
		public List<HandlerConditionContext> handlerCondition() {
			return getRuleContexts(HandlerConditionContext.class);
		}
		public HandlerConditionContext handlerCondition(int i) {
			return getRuleContext(HandlerConditionContext.class,i);
		}
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public TerminalNode CONTINUE_SYMBOL() { return getToken(MultiQueryMySQLParser.CONTINUE_SYMBOL, 0); }
		public TerminalNode EXIT_SYMBOL() { return getToken(MultiQueryMySQLParser.EXIT_SYMBOL, 0); }
		public TerminalNode UNDO_SYMBOL() { return getToken(MultiQueryMySQLParser.UNDO_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public HandlerDeclarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerDeclaration; }
	}

	public final HandlerDeclarationContext handlerDeclaration() throws RecognitionException {
		HandlerDeclarationContext _localctx = new HandlerDeclarationContext(_ctx, getState());
		enterRule(_localctx, 822, RULE_handlerDeclaration);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6657);
			match(DECLARE_SYMBOL);
			setState(6658);
			_la = _input.LA(1);
			if ( !(_la==CONTINUE_SYMBOL || _la==EXIT_SYMBOL || _la==UNDO_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6659);
			match(HANDLER_SYMBOL);
			setState(6660);
			match(FOR_SYMBOL);
			setState(6661);
			handlerCondition();
			setState(6666);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,839,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6662);
					match(COMMA_SYMBOL);
					setState(6663);
					handlerCondition();
					}
					} 
				}
				setState(6668);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,839,_ctx);
			}
			setState(6669);
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerConditionContext extends ParserRuleContext {
		public SpConditionContext spCondition() {
			return getRuleContext(SpConditionContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode SQLWARNING_SYMBOL() { return getToken(MultiQueryMySQLParser.SQLWARNING_SYMBOL, 0); }
		public NotRuleContext notRule() {
			return getRuleContext(NotRuleContext.class,0);
		}
		public TerminalNode FOUND_SYMBOL() { return getToken(MultiQueryMySQLParser.FOUND_SYMBOL, 0); }
		public TerminalNode SQLEXCEPTION_SYMBOL() { return getToken(MultiQueryMySQLParser.SQLEXCEPTION_SYMBOL, 0); }
		public HandlerConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerCondition; }
	}

	public final HandlerConditionContext handlerCondition() throws RecognitionException {
		HandlerConditionContext _localctx = new HandlerConditionContext(_ctx, getState());
		enterRule(_localctx, 824, RULE_handlerCondition);
		try {
			setState(6678);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,840,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6671);
				spCondition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6672);
				identifier();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6673);
				match(SQLWARNING_SYMBOL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6674);
				notRule();
				setState(6675);
				match(FOUND_SYMBOL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6677);
				match(SQLEXCEPTION_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CursorDeclarationContext extends ParserRuleContext {
		public TerminalNode DECLARE_SYMBOL() { return getToken(MultiQueryMySQLParser.DECLARE_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode CURSOR_SYMBOL() { return getToken(MultiQueryMySQLParser.CURSOR_SYMBOL, 0); }
		public TerminalNode FOR_SYMBOL() { return getToken(MultiQueryMySQLParser.FOR_SYMBOL, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public CursorDeclarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorDeclaration; }
	}

	public final CursorDeclarationContext cursorDeclaration() throws RecognitionException {
		CursorDeclarationContext _localctx = new CursorDeclarationContext(_ctx, getState());
		enterRule(_localctx, 826, RULE_cursorDeclaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6680);
			match(DECLARE_SYMBOL);
			setState(6681);
			identifier();
			setState(6682);
			match(CURSOR_SYMBOL);
			setState(6683);
			match(FOR_SYMBOL);
			setState(6684);
			selectStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IterateStatementContext extends ParserRuleContext {
		public TerminalNode ITERATE_SYMBOL() { return getToken(MultiQueryMySQLParser.ITERATE_SYMBOL, 0); }
		public LabelRefContext labelRef() {
			return getRuleContext(LabelRefContext.class,0);
		}
		public IterateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iterateStatement; }
	}

	public final IterateStatementContext iterateStatement() throws RecognitionException {
		IterateStatementContext _localctx = new IterateStatementContext(_ctx, getState());
		enterRule(_localctx, 828, RULE_iterateStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6686);
			match(ITERATE_SYMBOL);
			setState(6687);
			labelRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LeaveStatementContext extends ParserRuleContext {
		public TerminalNode LEAVE_SYMBOL() { return getToken(MultiQueryMySQLParser.LEAVE_SYMBOL, 0); }
		public LabelRefContext labelRef() {
			return getRuleContext(LabelRefContext.class,0);
		}
		public LeaveStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_leaveStatement; }
	}

	public final LeaveStatementContext leaveStatement() throws RecognitionException {
		LeaveStatementContext _localctx = new LeaveStatementContext(_ctx, getState());
		enterRule(_localctx, 830, RULE_leaveStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6689);
			match(LEAVE_SYMBOL);
			setState(6690);
			labelRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GetDiagnosticsContext extends ParserRuleContext {
		public TerminalNode GET_SYMBOL() { return getToken(MultiQueryMySQLParser.GET_SYMBOL, 0); }
		public TerminalNode DIAGNOSTICS_SYMBOL() { return getToken(MultiQueryMySQLParser.DIAGNOSTICS_SYMBOL, 0); }
		public List<StatementInformationItemContext> statementInformationItem() {
			return getRuleContexts(StatementInformationItemContext.class);
		}
		public StatementInformationItemContext statementInformationItem(int i) {
			return getRuleContext(StatementInformationItemContext.class,i);
		}
		public TerminalNode CONDITION_SYMBOL() { return getToken(MultiQueryMySQLParser.CONDITION_SYMBOL, 0); }
		public SignalAllowedExprContext signalAllowedExpr() {
			return getRuleContext(SignalAllowedExprContext.class,0);
		}
		public List<ConditionInformationItemContext> conditionInformationItem() {
			return getRuleContexts(ConditionInformationItemContext.class);
		}
		public ConditionInformationItemContext conditionInformationItem(int i) {
			return getRuleContext(ConditionInformationItemContext.class,i);
		}
		public TerminalNode CURRENT_SYMBOL() { return getToken(MultiQueryMySQLParser.CURRENT_SYMBOL, 0); }
		public TerminalNode STACKED_SYMBOL() { return getToken(MultiQueryMySQLParser.STACKED_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public GetDiagnosticsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_getDiagnostics; }
	}

	public final GetDiagnosticsContext getDiagnostics() throws RecognitionException {
		GetDiagnosticsContext _localctx = new GetDiagnosticsContext(_ctx, getState());
		enterRule(_localctx, 832, RULE_getDiagnostics);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6692);
			match(GET_SYMBOL);
			setState(6696);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,841,_ctx) ) {
			case 1:
				{
				setState(6693);
				match(CURRENT_SYMBOL);
				}
				break;
			case 2:
				{
				setState(6694);
				if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
				setState(6695);
				match(STACKED_SYMBOL);
				}
				break;
			}
			setState(6698);
			match(DIAGNOSTICS_SYMBOL);
			setState(6717);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,844,_ctx) ) {
			case 1:
				{
				setState(6699);
				statementInformationItem();
				setState(6704);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,842,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6700);
						match(COMMA_SYMBOL);
						setState(6701);
						statementInformationItem();
						}
						} 
					}
					setState(6706);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,842,_ctx);
				}
				}
				break;
			case 2:
				{
				setState(6707);
				match(CONDITION_SYMBOL);
				setState(6708);
				signalAllowedExpr();
				setState(6709);
				conditionInformationItem();
				setState(6714);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,843,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6710);
						match(COMMA_SYMBOL);
						setState(6711);
						conditionInformationItem();
						}
						} 
					}
					setState(6716);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,843,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignalAllowedExprContext extends ParserRuleContext {
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public SignalAllowedExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signalAllowedExpr; }
	}

	public final SignalAllowedExprContext signalAllowedExpr() throws RecognitionException {
		SignalAllowedExprContext _localctx = new SignalAllowedExprContext(_ctx, getState());
		enterRule(_localctx, 834, RULE_signalAllowedExpr);
		try {
			setState(6722);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,845,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6719);
				literal();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6720);
				variable();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6721);
				qualifiedIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementInformationItemContext extends ParserRuleContext {
		public TerminalNode EQUAL_OPERATOR() { return getToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
		public TerminalNode NUMBER_SYMBOL() { return getToken(MultiQueryMySQLParser.NUMBER_SYMBOL, 0); }
		public TerminalNode ROW_COUNT_SYMBOL() { return getToken(MultiQueryMySQLParser.ROW_COUNT_SYMBOL, 0); }
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public StatementInformationItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statementInformationItem; }
	}

	public final StatementInformationItemContext statementInformationItem() throws RecognitionException {
		StatementInformationItemContext _localctx = new StatementInformationItemContext(_ctx, getState());
		enterRule(_localctx, 836, RULE_statementInformationItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6726);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,846,_ctx) ) {
			case 1:
				{
				setState(6724);
				variable();
				}
				break;
			case 2:
				{
				setState(6725);
				identifier();
				}
				break;
			}
			setState(6728);
			match(EQUAL_OPERATOR);
			setState(6729);
			_la = _input.LA(1);
			if ( !(_la==NUMBER_SYMBOL || _la==ROW_COUNT_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConditionInformationItemContext extends ParserRuleContext {
		public TerminalNode EQUAL_OPERATOR() { return getToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SignalInformationItemNameContext signalInformationItemName() {
			return getRuleContext(SignalInformationItemNameContext.class,0);
		}
		public TerminalNode RETURNED_SQLSTATE_SYMBOL() { return getToken(MultiQueryMySQLParser.RETURNED_SQLSTATE_SYMBOL, 0); }
		public ConditionInformationItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditionInformationItem; }
	}

	public final ConditionInformationItemContext conditionInformationItem() throws RecognitionException {
		ConditionInformationItemContext _localctx = new ConditionInformationItemContext(_ctx, getState());
		enterRule(_localctx, 838, RULE_conditionInformationItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6733);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,847,_ctx) ) {
			case 1:
				{
				setState(6731);
				variable();
				}
				break;
			case 2:
				{
				setState(6732);
				identifier();
				}
				break;
			}
			setState(6735);
			match(EQUAL_OPERATOR);
			setState(6738);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CATALOG_NAME_SYMBOL:
			case CLASS_ORIGIN_SYMBOL:
			case COLUMN_NAME_SYMBOL:
			case CONSTRAINT_CATALOG_SYMBOL:
			case CONSTRAINT_SCHEMA_SYMBOL:
			case CONSTRAINT_NAME_SYMBOL:
			case CURSOR_NAME_SYMBOL:
			case MESSAGE_TEXT_SYMBOL:
			case MYSQL_ERRNO_SYMBOL:
			case SCHEMA_NAME_SYMBOL:
			case SUBCLASS_ORIGIN_SYMBOL:
			case TABLE_NAME_SYMBOL:
				{
				setState(6736);
				signalInformationItemName();
				}
				break;
			case RETURNED_SQLSTATE_SYMBOL:
				{
				setState(6737);
				match(RETURNED_SQLSTATE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignalInformationItemNameContext extends ParserRuleContext {
		public TerminalNode CLASS_ORIGIN_SYMBOL() { return getToken(MultiQueryMySQLParser.CLASS_ORIGIN_SYMBOL, 0); }
		public TerminalNode SUBCLASS_ORIGIN_SYMBOL() { return getToken(MultiQueryMySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0); }
		public TerminalNode CONSTRAINT_CATALOG_SYMBOL() { return getToken(MultiQueryMySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0); }
		public TerminalNode CONSTRAINT_SCHEMA_SYMBOL() { return getToken(MultiQueryMySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0); }
		public TerminalNode CONSTRAINT_NAME_SYMBOL() { return getToken(MultiQueryMySQLParser.CONSTRAINT_NAME_SYMBOL, 0); }
		public TerminalNode CATALOG_NAME_SYMBOL() { return getToken(MultiQueryMySQLParser.CATALOG_NAME_SYMBOL, 0); }
		public TerminalNode SCHEMA_NAME_SYMBOL() { return getToken(MultiQueryMySQLParser.SCHEMA_NAME_SYMBOL, 0); }
		public TerminalNode TABLE_NAME_SYMBOL() { return getToken(MultiQueryMySQLParser.TABLE_NAME_SYMBOL, 0); }
		public TerminalNode COLUMN_NAME_SYMBOL() { return getToken(MultiQueryMySQLParser.COLUMN_NAME_SYMBOL, 0); }
		public TerminalNode CURSOR_NAME_SYMBOL() { return getToken(MultiQueryMySQLParser.CURSOR_NAME_SYMBOL, 0); }
		public TerminalNode MESSAGE_TEXT_SYMBOL() { return getToken(MultiQueryMySQLParser.MESSAGE_TEXT_SYMBOL, 0); }
		public TerminalNode MYSQL_ERRNO_SYMBOL() { return getToken(MultiQueryMySQLParser.MYSQL_ERRNO_SYMBOL, 0); }
		public SignalInformationItemNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signalInformationItemName; }
	}

	public final SignalInformationItemNameContext signalInformationItemName() throws RecognitionException {
		SignalInformationItemNameContext _localctx = new SignalInformationItemNameContext(_ctx, getState());
		enterRule(_localctx, 840, RULE_signalInformationItemName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6740);
			_la = _input.LA(1);
			if ( !(((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (CATALOG_NAME_SYMBOL - 78)) | (1L << (CLASS_ORIGIN_SYMBOL - 78)) | (1L << (COLUMN_NAME_SYMBOL - 78)) | (1L << (CONSTRAINT_CATALOG_SYMBOL - 78)) | (1L << (CONSTRAINT_SCHEMA_SYMBOL - 78)) | (1L << (CONSTRAINT_NAME_SYMBOL - 78)) | (1L << (CURSOR_NAME_SYMBOL - 78)))) != 0) || _la==MESSAGE_TEXT_SYMBOL || _la==MYSQL_ERRNO_SYMBOL || ((((_la - 304)) & ~0x3f) == 0 && ((1L << (_la - 304)) & ((1L << (SCHEMA_NAME_SYMBOL - 304)) | (1L << (SUBCLASS_ORIGIN_SYMBOL - 304)) | (1L << (TABLE_NAME_SYMBOL - 304)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignalStatementContext extends ParserRuleContext {
		public TerminalNode SIGNAL_SYMBOL() { return getToken(MultiQueryMySQLParser.SIGNAL_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SqlstateContext sqlstate() {
			return getRuleContext(SqlstateContext.class,0);
		}
		public TerminalNode SET_SYMBOL() { return getToken(MultiQueryMySQLParser.SET_SYMBOL, 0); }
		public List<SignalInformationItemContext> signalInformationItem() {
			return getRuleContexts(SignalInformationItemContext.class);
		}
		public SignalInformationItemContext signalInformationItem(int i) {
			return getRuleContext(SignalInformationItemContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public SignalStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signalStatement; }
	}

	public final SignalStatementContext signalStatement() throws RecognitionException {
		SignalStatementContext _localctx = new SignalStatementContext(_ctx, getState());
		enterRule(_localctx, 842, RULE_signalStatement);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6742);
			match(SIGNAL_SYMBOL);
			setState(6745);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,849,_ctx) ) {
			case 1:
				{
				setState(6743);
				identifier();
				}
				break;
			case 2:
				{
				setState(6744);
				sqlstate();
				}
				break;
			}
			setState(6756);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,851,_ctx) ) {
			case 1:
				{
				setState(6747);
				match(SET_SYMBOL);
				setState(6748);
				signalInformationItem();
				setState(6753);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,850,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6749);
						match(COMMA_SYMBOL);
						setState(6750);
						signalInformationItem();
						}
						} 
					}
					setState(6755);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,850,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResignalStatementContext extends ParserRuleContext {
		public TerminalNode RESIGNAL_SYMBOL() { return getToken(MultiQueryMySQLParser.RESIGNAL_SYMBOL, 0); }
		public TerminalNode SQLSTATE_SYMBOL() { return getToken(MultiQueryMySQLParser.SQLSTATE_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public TerminalNode SET_SYMBOL() { return getToken(MultiQueryMySQLParser.SET_SYMBOL, 0); }
		public List<SignalInformationItemContext> signalInformationItem() {
			return getRuleContexts(SignalInformationItemContext.class);
		}
		public SignalInformationItemContext signalInformationItem(int i) {
			return getRuleContext(SignalInformationItemContext.class,i);
		}
		public TerminalNode VALUE_SYMBOL() { return getToken(MultiQueryMySQLParser.VALUE_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public ResignalStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resignalStatement; }
	}

	public final ResignalStatementContext resignalStatement() throws RecognitionException {
		ResignalStatementContext _localctx = new ResignalStatementContext(_ctx, getState());
		enterRule(_localctx, 844, RULE_resignalStatement);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6758);
			match(RESIGNAL_SYMBOL);
			setState(6764);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,853,_ctx) ) {
			case 1:
				{
				setState(6759);
				match(SQLSTATE_SYMBOL);
				setState(6761);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,852,_ctx) ) {
				case 1:
					{
					setState(6760);
					match(VALUE_SYMBOL);
					}
					break;
				}
				setState(6763);
				textOrIdentifier();
				}
				break;
			}
			setState(6775);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,855,_ctx) ) {
			case 1:
				{
				setState(6766);
				match(SET_SYMBOL);
				setState(6767);
				signalInformationItem();
				setState(6772);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,854,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6768);
						match(COMMA_SYMBOL);
						setState(6769);
						signalInformationItem();
						}
						} 
					}
					setState(6774);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,854,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignalInformationItemContext extends ParserRuleContext {
		public SignalInformationItemNameContext signalInformationItemName() {
			return getRuleContext(SignalInformationItemNameContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
		public SignalAllowedExprContext signalAllowedExpr() {
			return getRuleContext(SignalAllowedExprContext.class,0);
		}
		public SignalInformationItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signalInformationItem; }
	}

	public final SignalInformationItemContext signalInformationItem() throws RecognitionException {
		SignalInformationItemContext _localctx = new SignalInformationItemContext(_ctx, getState());
		enterRule(_localctx, 846, RULE_signalInformationItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6777);
			signalInformationItemName();
			setState(6778);
			match(EQUAL_OPERATOR);
			setState(6779);
			signalAllowedExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CursorOpenContext extends ParserRuleContext {
		public TerminalNode OPEN_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CursorOpenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorOpen; }
	}

	public final CursorOpenContext cursorOpen() throws RecognitionException {
		CursorOpenContext _localctx = new CursorOpenContext(_ctx, getState());
		enterRule(_localctx, 848, RULE_cursorOpen);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6781);
			match(OPEN_SYMBOL);
			setState(6782);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CursorCloseContext extends ParserRuleContext {
		public TerminalNode CLOSE_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CursorCloseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorClose; }
	}

	public final CursorCloseContext cursorClose() throws RecognitionException {
		CursorCloseContext _localctx = new CursorCloseContext(_ctx, getState());
		enterRule(_localctx, 850, RULE_cursorClose);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6784);
			match(CLOSE_SYMBOL);
			setState(6785);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CursorFetchContext extends ParserRuleContext {
		public TerminalNode FETCH_SYMBOL() { return getToken(MultiQueryMySQLParser.FETCH_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode INTO_SYMBOL() { return getToken(MultiQueryMySQLParser.INTO_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode FROM_SYMBOL() { return getToken(MultiQueryMySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode NEXT_SYMBOL() { return getToken(MultiQueryMySQLParser.NEXT_SYMBOL, 0); }
		public CursorFetchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorFetch; }
	}

	public final CursorFetchContext cursorFetch() throws RecognitionException {
		CursorFetchContext _localctx = new CursorFetchContext(_ctx, getState());
		enterRule(_localctx, 852, RULE_cursorFetch);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6787);
			match(FETCH_SYMBOL);
			setState(6792);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,857,_ctx) ) {
			case 1:
				{
				setState(6789);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NEXT_SYMBOL) {
					{
					setState(6788);
					match(NEXT_SYMBOL);
					}
				}

				setState(6791);
				match(FROM_SYMBOL);
				}
				break;
			}
			setState(6794);
			identifier();
			setState(6795);
			match(INTO_SYMBOL);
			setState(6796);
			identifierList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScheduleContext extends ParserRuleContext {
		public TerminalNode AT_SYMBOL() { return getToken(MultiQueryMySQLParser.AT_SYMBOL, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode EVERY_SYMBOL() { return getToken(MultiQueryMySQLParser.EVERY_SYMBOL, 0); }
		public IntervalContext interval() {
			return getRuleContext(IntervalContext.class,0);
		}
		public TerminalNode STARTS_SYMBOL() { return getToken(MultiQueryMySQLParser.STARTS_SYMBOL, 0); }
		public TerminalNode ENDS_SYMBOL() { return getToken(MultiQueryMySQLParser.ENDS_SYMBOL, 0); }
		public ScheduleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schedule; }
	}

	public final ScheduleContext schedule() throws RecognitionException {
		ScheduleContext _localctx = new ScheduleContext(_ctx, getState());
		enterRule(_localctx, 854, RULE_schedule);
		try {
			setState(6811);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AT_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6798);
				match(AT_SYMBOL);
				setState(6799);
				expr(0);
				}
				break;
			case EVERY_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6800);
				match(EVERY_SYMBOL);
				setState(6801);
				expr(0);
				setState(6802);
				interval();
				setState(6805);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,858,_ctx) ) {
				case 1:
					{
					setState(6803);
					match(STARTS_SYMBOL);
					setState(6804);
					expr(0);
					}
					break;
				}
				setState(6809);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,859,_ctx) ) {
				case 1:
					{
					setState(6807);
					match(ENDS_SYMBOL);
					setState(6808);
					expr(0);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefinitionContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public FieldDefinitionContext fieldDefinition() {
			return getRuleContext(FieldDefinitionContext.class,0);
		}
		public CheckOrReferencesContext checkOrReferences() {
			return getRuleContext(CheckOrReferencesContext.class,0);
		}
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDefinition; }
	}

	public final ColumnDefinitionContext columnDefinition() throws RecognitionException {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 856, RULE_columnDefinition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6813);
			columnName();
			setState(6814);
			fieldDefinition();
			setState(6816);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,861,_ctx) ) {
			case 1:
				{
				setState(6815);
				checkOrReferences();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckOrReferencesContext extends ParserRuleContext {
		public CheckConstraintContext checkConstraint() {
			return getRuleContext(CheckConstraintContext.class,0);
		}
		public ReferencesContext references() {
			return getRuleContext(ReferencesContext.class,0);
		}
		public CheckOrReferencesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkOrReferences; }
	}

	public final CheckOrReferencesContext checkOrReferences() throws RecognitionException {
		CheckOrReferencesContext _localctx = new CheckOrReferencesContext(_ctx, getState());
		enterRule(_localctx, 858, RULE_checkOrReferences);
		try {
			setState(6821);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,862,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6818);
				if (!(serverVersion < 80016)) throw new FailedPredicateException(this, "serverVersion < 80016");
				setState(6819);
				checkConstraint();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6820);
				references();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckConstraintContext extends ParserRuleContext {
		public TerminalNode CHECK_SYMBOL() { return getToken(MultiQueryMySQLParser.CHECK_SYMBOL, 0); }
		public ExprWithParenthesesContext exprWithParentheses() {
			return getRuleContext(ExprWithParenthesesContext.class,0);
		}
		public CheckConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkConstraint; }
	}

	public final CheckConstraintContext checkConstraint() throws RecognitionException {
		CheckConstraintContext _localctx = new CheckConstraintContext(_ctx, getState());
		enterRule(_localctx, 860, RULE_checkConstraint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6823);
			match(CHECK_SYMBOL);
			setState(6824);
			exprWithParentheses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintEnforcementContext extends ParserRuleContext {
		public TerminalNode ENFORCED_SYMBOL() { return getToken(MultiQueryMySQLParser.ENFORCED_SYMBOL, 0); }
		public TerminalNode NOT_SYMBOL() { return getToken(MultiQueryMySQLParser.NOT_SYMBOL, 0); }
		public ConstraintEnforcementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintEnforcement; }
	}

	public final ConstraintEnforcementContext constraintEnforcement() throws RecognitionException {
		ConstraintEnforcementContext _localctx = new ConstraintEnforcementContext(_ctx, getState());
		enterRule(_localctx, 862, RULE_constraintEnforcement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6827);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT_SYMBOL) {
				{
				setState(6826);
				match(NOT_SYMBOL);
				}
			}

			setState(6829);
			match(ENFORCED_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableConstraintDefContext extends ParserRuleContext {
		public Token type;
		public KeyListVariantsContext keyListVariants() {
			return getRuleContext(KeyListVariantsContext.class,0);
		}
		public TerminalNode KEY_SYMBOL() { return getToken(MultiQueryMySQLParser.KEY_SYMBOL, 0); }
		public TerminalNode INDEX_SYMBOL() { return getToken(MultiQueryMySQLParser.INDEX_SYMBOL, 0); }
		public IndexNameAndTypeContext indexNameAndType() {
			return getRuleContext(IndexNameAndTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public TerminalNode FULLTEXT_SYMBOL() { return getToken(MultiQueryMySQLParser.FULLTEXT_SYMBOL, 0); }
		public KeyOrIndexContext keyOrIndex() {
			return getRuleContext(KeyOrIndexContext.class,0);
		}
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public List<FulltextIndexOptionContext> fulltextIndexOption() {
			return getRuleContexts(FulltextIndexOptionContext.class);
		}
		public FulltextIndexOptionContext fulltextIndexOption(int i) {
			return getRuleContext(FulltextIndexOptionContext.class,i);
		}
		public TerminalNode SPATIAL_SYMBOL() { return getToken(MultiQueryMySQLParser.SPATIAL_SYMBOL, 0); }
		public List<SpatialIndexOptionContext> spatialIndexOption() {
			return getRuleContexts(SpatialIndexOptionContext.class);
		}
		public SpatialIndexOptionContext spatialIndexOption(int i) {
			return getRuleContext(SpatialIndexOptionContext.class,i);
		}
		public KeyListContext keyList() {
			return getRuleContext(KeyListContext.class,0);
		}
		public ReferencesContext references() {
			return getRuleContext(ReferencesContext.class,0);
		}
		public CheckConstraintContext checkConstraint() {
			return getRuleContext(CheckConstraintContext.class,0);
		}
		public ConstraintNameContext constraintName() {
			return getRuleContext(ConstraintNameContext.class,0);
		}
		public TerminalNode FOREIGN_SYMBOL() { return getToken(MultiQueryMySQLParser.FOREIGN_SYMBOL, 0); }
		public TerminalNode PRIMARY_SYMBOL() { return getToken(MultiQueryMySQLParser.PRIMARY_SYMBOL, 0); }
		public TerminalNode UNIQUE_SYMBOL() { return getToken(MultiQueryMySQLParser.UNIQUE_SYMBOL, 0); }
		public ConstraintEnforcementContext constraintEnforcement() {
			return getRuleContext(ConstraintEnforcementContext.class,0);
		}
		public TableConstraintDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableConstraintDef; }
	}

	public final TableConstraintDefContext tableConstraintDef() throws RecognitionException {
		TableConstraintDefContext _localctx = new TableConstraintDefContext(_ctx, getState());
		enterRule(_localctx, 864, RULE_tableConstraintDef);
		int _la;
		try {
			int _alt;
			setState(6906);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INDEX_SYMBOL:
			case KEY_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6831);
				((TableConstraintDefContext)_localctx).type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX_SYMBOL || _la==KEY_SYMBOL) ) {
					((TableConstraintDefContext)_localctx).type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6833);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,864,_ctx) ) {
				case 1:
					{
					setState(6832);
					indexNameAndType();
					}
					break;
				}
				setState(6835);
				keyListVariants();
				setState(6839);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,865,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6836);
						indexOption();
						}
						} 
					}
					setState(6841);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,865,_ctx);
				}
				}
				break;
			case FULLTEXT_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6842);
				((TableConstraintDefContext)_localctx).type = match(FULLTEXT_SYMBOL);
				setState(6844);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,866,_ctx) ) {
				case 1:
					{
					setState(6843);
					keyOrIndex();
					}
					break;
				}
				setState(6847);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,867,_ctx) ) {
				case 1:
					{
					setState(6846);
					indexName();
					}
					break;
				}
				setState(6849);
				keyListVariants();
				setState(6853);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,868,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6850);
						fulltextIndexOption();
						}
						} 
					}
					setState(6855);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,868,_ctx);
				}
				}
				break;
			case SPATIAL_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(6856);
				((TableConstraintDefContext)_localctx).type = match(SPATIAL_SYMBOL);
				setState(6858);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,869,_ctx) ) {
				case 1:
					{
					setState(6857);
					keyOrIndex();
					}
					break;
				}
				setState(6861);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,870,_ctx) ) {
				case 1:
					{
					setState(6860);
					indexName();
					}
					break;
				}
				setState(6863);
				keyListVariants();
				setState(6867);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,871,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6864);
						spatialIndexOption();
						}
						} 
					}
					setState(6869);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,871,_ctx);
				}
				}
				break;
			case CHECK_SYMBOL:
			case CONSTRAINT_SYMBOL:
			case FOREIGN_SYMBOL:
			case PRIMARY_SYMBOL:
			case UNIQUE_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(6871);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT_SYMBOL) {
					{
					setState(6870);
					constraintName();
					}
				}

				setState(6904);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PRIMARY_SYMBOL:
				case UNIQUE_SYMBOL:
					{
					setState(6879);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case PRIMARY_SYMBOL:
						{
						setState(6873);
						((TableConstraintDefContext)_localctx).type = match(PRIMARY_SYMBOL);
						setState(6874);
						match(KEY_SYMBOL);
						}
						break;
					case UNIQUE_SYMBOL:
						{
						setState(6875);
						((TableConstraintDefContext)_localctx).type = match(UNIQUE_SYMBOL);
						setState(6877);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,873,_ctx) ) {
						case 1:
							{
							setState(6876);
							keyOrIndex();
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(6882);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,875,_ctx) ) {
					case 1:
						{
						setState(6881);
						indexNameAndType();
						}
						break;
					}
					setState(6884);
					keyListVariants();
					setState(6888);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,876,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(6885);
							indexOption();
							}
							} 
						}
						setState(6890);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,876,_ctx);
					}
					}
					break;
				case FOREIGN_SYMBOL:
					{
					setState(6891);
					((TableConstraintDefContext)_localctx).type = match(FOREIGN_SYMBOL);
					setState(6892);
					match(KEY_SYMBOL);
					setState(6894);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,877,_ctx) ) {
					case 1:
						{
						setState(6893);
						indexName();
						}
						break;
					}
					setState(6896);
					keyList();
					setState(6897);
					references();
					}
					break;
				case CHECK_SYMBOL:
					{
					setState(6899);
					checkConstraint();
					setState(6902);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,878,_ctx) ) {
					case 1:
						{
						setState(6900);
						if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
						setState(6901);
						constraintEnforcement();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintNameContext extends ParserRuleContext {
		public TerminalNode CONSTRAINT_SYMBOL() { return getToken(MultiQueryMySQLParser.CONSTRAINT_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ConstraintNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintName; }
	}

	public final ConstraintNameContext constraintName() throws RecognitionException {
		ConstraintNameContext _localctx = new ConstraintNameContext(_ctx, getState());
		enterRule(_localctx, 866, RULE_constraintName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6908);
			match(CONSTRAINT_SYMBOL);
			setState(6910);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,881,_ctx) ) {
			case 1:
				{
				setState(6909);
				identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FieldDefinitionContext extends ParserRuleContext {
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode AS_SYMBOL() { return getToken(MultiQueryMySQLParser.AS_SYMBOL, 0); }
		public ExprWithParenthesesContext exprWithParentheses() {
			return getRuleContext(ExprWithParenthesesContext.class,0);
		}
		public List<ColumnAttributeContext> columnAttribute() {
			return getRuleContexts(ColumnAttributeContext.class);
		}
		public ColumnAttributeContext columnAttribute(int i) {
			return getRuleContext(ColumnAttributeContext.class,i);
		}
		public CollateContext collate() {
			return getRuleContext(CollateContext.class,0);
		}
		public TerminalNode GENERATED_SYMBOL() { return getToken(MultiQueryMySQLParser.GENERATED_SYMBOL, 0); }
		public TerminalNode ALWAYS_SYMBOL() { return getToken(MultiQueryMySQLParser.ALWAYS_SYMBOL, 0); }
		public TerminalNode VIRTUAL_SYMBOL() { return getToken(MultiQueryMySQLParser.VIRTUAL_SYMBOL, 0); }
		public TerminalNode STORED_SYMBOL() { return getToken(MultiQueryMySQLParser.STORED_SYMBOL, 0); }
		public List<GcolAttributeContext> gcolAttribute() {
			return getRuleContexts(GcolAttributeContext.class);
		}
		public GcolAttributeContext gcolAttribute(int i) {
			return getRuleContext(GcolAttributeContext.class,i);
		}
		public FieldDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldDefinition; }
	}

	public final FieldDefinitionContext fieldDefinition() throws RecognitionException {
		FieldDefinitionContext _localctx = new FieldDefinitionContext(_ctx, getState());
		enterRule(_localctx, 868, RULE_fieldDefinition);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6912);
			dataType();
			setState(6948);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,889,_ctx) ) {
			case 1:
				{
				setState(6916);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,882,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6913);
						columnAttribute();
						}
						} 
					}
					setState(6918);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,882,_ctx);
				}
				}
				break;
			case 2:
				{
				setState(6919);
				if (!(serverVersion >= 50707)) throw new FailedPredicateException(this, "serverVersion >= 50707");
				setState(6921);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE_SYMBOL) {
					{
					setState(6920);
					collate();
					}
				}

				setState(6925);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GENERATED_SYMBOL) {
					{
					setState(6923);
					match(GENERATED_SYMBOL);
					setState(6924);
					match(ALWAYS_SYMBOL);
					}
				}

				setState(6927);
				match(AS_SYMBOL);
				setState(6928);
				exprWithParentheses();
				setState(6930);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,885,_ctx) ) {
				case 1:
					{
					setState(6929);
					_la = _input.LA(1);
					if ( !(_la==STORED_SYMBOL || _la==VIRTUAL_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(6946);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,888,_ctx) ) {
				case 1:
					{
					setState(6932);
					if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
					setState(6936);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,886,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(6933);
							gcolAttribute();
							}
							} 
						}
						setState(6938);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,886,_ctx);
					}
					}
					break;
				case 2:
					{
					setState(6939);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(6943);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,887,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(6940);
							columnAttribute();
							}
							} 
						}
						setState(6945);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,887,_ctx);
					}
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnAttributeContext extends ParserRuleContext {
		public Token value;
		public NullLiteralContext nullLiteral() {
			return getRuleContext(NullLiteralContext.class,0);
		}
		public TerminalNode NOT_SYMBOL() { return getToken(MultiQueryMySQLParser.NOT_SYMBOL, 0); }
		public TerminalNode SECONDARY_SYMBOL() { return getToken(MultiQueryMySQLParser.SECONDARY_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
		public SignedLiteralContext signedLiteral() {
			return getRuleContext(SignedLiteralContext.class,0);
		}
		public TerminalNode NOW_SYMBOL() { return getToken(MultiQueryMySQLParser.NOW_SYMBOL, 0); }
		public ExprWithParenthesesContext exprWithParentheses() {
			return getRuleContext(ExprWithParenthesesContext.class,0);
		}
		public TimeFunctionParametersContext timeFunctionParameters() {
			return getRuleContext(TimeFunctionParametersContext.class,0);
		}
		public TerminalNode UPDATE_SYMBOL() { return getToken(MultiQueryMySQLParser.UPDATE_SYMBOL, 0); }
		public TerminalNode ON_SYMBOL() { return getToken(MultiQueryMySQLParser.ON_SYMBOL, 0); }
		public TerminalNode AUTO_INCREMENT_SYMBOL() { return getToken(MultiQueryMySQLParser.AUTO_INCREMENT_SYMBOL, 0); }
		public TerminalNode VALUE_SYMBOL() { return getToken(MultiQueryMySQLParser.VALUE_SYMBOL, 0); }
		public TerminalNode SERIAL_SYMBOL() { return getToken(MultiQueryMySQLParser.SERIAL_SYMBOL, 0); }
		public TerminalNode KEY_SYMBOL() { return getToken(MultiQueryMySQLParser.KEY_SYMBOL, 0); }
		public TerminalNode PRIMARY_SYMBOL() { return getToken(MultiQueryMySQLParser.PRIMARY_SYMBOL, 0); }
		public TerminalNode UNIQUE_SYMBOL() { return getToken(MultiQueryMySQLParser.UNIQUE_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode COMMENT_SYMBOL() { return getToken(MultiQueryMySQLParser.COMMENT_SYMBOL, 0); }
		public CollateContext collate() {
			return getRuleContext(CollateContext.class,0);
		}
		public ColumnFormatContext columnFormat() {
			return getRuleContext(ColumnFormatContext.class,0);
		}
		public TerminalNode COLUMN_FORMAT_SYMBOL() { return getToken(MultiQueryMySQLParser.COLUMN_FORMAT_SYMBOL, 0); }
		public StorageMediaContext storageMedia() {
			return getRuleContext(StorageMediaContext.class,0);
		}
		public TerminalNode STORAGE_SYMBOL() { return getToken(MultiQueryMySQLParser.STORAGE_SYMBOL, 0); }
		public Real_ulonglong_numberContext real_ulonglong_number() {
			return getRuleContext(Real_ulonglong_numberContext.class,0);
		}
		public TerminalNode SRID_SYMBOL() { return getToken(MultiQueryMySQLParser.SRID_SYMBOL, 0); }
		public CheckConstraintContext checkConstraint() {
			return getRuleContext(CheckConstraintContext.class,0);
		}
		public ConstraintNameContext constraintName() {
			return getRuleContext(ConstraintNameContext.class,0);
		}
		public ConstraintEnforcementContext constraintEnforcement() {
			return getRuleContext(ConstraintEnforcementContext.class,0);
		}
		public ColumnAttributeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnAttribute; }
	}

	public final ColumnAttributeContext columnAttribute() throws RecognitionException {
		ColumnAttributeContext _localctx = new ColumnAttributeContext(_ctx, getState());
		enterRule(_localctx, 870, RULE_columnAttribute);
		int _la;
		try {
			setState(7002);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,897,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6951);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT_SYMBOL) {
					{
					setState(6950);
					match(NOT_SYMBOL);
					}
				}

				setState(6953);
				nullLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6954);
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				setState(6955);
				match(NOT_SYMBOL);
				setState(6956);
				match(SECONDARY_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6957);
				((ColumnAttributeContext)_localctx).value = match(DEFAULT_SYMBOL);
				setState(6965);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,892,_ctx) ) {
				case 1:
					{
					setState(6958);
					signedLiteral();
					}
					break;
				case 2:
					{
					setState(6959);
					match(NOW_SYMBOL);
					setState(6961);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,891,_ctx) ) {
					case 1:
						{
						setState(6960);
						timeFunctionParameters();
						}
						break;
					}
					}
					break;
				case 3:
					{
					setState(6963);
					if (!(serverVersion >= 80013)) throw new FailedPredicateException(this, "serverVersion >= 80013");
					setState(6964);
					exprWithParentheses();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6967);
				((ColumnAttributeContext)_localctx).value = match(ON_SYMBOL);
				setState(6968);
				match(UPDATE_SYMBOL);
				setState(6969);
				match(NOW_SYMBOL);
				setState(6971);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,893,_ctx) ) {
				case 1:
					{
					setState(6970);
					timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6973);
				((ColumnAttributeContext)_localctx).value = match(AUTO_INCREMENT_SYMBOL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6974);
				((ColumnAttributeContext)_localctx).value = match(SERIAL_SYMBOL);
				setState(6975);
				match(DEFAULT_SYMBOL);
				setState(6976);
				match(VALUE_SYMBOL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6978);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIMARY_SYMBOL) {
					{
					setState(6977);
					match(PRIMARY_SYMBOL);
					}
				}

				setState(6980);
				((ColumnAttributeContext)_localctx).value = match(KEY_SYMBOL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6981);
				((ColumnAttributeContext)_localctx).value = match(UNIQUE_SYMBOL);
				setState(6983);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,895,_ctx) ) {
				case 1:
					{
					setState(6982);
					match(KEY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6985);
				((ColumnAttributeContext)_localctx).value = match(COMMENT_SYMBOL);
				setState(6986);
				textLiteral();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6987);
				collate();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6988);
				((ColumnAttributeContext)_localctx).value = match(COLUMN_FORMAT_SYMBOL);
				setState(6989);
				columnFormat();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6990);
				((ColumnAttributeContext)_localctx).value = match(STORAGE_SYMBOL);
				setState(6991);
				storageMedia();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6992);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(6993);
				((ColumnAttributeContext)_localctx).value = match(SRID_SYMBOL);
				setState(6994);
				real_ulonglong_number();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(6995);
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				setState(6997);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT_SYMBOL) {
					{
					setState(6996);
					constraintName();
					}
				}

				setState(6999);
				checkConstraint();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(7000);
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				setState(7001);
				constraintEnforcement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnFormatContext extends ParserRuleContext {
		public TerminalNode FIXED_SYMBOL() { return getToken(MultiQueryMySQLParser.FIXED_SYMBOL, 0); }
		public TerminalNode DYNAMIC_SYMBOL() { return getToken(MultiQueryMySQLParser.DYNAMIC_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
		public ColumnFormatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnFormat; }
	}

	public final ColumnFormatContext columnFormat() throws RecognitionException {
		ColumnFormatContext _localctx = new ColumnFormatContext(_ctx, getState());
		enterRule(_localctx, 872, RULE_columnFormat);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7004);
			_la = _input.LA(1);
			if ( !(_la==DYNAMIC_SYMBOL || _la==FIXED_SYMBOL || _la==DEFAULT_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StorageMediaContext extends ParserRuleContext {
		public TerminalNode DISK_SYMBOL() { return getToken(MultiQueryMySQLParser.DISK_SYMBOL, 0); }
		public TerminalNode MEMORY_SYMBOL() { return getToken(MultiQueryMySQLParser.MEMORY_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
		public StorageMediaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_storageMedia; }
	}

	public final StorageMediaContext storageMedia() throws RecognitionException {
		StorageMediaContext _localctx = new StorageMediaContext(_ctx, getState());
		enterRule(_localctx, 874, RULE_storageMedia);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7006);
			_la = _input.LA(1);
			if ( !(_la==DISK_SYMBOL || _la==MEMORY_SYMBOL || _la==DEFAULT_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GcolAttributeContext extends ParserRuleContext {
		public TerminalNode UNIQUE_SYMBOL() { return getToken(MultiQueryMySQLParser.UNIQUE_SYMBOL, 0); }
		public TerminalNode KEY_SYMBOL() { return getToken(MultiQueryMySQLParser.KEY_SYMBOL, 0); }
		public TerminalNode COMMENT_SYMBOL() { return getToken(MultiQueryMySQLParser.COMMENT_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public TerminalNode NULL_SYMBOL() { return getToken(MultiQueryMySQLParser.NULL_SYMBOL, 0); }
		public NotRuleContext notRule() {
			return getRuleContext(NotRuleContext.class,0);
		}
		public TerminalNode PRIMARY_SYMBOL() { return getToken(MultiQueryMySQLParser.PRIMARY_SYMBOL, 0); }
		public GcolAttributeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_gcolAttribute; }
	}

	public final GcolAttributeContext gcolAttribute() throws RecognitionException {
		GcolAttributeContext _localctx = new GcolAttributeContext(_ctx, getState());
		enterRule(_localctx, 876, RULE_gcolAttribute);
		int _la;
		try {
			setState(7022);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNIQUE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7008);
				match(UNIQUE_SYMBOL);
				setState(7010);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,898,_ctx) ) {
				case 1:
					{
					setState(7009);
					match(KEY_SYMBOL);
					}
					break;
				}
				}
				break;
			case COMMENT_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7012);
				match(COMMENT_SYMBOL);
				setState(7013);
				textString();
				}
				break;
			case NOT2_SYMBOL:
			case NOT_SYMBOL:
			case NULL_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(7015);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT2_SYMBOL || _la==NOT_SYMBOL) {
					{
					setState(7014);
					notRule();
					}
				}

				setState(7017);
				match(NULL_SYMBOL);
				}
				break;
			case KEY_SYMBOL:
			case PRIMARY_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(7019);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIMARY_SYMBOL) {
					{
					setState(7018);
					match(PRIMARY_SYMBOL);
					}
				}

				setState(7021);
				match(KEY_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferencesContext extends ParserRuleContext {
		public Token match;
		public Token option;
		public TerminalNode REFERENCES_SYMBOL() { return getToken(MultiQueryMySQLParser.REFERENCES_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public IdentifierListWithParenthesesContext identifierListWithParentheses() {
			return getRuleContext(IdentifierListWithParenthesesContext.class,0);
		}
		public TerminalNode MATCH_SYMBOL() { return getToken(MultiQueryMySQLParser.MATCH_SYMBOL, 0); }
		public List<TerminalNode> ON_SYMBOL() { return getTokens(MultiQueryMySQLParser.ON_SYMBOL); }
		public TerminalNode ON_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.ON_SYMBOL, i);
		}
		public List<DeleteOptionContext> deleteOption() {
			return getRuleContexts(DeleteOptionContext.class);
		}
		public DeleteOptionContext deleteOption(int i) {
			return getRuleContext(DeleteOptionContext.class,i);
		}
		public TerminalNode UPDATE_SYMBOL() { return getToken(MultiQueryMySQLParser.UPDATE_SYMBOL, 0); }
		public TerminalNode DELETE_SYMBOL() { return getToken(MultiQueryMySQLParser.DELETE_SYMBOL, 0); }
		public TerminalNode FULL_SYMBOL() { return getToken(MultiQueryMySQLParser.FULL_SYMBOL, 0); }
		public TerminalNode PARTIAL_SYMBOL() { return getToken(MultiQueryMySQLParser.PARTIAL_SYMBOL, 0); }
		public TerminalNode SIMPLE_SYMBOL() { return getToken(MultiQueryMySQLParser.SIMPLE_SYMBOL, 0); }
		public ReferencesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_references; }
	}

	public final ReferencesContext references() throws RecognitionException {
		ReferencesContext _localctx = new ReferencesContext(_ctx, getState());
		enterRule(_localctx, 878, RULE_references);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7024);
			match(REFERENCES_SYMBOL);
			setState(7025);
			tableRef();
			setState(7027);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,902,_ctx) ) {
			case 1:
				{
				setState(7026);
				identifierListWithParentheses();
				}
				break;
			}
			setState(7031);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,903,_ctx) ) {
			case 1:
				{
				setState(7029);
				match(MATCH_SYMBOL);
				setState(7030);
				((ReferencesContext)_localctx).match = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULL_SYMBOL || _la==PARTIAL_SYMBOL || _la==SIMPLE_SYMBOL) ) {
					((ReferencesContext)_localctx).match = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(7049);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,906,_ctx) ) {
			case 1:
				{
				setState(7033);
				match(ON_SYMBOL);
				setState(7034);
				((ReferencesContext)_localctx).option = match(UPDATE_SYMBOL);
				setState(7035);
				deleteOption();
				setState(7039);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,904,_ctx) ) {
				case 1:
					{
					setState(7036);
					match(ON_SYMBOL);
					setState(7037);
					match(DELETE_SYMBOL);
					setState(7038);
					deleteOption();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(7041);
				match(ON_SYMBOL);
				setState(7042);
				((ReferencesContext)_localctx).option = match(DELETE_SYMBOL);
				setState(7043);
				deleteOption();
				setState(7047);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,905,_ctx) ) {
				case 1:
					{
					setState(7044);
					match(ON_SYMBOL);
					setState(7045);
					match(UPDATE_SYMBOL);
					setState(7046);
					deleteOption();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteOptionContext extends ParserRuleContext {
		public TerminalNode RESTRICT_SYMBOL() { return getToken(MultiQueryMySQLParser.RESTRICT_SYMBOL, 0); }
		public TerminalNode CASCADE_SYMBOL() { return getToken(MultiQueryMySQLParser.CASCADE_SYMBOL, 0); }
		public TerminalNode SET_SYMBOL() { return getToken(MultiQueryMySQLParser.SET_SYMBOL, 0); }
		public NullLiteralContext nullLiteral() {
			return getRuleContext(NullLiteralContext.class,0);
		}
		public TerminalNode NO_SYMBOL() { return getToken(MultiQueryMySQLParser.NO_SYMBOL, 0); }
		public TerminalNode ACTION_SYMBOL() { return getToken(MultiQueryMySQLParser.ACTION_SYMBOL, 0); }
		public DeleteOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteOption; }
	}

	public final DeleteOptionContext deleteOption() throws RecognitionException {
		DeleteOptionContext _localctx = new DeleteOptionContext(_ctx, getState());
		enterRule(_localctx, 880, RULE_deleteOption);
		int _la;
		try {
			setState(7056);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CASCADE_SYMBOL:
			case RESTRICT_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7051);
				_la = _input.LA(1);
				if ( !(_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SET_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7052);
				match(SET_SYMBOL);
				setState(7053);
				nullLiteral();
				}
				break;
			case NO_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(7054);
				match(NO_SYMBOL);
				setState(7055);
				match(ACTION_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyListContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<KeyPartContext> keyPart() {
			return getRuleContexts(KeyPartContext.class);
		}
		public KeyPartContext keyPart(int i) {
			return getRuleContext(KeyPartContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public KeyListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyList; }
	}

	public final KeyListContext keyList() throws RecognitionException {
		KeyListContext _localctx = new KeyListContext(_ctx, getState());
		enterRule(_localctx, 882, RULE_keyList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7058);
			match(OPEN_PAR_SYMBOL);
			setState(7059);
			keyPart();
			setState(7064);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(7060);
				match(COMMA_SYMBOL);
				setState(7061);
				keyPart();
				}
				}
				setState(7066);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7067);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyPartContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public FieldLengthContext fieldLength() {
			return getRuleContext(FieldLengthContext.class,0);
		}
		public DirectionContext direction() {
			return getRuleContext(DirectionContext.class,0);
		}
		public KeyPartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyPart; }
	}

	public final KeyPartContext keyPart() throws RecognitionException {
		KeyPartContext _localctx = new KeyPartContext(_ctx, getState());
		enterRule(_localctx, 884, RULE_keyPart);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7069);
			identifier();
			setState(7071);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				setState(7070);
				fieldLength();
				}
			}

			setState(7074);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC_SYMBOL || _la==DESC_SYMBOL) {
				{
				setState(7073);
				direction();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyListWithExpressionContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<KeyPartOrExpressionContext> keyPartOrExpression() {
			return getRuleContexts(KeyPartOrExpressionContext.class);
		}
		public KeyPartOrExpressionContext keyPartOrExpression(int i) {
			return getRuleContext(KeyPartOrExpressionContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public KeyListWithExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyListWithExpression; }
	}

	public final KeyListWithExpressionContext keyListWithExpression() throws RecognitionException {
		KeyListWithExpressionContext _localctx = new KeyListWithExpressionContext(_ctx, getState());
		enterRule(_localctx, 886, RULE_keyListWithExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7076);
			match(OPEN_PAR_SYMBOL);
			setState(7077);
			keyPartOrExpression();
			setState(7082);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(7078);
				match(COMMA_SYMBOL);
				setState(7079);
				keyPartOrExpression();
				}
				}
				setState(7084);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7085);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyPartOrExpressionContext extends ParserRuleContext {
		public KeyPartContext keyPart() {
			return getRuleContext(KeyPartContext.class,0);
		}
		public ExprWithParenthesesContext exprWithParentheses() {
			return getRuleContext(ExprWithParenthesesContext.class,0);
		}
		public DirectionContext direction() {
			return getRuleContext(DirectionContext.class,0);
		}
		public KeyPartOrExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyPartOrExpression; }
	}

	public final KeyPartOrExpressionContext keyPartOrExpression() throws RecognitionException {
		KeyPartOrExpressionContext _localctx = new KeyPartOrExpressionContext(_ctx, getState());
		enterRule(_localctx, 888, RULE_keyPartOrExpression);
		int _la;
		try {
			setState(7092);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,913,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7087);
				keyPart();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7088);
				exprWithParentheses();
				setState(7090);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC_SYMBOL || _la==DESC_SYMBOL) {
					{
					setState(7089);
					direction();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyListVariantsContext extends ParserRuleContext {
		public KeyListWithExpressionContext keyListWithExpression() {
			return getRuleContext(KeyListWithExpressionContext.class,0);
		}
		public KeyListContext keyList() {
			return getRuleContext(KeyListContext.class,0);
		}
		public KeyListVariantsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyListVariants; }
	}

	public final KeyListVariantsContext keyListVariants() throws RecognitionException {
		KeyListVariantsContext _localctx = new KeyListVariantsContext(_ctx, getState());
		enterRule(_localctx, 890, RULE_keyListVariants);
		try {
			setState(7098);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,914,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7094);
				if (!(serverVersion >= 80013)) throw new FailedPredicateException(this, "serverVersion >= 80013");
				setState(7095);
				keyListWithExpression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7096);
				if (!(serverVersion < 80013)) throw new FailedPredicateException(this, "serverVersion < 80013");
				setState(7097);
				keyList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexTypeContext extends ParserRuleContext {
		public Token algorithm;
		public TerminalNode BTREE_SYMBOL() { return getToken(MultiQueryMySQLParser.BTREE_SYMBOL, 0); }
		public TerminalNode RTREE_SYMBOL() { return getToken(MultiQueryMySQLParser.RTREE_SYMBOL, 0); }
		public TerminalNode HASH_SYMBOL() { return getToken(MultiQueryMySQLParser.HASH_SYMBOL, 0); }
		public IndexTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexType; }
	}

	public final IndexTypeContext indexType() throws RecognitionException {
		IndexTypeContext _localctx = new IndexTypeContext(_ctx, getState());
		enterRule(_localctx, 892, RULE_indexType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7100);
			((IndexTypeContext)_localctx).algorithm = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==BTREE_SYMBOL || _la==HASH_SYMBOL || _la==RTREE_SYMBOL) ) {
				((IndexTypeContext)_localctx).algorithm = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexOptionContext extends ParserRuleContext {
		public CommonIndexOptionContext commonIndexOption() {
			return getRuleContext(CommonIndexOptionContext.class,0);
		}
		public IndexTypeClauseContext indexTypeClause() {
			return getRuleContext(IndexTypeClauseContext.class,0);
		}
		public IndexOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexOption; }
	}

	public final IndexOptionContext indexOption() throws RecognitionException {
		IndexOptionContext _localctx = new IndexOptionContext(_ctx, getState());
		enterRule(_localctx, 894, RULE_indexOption);
		try {
			setState(7104);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,915,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7102);
				commonIndexOption();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7103);
				indexTypeClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommonIndexOptionContext extends ParserRuleContext {
		public TerminalNode KEY_BLOCK_SIZE_SYMBOL() { return getToken(MultiQueryMySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0); }
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
		public TerminalNode COMMENT_SYMBOL() { return getToken(MultiQueryMySQLParser.COMMENT_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public VisibilityContext visibility() {
			return getRuleContext(VisibilityContext.class,0);
		}
		public CommonIndexOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commonIndexOption; }
	}

	public final CommonIndexOptionContext commonIndexOption() throws RecognitionException {
		CommonIndexOptionContext _localctx = new CommonIndexOptionContext(_ctx, getState());
		enterRule(_localctx, 896, RULE_commonIndexOption);
		int _la;
		try {
			setState(7115);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,917,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7106);
				match(KEY_BLOCK_SIZE_SYMBOL);
				setState(7108);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7107);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7110);
				ulong_number();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7111);
				match(COMMENT_SYMBOL);
				setState(7112);
				textLiteral();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7113);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(7114);
				visibility();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VisibilityContext extends ParserRuleContext {
		public TerminalNode VISIBLE_SYMBOL() { return getToken(MultiQueryMySQLParser.VISIBLE_SYMBOL, 0); }
		public TerminalNode INVISIBLE_SYMBOL() { return getToken(MultiQueryMySQLParser.INVISIBLE_SYMBOL, 0); }
		public VisibilityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_visibility; }
	}

	public final VisibilityContext visibility() throws RecognitionException {
		VisibilityContext _localctx = new VisibilityContext(_ctx, getState());
		enterRule(_localctx, 898, RULE_visibility);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7117);
			_la = _input.LA(1);
			if ( !(_la==INVISIBLE_SYMBOL || _la==VISIBLE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexTypeClauseContext extends ParserRuleContext {
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public TerminalNode USING_SYMBOL() { return getToken(MultiQueryMySQLParser.USING_SYMBOL, 0); }
		public TerminalNode TYPE_SYMBOL() { return getToken(MultiQueryMySQLParser.TYPE_SYMBOL, 0); }
		public IndexTypeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexTypeClause; }
	}

	public final IndexTypeClauseContext indexTypeClause() throws RecognitionException {
		IndexTypeClauseContext _localctx = new IndexTypeClauseContext(_ctx, getState());
		enterRule(_localctx, 900, RULE_indexTypeClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7119);
			_la = _input.LA(1);
			if ( !(_la==TYPE_SYMBOL || _la==USING_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7120);
			indexType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FulltextIndexOptionContext extends ParserRuleContext {
		public CommonIndexOptionContext commonIndexOption() {
			return getRuleContext(CommonIndexOptionContext.class,0);
		}
		public TerminalNode WITH_SYMBOL() { return getToken(MultiQueryMySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode PARSER_SYMBOL() { return getToken(MultiQueryMySQLParser.PARSER_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public FulltextIndexOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fulltextIndexOption; }
	}

	public final FulltextIndexOptionContext fulltextIndexOption() throws RecognitionException {
		FulltextIndexOptionContext _localctx = new FulltextIndexOptionContext(_ctx, getState());
		enterRule(_localctx, 902, RULE_fulltextIndexOption);
		try {
			setState(7126);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,918,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7122);
				commonIndexOption();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7123);
				match(WITH_SYMBOL);
				setState(7124);
				match(PARSER_SYMBOL);
				setState(7125);
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpatialIndexOptionContext extends ParserRuleContext {
		public CommonIndexOptionContext commonIndexOption() {
			return getRuleContext(CommonIndexOptionContext.class,0);
		}
		public SpatialIndexOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_spatialIndexOption; }
	}

	public final SpatialIndexOptionContext spatialIndexOption() throws RecognitionException {
		SpatialIndexOptionContext _localctx = new SpatialIndexOptionContext(_ctx, getState());
		enterRule(_localctx, 904, RULE_spatialIndexOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7128);
			commonIndexOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeDefinitionContext extends ParserRuleContext {
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode EOF() { return getToken(MultiQueryMySQLParser.EOF, 0); }
		public DataTypeDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataTypeDefinition; }
	}

	public final DataTypeDefinitionContext dataTypeDefinition() throws RecognitionException {
		DataTypeDefinitionContext _localctx = new DataTypeDefinitionContext(_ctx, getState());
		enterRule(_localctx, 906, RULE_dataTypeDefinition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7130);
			dataType();
			setState(7131);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeContext extends ParserRuleContext {
		public Token type;
		public TerminalNode INT_SYMBOL() { return getToken(MultiQueryMySQLParser.INT_SYMBOL, 0); }
		public TerminalNode TINYINT_SYMBOL() { return getToken(MultiQueryMySQLParser.TINYINT_SYMBOL, 0); }
		public TerminalNode SMALLINT_SYMBOL() { return getToken(MultiQueryMySQLParser.SMALLINT_SYMBOL, 0); }
		public TerminalNode MEDIUMINT_SYMBOL() { return getToken(MultiQueryMySQLParser.MEDIUMINT_SYMBOL, 0); }
		public TerminalNode BIGINT_SYMBOL() { return getToken(MultiQueryMySQLParser.BIGINT_SYMBOL, 0); }
		public FieldLengthContext fieldLength() {
			return getRuleContext(FieldLengthContext.class,0);
		}
		public FieldOptionsContext fieldOptions() {
			return getRuleContext(FieldOptionsContext.class,0);
		}
		public TerminalNode REAL_SYMBOL() { return getToken(MultiQueryMySQLParser.REAL_SYMBOL, 0); }
		public TerminalNode DOUBLE_SYMBOL() { return getToken(MultiQueryMySQLParser.DOUBLE_SYMBOL, 0); }
		public PrecisionContext precision() {
			return getRuleContext(PrecisionContext.class,0);
		}
		public TerminalNode PRECISION_SYMBOL() { return getToken(MultiQueryMySQLParser.PRECISION_SYMBOL, 0); }
		public TerminalNode FLOAT_SYMBOL() { return getToken(MultiQueryMySQLParser.FLOAT_SYMBOL, 0); }
		public TerminalNode DECIMAL_SYMBOL() { return getToken(MultiQueryMySQLParser.DECIMAL_SYMBOL, 0); }
		public TerminalNode NUMERIC_SYMBOL() { return getToken(MultiQueryMySQLParser.NUMERIC_SYMBOL, 0); }
		public TerminalNode FIXED_SYMBOL() { return getToken(MultiQueryMySQLParser.FIXED_SYMBOL, 0); }
		public FloatOptionsContext floatOptions() {
			return getRuleContext(FloatOptionsContext.class,0);
		}
		public TerminalNode BIT_SYMBOL() { return getToken(MultiQueryMySQLParser.BIT_SYMBOL, 0); }
		public TerminalNode BOOL_SYMBOL() { return getToken(MultiQueryMySQLParser.BOOL_SYMBOL, 0); }
		public TerminalNode BOOLEAN_SYMBOL() { return getToken(MultiQueryMySQLParser.BOOLEAN_SYMBOL, 0); }
		public TerminalNode CHAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CHAR_SYMBOL, 0); }
		public CharsetWithOptBinaryContext charsetWithOptBinary() {
			return getRuleContext(CharsetWithOptBinaryContext.class,0);
		}
		public NcharContext nchar() {
			return getRuleContext(NcharContext.class,0);
		}
		public TerminalNode BINARY_SYMBOL() { return getToken(MultiQueryMySQLParser.BINARY_SYMBOL, 0); }
		public TerminalNode VARYING_SYMBOL() { return getToken(MultiQueryMySQLParser.VARYING_SYMBOL, 0); }
		public TerminalNode VARCHAR_SYMBOL() { return getToken(MultiQueryMySQLParser.VARCHAR_SYMBOL, 0); }
		public TerminalNode NATIONAL_SYMBOL() { return getToken(MultiQueryMySQLParser.NATIONAL_SYMBOL, 0); }
		public TerminalNode NVARCHAR_SYMBOL() { return getToken(MultiQueryMySQLParser.NVARCHAR_SYMBOL, 0); }
		public TerminalNode NCHAR_SYMBOL() { return getToken(MultiQueryMySQLParser.NCHAR_SYMBOL, 0); }
		public TerminalNode VARBINARY_SYMBOL() { return getToken(MultiQueryMySQLParser.VARBINARY_SYMBOL, 0); }
		public TerminalNode YEAR_SYMBOL() { return getToken(MultiQueryMySQLParser.YEAR_SYMBOL, 0); }
		public TerminalNode DATE_SYMBOL() { return getToken(MultiQueryMySQLParser.DATE_SYMBOL, 0); }
		public TerminalNode TIME_SYMBOL() { return getToken(MultiQueryMySQLParser.TIME_SYMBOL, 0); }
		public TypeDatetimePrecisionContext typeDatetimePrecision() {
			return getRuleContext(TypeDatetimePrecisionContext.class,0);
		}
		public TerminalNode TIMESTAMP_SYMBOL() { return getToken(MultiQueryMySQLParser.TIMESTAMP_SYMBOL, 0); }
		public TerminalNode DATETIME_SYMBOL() { return getToken(MultiQueryMySQLParser.DATETIME_SYMBOL, 0); }
		public TerminalNode TINYBLOB_SYMBOL() { return getToken(MultiQueryMySQLParser.TINYBLOB_SYMBOL, 0); }
		public TerminalNode BLOB_SYMBOL() { return getToken(MultiQueryMySQLParser.BLOB_SYMBOL, 0); }
		public TerminalNode MEDIUMBLOB_SYMBOL() { return getToken(MultiQueryMySQLParser.MEDIUMBLOB_SYMBOL, 0); }
		public TerminalNode LONGBLOB_SYMBOL() { return getToken(MultiQueryMySQLParser.LONGBLOB_SYMBOL, 0); }
		public TerminalNode LONG_SYMBOL() { return getToken(MultiQueryMySQLParser.LONG_SYMBOL, 0); }
		public TerminalNode TINYTEXT_SYMBOL() { return getToken(MultiQueryMySQLParser.TINYTEXT_SYMBOL, 0); }
		public TerminalNode TEXT_SYMBOL() { return getToken(MultiQueryMySQLParser.TEXT_SYMBOL, 0); }
		public TerminalNode MEDIUMTEXT_SYMBOL() { return getToken(MultiQueryMySQLParser.MEDIUMTEXT_SYMBOL, 0); }
		public TerminalNode LONGTEXT_SYMBOL() { return getToken(MultiQueryMySQLParser.LONGTEXT_SYMBOL, 0); }
		public StringListContext stringList() {
			return getRuleContext(StringListContext.class,0);
		}
		public TerminalNode ENUM_SYMBOL() { return getToken(MultiQueryMySQLParser.ENUM_SYMBOL, 0); }
		public TerminalNode SET_SYMBOL() { return getToken(MultiQueryMySQLParser.SET_SYMBOL, 0); }
		public TerminalNode SERIAL_SYMBOL() { return getToken(MultiQueryMySQLParser.SERIAL_SYMBOL, 0); }
		public TerminalNode JSON_SYMBOL() { return getToken(MultiQueryMySQLParser.JSON_SYMBOL, 0); }
		public TerminalNode GEOMETRY_SYMBOL() { return getToken(MultiQueryMySQLParser.GEOMETRY_SYMBOL, 0); }
		public TerminalNode GEOMETRYCOLLECTION_SYMBOL() { return getToken(MultiQueryMySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
		public TerminalNode POINT_SYMBOL() { return getToken(MultiQueryMySQLParser.POINT_SYMBOL, 0); }
		public TerminalNode MULTIPOINT_SYMBOL() { return getToken(MultiQueryMySQLParser.MULTIPOINT_SYMBOL, 0); }
		public TerminalNode LINESTRING_SYMBOL() { return getToken(MultiQueryMySQLParser.LINESTRING_SYMBOL, 0); }
		public TerminalNode MULTILINESTRING_SYMBOL() { return getToken(MultiQueryMySQLParser.MULTILINESTRING_SYMBOL, 0); }
		public TerminalNode POLYGON_SYMBOL() { return getToken(MultiQueryMySQLParser.POLYGON_SYMBOL, 0); }
		public TerminalNode MULTIPOLYGON_SYMBOL() { return getToken(MultiQueryMySQLParser.MULTIPOLYGON_SYMBOL, 0); }
		public DataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataType; }
	}

	public final DataTypeContext dataType() throws RecognitionException {
		DataTypeContext _localctx = new DataTypeContext(_ctx, getState());
		enterRule(_localctx, 908, RULE_dataType);
		int _la;
		try {
			setState(7280);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,952,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7133);
				((DataTypeContext)_localctx).type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BIGINT_SYMBOL || _la==INT_SYMBOL || _la==MEDIUMINT_SYMBOL || _la==SMALLINT_SYMBOL || _la==TINYINT_SYMBOL) ) {
					((DataTypeContext)_localctx).type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7135);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,919,_ctx) ) {
				case 1:
					{
					setState(7134);
					fieldLength();
					}
					break;
				}
				setState(7138);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,920,_ctx) ) {
				case 1:
					{
					setState(7137);
					fieldOptions();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7145);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case REAL_SYMBOL:
					{
					setState(7140);
					((DataTypeContext)_localctx).type = match(REAL_SYMBOL);
					}
					break;
				case DOUBLE_SYMBOL:
					{
					setState(7141);
					((DataTypeContext)_localctx).type = match(DOUBLE_SYMBOL);
					setState(7143);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,921,_ctx) ) {
					case 1:
						{
						setState(7142);
						match(PRECISION_SYMBOL);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7148);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,923,_ctx) ) {
				case 1:
					{
					setState(7147);
					precision();
					}
					break;
				}
				setState(7151);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,924,_ctx) ) {
				case 1:
					{
					setState(7150);
					fieldOptions();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7153);
				((DataTypeContext)_localctx).type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FIXED_SYMBOL || _la==DECIMAL_SYMBOL || _la==FLOAT_SYMBOL || _la==NUMERIC_SYMBOL) ) {
					((DataTypeContext)_localctx).type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7155);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,925,_ctx) ) {
				case 1:
					{
					setState(7154);
					floatOptions();
					}
					break;
				}
				setState(7158);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,926,_ctx) ) {
				case 1:
					{
					setState(7157);
					fieldOptions();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7160);
				((DataTypeContext)_localctx).type = match(BIT_SYMBOL);
				setState(7162);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,927,_ctx) ) {
				case 1:
					{
					setState(7161);
					fieldLength();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7164);
				((DataTypeContext)_localctx).type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BOOL_SYMBOL || _la==BOOLEAN_SYMBOL) ) {
					((DataTypeContext)_localctx).type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7165);
				((DataTypeContext)_localctx).type = match(CHAR_SYMBOL);
				setState(7167);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,928,_ctx) ) {
				case 1:
					{
					setState(7166);
					fieldLength();
					}
					break;
				}
				setState(7170);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,929,_ctx) ) {
				case 1:
					{
					setState(7169);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7172);
				nchar();
				setState(7174);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,930,_ctx) ) {
				case 1:
					{
					setState(7173);
					fieldLength();
					}
					break;
				}
				setState(7177);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,931,_ctx) ) {
				case 1:
					{
					setState(7176);
					match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7179);
				((DataTypeContext)_localctx).type = match(BINARY_SYMBOL);
				setState(7181);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,932,_ctx) ) {
				case 1:
					{
					setState(7180);
					fieldLength();
					}
					break;
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7186);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHAR_SYMBOL:
					{
					setState(7183);
					((DataTypeContext)_localctx).type = match(CHAR_SYMBOL);
					setState(7184);
					match(VARYING_SYMBOL);
					}
					break;
				case VARCHAR_SYMBOL:
					{
					setState(7185);
					((DataTypeContext)_localctx).type = match(VARCHAR_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7188);
				fieldLength();
				setState(7190);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,934,_ctx) ) {
				case 1:
					{
					setState(7189);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(7202);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,935,_ctx) ) {
				case 1:
					{
					setState(7192);
					((DataTypeContext)_localctx).type = match(NATIONAL_SYMBOL);
					setState(7193);
					match(VARCHAR_SYMBOL);
					}
					break;
				case 2:
					{
					setState(7194);
					((DataTypeContext)_localctx).type = match(NVARCHAR_SYMBOL);
					}
					break;
				case 3:
					{
					setState(7195);
					((DataTypeContext)_localctx).type = match(NCHAR_SYMBOL);
					setState(7196);
					match(VARCHAR_SYMBOL);
					}
					break;
				case 4:
					{
					setState(7197);
					((DataTypeContext)_localctx).type = match(NATIONAL_SYMBOL);
					setState(7198);
					match(CHAR_SYMBOL);
					setState(7199);
					match(VARYING_SYMBOL);
					}
					break;
				case 5:
					{
					setState(7200);
					((DataTypeContext)_localctx).type = match(NCHAR_SYMBOL);
					setState(7201);
					match(VARYING_SYMBOL);
					}
					break;
				}
				setState(7204);
				fieldLength();
				setState(7206);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,936,_ctx) ) {
				case 1:
					{
					setState(7205);
					match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(7208);
				((DataTypeContext)_localctx).type = match(VARBINARY_SYMBOL);
				setState(7209);
				fieldLength();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(7210);
				((DataTypeContext)_localctx).type = match(YEAR_SYMBOL);
				setState(7212);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,937,_ctx) ) {
				case 1:
					{
					setState(7211);
					fieldLength();
					}
					break;
				}
				setState(7215);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,938,_ctx) ) {
				case 1:
					{
					setState(7214);
					fieldOptions();
					}
					break;
				}
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(7217);
				((DataTypeContext)_localctx).type = match(DATE_SYMBOL);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(7218);
				((DataTypeContext)_localctx).type = match(TIME_SYMBOL);
				setState(7220);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,939,_ctx) ) {
				case 1:
					{
					setState(7219);
					typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(7222);
				((DataTypeContext)_localctx).type = match(TIMESTAMP_SYMBOL);
				setState(7224);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,940,_ctx) ) {
				case 1:
					{
					setState(7223);
					typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(7226);
				((DataTypeContext)_localctx).type = match(DATETIME_SYMBOL);
				setState(7228);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,941,_ctx) ) {
				case 1:
					{
					setState(7227);
					typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(7230);
				((DataTypeContext)_localctx).type = match(TINYBLOB_SYMBOL);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(7231);
				((DataTypeContext)_localctx).type = match(BLOB_SYMBOL);
				setState(7233);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,942,_ctx) ) {
				case 1:
					{
					setState(7232);
					fieldLength();
					}
					break;
				}
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(7235);
				((DataTypeContext)_localctx).type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LONGBLOB_SYMBOL || _la==MEDIUMBLOB_SYMBOL) ) {
					((DataTypeContext)_localctx).type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(7236);
				((DataTypeContext)_localctx).type = match(LONG_SYMBOL);
				setState(7237);
				match(VARBINARY_SYMBOL);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(7238);
				((DataTypeContext)_localctx).type = match(LONG_SYMBOL);
				setState(7242);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,943,_ctx) ) {
				case 1:
					{
					setState(7239);
					match(CHAR_SYMBOL);
					setState(7240);
					match(VARYING_SYMBOL);
					}
					break;
				case 2:
					{
					setState(7241);
					match(VARCHAR_SYMBOL);
					}
					break;
				}
				setState(7245);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,944,_ctx) ) {
				case 1:
					{
					setState(7244);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(7247);
				((DataTypeContext)_localctx).type = match(TINYTEXT_SYMBOL);
				setState(7249);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,945,_ctx) ) {
				case 1:
					{
					setState(7248);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(7251);
				((DataTypeContext)_localctx).type = match(TEXT_SYMBOL);
				setState(7253);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,946,_ctx) ) {
				case 1:
					{
					setState(7252);
					fieldLength();
					}
					break;
				}
				setState(7256);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,947,_ctx) ) {
				case 1:
					{
					setState(7255);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(7258);
				((DataTypeContext)_localctx).type = match(MEDIUMTEXT_SYMBOL);
				setState(7260);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,948,_ctx) ) {
				case 1:
					{
					setState(7259);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(7262);
				((DataTypeContext)_localctx).type = match(LONGTEXT_SYMBOL);
				setState(7264);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,949,_ctx) ) {
				case 1:
					{
					setState(7263);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(7266);
				((DataTypeContext)_localctx).type = match(ENUM_SYMBOL);
				setState(7267);
				stringList();
				setState(7269);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,950,_ctx) ) {
				case 1:
					{
					setState(7268);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(7271);
				((DataTypeContext)_localctx).type = match(SET_SYMBOL);
				setState(7272);
				stringList();
				setState(7274);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,951,_ctx) ) {
				case 1:
					{
					setState(7273);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(7276);
				((DataTypeContext)_localctx).type = match(SERIAL_SYMBOL);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(7277);
				if (!(serverVersion >= 50708)) throw new FailedPredicateException(this, "serverVersion >= 50708");
				setState(7278);
				((DataTypeContext)_localctx).type = match(JSON_SYMBOL);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(7279);
				((DataTypeContext)_localctx).type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 151)) & ~0x3f) == 0 && ((1L << (_la - 151)) & ((1L << (GEOMETRY_SYMBOL - 151)) | (1L << (GEOMETRYCOLLECTION_SYMBOL - 151)) | (1L << (LINESTRING_SYMBOL - 151)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (MULTILINESTRING_SYMBOL - 224)) | (1L << (MULTIPOINT_SYMBOL - 224)) | (1L << (MULTIPOLYGON_SYMBOL - 224)) | (1L << (POINT_SYMBOL - 224)) | (1L << (POLYGON_SYMBOL - 224)))) != 0)) ) {
					((DataTypeContext)_localctx).type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NcharContext extends ParserRuleContext {
		public Token type;
		public TerminalNode NCHAR_SYMBOL() { return getToken(MultiQueryMySQLParser.NCHAR_SYMBOL, 0); }
		public TerminalNode CHAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CHAR_SYMBOL, 0); }
		public TerminalNode NATIONAL_SYMBOL() { return getToken(MultiQueryMySQLParser.NATIONAL_SYMBOL, 0); }
		public NcharContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nchar; }
	}

	public final NcharContext nchar() throws RecognitionException {
		NcharContext _localctx = new NcharContext(_ctx, getState());
		enterRule(_localctx, 910, RULE_nchar);
		try {
			setState(7285);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NCHAR_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7282);
				((NcharContext)_localctx).type = match(NCHAR_SYMBOL);
				}
				break;
			case NATIONAL_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7283);
				((NcharContext)_localctx).type = match(NATIONAL_SYMBOL);
				setState(7284);
				match(CHAR_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RealTypeContext extends ParserRuleContext {
		public Token type;
		public TerminalNode REAL_SYMBOL() { return getToken(MultiQueryMySQLParser.REAL_SYMBOL, 0); }
		public TerminalNode DOUBLE_SYMBOL() { return getToken(MultiQueryMySQLParser.DOUBLE_SYMBOL, 0); }
		public TerminalNode PRECISION_SYMBOL() { return getToken(MultiQueryMySQLParser.PRECISION_SYMBOL, 0); }
		public RealTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_realType; }
	}

	public final RealTypeContext realType() throws RecognitionException {
		RealTypeContext _localctx = new RealTypeContext(_ctx, getState());
		enterRule(_localctx, 912, RULE_realType);
		try {
			setState(7292);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REAL_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7287);
				((RealTypeContext)_localctx).type = match(REAL_SYMBOL);
				}
				break;
			case DOUBLE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7288);
				((RealTypeContext)_localctx).type = match(DOUBLE_SYMBOL);
				setState(7290);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,954,_ctx) ) {
				case 1:
					{
					setState(7289);
					match(PRECISION_SYMBOL);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FieldLengthContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public Real_ulonglong_numberContext real_ulonglong_number() {
			return getRuleContext(Real_ulonglong_numberContext.class,0);
		}
		public TerminalNode DECIMAL_NUMBER() { return getToken(MultiQueryMySQLParser.DECIMAL_NUMBER, 0); }
		public FieldLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldLength; }
	}

	public final FieldLengthContext fieldLength() throws RecognitionException {
		FieldLengthContext _localctx = new FieldLengthContext(_ctx, getState());
		enterRule(_localctx, 914, RULE_fieldLength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7294);
			match(OPEN_PAR_SYMBOL);
			setState(7297);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,956,_ctx) ) {
			case 1:
				{
				setState(7295);
				real_ulonglong_number();
				}
				break;
			case 2:
				{
				setState(7296);
				match(DECIMAL_NUMBER);
				}
				break;
			}
			setState(7299);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FieldOptionsContext extends ParserRuleContext {
		public List<TerminalNode> SIGNED_SYMBOL() { return getTokens(MultiQueryMySQLParser.SIGNED_SYMBOL); }
		public TerminalNode SIGNED_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.SIGNED_SYMBOL, i);
		}
		public List<TerminalNode> UNSIGNED_SYMBOL() { return getTokens(MultiQueryMySQLParser.UNSIGNED_SYMBOL); }
		public TerminalNode UNSIGNED_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.UNSIGNED_SYMBOL, i);
		}
		public List<TerminalNode> ZEROFILL_SYMBOL() { return getTokens(MultiQueryMySQLParser.ZEROFILL_SYMBOL); }
		public TerminalNode ZEROFILL_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.ZEROFILL_SYMBOL, i);
		}
		public FieldOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldOptions; }
	}

	public final FieldOptionsContext fieldOptions() throws RecognitionException {
		FieldOptionsContext _localctx = new FieldOptionsContext(_ctx, getState());
		enterRule(_localctx, 916, RULE_fieldOptions);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7302); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(7301);
					_la = _input.LA(1);
					if ( !(_la==SIGNED_SYMBOL || _la==UNSIGNED_SYMBOL || _la==ZEROFILL_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7304); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,957,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetWithOptBinaryContext extends ParserRuleContext {
		public AsciiContext ascii() {
			return getRuleContext(AsciiContext.class,0);
		}
		public UnicodeContext unicode() {
			return getRuleContext(UnicodeContext.class,0);
		}
		public TerminalNode BYTE_SYMBOL() { return getToken(MultiQueryMySQLParser.BYTE_SYMBOL, 0); }
		public CharsetContext charset() {
			return getRuleContext(CharsetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode BINARY_SYMBOL() { return getToken(MultiQueryMySQLParser.BINARY_SYMBOL, 0); }
		public CharsetWithOptBinaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetWithOptBinary; }
	}

	public final CharsetWithOptBinaryContext charsetWithOptBinary() throws RecognitionException {
		CharsetWithOptBinaryContext _localctx = new CharsetWithOptBinaryContext(_ctx, getState());
		enterRule(_localctx, 918, RULE_charsetWithOptBinary);
		try {
			setState(7320);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,960,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7306);
				ascii();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7307);
				unicode();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7308);
				match(BYTE_SYMBOL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7309);
				charset();
				setState(7310);
				charsetName();
				setState(7312);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,958,_ctx) ) {
				case 1:
					{
					setState(7311);
					match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7314);
				match(BINARY_SYMBOL);
				setState(7318);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,959,_ctx) ) {
				case 1:
					{
					setState(7315);
					charset();
					setState(7316);
					charsetName();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AsciiContext extends ParserRuleContext {
		public TerminalNode ASCII_SYMBOL() { return getToken(MultiQueryMySQLParser.ASCII_SYMBOL, 0); }
		public TerminalNode BINARY_SYMBOL() { return getToken(MultiQueryMySQLParser.BINARY_SYMBOL, 0); }
		public AsciiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ascii; }
	}

	public final AsciiContext ascii() throws RecognitionException {
		AsciiContext _localctx = new AsciiContext(_ctx, getState());
		enterRule(_localctx, 920, RULE_ascii);
		try {
			setState(7328);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASCII_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7322);
				match(ASCII_SYMBOL);
				setState(7324);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,961,_ctx) ) {
				case 1:
					{
					setState(7323);
					match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case BINARY_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7326);
				match(BINARY_SYMBOL);
				setState(7327);
				match(ASCII_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnicodeContext extends ParserRuleContext {
		public TerminalNode UNICODE_SYMBOL() { return getToken(MultiQueryMySQLParser.UNICODE_SYMBOL, 0); }
		public TerminalNode BINARY_SYMBOL() { return getToken(MultiQueryMySQLParser.BINARY_SYMBOL, 0); }
		public UnicodeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unicode; }
	}

	public final UnicodeContext unicode() throws RecognitionException {
		UnicodeContext _localctx = new UnicodeContext(_ctx, getState());
		enterRule(_localctx, 922, RULE_unicode);
		try {
			setState(7336);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNICODE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7330);
				match(UNICODE_SYMBOL);
				setState(7332);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,963,_ctx) ) {
				case 1:
					{
					setState(7331);
					match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case BINARY_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7334);
				match(BINARY_SYMBOL);
				setState(7335);
				match(UNICODE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WsNumCodepointsContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public WsNumCodepointsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_wsNumCodepoints; }
	}

	public final WsNumCodepointsContext wsNumCodepoints() throws RecognitionException {
		WsNumCodepointsContext _localctx = new WsNumCodepointsContext(_ctx, getState());
		enterRule(_localctx, 924, RULE_wsNumCodepoints);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7338);
			match(OPEN_PAR_SYMBOL);
			setState(7339);
			real_ulong_number();
			setState(7340);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeDatetimePrecisionContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode INT_NUMBER() { return getToken(MultiQueryMySQLParser.INT_NUMBER, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TypeDatetimePrecisionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeDatetimePrecision; }
	}

	public final TypeDatetimePrecisionContext typeDatetimePrecision() throws RecognitionException {
		TypeDatetimePrecisionContext _localctx = new TypeDatetimePrecisionContext(_ctx, getState());
		enterRule(_localctx, 926, RULE_typeDatetimePrecision);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7342);
			match(OPEN_PAR_SYMBOL);
			setState(7343);
			match(INT_NUMBER);
			setState(7344);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetNameContext extends ParserRuleContext {
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public TerminalNode BINARY_SYMBOL() { return getToken(MultiQueryMySQLParser.BINARY_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
		public CharsetNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetName; }
	}

	public final CharsetNameContext charsetName() throws RecognitionException {
		CharsetNameContext _localctx = new CharsetNameContext(_ctx, getState());
		enterRule(_localctx, 928, RULE_charsetName);
		try {
			setState(7350);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,965,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7346);
				textOrIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7347);
				match(BINARY_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7348);
				if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
				setState(7349);
				match(DEFAULT_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollationNameContext extends ParserRuleContext {
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode BINARY_SYMBOL() { return getToken(MultiQueryMySQLParser.BINARY_SYMBOL, 0); }
		public CollationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collationName; }
	}

	public final CollationNameContext collationName() throws RecognitionException {
		CollationNameContext _localctx = new CollationNameContext(_ctx, getState());
		enterRule(_localctx, 930, RULE_collationName);
		try {
			setState(7357);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,966,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7352);
				textOrIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7353);
				if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
				setState(7354);
				match(DEFAULT_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7355);
				if (!(serverVersion >= 80018)) throw new FailedPredicateException(this, "serverVersion >= 80018");
				setState(7356);
				match(BINARY_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableOptionsContext extends ParserRuleContext {
		public List<CreateTableOptionContext> createTableOption() {
			return getRuleContexts(CreateTableOptionContext.class);
		}
		public CreateTableOptionContext createTableOption(int i) {
			return getRuleContext(CreateTableOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public CreateTableOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTableOptions; }
	}

	public final CreateTableOptionsContext createTableOptions() throws RecognitionException {
		CreateTableOptionsContext _localctx = new CreateTableOptionsContext(_ctx, getState());
		enterRule(_localctx, 932, RULE_createTableOptions);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7359);
			createTableOption();
			setState(7366);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,968,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(7361);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,967,_ctx) ) {
					case 1:
						{
						setState(7360);
						match(COMMA_SYMBOL);
						}
						break;
					}
					setState(7363);
					createTableOption();
					}
					} 
				}
				setState(7368);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,968,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableOptionsSpaceSeparatedContext extends ParserRuleContext {
		public List<CreateTableOptionContext> createTableOption() {
			return getRuleContexts(CreateTableOptionContext.class);
		}
		public CreateTableOptionContext createTableOption(int i) {
			return getRuleContext(CreateTableOptionContext.class,i);
		}
		public CreateTableOptionsSpaceSeparatedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTableOptionsSpaceSeparated; }
	}

	public final CreateTableOptionsSpaceSeparatedContext createTableOptionsSpaceSeparated() throws RecognitionException {
		CreateTableOptionsSpaceSeparatedContext _localctx = new CreateTableOptionsSpaceSeparatedContext(_ctx, getState());
		enterRule(_localctx, 934, RULE_createTableOptionsSpaceSeparated);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7370); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(7369);
					createTableOption();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7372); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,969,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableOptionContext extends ParserRuleContext {
		public Token option;
		public Token format;
		public Token method;
		public EngineRefContext engineRef() {
			return getRuleContext(EngineRefContext.class,0);
		}
		public TerminalNode ENGINE_SYMBOL() { return getToken(MultiQueryMySQLParser.ENGINE_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
		public TerminalNode SECONDARY_ENGINE_SYMBOL() { return getToken(MultiQueryMySQLParser.SECONDARY_ENGINE_SYMBOL, 0); }
		public TerminalNode NULL_SYMBOL() { return getToken(MultiQueryMySQLParser.NULL_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public Ulonglong_numberContext ulonglong_number() {
			return getRuleContext(Ulonglong_numberContext.class,0);
		}
		public TerminalNode MAX_ROWS_SYMBOL() { return getToken(MultiQueryMySQLParser.MAX_ROWS_SYMBOL, 0); }
		public TerminalNode MIN_ROWS_SYMBOL() { return getToken(MultiQueryMySQLParser.MIN_ROWS_SYMBOL, 0); }
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public TerminalNode AVG_ROW_LENGTH_SYMBOL() { return getToken(MultiQueryMySQLParser.AVG_ROW_LENGTH_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MultiQueryMySQLParser.PASSWORD_SYMBOL, 0); }
		public TerminalNode COMMENT_SYMBOL() { return getToken(MultiQueryMySQLParser.COMMENT_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public TerminalNode COMPRESSION_SYMBOL() { return getToken(MultiQueryMySQLParser.COMPRESSION_SYMBOL, 0); }
		public TerminalNode ENCRYPTION_SYMBOL() { return getToken(MultiQueryMySQLParser.ENCRYPTION_SYMBOL, 0); }
		public TerminalNode AUTO_INCREMENT_SYMBOL() { return getToken(MultiQueryMySQLParser.AUTO_INCREMENT_SYMBOL, 0); }
		public TernaryOptionContext ternaryOption() {
			return getRuleContext(TernaryOptionContext.class,0);
		}
		public TerminalNode PACK_KEYS_SYMBOL() { return getToken(MultiQueryMySQLParser.PACK_KEYS_SYMBOL, 0); }
		public TerminalNode STATS_AUTO_RECALC_SYMBOL() { return getToken(MultiQueryMySQLParser.STATS_AUTO_RECALC_SYMBOL, 0); }
		public TerminalNode STATS_PERSISTENT_SYMBOL() { return getToken(MultiQueryMySQLParser.STATS_PERSISTENT_SYMBOL, 0); }
		public TerminalNode STATS_SAMPLE_PAGES_SYMBOL() { return getToken(MultiQueryMySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0); }
		public TerminalNode CHECKSUM_SYMBOL() { return getToken(MultiQueryMySQLParser.CHECKSUM_SYMBOL, 0); }
		public TerminalNode TABLE_CHECKSUM_SYMBOL() { return getToken(MultiQueryMySQLParser.TABLE_CHECKSUM_SYMBOL, 0); }
		public TerminalNode DELAY_KEY_WRITE_SYMBOL() { return getToken(MultiQueryMySQLParser.DELAY_KEY_WRITE_SYMBOL, 0); }
		public TerminalNode ROW_FORMAT_SYMBOL() { return getToken(MultiQueryMySQLParser.ROW_FORMAT_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode DYNAMIC_SYMBOL() { return getToken(MultiQueryMySQLParser.DYNAMIC_SYMBOL, 0); }
		public TerminalNode FIXED_SYMBOL() { return getToken(MultiQueryMySQLParser.FIXED_SYMBOL, 0); }
		public TerminalNode COMPRESSED_SYMBOL() { return getToken(MultiQueryMySQLParser.COMPRESSED_SYMBOL, 0); }
		public TerminalNode REDUNDANT_SYMBOL() { return getToken(MultiQueryMySQLParser.REDUNDANT_SYMBOL, 0); }
		public TerminalNode COMPACT_SYMBOL() { return getToken(MultiQueryMySQLParser.COMPACT_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TableRefListContext tableRefList() {
			return getRuleContext(TableRefListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode UNION_SYMBOL() { return getToken(MultiQueryMySQLParser.UNION_SYMBOL, 0); }
		public DefaultCharsetContext defaultCharset() {
			return getRuleContext(DefaultCharsetContext.class,0);
		}
		public DefaultCollationContext defaultCollation() {
			return getRuleContext(DefaultCollationContext.class,0);
		}
		public TerminalNode INSERT_METHOD_SYMBOL() { return getToken(MultiQueryMySQLParser.INSERT_METHOD_SYMBOL, 0); }
		public TerminalNode NO_SYMBOL() { return getToken(MultiQueryMySQLParser.NO_SYMBOL, 0); }
		public TerminalNode FIRST_SYMBOL() { return getToken(MultiQueryMySQLParser.FIRST_SYMBOL, 0); }
		public TerminalNode LAST_SYMBOL() { return getToken(MultiQueryMySQLParser.LAST_SYMBOL, 0); }
		public TerminalNode DIRECTORY_SYMBOL() { return getToken(MultiQueryMySQLParser.DIRECTORY_SYMBOL, 0); }
		public TerminalNode DATA_SYMBOL() { return getToken(MultiQueryMySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode INDEX_SYMBOL() { return getToken(MultiQueryMySQLParser.INDEX_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MultiQueryMySQLParser.TABLESPACE_SYMBOL, 0); }
		public TerminalNode STORAGE_SYMBOL() { return getToken(MultiQueryMySQLParser.STORAGE_SYMBOL, 0); }
		public TerminalNode DISK_SYMBOL() { return getToken(MultiQueryMySQLParser.DISK_SYMBOL, 0); }
		public TerminalNode MEMORY_SYMBOL() { return getToken(MultiQueryMySQLParser.MEMORY_SYMBOL, 0); }
		public TerminalNode CONNECTION_SYMBOL() { return getToken(MultiQueryMySQLParser.CONNECTION_SYMBOL, 0); }
		public TerminalNode KEY_BLOCK_SIZE_SYMBOL() { return getToken(MultiQueryMySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0); }
		public CreateTableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTableOption; }
	}

	public final CreateTableOptionContext createTableOption() throws RecognitionException {
		CreateTableOptionContext _localctx = new CreateTableOptionContext(_ctx, getState());
		enterRule(_localctx, 936, RULE_createTableOption);
		int _la;
		try {
			setState(7503);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,994,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7374);
				((CreateTableOptionContext)_localctx).option = match(ENGINE_SYMBOL);
				setState(7376);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,970,_ctx) ) {
				case 1:
					{
					setState(7375);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7378);
				engineRef();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7379);
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				setState(7380);
				((CreateTableOptionContext)_localctx).option = match(SECONDARY_ENGINE_SYMBOL);
				setState(7382);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,971,_ctx) ) {
				case 1:
					{
					setState(7381);
					equal();
					}
					break;
				}
				setState(7386);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,972,_ctx) ) {
				case 1:
					{
					setState(7384);
					match(NULL_SYMBOL);
					}
					break;
				case 2:
					{
					setState(7385);
					textOrIdentifier();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7388);
				((CreateTableOptionContext)_localctx).option = match(MAX_ROWS_SYMBOL);
				setState(7390);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7389);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7392);
				ulonglong_number();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7393);
				((CreateTableOptionContext)_localctx).option = match(MIN_ROWS_SYMBOL);
				setState(7395);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7394);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7397);
				ulonglong_number();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7398);
				((CreateTableOptionContext)_localctx).option = match(AVG_ROW_LENGTH_SYMBOL);
				setState(7400);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7399);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7402);
				ulong_number();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7403);
				((CreateTableOptionContext)_localctx).option = match(PASSWORD_SYMBOL);
				setState(7405);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,976,_ctx) ) {
				case 1:
					{
					setState(7404);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7407);
				textStringLiteral();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7408);
				((CreateTableOptionContext)_localctx).option = match(COMMENT_SYMBOL);
				setState(7410);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,977,_ctx) ) {
				case 1:
					{
					setState(7409);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7412);
				textStringLiteral();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7413);
				if (!(serverVersion >= 50708)) throw new FailedPredicateException(this, "serverVersion >= 50708");
				setState(7414);
				((CreateTableOptionContext)_localctx).option = match(COMPRESSION_SYMBOL);
				setState(7416);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,978,_ctx) ) {
				case 1:
					{
					setState(7415);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7418);
				textString();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7419);
				if (!(serverVersion >= 50711)) throw new FailedPredicateException(this, "serverVersion >= 50711");
				setState(7420);
				((CreateTableOptionContext)_localctx).option = match(ENCRYPTION_SYMBOL);
				setState(7422);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,979,_ctx) ) {
				case 1:
					{
					setState(7421);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7424);
				textString();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(7425);
				((CreateTableOptionContext)_localctx).option = match(AUTO_INCREMENT_SYMBOL);
				setState(7427);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7426);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7429);
				ulonglong_number();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(7430);
				((CreateTableOptionContext)_localctx).option = match(PACK_KEYS_SYMBOL);
				setState(7432);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7431);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7434);
				ternaryOption();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(7435);
				((CreateTableOptionContext)_localctx).option = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 324)) & ~0x3f) == 0 && ((1L << (_la - 324)) & ((1L << (STATS_AUTO_RECALC_SYMBOL - 324)) | (1L << (STATS_PERSISTENT_SYMBOL - 324)) | (1L << (STATS_SAMPLE_PAGES_SYMBOL - 324)))) != 0)) ) {
					((CreateTableOptionContext)_localctx).option = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7437);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7436);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7439);
				ternaryOption();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(7440);
				((CreateTableOptionContext)_localctx).option = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CHECKSUM_SYMBOL || _la==TABLE_CHECKSUM_SYMBOL) ) {
					((CreateTableOptionContext)_localctx).option = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7442);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7441);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7444);
				ulong_number();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(7445);
				((CreateTableOptionContext)_localctx).option = match(DELAY_KEY_WRITE_SYMBOL);
				setState(7447);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7446);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7449);
				ulong_number();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(7450);
				((CreateTableOptionContext)_localctx).option = match(ROW_FORMAT_SYMBOL);
				setState(7452);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7451);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7454);
				((CreateTableOptionContext)_localctx).format = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & ((1L << (COMPACT_SYMBOL - 92)) | (1L << (COMPRESSED_SYMBOL - 92)) | (1L << (DYNAMIC_SYMBOL - 92)) | (1L << (FIXED_SYMBOL - 92)))) != 0) || _la==REDUNDANT_SYMBOL || _la==DEFAULT_SYMBOL) ) {
					((CreateTableOptionContext)_localctx).format = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(7455);
				((CreateTableOptionContext)_localctx).option = match(UNION_SYMBOL);
				setState(7457);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7456);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7459);
				match(OPEN_PAR_SYMBOL);
				setState(7460);
				tableRefList();
				setState(7461);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(7463);
				defaultCharset();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(7464);
				defaultCollation();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(7465);
				((CreateTableOptionContext)_localctx).option = match(INSERT_METHOD_SYMBOL);
				setState(7467);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7466);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7469);
				((CreateTableOptionContext)_localctx).method = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_SYMBOL || _la==FIRST_SYMBOL || _la==LAST_SYMBOL) ) {
					((CreateTableOptionContext)_localctx).method = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(7470);
				((CreateTableOptionContext)_localctx).option = match(DATA_SYMBOL);
				setState(7471);
				match(DIRECTORY_SYMBOL);
				setState(7473);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,988,_ctx) ) {
				case 1:
					{
					setState(7472);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7475);
				textString();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(7476);
				((CreateTableOptionContext)_localctx).option = match(INDEX_SYMBOL);
				setState(7477);
				match(DIRECTORY_SYMBOL);
				setState(7479);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,989,_ctx) ) {
				case 1:
					{
					setState(7478);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7481);
				textString();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(7482);
				((CreateTableOptionContext)_localctx).option = match(TABLESPACE_SYMBOL);
				setState(7488);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,991,_ctx) ) {
				case 1:
					{
					setState(7483);
					if (!(serverVersion >= 50707)) throw new FailedPredicateException(this, "serverVersion >= 50707");
					setState(7485);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,990,_ctx) ) {
					case 1:
						{
						setState(7484);
						match(EQUAL_OPERATOR);
						}
						break;
					}
					}
					break;
				case 2:
					{
					}
					break;
				}
				setState(7490);
				identifier();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(7491);
				((CreateTableOptionContext)_localctx).option = match(STORAGE_SYMBOL);
				setState(7492);
				_la = _input.LA(1);
				if ( !(_la==DISK_SYMBOL || _la==MEMORY_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(7493);
				((CreateTableOptionContext)_localctx).option = match(CONNECTION_SYMBOL);
				setState(7495);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,992,_ctx) ) {
				case 1:
					{
					setState(7494);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7497);
				textString();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(7498);
				((CreateTableOptionContext)_localctx).option = match(KEY_BLOCK_SIZE_SYMBOL);
				setState(7500);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7499);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7502);
				ulong_number();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TernaryOptionContext extends ParserRuleContext {
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
		public TernaryOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ternaryOption; }
	}

	public final TernaryOptionContext ternaryOption() throws RecognitionException {
		TernaryOptionContext _localctx = new TernaryOptionContext(_ctx, getState());
		enterRule(_localctx, 938, RULE_ternaryOption);
		try {
			setState(7507);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case HEX_NUMBER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
				enterOuterAlt(_localctx, 1);
				{
				setState(7505);
				ulong_number();
				}
				break;
			case DEFAULT_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7506);
				match(DEFAULT_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultCollationContext extends ParserRuleContext {
		public TerminalNode COLLATE_SYMBOL() { return getToken(MultiQueryMySQLParser.COLLATE_SYMBOL, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
		public DefaultCollationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultCollation; }
	}

	public final DefaultCollationContext defaultCollation() throws RecognitionException {
		DefaultCollationContext _localctx = new DefaultCollationContext(_ctx, getState());
		enterRule(_localctx, 940, RULE_defaultCollation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7510);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT_SYMBOL) {
				{
				setState(7509);
				match(DEFAULT_SYMBOL);
				}
			}

			setState(7512);
			match(COLLATE_SYMBOL);
			setState(7514);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,997,_ctx) ) {
			case 1:
				{
				setState(7513);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(7516);
			collationName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultEncryptionContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION_SYMBOL() { return getToken(MultiQueryMySQLParser.ENCRYPTION_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
		public DefaultEncryptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultEncryption; }
	}

	public final DefaultEncryptionContext defaultEncryption() throws RecognitionException {
		DefaultEncryptionContext _localctx = new DefaultEncryptionContext(_ctx, getState());
		enterRule(_localctx, 942, RULE_defaultEncryption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7519);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT_SYMBOL) {
				{
				setState(7518);
				match(DEFAULT_SYMBOL);
				}
			}

			setState(7521);
			match(ENCRYPTION_SYMBOL);
			setState(7523);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,999,_ctx) ) {
			case 1:
				{
				setState(7522);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(7525);
			textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultCharsetContext extends ParserRuleContext {
		public CharsetContext charset() {
			return getRuleContext(CharsetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
		public DefaultCharsetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultCharset; }
	}

	public final DefaultCharsetContext defaultCharset() throws RecognitionException {
		DefaultCharsetContext _localctx = new DefaultCharsetContext(_ctx, getState());
		enterRule(_localctx, 944, RULE_defaultCharset);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7528);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT_SYMBOL) {
				{
				setState(7527);
				match(DEFAULT_SYMBOL);
				}
			}

			setState(7530);
			charset();
			setState(7532);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1001,_ctx) ) {
			case 1:
				{
				setState(7531);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(7534);
			charsetName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionClauseContext extends ParserRuleContext {
		public TerminalNode PARTITION_SYMBOL() { return getToken(MultiQueryMySQLParser.PARTITION_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MultiQueryMySQLParser.BY_SYMBOL, 0); }
		public PartitionTypeDefContext partitionTypeDef() {
			return getRuleContext(PartitionTypeDefContext.class,0);
		}
		public TerminalNode PARTITIONS_SYMBOL() { return getToken(MultiQueryMySQLParser.PARTITIONS_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public SubPartitionsContext subPartitions() {
			return getRuleContext(SubPartitionsContext.class,0);
		}
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public PartitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionClause; }
	}

	public final PartitionClauseContext partitionClause() throws RecognitionException {
		PartitionClauseContext _localctx = new PartitionClauseContext(_ctx, getState());
		enterRule(_localctx, 946, RULE_partitionClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7536);
			match(PARTITION_SYMBOL);
			setState(7537);
			match(BY_SYMBOL);
			setState(7538);
			partitionTypeDef();
			setState(7541);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1002,_ctx) ) {
			case 1:
				{
				setState(7539);
				match(PARTITIONS_SYMBOL);
				setState(7540);
				real_ulong_number();
				}
				break;
			}
			setState(7544);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1003,_ctx) ) {
			case 1:
				{
				setState(7543);
				subPartitions();
				}
				break;
			}
			setState(7547);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1004,_ctx) ) {
			case 1:
				{
				setState(7546);
				partitionDefinitions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionTypeDefContext extends ParserRuleContext {
		public PartitionTypeDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionTypeDef; }
	 
		public PartitionTypeDefContext() { }
		public void copyFrom(PartitionTypeDefContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PartitionDefRangeListContext extends PartitionTypeDefContext {
		public TerminalNode RANGE_SYMBOL() { return getToken(MultiQueryMySQLParser.RANGE_SYMBOL, 0); }
		public TerminalNode LIST_SYMBOL() { return getToken(MultiQueryMySQLParser.LIST_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return getRuleContext(BitExprContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode COLUMNS_SYMBOL() { return getToken(MultiQueryMySQLParser.COLUMNS_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public PartitionDefRangeListContext(PartitionTypeDefContext ctx) { copyFrom(ctx); }
	}
	public static class PartitionDefKeyContext extends PartitionTypeDefContext {
		public TerminalNode KEY_SYMBOL() { return getToken(MultiQueryMySQLParser.KEY_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode LINEAR_SYMBOL() { return getToken(MultiQueryMySQLParser.LINEAR_SYMBOL, 0); }
		public PartitionKeyAlgorithmContext partitionKeyAlgorithm() {
			return getRuleContext(PartitionKeyAlgorithmContext.class,0);
		}
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public PartitionDefKeyContext(PartitionTypeDefContext ctx) { copyFrom(ctx); }
	}
	public static class PartitionDefHashContext extends PartitionTypeDefContext {
		public TerminalNode HASH_SYMBOL() { return getToken(MultiQueryMySQLParser.HASH_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return getRuleContext(BitExprContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode LINEAR_SYMBOL() { return getToken(MultiQueryMySQLParser.LINEAR_SYMBOL, 0); }
		public PartitionDefHashContext(PartitionTypeDefContext ctx) { copyFrom(ctx); }
	}

	public final PartitionTypeDefContext partitionTypeDef() throws RecognitionException {
		PartitionTypeDefContext _localctx = new PartitionTypeDefContext(_ctx, getState());
		enterRule(_localctx, 948, RULE_partitionTypeDef);
		int _la;
		try {
			setState(7582);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1011,_ctx) ) {
			case 1:
				_localctx = new PartitionDefKeyContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(7550);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR_SYMBOL) {
					{
					setState(7549);
					match(LINEAR_SYMBOL);
					}
				}

				setState(7552);
				match(KEY_SYMBOL);
				setState(7554);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1006,_ctx) ) {
				case 1:
					{
					setState(7553);
					partitionKeyAlgorithm();
					}
					break;
				}
				setState(7556);
				match(OPEN_PAR_SYMBOL);
				setState(7558);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1007,_ctx) ) {
				case 1:
					{
					setState(7557);
					identifierList();
					}
					break;
				}
				setState(7560);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				_localctx = new PartitionDefHashContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(7562);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR_SYMBOL) {
					{
					setState(7561);
					match(LINEAR_SYMBOL);
					}
				}

				setState(7564);
				match(HASH_SYMBOL);
				setState(7565);
				match(OPEN_PAR_SYMBOL);
				setState(7566);
				bitExpr(0);
				setState(7567);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 3:
				_localctx = new PartitionDefRangeListContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(7569);
				_la = _input.LA(1);
				if ( !(_la==LIST_SYMBOL || _la==RANGE_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7580);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPEN_PAR_SYMBOL:
					{
					setState(7570);
					match(OPEN_PAR_SYMBOL);
					setState(7571);
					bitExpr(0);
					setState(7572);
					match(CLOSE_PAR_SYMBOL);
					}
					break;
				case COLUMNS_SYMBOL:
					{
					setState(7574);
					match(COLUMNS_SYMBOL);
					setState(7575);
					match(OPEN_PAR_SYMBOL);
					setState(7577);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1009,_ctx) ) {
					case 1:
						{
						setState(7576);
						identifierList();
						}
						break;
					}
					setState(7579);
					match(CLOSE_PAR_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubPartitionsContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION_SYMBOL() { return getToken(MultiQueryMySQLParser.SUBPARTITION_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MultiQueryMySQLParser.BY_SYMBOL, 0); }
		public TerminalNode HASH_SYMBOL() { return getToken(MultiQueryMySQLParser.HASH_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return getRuleContext(BitExprContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode KEY_SYMBOL() { return getToken(MultiQueryMySQLParser.KEY_SYMBOL, 0); }
		public IdentifierListWithParenthesesContext identifierListWithParentheses() {
			return getRuleContext(IdentifierListWithParenthesesContext.class,0);
		}
		public TerminalNode LINEAR_SYMBOL() { return getToken(MultiQueryMySQLParser.LINEAR_SYMBOL, 0); }
		public TerminalNode SUBPARTITIONS_SYMBOL() { return getToken(MultiQueryMySQLParser.SUBPARTITIONS_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public PartitionKeyAlgorithmContext partitionKeyAlgorithm() {
			return getRuleContext(PartitionKeyAlgorithmContext.class,0);
		}
		public SubPartitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subPartitions; }
	}

	public final SubPartitionsContext subPartitions() throws RecognitionException {
		SubPartitionsContext _localctx = new SubPartitionsContext(_ctx, getState());
		enterRule(_localctx, 950, RULE_subPartitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7584);
			match(SUBPARTITION_SYMBOL);
			setState(7585);
			match(BY_SYMBOL);
			setState(7587);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LINEAR_SYMBOL) {
				{
				setState(7586);
				match(LINEAR_SYMBOL);
				}
			}

			setState(7599);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case HASH_SYMBOL:
				{
				setState(7589);
				match(HASH_SYMBOL);
				setState(7590);
				match(OPEN_PAR_SYMBOL);
				setState(7591);
				bitExpr(0);
				setState(7592);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case KEY_SYMBOL:
				{
				setState(7594);
				match(KEY_SYMBOL);
				setState(7596);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1013,_ctx) ) {
				case 1:
					{
					setState(7595);
					partitionKeyAlgorithm();
					}
					break;
				}
				setState(7598);
				identifierListWithParentheses();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(7603);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1015,_ctx) ) {
			case 1:
				{
				setState(7601);
				match(SUBPARTITIONS_SYMBOL);
				setState(7602);
				real_ulong_number();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionKeyAlgorithmContext extends ParserRuleContext {
		public TerminalNode ALGORITHM_SYMBOL() { return getToken(MultiQueryMySQLParser.ALGORITHM_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public PartitionKeyAlgorithmContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionKeyAlgorithm; }
	}

	public final PartitionKeyAlgorithmContext partitionKeyAlgorithm() throws RecognitionException {
		PartitionKeyAlgorithmContext _localctx = new PartitionKeyAlgorithmContext(_ctx, getState());
		enterRule(_localctx, 952, RULE_partitionKeyAlgorithm);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7605);
			if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
			setState(7606);
			match(ALGORITHM_SYMBOL);
			setState(7607);
			match(EQUAL_OPERATOR);
			setState(7608);
			real_ulong_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinitionsContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<PartitionDefinitionContext> partitionDefinition() {
			return getRuleContexts(PartitionDefinitionContext.class);
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return getRuleContext(PartitionDefinitionContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public PartitionDefinitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinitions; }
	}

	public final PartitionDefinitionsContext partitionDefinitions() throws RecognitionException {
		PartitionDefinitionsContext _localctx = new PartitionDefinitionsContext(_ctx, getState());
		enterRule(_localctx, 954, RULE_partitionDefinitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7610);
			match(OPEN_PAR_SYMBOL);
			setState(7611);
			partitionDefinition();
			setState(7616);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(7612);
				match(COMMA_SYMBOL);
				setState(7613);
				partitionDefinition();
				}
				}
				setState(7618);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7619);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinitionContext extends ParserRuleContext {
		public TerminalNode PARTITION_SYMBOL() { return getToken(MultiQueryMySQLParser.PARTITION_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode VALUES_SYMBOL() { return getToken(MultiQueryMySQLParser.VALUES_SYMBOL, 0); }
		public TerminalNode LESS_SYMBOL() { return getToken(MultiQueryMySQLParser.LESS_SYMBOL, 0); }
		public TerminalNode THAN_SYMBOL() { return getToken(MultiQueryMySQLParser.THAN_SYMBOL, 0); }
		public TerminalNode IN_SYMBOL() { return getToken(MultiQueryMySQLParser.IN_SYMBOL, 0); }
		public PartitionValuesInContext partitionValuesIn() {
			return getRuleContext(PartitionValuesInContext.class,0);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public PartitionValueItemListParenContext partitionValueItemListParen() {
			return getRuleContext(PartitionValueItemListParenContext.class,0);
		}
		public TerminalNode MAXVALUE_SYMBOL() { return getToken(MultiQueryMySQLParser.MAXVALUE_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public PartitionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinition; }
	}

	public final PartitionDefinitionContext partitionDefinition() throws RecognitionException {
		PartitionDefinitionContext _localctx = new PartitionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 956, RULE_partitionDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7621);
			match(PARTITION_SYMBOL);
			setState(7622);
			identifier();
			setState(7633);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1018,_ctx) ) {
			case 1:
				{
				setState(7623);
				match(VALUES_SYMBOL);
				setState(7624);
				match(LESS_SYMBOL);
				setState(7625);
				match(THAN_SYMBOL);
				setState(7628);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPEN_PAR_SYMBOL:
					{
					setState(7626);
					partitionValueItemListParen();
					}
					break;
				case MAXVALUE_SYMBOL:
					{
					setState(7627);
					match(MAXVALUE_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				setState(7630);
				match(VALUES_SYMBOL);
				setState(7631);
				match(IN_SYMBOL);
				setState(7632);
				partitionValuesIn();
				}
				break;
			}
			setState(7638);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMENT_SYMBOL || _la==DATA_SYMBOL || _la==ENGINE_SYMBOL || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (MAX_ROWS_SYMBOL - 184)) | (1L << (MIN_ROWS_SYMBOL - 184)) | (1L << (NODEGROUP_SYMBOL - 184)))) != 0) || _la==STORAGE_SYMBOL || _la==TABLESPACE_SYMBOL || _la==INDEX_SYMBOL) {
				{
				{
				setState(7635);
				partitionOption();
				}
				}
				setState(7640);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7652);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				setState(7641);
				match(OPEN_PAR_SYMBOL);
				setState(7642);
				subpartitionDefinition();
				setState(7647);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(7643);
					match(COMMA_SYMBOL);
					setState(7644);
					subpartitionDefinition();
					}
					}
					setState(7649);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7650);
				match(CLOSE_PAR_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionValuesInContext extends ParserRuleContext {
		public List<PartitionValueItemListParenContext> partitionValueItemListParen() {
			return getRuleContexts(PartitionValueItemListParenContext.class);
		}
		public PartitionValueItemListParenContext partitionValueItemListParen(int i) {
			return getRuleContext(PartitionValueItemListParenContext.class,i);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public PartitionValuesInContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionValuesIn; }
	}

	public final PartitionValuesInContext partitionValuesIn() throws RecognitionException {
		PartitionValuesInContext _localctx = new PartitionValuesInContext(_ctx, getState());
		enterRule(_localctx, 958, RULE_partitionValuesIn);
		int _la;
		try {
			setState(7666);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1023,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7654);
				partitionValueItemListParen();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7655);
				match(OPEN_PAR_SYMBOL);
				setState(7656);
				partitionValueItemListParen();
				setState(7661);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(7657);
					match(COMMA_SYMBOL);
					setState(7658);
					partitionValueItemListParen();
					}
					}
					setState(7663);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7664);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionOptionContext extends ParserRuleContext {
		public Token option;
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MultiQueryMySQLParser.TABLESPACE_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
		public EngineRefContext engineRef() {
			return getRuleContext(EngineRefContext.class,0);
		}
		public TerminalNode ENGINE_SYMBOL() { return getToken(MultiQueryMySQLParser.ENGINE_SYMBOL, 0); }
		public TerminalNode STORAGE_SYMBOL() { return getToken(MultiQueryMySQLParser.STORAGE_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public TerminalNode NODEGROUP_SYMBOL() { return getToken(MultiQueryMySQLParser.NODEGROUP_SYMBOL, 0); }
		public TerminalNode MAX_ROWS_SYMBOL() { return getToken(MultiQueryMySQLParser.MAX_ROWS_SYMBOL, 0); }
		public TerminalNode MIN_ROWS_SYMBOL() { return getToken(MultiQueryMySQLParser.MIN_ROWS_SYMBOL, 0); }
		public TerminalNode DIRECTORY_SYMBOL() { return getToken(MultiQueryMySQLParser.DIRECTORY_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode DATA_SYMBOL() { return getToken(MultiQueryMySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode INDEX_SYMBOL() { return getToken(MultiQueryMySQLParser.INDEX_SYMBOL, 0); }
		public TerminalNode COMMENT_SYMBOL() { return getToken(MultiQueryMySQLParser.COMMENT_SYMBOL, 0); }
		public PartitionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionOption; }
	}

	public final PartitionOptionContext partitionOption() throws RecognitionException {
		PartitionOptionContext _localctx = new PartitionOptionContext(_ctx, getState());
		enterRule(_localctx, 960, RULE_partitionOption);
		int _la;
		try {
			setState(7702);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TABLESPACE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7668);
				((PartitionOptionContext)_localctx).option = match(TABLESPACE_SYMBOL);
				setState(7670);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1024,_ctx) ) {
				case 1:
					{
					setState(7669);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7672);
				identifier();
				}
				break;
			case ENGINE_SYMBOL:
			case STORAGE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7674);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE_SYMBOL) {
					{
					setState(7673);
					match(STORAGE_SYMBOL);
					}
				}

				setState(7676);
				((PartitionOptionContext)_localctx).option = match(ENGINE_SYMBOL);
				setState(7678);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1026,_ctx) ) {
				case 1:
					{
					setState(7677);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7680);
				engineRef();
				}
				break;
			case NODEGROUP_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(7681);
				((PartitionOptionContext)_localctx).option = match(NODEGROUP_SYMBOL);
				setState(7683);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7682);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7685);
				real_ulong_number();
				}
				break;
			case MAX_ROWS_SYMBOL:
			case MIN_ROWS_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(7686);
				((PartitionOptionContext)_localctx).option = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MAX_ROWS_SYMBOL || _la==MIN_ROWS_SYMBOL) ) {
					((PartitionOptionContext)_localctx).option = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7688);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7687);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7690);
				real_ulong_number();
				}
				break;
			case DATA_SYMBOL:
			case INDEX_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(7691);
				((PartitionOptionContext)_localctx).option = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATA_SYMBOL || _la==INDEX_SYMBOL) ) {
					((PartitionOptionContext)_localctx).option = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7692);
				match(DIRECTORY_SYMBOL);
				setState(7694);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1029,_ctx) ) {
				case 1:
					{
					setState(7693);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7696);
				textLiteral();
				}
				break;
			case COMMENT_SYMBOL:
				enterOuterAlt(_localctx, 6);
				{
				setState(7697);
				((PartitionOptionContext)_localctx).option = match(COMMENT_SYMBOL);
				setState(7699);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1030,_ctx) ) {
				case 1:
					{
					setState(7698);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7701);
				textLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubpartitionDefinitionContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION_SYMBOL() { return getToken(MultiQueryMySQLParser.SUBPARTITION_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public SubpartitionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartitionDefinition; }
	}

	public final SubpartitionDefinitionContext subpartitionDefinition() throws RecognitionException {
		SubpartitionDefinitionContext _localctx = new SubpartitionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 962, RULE_subpartitionDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7704);
			match(SUBPARTITION_SYMBOL);
			setState(7705);
			textOrIdentifier();
			setState(7709);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMENT_SYMBOL || _la==DATA_SYMBOL || _la==ENGINE_SYMBOL || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (MAX_ROWS_SYMBOL - 184)) | (1L << (MIN_ROWS_SYMBOL - 184)) | (1L << (NODEGROUP_SYMBOL - 184)))) != 0) || _la==STORAGE_SYMBOL || _la==TABLESPACE_SYMBOL || _la==INDEX_SYMBOL) {
				{
				{
				setState(7706);
				partitionOption();
				}
				}
				setState(7711);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionValueItemListParenContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<PartitionValueItemContext> partitionValueItem() {
			return getRuleContexts(PartitionValueItemContext.class);
		}
		public PartitionValueItemContext partitionValueItem(int i) {
			return getRuleContext(PartitionValueItemContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public PartitionValueItemListParenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionValueItemListParen; }
	}

	public final PartitionValueItemListParenContext partitionValueItemListParen() throws RecognitionException {
		PartitionValueItemListParenContext _localctx = new PartitionValueItemListParenContext(_ctx, getState());
		enterRule(_localctx, 964, RULE_partitionValueItemListParen);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7712);
			match(OPEN_PAR_SYMBOL);
			setState(7713);
			partitionValueItem();
			setState(7718);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(7714);
				match(COMMA_SYMBOL);
				setState(7715);
				partitionValueItem();
				}
				}
				setState(7720);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7721);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionValueItemContext extends ParserRuleContext {
		public BitExprContext bitExpr() {
			return getRuleContext(BitExprContext.class,0);
		}
		public TerminalNode MAXVALUE_SYMBOL() { return getToken(MultiQueryMySQLParser.MAXVALUE_SYMBOL, 0); }
		public PartitionValueItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionValueItem; }
	}

	public final PartitionValueItemContext partitionValueItem() throws RecognitionException {
		PartitionValueItemContext _localctx = new PartitionValueItemContext(_ctx, getState());
		enterRule(_localctx, 966, RULE_partitionValueItem);
		try {
			setState(7725);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1034,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7723);
				bitExpr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7724);
				match(MAXVALUE_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefinerClauseContext extends ParserRuleContext {
		public TerminalNode DEFINER_SYMBOL() { return getToken(MultiQueryMySQLParser.DEFINER_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public DefinerClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_definerClause; }
	}

	public final DefinerClauseContext definerClause() throws RecognitionException {
		DefinerClauseContext _localctx = new DefinerClauseContext(_ctx, getState());
		enterRule(_localctx, 968, RULE_definerClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7727);
			match(DEFINER_SYMBOL);
			setState(7728);
			match(EQUAL_OPERATOR);
			setState(7729);
			user();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfExistsContext extends ParserRuleContext {
		public TerminalNode IF_SYMBOL() { return getToken(MultiQueryMySQLParser.IF_SYMBOL, 0); }
		public TerminalNode EXISTS_SYMBOL() { return getToken(MultiQueryMySQLParser.EXISTS_SYMBOL, 0); }
		public IfExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifExists; }
	}

	public final IfExistsContext ifExists() throws RecognitionException {
		IfExistsContext _localctx = new IfExistsContext(_ctx, getState());
		enterRule(_localctx, 970, RULE_ifExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7731);
			match(IF_SYMBOL);
			setState(7732);
			match(EXISTS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfNotExistsContext extends ParserRuleContext {
		public TerminalNode IF_SYMBOL() { return getToken(MultiQueryMySQLParser.IF_SYMBOL, 0); }
		public NotRuleContext notRule() {
			return getRuleContext(NotRuleContext.class,0);
		}
		public TerminalNode EXISTS_SYMBOL() { return getToken(MultiQueryMySQLParser.EXISTS_SYMBOL, 0); }
		public IfNotExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifNotExists; }
	}

	public final IfNotExistsContext ifNotExists() throws RecognitionException {
		IfNotExistsContext _localctx = new IfNotExistsContext(_ctx, getState());
		enterRule(_localctx, 972, RULE_ifNotExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7734);
			match(IF_SYMBOL);
			setState(7735);
			notRule();
			setState(7736);
			match(EXISTS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureParameterContext extends ParserRuleContext {
		public Token type;
		public FunctionParameterContext functionParameter() {
			return getRuleContext(FunctionParameterContext.class,0);
		}
		public TerminalNode IN_SYMBOL() { return getToken(MultiQueryMySQLParser.IN_SYMBOL, 0); }
		public TerminalNode OUT_SYMBOL() { return getToken(MultiQueryMySQLParser.OUT_SYMBOL, 0); }
		public TerminalNode INOUT_SYMBOL() { return getToken(MultiQueryMySQLParser.INOUT_SYMBOL, 0); }
		public ProcedureParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureParameter; }
	}

	public final ProcedureParameterContext procedureParameter() throws RecognitionException {
		ProcedureParameterContext _localctx = new ProcedureParameterContext(_ctx, getState());
		enterRule(_localctx, 974, RULE_procedureParameter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7739);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1035,_ctx) ) {
			case 1:
				{
				setState(7738);
				((ProcedureParameterContext)_localctx).type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INOUT_SYMBOL || _la==IN_SYMBOL || _la==OUT_SYMBOL) ) {
					((ProcedureParameterContext)_localctx).type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(7741);
			functionParameter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionParameterContext extends ParserRuleContext {
		public ParameterNameContext parameterName() {
			return getRuleContext(ParameterNameContext.class,0);
		}
		public TypeWithOptCollateContext typeWithOptCollate() {
			return getRuleContext(TypeWithOptCollateContext.class,0);
		}
		public FunctionParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionParameter; }
	}

	public final FunctionParameterContext functionParameter() throws RecognitionException {
		FunctionParameterContext _localctx = new FunctionParameterContext(_ctx, getState());
		enterRule(_localctx, 976, RULE_functionParameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7743);
			parameterName();
			setState(7744);
			typeWithOptCollate();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollateContext extends ParserRuleContext {
		public TerminalNode COLLATE_SYMBOL() { return getToken(MultiQueryMySQLParser.COLLATE_SYMBOL, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public CollateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collate; }
	}

	public final CollateContext collate() throws RecognitionException {
		CollateContext _localctx = new CollateContext(_ctx, getState());
		enterRule(_localctx, 978, RULE_collate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7746);
			match(COLLATE_SYMBOL);
			setState(7747);
			collationName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeWithOptCollateContext extends ParserRuleContext {
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public CollateContext collate() {
			return getRuleContext(CollateContext.class,0);
		}
		public TypeWithOptCollateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeWithOptCollate; }
	}

	public final TypeWithOptCollateContext typeWithOptCollate() throws RecognitionException {
		TypeWithOptCollateContext _localctx = new TypeWithOptCollateContext(_ctx, getState());
		enterRule(_localctx, 980, RULE_typeWithOptCollate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7749);
			dataType();
			setState(7751);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1036,_ctx) ) {
			case 1:
				{
				setState(7750);
				collate();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SchemaIdentifierPairContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<SchemaRefContext> schemaRef() {
			return getRuleContexts(SchemaRefContext.class);
		}
		public SchemaRefContext schemaRef(int i) {
			return getRuleContext(SchemaRefContext.class,i);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SchemaIdentifierPairContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaIdentifierPair; }
	}

	public final SchemaIdentifierPairContext schemaIdentifierPair() throws RecognitionException {
		SchemaIdentifierPairContext _localctx = new SchemaIdentifierPairContext(_ctx, getState());
		enterRule(_localctx, 982, RULE_schemaIdentifierPair);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7753);
			match(OPEN_PAR_SYMBOL);
			setState(7754);
			schemaRef();
			setState(7755);
			match(COMMA_SYMBOL);
			setState(7756);
			schemaRef();
			setState(7757);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewRefListContext extends ParserRuleContext {
		public List<ViewRefContext> viewRef() {
			return getRuleContexts(ViewRefContext.class);
		}
		public ViewRefContext viewRef(int i) {
			return getRuleContext(ViewRefContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public ViewRefListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewRefList; }
	}

	public final ViewRefListContext viewRefList() throws RecognitionException {
		ViewRefListContext _localctx = new ViewRefListContext(_ctx, getState());
		enterRule(_localctx, 984, RULE_viewRefList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7759);
			viewRef();
			setState(7764);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1037,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(7760);
					match(COMMA_SYMBOL);
					setState(7761);
					viewRef();
					}
					} 
				}
				setState(7766);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1037,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateListContext extends ParserRuleContext {
		public List<UpdateElementContext> updateElement() {
			return getRuleContexts(UpdateElementContext.class);
		}
		public UpdateElementContext updateElement(int i) {
			return getRuleContext(UpdateElementContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public UpdateListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateList; }
	}

	public final UpdateListContext updateList() throws RecognitionException {
		UpdateListContext _localctx = new UpdateListContext(_ctx, getState());
		enterRule(_localctx, 986, RULE_updateList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7767);
			updateElement();
			setState(7772);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1038,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(7768);
					match(COMMA_SYMBOL);
					setState(7769);
					updateElement();
					}
					} 
				}
				setState(7774);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1038,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateElementContext extends ParserRuleContext {
		public ColumnRefContext columnRef() {
			return getRuleContext(ColumnRefContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MultiQueryMySQLParser.DEFAULT_SYMBOL, 0); }
		public UpdateElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateElement; }
	}

	public final UpdateElementContext updateElement() throws RecognitionException {
		UpdateElementContext _localctx = new UpdateElementContext(_ctx, getState());
		enterRule(_localctx, 988, RULE_updateElement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7775);
			columnRef();
			setState(7776);
			match(EQUAL_OPERATOR);
			setState(7779);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1039,_ctx) ) {
			case 1:
				{
				setState(7777);
				expr(0);
				}
				break;
			case 2:
				{
				setState(7778);
				match(DEFAULT_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetClauseContext extends ParserRuleContext {
		public CharsetContext charset() {
			return getRuleContext(CharsetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public CharsetClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetClause; }
	}

	public final CharsetClauseContext charsetClause() throws RecognitionException {
		CharsetClauseContext _localctx = new CharsetClauseContext(_ctx, getState());
		enterRule(_localctx, 990, RULE_charsetClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7781);
			charset();
			setState(7782);
			charsetName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FieldsClauseContext extends ParserRuleContext {
		public TerminalNode COLUMNS_SYMBOL() { return getToken(MultiQueryMySQLParser.COLUMNS_SYMBOL, 0); }
		public List<FieldTermContext> fieldTerm() {
			return getRuleContexts(FieldTermContext.class);
		}
		public FieldTermContext fieldTerm(int i) {
			return getRuleContext(FieldTermContext.class,i);
		}
		public FieldsClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldsClause; }
	}

	public final FieldsClauseContext fieldsClause() throws RecognitionException {
		FieldsClauseContext _localctx = new FieldsClauseContext(_ctx, getState());
		enterRule(_localctx, 992, RULE_fieldsClause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7784);
			match(COLUMNS_SYMBOL);
			setState(7786); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(7785);
					fieldTerm();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7788); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1040,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FieldTermContext extends ParserRuleContext {
		public TerminalNode TERMINATED_SYMBOL() { return getToken(MultiQueryMySQLParser.TERMINATED_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MultiQueryMySQLParser.BY_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public TerminalNode ENCLOSED_SYMBOL() { return getToken(MultiQueryMySQLParser.ENCLOSED_SYMBOL, 0); }
		public TerminalNode OPTIONALLY_SYMBOL() { return getToken(MultiQueryMySQLParser.OPTIONALLY_SYMBOL, 0); }
		public TerminalNode ESCAPED_SYMBOL() { return getToken(MultiQueryMySQLParser.ESCAPED_SYMBOL, 0); }
		public FieldTermContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldTerm; }
	}

	public final FieldTermContext fieldTerm() throws RecognitionException {
		FieldTermContext _localctx = new FieldTermContext(_ctx, getState());
		enterRule(_localctx, 994, RULE_fieldTerm);
		int _la;
		try {
			setState(7802);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TERMINATED_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7790);
				match(TERMINATED_SYMBOL);
				setState(7791);
				match(BY_SYMBOL);
				setState(7792);
				textString();
				}
				break;
			case ENCLOSED_SYMBOL:
			case OPTIONALLY_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7794);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONALLY_SYMBOL) {
					{
					setState(7793);
					match(OPTIONALLY_SYMBOL);
					}
				}

				setState(7796);
				match(ENCLOSED_SYMBOL);
				setState(7797);
				match(BY_SYMBOL);
				setState(7798);
				textString();
				}
				break;
			case ESCAPED_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(7799);
				match(ESCAPED_SYMBOL);
				setState(7800);
				match(BY_SYMBOL);
				setState(7801);
				textString();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LinesClauseContext extends ParserRuleContext {
		public TerminalNode LINES_SYMBOL() { return getToken(MultiQueryMySQLParser.LINES_SYMBOL, 0); }
		public List<LineTermContext> lineTerm() {
			return getRuleContexts(LineTermContext.class);
		}
		public LineTermContext lineTerm(int i) {
			return getRuleContext(LineTermContext.class,i);
		}
		public LinesClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_linesClause; }
	}

	public final LinesClauseContext linesClause() throws RecognitionException {
		LinesClauseContext _localctx = new LinesClauseContext(_ctx, getState());
		enterRule(_localctx, 996, RULE_linesClause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7804);
			match(LINES_SYMBOL);
			setState(7806); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(7805);
					lineTerm();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7808); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1043,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LineTermContext extends ParserRuleContext {
		public TerminalNode BY_SYMBOL() { return getToken(MultiQueryMySQLParser.BY_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public TerminalNode TERMINATED_SYMBOL() { return getToken(MultiQueryMySQLParser.TERMINATED_SYMBOL, 0); }
		public TerminalNode STARTING_SYMBOL() { return getToken(MultiQueryMySQLParser.STARTING_SYMBOL, 0); }
		public LineTermContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lineTerm; }
	}

	public final LineTermContext lineTerm() throws RecognitionException {
		LineTermContext _localctx = new LineTermContext(_ctx, getState());
		enterRule(_localctx, 998, RULE_lineTerm);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7810);
			_la = _input.LA(1);
			if ( !(_la==STARTING_SYMBOL || _la==TERMINATED_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7811);
			match(BY_SYMBOL);
			setState(7812);
			textString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserListContext extends ParserRuleContext {
		public List<UserContext> user() {
			return getRuleContexts(UserContext.class);
		}
		public UserContext user(int i) {
			return getRuleContext(UserContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public UserListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userList; }
	}

	public final UserListContext userList() throws RecognitionException {
		UserListContext _localctx = new UserListContext(_ctx, getState());
		enterRule(_localctx, 1000, RULE_userList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7814);
			user();
			setState(7819);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1044,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(7815);
					match(COMMA_SYMBOL);
					setState(7816);
					user();
					}
					} 
				}
				setState(7821);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1044,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUserListContext extends ParserRuleContext {
		public List<CreateUserEntryContext> createUserEntry() {
			return getRuleContexts(CreateUserEntryContext.class);
		}
		public CreateUserEntryContext createUserEntry(int i) {
			return getRuleContext(CreateUserEntryContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public CreateUserListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUserList; }
	}

	public final CreateUserListContext createUserList() throws RecognitionException {
		CreateUserListContext _localctx = new CreateUserListContext(_ctx, getState());
		enterRule(_localctx, 1002, RULE_createUserList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7822);
			createUserEntry();
			setState(7827);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1045,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(7823);
					match(COMMA_SYMBOL);
					setState(7824);
					createUserEntry();
					}
					} 
				}
				setState(7829);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1045,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUserListContext extends ParserRuleContext {
		public List<AlterUserEntryContext> alterUserEntry() {
			return getRuleContexts(AlterUserEntryContext.class);
		}
		public AlterUserEntryContext alterUserEntry(int i) {
			return getRuleContext(AlterUserEntryContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public AlterUserListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUserList; }
	}

	public final AlterUserListContext alterUserList() throws RecognitionException {
		AlterUserListContext _localctx = new AlterUserListContext(_ctx, getState());
		enterRule(_localctx, 1004, RULE_alterUserList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7830);
			alterUserEntry();
			setState(7835);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1046,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(7831);
					match(COMMA_SYMBOL);
					setState(7832);
					alterUserEntry();
					}
					} 
				}
				setState(7837);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1046,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUserEntryContext extends ParserRuleContext {
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public TerminalNode IDENTIFIED_SYMBOL() { return getToken(MultiQueryMySQLParser.IDENTIFIED_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MultiQueryMySQLParser.BY_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public TerminalNode WITH_SYMBOL() { return getToken(MultiQueryMySQLParser.WITH_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public TerminalNode RANDOM_SYMBOL() { return getToken(MultiQueryMySQLParser.RANDOM_SYMBOL, 0); }
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MultiQueryMySQLParser.PASSWORD_SYMBOL, 0); }
		public TerminalNode AS_SYMBOL() { return getToken(MultiQueryMySQLParser.AS_SYMBOL, 0); }
		public TextStringHashContext textStringHash() {
			return getRuleContext(TextStringHashContext.class,0);
		}
		public CreateUserEntryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUserEntry; }
	}

	public final CreateUserEntryContext createUserEntry() throws RecognitionException {
		CreateUserEntryContext _localctx = new CreateUserEntryContext(_ctx, getState());
		enterRule(_localctx, 1006, RULE_createUserEntry);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7838);
			user();
			setState(7865);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1051,_ctx) ) {
			case 1:
				{
				setState(7839);
				match(IDENTIFIED_SYMBOL);
				setState(7863);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1050,_ctx) ) {
				case 1:
					{
					setState(7840);
					match(BY_SYMBOL);
					setState(7843);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1047,_ctx) ) {
					case 1:
						{
						setState(7841);
						if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
						setState(7842);
						match(PASSWORD_SYMBOL);
						}
						break;
					}
					setState(7845);
					textString();
					}
					break;
				case 2:
					{
					setState(7846);
					match(WITH_SYMBOL);
					setState(7847);
					textOrIdentifier();
					setState(7853);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1048,_ctx) ) {
					case 1:
						{
						setState(7848);
						match(AS_SYMBOL);
						setState(7849);
						textStringHash();
						}
						break;
					case 2:
						{
						setState(7850);
						if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
						setState(7851);
						match(BY_SYMBOL);
						setState(7852);
						textString();
						}
						break;
					}
					}
					break;
				case 3:
					{
					setState(7855);
					if (!(serverVersion >= 80018)) throw new FailedPredicateException(this, "serverVersion >= 80018");
					setState(7858);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WITH_SYMBOL) {
						{
						setState(7856);
						match(WITH_SYMBOL);
						setState(7857);
						textOrIdentifier();
						}
					}

					setState(7860);
					match(BY_SYMBOL);
					setState(7861);
					match(RANDOM_SYMBOL);
					setState(7862);
					match(PASSWORD_SYMBOL);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUserEntryContext extends ParserRuleContext {
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public TerminalNode IDENTIFIED_SYMBOL() { return getToken(MultiQueryMySQLParser.IDENTIFIED_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MultiQueryMySQLParser.BY_SYMBOL, 0); }
		public List<TextStringContext> textString() {
			return getRuleContexts(TextStringContext.class);
		}
		public TextStringContext textString(int i) {
			return getRuleContext(TextStringContext.class,i);
		}
		public TerminalNode WITH_SYMBOL() { return getToken(MultiQueryMySQLParser.WITH_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public DiscardOldPasswordContext discardOldPassword() {
			return getRuleContext(DiscardOldPasswordContext.class,0);
		}
		public TerminalNode REPLACE_SYMBOL() { return getToken(MultiQueryMySQLParser.REPLACE_SYMBOL, 0); }
		public RetainCurrentPasswordContext retainCurrentPassword() {
			return getRuleContext(RetainCurrentPasswordContext.class,0);
		}
		public TerminalNode AS_SYMBOL() { return getToken(MultiQueryMySQLParser.AS_SYMBOL, 0); }
		public TextStringHashContext textStringHash() {
			return getRuleContext(TextStringHashContext.class,0);
		}
		public AlterUserEntryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUserEntry; }
	}

	public final AlterUserEntryContext alterUserEntry() throws RecognitionException {
		AlterUserEntryContext _localctx = new AlterUserEntryContext(_ctx, getState());
		enterRule(_localctx, 1008, RULE_alterUserEntry);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7867);
			user();
			setState(7896);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1059,_ctx) ) {
			case 1:
				{
				setState(7868);
				match(IDENTIFIED_SYMBOL);
				setState(7891);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1057,_ctx) ) {
				case 1:
					{
					setState(7871);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WITH_SYMBOL) {
						{
						setState(7869);
						match(WITH_SYMBOL);
						setState(7870);
						textOrIdentifier();
						}
					}

					setState(7873);
					match(BY_SYMBOL);
					setState(7874);
					textString();
					setState(7877);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1053,_ctx) ) {
					case 1:
						{
						setState(7875);
						match(REPLACE_SYMBOL);
						setState(7876);
						textString();
						}
						break;
					}
					setState(7880);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1054,_ctx) ) {
					case 1:
						{
						setState(7879);
						retainCurrentPassword();
						}
						break;
					}
					}
					break;
				case 2:
					{
					setState(7882);
					match(WITH_SYMBOL);
					setState(7883);
					textOrIdentifier();
					setState(7889);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1056,_ctx) ) {
					case 1:
						{
						setState(7884);
						match(AS_SYMBOL);
						setState(7885);
						textStringHash();
						setState(7887);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,1055,_ctx) ) {
						case 1:
							{
							setState(7886);
							retainCurrentPassword();
							}
							break;
						}
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(7894);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1058,_ctx) ) {
				case 1:
					{
					setState(7893);
					discardOldPassword();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RetainCurrentPasswordContext extends ParserRuleContext {
		public TerminalNode RETAIN_SYMBOL() { return getToken(MultiQueryMySQLParser.RETAIN_SYMBOL, 0); }
		public TerminalNode CURRENT_SYMBOL() { return getToken(MultiQueryMySQLParser.CURRENT_SYMBOL, 0); }
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MultiQueryMySQLParser.PASSWORD_SYMBOL, 0); }
		public RetainCurrentPasswordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_retainCurrentPassword; }
	}

	public final RetainCurrentPasswordContext retainCurrentPassword() throws RecognitionException {
		RetainCurrentPasswordContext _localctx = new RetainCurrentPasswordContext(_ctx, getState());
		enterRule(_localctx, 1010, RULE_retainCurrentPassword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7898);
			match(RETAIN_SYMBOL);
			setState(7899);
			match(CURRENT_SYMBOL);
			setState(7900);
			match(PASSWORD_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiscardOldPasswordContext extends ParserRuleContext {
		public TerminalNode DISCARD_SYMBOL() { return getToken(MultiQueryMySQLParser.DISCARD_SYMBOL, 0); }
		public TerminalNode OLD_SYMBOL() { return getToken(MultiQueryMySQLParser.OLD_SYMBOL, 0); }
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MultiQueryMySQLParser.PASSWORD_SYMBOL, 0); }
		public DiscardOldPasswordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_discardOldPassword; }
	}

	public final DiscardOldPasswordContext discardOldPassword() throws RecognitionException {
		DiscardOldPasswordContext _localctx = new DiscardOldPasswordContext(_ctx, getState());
		enterRule(_localctx, 1012, RULE_discardOldPassword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7902);
			match(DISCARD_SYMBOL);
			setState(7903);
			match(OLD_SYMBOL);
			setState(7904);
			match(PASSWORD_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplacePasswordContext extends ParserRuleContext {
		public TerminalNode REPLACE_SYMBOL() { return getToken(MultiQueryMySQLParser.REPLACE_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public ReplacePasswordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replacePassword; }
	}

	public final ReplacePasswordContext replacePassword() throws RecognitionException {
		ReplacePasswordContext _localctx = new ReplacePasswordContext(_ctx, getState());
		enterRule(_localctx, 1014, RULE_replacePassword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7906);
			match(REPLACE_SYMBOL);
			setState(7907);
			textString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserIdentifierOrTextContext extends ParserRuleContext {
		public List<TextOrIdentifierContext> textOrIdentifier() {
			return getRuleContexts(TextOrIdentifierContext.class);
		}
		public TextOrIdentifierContext textOrIdentifier(int i) {
			return getRuleContext(TextOrIdentifierContext.class,i);
		}
		public TerminalNode AT_SIGN_SYMBOL() { return getToken(MultiQueryMySQLParser.AT_SIGN_SYMBOL, 0); }
		public TerminalNode AT_TEXT_SUFFIX() { return getToken(MultiQueryMySQLParser.AT_TEXT_SUFFIX, 0); }
		public UserIdentifierOrTextContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userIdentifierOrText; }
	}

	public final UserIdentifierOrTextContext userIdentifierOrText() throws RecognitionException {
		UserIdentifierOrTextContext _localctx = new UserIdentifierOrTextContext(_ctx, getState());
		enterRule(_localctx, 1016, RULE_userIdentifierOrText);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7909);
			textOrIdentifier();
			setState(7913);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1060,_ctx) ) {
			case 1:
				{
				setState(7910);
				match(AT_SIGN_SYMBOL);
				setState(7911);
				textOrIdentifier();
				}
				break;
			case 2:
				{
				setState(7912);
				match(AT_TEXT_SUFFIX);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserContext extends ParserRuleContext {
		public UserIdentifierOrTextContext userIdentifierOrText() {
			return getRuleContext(UserIdentifierOrTextContext.class,0);
		}
		public TerminalNode CURRENT_USER_SYMBOL() { return getToken(MultiQueryMySQLParser.CURRENT_USER_SYMBOL, 0); }
		public ParenthesesContext parentheses() {
			return getRuleContext(ParenthesesContext.class,0);
		}
		public UserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user; }
	}

	public final UserContext user() throws RecognitionException {
		UserContext _localctx = new UserContext(_ctx, getState());
		enterRule(_localctx, 1018, RULE_user);
		try {
			setState(7920);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1062,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7915);
				userIdentifierOrText();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7916);
				match(CURRENT_USER_SYMBOL);
				setState(7918);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1061,_ctx) ) {
				case 1:
					{
					setState(7917);
					parentheses();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LikeClauseContext extends ParserRuleContext {
		public TerminalNode LIKE_SYMBOL() { return getToken(MultiQueryMySQLParser.LIKE_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public LikeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_likeClause; }
	}

	public final LikeClauseContext likeClause() throws RecognitionException {
		LikeClauseContext _localctx = new LikeClauseContext(_ctx, getState());
		enterRule(_localctx, 1020, RULE_likeClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7922);
			match(LIKE_SYMBOL);
			setState(7923);
			textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LikeOrWhereContext extends ParserRuleContext {
		public LikeClauseContext likeClause() {
			return getRuleContext(LikeClauseContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public LikeOrWhereContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_likeOrWhere; }
	}

	public final LikeOrWhereContext likeOrWhere() throws RecognitionException {
		LikeOrWhereContext _localctx = new LikeOrWhereContext(_ctx, getState());
		enterRule(_localctx, 1022, RULE_likeOrWhere);
		try {
			setState(7927);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIKE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7925);
				likeClause();
				}
				break;
			case WHERE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7926);
				whereClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OnlineOptionContext extends ParserRuleContext {
		public TerminalNode ONLINE_SYMBOL() { return getToken(MultiQueryMySQLParser.ONLINE_SYMBOL, 0); }
		public TerminalNode OFFLINE_SYMBOL() { return getToken(MultiQueryMySQLParser.OFFLINE_SYMBOL, 0); }
		public OnlineOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onlineOption; }
	}

	public final OnlineOptionContext onlineOption() throws RecognitionException {
		OnlineOptionContext _localctx = new OnlineOptionContext(_ctx, getState());
		enterRule(_localctx, 1024, RULE_onlineOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7929);
			_la = _input.LA(1);
			if ( !(_la==OFFLINE_SYMBOL || _la==ONLINE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NoWriteToBinLogContext extends ParserRuleContext {
		public TerminalNode LOCAL_SYMBOL() { return getToken(MultiQueryMySQLParser.LOCAL_SYMBOL, 0); }
		public TerminalNode NO_WRITE_TO_BINLOG_SYMBOL() { return getToken(MultiQueryMySQLParser.NO_WRITE_TO_BINLOG_SYMBOL, 0); }
		public NoWriteToBinLogContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_noWriteToBinLog; }
	}

	public final NoWriteToBinLogContext noWriteToBinLog() throws RecognitionException {
		NoWriteToBinLogContext _localctx = new NoWriteToBinLogContext(_ctx, getState());
		enterRule(_localctx, 1026, RULE_noWriteToBinLog);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7931);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UsePartitionContext extends ParserRuleContext {
		public TerminalNode PARTITION_SYMBOL() { return getToken(MultiQueryMySQLParser.PARTITION_SYMBOL, 0); }
		public IdentifierListWithParenthesesContext identifierListWithParentheses() {
			return getRuleContext(IdentifierListWithParenthesesContext.class,0);
		}
		public UsePartitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_usePartition; }
	}

	public final UsePartitionContext usePartition() throws RecognitionException {
		UsePartitionContext _localctx = new UsePartitionContext(_ctx, getState());
		enterRule(_localctx, 1028, RULE_usePartition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7933);
			if (!(serverVersion >= 50602)) throw new FailedPredicateException(this, "serverVersion >= 50602");
			setState(7934);
			match(PARTITION_SYMBOL);
			setState(7935);
			identifierListWithParentheses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FieldIdentifierContext extends ParserRuleContext {
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public FieldIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldIdentifier; }
	}

	public final FieldIdentifierContext fieldIdentifier() throws RecognitionException {
		FieldIdentifierContext _localctx = new FieldIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1030, RULE_fieldIdentifier);
		try {
			setState(7942);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1065,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7937);
				dotIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7938);
				qualifiedIdentifier();
				setState(7940);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1064,_ctx) ) {
				case 1:
					{
					setState(7939);
					dotIdentifier();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public FieldIdentifierContext fieldIdentifier() {
			return getRuleContext(FieldIdentifierContext.class,0);
		}
		public ColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnName; }
	}

	public final ColumnNameContext columnName() throws RecognitionException {
		ColumnNameContext _localctx = new ColumnNameContext(_ctx, getState());
		enterRule(_localctx, 1032, RULE_columnName);
		try {
			setState(7948);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1066,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7944);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(7945);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7946);
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				setState(7947);
				fieldIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnInternalRefContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ColumnInternalRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnInternalRef; }
	}

	public final ColumnInternalRefContext columnInternalRef() throws RecognitionException {
		ColumnInternalRefContext _localctx = new ColumnInternalRefContext(_ctx, getState());
		enterRule(_localctx, 1034, RULE_columnInternalRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7950);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnInternalRefListContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<ColumnInternalRefContext> columnInternalRef() {
			return getRuleContexts(ColumnInternalRefContext.class);
		}
		public ColumnInternalRefContext columnInternalRef(int i) {
			return getRuleContext(ColumnInternalRefContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public ColumnInternalRefListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnInternalRefList; }
	}

	public final ColumnInternalRefListContext columnInternalRefList() throws RecognitionException {
		ColumnInternalRefListContext _localctx = new ColumnInternalRefListContext(_ctx, getState());
		enterRule(_localctx, 1036, RULE_columnInternalRefList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7952);
			match(OPEN_PAR_SYMBOL);
			setState(7953);
			columnInternalRef();
			setState(7958);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(7954);
				match(COMMA_SYMBOL);
				setState(7955);
				columnInternalRef();
				}
				}
				setState(7960);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7961);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnRefContext extends ParserRuleContext {
		public FieldIdentifierContext fieldIdentifier() {
			return getRuleContext(FieldIdentifierContext.class,0);
		}
		public ColumnRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnRef; }
	}

	public final ColumnRefContext columnRef() throws RecognitionException {
		ColumnRefContext _localctx = new ColumnRefContext(_ctx, getState());
		enterRule(_localctx, 1038, RULE_columnRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7963);
			fieldIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertIdentifierContext extends ParserRuleContext {
		public ColumnRefContext columnRef() {
			return getRuleContext(ColumnRefContext.class,0);
		}
		public TableWildContext tableWild() {
			return getRuleContext(TableWildContext.class,0);
		}
		public InsertIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertIdentifier; }
	}

	public final InsertIdentifierContext insertIdentifier() throws RecognitionException {
		InsertIdentifierContext _localctx = new InsertIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1040, RULE_insertIdentifier);
		try {
			setState(7967);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1068,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7965);
				columnRef();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7966);
				tableWild();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public IndexNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexName; }
	}

	public final IndexNameContext indexName() throws RecognitionException {
		IndexNameContext _localctx = new IndexNameContext(_ctx, getState());
		enterRule(_localctx, 1042, RULE_indexName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7969);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexRefContext extends ParserRuleContext {
		public FieldIdentifierContext fieldIdentifier() {
			return getRuleContext(FieldIdentifierContext.class,0);
		}
		public IndexRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexRef; }
	}

	public final IndexRefContext indexRef() throws RecognitionException {
		IndexRefContext _localctx = new IndexRefContext(_ctx, getState());
		enterRule(_localctx, 1044, RULE_indexRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7971);
			fieldIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableWildContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> DOT_SYMBOL() { return getTokens(MultiQueryMySQLParser.DOT_SYMBOL); }
		public TerminalNode DOT_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.DOT_SYMBOL, i);
		}
		public TerminalNode MULT_OPERATOR() { return getToken(MultiQueryMySQLParser.MULT_OPERATOR, 0); }
		public TableWildContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableWild; }
	}

	public final TableWildContext tableWild() throws RecognitionException {
		TableWildContext _localctx = new TableWildContext(_ctx, getState());
		enterRule(_localctx, 1046, RULE_tableWild);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7973);
			identifier();
			setState(7974);
			match(DOT_SYMBOL);
			setState(7978);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1069,_ctx) ) {
			case 1:
				{
				setState(7975);
				identifier();
				setState(7976);
				match(DOT_SYMBOL);
				}
				break;
			}
			setState(7980);
			match(MULT_OPERATOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SchemaNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaName; }
	}

	public final SchemaNameContext schemaName() throws RecognitionException {
		SchemaNameContext _localctx = new SchemaNameContext(_ctx, getState());
		enterRule(_localctx, 1048, RULE_schemaName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7982);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SchemaRefContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaRef; }
	}

	public final SchemaRefContext schemaRef() throws RecognitionException {
		SchemaRefContext _localctx = new SchemaRefContext(_ctx, getState());
		enterRule(_localctx, 1050, RULE_schemaRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7984);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureNameContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public ProcedureNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureName; }
	}

	public final ProcedureNameContext procedureName() throws RecognitionException {
		ProcedureNameContext _localctx = new ProcedureNameContext(_ctx, getState());
		enterRule(_localctx, 1052, RULE_procedureName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7986);
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureRefContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public ProcedureRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureRef; }
	}

	public final ProcedureRefContext procedureRef() throws RecognitionException {
		ProcedureRefContext _localctx = new ProcedureRefContext(_ctx, getState());
		enterRule(_localctx, 1054, RULE_procedureRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7988);
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionNameContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public FunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionName; }
	}

	public final FunctionNameContext functionName() throws RecognitionException {
		FunctionNameContext _localctx = new FunctionNameContext(_ctx, getState());
		enterRule(_localctx, 1056, RULE_functionName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7990);
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionRefContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public FunctionRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionRef; }
	}

	public final FunctionRefContext functionRef() throws RecognitionException {
		FunctionRefContext _localctx = new FunctionRefContext(_ctx, getState());
		enterRule(_localctx, 1058, RULE_functionRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7992);
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerNameContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public TriggerNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerName; }
	}

	public final TriggerNameContext triggerName() throws RecognitionException {
		TriggerNameContext _localctx = new TriggerNameContext(_ctx, getState());
		enterRule(_localctx, 1060, RULE_triggerName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7994);
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerRefContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public TriggerRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerRef; }
	}

	public final TriggerRefContext triggerRef() throws RecognitionException {
		TriggerRefContext _localctx = new TriggerRefContext(_ctx, getState());
		enterRule(_localctx, 1062, RULE_triggerRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7996);
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewNameContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public ViewNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewName; }
	}

	public final ViewNameContext viewName() throws RecognitionException {
		ViewNameContext _localctx = new ViewNameContext(_ctx, getState());
		enterRule(_localctx, 1064, RULE_viewName);
		try {
			setState(8000);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1070,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7998);
				qualifiedIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7999);
				dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewRefContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public ViewRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewRef; }
	}

	public final ViewRefContext viewRef() throws RecognitionException {
		ViewRefContext _localctx = new ViewRefContext(_ctx, getState());
		enterRule(_localctx, 1066, RULE_viewRef);
		try {
			setState(8004);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1071,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8002);
				qualifiedIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8003);
				dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablespaceNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TablespaceNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespaceName; }
	}

	public final TablespaceNameContext tablespaceName() throws RecognitionException {
		TablespaceNameContext _localctx = new TablespaceNameContext(_ctx, getState());
		enterRule(_localctx, 1068, RULE_tablespaceName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8006);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablespaceRefContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TablespaceRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespaceRef; }
	}

	public final TablespaceRefContext tablespaceRef() throws RecognitionException {
		TablespaceRefContext _localctx = new TablespaceRefContext(_ctx, getState());
		enterRule(_localctx, 1070, RULE_tablespaceRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8008);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LogfileGroupNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public LogfileGroupNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logfileGroupName; }
	}

	public final LogfileGroupNameContext logfileGroupName() throws RecognitionException {
		LogfileGroupNameContext _localctx = new LogfileGroupNameContext(_ctx, getState());
		enterRule(_localctx, 1072, RULE_logfileGroupName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8010);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LogfileGroupRefContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public LogfileGroupRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logfileGroupRef; }
	}

	public final LogfileGroupRefContext logfileGroupRef() throws RecognitionException {
		LogfileGroupRefContext _localctx = new LogfileGroupRefContext(_ctx, getState());
		enterRule(_localctx, 1074, RULE_logfileGroupRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8012);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EventNameContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public EventNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_eventName; }
	}

	public final EventNameContext eventName() throws RecognitionException {
		EventNameContext _localctx = new EventNameContext(_ctx, getState());
		enterRule(_localctx, 1076, RULE_eventName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8014);
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EventRefContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public EventRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_eventRef; }
	}

	public final EventRefContext eventRef() throws RecognitionException {
		EventRefContext _localctx = new EventRefContext(_ctx, getState());
		enterRule(_localctx, 1078, RULE_eventRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8016);
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UdfNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public UdfNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_udfName; }
	}

	public final UdfNameContext udfName() throws RecognitionException {
		UdfNameContext _localctx = new UdfNameContext(_ctx, getState());
		enterRule(_localctx, 1080, RULE_udfName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8018);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ServerNameContext extends ParserRuleContext {
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public ServerNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serverName; }
	}

	public final ServerNameContext serverName() throws RecognitionException {
		ServerNameContext _localctx = new ServerNameContext(_ctx, getState());
		enterRule(_localctx, 1082, RULE_serverName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8020);
			textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ServerRefContext extends ParserRuleContext {
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public ServerRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serverRef; }
	}

	public final ServerRefContext serverRef() throws RecognitionException {
		ServerRefContext _localctx = new ServerRefContext(_ctx, getState());
		enterRule(_localctx, 1084, RULE_serverRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8022);
			textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EngineRefContext extends ParserRuleContext {
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public EngineRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_engineRef; }
	}

	public final EngineRefContext engineRef() throws RecognitionException {
		EngineRefContext _localctx = new EngineRefContext(_ctx, getState());
		enterRule(_localctx, 1086, RULE_engineRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8024);
			textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableNameContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public TableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableName; }
	}

	public final TableNameContext tableName() throws RecognitionException {
		TableNameContext _localctx = new TableNameContext(_ctx, getState());
		enterRule(_localctx, 1088, RULE_tableName);
		try {
			setState(8028);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1072,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8026);
				qualifiedIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8027);
				dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FilterTableRefContext extends ParserRuleContext {
		public SchemaRefContext schemaRef() {
			return getRuleContext(SchemaRefContext.class,0);
		}
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public FilterTableRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filterTableRef; }
	}

	public final FilterTableRefContext filterTableRef() throws RecognitionException {
		FilterTableRefContext _localctx = new FilterTableRefContext(_ctx, getState());
		enterRule(_localctx, 1090, RULE_filterTableRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8030);
			schemaRef();
			setState(8031);
			dotIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableRefWithWildcardContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode DOT_SYMBOL() { return getToken(MultiQueryMySQLParser.DOT_SYMBOL, 0); }
		public TerminalNode MULT_OPERATOR() { return getToken(MultiQueryMySQLParser.MULT_OPERATOR, 0); }
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public TableRefWithWildcardContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableRefWithWildcard; }
	}

	public final TableRefWithWildcardContext tableRefWithWildcard() throws RecognitionException {
		TableRefWithWildcardContext _localctx = new TableRefWithWildcardContext(_ctx, getState());
		enterRule(_localctx, 1092, RULE_tableRefWithWildcard);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8033);
			identifier();
			setState(8041);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1074,_ctx) ) {
			case 1:
				{
				setState(8034);
				match(DOT_SYMBOL);
				setState(8035);
				match(MULT_OPERATOR);
				}
				break;
			case 2:
				{
				setState(8036);
				dotIdentifier();
				setState(8039);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1073,_ctx) ) {
				case 1:
					{
					setState(8037);
					match(DOT_SYMBOL);
					setState(8038);
					match(MULT_OPERATOR);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableRefContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public TableRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableRef; }
	}

	public final TableRefContext tableRef() throws RecognitionException {
		TableRefContext _localctx = new TableRefContext(_ctx, getState());
		enterRule(_localctx, 1094, RULE_tableRef);
		try {
			setState(8045);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1075,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8043);
				qualifiedIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8044);
				dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableRefListContext extends ParserRuleContext {
		public List<TableRefContext> tableRef() {
			return getRuleContexts(TableRefContext.class);
		}
		public TableRefContext tableRef(int i) {
			return getRuleContext(TableRefContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public TableRefListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableRefList; }
	}

	public final TableRefListContext tableRefList() throws RecognitionException {
		TableRefListContext _localctx = new TableRefListContext(_ctx, getState());
		enterRule(_localctx, 1096, RULE_tableRefList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8047);
			tableRef();
			setState(8052);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1076,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8048);
					match(COMMA_SYMBOL);
					setState(8049);
					tableRef();
					}
					} 
				}
				setState(8054);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1076,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableAliasRefListContext extends ParserRuleContext {
		public List<TableRefWithWildcardContext> tableRefWithWildcard() {
			return getRuleContexts(TableRefWithWildcardContext.class);
		}
		public TableRefWithWildcardContext tableRefWithWildcard(int i) {
			return getRuleContext(TableRefWithWildcardContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public TableAliasRefListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableAliasRefList; }
	}

	public final TableAliasRefListContext tableAliasRefList() throws RecognitionException {
		TableAliasRefListContext _localctx = new TableAliasRefListContext(_ctx, getState());
		enterRule(_localctx, 1098, RULE_tableAliasRefList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8055);
			tableRefWithWildcard();
			setState(8060);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1077,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8056);
					match(COMMA_SYMBOL);
					setState(8057);
					tableRefWithWildcard();
					}
					} 
				}
				setState(8062);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1077,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ParameterNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterName; }
	}

	public final ParameterNameContext parameterName() throws RecognitionException {
		ParameterNameContext _localctx = new ParameterNameContext(_ctx, getState());
		enterRule(_localctx, 1100, RULE_parameterName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8063);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LabelIdentifierContext extends ParserRuleContext {
		public PureIdentifierContext pureIdentifier() {
			return getRuleContext(PureIdentifierContext.class,0);
		}
		public LabelKeywordContext labelKeyword() {
			return getRuleContext(LabelKeywordContext.class,0);
		}
		public LabelIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labelIdentifier; }
	}

	public final LabelIdentifierContext labelIdentifier() throws RecognitionException {
		LabelIdentifierContext _localctx = new LabelIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1102, RULE_labelIdentifier);
		try {
			setState(8067);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1078,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8065);
				pureIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8066);
				labelKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LabelRefContext extends ParserRuleContext {
		public LabelIdentifierContext labelIdentifier() {
			return getRuleContext(LabelIdentifierContext.class,0);
		}
		public LabelRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labelRef; }
	}

	public final LabelRefContext labelRef() throws RecognitionException {
		LabelRefContext _localctx = new LabelRefContext(_ctx, getState());
		enterRule(_localctx, 1104, RULE_labelRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8069);
			labelIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleIdentifierContext extends ParserRuleContext {
		public PureIdentifierContext pureIdentifier() {
			return getRuleContext(PureIdentifierContext.class,0);
		}
		public RoleKeywordContext roleKeyword() {
			return getRuleContext(RoleKeywordContext.class,0);
		}
		public RoleIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleIdentifier; }
	}

	public final RoleIdentifierContext roleIdentifier() throws RecognitionException {
		RoleIdentifierContext _localctx = new RoleIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1106, RULE_roleIdentifier);
		try {
			setState(8073);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1079,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8071);
				pureIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8072);
				roleKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleRefContext extends ParserRuleContext {
		public RoleIdentifierContext roleIdentifier() {
			return getRuleContext(RoleIdentifierContext.class,0);
		}
		public RoleRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleRef; }
	}

	public final RoleRefContext roleRef() throws RecognitionException {
		RoleRefContext _localctx = new RoleRefContext(_ctx, getState());
		enterRule(_localctx, 1108, RULE_roleRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8075);
			roleIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PluginRefContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public PluginRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pluginRef; }
	}

	public final PluginRefContext pluginRef() throws RecognitionException {
		PluginRefContext _localctx = new PluginRefContext(_ctx, getState());
		enterRule(_localctx, 1110, RULE_pluginRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8077);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComponentRefContext extends ParserRuleContext {
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public ComponentRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_componentRef; }
	}

	public final ComponentRefContext componentRef() throws RecognitionException {
		ComponentRefContext _localctx = new ComponentRefContext(_ctx, getState());
		enterRule(_localctx, 1112, RULE_componentRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8079);
			textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResourceGroupRefContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ResourceGroupRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resourceGroupRef; }
	}

	public final ResourceGroupRefContext resourceGroupRef() throws RecognitionException {
		ResourceGroupRefContext _localctx = new ResourceGroupRefContext(_ctx, getState());
		enterRule(_localctx, 1114, RULE_resourceGroupRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8081);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public WindowNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowName; }
	}

	public final WindowNameContext windowName() throws RecognitionException {
		WindowNameContext _localctx = new WindowNameContext(_ctx, getState());
		enterRule(_localctx, 1116, RULE_windowName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8083);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PureIdentifierContext extends ParserRuleContext {
		public TerminalNode IDENTIFIER() { return getToken(MultiQueryMySQLParser.IDENTIFIER, 0); }
		public TerminalNode BACK_TICK_QUOTED_ID() { return getToken(MultiQueryMySQLParser.BACK_TICK_QUOTED_ID, 0); }
		public TerminalNode DOUBLE_QUOTED_TEXT() { return getToken(MultiQueryMySQLParser.DOUBLE_QUOTED_TEXT, 0); }
		public PureIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pureIdentifier; }
	}

	public final PureIdentifierContext pureIdentifier() throws RecognitionException {
		PureIdentifierContext _localctx = new PureIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1118, RULE_pureIdentifier);
		int _la;
		try {
			setState(8088);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1080,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8085);
				_la = _input.LA(1);
				if ( !(_la==IDENTIFIER || _la==BACK_TICK_QUOTED_ID) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8086);
				if (!(isSqlModeActive(AnsiQuotes))) throw new FailedPredicateException(this, "isSqlModeActive(AnsiQuotes)");
				setState(8087);
				match(DOUBLE_QUOTED_TEXT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierContext extends ParserRuleContext {
		public PureIdentifierContext pureIdentifier() {
			return getRuleContext(PureIdentifierContext.class,0);
		}
		public IdentifierKeywordContext identifierKeyword() {
			return getRuleContext(IdentifierKeywordContext.class,0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 1120, RULE_identifier);
		try {
			setState(8092);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1081,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8090);
				pureIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8091);
				identifierKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierListContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierList; }
	}

	public final IdentifierListContext identifierList() throws RecognitionException {
		IdentifierListContext _localctx = new IdentifierListContext(_ctx, getState());
		enterRule(_localctx, 1122, RULE_identifierList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8094);
			identifier();
			setState(8099);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1082,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8095);
					match(COMMA_SYMBOL);
					setState(8096);
					identifier();
					}
					} 
				}
				setState(8101);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1082,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierListWithParenthesesContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public IdentifierListWithParenthesesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierListWithParentheses; }
	}

	public final IdentifierListWithParenthesesContext identifierListWithParentheses() throws RecognitionException {
		IdentifierListWithParenthesesContext _localctx = new IdentifierListWithParenthesesContext(_ctx, getState());
		enterRule(_localctx, 1124, RULE_identifierListWithParentheses);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8102);
			match(OPEN_PAR_SYMBOL);
			setState(8103);
			identifierList();
			setState(8104);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QualifiedIdentifierContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public QualifiedIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualifiedIdentifier; }
	}

	public final QualifiedIdentifierContext qualifiedIdentifier() throws RecognitionException {
		QualifiedIdentifierContext _localctx = new QualifiedIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1126, RULE_qualifiedIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8106);
			identifier();
			setState(8108);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1083,_ctx) ) {
			case 1:
				{
				setState(8107);
				dotIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleIdentifierContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<DotIdentifierContext> dotIdentifier() {
			return getRuleContexts(DotIdentifierContext.class);
		}
		public DotIdentifierContext dotIdentifier(int i) {
			return getRuleContext(DotIdentifierContext.class,i);
		}
		public SimpleIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleIdentifier; }
	}

	public final SimpleIdentifierContext simpleIdentifier() throws RecognitionException {
		SimpleIdentifierContext _localctx = new SimpleIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1128, RULE_simpleIdentifier);
		int _la;
		try {
			setState(8121);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1086,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8110);
				identifier();
				setState(8115);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT_SYMBOL) {
					{
					setState(8111);
					dotIdentifier();
					setState(8113);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT_SYMBOL) {
						{
						setState(8112);
						dotIdentifier();
						}
					}

					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8117);
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				setState(8118);
				dotIdentifier();
				setState(8119);
				dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DotIdentifierContext extends ParserRuleContext {
		public TerminalNode DOT_SYMBOL() { return getToken(MultiQueryMySQLParser.DOT_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public DotIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dotIdentifier; }
	}

	public final DotIdentifierContext dotIdentifier() throws RecognitionException {
		DotIdentifierContext _localctx = new DotIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1130, RULE_dotIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8123);
			match(DOT_SYMBOL);
			setState(8124);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ulong_numberContext extends ParserRuleContext {
		public TerminalNode INT_NUMBER() { return getToken(MultiQueryMySQLParser.INT_NUMBER, 0); }
		public TerminalNode HEX_NUMBER() { return getToken(MultiQueryMySQLParser.HEX_NUMBER, 0); }
		public TerminalNode LONG_NUMBER() { return getToken(MultiQueryMySQLParser.LONG_NUMBER, 0); }
		public TerminalNode ULONGLONG_NUMBER() { return getToken(MultiQueryMySQLParser.ULONGLONG_NUMBER, 0); }
		public TerminalNode DECIMAL_NUMBER() { return getToken(MultiQueryMySQLParser.DECIMAL_NUMBER, 0); }
		public TerminalNode FLOAT_NUMBER() { return getToken(MultiQueryMySQLParser.FLOAT_NUMBER, 0); }
		public Ulong_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ulong_number; }
	}

	public final Ulong_numberContext ulong_number() throws RecognitionException {
		Ulong_numberContext _localctx = new Ulong_numberContext(_ctx, getState());
		enterRule(_localctx, 1132, RULE_ulong_number);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8126);
			_la = _input.LA(1);
			if ( !(((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (INT_NUMBER - 380)) | (1L << (LONG_NUMBER - 380)) | (1L << (ULONGLONG_NUMBER - 380)) | (1L << (HEX_NUMBER - 380)) | (1L << (DECIMAL_NUMBER - 380)) | (1L << (FLOAT_NUMBER - 380)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Real_ulong_numberContext extends ParserRuleContext {
		public TerminalNode INT_NUMBER() { return getToken(MultiQueryMySQLParser.INT_NUMBER, 0); }
		public TerminalNode HEX_NUMBER() { return getToken(MultiQueryMySQLParser.HEX_NUMBER, 0); }
		public TerminalNode LONG_NUMBER() { return getToken(MultiQueryMySQLParser.LONG_NUMBER, 0); }
		public TerminalNode ULONGLONG_NUMBER() { return getToken(MultiQueryMySQLParser.ULONGLONG_NUMBER, 0); }
		public Real_ulong_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_real_ulong_number; }
	}

	public final Real_ulong_numberContext real_ulong_number() throws RecognitionException {
		Real_ulong_numberContext _localctx = new Real_ulong_numberContext(_ctx, getState());
		enterRule(_localctx, 1134, RULE_real_ulong_number);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8128);
			_la = _input.LA(1);
			if ( !(((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (INT_NUMBER - 380)) | (1L << (LONG_NUMBER - 380)) | (1L << (ULONGLONG_NUMBER - 380)) | (1L << (HEX_NUMBER - 380)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ulonglong_numberContext extends ParserRuleContext {
		public TerminalNode INT_NUMBER() { return getToken(MultiQueryMySQLParser.INT_NUMBER, 0); }
		public TerminalNode LONG_NUMBER() { return getToken(MultiQueryMySQLParser.LONG_NUMBER, 0); }
		public TerminalNode ULONGLONG_NUMBER() { return getToken(MultiQueryMySQLParser.ULONGLONG_NUMBER, 0); }
		public TerminalNode DECIMAL_NUMBER() { return getToken(MultiQueryMySQLParser.DECIMAL_NUMBER, 0); }
		public TerminalNode FLOAT_NUMBER() { return getToken(MultiQueryMySQLParser.FLOAT_NUMBER, 0); }
		public Ulonglong_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ulonglong_number; }
	}

	public final Ulonglong_numberContext ulonglong_number() throws RecognitionException {
		Ulonglong_numberContext _localctx = new Ulonglong_numberContext(_ctx, getState());
		enterRule(_localctx, 1136, RULE_ulonglong_number);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8130);
			_la = _input.LA(1);
			if ( !(((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (INT_NUMBER - 380)) | (1L << (LONG_NUMBER - 380)) | (1L << (ULONGLONG_NUMBER - 380)) | (1L << (DECIMAL_NUMBER - 380)) | (1L << (FLOAT_NUMBER - 380)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Real_ulonglong_numberContext extends ParserRuleContext {
		public TerminalNode INT_NUMBER() { return getToken(MultiQueryMySQLParser.INT_NUMBER, 0); }
		public TerminalNode HEX_NUMBER() { return getToken(MultiQueryMySQLParser.HEX_NUMBER, 0); }
		public TerminalNode ULONGLONG_NUMBER() { return getToken(MultiQueryMySQLParser.ULONGLONG_NUMBER, 0); }
		public TerminalNode LONG_NUMBER() { return getToken(MultiQueryMySQLParser.LONG_NUMBER, 0); }
		public Real_ulonglong_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_real_ulonglong_number; }
	}

	public final Real_ulonglong_numberContext real_ulonglong_number() throws RecognitionException {
		Real_ulonglong_numberContext _localctx = new Real_ulonglong_numberContext(_ctx, getState());
		enterRule(_localctx, 1138, RULE_real_ulonglong_number);
		try {
			setState(8137);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1087,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8132);
				match(INT_NUMBER);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8133);
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				setState(8134);
				match(HEX_NUMBER);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8135);
				match(ULONGLONG_NUMBER);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8136);
				match(LONG_NUMBER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LiteralContext extends ParserRuleContext {
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public NumLiteralContext numLiteral() {
			return getRuleContext(NumLiteralContext.class,0);
		}
		public TemporalLiteralContext temporalLiteral() {
			return getRuleContext(TemporalLiteralContext.class,0);
		}
		public NullLiteralContext nullLiteral() {
			return getRuleContext(NullLiteralContext.class,0);
		}
		public BoolLiteralContext boolLiteral() {
			return getRuleContext(BoolLiteralContext.class,0);
		}
		public TerminalNode HEX_NUMBER() { return getToken(MultiQueryMySQLParser.HEX_NUMBER, 0); }
		public TerminalNode BIN_NUMBER() { return getToken(MultiQueryMySQLParser.BIN_NUMBER, 0); }
		public TerminalNode UNDERSCORE_CHARSET() { return getToken(MultiQueryMySQLParser.UNDERSCORE_CHARSET, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_literal; }
	}

	public final LiteralContext literal() throws RecognitionException {
		LiteralContext _localctx = new LiteralContext(_ctx, getState());
		enterRule(_localctx, 1140, RULE_literal);
		int _la;
		try {
			setState(8148);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1089,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8139);
				textLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8140);
				numLiteral();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8141);
				temporalLiteral();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8142);
				nullLiteral();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8143);
				boolLiteral();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8145);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNDERSCORE_CHARSET) {
					{
					setState(8144);
					match(UNDERSCORE_CHARSET);
					}
				}

				setState(8147);
				_la = _input.LA(1);
				if ( !(_la==HEX_NUMBER || _la==BIN_NUMBER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignedLiteralContext extends ParserRuleContext {
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public TerminalNode PLUS_OPERATOR() { return getToken(MultiQueryMySQLParser.PLUS_OPERATOR, 0); }
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public TerminalNode MINUS_OPERATOR() { return getToken(MultiQueryMySQLParser.MINUS_OPERATOR, 0); }
		public SignedLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signedLiteral; }
	}

	public final SignedLiteralContext signedLiteral() throws RecognitionException {
		SignedLiteralContext _localctx = new SignedLiteralContext(_ctx, getState());
		enterRule(_localctx, 1142, RULE_signedLiteral);
		try {
			setState(8155);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1090,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8150);
				literal();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8151);
				match(PLUS_OPERATOR);
				setState(8152);
				ulong_number();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8153);
				match(MINUS_OPERATOR);
				setState(8154);
				ulong_number();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringListContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<TextStringContext> textString() {
			return getRuleContexts(TextStringContext.class);
		}
		public TextStringContext textString(int i) {
			return getRuleContext(TextStringContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public StringListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringList; }
	}

	public final StringListContext stringList() throws RecognitionException {
		StringListContext _localctx = new StringListContext(_ctx, getState());
		enterRule(_localctx, 1144, RULE_stringList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8157);
			match(OPEN_PAR_SYMBOL);
			setState(8158);
			textString();
			setState(8163);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(8159);
				match(COMMA_SYMBOL);
				setState(8160);
				textString();
				}
				}
				setState(8165);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(8166);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TextStringLiteralContext extends ParserRuleContext {
		public Token value;
		public TerminalNode SINGLE_QUOTED_TEXT() { return getToken(MultiQueryMySQLParser.SINGLE_QUOTED_TEXT, 0); }
		public TerminalNode DOUBLE_QUOTED_TEXT() { return getToken(MultiQueryMySQLParser.DOUBLE_QUOTED_TEXT, 0); }
		public TextStringLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_textStringLiteral; }
	}

	public final TextStringLiteralContext textStringLiteral() throws RecognitionException {
		TextStringLiteralContext _localctx = new TextStringLiteralContext(_ctx, getState());
		enterRule(_localctx, 1146, RULE_textStringLiteral);
		try {
			setState(8171);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1092,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8168);
				((TextStringLiteralContext)_localctx).value = match(SINGLE_QUOTED_TEXT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8169);
				if (!(!isSqlModeActive(AnsiQuotes))) throw new FailedPredicateException(this, "!isSqlModeActive(AnsiQuotes)");
				setState(8170);
				((TextStringLiteralContext)_localctx).value = match(DOUBLE_QUOTED_TEXT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TextStringContext extends ParserRuleContext {
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode HEX_NUMBER() { return getToken(MultiQueryMySQLParser.HEX_NUMBER, 0); }
		public TerminalNode BIN_NUMBER() { return getToken(MultiQueryMySQLParser.BIN_NUMBER, 0); }
		public TextStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_textString; }
	}

	public final TextStringContext textString() throws RecognitionException {
		TextStringContext _localctx = new TextStringContext(_ctx, getState());
		enterRule(_localctx, 1148, RULE_textString);
		try {
			setState(8176);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1093,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8173);
				textStringLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8174);
				match(HEX_NUMBER);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8175);
				match(BIN_NUMBER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TextStringHashContext extends ParserRuleContext {
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode HEX_NUMBER() { return getToken(MultiQueryMySQLParser.HEX_NUMBER, 0); }
		public TextStringHashContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_textStringHash; }
	}

	public final TextStringHashContext textStringHash() throws RecognitionException {
		TextStringHashContext _localctx = new TextStringHashContext(_ctx, getState());
		enterRule(_localctx, 1150, RULE_textStringHash);
		try {
			setState(8181);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1094,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8178);
				textStringLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8179);
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				setState(8180);
				match(HEX_NUMBER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TextLiteralContext extends ParserRuleContext {
		public List<TextStringLiteralContext> textStringLiteral() {
			return getRuleContexts(TextStringLiteralContext.class);
		}
		public TextStringLiteralContext textStringLiteral(int i) {
			return getRuleContext(TextStringLiteralContext.class,i);
		}
		public TerminalNode NCHAR_TEXT() { return getToken(MultiQueryMySQLParser.NCHAR_TEXT, 0); }
		public TerminalNode UNDERSCORE_CHARSET() { return getToken(MultiQueryMySQLParser.UNDERSCORE_CHARSET, 0); }
		public TextLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_textLiteral; }
	}

	public final TextLiteralContext textLiteral() throws RecognitionException {
		TextLiteralContext _localctx = new TextLiteralContext(_ctx, getState());
		enterRule(_localctx, 1152, RULE_textLiteral);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8188);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1096,_ctx) ) {
			case 1:
				{
				setState(8184);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1095,_ctx) ) {
				case 1:
					{
					setState(8183);
					match(UNDERSCORE_CHARSET);
					}
					break;
				}
				setState(8186);
				textStringLiteral();
				}
				break;
			case 2:
				{
				setState(8187);
				match(NCHAR_TEXT);
				}
				break;
			}
			setState(8193);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1097,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8190);
					textStringLiteral();
					}
					} 
				}
				setState(8195);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1097,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TextStringNoLinebreakContext extends ParserRuleContext {
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TextStringNoLinebreakContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_textStringNoLinebreak; }
	}

	public final TextStringNoLinebreakContext textStringNoLinebreak() throws RecognitionException {
		TextStringNoLinebreakContext _localctx = new TextStringNoLinebreakContext(_ctx, getState());
		enterRule(_localctx, 1154, RULE_textStringNoLinebreak);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8196);
			textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TextStringLiteralListContext extends ParserRuleContext {
		public List<TextStringLiteralContext> textStringLiteral() {
			return getRuleContexts(TextStringLiteralContext.class);
		}
		public TextStringLiteralContext textStringLiteral(int i) {
			return getRuleContext(TextStringLiteralContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MultiQueryMySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, i);
		}
		public TextStringLiteralListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_textStringLiteralList; }
	}

	public final TextStringLiteralListContext textStringLiteralList() throws RecognitionException {
		TextStringLiteralListContext _localctx = new TextStringLiteralListContext(_ctx, getState());
		enterRule(_localctx, 1156, RULE_textStringLiteralList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8198);
			textStringLiteral();
			setState(8203);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1098,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8199);
					match(COMMA_SYMBOL);
					setState(8200);
					textStringLiteral();
					}
					} 
				}
				setState(8205);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1098,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumLiteralContext extends ParserRuleContext {
		public TerminalNode INT_NUMBER() { return getToken(MultiQueryMySQLParser.INT_NUMBER, 0); }
		public TerminalNode LONG_NUMBER() { return getToken(MultiQueryMySQLParser.LONG_NUMBER, 0); }
		public TerminalNode ULONGLONG_NUMBER() { return getToken(MultiQueryMySQLParser.ULONGLONG_NUMBER, 0); }
		public TerminalNode DECIMAL_NUMBER() { return getToken(MultiQueryMySQLParser.DECIMAL_NUMBER, 0); }
		public TerminalNode FLOAT_NUMBER() { return getToken(MultiQueryMySQLParser.FLOAT_NUMBER, 0); }
		public NumLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numLiteral; }
	}

	public final NumLiteralContext numLiteral() throws RecognitionException {
		NumLiteralContext _localctx = new NumLiteralContext(_ctx, getState());
		enterRule(_localctx, 1158, RULE_numLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8206);
			_la = _input.LA(1);
			if ( !(((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (INT_NUMBER - 380)) | (1L << (LONG_NUMBER - 380)) | (1L << (ULONGLONG_NUMBER - 380)) | (1L << (DECIMAL_NUMBER - 380)) | (1L << (FLOAT_NUMBER - 380)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BoolLiteralContext extends ParserRuleContext {
		public TerminalNode TRUE_SYMBOL() { return getToken(MultiQueryMySQLParser.TRUE_SYMBOL, 0); }
		public TerminalNode FALSE_SYMBOL() { return getToken(MultiQueryMySQLParser.FALSE_SYMBOL, 0); }
		public BoolLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolLiteral; }
	}

	public final BoolLiteralContext boolLiteral() throws RecognitionException {
		BoolLiteralContext _localctx = new BoolLiteralContext(_ctx, getState());
		enterRule(_localctx, 1160, RULE_boolLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8208);
			_la = _input.LA(1);
			if ( !(_la==FALSE_SYMBOL || _la==TRUE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullLiteralContext extends ParserRuleContext {
		public TerminalNode NULL_SYMBOL() { return getToken(MultiQueryMySQLParser.NULL_SYMBOL, 0); }
		public TerminalNode NULL2_SYMBOL() { return getToken(MultiQueryMySQLParser.NULL2_SYMBOL, 0); }
		public NullLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullLiteral; }
	}

	public final NullLiteralContext nullLiteral() throws RecognitionException {
		NullLiteralContext _localctx = new NullLiteralContext(_ctx, getState());
		enterRule(_localctx, 1162, RULE_nullLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8210);
			_la = _input.LA(1);
			if ( !(_la==NULL2_SYMBOL || _la==NULL_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TemporalLiteralContext extends ParserRuleContext {
		public TerminalNode DATE_SYMBOL() { return getToken(MultiQueryMySQLParser.DATE_SYMBOL, 0); }
		public TerminalNode SINGLE_QUOTED_TEXT() { return getToken(MultiQueryMySQLParser.SINGLE_QUOTED_TEXT, 0); }
		public TerminalNode TIME_SYMBOL() { return getToken(MultiQueryMySQLParser.TIME_SYMBOL, 0); }
		public TerminalNode TIMESTAMP_SYMBOL() { return getToken(MultiQueryMySQLParser.TIMESTAMP_SYMBOL, 0); }
		public TemporalLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_temporalLiteral; }
	}

	public final TemporalLiteralContext temporalLiteral() throws RecognitionException {
		TemporalLiteralContext _localctx = new TemporalLiteralContext(_ctx, getState());
		enterRule(_localctx, 1164, RULE_temporalLiteral);
		try {
			setState(8218);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(8212);
				match(DATE_SYMBOL);
				setState(8213);
				match(SINGLE_QUOTED_TEXT);
				}
				break;
			case TIME_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(8214);
				match(TIME_SYMBOL);
				setState(8215);
				match(SINGLE_QUOTED_TEXT);
				}
				break;
			case TIMESTAMP_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(8216);
				match(TIMESTAMP_SYMBOL);
				setState(8217);
				match(SINGLE_QUOTED_TEXT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FloatOptionsContext extends ParserRuleContext {
		public FieldLengthContext fieldLength() {
			return getRuleContext(FieldLengthContext.class,0);
		}
		public PrecisionContext precision() {
			return getRuleContext(PrecisionContext.class,0);
		}
		public FloatOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_floatOptions; }
	}

	public final FloatOptionsContext floatOptions() throws RecognitionException {
		FloatOptionsContext _localctx = new FloatOptionsContext(_ctx, getState());
		enterRule(_localctx, 1166, RULE_floatOptions);
		try {
			setState(8222);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1100,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8220);
				fieldLength();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8221);
				precision();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StandardFloatOptionsContext extends ParserRuleContext {
		public PrecisionContext precision() {
			return getRuleContext(PrecisionContext.class,0);
		}
		public StandardFloatOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standardFloatOptions; }
	}

	public final StandardFloatOptionsContext standardFloatOptions() throws RecognitionException {
		StandardFloatOptionsContext _localctx = new StandardFloatOptionsContext(_ctx, getState());
		enterRule(_localctx, 1168, RULE_standardFloatOptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8224);
			precision();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrecisionContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<TerminalNode> INT_NUMBER() { return getTokens(MultiQueryMySQLParser.INT_NUMBER); }
		public TerminalNode INT_NUMBER(int i) {
			return getToken(MultiQueryMySQLParser.INT_NUMBER, i);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MultiQueryMySQLParser.COMMA_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public PrecisionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precision; }
	}

	public final PrecisionContext precision() throws RecognitionException {
		PrecisionContext _localctx = new PrecisionContext(_ctx, getState());
		enterRule(_localctx, 1170, RULE_precision);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8226);
			match(OPEN_PAR_SYMBOL);
			setState(8227);
			match(INT_NUMBER);
			setState(8228);
			match(COMMA_SYMBOL);
			setState(8229);
			match(INT_NUMBER);
			setState(8230);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TextOrIdentifierContext extends ParserRuleContext {
		public TerminalNode SINGLE_QUOTED_TEXT() { return getToken(MultiQueryMySQLParser.SINGLE_QUOTED_TEXT, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TextOrIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_textOrIdentifier; }
	}

	public final TextOrIdentifierContext textOrIdentifier() throws RecognitionException {
		TextOrIdentifierContext _localctx = new TextOrIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1172, RULE_textOrIdentifier);
		try {
			setState(8234);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1101,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8232);
				match(SINGLE_QUOTED_TEXT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8233);
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LValueIdentifierContext extends ParserRuleContext {
		public PureIdentifierContext pureIdentifier() {
			return getRuleContext(PureIdentifierContext.class,0);
		}
		public LValueKeywordContext lValueKeyword() {
			return getRuleContext(LValueKeywordContext.class,0);
		}
		public LValueIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lValueIdentifier; }
	}

	public final LValueIdentifierContext lValueIdentifier() throws RecognitionException {
		LValueIdentifierContext _localctx = new LValueIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1174, RULE_lValueIdentifier);
		try {
			setState(8238);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1102,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8236);
				pureIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8237);
				lValueKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleIdentifierOrTextContext extends ParserRuleContext {
		public RoleIdentifierContext roleIdentifier() {
			return getRuleContext(RoleIdentifierContext.class,0);
		}
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public RoleIdentifierOrTextContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleIdentifierOrText; }
	}

	public final RoleIdentifierOrTextContext roleIdentifierOrText() throws RecognitionException {
		RoleIdentifierOrTextContext _localctx = new RoleIdentifierOrTextContext(_ctx, getState());
		enterRule(_localctx, 1176, RULE_roleIdentifierOrText);
		try {
			setState(8242);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1103,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8240);
				roleIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8241);
				textStringLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SizeNumberContext extends ParserRuleContext {
		public Real_ulonglong_numberContext real_ulonglong_number() {
			return getRuleContext(Real_ulonglong_numberContext.class,0);
		}
		public PureIdentifierContext pureIdentifier() {
			return getRuleContext(PureIdentifierContext.class,0);
		}
		public SizeNumberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sizeNumber; }
	}

	public final SizeNumberContext sizeNumber() throws RecognitionException {
		SizeNumberContext _localctx = new SizeNumberContext(_ctx, getState());
		enterRule(_localctx, 1178, RULE_sizeNumber);
		try {
			setState(8246);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1104,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8244);
				real_ulonglong_number();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8245);
				pureIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParenthesesContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ParenthesesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parentheses; }
	}

	public final ParenthesesContext parentheses() throws RecognitionException {
		ParenthesesContext _localctx = new ParenthesesContext(_ctx, getState());
		enterRule(_localctx, 1180, RULE_parentheses);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8248);
			match(OPEN_PAR_SYMBOL);
			setState(8249);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EqualContext extends ParserRuleContext {
		public TerminalNode EQUAL_OPERATOR() { return getToken(MultiQueryMySQLParser.EQUAL_OPERATOR, 0); }
		public TerminalNode ASSIGN_OPERATOR() { return getToken(MultiQueryMySQLParser.ASSIGN_OPERATOR, 0); }
		public EqualContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_equal; }
	}

	public final EqualContext equal() throws RecognitionException {
		EqualContext _localctx = new EqualContext(_ctx, getState());
		enterRule(_localctx, 1182, RULE_equal);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8251);
			_la = _input.LA(1);
			if ( !(_la==EQUAL_OPERATOR || _la==ASSIGN_OPERATOR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptionTypeContext extends ParserRuleContext {
		public TerminalNode PERSIST_SYMBOL() { return getToken(MultiQueryMySQLParser.PERSIST_SYMBOL, 0); }
		public TerminalNode PERSIST_ONLY_SYMBOL() { return getToken(MultiQueryMySQLParser.PERSIST_ONLY_SYMBOL, 0); }
		public TerminalNode GLOBAL_SYMBOL() { return getToken(MultiQueryMySQLParser.GLOBAL_SYMBOL, 0); }
		public TerminalNode LOCAL_SYMBOL() { return getToken(MultiQueryMySQLParser.LOCAL_SYMBOL, 0); }
		public TerminalNode SESSION_SYMBOL() { return getToken(MultiQueryMySQLParser.SESSION_SYMBOL, 0); }
		public OptionTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optionType; }
	}

	public final OptionTypeContext optionType() throws RecognitionException {
		OptionTypeContext _localctx = new OptionTypeContext(_ctx, getState());
		enterRule(_localctx, 1184, RULE_optionType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8253);
			_la = _input.LA(1);
			if ( !(_la==GLOBAL_SYMBOL || _la==LOCAL_SYMBOL || _la==SESSION_SYMBOL || _la==PERSIST_SYMBOL || _la==PERSIST_ONLY_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VarIdentTypeContext extends ParserRuleContext {
		public TerminalNode GLOBAL_SYMBOL() { return getToken(MultiQueryMySQLParser.GLOBAL_SYMBOL, 0); }
		public TerminalNode DOT_SYMBOL() { return getToken(MultiQueryMySQLParser.DOT_SYMBOL, 0); }
		public TerminalNode LOCAL_SYMBOL() { return getToken(MultiQueryMySQLParser.LOCAL_SYMBOL, 0); }
		public TerminalNode SESSION_SYMBOL() { return getToken(MultiQueryMySQLParser.SESSION_SYMBOL, 0); }
		public VarIdentTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varIdentType; }
	}

	public final VarIdentTypeContext varIdentType() throws RecognitionException {
		VarIdentTypeContext _localctx = new VarIdentTypeContext(_ctx, getState());
		enterRule(_localctx, 1186, RULE_varIdentType);
		try {
			setState(8261);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GLOBAL_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(8255);
				match(GLOBAL_SYMBOL);
				setState(8256);
				match(DOT_SYMBOL);
				}
				break;
			case LOCAL_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(8257);
				match(LOCAL_SYMBOL);
				setState(8258);
				match(DOT_SYMBOL);
				}
				break;
			case SESSION_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(8259);
				match(SESSION_SYMBOL);
				setState(8260);
				match(DOT_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetVarIdentTypeContext extends ParserRuleContext {
		public TerminalNode PERSIST_SYMBOL() { return getToken(MultiQueryMySQLParser.PERSIST_SYMBOL, 0); }
		public TerminalNode DOT_SYMBOL() { return getToken(MultiQueryMySQLParser.DOT_SYMBOL, 0); }
		public TerminalNode PERSIST_ONLY_SYMBOL() { return getToken(MultiQueryMySQLParser.PERSIST_ONLY_SYMBOL, 0); }
		public TerminalNode GLOBAL_SYMBOL() { return getToken(MultiQueryMySQLParser.GLOBAL_SYMBOL, 0); }
		public TerminalNode LOCAL_SYMBOL() { return getToken(MultiQueryMySQLParser.LOCAL_SYMBOL, 0); }
		public TerminalNode SESSION_SYMBOL() { return getToken(MultiQueryMySQLParser.SESSION_SYMBOL, 0); }
		public SetVarIdentTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setVarIdentType; }
	}

	public final SetVarIdentTypeContext setVarIdentType() throws RecognitionException {
		SetVarIdentTypeContext _localctx = new SetVarIdentTypeContext(_ctx, getState());
		enterRule(_localctx, 1188, RULE_setVarIdentType);
		try {
			setState(8273);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PERSIST_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(8263);
				match(PERSIST_SYMBOL);
				setState(8264);
				match(DOT_SYMBOL);
				}
				break;
			case PERSIST_ONLY_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(8265);
				match(PERSIST_ONLY_SYMBOL);
				setState(8266);
				match(DOT_SYMBOL);
				}
				break;
			case GLOBAL_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(8267);
				match(GLOBAL_SYMBOL);
				setState(8268);
				match(DOT_SYMBOL);
				}
				break;
			case LOCAL_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(8269);
				match(LOCAL_SYMBOL);
				setState(8270);
				match(DOT_SYMBOL);
				}
				break;
			case SESSION_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(8271);
				match(SESSION_SYMBOL);
				setState(8272);
				match(DOT_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierKeywordContext extends ParserRuleContext {
		public LabelKeywordContext labelKeyword() {
			return getRuleContext(LabelKeywordContext.class,0);
		}
		public RoleOrIdentifierKeywordContext roleOrIdentifierKeyword() {
			return getRuleContext(RoleOrIdentifierKeywordContext.class,0);
		}
		public TerminalNode EXECUTE_SYMBOL() { return getToken(MultiQueryMySQLParser.EXECUTE_SYMBOL, 0); }
		public TerminalNode SHUTDOWN_SYMBOL() { return getToken(MultiQueryMySQLParser.SHUTDOWN_SYMBOL, 0); }
		public TerminalNode RESTART_SYMBOL() { return getToken(MultiQueryMySQLParser.RESTART_SYMBOL, 0); }
		public IdentifierKeywordsUnambiguousContext identifierKeywordsUnambiguous() {
			return getRuleContext(IdentifierKeywordsUnambiguousContext.class,0);
		}
		public IdentifierKeywordsAmbiguous1RolesAndLabelsContext identifierKeywordsAmbiguous1RolesAndLabels() {
			return getRuleContext(IdentifierKeywordsAmbiguous1RolesAndLabelsContext.class,0);
		}
		public IdentifierKeywordsAmbiguous2LabelsContext identifierKeywordsAmbiguous2Labels() {
			return getRuleContext(IdentifierKeywordsAmbiguous2LabelsContext.class,0);
		}
		public IdentifierKeywordsAmbiguous3RolesContext identifierKeywordsAmbiguous3Roles() {
			return getRuleContext(IdentifierKeywordsAmbiguous3RolesContext.class,0);
		}
		public IdentifierKeywordsAmbiguous4SystemVariablesContext identifierKeywordsAmbiguous4SystemVariables() {
			return getRuleContext(IdentifierKeywordsAmbiguous4SystemVariablesContext.class,0);
		}
		public IdentifierKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierKeyword; }
	}

	public final IdentifierKeywordContext identifierKeyword() throws RecognitionException {
		IdentifierKeywordContext _localctx = new IdentifierKeywordContext(_ctx, getState());
		enterRule(_localctx, 1190, RULE_identifierKeyword);
		try {
			setState(8292);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1109,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8275);
				if (!(serverVersion < 80017)) throw new FailedPredicateException(this, "serverVersion < 80017");
				setState(8283);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1107,_ctx) ) {
				case 1:
					{
					setState(8276);
					labelKeyword();
					}
					break;
				case 2:
					{
					setState(8277);
					roleOrIdentifierKeyword();
					}
					break;
				case 3:
					{
					setState(8278);
					match(EXECUTE_SYMBOL);
					}
					break;
				case 4:
					{
					setState(8279);
					if (!(serverVersion >= 50709)) throw new FailedPredicateException(this, "serverVersion >= 50709");
					setState(8280);
					match(SHUTDOWN_SYMBOL);
					}
					break;
				case 5:
					{
					setState(8281);
					if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
					setState(8282);
					match(RESTART_SYMBOL);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8290);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ACCOUNT_SYMBOL:
				case ALWAYS_SYMBOL:
				case BACKUP_SYMBOL:
				case CLOSE_SYMBOL:
				case FORMAT_SYMBOL:
				case GROUP_REPLICATION_SYMBOL:
				case HOST_SYMBOL:
				case OPEN_SYMBOL:
				case OPTIONS_SYMBOL:
				case OWNER_SYMBOL:
				case PARSER_SYMBOL:
				case PORT_SYMBOL:
				case REMOVE_SYMBOL:
				case RESTORE_SYMBOL:
				case SECURITY_SYMBOL:
				case SERVER_SYMBOL:
				case SOCKET_SYMBOL:
				case SONAME_SYMBOL:
				case UPGRADE_SYMBOL:
				case WRAPPER_SYMBOL:
				case ACTION_SYMBOL:
				case ADDDATE_SYMBOL:
				case AFTER_SYMBOL:
				case AGAINST_SYMBOL:
				case AGGREGATE_SYMBOL:
				case ALGORITHM_SYMBOL:
				case ANY_SYMBOL:
				case AT_SYMBOL:
				case AUTO_INCREMENT_SYMBOL:
				case AUTOEXTEND_SIZE_SYMBOL:
				case AVG_ROW_LENGTH_SYMBOL:
				case AVG_SYMBOL:
				case BINLOG_SYMBOL:
				case BIT_SYMBOL:
				case BLOCK_SYMBOL:
				case BOOL_SYMBOL:
				case BOOLEAN_SYMBOL:
				case BTREE_SYMBOL:
				case CASCADED_SYMBOL:
				case CATALOG_NAME_SYMBOL:
				case CHAIN_SYMBOL:
				case CHANGED_SYMBOL:
				case CHANNEL_SYMBOL:
				case CIPHER_SYMBOL:
				case CLIENT_SYMBOL:
				case CLASS_ORIGIN_SYMBOL:
				case COALESCE_SYMBOL:
				case CODE_SYMBOL:
				case COLLATION_SYMBOL:
				case COLUMN_NAME_SYMBOL:
				case COLUMN_FORMAT_SYMBOL:
				case COLUMNS_SYMBOL:
				case COMMITTED_SYMBOL:
				case COMPACT_SYMBOL:
				case COMPLETION_SYMBOL:
				case COMPRESSED_SYMBOL:
				case COMPRESSION_SYMBOL:
				case ENCRYPTION_SYMBOL:
				case CONCURRENT_SYMBOL:
				case CONNECTION_SYMBOL:
				case CONSISTENT_SYMBOL:
				case CONSTRAINT_CATALOG_SYMBOL:
				case CONSTRAINT_SCHEMA_SYMBOL:
				case CONSTRAINT_NAME_SYMBOL:
				case CONTEXT_SYMBOL:
				case CPU_SYMBOL:
				case CURRENT_SYMBOL:
				case CURSOR_NAME_SYMBOL:
				case DATA_SYMBOL:
				case DATAFILE_SYMBOL:
				case DATETIME_SYMBOL:
				case DATE_SYMBOL:
				case DAY_SYMBOL:
				case DEFAULT_AUTH_SYMBOL:
				case DEFINER_SYMBOL:
				case DELAY_KEY_WRITE_SYMBOL:
				case DIAGNOSTICS_SYMBOL:
				case DIRECTORY_SYMBOL:
				case DISABLE_SYMBOL:
				case DISCARD_SYMBOL:
				case DISK_SYMBOL:
				case DUMPFILE_SYMBOL:
				case DUPLICATE_SYMBOL:
				case DYNAMIC_SYMBOL:
				case ENDS_SYMBOL:
				case ENUM_SYMBOL:
				case ENGINE_SYMBOL:
				case ENGINES_SYMBOL:
				case ERROR_SYMBOL:
				case ERRORS_SYMBOL:
				case ESCAPE_SYMBOL:
				case EVENTS_SYMBOL:
				case EVERY_SYMBOL:
				case EXPANSION_SYMBOL:
				case EXPORT_SYMBOL:
				case EXTENDED_SYMBOL:
				case EXTENT_SIZE_SYMBOL:
				case FAULTS_SYMBOL:
				case FAST_SYMBOL:
				case FOUND_SYMBOL:
				case ENABLE_SYMBOL:
				case FULL_SYMBOL:
				case FILE_BLOCK_SIZE_SYMBOL:
				case FILTER_SYMBOL:
				case FIRST_SYMBOL:
				case FIXED_SYMBOL:
				case GENERAL_SYMBOL:
				case GEOMETRY_SYMBOL:
				case GEOMETRYCOLLECTION_SYMBOL:
				case GET_FORMAT_SYMBOL:
				case GRANTS_SYMBOL:
				case HASH_SYMBOL:
				case HOSTS_SYMBOL:
				case HOUR_SYMBOL:
				case IDENTIFIED_SYMBOL:
				case IGNORE_SERVER_IDS_SYMBOL:
				case INVOKER_SYMBOL:
				case INDEXES_SYMBOL:
				case INITIAL_SIZE_SYMBOL:
				case INSTANCE_SYMBOL:
				case IO_SYMBOL:
				case IPC_SYMBOL:
				case ISOLATION_SYMBOL:
				case ISSUER_SYMBOL:
				case INSERT_METHOD_SYMBOL:
				case JSON_SYMBOL:
				case KEY_BLOCK_SIZE_SYMBOL:
				case LAST_SYMBOL:
				case LEAVES_SYMBOL:
				case LESS_SYMBOL:
				case LEVEL_SYMBOL:
				case LINESTRING_SYMBOL:
				case LIST_SYMBOL:
				case LOCKS_SYMBOL:
				case LOGFILE_SYMBOL:
				case LOGS_SYMBOL:
				case MAX_ROWS_SYMBOL:
				case MASTER_SYMBOL:
				case MASTER_HEARTBEAT_PERIOD_SYMBOL:
				case MASTER_HOST_SYMBOL:
				case MASTER_PORT_SYMBOL:
				case MASTER_LOG_FILE_SYMBOL:
				case MASTER_LOG_POS_SYMBOL:
				case MASTER_USER_SYMBOL:
				case MASTER_PASSWORD_SYMBOL:
				case MASTER_SERVER_ID_SYMBOL:
				case MASTER_CONNECT_RETRY_SYMBOL:
				case MASTER_RETRY_COUNT_SYMBOL:
				case MASTER_DELAY_SYMBOL:
				case MASTER_SSL_SYMBOL:
				case MASTER_SSL_CA_SYMBOL:
				case MASTER_SSL_CAPATH_SYMBOL:
				case MASTER_TLS_VERSION_SYMBOL:
				case MASTER_SSL_CERT_SYMBOL:
				case MASTER_SSL_CIPHER_SYMBOL:
				case MASTER_SSL_CRL_SYMBOL:
				case MASTER_SSL_CRLPATH_SYMBOL:
				case MASTER_SSL_KEY_SYMBOL:
				case MASTER_AUTO_POSITION_SYMBOL:
				case MAX_CONNECTIONS_PER_HOUR_SYMBOL:
				case MAX_QUERIES_PER_HOUR_SYMBOL:
				case MAX_SIZE_SYMBOL:
				case MAX_UPDATES_PER_HOUR_SYMBOL:
				case MAX_USER_CONNECTIONS_SYMBOL:
				case MEDIUM_SYMBOL:
				case MEMORY_SYMBOL:
				case MERGE_SYMBOL:
				case MESSAGE_TEXT_SYMBOL:
				case MICROSECOND_SYMBOL:
				case MIGRATE_SYMBOL:
				case MINUTE_SYMBOL:
				case MIN_ROWS_SYMBOL:
				case MODIFY_SYMBOL:
				case MODE_SYMBOL:
				case MONTH_SYMBOL:
				case MULTILINESTRING_SYMBOL:
				case MULTIPOINT_SYMBOL:
				case MULTIPOLYGON_SYMBOL:
				case MUTEX_SYMBOL:
				case MYSQL_ERRNO_SYMBOL:
				case NAME_SYMBOL:
				case NAMES_SYMBOL:
				case NATIONAL_SYMBOL:
				case NCHAR_SYMBOL:
				case NDBCLUSTER_SYMBOL:
				case NEVER_SYMBOL:
				case NEXT_SYMBOL:
				case NEW_SYMBOL:
				case NO_WAIT_SYMBOL:
				case NODEGROUP_SYMBOL:
				case NUMBER_SYMBOL:
				case NVARCHAR_SYMBOL:
				case OFFSET_SYMBOL:
				case ONE_SYMBOL:
				case PACK_KEYS_SYMBOL:
				case PAGE_SYMBOL:
				case PARTIAL_SYMBOL:
				case PARTITIONING_SYMBOL:
				case PARTITIONS_SYMBOL:
				case PASSWORD_SYMBOL:
				case PHASE_SYMBOL:
				case PLUGIN_DIR_SYMBOL:
				case PLUGIN_SYMBOL:
				case PLUGINS_SYMBOL:
				case POINT_SYMBOL:
				case POLYGON_SYMBOL:
				case PRESERVE_SYMBOL:
				case PREV_SYMBOL:
				case PRIVILEGES_SYMBOL:
				case PROCESSLIST_SYMBOL:
				case PROFILE_SYMBOL:
				case PROFILES_SYMBOL:
				case QUARTER_SYMBOL:
				case QUERY_SYMBOL:
				case QUICK_SYMBOL:
				case READ_ONLY_SYMBOL:
				case REBUILD_SYMBOL:
				case RECOVER_SYMBOL:
				case REDO_BUFFER_SIZE_SYMBOL:
				case REDUNDANT_SYMBOL:
				case RELAY_SYMBOL:
				case RELAYLOG_SYMBOL:
				case RELAY_LOG_FILE_SYMBOL:
				case RELAY_LOG_POS_SYMBOL:
				case RELAY_THREAD_SYMBOL:
				case REORGANIZE_SYMBOL:
				case REPEATABLE_SYMBOL:
				case REPLICATE_DO_DB_SYMBOL:
				case REPLICATE_IGNORE_DB_SYMBOL:
				case REPLICATE_DO_TABLE_SYMBOL:
				case REPLICATE_IGNORE_TABLE_SYMBOL:
				case REPLICATE_WILD_DO_TABLE_SYMBOL:
				case REPLICATE_WILD_IGNORE_TABLE_SYMBOL:
				case REPLICATE_REWRITE_DB_SYMBOL:
				case RESUME_SYMBOL:
				case RETURNED_SQLSTATE_SYMBOL:
				case RETURNS_SYMBOL:
				case REVERSE_SYMBOL:
				case ROLLUP_SYMBOL:
				case ROTATE_SYMBOL:
				case ROUTINE_SYMBOL:
				case ROW_COUNT_SYMBOL:
				case ROW_FORMAT_SYMBOL:
				case RTREE_SYMBOL:
				case SCHEDULE_SYMBOL:
				case SCHEMA_NAME_SYMBOL:
				case SECOND_SYMBOL:
				case SERIAL_SYMBOL:
				case SERIALIZABLE_SYMBOL:
				case SIMPLE_SYMBOL:
				case SHARE_SYMBOL:
				case SLOW_SYMBOL:
				case SNAPSHOT_SYMBOL:
				case SOUNDS_SYMBOL:
				case SOURCE_SYMBOL:
				case SQL_AFTER_GTIDS_SYMBOL:
				case SQL_AFTER_MTS_GAPS_SYMBOL:
				case SQL_BEFORE_GTIDS_SYMBOL:
				case SQL_BUFFER_RESULT_SYMBOL:
				case SQL_NO_CACHE_SYMBOL:
				case SQL_THREAD_SYMBOL:
				case STACKED_SYMBOL:
				case STARTS_SYMBOL:
				case STATS_AUTO_RECALC_SYMBOL:
				case STATS_PERSISTENT_SYMBOL:
				case STATS_SAMPLE_PAGES_SYMBOL:
				case STATUS_SYMBOL:
				case STORAGE_SYMBOL:
				case STRING_SYMBOL:
				case SUBCLASS_ORIGIN_SYMBOL:
				case SUBDATE_SYMBOL:
				case SUBJECT_SYMBOL:
				case SUBPARTITION_SYMBOL:
				case SUBPARTITIONS_SYMBOL:
				case SUSPEND_SYMBOL:
				case SWAPS_SYMBOL:
				case SWITCHES_SYMBOL:
				case TABLE_NAME_SYMBOL:
				case TABLES_SYMBOL:
				case TABLE_CHECKSUM_SYMBOL:
				case TABLESPACE_SYMBOL:
				case TEMPORARY_SYMBOL:
				case TEMPTABLE_SYMBOL:
				case TEXT_SYMBOL:
				case THAN_SYMBOL:
				case TRANSACTION_SYMBOL:
				case TRIGGERS_SYMBOL:
				case TIMESTAMP_SYMBOL:
				case TIMESTAMP_ADD_SYMBOL:
				case TIMESTAMP_DIFF_SYMBOL:
				case TIME_SYMBOL:
				case TYPES_SYMBOL:
				case TYPE_SYMBOL:
				case UNCOMMITTED_SYMBOL:
				case UNDEFINED_SYMBOL:
				case UNDO_BUFFER_SIZE_SYMBOL:
				case UNDOFILE_SYMBOL:
				case UNKNOWN_SYMBOL:
				case UNTIL_SYMBOL:
				case USER_RESOURCES_SYMBOL:
				case USER_SYMBOL:
				case USE_FRM_SYMBOL:
				case VARIABLES_SYMBOL:
				case VIEW_SYMBOL:
				case VALUE_SYMBOL:
				case WARNINGS_SYMBOL:
				case WAIT_SYMBOL:
				case WEEK_SYMBOL:
				case WORK_SYMBOL:
				case WEIGHT_STRING_SYMBOL:
				case X509_SYMBOL:
				case XID_SYMBOL:
				case XML_SYMBOL:
				case YEAR_SYMBOL:
				case EXCHANGE_SYMBOL:
				case EXPIRE_SYMBOL:
				case ONLY_SYMBOL:
				case VALIDATION_SYMBOL:
				case WITHOUT_SYMBOL:
				case ROLE_SYMBOL:
				case ADMIN_SYMBOL:
				case INVISIBLE_SYMBOL:
				case VISIBLE_SYMBOL:
				case COMPONENT_SYMBOL:
				case SKIP_SYMBOL:
				case LOCKED_SYMBOL:
				case NOWAIT_SYMBOL:
				case HISTOGRAM_SYMBOL:
				case BUCKETS_SYMBOL:
				case EXCLUDE_SYMBOL:
				case FOLLOWING_SYMBOL:
				case NULLS_SYMBOL:
				case OTHERS_SYMBOL:
				case PRECEDING_SYMBOL:
				case RESPECT_SYMBOL:
				case TIES_SYMBOL:
				case UNBOUNDED_SYMBOL:
				case NESTED_SYMBOL:
				case ORDINALITY_SYMBOL:
				case PATH_SYMBOL:
				case HISTORY_SYMBOL:
				case REUSE_SYMBOL:
				case SRID_SYMBOL:
				case THREAD_PRIORITY_SYMBOL:
				case VCPU_SYMBOL:
				case MASTER_PUBLIC_KEY_PATH_SYMBOL:
				case GET_MASTER_PUBLIC_KEY_SYMBOL:
				case DEFINITION_SYMBOL:
				case DESCRIPTION_SYMBOL:
				case ORGANIZATION_SYMBOL:
				case REFERENCE_SYMBOL:
				case OPTIONAL_SYMBOL:
				case SECONDARY_SYMBOL:
				case SECONDARY_ENGINE_SYMBOL:
				case SECONDARY_LOAD_SYMBOL:
				case SECONDARY_UNLOAD_SYMBOL:
				case ACTIVE_SYMBOL:
				case INACTIVE_SYMBOL:
				case RETAIN_SYMBOL:
				case OLD_SYMBOL:
				case NETWORK_NAMESPACE_SYMBOL:
				case ENFORCED_SYMBOL:
				case OJ_SYMBOL:
				case MASTER_COMPRESSION_ALGORITHM_SYMBOL:
				case MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL:
				case PRIVILEGE_CHECKS_USER_SYMBOL:
				case MASTER_TLS_CIPHERSUITES_SYMBOL:
					{
					setState(8285);
					identifierKeywordsUnambiguous();
					}
					break;
				case EXECUTE_SYMBOL:
				case SHUTDOWN_SYMBOL:
				case RESTART_SYMBOL:
					{
					setState(8286);
					identifierKeywordsAmbiguous1RolesAndLabels();
					}
					break;
				case ASCII_SYMBOL:
				case BEGIN_SYMBOL:
				case BYTE_SYMBOL:
				case CACHE_SYMBOL:
				case CHARSET_SYMBOL:
				case CHECKSUM_SYMBOL:
				case COMMENT_SYMBOL:
				case COMMIT_SYMBOL:
				case CONTAINS_SYMBOL:
				case DEALLOCATE_SYMBOL:
				case DO_SYMBOL:
				case END_SYMBOL:
				case FLUSH_SYMBOL:
				case FOLLOWS_SYMBOL:
				case HANDLER_SYMBOL:
				case HELP_SYMBOL:
				case INSTALL_SYMBOL:
				case LANGUAGE_SYMBOL:
				case NO_SYMBOL:
				case PRECEDES_SYMBOL:
				case PREPARE_SYMBOL:
				case REPAIR_SYMBOL:
				case RESET_SYMBOL:
				case ROLLBACK_SYMBOL:
				case SAVEPOINT_SYMBOL:
				case SIGNED_SYMBOL:
				case SLAVE_SYMBOL:
				case START_SYMBOL:
				case STOP_SYMBOL:
				case TRUNCATE_SYMBOL:
				case UNICODE_SYMBOL:
				case UNINSTALL_SYMBOL:
				case XA_SYMBOL:
				case IMPORT_SYMBOL:
				case CLONE_SYMBOL:
					{
					setState(8287);
					identifierKeywordsAmbiguous2Labels();
					}
					break;
				case EVENT_SYMBOL:
				case FILE_SYMBOL:
				case NONE_SYMBOL:
				case PROCESS_SYMBOL:
				case PROXY_SYMBOL:
				case RELOAD_SYMBOL:
				case REPLICATION_SYMBOL:
				case SUPER_SYMBOL:
				case RESOURCE_SYMBOL:
					{
					setState(8288);
					identifierKeywordsAmbiguous3Roles();
					}
					break;
				case GLOBAL_SYMBOL:
				case LOCAL_SYMBOL:
				case SESSION_SYMBOL:
				case PERSIST_SYMBOL:
				case PERSIST_ONLY_SYMBOL:
					{
					setState(8289);
					identifierKeywordsAmbiguous4SystemVariables();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierKeywordsAmbiguous1RolesAndLabelsContext extends ParserRuleContext {
		public TerminalNode EXECUTE_SYMBOL() { return getToken(MultiQueryMySQLParser.EXECUTE_SYMBOL, 0); }
		public TerminalNode RESTART_SYMBOL() { return getToken(MultiQueryMySQLParser.RESTART_SYMBOL, 0); }
		public TerminalNode SHUTDOWN_SYMBOL() { return getToken(MultiQueryMySQLParser.SHUTDOWN_SYMBOL, 0); }
		public IdentifierKeywordsAmbiguous1RolesAndLabelsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierKeywordsAmbiguous1RolesAndLabels; }
	}

	public final IdentifierKeywordsAmbiguous1RolesAndLabelsContext identifierKeywordsAmbiguous1RolesAndLabels() throws RecognitionException {
		IdentifierKeywordsAmbiguous1RolesAndLabelsContext _localctx = new IdentifierKeywordsAmbiguous1RolesAndLabelsContext(_ctx, getState());
		enterRule(_localctx, 1192, RULE_identifierKeywordsAmbiguous1RolesAndLabels);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8294);
			_la = _input.LA(1);
			if ( !(_la==EXECUTE_SYMBOL || _la==SHUTDOWN_SYMBOL || _la==RESTART_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierKeywordsAmbiguous2LabelsContext extends ParserRuleContext {
		public TerminalNode ASCII_SYMBOL() { return getToken(MultiQueryMySQLParser.ASCII_SYMBOL, 0); }
		public TerminalNode BEGIN_SYMBOL() { return getToken(MultiQueryMySQLParser.BEGIN_SYMBOL, 0); }
		public TerminalNode BYTE_SYMBOL() { return getToken(MultiQueryMySQLParser.BYTE_SYMBOL, 0); }
		public TerminalNode CACHE_SYMBOL() { return getToken(MultiQueryMySQLParser.CACHE_SYMBOL, 0); }
		public TerminalNode CHARSET_SYMBOL() { return getToken(MultiQueryMySQLParser.CHARSET_SYMBOL, 0); }
		public TerminalNode CHECKSUM_SYMBOL() { return getToken(MultiQueryMySQLParser.CHECKSUM_SYMBOL, 0); }
		public TerminalNode CLONE_SYMBOL() { return getToken(MultiQueryMySQLParser.CLONE_SYMBOL, 0); }
		public TerminalNode COMMENT_SYMBOL() { return getToken(MultiQueryMySQLParser.COMMENT_SYMBOL, 0); }
		public TerminalNode COMMIT_SYMBOL() { return getToken(MultiQueryMySQLParser.COMMIT_SYMBOL, 0); }
		public TerminalNode CONTAINS_SYMBOL() { return getToken(MultiQueryMySQLParser.CONTAINS_SYMBOL, 0); }
		public TerminalNode DEALLOCATE_SYMBOL() { return getToken(MultiQueryMySQLParser.DEALLOCATE_SYMBOL, 0); }
		public TerminalNode DO_SYMBOL() { return getToken(MultiQueryMySQLParser.DO_SYMBOL, 0); }
		public TerminalNode END_SYMBOL() { return getToken(MultiQueryMySQLParser.END_SYMBOL, 0); }
		public TerminalNode FLUSH_SYMBOL() { return getToken(MultiQueryMySQLParser.FLUSH_SYMBOL, 0); }
		public TerminalNode FOLLOWS_SYMBOL() { return getToken(MultiQueryMySQLParser.FOLLOWS_SYMBOL, 0); }
		public TerminalNode HANDLER_SYMBOL() { return getToken(MultiQueryMySQLParser.HANDLER_SYMBOL, 0); }
		public TerminalNode HELP_SYMBOL() { return getToken(MultiQueryMySQLParser.HELP_SYMBOL, 0); }
		public TerminalNode IMPORT_SYMBOL() { return getToken(MultiQueryMySQLParser.IMPORT_SYMBOL, 0); }
		public TerminalNode INSTALL_SYMBOL() { return getToken(MultiQueryMySQLParser.INSTALL_SYMBOL, 0); }
		public TerminalNode LANGUAGE_SYMBOL() { return getToken(MultiQueryMySQLParser.LANGUAGE_SYMBOL, 0); }
		public TerminalNode NO_SYMBOL() { return getToken(MultiQueryMySQLParser.NO_SYMBOL, 0); }
		public TerminalNode PRECEDES_SYMBOL() { return getToken(MultiQueryMySQLParser.PRECEDES_SYMBOL, 0); }
		public TerminalNode PREPARE_SYMBOL() { return getToken(MultiQueryMySQLParser.PREPARE_SYMBOL, 0); }
		public TerminalNode REPAIR_SYMBOL() { return getToken(MultiQueryMySQLParser.REPAIR_SYMBOL, 0); }
		public TerminalNode RESET_SYMBOL() { return getToken(MultiQueryMySQLParser.RESET_SYMBOL, 0); }
		public TerminalNode ROLLBACK_SYMBOL() { return getToken(MultiQueryMySQLParser.ROLLBACK_SYMBOL, 0); }
		public TerminalNode SAVEPOINT_SYMBOL() { return getToken(MultiQueryMySQLParser.SAVEPOINT_SYMBOL, 0); }
		public TerminalNode SIGNED_SYMBOL() { return getToken(MultiQueryMySQLParser.SIGNED_SYMBOL, 0); }
		public TerminalNode SLAVE_SYMBOL() { return getToken(MultiQueryMySQLParser.SLAVE_SYMBOL, 0); }
		public TerminalNode START_SYMBOL() { return getToken(MultiQueryMySQLParser.START_SYMBOL, 0); }
		public TerminalNode STOP_SYMBOL() { return getToken(MultiQueryMySQLParser.STOP_SYMBOL, 0); }
		public TerminalNode TRUNCATE_SYMBOL() { return getToken(MultiQueryMySQLParser.TRUNCATE_SYMBOL, 0); }
		public TerminalNode UNICODE_SYMBOL() { return getToken(MultiQueryMySQLParser.UNICODE_SYMBOL, 0); }
		public TerminalNode UNINSTALL_SYMBOL() { return getToken(MultiQueryMySQLParser.UNINSTALL_SYMBOL, 0); }
		public TerminalNode XA_SYMBOL() { return getToken(MultiQueryMySQLParser.XA_SYMBOL, 0); }
		public IdentifierKeywordsAmbiguous2LabelsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierKeywordsAmbiguous2Labels; }
	}

	public final IdentifierKeywordsAmbiguous2LabelsContext identifierKeywordsAmbiguous2Labels() throws RecognitionException {
		IdentifierKeywordsAmbiguous2LabelsContext _localctx = new IdentifierKeywordsAmbiguous2LabelsContext(_ctx, getState());
		enterRule(_localctx, 1194, RULE_identifierKeywordsAmbiguous2Labels);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8296);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASCII_SYMBOL) | (1L << BEGIN_SYMBOL) | (1L << BYTE_SYMBOL) | (1L << CACHE_SYMBOL) | (1L << CHARSET_SYMBOL) | (1L << CHECKSUM_SYMBOL) | (1L << COMMENT_SYMBOL) | (1L << COMMIT_SYMBOL) | (1L << CONTAINS_SYMBOL) | (1L << DEALLOCATE_SYMBOL) | (1L << DO_SYMBOL) | (1L << END_SYMBOL) | (1L << FLUSH_SYMBOL) | (1L << FOLLOWS_SYMBOL) | (1L << HANDLER_SYMBOL) | (1L << HELP_SYMBOL) | (1L << INSTALL_SYMBOL) | (1L << LANGUAGE_SYMBOL) | (1L << NO_SYMBOL) | (1L << PRECEDES_SYMBOL) | (1L << PREPARE_SYMBOL) | (1L << REPAIR_SYMBOL) | (1L << RESET_SYMBOL) | (1L << ROLLBACK_SYMBOL) | (1L << SAVEPOINT_SYMBOL) | (1L << SIGNED_SYMBOL) | (1L << SLAVE_SYMBOL) | (1L << START_SYMBOL) | (1L << STOP_SYMBOL) | (1L << TRUNCATE_SYMBOL) | (1L << UNICODE_SYMBOL) | (1L << UNINSTALL_SYMBOL) | (1L << XA_SYMBOL))) != 0) || _la==IMPORT_SYMBOL || _la==CLONE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LabelKeywordContext extends ParserRuleContext {
		public RoleOrLabelKeywordContext roleOrLabelKeyword() {
			return getRuleContext(RoleOrLabelKeywordContext.class,0);
		}
		public TerminalNode EVENT_SYMBOL() { return getToken(MultiQueryMySQLParser.EVENT_SYMBOL, 0); }
		public TerminalNode FILE_SYMBOL() { return getToken(MultiQueryMySQLParser.FILE_SYMBOL, 0); }
		public TerminalNode NONE_SYMBOL() { return getToken(MultiQueryMySQLParser.NONE_SYMBOL, 0); }
		public TerminalNode PROCESS_SYMBOL() { return getToken(MultiQueryMySQLParser.PROCESS_SYMBOL, 0); }
		public TerminalNode PROXY_SYMBOL() { return getToken(MultiQueryMySQLParser.PROXY_SYMBOL, 0); }
		public TerminalNode RELOAD_SYMBOL() { return getToken(MultiQueryMySQLParser.RELOAD_SYMBOL, 0); }
		public TerminalNode REPLICATION_SYMBOL() { return getToken(MultiQueryMySQLParser.REPLICATION_SYMBOL, 0); }
		public TerminalNode RESOURCE_SYMBOL() { return getToken(MultiQueryMySQLParser.RESOURCE_SYMBOL, 0); }
		public TerminalNode SUPER_SYMBOL() { return getToken(MultiQueryMySQLParser.SUPER_SYMBOL, 0); }
		public IdentifierKeywordsUnambiguousContext identifierKeywordsUnambiguous() {
			return getRuleContext(IdentifierKeywordsUnambiguousContext.class,0);
		}
		public IdentifierKeywordsAmbiguous3RolesContext identifierKeywordsAmbiguous3Roles() {
			return getRuleContext(IdentifierKeywordsAmbiguous3RolesContext.class,0);
		}
		public IdentifierKeywordsAmbiguous4SystemVariablesContext identifierKeywordsAmbiguous4SystemVariables() {
			return getRuleContext(IdentifierKeywordsAmbiguous4SystemVariablesContext.class,0);
		}
		public LabelKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labelKeyword; }
	}

	public final LabelKeywordContext labelKeyword() throws RecognitionException {
		LabelKeywordContext _localctx = new LabelKeywordContext(_ctx, getState());
		enterRule(_localctx, 1196, RULE_labelKeyword);
		try {
			setState(8316);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1112,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8298);
				if (!(serverVersion < 80017)) throw new FailedPredicateException(this, "serverVersion < 80017");
				setState(8309);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1110,_ctx) ) {
				case 1:
					{
					setState(8299);
					roleOrLabelKeyword();
					}
					break;
				case 2:
					{
					setState(8300);
					match(EVENT_SYMBOL);
					}
					break;
				case 3:
					{
					setState(8301);
					match(FILE_SYMBOL);
					}
					break;
				case 4:
					{
					setState(8302);
					match(NONE_SYMBOL);
					}
					break;
				case 5:
					{
					setState(8303);
					match(PROCESS_SYMBOL);
					}
					break;
				case 6:
					{
					setState(8304);
					match(PROXY_SYMBOL);
					}
					break;
				case 7:
					{
					setState(8305);
					match(RELOAD_SYMBOL);
					}
					break;
				case 8:
					{
					setState(8306);
					match(REPLICATION_SYMBOL);
					}
					break;
				case 9:
					{
					setState(8307);
					match(RESOURCE_SYMBOL);
					}
					break;
				case 10:
					{
					setState(8308);
					match(SUPER_SYMBOL);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8314);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ACCOUNT_SYMBOL:
				case ALWAYS_SYMBOL:
				case BACKUP_SYMBOL:
				case CLOSE_SYMBOL:
				case FORMAT_SYMBOL:
				case GROUP_REPLICATION_SYMBOL:
				case HOST_SYMBOL:
				case OPEN_SYMBOL:
				case OPTIONS_SYMBOL:
				case OWNER_SYMBOL:
				case PARSER_SYMBOL:
				case PORT_SYMBOL:
				case REMOVE_SYMBOL:
				case RESTORE_SYMBOL:
				case SECURITY_SYMBOL:
				case SERVER_SYMBOL:
				case SOCKET_SYMBOL:
				case SONAME_SYMBOL:
				case UPGRADE_SYMBOL:
				case WRAPPER_SYMBOL:
				case ACTION_SYMBOL:
				case ADDDATE_SYMBOL:
				case AFTER_SYMBOL:
				case AGAINST_SYMBOL:
				case AGGREGATE_SYMBOL:
				case ALGORITHM_SYMBOL:
				case ANY_SYMBOL:
				case AT_SYMBOL:
				case AUTO_INCREMENT_SYMBOL:
				case AUTOEXTEND_SIZE_SYMBOL:
				case AVG_ROW_LENGTH_SYMBOL:
				case AVG_SYMBOL:
				case BINLOG_SYMBOL:
				case BIT_SYMBOL:
				case BLOCK_SYMBOL:
				case BOOL_SYMBOL:
				case BOOLEAN_SYMBOL:
				case BTREE_SYMBOL:
				case CASCADED_SYMBOL:
				case CATALOG_NAME_SYMBOL:
				case CHAIN_SYMBOL:
				case CHANGED_SYMBOL:
				case CHANNEL_SYMBOL:
				case CIPHER_SYMBOL:
				case CLIENT_SYMBOL:
				case CLASS_ORIGIN_SYMBOL:
				case COALESCE_SYMBOL:
				case CODE_SYMBOL:
				case COLLATION_SYMBOL:
				case COLUMN_NAME_SYMBOL:
				case COLUMN_FORMAT_SYMBOL:
				case COLUMNS_SYMBOL:
				case COMMITTED_SYMBOL:
				case COMPACT_SYMBOL:
				case COMPLETION_SYMBOL:
				case COMPRESSED_SYMBOL:
				case COMPRESSION_SYMBOL:
				case ENCRYPTION_SYMBOL:
				case CONCURRENT_SYMBOL:
				case CONNECTION_SYMBOL:
				case CONSISTENT_SYMBOL:
				case CONSTRAINT_CATALOG_SYMBOL:
				case CONSTRAINT_SCHEMA_SYMBOL:
				case CONSTRAINT_NAME_SYMBOL:
				case CONTEXT_SYMBOL:
				case CPU_SYMBOL:
				case CURRENT_SYMBOL:
				case CURSOR_NAME_SYMBOL:
				case DATA_SYMBOL:
				case DATAFILE_SYMBOL:
				case DATETIME_SYMBOL:
				case DATE_SYMBOL:
				case DAY_SYMBOL:
				case DEFAULT_AUTH_SYMBOL:
				case DEFINER_SYMBOL:
				case DELAY_KEY_WRITE_SYMBOL:
				case DIAGNOSTICS_SYMBOL:
				case DIRECTORY_SYMBOL:
				case DISABLE_SYMBOL:
				case DISCARD_SYMBOL:
				case DISK_SYMBOL:
				case DUMPFILE_SYMBOL:
				case DUPLICATE_SYMBOL:
				case DYNAMIC_SYMBOL:
				case ENDS_SYMBOL:
				case ENUM_SYMBOL:
				case ENGINE_SYMBOL:
				case ENGINES_SYMBOL:
				case ERROR_SYMBOL:
				case ERRORS_SYMBOL:
				case ESCAPE_SYMBOL:
				case EVENTS_SYMBOL:
				case EVERY_SYMBOL:
				case EXPANSION_SYMBOL:
				case EXPORT_SYMBOL:
				case EXTENDED_SYMBOL:
				case EXTENT_SIZE_SYMBOL:
				case FAULTS_SYMBOL:
				case FAST_SYMBOL:
				case FOUND_SYMBOL:
				case ENABLE_SYMBOL:
				case FULL_SYMBOL:
				case FILE_BLOCK_SIZE_SYMBOL:
				case FILTER_SYMBOL:
				case FIRST_SYMBOL:
				case FIXED_SYMBOL:
				case GENERAL_SYMBOL:
				case GEOMETRY_SYMBOL:
				case GEOMETRYCOLLECTION_SYMBOL:
				case GET_FORMAT_SYMBOL:
				case GRANTS_SYMBOL:
				case HASH_SYMBOL:
				case HOSTS_SYMBOL:
				case HOUR_SYMBOL:
				case IDENTIFIED_SYMBOL:
				case IGNORE_SERVER_IDS_SYMBOL:
				case INVOKER_SYMBOL:
				case INDEXES_SYMBOL:
				case INITIAL_SIZE_SYMBOL:
				case INSTANCE_SYMBOL:
				case IO_SYMBOL:
				case IPC_SYMBOL:
				case ISOLATION_SYMBOL:
				case ISSUER_SYMBOL:
				case INSERT_METHOD_SYMBOL:
				case JSON_SYMBOL:
				case KEY_BLOCK_SIZE_SYMBOL:
				case LAST_SYMBOL:
				case LEAVES_SYMBOL:
				case LESS_SYMBOL:
				case LEVEL_SYMBOL:
				case LINESTRING_SYMBOL:
				case LIST_SYMBOL:
				case LOCKS_SYMBOL:
				case LOGFILE_SYMBOL:
				case LOGS_SYMBOL:
				case MAX_ROWS_SYMBOL:
				case MASTER_SYMBOL:
				case MASTER_HEARTBEAT_PERIOD_SYMBOL:
				case MASTER_HOST_SYMBOL:
				case MASTER_PORT_SYMBOL:
				case MASTER_LOG_FILE_SYMBOL:
				case MASTER_LOG_POS_SYMBOL:
				case MASTER_USER_SYMBOL:
				case MASTER_PASSWORD_SYMBOL:
				case MASTER_SERVER_ID_SYMBOL:
				case MASTER_CONNECT_RETRY_SYMBOL:
				case MASTER_RETRY_COUNT_SYMBOL:
				case MASTER_DELAY_SYMBOL:
				case MASTER_SSL_SYMBOL:
				case MASTER_SSL_CA_SYMBOL:
				case MASTER_SSL_CAPATH_SYMBOL:
				case MASTER_TLS_VERSION_SYMBOL:
				case MASTER_SSL_CERT_SYMBOL:
				case MASTER_SSL_CIPHER_SYMBOL:
				case MASTER_SSL_CRL_SYMBOL:
				case MASTER_SSL_CRLPATH_SYMBOL:
				case MASTER_SSL_KEY_SYMBOL:
				case MASTER_AUTO_POSITION_SYMBOL:
				case MAX_CONNECTIONS_PER_HOUR_SYMBOL:
				case MAX_QUERIES_PER_HOUR_SYMBOL:
				case MAX_SIZE_SYMBOL:
				case MAX_UPDATES_PER_HOUR_SYMBOL:
				case MAX_USER_CONNECTIONS_SYMBOL:
				case MEDIUM_SYMBOL:
				case MEMORY_SYMBOL:
				case MERGE_SYMBOL:
				case MESSAGE_TEXT_SYMBOL:
				case MICROSECOND_SYMBOL:
				case MIGRATE_SYMBOL:
				case MINUTE_SYMBOL:
				case MIN_ROWS_SYMBOL:
				case MODIFY_SYMBOL:
				case MODE_SYMBOL:
				case MONTH_SYMBOL:
				case MULTILINESTRING_SYMBOL:
				case MULTIPOINT_SYMBOL:
				case MULTIPOLYGON_SYMBOL:
				case MUTEX_SYMBOL:
				case MYSQL_ERRNO_SYMBOL:
				case NAME_SYMBOL:
				case NAMES_SYMBOL:
				case NATIONAL_SYMBOL:
				case NCHAR_SYMBOL:
				case NDBCLUSTER_SYMBOL:
				case NEVER_SYMBOL:
				case NEXT_SYMBOL:
				case NEW_SYMBOL:
				case NO_WAIT_SYMBOL:
				case NODEGROUP_SYMBOL:
				case NUMBER_SYMBOL:
				case NVARCHAR_SYMBOL:
				case OFFSET_SYMBOL:
				case ONE_SYMBOL:
				case PACK_KEYS_SYMBOL:
				case PAGE_SYMBOL:
				case PARTIAL_SYMBOL:
				case PARTITIONING_SYMBOL:
				case PARTITIONS_SYMBOL:
				case PASSWORD_SYMBOL:
				case PHASE_SYMBOL:
				case PLUGIN_DIR_SYMBOL:
				case PLUGIN_SYMBOL:
				case PLUGINS_SYMBOL:
				case POINT_SYMBOL:
				case POLYGON_SYMBOL:
				case PRESERVE_SYMBOL:
				case PREV_SYMBOL:
				case PRIVILEGES_SYMBOL:
				case PROCESSLIST_SYMBOL:
				case PROFILE_SYMBOL:
				case PROFILES_SYMBOL:
				case QUARTER_SYMBOL:
				case QUERY_SYMBOL:
				case QUICK_SYMBOL:
				case READ_ONLY_SYMBOL:
				case REBUILD_SYMBOL:
				case RECOVER_SYMBOL:
				case REDO_BUFFER_SIZE_SYMBOL:
				case REDUNDANT_SYMBOL:
				case RELAY_SYMBOL:
				case RELAYLOG_SYMBOL:
				case RELAY_LOG_FILE_SYMBOL:
				case RELAY_LOG_POS_SYMBOL:
				case RELAY_THREAD_SYMBOL:
				case REORGANIZE_SYMBOL:
				case REPEATABLE_SYMBOL:
				case REPLICATE_DO_DB_SYMBOL:
				case REPLICATE_IGNORE_DB_SYMBOL:
				case REPLICATE_DO_TABLE_SYMBOL:
				case REPLICATE_IGNORE_TABLE_SYMBOL:
				case REPLICATE_WILD_DO_TABLE_SYMBOL:
				case REPLICATE_WILD_IGNORE_TABLE_SYMBOL:
				case REPLICATE_REWRITE_DB_SYMBOL:
				case RESUME_SYMBOL:
				case RETURNED_SQLSTATE_SYMBOL:
				case RETURNS_SYMBOL:
				case REVERSE_SYMBOL:
				case ROLLUP_SYMBOL:
				case ROTATE_SYMBOL:
				case ROUTINE_SYMBOL:
				case ROW_COUNT_SYMBOL:
				case ROW_FORMAT_SYMBOL:
				case RTREE_SYMBOL:
				case SCHEDULE_SYMBOL:
				case SCHEMA_NAME_SYMBOL:
				case SECOND_SYMBOL:
				case SERIAL_SYMBOL:
				case SERIALIZABLE_SYMBOL:
				case SIMPLE_SYMBOL:
				case SHARE_SYMBOL:
				case SLOW_SYMBOL:
				case SNAPSHOT_SYMBOL:
				case SOUNDS_SYMBOL:
				case SOURCE_SYMBOL:
				case SQL_AFTER_GTIDS_SYMBOL:
				case SQL_AFTER_MTS_GAPS_SYMBOL:
				case SQL_BEFORE_GTIDS_SYMBOL:
				case SQL_BUFFER_RESULT_SYMBOL:
				case SQL_NO_CACHE_SYMBOL:
				case SQL_THREAD_SYMBOL:
				case STACKED_SYMBOL:
				case STARTS_SYMBOL:
				case STATS_AUTO_RECALC_SYMBOL:
				case STATS_PERSISTENT_SYMBOL:
				case STATS_SAMPLE_PAGES_SYMBOL:
				case STATUS_SYMBOL:
				case STORAGE_SYMBOL:
				case STRING_SYMBOL:
				case SUBCLASS_ORIGIN_SYMBOL:
				case SUBDATE_SYMBOL:
				case SUBJECT_SYMBOL:
				case SUBPARTITION_SYMBOL:
				case SUBPARTITIONS_SYMBOL:
				case SUSPEND_SYMBOL:
				case SWAPS_SYMBOL:
				case SWITCHES_SYMBOL:
				case TABLE_NAME_SYMBOL:
				case TABLES_SYMBOL:
				case TABLE_CHECKSUM_SYMBOL:
				case TABLESPACE_SYMBOL:
				case TEMPORARY_SYMBOL:
				case TEMPTABLE_SYMBOL:
				case TEXT_SYMBOL:
				case THAN_SYMBOL:
				case TRANSACTION_SYMBOL:
				case TRIGGERS_SYMBOL:
				case TIMESTAMP_SYMBOL:
				case TIMESTAMP_ADD_SYMBOL:
				case TIMESTAMP_DIFF_SYMBOL:
				case TIME_SYMBOL:
				case TYPES_SYMBOL:
				case TYPE_SYMBOL:
				case UNCOMMITTED_SYMBOL:
				case UNDEFINED_SYMBOL:
				case UNDO_BUFFER_SIZE_SYMBOL:
				case UNDOFILE_SYMBOL:
				case UNKNOWN_SYMBOL:
				case UNTIL_SYMBOL:
				case USER_RESOURCES_SYMBOL:
				case USER_SYMBOL:
				case USE_FRM_SYMBOL:
				case VARIABLES_SYMBOL:
				case VIEW_SYMBOL:
				case VALUE_SYMBOL:
				case WARNINGS_SYMBOL:
				case WAIT_SYMBOL:
				case WEEK_SYMBOL:
				case WORK_SYMBOL:
				case WEIGHT_STRING_SYMBOL:
				case X509_SYMBOL:
				case XID_SYMBOL:
				case XML_SYMBOL:
				case YEAR_SYMBOL:
				case EXCHANGE_SYMBOL:
				case EXPIRE_SYMBOL:
				case ONLY_SYMBOL:
				case VALIDATION_SYMBOL:
				case WITHOUT_SYMBOL:
				case ROLE_SYMBOL:
				case ADMIN_SYMBOL:
				case INVISIBLE_SYMBOL:
				case VISIBLE_SYMBOL:
				case COMPONENT_SYMBOL:
				case SKIP_SYMBOL:
				case LOCKED_SYMBOL:
				case NOWAIT_SYMBOL:
				case HISTOGRAM_SYMBOL:
				case BUCKETS_SYMBOL:
				case EXCLUDE_SYMBOL:
				case FOLLOWING_SYMBOL:
				case NULLS_SYMBOL:
				case OTHERS_SYMBOL:
				case PRECEDING_SYMBOL:
				case RESPECT_SYMBOL:
				case TIES_SYMBOL:
				case UNBOUNDED_SYMBOL:
				case NESTED_SYMBOL:
				case ORDINALITY_SYMBOL:
				case PATH_SYMBOL:
				case HISTORY_SYMBOL:
				case REUSE_SYMBOL:
				case SRID_SYMBOL:
				case THREAD_PRIORITY_SYMBOL:
				case VCPU_SYMBOL:
				case MASTER_PUBLIC_KEY_PATH_SYMBOL:
				case GET_MASTER_PUBLIC_KEY_SYMBOL:
				case DEFINITION_SYMBOL:
				case DESCRIPTION_SYMBOL:
				case ORGANIZATION_SYMBOL:
				case REFERENCE_SYMBOL:
				case OPTIONAL_SYMBOL:
				case SECONDARY_SYMBOL:
				case SECONDARY_ENGINE_SYMBOL:
				case SECONDARY_LOAD_SYMBOL:
				case SECONDARY_UNLOAD_SYMBOL:
				case ACTIVE_SYMBOL:
				case INACTIVE_SYMBOL:
				case RETAIN_SYMBOL:
				case OLD_SYMBOL:
				case NETWORK_NAMESPACE_SYMBOL:
				case ENFORCED_SYMBOL:
				case OJ_SYMBOL:
				case MASTER_COMPRESSION_ALGORITHM_SYMBOL:
				case MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL:
				case PRIVILEGE_CHECKS_USER_SYMBOL:
				case MASTER_TLS_CIPHERSUITES_SYMBOL:
					{
					setState(8311);
					identifierKeywordsUnambiguous();
					}
					break;
				case EVENT_SYMBOL:
				case FILE_SYMBOL:
				case NONE_SYMBOL:
				case PROCESS_SYMBOL:
				case PROXY_SYMBOL:
				case RELOAD_SYMBOL:
				case REPLICATION_SYMBOL:
				case SUPER_SYMBOL:
				case RESOURCE_SYMBOL:
					{
					setState(8312);
					identifierKeywordsAmbiguous3Roles();
					}
					break;
				case GLOBAL_SYMBOL:
				case LOCAL_SYMBOL:
				case SESSION_SYMBOL:
				case PERSIST_SYMBOL:
				case PERSIST_ONLY_SYMBOL:
					{
					setState(8313);
					identifierKeywordsAmbiguous4SystemVariables();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierKeywordsAmbiguous3RolesContext extends ParserRuleContext {
		public TerminalNode EVENT_SYMBOL() { return getToken(MultiQueryMySQLParser.EVENT_SYMBOL, 0); }
		public TerminalNode FILE_SYMBOL() { return getToken(MultiQueryMySQLParser.FILE_SYMBOL, 0); }
		public TerminalNode NONE_SYMBOL() { return getToken(MultiQueryMySQLParser.NONE_SYMBOL, 0); }
		public TerminalNode PROCESS_SYMBOL() { return getToken(MultiQueryMySQLParser.PROCESS_SYMBOL, 0); }
		public TerminalNode PROXY_SYMBOL() { return getToken(MultiQueryMySQLParser.PROXY_SYMBOL, 0); }
		public TerminalNode RELOAD_SYMBOL() { return getToken(MultiQueryMySQLParser.RELOAD_SYMBOL, 0); }
		public TerminalNode REPLICATION_SYMBOL() { return getToken(MultiQueryMySQLParser.REPLICATION_SYMBOL, 0); }
		public TerminalNode RESOURCE_SYMBOL() { return getToken(MultiQueryMySQLParser.RESOURCE_SYMBOL, 0); }
		public TerminalNode SUPER_SYMBOL() { return getToken(MultiQueryMySQLParser.SUPER_SYMBOL, 0); }
		public IdentifierKeywordsAmbiguous3RolesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierKeywordsAmbiguous3Roles; }
	}

	public final IdentifierKeywordsAmbiguous3RolesContext identifierKeywordsAmbiguous3Roles() throws RecognitionException {
		IdentifierKeywordsAmbiguous3RolesContext _localctx = new IdentifierKeywordsAmbiguous3RolesContext(_ctx, getState());
		enterRule(_localctx, 1198, RULE_identifierKeywordsAmbiguous3Roles);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8318);
			_la = _input.LA(1);
			if ( !(_la==EVENT_SYMBOL || _la==FILE_SYMBOL || ((((_la - 239)) & ~0x3f) == 0 && ((1L << (_la - 239)) & ((1L << (NONE_SYMBOL - 239)) | (1L << (PROCESS_SYMBOL - 239)) | (1L << (PROXY_SYMBOL - 239)) | (1L << (RELOAD_SYMBOL - 239)) | (1L << (REPLICATION_SYMBOL - 239)))) != 0) || _la==SUPER_SYMBOL || _la==RESOURCE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierKeywordsUnambiguousContext extends ParserRuleContext {
		public TerminalNode ACTION_SYMBOL() { return getToken(MultiQueryMySQLParser.ACTION_SYMBOL, 0); }
		public TerminalNode ACCOUNT_SYMBOL() { return getToken(MultiQueryMySQLParser.ACCOUNT_SYMBOL, 0); }
		public TerminalNode ACTIVE_SYMBOL() { return getToken(MultiQueryMySQLParser.ACTIVE_SYMBOL, 0); }
		public TerminalNode ADDDATE_SYMBOL() { return getToken(MultiQueryMySQLParser.ADDDATE_SYMBOL, 0); }
		public TerminalNode ADMIN_SYMBOL() { return getToken(MultiQueryMySQLParser.ADMIN_SYMBOL, 0); }
		public TerminalNode AFTER_SYMBOL() { return getToken(MultiQueryMySQLParser.AFTER_SYMBOL, 0); }
		public TerminalNode AGAINST_SYMBOL() { return getToken(MultiQueryMySQLParser.AGAINST_SYMBOL, 0); }
		public TerminalNode AGGREGATE_SYMBOL() { return getToken(MultiQueryMySQLParser.AGGREGATE_SYMBOL, 0); }
		public TerminalNode ALGORITHM_SYMBOL() { return getToken(MultiQueryMySQLParser.ALGORITHM_SYMBOL, 0); }
		public TerminalNode ALWAYS_SYMBOL() { return getToken(MultiQueryMySQLParser.ALWAYS_SYMBOL, 0); }
		public TerminalNode ANY_SYMBOL() { return getToken(MultiQueryMySQLParser.ANY_SYMBOL, 0); }
		public TerminalNode AT_SYMBOL() { return getToken(MultiQueryMySQLParser.AT_SYMBOL, 0); }
		public TerminalNode AUTOEXTEND_SIZE_SYMBOL() { return getToken(MultiQueryMySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0); }
		public TerminalNode AUTO_INCREMENT_SYMBOL() { return getToken(MultiQueryMySQLParser.AUTO_INCREMENT_SYMBOL, 0); }
		public TerminalNode AVG_ROW_LENGTH_SYMBOL() { return getToken(MultiQueryMySQLParser.AVG_ROW_LENGTH_SYMBOL, 0); }
		public TerminalNode AVG_SYMBOL() { return getToken(MultiQueryMySQLParser.AVG_SYMBOL, 0); }
		public TerminalNode BACKUP_SYMBOL() { return getToken(MultiQueryMySQLParser.BACKUP_SYMBOL, 0); }
		public TerminalNode BINLOG_SYMBOL() { return getToken(MultiQueryMySQLParser.BINLOG_SYMBOL, 0); }
		public TerminalNode BIT_SYMBOL() { return getToken(MultiQueryMySQLParser.BIT_SYMBOL, 0); }
		public TerminalNode BLOCK_SYMBOL() { return getToken(MultiQueryMySQLParser.BLOCK_SYMBOL, 0); }
		public TerminalNode BOOLEAN_SYMBOL() { return getToken(MultiQueryMySQLParser.BOOLEAN_SYMBOL, 0); }
		public TerminalNode BOOL_SYMBOL() { return getToken(MultiQueryMySQLParser.BOOL_SYMBOL, 0); }
		public TerminalNode BTREE_SYMBOL() { return getToken(MultiQueryMySQLParser.BTREE_SYMBOL, 0); }
		public TerminalNode BUCKETS_SYMBOL() { return getToken(MultiQueryMySQLParser.BUCKETS_SYMBOL, 0); }
		public TerminalNode CASCADED_SYMBOL() { return getToken(MultiQueryMySQLParser.CASCADED_SYMBOL, 0); }
		public TerminalNode CATALOG_NAME_SYMBOL() { return getToken(MultiQueryMySQLParser.CATALOG_NAME_SYMBOL, 0); }
		public TerminalNode CHAIN_SYMBOL() { return getToken(MultiQueryMySQLParser.CHAIN_SYMBOL, 0); }
		public TerminalNode CHANGED_SYMBOL() { return getToken(MultiQueryMySQLParser.CHANGED_SYMBOL, 0); }
		public TerminalNode CHANNEL_SYMBOL() { return getToken(MultiQueryMySQLParser.CHANNEL_SYMBOL, 0); }
		public TerminalNode CIPHER_SYMBOL() { return getToken(MultiQueryMySQLParser.CIPHER_SYMBOL, 0); }
		public TerminalNode CLASS_ORIGIN_SYMBOL() { return getToken(MultiQueryMySQLParser.CLASS_ORIGIN_SYMBOL, 0); }
		public TerminalNode CLIENT_SYMBOL() { return getToken(MultiQueryMySQLParser.CLIENT_SYMBOL, 0); }
		public TerminalNode CLOSE_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_SYMBOL, 0); }
		public TerminalNode COALESCE_SYMBOL() { return getToken(MultiQueryMySQLParser.COALESCE_SYMBOL, 0); }
		public TerminalNode CODE_SYMBOL() { return getToken(MultiQueryMySQLParser.CODE_SYMBOL, 0); }
		public TerminalNode COLLATION_SYMBOL() { return getToken(MultiQueryMySQLParser.COLLATION_SYMBOL, 0); }
		public TerminalNode COLUMNS_SYMBOL() { return getToken(MultiQueryMySQLParser.COLUMNS_SYMBOL, 0); }
		public TerminalNode COLUMN_FORMAT_SYMBOL() { return getToken(MultiQueryMySQLParser.COLUMN_FORMAT_SYMBOL, 0); }
		public TerminalNode COLUMN_NAME_SYMBOL() { return getToken(MultiQueryMySQLParser.COLUMN_NAME_SYMBOL, 0); }
		public TerminalNode COMMITTED_SYMBOL() { return getToken(MultiQueryMySQLParser.COMMITTED_SYMBOL, 0); }
		public TerminalNode COMPACT_SYMBOL() { return getToken(MultiQueryMySQLParser.COMPACT_SYMBOL, 0); }
		public TerminalNode COMPLETION_SYMBOL() { return getToken(MultiQueryMySQLParser.COMPLETION_SYMBOL, 0); }
		public TerminalNode COMPONENT_SYMBOL() { return getToken(MultiQueryMySQLParser.COMPONENT_SYMBOL, 0); }
		public TerminalNode COMPRESSED_SYMBOL() { return getToken(MultiQueryMySQLParser.COMPRESSED_SYMBOL, 0); }
		public TerminalNode COMPRESSION_SYMBOL() { return getToken(MultiQueryMySQLParser.COMPRESSION_SYMBOL, 0); }
		public TerminalNode CONCURRENT_SYMBOL() { return getToken(MultiQueryMySQLParser.CONCURRENT_SYMBOL, 0); }
		public TerminalNode CONNECTION_SYMBOL() { return getToken(MultiQueryMySQLParser.CONNECTION_SYMBOL, 0); }
		public TerminalNode CONSISTENT_SYMBOL() { return getToken(MultiQueryMySQLParser.CONSISTENT_SYMBOL, 0); }
		public TerminalNode CONSTRAINT_CATALOG_SYMBOL() { return getToken(MultiQueryMySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0); }
		public TerminalNode CONSTRAINT_NAME_SYMBOL() { return getToken(MultiQueryMySQLParser.CONSTRAINT_NAME_SYMBOL, 0); }
		public TerminalNode CONSTRAINT_SCHEMA_SYMBOL() { return getToken(MultiQueryMySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0); }
		public TerminalNode CONTEXT_SYMBOL() { return getToken(MultiQueryMySQLParser.CONTEXT_SYMBOL, 0); }
		public TerminalNode CPU_SYMBOL() { return getToken(MultiQueryMySQLParser.CPU_SYMBOL, 0); }
		public TerminalNode CURRENT_SYMBOL() { return getToken(MultiQueryMySQLParser.CURRENT_SYMBOL, 0); }
		public TerminalNode CURSOR_NAME_SYMBOL() { return getToken(MultiQueryMySQLParser.CURSOR_NAME_SYMBOL, 0); }
		public TerminalNode DATAFILE_SYMBOL() { return getToken(MultiQueryMySQLParser.DATAFILE_SYMBOL, 0); }
		public TerminalNode DATA_SYMBOL() { return getToken(MultiQueryMySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode DATETIME_SYMBOL() { return getToken(MultiQueryMySQLParser.DATETIME_SYMBOL, 0); }
		public TerminalNode DATE_SYMBOL() { return getToken(MultiQueryMySQLParser.DATE_SYMBOL, 0); }
		public TerminalNode DAY_SYMBOL() { return getToken(MultiQueryMySQLParser.DAY_SYMBOL, 0); }
		public TerminalNode DEFAULT_AUTH_SYMBOL() { return getToken(MultiQueryMySQLParser.DEFAULT_AUTH_SYMBOL, 0); }
		public TerminalNode DEFINER_SYMBOL() { return getToken(MultiQueryMySQLParser.DEFINER_SYMBOL, 0); }
		public TerminalNode DEFINITION_SYMBOL() { return getToken(MultiQueryMySQLParser.DEFINITION_SYMBOL, 0); }
		public TerminalNode DELAY_KEY_WRITE_SYMBOL() { return getToken(MultiQueryMySQLParser.DELAY_KEY_WRITE_SYMBOL, 0); }
		public TerminalNode DESCRIPTION_SYMBOL() { return getToken(MultiQueryMySQLParser.DESCRIPTION_SYMBOL, 0); }
		public TerminalNode DIAGNOSTICS_SYMBOL() { return getToken(MultiQueryMySQLParser.DIAGNOSTICS_SYMBOL, 0); }
		public TerminalNode DIRECTORY_SYMBOL() { return getToken(MultiQueryMySQLParser.DIRECTORY_SYMBOL, 0); }
		public TerminalNode DISABLE_SYMBOL() { return getToken(MultiQueryMySQLParser.DISABLE_SYMBOL, 0); }
		public TerminalNode DISCARD_SYMBOL() { return getToken(MultiQueryMySQLParser.DISCARD_SYMBOL, 0); }
		public TerminalNode DISK_SYMBOL() { return getToken(MultiQueryMySQLParser.DISK_SYMBOL, 0); }
		public TerminalNode DUMPFILE_SYMBOL() { return getToken(MultiQueryMySQLParser.DUMPFILE_SYMBOL, 0); }
		public TerminalNode DUPLICATE_SYMBOL() { return getToken(MultiQueryMySQLParser.DUPLICATE_SYMBOL, 0); }
		public TerminalNode DYNAMIC_SYMBOL() { return getToken(MultiQueryMySQLParser.DYNAMIC_SYMBOL, 0); }
		public TerminalNode ENABLE_SYMBOL() { return getToken(MultiQueryMySQLParser.ENABLE_SYMBOL, 0); }
		public TerminalNode ENCRYPTION_SYMBOL() { return getToken(MultiQueryMySQLParser.ENCRYPTION_SYMBOL, 0); }
		public TerminalNode ENDS_SYMBOL() { return getToken(MultiQueryMySQLParser.ENDS_SYMBOL, 0); }
		public TerminalNode ENFORCED_SYMBOL() { return getToken(MultiQueryMySQLParser.ENFORCED_SYMBOL, 0); }
		public TerminalNode ENGINES_SYMBOL() { return getToken(MultiQueryMySQLParser.ENGINES_SYMBOL, 0); }
		public TerminalNode ENGINE_SYMBOL() { return getToken(MultiQueryMySQLParser.ENGINE_SYMBOL, 0); }
		public TerminalNode ENUM_SYMBOL() { return getToken(MultiQueryMySQLParser.ENUM_SYMBOL, 0); }
		public TerminalNode ERRORS_SYMBOL() { return getToken(MultiQueryMySQLParser.ERRORS_SYMBOL, 0); }
		public TerminalNode ERROR_SYMBOL() { return getToken(MultiQueryMySQLParser.ERROR_SYMBOL, 0); }
		public TerminalNode ESCAPE_SYMBOL() { return getToken(MultiQueryMySQLParser.ESCAPE_SYMBOL, 0); }
		public TerminalNode EVENTS_SYMBOL() { return getToken(MultiQueryMySQLParser.EVENTS_SYMBOL, 0); }
		public TerminalNode EVERY_SYMBOL() { return getToken(MultiQueryMySQLParser.EVERY_SYMBOL, 0); }
		public TerminalNode EXCHANGE_SYMBOL() { return getToken(MultiQueryMySQLParser.EXCHANGE_SYMBOL, 0); }
		public TerminalNode EXCLUDE_SYMBOL() { return getToken(MultiQueryMySQLParser.EXCLUDE_SYMBOL, 0); }
		public TerminalNode EXPANSION_SYMBOL() { return getToken(MultiQueryMySQLParser.EXPANSION_SYMBOL, 0); }
		public TerminalNode EXPIRE_SYMBOL() { return getToken(MultiQueryMySQLParser.EXPIRE_SYMBOL, 0); }
		public TerminalNode EXPORT_SYMBOL() { return getToken(MultiQueryMySQLParser.EXPORT_SYMBOL, 0); }
		public TerminalNode EXTENDED_SYMBOL() { return getToken(MultiQueryMySQLParser.EXTENDED_SYMBOL, 0); }
		public TerminalNode EXTENT_SIZE_SYMBOL() { return getToken(MultiQueryMySQLParser.EXTENT_SIZE_SYMBOL, 0); }
		public TerminalNode FAST_SYMBOL() { return getToken(MultiQueryMySQLParser.FAST_SYMBOL, 0); }
		public TerminalNode FAULTS_SYMBOL() { return getToken(MultiQueryMySQLParser.FAULTS_SYMBOL, 0); }
		public TerminalNode FILE_BLOCK_SIZE_SYMBOL() { return getToken(MultiQueryMySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0); }
		public TerminalNode FILTER_SYMBOL() { return getToken(MultiQueryMySQLParser.FILTER_SYMBOL, 0); }
		public TerminalNode FIRST_SYMBOL() { return getToken(MultiQueryMySQLParser.FIRST_SYMBOL, 0); }
		public TerminalNode FIXED_SYMBOL() { return getToken(MultiQueryMySQLParser.FIXED_SYMBOL, 0); }
		public TerminalNode FOLLOWING_SYMBOL() { return getToken(MultiQueryMySQLParser.FOLLOWING_SYMBOL, 0); }
		public TerminalNode FORMAT_SYMBOL() { return getToken(MultiQueryMySQLParser.FORMAT_SYMBOL, 0); }
		public TerminalNode FOUND_SYMBOL() { return getToken(MultiQueryMySQLParser.FOUND_SYMBOL, 0); }
		public TerminalNode FULL_SYMBOL() { return getToken(MultiQueryMySQLParser.FULL_SYMBOL, 0); }
		public TerminalNode GENERAL_SYMBOL() { return getToken(MultiQueryMySQLParser.GENERAL_SYMBOL, 0); }
		public TerminalNode GEOMETRYCOLLECTION_SYMBOL() { return getToken(MultiQueryMySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
		public TerminalNode GEOMETRY_SYMBOL() { return getToken(MultiQueryMySQLParser.GEOMETRY_SYMBOL, 0); }
		public TerminalNode GET_FORMAT_SYMBOL() { return getToken(MultiQueryMySQLParser.GET_FORMAT_SYMBOL, 0); }
		public TerminalNode GET_MASTER_PUBLIC_KEY_SYMBOL() { return getToken(MultiQueryMySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL, 0); }
		public TerminalNode GRANTS_SYMBOL() { return getToken(MultiQueryMySQLParser.GRANTS_SYMBOL, 0); }
		public TerminalNode GROUP_REPLICATION_SYMBOL() { return getToken(MultiQueryMySQLParser.GROUP_REPLICATION_SYMBOL, 0); }
		public TerminalNode HASH_SYMBOL() { return getToken(MultiQueryMySQLParser.HASH_SYMBOL, 0); }
		public TerminalNode HISTOGRAM_SYMBOL() { return getToken(MultiQueryMySQLParser.HISTOGRAM_SYMBOL, 0); }
		public TerminalNode HISTORY_SYMBOL() { return getToken(MultiQueryMySQLParser.HISTORY_SYMBOL, 0); }
		public TerminalNode HOSTS_SYMBOL() { return getToken(MultiQueryMySQLParser.HOSTS_SYMBOL, 0); }
		public TerminalNode HOST_SYMBOL() { return getToken(MultiQueryMySQLParser.HOST_SYMBOL, 0); }
		public TerminalNode HOUR_SYMBOL() { return getToken(MultiQueryMySQLParser.HOUR_SYMBOL, 0); }
		public TerminalNode IDENTIFIED_SYMBOL() { return getToken(MultiQueryMySQLParser.IDENTIFIED_SYMBOL, 0); }
		public TerminalNode IGNORE_SERVER_IDS_SYMBOL() { return getToken(MultiQueryMySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0); }
		public TerminalNode INACTIVE_SYMBOL() { return getToken(MultiQueryMySQLParser.INACTIVE_SYMBOL, 0); }
		public TerminalNode INDEXES_SYMBOL() { return getToken(MultiQueryMySQLParser.INDEXES_SYMBOL, 0); }
		public TerminalNode INITIAL_SIZE_SYMBOL() { return getToken(MultiQueryMySQLParser.INITIAL_SIZE_SYMBOL, 0); }
		public TerminalNode INSERT_METHOD_SYMBOL() { return getToken(MultiQueryMySQLParser.INSERT_METHOD_SYMBOL, 0); }
		public TerminalNode INSTANCE_SYMBOL() { return getToken(MultiQueryMySQLParser.INSTANCE_SYMBOL, 0); }
		public TerminalNode INVISIBLE_SYMBOL() { return getToken(MultiQueryMySQLParser.INVISIBLE_SYMBOL, 0); }
		public TerminalNode INVOKER_SYMBOL() { return getToken(MultiQueryMySQLParser.INVOKER_SYMBOL, 0); }
		public TerminalNode IO_SYMBOL() { return getToken(MultiQueryMySQLParser.IO_SYMBOL, 0); }
		public TerminalNode IPC_SYMBOL() { return getToken(MultiQueryMySQLParser.IPC_SYMBOL, 0); }
		public TerminalNode ISOLATION_SYMBOL() { return getToken(MultiQueryMySQLParser.ISOLATION_SYMBOL, 0); }
		public TerminalNode ISSUER_SYMBOL() { return getToken(MultiQueryMySQLParser.ISSUER_SYMBOL, 0); }
		public TerminalNode JSON_SYMBOL() { return getToken(MultiQueryMySQLParser.JSON_SYMBOL, 0); }
		public TerminalNode KEY_BLOCK_SIZE_SYMBOL() { return getToken(MultiQueryMySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0); }
		public TerminalNode LAST_SYMBOL() { return getToken(MultiQueryMySQLParser.LAST_SYMBOL, 0); }
		public TerminalNode LEAVES_SYMBOL() { return getToken(MultiQueryMySQLParser.LEAVES_SYMBOL, 0); }
		public TerminalNode LESS_SYMBOL() { return getToken(MultiQueryMySQLParser.LESS_SYMBOL, 0); }
		public TerminalNode LEVEL_SYMBOL() { return getToken(MultiQueryMySQLParser.LEVEL_SYMBOL, 0); }
		public TerminalNode LINESTRING_SYMBOL() { return getToken(MultiQueryMySQLParser.LINESTRING_SYMBOL, 0); }
		public TerminalNode LIST_SYMBOL() { return getToken(MultiQueryMySQLParser.LIST_SYMBOL, 0); }
		public TerminalNode LOCKED_SYMBOL() { return getToken(MultiQueryMySQLParser.LOCKED_SYMBOL, 0); }
		public TerminalNode LOCKS_SYMBOL() { return getToken(MultiQueryMySQLParser.LOCKS_SYMBOL, 0); }
		public TerminalNode LOGFILE_SYMBOL() { return getToken(MultiQueryMySQLParser.LOGFILE_SYMBOL, 0); }
		public TerminalNode LOGS_SYMBOL() { return getToken(MultiQueryMySQLParser.LOGS_SYMBOL, 0); }
		public TerminalNode MASTER_AUTO_POSITION_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0); }
		public TerminalNode MASTER_COMPRESSION_ALGORITHM_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL, 0); }
		public TerminalNode MASTER_CONNECT_RETRY_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0); }
		public TerminalNode MASTER_DELAY_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_DELAY_SYMBOL, 0); }
		public TerminalNode MASTER_HEARTBEAT_PERIOD_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0); }
		public TerminalNode MASTER_HOST_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_HOST_SYMBOL, 0); }
		public TerminalNode NETWORK_NAMESPACE_SYMBOL() { return getToken(MultiQueryMySQLParser.NETWORK_NAMESPACE_SYMBOL, 0); }
		public TerminalNode MASTER_LOG_FILE_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_LOG_FILE_SYMBOL, 0); }
		public TerminalNode MASTER_LOG_POS_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_LOG_POS_SYMBOL, 0); }
		public TerminalNode MASTER_PASSWORD_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_PASSWORD_SYMBOL, 0); }
		public TerminalNode MASTER_PORT_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_PORT_SYMBOL, 0); }
		public TerminalNode MASTER_PUBLIC_KEY_PATH_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0); }
		public TerminalNode MASTER_RETRY_COUNT_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0); }
		public TerminalNode MASTER_SERVER_ID_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_SERVER_ID_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CAPATH_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CA_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_SSL_CA_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CERT_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_SSL_CERT_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CIPHER_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CRLPATH_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CRL_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_SSL_CRL_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_KEY_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_SSL_KEY_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_SSL_SYMBOL, 0); }
		public TerminalNode MASTER_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_SYMBOL, 0); }
		public TerminalNode MASTER_TLS_CIPHERSUITES_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL, 0); }
		public TerminalNode MASTER_TLS_VERSION_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_TLS_VERSION_SYMBOL, 0); }
		public TerminalNode MASTER_USER_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_USER_SYMBOL, 0); }
		public TerminalNode MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR_SYMBOL() { return getToken(MultiQueryMySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0); }
		public TerminalNode MAX_QUERIES_PER_HOUR_SYMBOL() { return getToken(MultiQueryMySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0); }
		public TerminalNode MAX_ROWS_SYMBOL() { return getToken(MultiQueryMySQLParser.MAX_ROWS_SYMBOL, 0); }
		public TerminalNode MAX_SIZE_SYMBOL() { return getToken(MultiQueryMySQLParser.MAX_SIZE_SYMBOL, 0); }
		public TerminalNode MAX_UPDATES_PER_HOUR_SYMBOL() { return getToken(MultiQueryMySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0); }
		public TerminalNode MAX_USER_CONNECTIONS_SYMBOL() { return getToken(MultiQueryMySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0); }
		public TerminalNode MEDIUM_SYMBOL() { return getToken(MultiQueryMySQLParser.MEDIUM_SYMBOL, 0); }
		public TerminalNode MEMORY_SYMBOL() { return getToken(MultiQueryMySQLParser.MEMORY_SYMBOL, 0); }
		public TerminalNode MERGE_SYMBOL() { return getToken(MultiQueryMySQLParser.MERGE_SYMBOL, 0); }
		public TerminalNode MESSAGE_TEXT_SYMBOL() { return getToken(MultiQueryMySQLParser.MESSAGE_TEXT_SYMBOL, 0); }
		public TerminalNode MICROSECOND_SYMBOL() { return getToken(MultiQueryMySQLParser.MICROSECOND_SYMBOL, 0); }
		public TerminalNode MIGRATE_SYMBOL() { return getToken(MultiQueryMySQLParser.MIGRATE_SYMBOL, 0); }
		public TerminalNode MINUTE_SYMBOL() { return getToken(MultiQueryMySQLParser.MINUTE_SYMBOL, 0); }
		public TerminalNode MIN_ROWS_SYMBOL() { return getToken(MultiQueryMySQLParser.MIN_ROWS_SYMBOL, 0); }
		public TerminalNode MODE_SYMBOL() { return getToken(MultiQueryMySQLParser.MODE_SYMBOL, 0); }
		public TerminalNode MODIFY_SYMBOL() { return getToken(MultiQueryMySQLParser.MODIFY_SYMBOL, 0); }
		public TerminalNode MONTH_SYMBOL() { return getToken(MultiQueryMySQLParser.MONTH_SYMBOL, 0); }
		public TerminalNode MULTILINESTRING_SYMBOL() { return getToken(MultiQueryMySQLParser.MULTILINESTRING_SYMBOL, 0); }
		public TerminalNode MULTIPOINT_SYMBOL() { return getToken(MultiQueryMySQLParser.MULTIPOINT_SYMBOL, 0); }
		public TerminalNode MULTIPOLYGON_SYMBOL() { return getToken(MultiQueryMySQLParser.MULTIPOLYGON_SYMBOL, 0); }
		public TerminalNode MUTEX_SYMBOL() { return getToken(MultiQueryMySQLParser.MUTEX_SYMBOL, 0); }
		public TerminalNode MYSQL_ERRNO_SYMBOL() { return getToken(MultiQueryMySQLParser.MYSQL_ERRNO_SYMBOL, 0); }
		public TerminalNode NAMES_SYMBOL() { return getToken(MultiQueryMySQLParser.NAMES_SYMBOL, 0); }
		public TerminalNode NAME_SYMBOL() { return getToken(MultiQueryMySQLParser.NAME_SYMBOL, 0); }
		public TerminalNode NATIONAL_SYMBOL() { return getToken(MultiQueryMySQLParser.NATIONAL_SYMBOL, 0); }
		public TerminalNode NCHAR_SYMBOL() { return getToken(MultiQueryMySQLParser.NCHAR_SYMBOL, 0); }
		public TerminalNode NDBCLUSTER_SYMBOL() { return getToken(MultiQueryMySQLParser.NDBCLUSTER_SYMBOL, 0); }
		public TerminalNode NESTED_SYMBOL() { return getToken(MultiQueryMySQLParser.NESTED_SYMBOL, 0); }
		public TerminalNode NEVER_SYMBOL() { return getToken(MultiQueryMySQLParser.NEVER_SYMBOL, 0); }
		public TerminalNode NEW_SYMBOL() { return getToken(MultiQueryMySQLParser.NEW_SYMBOL, 0); }
		public TerminalNode NEXT_SYMBOL() { return getToken(MultiQueryMySQLParser.NEXT_SYMBOL, 0); }
		public TerminalNode NODEGROUP_SYMBOL() { return getToken(MultiQueryMySQLParser.NODEGROUP_SYMBOL, 0); }
		public TerminalNode NOWAIT_SYMBOL() { return getToken(MultiQueryMySQLParser.NOWAIT_SYMBOL, 0); }
		public TerminalNode NO_WAIT_SYMBOL() { return getToken(MultiQueryMySQLParser.NO_WAIT_SYMBOL, 0); }
		public TerminalNode NULLS_SYMBOL() { return getToken(MultiQueryMySQLParser.NULLS_SYMBOL, 0); }
		public TerminalNode NUMBER_SYMBOL() { return getToken(MultiQueryMySQLParser.NUMBER_SYMBOL, 0); }
		public TerminalNode NVARCHAR_SYMBOL() { return getToken(MultiQueryMySQLParser.NVARCHAR_SYMBOL, 0); }
		public TerminalNode OFFSET_SYMBOL() { return getToken(MultiQueryMySQLParser.OFFSET_SYMBOL, 0); }
		public TerminalNode OJ_SYMBOL() { return getToken(MultiQueryMySQLParser.OJ_SYMBOL, 0); }
		public TerminalNode OLD_SYMBOL() { return getToken(MultiQueryMySQLParser.OLD_SYMBOL, 0); }
		public TerminalNode ONE_SYMBOL() { return getToken(MultiQueryMySQLParser.ONE_SYMBOL, 0); }
		public TerminalNode ONLY_SYMBOL() { return getToken(MultiQueryMySQLParser.ONLY_SYMBOL, 0); }
		public TerminalNode OPEN_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_SYMBOL, 0); }
		public TerminalNode OPTIONAL_SYMBOL() { return getToken(MultiQueryMySQLParser.OPTIONAL_SYMBOL, 0); }
		public TerminalNode OPTIONS_SYMBOL() { return getToken(MultiQueryMySQLParser.OPTIONS_SYMBOL, 0); }
		public TerminalNode ORDINALITY_SYMBOL() { return getToken(MultiQueryMySQLParser.ORDINALITY_SYMBOL, 0); }
		public TerminalNode ORGANIZATION_SYMBOL() { return getToken(MultiQueryMySQLParser.ORGANIZATION_SYMBOL, 0); }
		public TerminalNode OTHERS_SYMBOL() { return getToken(MultiQueryMySQLParser.OTHERS_SYMBOL, 0); }
		public TerminalNode OWNER_SYMBOL() { return getToken(MultiQueryMySQLParser.OWNER_SYMBOL, 0); }
		public TerminalNode PACK_KEYS_SYMBOL() { return getToken(MultiQueryMySQLParser.PACK_KEYS_SYMBOL, 0); }
		public TerminalNode PAGE_SYMBOL() { return getToken(MultiQueryMySQLParser.PAGE_SYMBOL, 0); }
		public TerminalNode PARSER_SYMBOL() { return getToken(MultiQueryMySQLParser.PARSER_SYMBOL, 0); }
		public TerminalNode PARTIAL_SYMBOL() { return getToken(MultiQueryMySQLParser.PARTIAL_SYMBOL, 0); }
		public TerminalNode PARTITIONING_SYMBOL() { return getToken(MultiQueryMySQLParser.PARTITIONING_SYMBOL, 0); }
		public TerminalNode PARTITIONS_SYMBOL() { return getToken(MultiQueryMySQLParser.PARTITIONS_SYMBOL, 0); }
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MultiQueryMySQLParser.PASSWORD_SYMBOL, 0); }
		public TerminalNode PATH_SYMBOL() { return getToken(MultiQueryMySQLParser.PATH_SYMBOL, 0); }
		public TerminalNode PHASE_SYMBOL() { return getToken(MultiQueryMySQLParser.PHASE_SYMBOL, 0); }
		public TerminalNode PLUGINS_SYMBOL() { return getToken(MultiQueryMySQLParser.PLUGINS_SYMBOL, 0); }
		public TerminalNode PLUGIN_DIR_SYMBOL() { return getToken(MultiQueryMySQLParser.PLUGIN_DIR_SYMBOL, 0); }
		public TerminalNode PLUGIN_SYMBOL() { return getToken(MultiQueryMySQLParser.PLUGIN_SYMBOL, 0); }
		public TerminalNode POINT_SYMBOL() { return getToken(MultiQueryMySQLParser.POINT_SYMBOL, 0); }
		public TerminalNode POLYGON_SYMBOL() { return getToken(MultiQueryMySQLParser.POLYGON_SYMBOL, 0); }
		public TerminalNode PORT_SYMBOL() { return getToken(MultiQueryMySQLParser.PORT_SYMBOL, 0); }
		public TerminalNode PRECEDING_SYMBOL() { return getToken(MultiQueryMySQLParser.PRECEDING_SYMBOL, 0); }
		public TerminalNode PRESERVE_SYMBOL() { return getToken(MultiQueryMySQLParser.PRESERVE_SYMBOL, 0); }
		public TerminalNode PREV_SYMBOL() { return getToken(MultiQueryMySQLParser.PREV_SYMBOL, 0); }
		public TerminalNode PRIVILEGES_SYMBOL() { return getToken(MultiQueryMySQLParser.PRIVILEGES_SYMBOL, 0); }
		public TerminalNode PRIVILEGE_CHECKS_USER_SYMBOL() { return getToken(MultiQueryMySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL, 0); }
		public TerminalNode PROCESSLIST_SYMBOL() { return getToken(MultiQueryMySQLParser.PROCESSLIST_SYMBOL, 0); }
		public TerminalNode PROFILES_SYMBOL() { return getToken(MultiQueryMySQLParser.PROFILES_SYMBOL, 0); }
		public TerminalNode PROFILE_SYMBOL() { return getToken(MultiQueryMySQLParser.PROFILE_SYMBOL, 0); }
		public TerminalNode QUARTER_SYMBOL() { return getToken(MultiQueryMySQLParser.QUARTER_SYMBOL, 0); }
		public TerminalNode QUERY_SYMBOL() { return getToken(MultiQueryMySQLParser.QUERY_SYMBOL, 0); }
		public TerminalNode QUICK_SYMBOL() { return getToken(MultiQueryMySQLParser.QUICK_SYMBOL, 0); }
		public TerminalNode READ_ONLY_SYMBOL() { return getToken(MultiQueryMySQLParser.READ_ONLY_SYMBOL, 0); }
		public TerminalNode REBUILD_SYMBOL() { return getToken(MultiQueryMySQLParser.REBUILD_SYMBOL, 0); }
		public TerminalNode RECOVER_SYMBOL() { return getToken(MultiQueryMySQLParser.RECOVER_SYMBOL, 0); }
		public TerminalNode REDO_BUFFER_SIZE_SYMBOL() { return getToken(MultiQueryMySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0); }
		public TerminalNode REDUNDANT_SYMBOL() { return getToken(MultiQueryMySQLParser.REDUNDANT_SYMBOL, 0); }
		public TerminalNode REFERENCE_SYMBOL() { return getToken(MultiQueryMySQLParser.REFERENCE_SYMBOL, 0); }
		public TerminalNode RELAY_SYMBOL() { return getToken(MultiQueryMySQLParser.RELAY_SYMBOL, 0); }
		public TerminalNode RELAYLOG_SYMBOL() { return getToken(MultiQueryMySQLParser.RELAYLOG_SYMBOL, 0); }
		public TerminalNode RELAY_LOG_FILE_SYMBOL() { return getToken(MultiQueryMySQLParser.RELAY_LOG_FILE_SYMBOL, 0); }
		public TerminalNode RELAY_LOG_POS_SYMBOL() { return getToken(MultiQueryMySQLParser.RELAY_LOG_POS_SYMBOL, 0); }
		public TerminalNode RELAY_THREAD_SYMBOL() { return getToken(MultiQueryMySQLParser.RELAY_THREAD_SYMBOL, 0); }
		public TerminalNode REMOVE_SYMBOL() { return getToken(MultiQueryMySQLParser.REMOVE_SYMBOL, 0); }
		public TerminalNode REORGANIZE_SYMBOL() { return getToken(MultiQueryMySQLParser.REORGANIZE_SYMBOL, 0); }
		public TerminalNode REPEATABLE_SYMBOL() { return getToken(MultiQueryMySQLParser.REPEATABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_DO_DB_SYMBOL() { return getToken(MultiQueryMySQLParser.REPLICATE_DO_DB_SYMBOL, 0); }
		public TerminalNode REPLICATE_DO_TABLE_SYMBOL() { return getToken(MultiQueryMySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_IGNORE_DB_SYMBOL() { return getToken(MultiQueryMySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0); }
		public TerminalNode REPLICATE_IGNORE_TABLE_SYMBOL() { return getToken(MultiQueryMySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_REWRITE_DB_SYMBOL() { return getToken(MultiQueryMySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0); }
		public TerminalNode REPLICATE_WILD_DO_TABLE_SYMBOL() { return getToken(MultiQueryMySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_WILD_IGNORE_TABLE_SYMBOL() { return getToken(MultiQueryMySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0); }
		public TerminalNode USER_RESOURCES_SYMBOL() { return getToken(MultiQueryMySQLParser.USER_RESOURCES_SYMBOL, 0); }
		public TerminalNode RESPECT_SYMBOL() { return getToken(MultiQueryMySQLParser.RESPECT_SYMBOL, 0); }
		public TerminalNode RESTORE_SYMBOL() { return getToken(MultiQueryMySQLParser.RESTORE_SYMBOL, 0); }
		public TerminalNode RESUME_SYMBOL() { return getToken(MultiQueryMySQLParser.RESUME_SYMBOL, 0); }
		public TerminalNode RETAIN_SYMBOL() { return getToken(MultiQueryMySQLParser.RETAIN_SYMBOL, 0); }
		public TerminalNode RETURNED_SQLSTATE_SYMBOL() { return getToken(MultiQueryMySQLParser.RETURNED_SQLSTATE_SYMBOL, 0); }
		public TerminalNode RETURNS_SYMBOL() { return getToken(MultiQueryMySQLParser.RETURNS_SYMBOL, 0); }
		public TerminalNode REUSE_SYMBOL() { return getToken(MultiQueryMySQLParser.REUSE_SYMBOL, 0); }
		public TerminalNode REVERSE_SYMBOL() { return getToken(MultiQueryMySQLParser.REVERSE_SYMBOL, 0); }
		public TerminalNode ROLE_SYMBOL() { return getToken(MultiQueryMySQLParser.ROLE_SYMBOL, 0); }
		public TerminalNode ROLLUP_SYMBOL() { return getToken(MultiQueryMySQLParser.ROLLUP_SYMBOL, 0); }
		public TerminalNode ROTATE_SYMBOL() { return getToken(MultiQueryMySQLParser.ROTATE_SYMBOL, 0); }
		public TerminalNode ROUTINE_SYMBOL() { return getToken(MultiQueryMySQLParser.ROUTINE_SYMBOL, 0); }
		public TerminalNode ROW_COUNT_SYMBOL() { return getToken(MultiQueryMySQLParser.ROW_COUNT_SYMBOL, 0); }
		public TerminalNode ROW_FORMAT_SYMBOL() { return getToken(MultiQueryMySQLParser.ROW_FORMAT_SYMBOL, 0); }
		public TerminalNode RTREE_SYMBOL() { return getToken(MultiQueryMySQLParser.RTREE_SYMBOL, 0); }
		public TerminalNode SCHEDULE_SYMBOL() { return getToken(MultiQueryMySQLParser.SCHEDULE_SYMBOL, 0); }
		public TerminalNode SCHEMA_NAME_SYMBOL() { return getToken(MultiQueryMySQLParser.SCHEMA_NAME_SYMBOL, 0); }
		public TerminalNode SECONDARY_ENGINE_SYMBOL() { return getToken(MultiQueryMySQLParser.SECONDARY_ENGINE_SYMBOL, 0); }
		public TerminalNode SECONDARY_LOAD_SYMBOL() { return getToken(MultiQueryMySQLParser.SECONDARY_LOAD_SYMBOL, 0); }
		public TerminalNode SECONDARY_SYMBOL() { return getToken(MultiQueryMySQLParser.SECONDARY_SYMBOL, 0); }
		public TerminalNode SECONDARY_UNLOAD_SYMBOL() { return getToken(MultiQueryMySQLParser.SECONDARY_UNLOAD_SYMBOL, 0); }
		public TerminalNode SECOND_SYMBOL() { return getToken(MultiQueryMySQLParser.SECOND_SYMBOL, 0); }
		public TerminalNode SECURITY_SYMBOL() { return getToken(MultiQueryMySQLParser.SECURITY_SYMBOL, 0); }
		public TerminalNode SERIALIZABLE_SYMBOL() { return getToken(MultiQueryMySQLParser.SERIALIZABLE_SYMBOL, 0); }
		public TerminalNode SERIAL_SYMBOL() { return getToken(MultiQueryMySQLParser.SERIAL_SYMBOL, 0); }
		public TerminalNode SERVER_SYMBOL() { return getToken(MultiQueryMySQLParser.SERVER_SYMBOL, 0); }
		public TerminalNode SHARE_SYMBOL() { return getToken(MultiQueryMySQLParser.SHARE_SYMBOL, 0); }
		public TerminalNode SIMPLE_SYMBOL() { return getToken(MultiQueryMySQLParser.SIMPLE_SYMBOL, 0); }
		public TerminalNode SKIP_SYMBOL() { return getToken(MultiQueryMySQLParser.SKIP_SYMBOL, 0); }
		public TerminalNode SLOW_SYMBOL() { return getToken(MultiQueryMySQLParser.SLOW_SYMBOL, 0); }
		public TerminalNode SNAPSHOT_SYMBOL() { return getToken(MultiQueryMySQLParser.SNAPSHOT_SYMBOL, 0); }
		public TerminalNode SOCKET_SYMBOL() { return getToken(MultiQueryMySQLParser.SOCKET_SYMBOL, 0); }
		public TerminalNode SONAME_SYMBOL() { return getToken(MultiQueryMySQLParser.SONAME_SYMBOL, 0); }
		public TerminalNode SOUNDS_SYMBOL() { return getToken(MultiQueryMySQLParser.SOUNDS_SYMBOL, 0); }
		public TerminalNode SOURCE_SYMBOL() { return getToken(MultiQueryMySQLParser.SOURCE_SYMBOL, 0); }
		public TerminalNode SQL_AFTER_GTIDS_SYMBOL() { return getToken(MultiQueryMySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0); }
		public TerminalNode SQL_AFTER_MTS_GAPS_SYMBOL() { return getToken(MultiQueryMySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0); }
		public TerminalNode SQL_BEFORE_GTIDS_SYMBOL() { return getToken(MultiQueryMySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0); }
		public TerminalNode SQL_BUFFER_RESULT_SYMBOL() { return getToken(MultiQueryMySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0); }
		public TerminalNode SQL_NO_CACHE_SYMBOL() { return getToken(MultiQueryMySQLParser.SQL_NO_CACHE_SYMBOL, 0); }
		public TerminalNode SQL_THREAD_SYMBOL() { return getToken(MultiQueryMySQLParser.SQL_THREAD_SYMBOL, 0); }
		public TerminalNode SRID_SYMBOL() { return getToken(MultiQueryMySQLParser.SRID_SYMBOL, 0); }
		public TerminalNode STACKED_SYMBOL() { return getToken(MultiQueryMySQLParser.STACKED_SYMBOL, 0); }
		public TerminalNode STARTS_SYMBOL() { return getToken(MultiQueryMySQLParser.STARTS_SYMBOL, 0); }
		public TerminalNode STATS_AUTO_RECALC_SYMBOL() { return getToken(MultiQueryMySQLParser.STATS_AUTO_RECALC_SYMBOL, 0); }
		public TerminalNode STATS_PERSISTENT_SYMBOL() { return getToken(MultiQueryMySQLParser.STATS_PERSISTENT_SYMBOL, 0); }
		public TerminalNode STATS_SAMPLE_PAGES_SYMBOL() { return getToken(MultiQueryMySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0); }
		public TerminalNode STATUS_SYMBOL() { return getToken(MultiQueryMySQLParser.STATUS_SYMBOL, 0); }
		public TerminalNode STORAGE_SYMBOL() { return getToken(MultiQueryMySQLParser.STORAGE_SYMBOL, 0); }
		public TerminalNode STRING_SYMBOL() { return getToken(MultiQueryMySQLParser.STRING_SYMBOL, 0); }
		public TerminalNode SUBCLASS_ORIGIN_SYMBOL() { return getToken(MultiQueryMySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0); }
		public TerminalNode SUBDATE_SYMBOL() { return getToken(MultiQueryMySQLParser.SUBDATE_SYMBOL, 0); }
		public TerminalNode SUBJECT_SYMBOL() { return getToken(MultiQueryMySQLParser.SUBJECT_SYMBOL, 0); }
		public TerminalNode SUBPARTITIONS_SYMBOL() { return getToken(MultiQueryMySQLParser.SUBPARTITIONS_SYMBOL, 0); }
		public TerminalNode SUBPARTITION_SYMBOL() { return getToken(MultiQueryMySQLParser.SUBPARTITION_SYMBOL, 0); }
		public TerminalNode SUSPEND_SYMBOL() { return getToken(MultiQueryMySQLParser.SUSPEND_SYMBOL, 0); }
		public TerminalNode SWAPS_SYMBOL() { return getToken(MultiQueryMySQLParser.SWAPS_SYMBOL, 0); }
		public TerminalNode SWITCHES_SYMBOL() { return getToken(MultiQueryMySQLParser.SWITCHES_SYMBOL, 0); }
		public TerminalNode TABLES_SYMBOL() { return getToken(MultiQueryMySQLParser.TABLES_SYMBOL, 0); }
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MultiQueryMySQLParser.TABLESPACE_SYMBOL, 0); }
		public TerminalNode TABLE_CHECKSUM_SYMBOL() { return getToken(MultiQueryMySQLParser.TABLE_CHECKSUM_SYMBOL, 0); }
		public TerminalNode TABLE_NAME_SYMBOL() { return getToken(MultiQueryMySQLParser.TABLE_NAME_SYMBOL, 0); }
		public TerminalNode TEMPORARY_SYMBOL() { return getToken(MultiQueryMySQLParser.TEMPORARY_SYMBOL, 0); }
		public TerminalNode TEMPTABLE_SYMBOL() { return getToken(MultiQueryMySQLParser.TEMPTABLE_SYMBOL, 0); }
		public TerminalNode TEXT_SYMBOL() { return getToken(MultiQueryMySQLParser.TEXT_SYMBOL, 0); }
		public TerminalNode THAN_SYMBOL() { return getToken(MultiQueryMySQLParser.THAN_SYMBOL, 0); }
		public TerminalNode THREAD_PRIORITY_SYMBOL() { return getToken(MultiQueryMySQLParser.THREAD_PRIORITY_SYMBOL, 0); }
		public TerminalNode TIES_SYMBOL() { return getToken(MultiQueryMySQLParser.TIES_SYMBOL, 0); }
		public TerminalNode TIMESTAMP_ADD_SYMBOL() { return getToken(MultiQueryMySQLParser.TIMESTAMP_ADD_SYMBOL, 0); }
		public TerminalNode TIMESTAMP_DIFF_SYMBOL() { return getToken(MultiQueryMySQLParser.TIMESTAMP_DIFF_SYMBOL, 0); }
		public TerminalNode TIMESTAMP_SYMBOL() { return getToken(MultiQueryMySQLParser.TIMESTAMP_SYMBOL, 0); }
		public TerminalNode TIME_SYMBOL() { return getToken(MultiQueryMySQLParser.TIME_SYMBOL, 0); }
		public TerminalNode TRANSACTION_SYMBOL() { return getToken(MultiQueryMySQLParser.TRANSACTION_SYMBOL, 0); }
		public TerminalNode TRIGGERS_SYMBOL() { return getToken(MultiQueryMySQLParser.TRIGGERS_SYMBOL, 0); }
		public TerminalNode TYPES_SYMBOL() { return getToken(MultiQueryMySQLParser.TYPES_SYMBOL, 0); }
		public TerminalNode TYPE_SYMBOL() { return getToken(MultiQueryMySQLParser.TYPE_SYMBOL, 0); }
		public TerminalNode UNBOUNDED_SYMBOL() { return getToken(MultiQueryMySQLParser.UNBOUNDED_SYMBOL, 0); }
		public TerminalNode UNCOMMITTED_SYMBOL() { return getToken(MultiQueryMySQLParser.UNCOMMITTED_SYMBOL, 0); }
		public TerminalNode UNDEFINED_SYMBOL() { return getToken(MultiQueryMySQLParser.UNDEFINED_SYMBOL, 0); }
		public TerminalNode UNDOFILE_SYMBOL() { return getToken(MultiQueryMySQLParser.UNDOFILE_SYMBOL, 0); }
		public TerminalNode UNDO_BUFFER_SIZE_SYMBOL() { return getToken(MultiQueryMySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0); }
		public TerminalNode UNKNOWN_SYMBOL() { return getToken(MultiQueryMySQLParser.UNKNOWN_SYMBOL, 0); }
		public TerminalNode UNTIL_SYMBOL() { return getToken(MultiQueryMySQLParser.UNTIL_SYMBOL, 0); }
		public TerminalNode UPGRADE_SYMBOL() { return getToken(MultiQueryMySQLParser.UPGRADE_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MultiQueryMySQLParser.USER_SYMBOL, 0); }
		public TerminalNode USE_FRM_SYMBOL() { return getToken(MultiQueryMySQLParser.USE_FRM_SYMBOL, 0); }
		public TerminalNode VALIDATION_SYMBOL() { return getToken(MultiQueryMySQLParser.VALIDATION_SYMBOL, 0); }
		public TerminalNode VALUE_SYMBOL() { return getToken(MultiQueryMySQLParser.VALUE_SYMBOL, 0); }
		public TerminalNode VARIABLES_SYMBOL() { return getToken(MultiQueryMySQLParser.VARIABLES_SYMBOL, 0); }
		public TerminalNode VCPU_SYMBOL() { return getToken(MultiQueryMySQLParser.VCPU_SYMBOL, 0); }
		public TerminalNode VIEW_SYMBOL() { return getToken(MultiQueryMySQLParser.VIEW_SYMBOL, 0); }
		public TerminalNode VISIBLE_SYMBOL() { return getToken(MultiQueryMySQLParser.VISIBLE_SYMBOL, 0); }
		public TerminalNode WAIT_SYMBOL() { return getToken(MultiQueryMySQLParser.WAIT_SYMBOL, 0); }
		public TerminalNode WARNINGS_SYMBOL() { return getToken(MultiQueryMySQLParser.WARNINGS_SYMBOL, 0); }
		public TerminalNode WEEK_SYMBOL() { return getToken(MultiQueryMySQLParser.WEEK_SYMBOL, 0); }
		public TerminalNode WEIGHT_STRING_SYMBOL() { return getToken(MultiQueryMySQLParser.WEIGHT_STRING_SYMBOL, 0); }
		public TerminalNode WITHOUT_SYMBOL() { return getToken(MultiQueryMySQLParser.WITHOUT_SYMBOL, 0); }
		public TerminalNode WORK_SYMBOL() { return getToken(MultiQueryMySQLParser.WORK_SYMBOL, 0); }
		public TerminalNode WRAPPER_SYMBOL() { return getToken(MultiQueryMySQLParser.WRAPPER_SYMBOL, 0); }
		public TerminalNode X509_SYMBOL() { return getToken(MultiQueryMySQLParser.X509_SYMBOL, 0); }
		public TerminalNode XID_SYMBOL() { return getToken(MultiQueryMySQLParser.XID_SYMBOL, 0); }
		public TerminalNode XML_SYMBOL() { return getToken(MultiQueryMySQLParser.XML_SYMBOL, 0); }
		public TerminalNode YEAR_SYMBOL() { return getToken(MultiQueryMySQLParser.YEAR_SYMBOL, 0); }
		public IdentifierKeywordsUnambiguousContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierKeywordsUnambiguous; }
	}

	public final IdentifierKeywordsUnambiguousContext identifierKeywordsUnambiguous() throws RecognitionException {
		IdentifierKeywordsUnambiguousContext _localctx = new IdentifierKeywordsUnambiguousContext(_ctx, getState());
		enterRule(_localctx, 1200, RULE_identifierKeywordsUnambiguous);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8320);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT_SYMBOL) | (1L << ALWAYS_SYMBOL) | (1L << BACKUP_SYMBOL) | (1L << CLOSE_SYMBOL) | (1L << FORMAT_SYMBOL) | (1L << GROUP_REPLICATION_SYMBOL) | (1L << HOST_SYMBOL) | (1L << OPEN_SYMBOL) | (1L << OPTIONS_SYMBOL) | (1L << OWNER_SYMBOL) | (1L << PARSER_SYMBOL) | (1L << PORT_SYMBOL) | (1L << REMOVE_SYMBOL) | (1L << RESTORE_SYMBOL) | (1L << SECURITY_SYMBOL) | (1L << SERVER_SYMBOL) | (1L << SOCKET_SYMBOL) | (1L << SONAME_SYMBOL) | (1L << UPGRADE_SYMBOL) | (1L << WRAPPER_SYMBOL) | (1L << ACTION_SYMBOL) | (1L << ADDDATE_SYMBOL) | (1L << AFTER_SYMBOL) | (1L << AGAINST_SYMBOL) | (1L << AGGREGATE_SYMBOL) | (1L << ALGORITHM_SYMBOL))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ANY_SYMBOL - 64)) | (1L << (AT_SYMBOL - 64)) | (1L << (AUTO_INCREMENT_SYMBOL - 64)) | (1L << (AUTOEXTEND_SIZE_SYMBOL - 64)) | (1L << (AVG_ROW_LENGTH_SYMBOL - 64)) | (1L << (AVG_SYMBOL - 64)) | (1L << (BINLOG_SYMBOL - 64)) | (1L << (BIT_SYMBOL - 64)) | (1L << (BLOCK_SYMBOL - 64)) | (1L << (BOOL_SYMBOL - 64)) | (1L << (BOOLEAN_SYMBOL - 64)) | (1L << (BTREE_SYMBOL - 64)) | (1L << (CASCADED_SYMBOL - 64)) | (1L << (CATALOG_NAME_SYMBOL - 64)) | (1L << (CHAIN_SYMBOL - 64)) | (1L << (CHANGED_SYMBOL - 64)) | (1L << (CHANNEL_SYMBOL - 64)) | (1L << (CIPHER_SYMBOL - 64)) | (1L << (CLIENT_SYMBOL - 64)) | (1L << (CLASS_ORIGIN_SYMBOL - 64)) | (1L << (COALESCE_SYMBOL - 64)) | (1L << (CODE_SYMBOL - 64)) | (1L << (COLLATION_SYMBOL - 64)) | (1L << (COLUMN_NAME_SYMBOL - 64)) | (1L << (COLUMN_FORMAT_SYMBOL - 64)) | (1L << (COLUMNS_SYMBOL - 64)) | (1L << (COMMITTED_SYMBOL - 64)) | (1L << (COMPACT_SYMBOL - 64)) | (1L << (COMPLETION_SYMBOL - 64)) | (1L << (COMPRESSED_SYMBOL - 64)) | (1L << (COMPRESSION_SYMBOL - 64)) | (1L << (ENCRYPTION_SYMBOL - 64)) | (1L << (CONCURRENT_SYMBOL - 64)) | (1L << (CONNECTION_SYMBOL - 64)) | (1L << (CONSISTENT_SYMBOL - 64)) | (1L << (CONSTRAINT_CATALOG_SYMBOL - 64)) | (1L << (CONSTRAINT_SCHEMA_SYMBOL - 64)) | (1L << (CONSTRAINT_NAME_SYMBOL - 64)) | (1L << (CONTEXT_SYMBOL - 64)) | (1L << (CPU_SYMBOL - 64)) | (1L << (CURRENT_SYMBOL - 64)) | (1L << (CURSOR_NAME_SYMBOL - 64)) | (1L << (DATA_SYMBOL - 64)) | (1L << (DATAFILE_SYMBOL - 64)) | (1L << (DATETIME_SYMBOL - 64)) | (1L << (DATE_SYMBOL - 64)) | (1L << (DAY_SYMBOL - 64)) | (1L << (DEFAULT_AUTH_SYMBOL - 64)) | (1L << (DEFINER_SYMBOL - 64)) | (1L << (DELAY_KEY_WRITE_SYMBOL - 64)) | (1L << (DIAGNOSTICS_SYMBOL - 64)) | (1L << (DIRECTORY_SYMBOL - 64)) | (1L << (DISABLE_SYMBOL - 64)) | (1L << (DISCARD_SYMBOL - 64)) | (1L << (DISK_SYMBOL - 64)) | (1L << (DUMPFILE_SYMBOL - 64)) | (1L << (DUPLICATE_SYMBOL - 64)) | (1L << (DYNAMIC_SYMBOL - 64)) | (1L << (ENDS_SYMBOL - 64)) | (1L << (ENUM_SYMBOL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENGINE_SYMBOL - 128)) | (1L << (ENGINES_SYMBOL - 128)) | (1L << (ERROR_SYMBOL - 128)) | (1L << (ERRORS_SYMBOL - 128)) | (1L << (ESCAPE_SYMBOL - 128)) | (1L << (EVENTS_SYMBOL - 128)) | (1L << (EVERY_SYMBOL - 128)) | (1L << (EXPANSION_SYMBOL - 128)) | (1L << (EXPORT_SYMBOL - 128)) | (1L << (EXTENDED_SYMBOL - 128)) | (1L << (EXTENT_SIZE_SYMBOL - 128)) | (1L << (FAULTS_SYMBOL - 128)) | (1L << (FAST_SYMBOL - 128)) | (1L << (FOUND_SYMBOL - 128)) | (1L << (ENABLE_SYMBOL - 128)) | (1L << (FULL_SYMBOL - 128)) | (1L << (FILE_BLOCK_SIZE_SYMBOL - 128)) | (1L << (FILTER_SYMBOL - 128)) | (1L << (FIRST_SYMBOL - 128)) | (1L << (FIXED_SYMBOL - 128)) | (1L << (GENERAL_SYMBOL - 128)) | (1L << (GEOMETRY_SYMBOL - 128)) | (1L << (GEOMETRYCOLLECTION_SYMBOL - 128)) | (1L << (GET_FORMAT_SYMBOL - 128)) | (1L << (GRANTS_SYMBOL - 128)) | (1L << (HASH_SYMBOL - 128)) | (1L << (HOSTS_SYMBOL - 128)) | (1L << (HOUR_SYMBOL - 128)) | (1L << (IDENTIFIED_SYMBOL - 128)) | (1L << (IGNORE_SERVER_IDS_SYMBOL - 128)) | (1L << (INVOKER_SYMBOL - 128)) | (1L << (INDEXES_SYMBOL - 128)) | (1L << (INITIAL_SIZE_SYMBOL - 128)) | (1L << (INSTANCE_SYMBOL - 128)) | (1L << (IO_SYMBOL - 128)) | (1L << (IPC_SYMBOL - 128)) | (1L << (ISOLATION_SYMBOL - 128)) | (1L << (ISSUER_SYMBOL - 128)) | (1L << (INSERT_METHOD_SYMBOL - 128)) | (1L << (JSON_SYMBOL - 128)) | (1L << (KEY_BLOCK_SIZE_SYMBOL - 128)) | (1L << (LAST_SYMBOL - 128)) | (1L << (LEAVES_SYMBOL - 128)) | (1L << (LESS_SYMBOL - 128)) | (1L << (LEVEL_SYMBOL - 128)) | (1L << (LINESTRING_SYMBOL - 128)) | (1L << (LIST_SYMBOL - 128)) | (1L << (LOCKS_SYMBOL - 128)) | (1L << (LOGFILE_SYMBOL - 128)) | (1L << (LOGS_SYMBOL - 128)) | (1L << (MAX_ROWS_SYMBOL - 128)) | (1L << (MASTER_SYMBOL - 128)) | (1L << (MASTER_HEARTBEAT_PERIOD_SYMBOL - 128)) | (1L << (MASTER_HOST_SYMBOL - 128)) | (1L << (MASTER_PORT_SYMBOL - 128)) | (1L << (MASTER_LOG_FILE_SYMBOL - 128)) | (1L << (MASTER_LOG_POS_SYMBOL - 128)) | (1L << (MASTER_USER_SYMBOL - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (MASTER_PASSWORD_SYMBOL - 192)) | (1L << (MASTER_SERVER_ID_SYMBOL - 192)) | (1L << (MASTER_CONNECT_RETRY_SYMBOL - 192)) | (1L << (MASTER_RETRY_COUNT_SYMBOL - 192)) | (1L << (MASTER_DELAY_SYMBOL - 192)) | (1L << (MASTER_SSL_SYMBOL - 192)) | (1L << (MASTER_SSL_CA_SYMBOL - 192)) | (1L << (MASTER_SSL_CAPATH_SYMBOL - 192)) | (1L << (MASTER_TLS_VERSION_SYMBOL - 192)) | (1L << (MASTER_SSL_CERT_SYMBOL - 192)) | (1L << (MASTER_SSL_CIPHER_SYMBOL - 192)) | (1L << (MASTER_SSL_CRL_SYMBOL - 192)) | (1L << (MASTER_SSL_CRLPATH_SYMBOL - 192)) | (1L << (MASTER_SSL_KEY_SYMBOL - 192)) | (1L << (MASTER_AUTO_POSITION_SYMBOL - 192)) | (1L << (MAX_CONNECTIONS_PER_HOUR_SYMBOL - 192)) | (1L << (MAX_QUERIES_PER_HOUR_SYMBOL - 192)) | (1L << (MAX_SIZE_SYMBOL - 192)) | (1L << (MAX_UPDATES_PER_HOUR_SYMBOL - 192)) | (1L << (MAX_USER_CONNECTIONS_SYMBOL - 192)) | (1L << (MEDIUM_SYMBOL - 192)) | (1L << (MEMORY_SYMBOL - 192)) | (1L << (MERGE_SYMBOL - 192)) | (1L << (MESSAGE_TEXT_SYMBOL - 192)) | (1L << (MICROSECOND_SYMBOL - 192)) | (1L << (MIGRATE_SYMBOL - 192)) | (1L << (MINUTE_SYMBOL - 192)) | (1L << (MIN_ROWS_SYMBOL - 192)) | (1L << (MODIFY_SYMBOL - 192)) | (1L << (MODE_SYMBOL - 192)) | (1L << (MONTH_SYMBOL - 192)) | (1L << (MULTILINESTRING_SYMBOL - 192)) | (1L << (MULTIPOINT_SYMBOL - 192)) | (1L << (MULTIPOLYGON_SYMBOL - 192)) | (1L << (MUTEX_SYMBOL - 192)) | (1L << (MYSQL_ERRNO_SYMBOL - 192)) | (1L << (NAME_SYMBOL - 192)) | (1L << (NAMES_SYMBOL - 192)) | (1L << (NATIONAL_SYMBOL - 192)) | (1L << (NCHAR_SYMBOL - 192)) | (1L << (NDBCLUSTER_SYMBOL - 192)) | (1L << (NEVER_SYMBOL - 192)) | (1L << (NEXT_SYMBOL - 192)) | (1L << (NEW_SYMBOL - 192)) | (1L << (NO_WAIT_SYMBOL - 192)) | (1L << (NODEGROUP_SYMBOL - 192)) | (1L << (NUMBER_SYMBOL - 192)) | (1L << (NVARCHAR_SYMBOL - 192)) | (1L << (OFFSET_SYMBOL - 192)) | (1L << (ONE_SYMBOL - 192)) | (1L << (PACK_KEYS_SYMBOL - 192)) | (1L << (PAGE_SYMBOL - 192)) | (1L << (PARTIAL_SYMBOL - 192)) | (1L << (PARTITIONING_SYMBOL - 192)) | (1L << (PARTITIONS_SYMBOL - 192)) | (1L << (PASSWORD_SYMBOL - 192)) | (1L << (PHASE_SYMBOL - 192)) | (1L << (PLUGIN_DIR_SYMBOL - 192)) | (1L << (PLUGIN_SYMBOL - 192)) | (1L << (PLUGINS_SYMBOL - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (POINT_SYMBOL - 256)) | (1L << (POLYGON_SYMBOL - 256)) | (1L << (PRESERVE_SYMBOL - 256)) | (1L << (PREV_SYMBOL - 256)) | (1L << (PRIVILEGES_SYMBOL - 256)) | (1L << (PROCESSLIST_SYMBOL - 256)) | (1L << (PROFILE_SYMBOL - 256)) | (1L << (PROFILES_SYMBOL - 256)) | (1L << (QUARTER_SYMBOL - 256)) | (1L << (QUERY_SYMBOL - 256)) | (1L << (QUICK_SYMBOL - 256)) | (1L << (READ_ONLY_SYMBOL - 256)) | (1L << (REBUILD_SYMBOL - 256)) | (1L << (RECOVER_SYMBOL - 256)) | (1L << (REDO_BUFFER_SIZE_SYMBOL - 256)) | (1L << (REDUNDANT_SYMBOL - 256)) | (1L << (RELAY_SYMBOL - 256)) | (1L << (RELAYLOG_SYMBOL - 256)) | (1L << (RELAY_LOG_FILE_SYMBOL - 256)) | (1L << (RELAY_LOG_POS_SYMBOL - 256)) | (1L << (RELAY_THREAD_SYMBOL - 256)) | (1L << (REORGANIZE_SYMBOL - 256)) | (1L << (REPEATABLE_SYMBOL - 256)) | (1L << (REPLICATE_DO_DB_SYMBOL - 256)) | (1L << (REPLICATE_IGNORE_DB_SYMBOL - 256)) | (1L << (REPLICATE_DO_TABLE_SYMBOL - 256)) | (1L << (REPLICATE_IGNORE_TABLE_SYMBOL - 256)) | (1L << (REPLICATE_WILD_DO_TABLE_SYMBOL - 256)) | (1L << (REPLICATE_WILD_IGNORE_TABLE_SYMBOL - 256)) | (1L << (REPLICATE_REWRITE_DB_SYMBOL - 256)) | (1L << (RESUME_SYMBOL - 256)) | (1L << (RETURNED_SQLSTATE_SYMBOL - 256)) | (1L << (RETURNS_SYMBOL - 256)) | (1L << (REVERSE_SYMBOL - 256)) | (1L << (ROLLUP_SYMBOL - 256)) | (1L << (ROTATE_SYMBOL - 256)) | (1L << (ROUTINE_SYMBOL - 256)) | (1L << (ROW_COUNT_SYMBOL - 256)) | (1L << (ROW_FORMAT_SYMBOL - 256)) | (1L << (RTREE_SYMBOL - 256)) | (1L << (SCHEDULE_SYMBOL - 256)) | (1L << (SCHEMA_NAME_SYMBOL - 256)) | (1L << (SECOND_SYMBOL - 256)) | (1L << (SERIAL_SYMBOL - 256)) | (1L << (SERIALIZABLE_SYMBOL - 256)) | (1L << (SIMPLE_SYMBOL - 256)) | (1L << (SHARE_SYMBOL - 256)) | (1L << (SLOW_SYMBOL - 256)) | (1L << (SNAPSHOT_SYMBOL - 256)) | (1L << (SOUNDS_SYMBOL - 256)) | (1L << (SOURCE_SYMBOL - 256)) | (1L << (SQL_AFTER_GTIDS_SYMBOL - 256)) | (1L << (SQL_AFTER_MTS_GAPS_SYMBOL - 256)) | (1L << (SQL_BEFORE_GTIDS_SYMBOL - 256)) | (1L << (SQL_BUFFER_RESULT_SYMBOL - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (SQL_NO_CACHE_SYMBOL - 320)) | (1L << (SQL_THREAD_SYMBOL - 320)) | (1L << (STACKED_SYMBOL - 320)) | (1L << (STARTS_SYMBOL - 320)) | (1L << (STATS_AUTO_RECALC_SYMBOL - 320)) | (1L << (STATS_PERSISTENT_SYMBOL - 320)) | (1L << (STATS_SAMPLE_PAGES_SYMBOL - 320)) | (1L << (STATUS_SYMBOL - 320)) | (1L << (STORAGE_SYMBOL - 320)) | (1L << (STRING_SYMBOL - 320)) | (1L << (SUBCLASS_ORIGIN_SYMBOL - 320)) | (1L << (SUBDATE_SYMBOL - 320)) | (1L << (SUBJECT_SYMBOL - 320)) | (1L << (SUBPARTITION_SYMBOL - 320)) | (1L << (SUBPARTITIONS_SYMBOL - 320)) | (1L << (SUSPEND_SYMBOL - 320)) | (1L << (SWAPS_SYMBOL - 320)) | (1L << (SWITCHES_SYMBOL - 320)) | (1L << (TABLE_NAME_SYMBOL - 320)) | (1L << (TABLES_SYMBOL - 320)) | (1L << (TABLE_CHECKSUM_SYMBOL - 320)) | (1L << (TABLESPACE_SYMBOL - 320)) | (1L << (TEMPORARY_SYMBOL - 320)) | (1L << (TEMPTABLE_SYMBOL - 320)) | (1L << (TEXT_SYMBOL - 320)) | (1L << (THAN_SYMBOL - 320)) | (1L << (TRANSACTION_SYMBOL - 320)) | (1L << (TRIGGERS_SYMBOL - 320)) | (1L << (TIMESTAMP_SYMBOL - 320)) | (1L << (TIMESTAMP_ADD_SYMBOL - 320)) | (1L << (TIMESTAMP_DIFF_SYMBOL - 320)) | (1L << (TIME_SYMBOL - 320)) | (1L << (TYPES_SYMBOL - 320)) | (1L << (TYPE_SYMBOL - 320)) | (1L << (UNCOMMITTED_SYMBOL - 320)) | (1L << (UNDEFINED_SYMBOL - 320)) | (1L << (UNDO_BUFFER_SIZE_SYMBOL - 320)) | (1L << (UNDOFILE_SYMBOL - 320)) | (1L << (UNKNOWN_SYMBOL - 320)) | (1L << (UNTIL_SYMBOL - 320)) | (1L << (USER_RESOURCES_SYMBOL - 320)) | (1L << (USER_SYMBOL - 320)) | (1L << (USE_FRM_SYMBOL - 320)) | (1L << (VARIABLES_SYMBOL - 320)) | (1L << (VIEW_SYMBOL - 320)) | (1L << (VALUE_SYMBOL - 320)) | (1L << (WARNINGS_SYMBOL - 320)) | (1L << (WAIT_SYMBOL - 320)) | (1L << (WEEK_SYMBOL - 320)) | (1L << (WORK_SYMBOL - 320)) | (1L << (WEIGHT_STRING_SYMBOL - 320)) | (1L << (X509_SYMBOL - 320)) | (1L << (XID_SYMBOL - 320)) | (1L << (XML_SYMBOL - 320)) | (1L << (YEAR_SYMBOL - 320)))) != 0) || _la==EXCHANGE_SYMBOL || _la==EXPIRE_SYMBOL || _la==ONLY_SYMBOL || ((((_la - 670)) & ~0x3f) == 0 && ((1L << (_la - 670)) & ((1L << (VALIDATION_SYMBOL - 670)) | (1L << (WITHOUT_SYMBOL - 670)) | (1L << (ROLE_SYMBOL - 670)) | (1L << (ADMIN_SYMBOL - 670)) | (1L << (INVISIBLE_SYMBOL - 670)) | (1L << (VISIBLE_SYMBOL - 670)) | (1L << (COMPONENT_SYMBOL - 670)) | (1L << (SKIP_SYMBOL - 670)) | (1L << (LOCKED_SYMBOL - 670)) | (1L << (NOWAIT_SYMBOL - 670)) | (1L << (HISTOGRAM_SYMBOL - 670)) | (1L << (BUCKETS_SYMBOL - 670)) | (1L << (EXCLUDE_SYMBOL - 670)) | (1L << (FOLLOWING_SYMBOL - 670)) | (1L << (NULLS_SYMBOL - 670)) | (1L << (OTHERS_SYMBOL - 670)) | (1L << (PRECEDING_SYMBOL - 670)) | (1L << (RESPECT_SYMBOL - 670)) | (1L << (TIES_SYMBOL - 670)) | (1L << (UNBOUNDED_SYMBOL - 670)) | (1L << (NESTED_SYMBOL - 670)) | (1L << (ORDINALITY_SYMBOL - 670)))) != 0) || ((((_la - 734)) & ~0x3f) == 0 && ((1L << (_la - 734)) & ((1L << (PATH_SYMBOL - 734)) | (1L << (HISTORY_SYMBOL - 734)) | (1L << (REUSE_SYMBOL - 734)) | (1L << (SRID_SYMBOL - 734)) | (1L << (THREAD_PRIORITY_SYMBOL - 734)) | (1L << (VCPU_SYMBOL - 734)) | (1L << (MASTER_PUBLIC_KEY_PATH_SYMBOL - 734)) | (1L << (GET_MASTER_PUBLIC_KEY_SYMBOL - 734)) | (1L << (DEFINITION_SYMBOL - 734)) | (1L << (DESCRIPTION_SYMBOL - 734)) | (1L << (ORGANIZATION_SYMBOL - 734)) | (1L << (REFERENCE_SYMBOL - 734)) | (1L << (OPTIONAL_SYMBOL - 734)) | (1L << (SECONDARY_SYMBOL - 734)) | (1L << (SECONDARY_ENGINE_SYMBOL - 734)) | (1L << (SECONDARY_LOAD_SYMBOL - 734)) | (1L << (SECONDARY_UNLOAD_SYMBOL - 734)) | (1L << (ACTIVE_SYMBOL - 734)) | (1L << (INACTIVE_SYMBOL - 734)) | (1L << (RETAIN_SYMBOL - 734)) | (1L << (OLD_SYMBOL - 734)) | (1L << (NETWORK_NAMESPACE_SYMBOL - 734)) | (1L << (ENFORCED_SYMBOL - 734)) | (1L << (OJ_SYMBOL - 734)) | (1L << (MASTER_COMPRESSION_ALGORITHM_SYMBOL - 734)) | (1L << (MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL - 734)) | (1L << (PRIVILEGE_CHECKS_USER_SYMBOL - 734)) | (1L << (MASTER_TLS_CIPHERSUITES_SYMBOL - 734)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleKeywordContext extends ParserRuleContext {
		public RoleOrLabelKeywordContext roleOrLabelKeyword() {
			return getRuleContext(RoleOrLabelKeywordContext.class,0);
		}
		public RoleOrIdentifierKeywordContext roleOrIdentifierKeyword() {
			return getRuleContext(RoleOrIdentifierKeywordContext.class,0);
		}
		public IdentifierKeywordsUnambiguousContext identifierKeywordsUnambiguous() {
			return getRuleContext(IdentifierKeywordsUnambiguousContext.class,0);
		}
		public IdentifierKeywordsAmbiguous2LabelsContext identifierKeywordsAmbiguous2Labels() {
			return getRuleContext(IdentifierKeywordsAmbiguous2LabelsContext.class,0);
		}
		public IdentifierKeywordsAmbiguous4SystemVariablesContext identifierKeywordsAmbiguous4SystemVariables() {
			return getRuleContext(IdentifierKeywordsAmbiguous4SystemVariablesContext.class,0);
		}
		public RoleKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleKeyword; }
	}

	public final RoleKeywordContext roleKeyword() throws RecognitionException {
		RoleKeywordContext _localctx = new RoleKeywordContext(_ctx, getState());
		enterRule(_localctx, 1202, RULE_roleKeyword);
		try {
			setState(8332);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1115,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8322);
				if (!(serverVersion < 80017)) throw new FailedPredicateException(this, "serverVersion < 80017");
				setState(8325);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1113,_ctx) ) {
				case 1:
					{
					setState(8323);
					roleOrLabelKeyword();
					}
					break;
				case 2:
					{
					setState(8324);
					roleOrIdentifierKeyword();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8330);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ACCOUNT_SYMBOL:
				case ALWAYS_SYMBOL:
				case BACKUP_SYMBOL:
				case CLOSE_SYMBOL:
				case FORMAT_SYMBOL:
				case GROUP_REPLICATION_SYMBOL:
				case HOST_SYMBOL:
				case OPEN_SYMBOL:
				case OPTIONS_SYMBOL:
				case OWNER_SYMBOL:
				case PARSER_SYMBOL:
				case PORT_SYMBOL:
				case REMOVE_SYMBOL:
				case RESTORE_SYMBOL:
				case SECURITY_SYMBOL:
				case SERVER_SYMBOL:
				case SOCKET_SYMBOL:
				case SONAME_SYMBOL:
				case UPGRADE_SYMBOL:
				case WRAPPER_SYMBOL:
				case ACTION_SYMBOL:
				case ADDDATE_SYMBOL:
				case AFTER_SYMBOL:
				case AGAINST_SYMBOL:
				case AGGREGATE_SYMBOL:
				case ALGORITHM_SYMBOL:
				case ANY_SYMBOL:
				case AT_SYMBOL:
				case AUTO_INCREMENT_SYMBOL:
				case AUTOEXTEND_SIZE_SYMBOL:
				case AVG_ROW_LENGTH_SYMBOL:
				case AVG_SYMBOL:
				case BINLOG_SYMBOL:
				case BIT_SYMBOL:
				case BLOCK_SYMBOL:
				case BOOL_SYMBOL:
				case BOOLEAN_SYMBOL:
				case BTREE_SYMBOL:
				case CASCADED_SYMBOL:
				case CATALOG_NAME_SYMBOL:
				case CHAIN_SYMBOL:
				case CHANGED_SYMBOL:
				case CHANNEL_SYMBOL:
				case CIPHER_SYMBOL:
				case CLIENT_SYMBOL:
				case CLASS_ORIGIN_SYMBOL:
				case COALESCE_SYMBOL:
				case CODE_SYMBOL:
				case COLLATION_SYMBOL:
				case COLUMN_NAME_SYMBOL:
				case COLUMN_FORMAT_SYMBOL:
				case COLUMNS_SYMBOL:
				case COMMITTED_SYMBOL:
				case COMPACT_SYMBOL:
				case COMPLETION_SYMBOL:
				case COMPRESSED_SYMBOL:
				case COMPRESSION_SYMBOL:
				case ENCRYPTION_SYMBOL:
				case CONCURRENT_SYMBOL:
				case CONNECTION_SYMBOL:
				case CONSISTENT_SYMBOL:
				case CONSTRAINT_CATALOG_SYMBOL:
				case CONSTRAINT_SCHEMA_SYMBOL:
				case CONSTRAINT_NAME_SYMBOL:
				case CONTEXT_SYMBOL:
				case CPU_SYMBOL:
				case CURRENT_SYMBOL:
				case CURSOR_NAME_SYMBOL:
				case DATA_SYMBOL:
				case DATAFILE_SYMBOL:
				case DATETIME_SYMBOL:
				case DATE_SYMBOL:
				case DAY_SYMBOL:
				case DEFAULT_AUTH_SYMBOL:
				case DEFINER_SYMBOL:
				case DELAY_KEY_WRITE_SYMBOL:
				case DIAGNOSTICS_SYMBOL:
				case DIRECTORY_SYMBOL:
				case DISABLE_SYMBOL:
				case DISCARD_SYMBOL:
				case DISK_SYMBOL:
				case DUMPFILE_SYMBOL:
				case DUPLICATE_SYMBOL:
				case DYNAMIC_SYMBOL:
				case ENDS_SYMBOL:
				case ENUM_SYMBOL:
				case ENGINE_SYMBOL:
				case ENGINES_SYMBOL:
				case ERROR_SYMBOL:
				case ERRORS_SYMBOL:
				case ESCAPE_SYMBOL:
				case EVENTS_SYMBOL:
				case EVERY_SYMBOL:
				case EXPANSION_SYMBOL:
				case EXPORT_SYMBOL:
				case EXTENDED_SYMBOL:
				case EXTENT_SIZE_SYMBOL:
				case FAULTS_SYMBOL:
				case FAST_SYMBOL:
				case FOUND_SYMBOL:
				case ENABLE_SYMBOL:
				case FULL_SYMBOL:
				case FILE_BLOCK_SIZE_SYMBOL:
				case FILTER_SYMBOL:
				case FIRST_SYMBOL:
				case FIXED_SYMBOL:
				case GENERAL_SYMBOL:
				case GEOMETRY_SYMBOL:
				case GEOMETRYCOLLECTION_SYMBOL:
				case GET_FORMAT_SYMBOL:
				case GRANTS_SYMBOL:
				case HASH_SYMBOL:
				case HOSTS_SYMBOL:
				case HOUR_SYMBOL:
				case IDENTIFIED_SYMBOL:
				case IGNORE_SERVER_IDS_SYMBOL:
				case INVOKER_SYMBOL:
				case INDEXES_SYMBOL:
				case INITIAL_SIZE_SYMBOL:
				case INSTANCE_SYMBOL:
				case IO_SYMBOL:
				case IPC_SYMBOL:
				case ISOLATION_SYMBOL:
				case ISSUER_SYMBOL:
				case INSERT_METHOD_SYMBOL:
				case JSON_SYMBOL:
				case KEY_BLOCK_SIZE_SYMBOL:
				case LAST_SYMBOL:
				case LEAVES_SYMBOL:
				case LESS_SYMBOL:
				case LEVEL_SYMBOL:
				case LINESTRING_SYMBOL:
				case LIST_SYMBOL:
				case LOCKS_SYMBOL:
				case LOGFILE_SYMBOL:
				case LOGS_SYMBOL:
				case MAX_ROWS_SYMBOL:
				case MASTER_SYMBOL:
				case MASTER_HEARTBEAT_PERIOD_SYMBOL:
				case MASTER_HOST_SYMBOL:
				case MASTER_PORT_SYMBOL:
				case MASTER_LOG_FILE_SYMBOL:
				case MASTER_LOG_POS_SYMBOL:
				case MASTER_USER_SYMBOL:
				case MASTER_PASSWORD_SYMBOL:
				case MASTER_SERVER_ID_SYMBOL:
				case MASTER_CONNECT_RETRY_SYMBOL:
				case MASTER_RETRY_COUNT_SYMBOL:
				case MASTER_DELAY_SYMBOL:
				case MASTER_SSL_SYMBOL:
				case MASTER_SSL_CA_SYMBOL:
				case MASTER_SSL_CAPATH_SYMBOL:
				case MASTER_TLS_VERSION_SYMBOL:
				case MASTER_SSL_CERT_SYMBOL:
				case MASTER_SSL_CIPHER_SYMBOL:
				case MASTER_SSL_CRL_SYMBOL:
				case MASTER_SSL_CRLPATH_SYMBOL:
				case MASTER_SSL_KEY_SYMBOL:
				case MASTER_AUTO_POSITION_SYMBOL:
				case MAX_CONNECTIONS_PER_HOUR_SYMBOL:
				case MAX_QUERIES_PER_HOUR_SYMBOL:
				case MAX_SIZE_SYMBOL:
				case MAX_UPDATES_PER_HOUR_SYMBOL:
				case MAX_USER_CONNECTIONS_SYMBOL:
				case MEDIUM_SYMBOL:
				case MEMORY_SYMBOL:
				case MERGE_SYMBOL:
				case MESSAGE_TEXT_SYMBOL:
				case MICROSECOND_SYMBOL:
				case MIGRATE_SYMBOL:
				case MINUTE_SYMBOL:
				case MIN_ROWS_SYMBOL:
				case MODIFY_SYMBOL:
				case MODE_SYMBOL:
				case MONTH_SYMBOL:
				case MULTILINESTRING_SYMBOL:
				case MULTIPOINT_SYMBOL:
				case MULTIPOLYGON_SYMBOL:
				case MUTEX_SYMBOL:
				case MYSQL_ERRNO_SYMBOL:
				case NAME_SYMBOL:
				case NAMES_SYMBOL:
				case NATIONAL_SYMBOL:
				case NCHAR_SYMBOL:
				case NDBCLUSTER_SYMBOL:
				case NEVER_SYMBOL:
				case NEXT_SYMBOL:
				case NEW_SYMBOL:
				case NO_WAIT_SYMBOL:
				case NODEGROUP_SYMBOL:
				case NUMBER_SYMBOL:
				case NVARCHAR_SYMBOL:
				case OFFSET_SYMBOL:
				case ONE_SYMBOL:
				case PACK_KEYS_SYMBOL:
				case PAGE_SYMBOL:
				case PARTIAL_SYMBOL:
				case PARTITIONING_SYMBOL:
				case PARTITIONS_SYMBOL:
				case PASSWORD_SYMBOL:
				case PHASE_SYMBOL:
				case PLUGIN_DIR_SYMBOL:
				case PLUGIN_SYMBOL:
				case PLUGINS_SYMBOL:
				case POINT_SYMBOL:
				case POLYGON_SYMBOL:
				case PRESERVE_SYMBOL:
				case PREV_SYMBOL:
				case PRIVILEGES_SYMBOL:
				case PROCESSLIST_SYMBOL:
				case PROFILE_SYMBOL:
				case PROFILES_SYMBOL:
				case QUARTER_SYMBOL:
				case QUERY_SYMBOL:
				case QUICK_SYMBOL:
				case READ_ONLY_SYMBOL:
				case REBUILD_SYMBOL:
				case RECOVER_SYMBOL:
				case REDO_BUFFER_SIZE_SYMBOL:
				case REDUNDANT_SYMBOL:
				case RELAY_SYMBOL:
				case RELAYLOG_SYMBOL:
				case RELAY_LOG_FILE_SYMBOL:
				case RELAY_LOG_POS_SYMBOL:
				case RELAY_THREAD_SYMBOL:
				case REORGANIZE_SYMBOL:
				case REPEATABLE_SYMBOL:
				case REPLICATE_DO_DB_SYMBOL:
				case REPLICATE_IGNORE_DB_SYMBOL:
				case REPLICATE_DO_TABLE_SYMBOL:
				case REPLICATE_IGNORE_TABLE_SYMBOL:
				case REPLICATE_WILD_DO_TABLE_SYMBOL:
				case REPLICATE_WILD_IGNORE_TABLE_SYMBOL:
				case REPLICATE_REWRITE_DB_SYMBOL:
				case RESUME_SYMBOL:
				case RETURNED_SQLSTATE_SYMBOL:
				case RETURNS_SYMBOL:
				case REVERSE_SYMBOL:
				case ROLLUP_SYMBOL:
				case ROTATE_SYMBOL:
				case ROUTINE_SYMBOL:
				case ROW_COUNT_SYMBOL:
				case ROW_FORMAT_SYMBOL:
				case RTREE_SYMBOL:
				case SCHEDULE_SYMBOL:
				case SCHEMA_NAME_SYMBOL:
				case SECOND_SYMBOL:
				case SERIAL_SYMBOL:
				case SERIALIZABLE_SYMBOL:
				case SIMPLE_SYMBOL:
				case SHARE_SYMBOL:
				case SLOW_SYMBOL:
				case SNAPSHOT_SYMBOL:
				case SOUNDS_SYMBOL:
				case SOURCE_SYMBOL:
				case SQL_AFTER_GTIDS_SYMBOL:
				case SQL_AFTER_MTS_GAPS_SYMBOL:
				case SQL_BEFORE_GTIDS_SYMBOL:
				case SQL_BUFFER_RESULT_SYMBOL:
				case SQL_NO_CACHE_SYMBOL:
				case SQL_THREAD_SYMBOL:
				case STACKED_SYMBOL:
				case STARTS_SYMBOL:
				case STATS_AUTO_RECALC_SYMBOL:
				case STATS_PERSISTENT_SYMBOL:
				case STATS_SAMPLE_PAGES_SYMBOL:
				case STATUS_SYMBOL:
				case STORAGE_SYMBOL:
				case STRING_SYMBOL:
				case SUBCLASS_ORIGIN_SYMBOL:
				case SUBDATE_SYMBOL:
				case SUBJECT_SYMBOL:
				case SUBPARTITION_SYMBOL:
				case SUBPARTITIONS_SYMBOL:
				case SUSPEND_SYMBOL:
				case SWAPS_SYMBOL:
				case SWITCHES_SYMBOL:
				case TABLE_NAME_SYMBOL:
				case TABLES_SYMBOL:
				case TABLE_CHECKSUM_SYMBOL:
				case TABLESPACE_SYMBOL:
				case TEMPORARY_SYMBOL:
				case TEMPTABLE_SYMBOL:
				case TEXT_SYMBOL:
				case THAN_SYMBOL:
				case TRANSACTION_SYMBOL:
				case TRIGGERS_SYMBOL:
				case TIMESTAMP_SYMBOL:
				case TIMESTAMP_ADD_SYMBOL:
				case TIMESTAMP_DIFF_SYMBOL:
				case TIME_SYMBOL:
				case TYPES_SYMBOL:
				case TYPE_SYMBOL:
				case UNCOMMITTED_SYMBOL:
				case UNDEFINED_SYMBOL:
				case UNDO_BUFFER_SIZE_SYMBOL:
				case UNDOFILE_SYMBOL:
				case UNKNOWN_SYMBOL:
				case UNTIL_SYMBOL:
				case USER_RESOURCES_SYMBOL:
				case USER_SYMBOL:
				case USE_FRM_SYMBOL:
				case VARIABLES_SYMBOL:
				case VIEW_SYMBOL:
				case VALUE_SYMBOL:
				case WARNINGS_SYMBOL:
				case WAIT_SYMBOL:
				case WEEK_SYMBOL:
				case WORK_SYMBOL:
				case WEIGHT_STRING_SYMBOL:
				case X509_SYMBOL:
				case XID_SYMBOL:
				case XML_SYMBOL:
				case YEAR_SYMBOL:
				case EXCHANGE_SYMBOL:
				case EXPIRE_SYMBOL:
				case ONLY_SYMBOL:
				case VALIDATION_SYMBOL:
				case WITHOUT_SYMBOL:
				case ROLE_SYMBOL:
				case ADMIN_SYMBOL:
				case INVISIBLE_SYMBOL:
				case VISIBLE_SYMBOL:
				case COMPONENT_SYMBOL:
				case SKIP_SYMBOL:
				case LOCKED_SYMBOL:
				case NOWAIT_SYMBOL:
				case HISTOGRAM_SYMBOL:
				case BUCKETS_SYMBOL:
				case EXCLUDE_SYMBOL:
				case FOLLOWING_SYMBOL:
				case NULLS_SYMBOL:
				case OTHERS_SYMBOL:
				case PRECEDING_SYMBOL:
				case RESPECT_SYMBOL:
				case TIES_SYMBOL:
				case UNBOUNDED_SYMBOL:
				case NESTED_SYMBOL:
				case ORDINALITY_SYMBOL:
				case PATH_SYMBOL:
				case HISTORY_SYMBOL:
				case REUSE_SYMBOL:
				case SRID_SYMBOL:
				case THREAD_PRIORITY_SYMBOL:
				case VCPU_SYMBOL:
				case MASTER_PUBLIC_KEY_PATH_SYMBOL:
				case GET_MASTER_PUBLIC_KEY_SYMBOL:
				case DEFINITION_SYMBOL:
				case DESCRIPTION_SYMBOL:
				case ORGANIZATION_SYMBOL:
				case REFERENCE_SYMBOL:
				case OPTIONAL_SYMBOL:
				case SECONDARY_SYMBOL:
				case SECONDARY_ENGINE_SYMBOL:
				case SECONDARY_LOAD_SYMBOL:
				case SECONDARY_UNLOAD_SYMBOL:
				case ACTIVE_SYMBOL:
				case INACTIVE_SYMBOL:
				case RETAIN_SYMBOL:
				case OLD_SYMBOL:
				case NETWORK_NAMESPACE_SYMBOL:
				case ENFORCED_SYMBOL:
				case OJ_SYMBOL:
				case MASTER_COMPRESSION_ALGORITHM_SYMBOL:
				case MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL:
				case PRIVILEGE_CHECKS_USER_SYMBOL:
				case MASTER_TLS_CIPHERSUITES_SYMBOL:
					{
					setState(8327);
					identifierKeywordsUnambiguous();
					}
					break;
				case ASCII_SYMBOL:
				case BEGIN_SYMBOL:
				case BYTE_SYMBOL:
				case CACHE_SYMBOL:
				case CHARSET_SYMBOL:
				case CHECKSUM_SYMBOL:
				case COMMENT_SYMBOL:
				case COMMIT_SYMBOL:
				case CONTAINS_SYMBOL:
				case DEALLOCATE_SYMBOL:
				case DO_SYMBOL:
				case END_SYMBOL:
				case FLUSH_SYMBOL:
				case FOLLOWS_SYMBOL:
				case HANDLER_SYMBOL:
				case HELP_SYMBOL:
				case INSTALL_SYMBOL:
				case LANGUAGE_SYMBOL:
				case NO_SYMBOL:
				case PRECEDES_SYMBOL:
				case PREPARE_SYMBOL:
				case REPAIR_SYMBOL:
				case RESET_SYMBOL:
				case ROLLBACK_SYMBOL:
				case SAVEPOINT_SYMBOL:
				case SIGNED_SYMBOL:
				case SLAVE_SYMBOL:
				case START_SYMBOL:
				case STOP_SYMBOL:
				case TRUNCATE_SYMBOL:
				case UNICODE_SYMBOL:
				case UNINSTALL_SYMBOL:
				case XA_SYMBOL:
				case IMPORT_SYMBOL:
				case CLONE_SYMBOL:
					{
					setState(8328);
					identifierKeywordsAmbiguous2Labels();
					}
					break;
				case GLOBAL_SYMBOL:
				case LOCAL_SYMBOL:
				case SESSION_SYMBOL:
				case PERSIST_SYMBOL:
				case PERSIST_ONLY_SYMBOL:
					{
					setState(8329);
					identifierKeywordsAmbiguous4SystemVariables();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LValueKeywordContext extends ParserRuleContext {
		public IdentifierKeywordsUnambiguousContext identifierKeywordsUnambiguous() {
			return getRuleContext(IdentifierKeywordsUnambiguousContext.class,0);
		}
		public IdentifierKeywordsAmbiguous1RolesAndLabelsContext identifierKeywordsAmbiguous1RolesAndLabels() {
			return getRuleContext(IdentifierKeywordsAmbiguous1RolesAndLabelsContext.class,0);
		}
		public IdentifierKeywordsAmbiguous2LabelsContext identifierKeywordsAmbiguous2Labels() {
			return getRuleContext(IdentifierKeywordsAmbiguous2LabelsContext.class,0);
		}
		public IdentifierKeywordsAmbiguous3RolesContext identifierKeywordsAmbiguous3Roles() {
			return getRuleContext(IdentifierKeywordsAmbiguous3RolesContext.class,0);
		}
		public LValueKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lValueKeyword; }
	}

	public final LValueKeywordContext lValueKeyword() throws RecognitionException {
		LValueKeywordContext _localctx = new LValueKeywordContext(_ctx, getState());
		enterRule(_localctx, 1204, RULE_lValueKeyword);
		try {
			setState(8338);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ACCOUNT_SYMBOL:
			case ALWAYS_SYMBOL:
			case BACKUP_SYMBOL:
			case CLOSE_SYMBOL:
			case FORMAT_SYMBOL:
			case GROUP_REPLICATION_SYMBOL:
			case HOST_SYMBOL:
			case OPEN_SYMBOL:
			case OPTIONS_SYMBOL:
			case OWNER_SYMBOL:
			case PARSER_SYMBOL:
			case PORT_SYMBOL:
			case REMOVE_SYMBOL:
			case RESTORE_SYMBOL:
			case SECURITY_SYMBOL:
			case SERVER_SYMBOL:
			case SOCKET_SYMBOL:
			case SONAME_SYMBOL:
			case UPGRADE_SYMBOL:
			case WRAPPER_SYMBOL:
			case ACTION_SYMBOL:
			case ADDDATE_SYMBOL:
			case AFTER_SYMBOL:
			case AGAINST_SYMBOL:
			case AGGREGATE_SYMBOL:
			case ALGORITHM_SYMBOL:
			case ANY_SYMBOL:
			case AT_SYMBOL:
			case AUTO_INCREMENT_SYMBOL:
			case AUTOEXTEND_SIZE_SYMBOL:
			case AVG_ROW_LENGTH_SYMBOL:
			case AVG_SYMBOL:
			case BINLOG_SYMBOL:
			case BIT_SYMBOL:
			case BLOCK_SYMBOL:
			case BOOL_SYMBOL:
			case BOOLEAN_SYMBOL:
			case BTREE_SYMBOL:
			case CASCADED_SYMBOL:
			case CATALOG_NAME_SYMBOL:
			case CHAIN_SYMBOL:
			case CHANGED_SYMBOL:
			case CHANNEL_SYMBOL:
			case CIPHER_SYMBOL:
			case CLIENT_SYMBOL:
			case CLASS_ORIGIN_SYMBOL:
			case COALESCE_SYMBOL:
			case CODE_SYMBOL:
			case COLLATION_SYMBOL:
			case COLUMN_NAME_SYMBOL:
			case COLUMN_FORMAT_SYMBOL:
			case COLUMNS_SYMBOL:
			case COMMITTED_SYMBOL:
			case COMPACT_SYMBOL:
			case COMPLETION_SYMBOL:
			case COMPRESSED_SYMBOL:
			case COMPRESSION_SYMBOL:
			case ENCRYPTION_SYMBOL:
			case CONCURRENT_SYMBOL:
			case CONNECTION_SYMBOL:
			case CONSISTENT_SYMBOL:
			case CONSTRAINT_CATALOG_SYMBOL:
			case CONSTRAINT_SCHEMA_SYMBOL:
			case CONSTRAINT_NAME_SYMBOL:
			case CONTEXT_SYMBOL:
			case CPU_SYMBOL:
			case CURRENT_SYMBOL:
			case CURSOR_NAME_SYMBOL:
			case DATA_SYMBOL:
			case DATAFILE_SYMBOL:
			case DATETIME_SYMBOL:
			case DATE_SYMBOL:
			case DAY_SYMBOL:
			case DEFAULT_AUTH_SYMBOL:
			case DEFINER_SYMBOL:
			case DELAY_KEY_WRITE_SYMBOL:
			case DIAGNOSTICS_SYMBOL:
			case DIRECTORY_SYMBOL:
			case DISABLE_SYMBOL:
			case DISCARD_SYMBOL:
			case DISK_SYMBOL:
			case DUMPFILE_SYMBOL:
			case DUPLICATE_SYMBOL:
			case DYNAMIC_SYMBOL:
			case ENDS_SYMBOL:
			case ENUM_SYMBOL:
			case ENGINE_SYMBOL:
			case ENGINES_SYMBOL:
			case ERROR_SYMBOL:
			case ERRORS_SYMBOL:
			case ESCAPE_SYMBOL:
			case EVENTS_SYMBOL:
			case EVERY_SYMBOL:
			case EXPANSION_SYMBOL:
			case EXPORT_SYMBOL:
			case EXTENDED_SYMBOL:
			case EXTENT_SIZE_SYMBOL:
			case FAULTS_SYMBOL:
			case FAST_SYMBOL:
			case FOUND_SYMBOL:
			case ENABLE_SYMBOL:
			case FULL_SYMBOL:
			case FILE_BLOCK_SIZE_SYMBOL:
			case FILTER_SYMBOL:
			case FIRST_SYMBOL:
			case FIXED_SYMBOL:
			case GENERAL_SYMBOL:
			case GEOMETRY_SYMBOL:
			case GEOMETRYCOLLECTION_SYMBOL:
			case GET_FORMAT_SYMBOL:
			case GRANTS_SYMBOL:
			case HASH_SYMBOL:
			case HOSTS_SYMBOL:
			case HOUR_SYMBOL:
			case IDENTIFIED_SYMBOL:
			case IGNORE_SERVER_IDS_SYMBOL:
			case INVOKER_SYMBOL:
			case INDEXES_SYMBOL:
			case INITIAL_SIZE_SYMBOL:
			case INSTANCE_SYMBOL:
			case IO_SYMBOL:
			case IPC_SYMBOL:
			case ISOLATION_SYMBOL:
			case ISSUER_SYMBOL:
			case INSERT_METHOD_SYMBOL:
			case JSON_SYMBOL:
			case KEY_BLOCK_SIZE_SYMBOL:
			case LAST_SYMBOL:
			case LEAVES_SYMBOL:
			case LESS_SYMBOL:
			case LEVEL_SYMBOL:
			case LINESTRING_SYMBOL:
			case LIST_SYMBOL:
			case LOCKS_SYMBOL:
			case LOGFILE_SYMBOL:
			case LOGS_SYMBOL:
			case MAX_ROWS_SYMBOL:
			case MASTER_SYMBOL:
			case MASTER_HEARTBEAT_PERIOD_SYMBOL:
			case MASTER_HOST_SYMBOL:
			case MASTER_PORT_SYMBOL:
			case MASTER_LOG_FILE_SYMBOL:
			case MASTER_LOG_POS_SYMBOL:
			case MASTER_USER_SYMBOL:
			case MASTER_PASSWORD_SYMBOL:
			case MASTER_SERVER_ID_SYMBOL:
			case MASTER_CONNECT_RETRY_SYMBOL:
			case MASTER_RETRY_COUNT_SYMBOL:
			case MASTER_DELAY_SYMBOL:
			case MASTER_SSL_SYMBOL:
			case MASTER_SSL_CA_SYMBOL:
			case MASTER_SSL_CAPATH_SYMBOL:
			case MASTER_TLS_VERSION_SYMBOL:
			case MASTER_SSL_CERT_SYMBOL:
			case MASTER_SSL_CIPHER_SYMBOL:
			case MASTER_SSL_CRL_SYMBOL:
			case MASTER_SSL_CRLPATH_SYMBOL:
			case MASTER_SSL_KEY_SYMBOL:
			case MASTER_AUTO_POSITION_SYMBOL:
			case MAX_CONNECTIONS_PER_HOUR_SYMBOL:
			case MAX_QUERIES_PER_HOUR_SYMBOL:
			case MAX_SIZE_SYMBOL:
			case MAX_UPDATES_PER_HOUR_SYMBOL:
			case MAX_USER_CONNECTIONS_SYMBOL:
			case MEDIUM_SYMBOL:
			case MEMORY_SYMBOL:
			case MERGE_SYMBOL:
			case MESSAGE_TEXT_SYMBOL:
			case MICROSECOND_SYMBOL:
			case MIGRATE_SYMBOL:
			case MINUTE_SYMBOL:
			case MIN_ROWS_SYMBOL:
			case MODIFY_SYMBOL:
			case MODE_SYMBOL:
			case MONTH_SYMBOL:
			case MULTILINESTRING_SYMBOL:
			case MULTIPOINT_SYMBOL:
			case MULTIPOLYGON_SYMBOL:
			case MUTEX_SYMBOL:
			case MYSQL_ERRNO_SYMBOL:
			case NAME_SYMBOL:
			case NAMES_SYMBOL:
			case NATIONAL_SYMBOL:
			case NCHAR_SYMBOL:
			case NDBCLUSTER_SYMBOL:
			case NEVER_SYMBOL:
			case NEXT_SYMBOL:
			case NEW_SYMBOL:
			case NO_WAIT_SYMBOL:
			case NODEGROUP_SYMBOL:
			case NUMBER_SYMBOL:
			case NVARCHAR_SYMBOL:
			case OFFSET_SYMBOL:
			case ONE_SYMBOL:
			case PACK_KEYS_SYMBOL:
			case PAGE_SYMBOL:
			case PARTIAL_SYMBOL:
			case PARTITIONING_SYMBOL:
			case PARTITIONS_SYMBOL:
			case PASSWORD_SYMBOL:
			case PHASE_SYMBOL:
			case PLUGIN_DIR_SYMBOL:
			case PLUGIN_SYMBOL:
			case PLUGINS_SYMBOL:
			case POINT_SYMBOL:
			case POLYGON_SYMBOL:
			case PRESERVE_SYMBOL:
			case PREV_SYMBOL:
			case PRIVILEGES_SYMBOL:
			case PROCESSLIST_SYMBOL:
			case PROFILE_SYMBOL:
			case PROFILES_SYMBOL:
			case QUARTER_SYMBOL:
			case QUERY_SYMBOL:
			case QUICK_SYMBOL:
			case READ_ONLY_SYMBOL:
			case REBUILD_SYMBOL:
			case RECOVER_SYMBOL:
			case REDO_BUFFER_SIZE_SYMBOL:
			case REDUNDANT_SYMBOL:
			case RELAY_SYMBOL:
			case RELAYLOG_SYMBOL:
			case RELAY_LOG_FILE_SYMBOL:
			case RELAY_LOG_POS_SYMBOL:
			case RELAY_THREAD_SYMBOL:
			case REORGANIZE_SYMBOL:
			case REPEATABLE_SYMBOL:
			case REPLICATE_DO_DB_SYMBOL:
			case REPLICATE_IGNORE_DB_SYMBOL:
			case REPLICATE_DO_TABLE_SYMBOL:
			case REPLICATE_IGNORE_TABLE_SYMBOL:
			case REPLICATE_WILD_DO_TABLE_SYMBOL:
			case REPLICATE_WILD_IGNORE_TABLE_SYMBOL:
			case REPLICATE_REWRITE_DB_SYMBOL:
			case RESUME_SYMBOL:
			case RETURNED_SQLSTATE_SYMBOL:
			case RETURNS_SYMBOL:
			case REVERSE_SYMBOL:
			case ROLLUP_SYMBOL:
			case ROTATE_SYMBOL:
			case ROUTINE_SYMBOL:
			case ROW_COUNT_SYMBOL:
			case ROW_FORMAT_SYMBOL:
			case RTREE_SYMBOL:
			case SCHEDULE_SYMBOL:
			case SCHEMA_NAME_SYMBOL:
			case SECOND_SYMBOL:
			case SERIAL_SYMBOL:
			case SERIALIZABLE_SYMBOL:
			case SIMPLE_SYMBOL:
			case SHARE_SYMBOL:
			case SLOW_SYMBOL:
			case SNAPSHOT_SYMBOL:
			case SOUNDS_SYMBOL:
			case SOURCE_SYMBOL:
			case SQL_AFTER_GTIDS_SYMBOL:
			case SQL_AFTER_MTS_GAPS_SYMBOL:
			case SQL_BEFORE_GTIDS_SYMBOL:
			case SQL_BUFFER_RESULT_SYMBOL:
			case SQL_NO_CACHE_SYMBOL:
			case SQL_THREAD_SYMBOL:
			case STACKED_SYMBOL:
			case STARTS_SYMBOL:
			case STATS_AUTO_RECALC_SYMBOL:
			case STATS_PERSISTENT_SYMBOL:
			case STATS_SAMPLE_PAGES_SYMBOL:
			case STATUS_SYMBOL:
			case STORAGE_SYMBOL:
			case STRING_SYMBOL:
			case SUBCLASS_ORIGIN_SYMBOL:
			case SUBDATE_SYMBOL:
			case SUBJECT_SYMBOL:
			case SUBPARTITION_SYMBOL:
			case SUBPARTITIONS_SYMBOL:
			case SUSPEND_SYMBOL:
			case SWAPS_SYMBOL:
			case SWITCHES_SYMBOL:
			case TABLE_NAME_SYMBOL:
			case TABLES_SYMBOL:
			case TABLE_CHECKSUM_SYMBOL:
			case TABLESPACE_SYMBOL:
			case TEMPORARY_SYMBOL:
			case TEMPTABLE_SYMBOL:
			case TEXT_SYMBOL:
			case THAN_SYMBOL:
			case TRANSACTION_SYMBOL:
			case TRIGGERS_SYMBOL:
			case TIMESTAMP_SYMBOL:
			case TIMESTAMP_ADD_SYMBOL:
			case TIMESTAMP_DIFF_SYMBOL:
			case TIME_SYMBOL:
			case TYPES_SYMBOL:
			case TYPE_SYMBOL:
			case UNCOMMITTED_SYMBOL:
			case UNDEFINED_SYMBOL:
			case UNDO_BUFFER_SIZE_SYMBOL:
			case UNDOFILE_SYMBOL:
			case UNKNOWN_SYMBOL:
			case UNTIL_SYMBOL:
			case USER_RESOURCES_SYMBOL:
			case USER_SYMBOL:
			case USE_FRM_SYMBOL:
			case VARIABLES_SYMBOL:
			case VIEW_SYMBOL:
			case VALUE_SYMBOL:
			case WARNINGS_SYMBOL:
			case WAIT_SYMBOL:
			case WEEK_SYMBOL:
			case WORK_SYMBOL:
			case WEIGHT_STRING_SYMBOL:
			case X509_SYMBOL:
			case XID_SYMBOL:
			case XML_SYMBOL:
			case YEAR_SYMBOL:
			case EXCHANGE_SYMBOL:
			case EXPIRE_SYMBOL:
			case ONLY_SYMBOL:
			case VALIDATION_SYMBOL:
			case WITHOUT_SYMBOL:
			case ROLE_SYMBOL:
			case ADMIN_SYMBOL:
			case INVISIBLE_SYMBOL:
			case VISIBLE_SYMBOL:
			case COMPONENT_SYMBOL:
			case SKIP_SYMBOL:
			case LOCKED_SYMBOL:
			case NOWAIT_SYMBOL:
			case HISTOGRAM_SYMBOL:
			case BUCKETS_SYMBOL:
			case EXCLUDE_SYMBOL:
			case FOLLOWING_SYMBOL:
			case NULLS_SYMBOL:
			case OTHERS_SYMBOL:
			case PRECEDING_SYMBOL:
			case RESPECT_SYMBOL:
			case TIES_SYMBOL:
			case UNBOUNDED_SYMBOL:
			case NESTED_SYMBOL:
			case ORDINALITY_SYMBOL:
			case PATH_SYMBOL:
			case HISTORY_SYMBOL:
			case REUSE_SYMBOL:
			case SRID_SYMBOL:
			case THREAD_PRIORITY_SYMBOL:
			case VCPU_SYMBOL:
			case MASTER_PUBLIC_KEY_PATH_SYMBOL:
			case GET_MASTER_PUBLIC_KEY_SYMBOL:
			case DEFINITION_SYMBOL:
			case DESCRIPTION_SYMBOL:
			case ORGANIZATION_SYMBOL:
			case REFERENCE_SYMBOL:
			case OPTIONAL_SYMBOL:
			case SECONDARY_SYMBOL:
			case SECONDARY_ENGINE_SYMBOL:
			case SECONDARY_LOAD_SYMBOL:
			case SECONDARY_UNLOAD_SYMBOL:
			case ACTIVE_SYMBOL:
			case INACTIVE_SYMBOL:
			case RETAIN_SYMBOL:
			case OLD_SYMBOL:
			case NETWORK_NAMESPACE_SYMBOL:
			case ENFORCED_SYMBOL:
			case OJ_SYMBOL:
			case MASTER_COMPRESSION_ALGORITHM_SYMBOL:
			case MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL:
			case PRIVILEGE_CHECKS_USER_SYMBOL:
			case MASTER_TLS_CIPHERSUITES_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(8334);
				identifierKeywordsUnambiguous();
				}
				break;
			case EXECUTE_SYMBOL:
			case SHUTDOWN_SYMBOL:
			case RESTART_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(8335);
				identifierKeywordsAmbiguous1RolesAndLabels();
				}
				break;
			case ASCII_SYMBOL:
			case BEGIN_SYMBOL:
			case BYTE_SYMBOL:
			case CACHE_SYMBOL:
			case CHARSET_SYMBOL:
			case CHECKSUM_SYMBOL:
			case COMMENT_SYMBOL:
			case COMMIT_SYMBOL:
			case CONTAINS_SYMBOL:
			case DEALLOCATE_SYMBOL:
			case DO_SYMBOL:
			case END_SYMBOL:
			case FLUSH_SYMBOL:
			case FOLLOWS_SYMBOL:
			case HANDLER_SYMBOL:
			case HELP_SYMBOL:
			case INSTALL_SYMBOL:
			case LANGUAGE_SYMBOL:
			case NO_SYMBOL:
			case PRECEDES_SYMBOL:
			case PREPARE_SYMBOL:
			case REPAIR_SYMBOL:
			case RESET_SYMBOL:
			case ROLLBACK_SYMBOL:
			case SAVEPOINT_SYMBOL:
			case SIGNED_SYMBOL:
			case SLAVE_SYMBOL:
			case START_SYMBOL:
			case STOP_SYMBOL:
			case TRUNCATE_SYMBOL:
			case UNICODE_SYMBOL:
			case UNINSTALL_SYMBOL:
			case XA_SYMBOL:
			case IMPORT_SYMBOL:
			case CLONE_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(8336);
				identifierKeywordsAmbiguous2Labels();
				}
				break;
			case EVENT_SYMBOL:
			case FILE_SYMBOL:
			case NONE_SYMBOL:
			case PROCESS_SYMBOL:
			case PROXY_SYMBOL:
			case RELOAD_SYMBOL:
			case REPLICATION_SYMBOL:
			case SUPER_SYMBOL:
			case RESOURCE_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(8337);
				identifierKeywordsAmbiguous3Roles();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierKeywordsAmbiguous4SystemVariablesContext extends ParserRuleContext {
		public TerminalNode GLOBAL_SYMBOL() { return getToken(MultiQueryMySQLParser.GLOBAL_SYMBOL, 0); }
		public TerminalNode LOCAL_SYMBOL() { return getToken(MultiQueryMySQLParser.LOCAL_SYMBOL, 0); }
		public TerminalNode PERSIST_SYMBOL() { return getToken(MultiQueryMySQLParser.PERSIST_SYMBOL, 0); }
		public TerminalNode PERSIST_ONLY_SYMBOL() { return getToken(MultiQueryMySQLParser.PERSIST_ONLY_SYMBOL, 0); }
		public TerminalNode SESSION_SYMBOL() { return getToken(MultiQueryMySQLParser.SESSION_SYMBOL, 0); }
		public IdentifierKeywordsAmbiguous4SystemVariablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierKeywordsAmbiguous4SystemVariables; }
	}

	public final IdentifierKeywordsAmbiguous4SystemVariablesContext identifierKeywordsAmbiguous4SystemVariables() throws RecognitionException {
		IdentifierKeywordsAmbiguous4SystemVariablesContext _localctx = new IdentifierKeywordsAmbiguous4SystemVariablesContext(_ctx, getState());
		enterRule(_localctx, 1206, RULE_identifierKeywordsAmbiguous4SystemVariables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8340);
			_la = _input.LA(1);
			if ( !(_la==GLOBAL_SYMBOL || _la==LOCAL_SYMBOL || _la==SESSION_SYMBOL || _la==PERSIST_SYMBOL || _la==PERSIST_ONLY_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleOrIdentifierKeywordContext extends ParserRuleContext {
		public TerminalNode ACCOUNT_SYMBOL() { return getToken(MultiQueryMySQLParser.ACCOUNT_SYMBOL, 0); }
		public TerminalNode ASCII_SYMBOL() { return getToken(MultiQueryMySQLParser.ASCII_SYMBOL, 0); }
		public TerminalNode ALWAYS_SYMBOL() { return getToken(MultiQueryMySQLParser.ALWAYS_SYMBOL, 0); }
		public TerminalNode BACKUP_SYMBOL() { return getToken(MultiQueryMySQLParser.BACKUP_SYMBOL, 0); }
		public TerminalNode BEGIN_SYMBOL() { return getToken(MultiQueryMySQLParser.BEGIN_SYMBOL, 0); }
		public TerminalNode BYTE_SYMBOL() { return getToken(MultiQueryMySQLParser.BYTE_SYMBOL, 0); }
		public TerminalNode CACHE_SYMBOL() { return getToken(MultiQueryMySQLParser.CACHE_SYMBOL, 0); }
		public TerminalNode CHARSET_SYMBOL() { return getToken(MultiQueryMySQLParser.CHARSET_SYMBOL, 0); }
		public TerminalNode CHECKSUM_SYMBOL() { return getToken(MultiQueryMySQLParser.CHECKSUM_SYMBOL, 0); }
		public TerminalNode CLONE_SYMBOL() { return getToken(MultiQueryMySQLParser.CLONE_SYMBOL, 0); }
		public TerminalNode CLOSE_SYMBOL() { return getToken(MultiQueryMySQLParser.CLOSE_SYMBOL, 0); }
		public TerminalNode COMMENT_SYMBOL() { return getToken(MultiQueryMySQLParser.COMMENT_SYMBOL, 0); }
		public TerminalNode COMMIT_SYMBOL() { return getToken(MultiQueryMySQLParser.COMMIT_SYMBOL, 0); }
		public TerminalNode CONTAINS_SYMBOL() { return getToken(MultiQueryMySQLParser.CONTAINS_SYMBOL, 0); }
		public TerminalNode DEALLOCATE_SYMBOL() { return getToken(MultiQueryMySQLParser.DEALLOCATE_SYMBOL, 0); }
		public TerminalNode DO_SYMBOL() { return getToken(MultiQueryMySQLParser.DO_SYMBOL, 0); }
		public TerminalNode END_SYMBOL() { return getToken(MultiQueryMySQLParser.END_SYMBOL, 0); }
		public TerminalNode FLUSH_SYMBOL() { return getToken(MultiQueryMySQLParser.FLUSH_SYMBOL, 0); }
		public TerminalNode FOLLOWS_SYMBOL() { return getToken(MultiQueryMySQLParser.FOLLOWS_SYMBOL, 0); }
		public TerminalNode FORMAT_SYMBOL() { return getToken(MultiQueryMySQLParser.FORMAT_SYMBOL, 0); }
		public TerminalNode GROUP_REPLICATION_SYMBOL() { return getToken(MultiQueryMySQLParser.GROUP_REPLICATION_SYMBOL, 0); }
		public TerminalNode HANDLER_SYMBOL() { return getToken(MultiQueryMySQLParser.HANDLER_SYMBOL, 0); }
		public TerminalNode HELP_SYMBOL() { return getToken(MultiQueryMySQLParser.HELP_SYMBOL, 0); }
		public TerminalNode HOST_SYMBOL() { return getToken(MultiQueryMySQLParser.HOST_SYMBOL, 0); }
		public TerminalNode INSTALL_SYMBOL() { return getToken(MultiQueryMySQLParser.INSTALL_SYMBOL, 0); }
		public TerminalNode INVISIBLE_SYMBOL() { return getToken(MultiQueryMySQLParser.INVISIBLE_SYMBOL, 0); }
		public TerminalNode LANGUAGE_SYMBOL() { return getToken(MultiQueryMySQLParser.LANGUAGE_SYMBOL, 0); }
		public TerminalNode NO_SYMBOL() { return getToken(MultiQueryMySQLParser.NO_SYMBOL, 0); }
		public TerminalNode OPEN_SYMBOL() { return getToken(MultiQueryMySQLParser.OPEN_SYMBOL, 0); }
		public TerminalNode OPTIONS_SYMBOL() { return getToken(MultiQueryMySQLParser.OPTIONS_SYMBOL, 0); }
		public TerminalNode OWNER_SYMBOL() { return getToken(MultiQueryMySQLParser.OWNER_SYMBOL, 0); }
		public TerminalNode PARSER_SYMBOL() { return getToken(MultiQueryMySQLParser.PARSER_SYMBOL, 0); }
		public TerminalNode PARTITION_SYMBOL() { return getToken(MultiQueryMySQLParser.PARTITION_SYMBOL, 0); }
		public TerminalNode PORT_SYMBOL() { return getToken(MultiQueryMySQLParser.PORT_SYMBOL, 0); }
		public TerminalNode PRECEDES_SYMBOL() { return getToken(MultiQueryMySQLParser.PRECEDES_SYMBOL, 0); }
		public TerminalNode PREPARE_SYMBOL() { return getToken(MultiQueryMySQLParser.PREPARE_SYMBOL, 0); }
		public TerminalNode REMOVE_SYMBOL() { return getToken(MultiQueryMySQLParser.REMOVE_SYMBOL, 0); }
		public TerminalNode REPAIR_SYMBOL() { return getToken(MultiQueryMySQLParser.REPAIR_SYMBOL, 0); }
		public TerminalNode RESET_SYMBOL() { return getToken(MultiQueryMySQLParser.RESET_SYMBOL, 0); }
		public TerminalNode RESTORE_SYMBOL() { return getToken(MultiQueryMySQLParser.RESTORE_SYMBOL, 0); }
		public TerminalNode ROLE_SYMBOL() { return getToken(MultiQueryMySQLParser.ROLE_SYMBOL, 0); }
		public TerminalNode ROLLBACK_SYMBOL() { return getToken(MultiQueryMySQLParser.ROLLBACK_SYMBOL, 0); }
		public TerminalNode SAVEPOINT_SYMBOL() { return getToken(MultiQueryMySQLParser.SAVEPOINT_SYMBOL, 0); }
		public TerminalNode SECONDARY_SYMBOL() { return getToken(MultiQueryMySQLParser.SECONDARY_SYMBOL, 0); }
		public TerminalNode SECONDARY_ENGINE_SYMBOL() { return getToken(MultiQueryMySQLParser.SECONDARY_ENGINE_SYMBOL, 0); }
		public TerminalNode SECONDARY_LOAD_SYMBOL() { return getToken(MultiQueryMySQLParser.SECONDARY_LOAD_SYMBOL, 0); }
		public TerminalNode SECONDARY_UNLOAD_SYMBOL() { return getToken(MultiQueryMySQLParser.SECONDARY_UNLOAD_SYMBOL, 0); }
		public TerminalNode SECURITY_SYMBOL() { return getToken(MultiQueryMySQLParser.SECURITY_SYMBOL, 0); }
		public TerminalNode SERVER_SYMBOL() { return getToken(MultiQueryMySQLParser.SERVER_SYMBOL, 0); }
		public TerminalNode SIGNED_SYMBOL() { return getToken(MultiQueryMySQLParser.SIGNED_SYMBOL, 0); }
		public TerminalNode SOCKET_SYMBOL() { return getToken(MultiQueryMySQLParser.SOCKET_SYMBOL, 0); }
		public TerminalNode SLAVE_SYMBOL() { return getToken(MultiQueryMySQLParser.SLAVE_SYMBOL, 0); }
		public TerminalNode SONAME_SYMBOL() { return getToken(MultiQueryMySQLParser.SONAME_SYMBOL, 0); }
		public TerminalNode START_SYMBOL() { return getToken(MultiQueryMySQLParser.START_SYMBOL, 0); }
		public TerminalNode STOP_SYMBOL() { return getToken(MultiQueryMySQLParser.STOP_SYMBOL, 0); }
		public TerminalNode TRUNCATE_SYMBOL() { return getToken(MultiQueryMySQLParser.TRUNCATE_SYMBOL, 0); }
		public TerminalNode UNICODE_SYMBOL() { return getToken(MultiQueryMySQLParser.UNICODE_SYMBOL, 0); }
		public TerminalNode UNINSTALL_SYMBOL() { return getToken(MultiQueryMySQLParser.UNINSTALL_SYMBOL, 0); }
		public TerminalNode UPGRADE_SYMBOL() { return getToken(MultiQueryMySQLParser.UPGRADE_SYMBOL, 0); }
		public TerminalNode VISIBLE_SYMBOL() { return getToken(MultiQueryMySQLParser.VISIBLE_SYMBOL, 0); }
		public TerminalNode WRAPPER_SYMBOL() { return getToken(MultiQueryMySQLParser.WRAPPER_SYMBOL, 0); }
		public TerminalNode XA_SYMBOL() { return getToken(MultiQueryMySQLParser.XA_SYMBOL, 0); }
		public TerminalNode SHUTDOWN_SYMBOL() { return getToken(MultiQueryMySQLParser.SHUTDOWN_SYMBOL, 0); }
		public TerminalNode IMPORT_SYMBOL() { return getToken(MultiQueryMySQLParser.IMPORT_SYMBOL, 0); }
		public RoleOrIdentifierKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleOrIdentifierKeyword; }
	}

	public final RoleOrIdentifierKeywordContext roleOrIdentifierKeyword() throws RecognitionException {
		RoleOrIdentifierKeywordContext _localctx = new RoleOrIdentifierKeywordContext(_ctx, getState());
		enterRule(_localctx, 1208, RULE_roleOrIdentifierKeyword);
		int _la;
		try {
			setState(8347);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1117,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8342);
				_la = _input.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT_SYMBOL) | (1L << ASCII_SYMBOL) | (1L << ALWAYS_SYMBOL) | (1L << BACKUP_SYMBOL) | (1L << BEGIN_SYMBOL) | (1L << BYTE_SYMBOL) | (1L << CACHE_SYMBOL) | (1L << CHARSET_SYMBOL) | (1L << CHECKSUM_SYMBOL) | (1L << CLOSE_SYMBOL) | (1L << COMMENT_SYMBOL) | (1L << COMMIT_SYMBOL) | (1L << CONTAINS_SYMBOL) | (1L << DEALLOCATE_SYMBOL) | (1L << DO_SYMBOL) | (1L << END_SYMBOL) | (1L << FLUSH_SYMBOL) | (1L << FOLLOWS_SYMBOL) | (1L << FORMAT_SYMBOL) | (1L << GROUP_REPLICATION_SYMBOL) | (1L << HANDLER_SYMBOL) | (1L << HELP_SYMBOL) | (1L << HOST_SYMBOL) | (1L << INSTALL_SYMBOL) | (1L << LANGUAGE_SYMBOL) | (1L << NO_SYMBOL) | (1L << OPEN_SYMBOL) | (1L << OPTIONS_SYMBOL) | (1L << OWNER_SYMBOL) | (1L << PARSER_SYMBOL) | (1L << PARTITION_SYMBOL) | (1L << PORT_SYMBOL) | (1L << PRECEDES_SYMBOL) | (1L << PREPARE_SYMBOL) | (1L << REMOVE_SYMBOL) | (1L << REPAIR_SYMBOL) | (1L << RESET_SYMBOL) | (1L << RESTORE_SYMBOL) | (1L << ROLLBACK_SYMBOL) | (1L << SAVEPOINT_SYMBOL) | (1L << SECURITY_SYMBOL) | (1L << SERVER_SYMBOL) | (1L << SIGNED_SYMBOL) | (1L << SLAVE_SYMBOL) | (1L << SOCKET_SYMBOL) | (1L << SONAME_SYMBOL) | (1L << START_SYMBOL) | (1L << STOP_SYMBOL) | (1L << TRUNCATE_SYMBOL) | (1L << UNICODE_SYMBOL) | (1L << UNINSTALL_SYMBOL) | (1L << UPGRADE_SYMBOL) | (1L << WRAPPER_SYMBOL) | (1L << XA_SYMBOL))) != 0) || ((((_la - 689)) & ~0x3f) == 0 && ((1L << (_la - 689)) & ((1L << (ROLE_SYMBOL - 689)) | (1L << (INVISIBLE_SYMBOL - 689)) | (1L << (VISIBLE_SYMBOL - 689)) | (1L << (CLONE_SYMBOL - 689)) | (1L << (SECONDARY_SYMBOL - 689)) | (1L << (SECONDARY_ENGINE_SYMBOL - 689)) | (1L << (SECONDARY_LOAD_SYMBOL - 689)))) != 0) || _la==SECONDARY_UNLOAD_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8343);
				if (!(serverVersion >= 50709)) throw new FailedPredicateException(this, "serverVersion >= 50709");
				setState(8344);
				match(SHUTDOWN_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8345);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(8346);
				match(IMPORT_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleOrLabelKeywordContext extends ParserRuleContext {
		public TerminalNode ACTION_SYMBOL() { return getToken(MultiQueryMySQLParser.ACTION_SYMBOL, 0); }
		public TerminalNode ACTIVE_SYMBOL() { return getToken(MultiQueryMySQLParser.ACTIVE_SYMBOL, 0); }
		public TerminalNode ADDDATE_SYMBOL() { return getToken(MultiQueryMySQLParser.ADDDATE_SYMBOL, 0); }
		public TerminalNode AFTER_SYMBOL() { return getToken(MultiQueryMySQLParser.AFTER_SYMBOL, 0); }
		public TerminalNode AGAINST_SYMBOL() { return getToken(MultiQueryMySQLParser.AGAINST_SYMBOL, 0); }
		public TerminalNode AGGREGATE_SYMBOL() { return getToken(MultiQueryMySQLParser.AGGREGATE_SYMBOL, 0); }
		public TerminalNode ALGORITHM_SYMBOL() { return getToken(MultiQueryMySQLParser.ALGORITHM_SYMBOL, 0); }
		public TerminalNode ANALYSE_SYMBOL() { return getToken(MultiQueryMySQLParser.ANALYSE_SYMBOL, 0); }
		public TerminalNode ANY_SYMBOL() { return getToken(MultiQueryMySQLParser.ANY_SYMBOL, 0); }
		public TerminalNode AT_SYMBOL() { return getToken(MultiQueryMySQLParser.AT_SYMBOL, 0); }
		public TerminalNode AUTHORS_SYMBOL() { return getToken(MultiQueryMySQLParser.AUTHORS_SYMBOL, 0); }
		public TerminalNode AUTO_INCREMENT_SYMBOL() { return getToken(MultiQueryMySQLParser.AUTO_INCREMENT_SYMBOL, 0); }
		public TerminalNode AUTOEXTEND_SIZE_SYMBOL() { return getToken(MultiQueryMySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0); }
		public TerminalNode AVG_ROW_LENGTH_SYMBOL() { return getToken(MultiQueryMySQLParser.AVG_ROW_LENGTH_SYMBOL, 0); }
		public TerminalNode AVG_SYMBOL() { return getToken(MultiQueryMySQLParser.AVG_SYMBOL, 0); }
		public TerminalNode BINLOG_SYMBOL() { return getToken(MultiQueryMySQLParser.BINLOG_SYMBOL, 0); }
		public TerminalNode BIT_SYMBOL() { return getToken(MultiQueryMySQLParser.BIT_SYMBOL, 0); }
		public TerminalNode BLOCK_SYMBOL() { return getToken(MultiQueryMySQLParser.BLOCK_SYMBOL, 0); }
		public TerminalNode BOOL_SYMBOL() { return getToken(MultiQueryMySQLParser.BOOL_SYMBOL, 0); }
		public TerminalNode BOOLEAN_SYMBOL() { return getToken(MultiQueryMySQLParser.BOOLEAN_SYMBOL, 0); }
		public TerminalNode BTREE_SYMBOL() { return getToken(MultiQueryMySQLParser.BTREE_SYMBOL, 0); }
		public TerminalNode BUCKETS_SYMBOL() { return getToken(MultiQueryMySQLParser.BUCKETS_SYMBOL, 0); }
		public TerminalNode CASCADED_SYMBOL() { return getToken(MultiQueryMySQLParser.CASCADED_SYMBOL, 0); }
		public TerminalNode CATALOG_NAME_SYMBOL() { return getToken(MultiQueryMySQLParser.CATALOG_NAME_SYMBOL, 0); }
		public TerminalNode CHAIN_SYMBOL() { return getToken(MultiQueryMySQLParser.CHAIN_SYMBOL, 0); }
		public TerminalNode CHANGED_SYMBOL() { return getToken(MultiQueryMySQLParser.CHANGED_SYMBOL, 0); }
		public TerminalNode CHANNEL_SYMBOL() { return getToken(MultiQueryMySQLParser.CHANNEL_SYMBOL, 0); }
		public TerminalNode CIPHER_SYMBOL() { return getToken(MultiQueryMySQLParser.CIPHER_SYMBOL, 0); }
		public TerminalNode CLIENT_SYMBOL() { return getToken(MultiQueryMySQLParser.CLIENT_SYMBOL, 0); }
		public TerminalNode CLASS_ORIGIN_SYMBOL() { return getToken(MultiQueryMySQLParser.CLASS_ORIGIN_SYMBOL, 0); }
		public TerminalNode COALESCE_SYMBOL() { return getToken(MultiQueryMySQLParser.COALESCE_SYMBOL, 0); }
		public TerminalNode CODE_SYMBOL() { return getToken(MultiQueryMySQLParser.CODE_SYMBOL, 0); }
		public TerminalNode COLLATION_SYMBOL() { return getToken(MultiQueryMySQLParser.COLLATION_SYMBOL, 0); }
		public TerminalNode COLUMN_NAME_SYMBOL() { return getToken(MultiQueryMySQLParser.COLUMN_NAME_SYMBOL, 0); }
		public TerminalNode COLUMN_FORMAT_SYMBOL() { return getToken(MultiQueryMySQLParser.COLUMN_FORMAT_SYMBOL, 0); }
		public TerminalNode COLUMNS_SYMBOL() { return getToken(MultiQueryMySQLParser.COLUMNS_SYMBOL, 0); }
		public TerminalNode COMMITTED_SYMBOL() { return getToken(MultiQueryMySQLParser.COMMITTED_SYMBOL, 0); }
		public TerminalNode COMPACT_SYMBOL() { return getToken(MultiQueryMySQLParser.COMPACT_SYMBOL, 0); }
		public TerminalNode COMPLETION_SYMBOL() { return getToken(MultiQueryMySQLParser.COMPLETION_SYMBOL, 0); }
		public TerminalNode COMPONENT_SYMBOL() { return getToken(MultiQueryMySQLParser.COMPONENT_SYMBOL, 0); }
		public TerminalNode COMPRESSED_SYMBOL() { return getToken(MultiQueryMySQLParser.COMPRESSED_SYMBOL, 0); }
		public TerminalNode COMPRESSION_SYMBOL() { return getToken(MultiQueryMySQLParser.COMPRESSION_SYMBOL, 0); }
		public TerminalNode CONCURRENT_SYMBOL() { return getToken(MultiQueryMySQLParser.CONCURRENT_SYMBOL, 0); }
		public TerminalNode CONNECTION_SYMBOL() { return getToken(MultiQueryMySQLParser.CONNECTION_SYMBOL, 0); }
		public TerminalNode CONSISTENT_SYMBOL() { return getToken(MultiQueryMySQLParser.CONSISTENT_SYMBOL, 0); }
		public TerminalNode CONSTRAINT_CATALOG_SYMBOL() { return getToken(MultiQueryMySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0); }
		public TerminalNode CONSTRAINT_SCHEMA_SYMBOL() { return getToken(MultiQueryMySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0); }
		public TerminalNode CONSTRAINT_NAME_SYMBOL() { return getToken(MultiQueryMySQLParser.CONSTRAINT_NAME_SYMBOL, 0); }
		public TerminalNode CONTEXT_SYMBOL() { return getToken(MultiQueryMySQLParser.CONTEXT_SYMBOL, 0); }
		public TerminalNode CONTRIBUTORS_SYMBOL() { return getToken(MultiQueryMySQLParser.CONTRIBUTORS_SYMBOL, 0); }
		public TerminalNode CPU_SYMBOL() { return getToken(MultiQueryMySQLParser.CPU_SYMBOL, 0); }
		public TerminalNode CURRENT_SYMBOL() { return getToken(MultiQueryMySQLParser.CURRENT_SYMBOL, 0); }
		public TerminalNode CURSOR_NAME_SYMBOL() { return getToken(MultiQueryMySQLParser.CURSOR_NAME_SYMBOL, 0); }
		public TerminalNode DATA_SYMBOL() { return getToken(MultiQueryMySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode DATAFILE_SYMBOL() { return getToken(MultiQueryMySQLParser.DATAFILE_SYMBOL, 0); }
		public TerminalNode DATETIME_SYMBOL() { return getToken(MultiQueryMySQLParser.DATETIME_SYMBOL, 0); }
		public TerminalNode DATE_SYMBOL() { return getToken(MultiQueryMySQLParser.DATE_SYMBOL, 0); }
		public TerminalNode DAY_SYMBOL() { return getToken(MultiQueryMySQLParser.DAY_SYMBOL, 0); }
		public TerminalNode DEFAULT_AUTH_SYMBOL() { return getToken(MultiQueryMySQLParser.DEFAULT_AUTH_SYMBOL, 0); }
		public TerminalNode DEFINER_SYMBOL() { return getToken(MultiQueryMySQLParser.DEFINER_SYMBOL, 0); }
		public TerminalNode DELAY_KEY_WRITE_SYMBOL() { return getToken(MultiQueryMySQLParser.DELAY_KEY_WRITE_SYMBOL, 0); }
		public TerminalNode DES_KEY_FILE_SYMBOL() { return getToken(MultiQueryMySQLParser.DES_KEY_FILE_SYMBOL, 0); }
		public TerminalNode DESCRIPTION_SYMBOL() { return getToken(MultiQueryMySQLParser.DESCRIPTION_SYMBOL, 0); }
		public TerminalNode DIAGNOSTICS_SYMBOL() { return getToken(MultiQueryMySQLParser.DIAGNOSTICS_SYMBOL, 0); }
		public TerminalNode DIRECTORY_SYMBOL() { return getToken(MultiQueryMySQLParser.DIRECTORY_SYMBOL, 0); }
		public TerminalNode DISABLE_SYMBOL() { return getToken(MultiQueryMySQLParser.DISABLE_SYMBOL, 0); }
		public TerminalNode DISCARD_SYMBOL() { return getToken(MultiQueryMySQLParser.DISCARD_SYMBOL, 0); }
		public TerminalNode DISK_SYMBOL() { return getToken(MultiQueryMySQLParser.DISK_SYMBOL, 0); }
		public TerminalNode DUMPFILE_SYMBOL() { return getToken(MultiQueryMySQLParser.DUMPFILE_SYMBOL, 0); }
		public TerminalNode DUPLICATE_SYMBOL() { return getToken(MultiQueryMySQLParser.DUPLICATE_SYMBOL, 0); }
		public TerminalNode DYNAMIC_SYMBOL() { return getToken(MultiQueryMySQLParser.DYNAMIC_SYMBOL, 0); }
		public TerminalNode ENCRYPTION_SYMBOL() { return getToken(MultiQueryMySQLParser.ENCRYPTION_SYMBOL, 0); }
		public TerminalNode ENDS_SYMBOL() { return getToken(MultiQueryMySQLParser.ENDS_SYMBOL, 0); }
		public TerminalNode ENUM_SYMBOL() { return getToken(MultiQueryMySQLParser.ENUM_SYMBOL, 0); }
		public TerminalNode ENGINE_SYMBOL() { return getToken(MultiQueryMySQLParser.ENGINE_SYMBOL, 0); }
		public TerminalNode ENGINES_SYMBOL() { return getToken(MultiQueryMySQLParser.ENGINES_SYMBOL, 0); }
		public TerminalNode ERROR_SYMBOL() { return getToken(MultiQueryMySQLParser.ERROR_SYMBOL, 0); }
		public TerminalNode ERRORS_SYMBOL() { return getToken(MultiQueryMySQLParser.ERRORS_SYMBOL, 0); }
		public TerminalNode ESCAPE_SYMBOL() { return getToken(MultiQueryMySQLParser.ESCAPE_SYMBOL, 0); }
		public TerminalNode EVENTS_SYMBOL() { return getToken(MultiQueryMySQLParser.EVENTS_SYMBOL, 0); }
		public TerminalNode EVERY_SYMBOL() { return getToken(MultiQueryMySQLParser.EVERY_SYMBOL, 0); }
		public TerminalNode EXCLUDE_SYMBOL() { return getToken(MultiQueryMySQLParser.EXCLUDE_SYMBOL, 0); }
		public TerminalNode EXPANSION_SYMBOL() { return getToken(MultiQueryMySQLParser.EXPANSION_SYMBOL, 0); }
		public TerminalNode EXPORT_SYMBOL() { return getToken(MultiQueryMySQLParser.EXPORT_SYMBOL, 0); }
		public TerminalNode EXTENDED_SYMBOL() { return getToken(MultiQueryMySQLParser.EXTENDED_SYMBOL, 0); }
		public TerminalNode EXTENT_SIZE_SYMBOL() { return getToken(MultiQueryMySQLParser.EXTENT_SIZE_SYMBOL, 0); }
		public TerminalNode FAULTS_SYMBOL() { return getToken(MultiQueryMySQLParser.FAULTS_SYMBOL, 0); }
		public TerminalNode FAST_SYMBOL() { return getToken(MultiQueryMySQLParser.FAST_SYMBOL, 0); }
		public TerminalNode FOLLOWING_SYMBOL() { return getToken(MultiQueryMySQLParser.FOLLOWING_SYMBOL, 0); }
		public TerminalNode FOUND_SYMBOL() { return getToken(MultiQueryMySQLParser.FOUND_SYMBOL, 0); }
		public TerminalNode ENABLE_SYMBOL() { return getToken(MultiQueryMySQLParser.ENABLE_SYMBOL, 0); }
		public TerminalNode FULL_SYMBOL() { return getToken(MultiQueryMySQLParser.FULL_SYMBOL, 0); }
		public TerminalNode FILE_BLOCK_SIZE_SYMBOL() { return getToken(MultiQueryMySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0); }
		public TerminalNode FILTER_SYMBOL() { return getToken(MultiQueryMySQLParser.FILTER_SYMBOL, 0); }
		public TerminalNode FIRST_SYMBOL() { return getToken(MultiQueryMySQLParser.FIRST_SYMBOL, 0); }
		public TerminalNode FIXED_SYMBOL() { return getToken(MultiQueryMySQLParser.FIXED_SYMBOL, 0); }
		public TerminalNode GENERAL_SYMBOL() { return getToken(MultiQueryMySQLParser.GENERAL_SYMBOL, 0); }
		public TerminalNode GEOMETRY_SYMBOL() { return getToken(MultiQueryMySQLParser.GEOMETRY_SYMBOL, 0); }
		public TerminalNode GEOMETRYCOLLECTION_SYMBOL() { return getToken(MultiQueryMySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
		public TerminalNode GET_FORMAT_SYMBOL() { return getToken(MultiQueryMySQLParser.GET_FORMAT_SYMBOL, 0); }
		public TerminalNode GRANTS_SYMBOL() { return getToken(MultiQueryMySQLParser.GRANTS_SYMBOL, 0); }
		public TerminalNode GLOBAL_SYMBOL() { return getToken(MultiQueryMySQLParser.GLOBAL_SYMBOL, 0); }
		public TerminalNode HASH_SYMBOL() { return getToken(MultiQueryMySQLParser.HASH_SYMBOL, 0); }
		public TerminalNode HISTOGRAM_SYMBOL() { return getToken(MultiQueryMySQLParser.HISTOGRAM_SYMBOL, 0); }
		public TerminalNode HISTORY_SYMBOL() { return getToken(MultiQueryMySQLParser.HISTORY_SYMBOL, 0); }
		public TerminalNode HOSTS_SYMBOL() { return getToken(MultiQueryMySQLParser.HOSTS_SYMBOL, 0); }
		public TerminalNode HOUR_SYMBOL() { return getToken(MultiQueryMySQLParser.HOUR_SYMBOL, 0); }
		public TerminalNode IDENTIFIED_SYMBOL() { return getToken(MultiQueryMySQLParser.IDENTIFIED_SYMBOL, 0); }
		public TerminalNode IGNORE_SERVER_IDS_SYMBOL() { return getToken(MultiQueryMySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0); }
		public TerminalNode INVOKER_SYMBOL() { return getToken(MultiQueryMySQLParser.INVOKER_SYMBOL, 0); }
		public TerminalNode INDEXES_SYMBOL() { return getToken(MultiQueryMySQLParser.INDEXES_SYMBOL, 0); }
		public TerminalNode INITIAL_SIZE_SYMBOL() { return getToken(MultiQueryMySQLParser.INITIAL_SIZE_SYMBOL, 0); }
		public TerminalNode INSTANCE_SYMBOL() { return getToken(MultiQueryMySQLParser.INSTANCE_SYMBOL, 0); }
		public TerminalNode INACTIVE_SYMBOL() { return getToken(MultiQueryMySQLParser.INACTIVE_SYMBOL, 0); }
		public TerminalNode IO_SYMBOL() { return getToken(MultiQueryMySQLParser.IO_SYMBOL, 0); }
		public TerminalNode IPC_SYMBOL() { return getToken(MultiQueryMySQLParser.IPC_SYMBOL, 0); }
		public TerminalNode ISOLATION_SYMBOL() { return getToken(MultiQueryMySQLParser.ISOLATION_SYMBOL, 0); }
		public TerminalNode ISSUER_SYMBOL() { return getToken(MultiQueryMySQLParser.ISSUER_SYMBOL, 0); }
		public TerminalNode INSERT_METHOD_SYMBOL() { return getToken(MultiQueryMySQLParser.INSERT_METHOD_SYMBOL, 0); }
		public TerminalNode JSON_SYMBOL() { return getToken(MultiQueryMySQLParser.JSON_SYMBOL, 0); }
		public TerminalNode KEY_BLOCK_SIZE_SYMBOL() { return getToken(MultiQueryMySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0); }
		public TerminalNode LAST_SYMBOL() { return getToken(MultiQueryMySQLParser.LAST_SYMBOL, 0); }
		public TerminalNode LEAVES_SYMBOL() { return getToken(MultiQueryMySQLParser.LEAVES_SYMBOL, 0); }
		public TerminalNode LESS_SYMBOL() { return getToken(MultiQueryMySQLParser.LESS_SYMBOL, 0); }
		public TerminalNode LEVEL_SYMBOL() { return getToken(MultiQueryMySQLParser.LEVEL_SYMBOL, 0); }
		public TerminalNode LINESTRING_SYMBOL() { return getToken(MultiQueryMySQLParser.LINESTRING_SYMBOL, 0); }
		public TerminalNode LIST_SYMBOL() { return getToken(MultiQueryMySQLParser.LIST_SYMBOL, 0); }
		public TerminalNode LOCAL_SYMBOL() { return getToken(MultiQueryMySQLParser.LOCAL_SYMBOL, 0); }
		public TerminalNode LOCKED_SYMBOL() { return getToken(MultiQueryMySQLParser.LOCKED_SYMBOL, 0); }
		public TerminalNode LOCKS_SYMBOL() { return getToken(MultiQueryMySQLParser.LOCKS_SYMBOL, 0); }
		public TerminalNode LOGFILE_SYMBOL() { return getToken(MultiQueryMySQLParser.LOGFILE_SYMBOL, 0); }
		public TerminalNode LOGS_SYMBOL() { return getToken(MultiQueryMySQLParser.LOGS_SYMBOL, 0); }
		public TerminalNode MAX_ROWS_SYMBOL() { return getToken(MultiQueryMySQLParser.MAX_ROWS_SYMBOL, 0); }
		public TerminalNode MASTER_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_SYMBOL, 0); }
		public TerminalNode MASTER_HEARTBEAT_PERIOD_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0); }
		public TerminalNode MASTER_HOST_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_HOST_SYMBOL, 0); }
		public TerminalNode MASTER_PORT_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_PORT_SYMBOL, 0); }
		public TerminalNode MASTER_LOG_FILE_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_LOG_FILE_SYMBOL, 0); }
		public TerminalNode MASTER_LOG_POS_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_LOG_POS_SYMBOL, 0); }
		public TerminalNode MASTER_USER_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_USER_SYMBOL, 0); }
		public TerminalNode MASTER_PASSWORD_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_PASSWORD_SYMBOL, 0); }
		public TerminalNode MASTER_PUBLIC_KEY_PATH_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0); }
		public TerminalNode MASTER_SERVER_ID_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_SERVER_ID_SYMBOL, 0); }
		public TerminalNode MASTER_CONNECT_RETRY_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0); }
		public TerminalNode MASTER_RETRY_COUNT_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0); }
		public TerminalNode MASTER_DELAY_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_DELAY_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_SSL_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CA_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_SSL_CA_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CAPATH_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0); }
		public TerminalNode MASTER_TLS_VERSION_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_TLS_VERSION_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CERT_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_SSL_CERT_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CIPHER_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CRL_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_SSL_CRL_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CRLPATH_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_KEY_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_SSL_KEY_SYMBOL, 0); }
		public TerminalNode MASTER_AUTO_POSITION_SYMBOL() { return getToken(MultiQueryMySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR_SYMBOL() { return getToken(MultiQueryMySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0); }
		public TerminalNode MAX_QUERIES_PER_HOUR_SYMBOL() { return getToken(MultiQueryMySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0); }
		public TerminalNode MAX_STATEMENT_TIME_SYMBOL() { return getToken(MultiQueryMySQLParser.MAX_STATEMENT_TIME_SYMBOL, 0); }
		public TerminalNode MAX_SIZE_SYMBOL() { return getToken(MultiQueryMySQLParser.MAX_SIZE_SYMBOL, 0); }
		public TerminalNode MAX_UPDATES_PER_HOUR_SYMBOL() { return getToken(MultiQueryMySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0); }
		public TerminalNode MAX_USER_CONNECTIONS_SYMBOL() { return getToken(MultiQueryMySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0); }
		public TerminalNode MEDIUM_SYMBOL() { return getToken(MultiQueryMySQLParser.MEDIUM_SYMBOL, 0); }
		public TerminalNode MEMORY_SYMBOL() { return getToken(MultiQueryMySQLParser.MEMORY_SYMBOL, 0); }
		public TerminalNode MERGE_SYMBOL() { return getToken(MultiQueryMySQLParser.MERGE_SYMBOL, 0); }
		public TerminalNode MESSAGE_TEXT_SYMBOL() { return getToken(MultiQueryMySQLParser.MESSAGE_TEXT_SYMBOL, 0); }
		public TerminalNode MICROSECOND_SYMBOL() { return getToken(MultiQueryMySQLParser.MICROSECOND_SYMBOL, 0); }
		public TerminalNode MIGRATE_SYMBOL() { return getToken(MultiQueryMySQLParser.MIGRATE_SYMBOL, 0); }
		public TerminalNode MINUTE_SYMBOL() { return getToken(MultiQueryMySQLParser.MINUTE_SYMBOL, 0); }
		public TerminalNode MIN_ROWS_SYMBOL() { return getToken(MultiQueryMySQLParser.MIN_ROWS_SYMBOL, 0); }
		public TerminalNode MODIFY_SYMBOL() { return getToken(MultiQueryMySQLParser.MODIFY_SYMBOL, 0); }
		public TerminalNode MODE_SYMBOL() { return getToken(MultiQueryMySQLParser.MODE_SYMBOL, 0); }
		public TerminalNode MONTH_SYMBOL() { return getToken(MultiQueryMySQLParser.MONTH_SYMBOL, 0); }
		public TerminalNode MULTILINESTRING_SYMBOL() { return getToken(MultiQueryMySQLParser.MULTILINESTRING_SYMBOL, 0); }
		public TerminalNode MULTIPOINT_SYMBOL() { return getToken(MultiQueryMySQLParser.MULTIPOINT_SYMBOL, 0); }
		public TerminalNode MULTIPOLYGON_SYMBOL() { return getToken(MultiQueryMySQLParser.MULTIPOLYGON_SYMBOL, 0); }
		public TerminalNode MUTEX_SYMBOL() { return getToken(MultiQueryMySQLParser.MUTEX_SYMBOL, 0); }
		public TerminalNode MYSQL_ERRNO_SYMBOL() { return getToken(MultiQueryMySQLParser.MYSQL_ERRNO_SYMBOL, 0); }
		public TerminalNode NAME_SYMBOL() { return getToken(MultiQueryMySQLParser.NAME_SYMBOL, 0); }
		public TerminalNode NAMES_SYMBOL() { return getToken(MultiQueryMySQLParser.NAMES_SYMBOL, 0); }
		public TerminalNode NATIONAL_SYMBOL() { return getToken(MultiQueryMySQLParser.NATIONAL_SYMBOL, 0); }
		public TerminalNode NCHAR_SYMBOL() { return getToken(MultiQueryMySQLParser.NCHAR_SYMBOL, 0); }
		public TerminalNode NDBCLUSTER_SYMBOL() { return getToken(MultiQueryMySQLParser.NDBCLUSTER_SYMBOL, 0); }
		public TerminalNode NESTED_SYMBOL() { return getToken(MultiQueryMySQLParser.NESTED_SYMBOL, 0); }
		public TerminalNode NEVER_SYMBOL() { return getToken(MultiQueryMySQLParser.NEVER_SYMBOL, 0); }
		public TerminalNode NEXT_SYMBOL() { return getToken(MultiQueryMySQLParser.NEXT_SYMBOL, 0); }
		public TerminalNode NEW_SYMBOL() { return getToken(MultiQueryMySQLParser.NEW_SYMBOL, 0); }
		public TerminalNode NO_WAIT_SYMBOL() { return getToken(MultiQueryMySQLParser.NO_WAIT_SYMBOL, 0); }
		public TerminalNode NODEGROUP_SYMBOL() { return getToken(MultiQueryMySQLParser.NODEGROUP_SYMBOL, 0); }
		public TerminalNode NULLS_SYMBOL() { return getToken(MultiQueryMySQLParser.NULLS_SYMBOL, 0); }
		public TerminalNode NOWAIT_SYMBOL() { return getToken(MultiQueryMySQLParser.NOWAIT_SYMBOL, 0); }
		public TerminalNode NUMBER_SYMBOL() { return getToken(MultiQueryMySQLParser.NUMBER_SYMBOL, 0); }
		public TerminalNode NVARCHAR_SYMBOL() { return getToken(MultiQueryMySQLParser.NVARCHAR_SYMBOL, 0); }
		public TerminalNode OFFSET_SYMBOL() { return getToken(MultiQueryMySQLParser.OFFSET_SYMBOL, 0); }
		public TerminalNode OLD_SYMBOL() { return getToken(MultiQueryMySQLParser.OLD_SYMBOL, 0); }
		public TerminalNode OLD_PASSWORD_SYMBOL() { return getToken(MultiQueryMySQLParser.OLD_PASSWORD_SYMBOL, 0); }
		public TerminalNode ONE_SYMBOL() { return getToken(MultiQueryMySQLParser.ONE_SYMBOL, 0); }
		public TerminalNode OPTIONAL_SYMBOL() { return getToken(MultiQueryMySQLParser.OPTIONAL_SYMBOL, 0); }
		public TerminalNode ORDINALITY_SYMBOL() { return getToken(MultiQueryMySQLParser.ORDINALITY_SYMBOL, 0); }
		public TerminalNode ORGANIZATION_SYMBOL() { return getToken(MultiQueryMySQLParser.ORGANIZATION_SYMBOL, 0); }
		public TerminalNode OTHERS_SYMBOL() { return getToken(MultiQueryMySQLParser.OTHERS_SYMBOL, 0); }
		public TerminalNode PACK_KEYS_SYMBOL() { return getToken(MultiQueryMySQLParser.PACK_KEYS_SYMBOL, 0); }
		public TerminalNode PAGE_SYMBOL() { return getToken(MultiQueryMySQLParser.PAGE_SYMBOL, 0); }
		public TerminalNode PARTIAL_SYMBOL() { return getToken(MultiQueryMySQLParser.PARTIAL_SYMBOL, 0); }
		public TerminalNode PARTITIONING_SYMBOL() { return getToken(MultiQueryMySQLParser.PARTITIONING_SYMBOL, 0); }
		public TerminalNode PARTITIONS_SYMBOL() { return getToken(MultiQueryMySQLParser.PARTITIONS_SYMBOL, 0); }
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MultiQueryMySQLParser.PASSWORD_SYMBOL, 0); }
		public TerminalNode PATH_SYMBOL() { return getToken(MultiQueryMySQLParser.PATH_SYMBOL, 0); }
		public TerminalNode PHASE_SYMBOL() { return getToken(MultiQueryMySQLParser.PHASE_SYMBOL, 0); }
		public TerminalNode PLUGIN_DIR_SYMBOL() { return getToken(MultiQueryMySQLParser.PLUGIN_DIR_SYMBOL, 0); }
		public TerminalNode PLUGIN_SYMBOL() { return getToken(MultiQueryMySQLParser.PLUGIN_SYMBOL, 0); }
		public TerminalNode PLUGINS_SYMBOL() { return getToken(MultiQueryMySQLParser.PLUGINS_SYMBOL, 0); }
		public TerminalNode POINT_SYMBOL() { return getToken(MultiQueryMySQLParser.POINT_SYMBOL, 0); }
		public TerminalNode POLYGON_SYMBOL() { return getToken(MultiQueryMySQLParser.POLYGON_SYMBOL, 0); }
		public TerminalNode PRECEDING_SYMBOL() { return getToken(MultiQueryMySQLParser.PRECEDING_SYMBOL, 0); }
		public TerminalNode PRESERVE_SYMBOL() { return getToken(MultiQueryMySQLParser.PRESERVE_SYMBOL, 0); }
		public TerminalNode PREV_SYMBOL() { return getToken(MultiQueryMySQLParser.PREV_SYMBOL, 0); }
		public TerminalNode THREAD_PRIORITY_SYMBOL() { return getToken(MultiQueryMySQLParser.THREAD_PRIORITY_SYMBOL, 0); }
		public TerminalNode PRIVILEGES_SYMBOL() { return getToken(MultiQueryMySQLParser.PRIVILEGES_SYMBOL, 0); }
		public TerminalNode PROCESSLIST_SYMBOL() { return getToken(MultiQueryMySQLParser.PROCESSLIST_SYMBOL, 0); }
		public TerminalNode PROFILE_SYMBOL() { return getToken(MultiQueryMySQLParser.PROFILE_SYMBOL, 0); }
		public TerminalNode PROFILES_SYMBOL() { return getToken(MultiQueryMySQLParser.PROFILES_SYMBOL, 0); }
		public TerminalNode QUARTER_SYMBOL() { return getToken(MultiQueryMySQLParser.QUARTER_SYMBOL, 0); }
		public TerminalNode QUERY_SYMBOL() { return getToken(MultiQueryMySQLParser.QUERY_SYMBOL, 0); }
		public TerminalNode QUICK_SYMBOL() { return getToken(MultiQueryMySQLParser.QUICK_SYMBOL, 0); }
		public TerminalNode READ_ONLY_SYMBOL() { return getToken(MultiQueryMySQLParser.READ_ONLY_SYMBOL, 0); }
		public TerminalNode REBUILD_SYMBOL() { return getToken(MultiQueryMySQLParser.REBUILD_SYMBOL, 0); }
		public TerminalNode RECOVER_SYMBOL() { return getToken(MultiQueryMySQLParser.RECOVER_SYMBOL, 0); }
		public TerminalNode REDO_BUFFER_SIZE_SYMBOL() { return getToken(MultiQueryMySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0); }
		public TerminalNode REDOFILE_SYMBOL() { return getToken(MultiQueryMySQLParser.REDOFILE_SYMBOL, 0); }
		public TerminalNode REDUNDANT_SYMBOL() { return getToken(MultiQueryMySQLParser.REDUNDANT_SYMBOL, 0); }
		public TerminalNode RELAY_SYMBOL() { return getToken(MultiQueryMySQLParser.RELAY_SYMBOL, 0); }
		public TerminalNode RELAYLOG_SYMBOL() { return getToken(MultiQueryMySQLParser.RELAYLOG_SYMBOL, 0); }
		public TerminalNode RELAY_LOG_FILE_SYMBOL() { return getToken(MultiQueryMySQLParser.RELAY_LOG_FILE_SYMBOL, 0); }
		public TerminalNode RELAY_LOG_POS_SYMBOL() { return getToken(MultiQueryMySQLParser.RELAY_LOG_POS_SYMBOL, 0); }
		public TerminalNode RELAY_THREAD_SYMBOL() { return getToken(MultiQueryMySQLParser.RELAY_THREAD_SYMBOL, 0); }
		public TerminalNode REMOTE_SYMBOL() { return getToken(MultiQueryMySQLParser.REMOTE_SYMBOL, 0); }
		public TerminalNode REORGANIZE_SYMBOL() { return getToken(MultiQueryMySQLParser.REORGANIZE_SYMBOL, 0); }
		public TerminalNode REPEATABLE_SYMBOL() { return getToken(MultiQueryMySQLParser.REPEATABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_DO_DB_SYMBOL() { return getToken(MultiQueryMySQLParser.REPLICATE_DO_DB_SYMBOL, 0); }
		public TerminalNode REPLICATE_IGNORE_DB_SYMBOL() { return getToken(MultiQueryMySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0); }
		public TerminalNode REPLICATE_DO_TABLE_SYMBOL() { return getToken(MultiQueryMySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_IGNORE_TABLE_SYMBOL() { return getToken(MultiQueryMySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_WILD_DO_TABLE_SYMBOL() { return getToken(MultiQueryMySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_WILD_IGNORE_TABLE_SYMBOL() { return getToken(MultiQueryMySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_REWRITE_DB_SYMBOL() { return getToken(MultiQueryMySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0); }
		public TerminalNode USER_RESOURCES_SYMBOL() { return getToken(MultiQueryMySQLParser.USER_RESOURCES_SYMBOL, 0); }
		public TerminalNode RESPECT_SYMBOL() { return getToken(MultiQueryMySQLParser.RESPECT_SYMBOL, 0); }
		public TerminalNode RESUME_SYMBOL() { return getToken(MultiQueryMySQLParser.RESUME_SYMBOL, 0); }
		public TerminalNode RETAIN_SYMBOL() { return getToken(MultiQueryMySQLParser.RETAIN_SYMBOL, 0); }
		public TerminalNode RETURNED_SQLSTATE_SYMBOL() { return getToken(MultiQueryMySQLParser.RETURNED_SQLSTATE_SYMBOL, 0); }
		public TerminalNode RETURNS_SYMBOL() { return getToken(MultiQueryMySQLParser.RETURNS_SYMBOL, 0); }
		public TerminalNode REUSE_SYMBOL() { return getToken(MultiQueryMySQLParser.REUSE_SYMBOL, 0); }
		public TerminalNode REVERSE_SYMBOL() { return getToken(MultiQueryMySQLParser.REVERSE_SYMBOL, 0); }
		public TerminalNode ROLLUP_SYMBOL() { return getToken(MultiQueryMySQLParser.ROLLUP_SYMBOL, 0); }
		public TerminalNode ROTATE_SYMBOL() { return getToken(MultiQueryMySQLParser.ROTATE_SYMBOL, 0); }
		public TerminalNode ROUTINE_SYMBOL() { return getToken(MultiQueryMySQLParser.ROUTINE_SYMBOL, 0); }
		public TerminalNode ROW_COUNT_SYMBOL() { return getToken(MultiQueryMySQLParser.ROW_COUNT_SYMBOL, 0); }
		public TerminalNode ROW_FORMAT_SYMBOL() { return getToken(MultiQueryMySQLParser.ROW_FORMAT_SYMBOL, 0); }
		public TerminalNode RTREE_SYMBOL() { return getToken(MultiQueryMySQLParser.RTREE_SYMBOL, 0); }
		public TerminalNode SCHEDULE_SYMBOL() { return getToken(MultiQueryMySQLParser.SCHEDULE_SYMBOL, 0); }
		public TerminalNode SCHEMA_NAME_SYMBOL() { return getToken(MultiQueryMySQLParser.SCHEMA_NAME_SYMBOL, 0); }
		public TerminalNode SECOND_SYMBOL() { return getToken(MultiQueryMySQLParser.SECOND_SYMBOL, 0); }
		public TerminalNode SERIAL_SYMBOL() { return getToken(MultiQueryMySQLParser.SERIAL_SYMBOL, 0); }
		public TerminalNode SERIALIZABLE_SYMBOL() { return getToken(MultiQueryMySQLParser.SERIALIZABLE_SYMBOL, 0); }
		public TerminalNode SESSION_SYMBOL() { return getToken(MultiQueryMySQLParser.SESSION_SYMBOL, 0); }
		public TerminalNode SHARE_SYMBOL() { return getToken(MultiQueryMySQLParser.SHARE_SYMBOL, 0); }
		public TerminalNode SIMPLE_SYMBOL() { return getToken(MultiQueryMySQLParser.SIMPLE_SYMBOL, 0); }
		public TerminalNode SKIP_SYMBOL() { return getToken(MultiQueryMySQLParser.SKIP_SYMBOL, 0); }
		public TerminalNode SLOW_SYMBOL() { return getToken(MultiQueryMySQLParser.SLOW_SYMBOL, 0); }
		public TerminalNode SNAPSHOT_SYMBOL() { return getToken(MultiQueryMySQLParser.SNAPSHOT_SYMBOL, 0); }
		public TerminalNode SOUNDS_SYMBOL() { return getToken(MultiQueryMySQLParser.SOUNDS_SYMBOL, 0); }
		public TerminalNode SOURCE_SYMBOL() { return getToken(MultiQueryMySQLParser.SOURCE_SYMBOL, 0); }
		public TerminalNode SQL_AFTER_GTIDS_SYMBOL() { return getToken(MultiQueryMySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0); }
		public TerminalNode SQL_AFTER_MTS_GAPS_SYMBOL() { return getToken(MultiQueryMySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0); }
		public TerminalNode SQL_BEFORE_GTIDS_SYMBOL() { return getToken(MultiQueryMySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0); }
		public TerminalNode SQL_CACHE_SYMBOL() { return getToken(MultiQueryMySQLParser.SQL_CACHE_SYMBOL, 0); }
		public TerminalNode SQL_BUFFER_RESULT_SYMBOL() { return getToken(MultiQueryMySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0); }
		public TerminalNode SQL_NO_CACHE_SYMBOL() { return getToken(MultiQueryMySQLParser.SQL_NO_CACHE_SYMBOL, 0); }
		public TerminalNode SQL_THREAD_SYMBOL() { return getToken(MultiQueryMySQLParser.SQL_THREAD_SYMBOL, 0); }
		public TerminalNode SRID_SYMBOL() { return getToken(MultiQueryMySQLParser.SRID_SYMBOL, 0); }
		public TerminalNode STACKED_SYMBOL() { return getToken(MultiQueryMySQLParser.STACKED_SYMBOL, 0); }
		public TerminalNode STARTS_SYMBOL() { return getToken(MultiQueryMySQLParser.STARTS_SYMBOL, 0); }
		public TerminalNode STATS_AUTO_RECALC_SYMBOL() { return getToken(MultiQueryMySQLParser.STATS_AUTO_RECALC_SYMBOL, 0); }
		public TerminalNode STATS_PERSISTENT_SYMBOL() { return getToken(MultiQueryMySQLParser.STATS_PERSISTENT_SYMBOL, 0); }
		public TerminalNode STATS_SAMPLE_PAGES_SYMBOL() { return getToken(MultiQueryMySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0); }
		public TerminalNode STATUS_SYMBOL() { return getToken(MultiQueryMySQLParser.STATUS_SYMBOL, 0); }
		public TerminalNode STORAGE_SYMBOL() { return getToken(MultiQueryMySQLParser.STORAGE_SYMBOL, 0); }
		public TerminalNode STRING_SYMBOL() { return getToken(MultiQueryMySQLParser.STRING_SYMBOL, 0); }
		public TerminalNode SUBCLASS_ORIGIN_SYMBOL() { return getToken(MultiQueryMySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0); }
		public TerminalNode SUBDATE_SYMBOL() { return getToken(MultiQueryMySQLParser.SUBDATE_SYMBOL, 0); }
		public TerminalNode SUBJECT_SYMBOL() { return getToken(MultiQueryMySQLParser.SUBJECT_SYMBOL, 0); }
		public TerminalNode SUBPARTITION_SYMBOL() { return getToken(MultiQueryMySQLParser.SUBPARTITION_SYMBOL, 0); }
		public TerminalNode SUBPARTITIONS_SYMBOL() { return getToken(MultiQueryMySQLParser.SUBPARTITIONS_SYMBOL, 0); }
		public TerminalNode SUPER_SYMBOL() { return getToken(MultiQueryMySQLParser.SUPER_SYMBOL, 0); }
		public TerminalNode SUSPEND_SYMBOL() { return getToken(MultiQueryMySQLParser.SUSPEND_SYMBOL, 0); }
		public TerminalNode SWAPS_SYMBOL() { return getToken(MultiQueryMySQLParser.SWAPS_SYMBOL, 0); }
		public TerminalNode SWITCHES_SYMBOL() { return getToken(MultiQueryMySQLParser.SWITCHES_SYMBOL, 0); }
		public TerminalNode TABLE_NAME_SYMBOL() { return getToken(MultiQueryMySQLParser.TABLE_NAME_SYMBOL, 0); }
		public TerminalNode TABLES_SYMBOL() { return getToken(MultiQueryMySQLParser.TABLES_SYMBOL, 0); }
		public TerminalNode TABLE_CHECKSUM_SYMBOL() { return getToken(MultiQueryMySQLParser.TABLE_CHECKSUM_SYMBOL, 0); }
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MultiQueryMySQLParser.TABLESPACE_SYMBOL, 0); }
		public TerminalNode TEMPORARY_SYMBOL() { return getToken(MultiQueryMySQLParser.TEMPORARY_SYMBOL, 0); }
		public TerminalNode TEMPTABLE_SYMBOL() { return getToken(MultiQueryMySQLParser.TEMPTABLE_SYMBOL, 0); }
		public TerminalNode TEXT_SYMBOL() { return getToken(MultiQueryMySQLParser.TEXT_SYMBOL, 0); }
		public TerminalNode THAN_SYMBOL() { return getToken(MultiQueryMySQLParser.THAN_SYMBOL, 0); }
		public TerminalNode TIES_SYMBOL() { return getToken(MultiQueryMySQLParser.TIES_SYMBOL, 0); }
		public TerminalNode TRANSACTION_SYMBOL() { return getToken(MultiQueryMySQLParser.TRANSACTION_SYMBOL, 0); }
		public TerminalNode TRIGGERS_SYMBOL() { return getToken(MultiQueryMySQLParser.TRIGGERS_SYMBOL, 0); }
		public TerminalNode TIMESTAMP_SYMBOL() { return getToken(MultiQueryMySQLParser.TIMESTAMP_SYMBOL, 0); }
		public TerminalNode TIMESTAMP_ADD_SYMBOL() { return getToken(MultiQueryMySQLParser.TIMESTAMP_ADD_SYMBOL, 0); }
		public TerminalNode TIMESTAMP_DIFF_SYMBOL() { return getToken(MultiQueryMySQLParser.TIMESTAMP_DIFF_SYMBOL, 0); }
		public TerminalNode TIME_SYMBOL() { return getToken(MultiQueryMySQLParser.TIME_SYMBOL, 0); }
		public TerminalNode TYPES_SYMBOL() { return getToken(MultiQueryMySQLParser.TYPES_SYMBOL, 0); }
		public TerminalNode TYPE_SYMBOL() { return getToken(MultiQueryMySQLParser.TYPE_SYMBOL, 0); }
		public TerminalNode UDF_RETURNS_SYMBOL() { return getToken(MultiQueryMySQLParser.UDF_RETURNS_SYMBOL, 0); }
		public TerminalNode UNBOUNDED_SYMBOL() { return getToken(MultiQueryMySQLParser.UNBOUNDED_SYMBOL, 0); }
		public TerminalNode UNCOMMITTED_SYMBOL() { return getToken(MultiQueryMySQLParser.UNCOMMITTED_SYMBOL, 0); }
		public TerminalNode UNDEFINED_SYMBOL() { return getToken(MultiQueryMySQLParser.UNDEFINED_SYMBOL, 0); }
		public TerminalNode UNDO_BUFFER_SIZE_SYMBOL() { return getToken(MultiQueryMySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0); }
		public TerminalNode UNDOFILE_SYMBOL() { return getToken(MultiQueryMySQLParser.UNDOFILE_SYMBOL, 0); }
		public TerminalNode UNKNOWN_SYMBOL() { return getToken(MultiQueryMySQLParser.UNKNOWN_SYMBOL, 0); }
		public TerminalNode UNTIL_SYMBOL() { return getToken(MultiQueryMySQLParser.UNTIL_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MultiQueryMySQLParser.USER_SYMBOL, 0); }
		public TerminalNode USE_FRM_SYMBOL() { return getToken(MultiQueryMySQLParser.USE_FRM_SYMBOL, 0); }
		public TerminalNode VARIABLES_SYMBOL() { return getToken(MultiQueryMySQLParser.VARIABLES_SYMBOL, 0); }
		public TerminalNode VCPU_SYMBOL() { return getToken(MultiQueryMySQLParser.VCPU_SYMBOL, 0); }
		public TerminalNode VIEW_SYMBOL() { return getToken(MultiQueryMySQLParser.VIEW_SYMBOL, 0); }
		public TerminalNode VALUE_SYMBOL() { return getToken(MultiQueryMySQLParser.VALUE_SYMBOL, 0); }
		public TerminalNode WARNINGS_SYMBOL() { return getToken(MultiQueryMySQLParser.WARNINGS_SYMBOL, 0); }
		public TerminalNode WAIT_SYMBOL() { return getToken(MultiQueryMySQLParser.WAIT_SYMBOL, 0); }
		public TerminalNode WEEK_SYMBOL() { return getToken(MultiQueryMySQLParser.WEEK_SYMBOL, 0); }
		public TerminalNode WORK_SYMBOL() { return getToken(MultiQueryMySQLParser.WORK_SYMBOL, 0); }
		public TerminalNode WEIGHT_STRING_SYMBOL() { return getToken(MultiQueryMySQLParser.WEIGHT_STRING_SYMBOL, 0); }
		public TerminalNode X509_SYMBOL() { return getToken(MultiQueryMySQLParser.X509_SYMBOL, 0); }
		public TerminalNode XID_SYMBOL() { return getToken(MultiQueryMySQLParser.XID_SYMBOL, 0); }
		public TerminalNode XML_SYMBOL() { return getToken(MultiQueryMySQLParser.XML_SYMBOL, 0); }
		public TerminalNode YEAR_SYMBOL() { return getToken(MultiQueryMySQLParser.YEAR_SYMBOL, 0); }
		public TerminalNode SHUTDOWN_SYMBOL() { return getToken(MultiQueryMySQLParser.SHUTDOWN_SYMBOL, 0); }
		public TerminalNode CUBE_SYMBOL() { return getToken(MultiQueryMySQLParser.CUBE_SYMBOL, 0); }
		public TerminalNode IMPORT_SYMBOL() { return getToken(MultiQueryMySQLParser.IMPORT_SYMBOL, 0); }
		public TerminalNode FUNCTION_SYMBOL() { return getToken(MultiQueryMySQLParser.FUNCTION_SYMBOL, 0); }
		public TerminalNode ROWS_SYMBOL() { return getToken(MultiQueryMySQLParser.ROWS_SYMBOL, 0); }
		public TerminalNode ROW_SYMBOL() { return getToken(MultiQueryMySQLParser.ROW_SYMBOL, 0); }
		public TerminalNode EXCHANGE_SYMBOL() { return getToken(MultiQueryMySQLParser.EXCHANGE_SYMBOL, 0); }
		public TerminalNode EXPIRE_SYMBOL() { return getToken(MultiQueryMySQLParser.EXPIRE_SYMBOL, 0); }
		public TerminalNode ONLY_SYMBOL() { return getToken(MultiQueryMySQLParser.ONLY_SYMBOL, 0); }
		public TerminalNode VALIDATION_SYMBOL() { return getToken(MultiQueryMySQLParser.VALIDATION_SYMBOL, 0); }
		public TerminalNode WITHOUT_SYMBOL() { return getToken(MultiQueryMySQLParser.WITHOUT_SYMBOL, 0); }
		public TerminalNode ADMIN_SYMBOL() { return getToken(MultiQueryMySQLParser.ADMIN_SYMBOL, 0); }
		public RoleOrLabelKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleOrLabelKeyword; }
	}

	public final RoleOrLabelKeywordContext roleOrLabelKeyword() throws RecognitionException {
		RoleOrLabelKeywordContext _localctx = new RoleOrLabelKeywordContext(_ctx, getState());
		enterRule(_localctx, 1210, RULE_roleOrLabelKeyword);
		int _la;
		try {
			setState(8358);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1118,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8349);
				_la = _input.LA(1);
				if ( !(((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & ((1L << (ACTION_SYMBOL - 57)) | (1L << (ADDDATE_SYMBOL - 57)) | (1L << (AFTER_SYMBOL - 57)) | (1L << (AGAINST_SYMBOL - 57)) | (1L << (AGGREGATE_SYMBOL - 57)) | (1L << (ALGORITHM_SYMBOL - 57)) | (1L << (ANY_SYMBOL - 57)) | (1L << (AT_SYMBOL - 57)) | (1L << (AUTHORS_SYMBOL - 57)) | (1L << (AUTO_INCREMENT_SYMBOL - 57)) | (1L << (AUTOEXTEND_SIZE_SYMBOL - 57)) | (1L << (AVG_ROW_LENGTH_SYMBOL - 57)) | (1L << (AVG_SYMBOL - 57)) | (1L << (BINLOG_SYMBOL - 57)) | (1L << (BIT_SYMBOL - 57)) | (1L << (BLOCK_SYMBOL - 57)) | (1L << (BOOL_SYMBOL - 57)) | (1L << (BOOLEAN_SYMBOL - 57)) | (1L << (BTREE_SYMBOL - 57)) | (1L << (CASCADED_SYMBOL - 57)) | (1L << (CATALOG_NAME_SYMBOL - 57)) | (1L << (CHAIN_SYMBOL - 57)) | (1L << (CHANGED_SYMBOL - 57)) | (1L << (CHANNEL_SYMBOL - 57)) | (1L << (CIPHER_SYMBOL - 57)) | (1L << (CLIENT_SYMBOL - 57)) | (1L << (CLASS_ORIGIN_SYMBOL - 57)) | (1L << (COALESCE_SYMBOL - 57)) | (1L << (CODE_SYMBOL - 57)) | (1L << (COLLATION_SYMBOL - 57)) | (1L << (COLUMN_NAME_SYMBOL - 57)) | (1L << (COLUMN_FORMAT_SYMBOL - 57)) | (1L << (COLUMNS_SYMBOL - 57)) | (1L << (COMMITTED_SYMBOL - 57)) | (1L << (COMPACT_SYMBOL - 57)) | (1L << (COMPLETION_SYMBOL - 57)) | (1L << (COMPRESSED_SYMBOL - 57)) | (1L << (COMPRESSION_SYMBOL - 57)) | (1L << (ENCRYPTION_SYMBOL - 57)) | (1L << (CONCURRENT_SYMBOL - 57)) | (1L << (CONNECTION_SYMBOL - 57)) | (1L << (CONSISTENT_SYMBOL - 57)) | (1L << (CONSTRAINT_CATALOG_SYMBOL - 57)) | (1L << (CONSTRAINT_SCHEMA_SYMBOL - 57)) | (1L << (CONSTRAINT_NAME_SYMBOL - 57)) | (1L << (CONTEXT_SYMBOL - 57)) | (1L << (CONTRIBUTORS_SYMBOL - 57)) | (1L << (CPU_SYMBOL - 57)) | (1L << (CURRENT_SYMBOL - 57)) | (1L << (CURSOR_NAME_SYMBOL - 57)) | (1L << (DATA_SYMBOL - 57)) | (1L << (DATAFILE_SYMBOL - 57)) | (1L << (DATETIME_SYMBOL - 57)) | (1L << (DATE_SYMBOL - 57)) | (1L << (DAY_SYMBOL - 57)) | (1L << (DEFAULT_AUTH_SYMBOL - 57)) | (1L << (DEFINER_SYMBOL - 57)) | (1L << (DELAY_KEY_WRITE_SYMBOL - 57)) | (1L << (DES_KEY_FILE_SYMBOL - 57)) | (1L << (DIAGNOSTICS_SYMBOL - 57)) | (1L << (DIRECTORY_SYMBOL - 57)) | (1L << (DISABLE_SYMBOL - 57)))) != 0) || ((((_la - 121)) & ~0x3f) == 0 && ((1L << (_la - 121)) & ((1L << (DISCARD_SYMBOL - 121)) | (1L << (DISK_SYMBOL - 121)) | (1L << (DUMPFILE_SYMBOL - 121)) | (1L << (DUPLICATE_SYMBOL - 121)) | (1L << (DYNAMIC_SYMBOL - 121)) | (1L << (ENDS_SYMBOL - 121)) | (1L << (ENUM_SYMBOL - 121)) | (1L << (ENGINE_SYMBOL - 121)) | (1L << (ENGINES_SYMBOL - 121)) | (1L << (ERROR_SYMBOL - 121)) | (1L << (ERRORS_SYMBOL - 121)) | (1L << (ESCAPE_SYMBOL - 121)) | (1L << (EVENTS_SYMBOL - 121)) | (1L << (EVERY_SYMBOL - 121)) | (1L << (EXPANSION_SYMBOL - 121)) | (1L << (EXPORT_SYMBOL - 121)) | (1L << (EXTENDED_SYMBOL - 121)) | (1L << (EXTENT_SIZE_SYMBOL - 121)) | (1L << (FAULTS_SYMBOL - 121)) | (1L << (FAST_SYMBOL - 121)) | (1L << (FOUND_SYMBOL - 121)) | (1L << (ENABLE_SYMBOL - 121)) | (1L << (FULL_SYMBOL - 121)) | (1L << (FILE_BLOCK_SIZE_SYMBOL - 121)) | (1L << (FILTER_SYMBOL - 121)) | (1L << (FIRST_SYMBOL - 121)) | (1L << (FIXED_SYMBOL - 121)) | (1L << (GENERAL_SYMBOL - 121)) | (1L << (GEOMETRY_SYMBOL - 121)) | (1L << (GEOMETRYCOLLECTION_SYMBOL - 121)) | (1L << (GET_FORMAT_SYMBOL - 121)) | (1L << (GRANTS_SYMBOL - 121)) | (1L << (GLOBAL_SYMBOL - 121)) | (1L << (HASH_SYMBOL - 121)) | (1L << (HOSTS_SYMBOL - 121)) | (1L << (HOUR_SYMBOL - 121)) | (1L << (IDENTIFIED_SYMBOL - 121)) | (1L << (IGNORE_SERVER_IDS_SYMBOL - 121)) | (1L << (INVOKER_SYMBOL - 121)) | (1L << (INDEXES_SYMBOL - 121)) | (1L << (INITIAL_SIZE_SYMBOL - 121)) | (1L << (INSTANCE_SYMBOL - 121)) | (1L << (IO_SYMBOL - 121)) | (1L << (IPC_SYMBOL - 121)) | (1L << (ISOLATION_SYMBOL - 121)) | (1L << (ISSUER_SYMBOL - 121)) | (1L << (INSERT_METHOD_SYMBOL - 121)) | (1L << (JSON_SYMBOL - 121)) | (1L << (KEY_BLOCK_SIZE_SYMBOL - 121)) | (1L << (LAST_SYMBOL - 121)) | (1L << (LEAVES_SYMBOL - 121)) | (1L << (LESS_SYMBOL - 121)) | (1L << (LEVEL_SYMBOL - 121)) | (1L << (LINESTRING_SYMBOL - 121)) | (1L << (LIST_SYMBOL - 121)) | (1L << (LOCAL_SYMBOL - 121)) | (1L << (LOCKS_SYMBOL - 121)) | (1L << (LOGFILE_SYMBOL - 121)) | (1L << (LOGS_SYMBOL - 121)) | (1L << (MAX_ROWS_SYMBOL - 121)))) != 0) || ((((_la - 185)) & ~0x3f) == 0 && ((1L << (_la - 185)) & ((1L << (MASTER_SYMBOL - 185)) | (1L << (MASTER_HEARTBEAT_PERIOD_SYMBOL - 185)) | (1L << (MASTER_HOST_SYMBOL - 185)) | (1L << (MASTER_PORT_SYMBOL - 185)) | (1L << (MASTER_LOG_FILE_SYMBOL - 185)) | (1L << (MASTER_LOG_POS_SYMBOL - 185)) | (1L << (MASTER_USER_SYMBOL - 185)) | (1L << (MASTER_PASSWORD_SYMBOL - 185)) | (1L << (MASTER_SERVER_ID_SYMBOL - 185)) | (1L << (MASTER_CONNECT_RETRY_SYMBOL - 185)) | (1L << (MASTER_RETRY_COUNT_SYMBOL - 185)) | (1L << (MASTER_DELAY_SYMBOL - 185)) | (1L << (MASTER_SSL_SYMBOL - 185)) | (1L << (MASTER_SSL_CA_SYMBOL - 185)) | (1L << (MASTER_SSL_CAPATH_SYMBOL - 185)) | (1L << (MASTER_TLS_VERSION_SYMBOL - 185)) | (1L << (MASTER_SSL_CERT_SYMBOL - 185)) | (1L << (MASTER_SSL_CIPHER_SYMBOL - 185)) | (1L << (MASTER_SSL_CRL_SYMBOL - 185)) | (1L << (MASTER_SSL_CRLPATH_SYMBOL - 185)) | (1L << (MASTER_SSL_KEY_SYMBOL - 185)) | (1L << (MASTER_AUTO_POSITION_SYMBOL - 185)) | (1L << (MAX_CONNECTIONS_PER_HOUR_SYMBOL - 185)) | (1L << (MAX_QUERIES_PER_HOUR_SYMBOL - 185)) | (1L << (MAX_STATEMENT_TIME_SYMBOL - 185)) | (1L << (MAX_SIZE_SYMBOL - 185)) | (1L << (MAX_UPDATES_PER_HOUR_SYMBOL - 185)) | (1L << (MAX_USER_CONNECTIONS_SYMBOL - 185)) | (1L << (MEDIUM_SYMBOL - 185)) | (1L << (MEMORY_SYMBOL - 185)) | (1L << (MERGE_SYMBOL - 185)) | (1L << (MESSAGE_TEXT_SYMBOL - 185)) | (1L << (MICROSECOND_SYMBOL - 185)) | (1L << (MIGRATE_SYMBOL - 185)) | (1L << (MINUTE_SYMBOL - 185)) | (1L << (MIN_ROWS_SYMBOL - 185)) | (1L << (MODIFY_SYMBOL - 185)) | (1L << (MODE_SYMBOL - 185)) | (1L << (MONTH_SYMBOL - 185)) | (1L << (MULTILINESTRING_SYMBOL - 185)) | (1L << (MULTIPOINT_SYMBOL - 185)) | (1L << (MULTIPOLYGON_SYMBOL - 185)) | (1L << (MUTEX_SYMBOL - 185)) | (1L << (MYSQL_ERRNO_SYMBOL - 185)) | (1L << (NAME_SYMBOL - 185)) | (1L << (NAMES_SYMBOL - 185)) | (1L << (NATIONAL_SYMBOL - 185)) | (1L << (NCHAR_SYMBOL - 185)) | (1L << (NDBCLUSTER_SYMBOL - 185)) | (1L << (NEVER_SYMBOL - 185)) | (1L << (NEXT_SYMBOL - 185)) | (1L << (NEW_SYMBOL - 185)) | (1L << (NO_WAIT_SYMBOL - 185)) | (1L << (NODEGROUP_SYMBOL - 185)) | (1L << (NUMBER_SYMBOL - 185)) | (1L << (NVARCHAR_SYMBOL - 185)) | (1L << (OFFSET_SYMBOL - 185)) | (1L << (OLD_PASSWORD_SYMBOL - 185)) | (1L << (ONE_SYMBOL - 185)) | (1L << (PACK_KEYS_SYMBOL - 185)) | (1L << (PAGE_SYMBOL - 185)) | (1L << (PARTIAL_SYMBOL - 185)))) != 0) || ((((_la - 249)) & ~0x3f) == 0 && ((1L << (_la - 249)) & ((1L << (PARTITIONING_SYMBOL - 249)) | (1L << (PARTITIONS_SYMBOL - 249)) | (1L << (PASSWORD_SYMBOL - 249)) | (1L << (PHASE_SYMBOL - 249)) | (1L << (PLUGIN_DIR_SYMBOL - 249)) | (1L << (PLUGIN_SYMBOL - 249)) | (1L << (PLUGINS_SYMBOL - 249)) | (1L << (POINT_SYMBOL - 249)) | (1L << (POLYGON_SYMBOL - 249)) | (1L << (PRESERVE_SYMBOL - 249)) | (1L << (PREV_SYMBOL - 249)) | (1L << (PRIVILEGES_SYMBOL - 249)) | (1L << (PROCESSLIST_SYMBOL - 249)) | (1L << (PROFILE_SYMBOL - 249)) | (1L << (PROFILES_SYMBOL - 249)) | (1L << (QUARTER_SYMBOL - 249)) | (1L << (QUERY_SYMBOL - 249)) | (1L << (QUICK_SYMBOL - 249)) | (1L << (READ_ONLY_SYMBOL - 249)) | (1L << (REBUILD_SYMBOL - 249)) | (1L << (RECOVER_SYMBOL - 249)) | (1L << (REDO_BUFFER_SIZE_SYMBOL - 249)) | (1L << (REDOFILE_SYMBOL - 249)) | (1L << (REDUNDANT_SYMBOL - 249)) | (1L << (RELAY_SYMBOL - 249)) | (1L << (RELAYLOG_SYMBOL - 249)) | (1L << (RELAY_LOG_FILE_SYMBOL - 249)) | (1L << (RELAY_LOG_POS_SYMBOL - 249)) | (1L << (RELAY_THREAD_SYMBOL - 249)) | (1L << (REORGANIZE_SYMBOL - 249)) | (1L << (REPEATABLE_SYMBOL - 249)) | (1L << (REPLICATE_DO_DB_SYMBOL - 249)) | (1L << (REPLICATE_IGNORE_DB_SYMBOL - 249)) | (1L << (REPLICATE_DO_TABLE_SYMBOL - 249)) | (1L << (REPLICATE_IGNORE_TABLE_SYMBOL - 249)) | (1L << (REPLICATE_WILD_DO_TABLE_SYMBOL - 249)) | (1L << (REPLICATE_WILD_IGNORE_TABLE_SYMBOL - 249)) | (1L << (REPLICATE_REWRITE_DB_SYMBOL - 249)) | (1L << (RESUME_SYMBOL - 249)) | (1L << (RETURNED_SQLSTATE_SYMBOL - 249)) | (1L << (RETURNS_SYMBOL - 249)) | (1L << (REVERSE_SYMBOL - 249)) | (1L << (ROLLUP_SYMBOL - 249)) | (1L << (ROTATE_SYMBOL - 249)) | (1L << (ROUTINE_SYMBOL - 249)) | (1L << (ROW_COUNT_SYMBOL - 249)) | (1L << (ROW_FORMAT_SYMBOL - 249)) | (1L << (RTREE_SYMBOL - 249)) | (1L << (SCHEDULE_SYMBOL - 249)) | (1L << (SCHEMA_NAME_SYMBOL - 249)) | (1L << (SECOND_SYMBOL - 249)) | (1L << (SERIAL_SYMBOL - 249)) | (1L << (SERIALIZABLE_SYMBOL - 249)) | (1L << (SESSION_SYMBOL - 249)) | (1L << (SIMPLE_SYMBOL - 249)) | (1L << (SHARE_SYMBOL - 249)) | (1L << (SLOW_SYMBOL - 249)) | (1L << (SNAPSHOT_SYMBOL - 249)))) != 0) || ((((_la - 313)) & ~0x3f) == 0 && ((1L << (_la - 313)) & ((1L << (SOUNDS_SYMBOL - 313)) | (1L << (SOURCE_SYMBOL - 313)) | (1L << (SQL_AFTER_GTIDS_SYMBOL - 313)) | (1L << (SQL_AFTER_MTS_GAPS_SYMBOL - 313)) | (1L << (SQL_BEFORE_GTIDS_SYMBOL - 313)) | (1L << (SQL_CACHE_SYMBOL - 313)) | (1L << (SQL_BUFFER_RESULT_SYMBOL - 313)) | (1L << (SQL_NO_CACHE_SYMBOL - 313)) | (1L << (SQL_THREAD_SYMBOL - 313)) | (1L << (STACKED_SYMBOL - 313)) | (1L << (STARTS_SYMBOL - 313)) | (1L << (STATS_AUTO_RECALC_SYMBOL - 313)) | (1L << (STATS_PERSISTENT_SYMBOL - 313)) | (1L << (STATS_SAMPLE_PAGES_SYMBOL - 313)) | (1L << (STATUS_SYMBOL - 313)) | (1L << (STORAGE_SYMBOL - 313)) | (1L << (STRING_SYMBOL - 313)) | (1L << (SUBCLASS_ORIGIN_SYMBOL - 313)) | (1L << (SUBDATE_SYMBOL - 313)) | (1L << (SUBJECT_SYMBOL - 313)) | (1L << (SUBPARTITION_SYMBOL - 313)) | (1L << (SUBPARTITIONS_SYMBOL - 313)) | (1L << (SUPER_SYMBOL - 313)) | (1L << (SUSPEND_SYMBOL - 313)) | (1L << (SWAPS_SYMBOL - 313)) | (1L << (SWITCHES_SYMBOL - 313)) | (1L << (TABLE_NAME_SYMBOL - 313)) | (1L << (TABLES_SYMBOL - 313)) | (1L << (TABLE_CHECKSUM_SYMBOL - 313)) | (1L << (TABLESPACE_SYMBOL - 313)) | (1L << (TEMPORARY_SYMBOL - 313)) | (1L << (TEMPTABLE_SYMBOL - 313)) | (1L << (TEXT_SYMBOL - 313)) | (1L << (THAN_SYMBOL - 313)) | (1L << (TRANSACTION_SYMBOL - 313)) | (1L << (TRIGGERS_SYMBOL - 313)) | (1L << (TIMESTAMP_SYMBOL - 313)) | (1L << (TIMESTAMP_ADD_SYMBOL - 313)) | (1L << (TIMESTAMP_DIFF_SYMBOL - 313)) | (1L << (TIME_SYMBOL - 313)) | (1L << (TYPES_SYMBOL - 313)) | (1L << (TYPE_SYMBOL - 313)) | (1L << (UDF_RETURNS_SYMBOL - 313)) | (1L << (UNCOMMITTED_SYMBOL - 313)) | (1L << (UNDEFINED_SYMBOL - 313)) | (1L << (UNDO_BUFFER_SIZE_SYMBOL - 313)) | (1L << (UNDOFILE_SYMBOL - 313)) | (1L << (UNKNOWN_SYMBOL - 313)) | (1L << (UNTIL_SYMBOL - 313)) | (1L << (USER_RESOURCES_SYMBOL - 313)) | (1L << (USER_SYMBOL - 313)) | (1L << (USE_FRM_SYMBOL - 313)) | (1L << (VARIABLES_SYMBOL - 313)) | (1L << (VIEW_SYMBOL - 313)) | (1L << (VALUE_SYMBOL - 313)) | (1L << (WARNINGS_SYMBOL - 313)) | (1L << (WAIT_SYMBOL - 313)) | (1L << (WEEK_SYMBOL - 313)) | (1L << (WORK_SYMBOL - 313)) | (1L << (WEIGHT_STRING_SYMBOL - 313)) | (1L << (X509_SYMBOL - 313)) | (1L << (XID_SYMBOL - 313)) | (1L << (XML_SYMBOL - 313)))) != 0) || _la==YEAR_SYMBOL || _la==ANALYSE_SYMBOL || ((((_la - 694)) & ~0x3f) == 0 && ((1L << (_la - 694)) & ((1L << (COMPONENT_SYMBOL - 694)) | (1L << (SKIP_SYMBOL - 694)) | (1L << (LOCKED_SYMBOL - 694)) | (1L << (NOWAIT_SYMBOL - 694)) | (1L << (HISTOGRAM_SYMBOL - 694)) | (1L << (BUCKETS_SYMBOL - 694)) | (1L << (REMOTE_SYMBOL - 694)) | (1L << (EXCLUDE_SYMBOL - 694)) | (1L << (FOLLOWING_SYMBOL - 694)) | (1L << (NULLS_SYMBOL - 694)) | (1L << (OTHERS_SYMBOL - 694)) | (1L << (PRECEDING_SYMBOL - 694)) | (1L << (RESPECT_SYMBOL - 694)) | (1L << (TIES_SYMBOL - 694)) | (1L << (UNBOUNDED_SYMBOL - 694)) | (1L << (NESTED_SYMBOL - 694)) | (1L << (ORDINALITY_SYMBOL - 694)) | (1L << (PATH_SYMBOL - 694)) | (1L << (HISTORY_SYMBOL - 694)) | (1L << (REUSE_SYMBOL - 694)) | (1L << (SRID_SYMBOL - 694)) | (1L << (THREAD_PRIORITY_SYMBOL - 694)) | (1L << (VCPU_SYMBOL - 694)) | (1L << (MASTER_PUBLIC_KEY_PATH_SYMBOL - 694)) | (1L << (DESCRIPTION_SYMBOL - 694)) | (1L << (ORGANIZATION_SYMBOL - 694)) | (1L << (OPTIONAL_SYMBOL - 694)) | (1L << (ACTIVE_SYMBOL - 694)) | (1L << (INACTIVE_SYMBOL - 694)) | (1L << (RETAIN_SYMBOL - 694)))) != 0) || _la==OLD_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8350);
				if (!(serverVersion < 50709)) throw new FailedPredicateException(this, "serverVersion < 50709");
				setState(8351);
				match(SHUTDOWN_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8352);
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				setState(8353);
				_la = _input.LA(1);
				if ( !(_la==CUBE_SYMBOL || _la==IMPORT_SYMBOL || ((((_la - 298)) & ~0x3f) == 0 && ((1L << (_la - 298)) & ((1L << (ROWS_SYMBOL - 298)) | (1L << (ROW_SYMBOL - 298)) | (1L << (FUNCTION_SYMBOL - 298)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8354);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(8355);
				_la = _input.LA(1);
				if ( !(_la==SUPER_SYMBOL || _la==EXCHANGE_SYMBOL || _la==EXPIRE_SYMBOL || _la==ONLY_SYMBOL || _la==VALIDATION_SYMBOL || _la==WITHOUT_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8356);
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				setState(8357);
				match(ADMIN_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2:
			return simpleStatement_sempred((SimpleStatementContext)_localctx, predIndex);
		case 3:
			return alterStatement_sempred((AlterStatementContext)_localctx, predIndex);
		case 4:
			return alterDatabase_sempred((AlterDatabaseContext)_localctx, predIndex);
		case 10:
			return alterTable_sempred((AlterTableContext)_localctx, predIndex);
		case 14:
			return standaloneAlterCommands_sempred((StandaloneAlterCommandsContext)_localctx, predIndex);
		case 15:
			return alterPartition_sempred((AlterPartitionContext)_localctx, predIndex);
		case 18:
			return alterListItem_sempred((AlterListItemContext)_localctx, predIndex);
		case 25:
			return withValidation_sempred((WithValidationContext)_localctx, predIndex);
		case 29:
			return alterTablespace_sempred((AlterTablespaceContext)_localctx, predIndex);
		case 40:
			return createStatement_sempred((CreateStatementContext)_localctx, predIndex);
		case 42:
			return createDatabaseOption_sempred((CreateDatabaseOptionContext)_localctx, predIndex);
		case 55:
			return createIndex_sempred((CreateIndexContext)_localctx, predIndex);
		case 66:
			return tsDataFileName_sempred((TsDataFileNameContext)_localctx, predIndex);
		case 69:
			return tablespaceOption_sempred((TablespaceOptionContext)_localctx, predIndex);
		case 86:
			return triggerFollowsPrecedesClause_sempred((TriggerFollowsPrecedesClauseContext)_localctx, predIndex);
		case 91:
			return dropStatement_sempred((DropStatementContext)_localctx, predIndex);
		case 112:
			return deleteStatement_sempred((DeleteStatementContext)_localctx, predIndex);
		case 113:
			return partitionDelete_sempred((PartitionDeleteContext)_localctx, predIndex);
		case 115:
			return doStatement_sempred((DoStatementContext)_localctx, predIndex);
		case 118:
			return insertStatement_sempred((InsertStatementContext)_localctx, predIndex);
		case 137:
			return queryExpression_sempred((QueryExpressionContext)_localctx, predIndex);
		case 138:
			return queryExpressionBody_sempred((QueryExpressionBodyContext)_localctx, predIndex);
		case 140:
			return querySpecification_sempred((QuerySpecificationContext)_localctx, predIndex);
		case 164:
			return olapOption_sempred((OlapOptionContext)_localctx, predIndex);
		case 169:
			return selectOption_sempred((SelectOptionContext)_localctx, predIndex);
		case 170:
			return lockingClause_sempred((LockingClauseContext)_localctx, predIndex);
		case 171:
			return lockStrengh_sempred((LockStrenghContext)_localctx, predIndex);
		case 177:
			return tableReference_sempred((TableReferenceContext)_localctx, predIndex);
		case 183:
			return tableFactor_sempred((TableFactorContext)_localctx, predIndex);
		case 186:
			return derivedTable_sempred((DerivedTableContext)_localctx, predIndex);
		case 190:
			return jtColumn_sempred((JtColumnContext)_localctx, predIndex);
		case 196:
			return tableAlias_sempred((TableAliasContext)_localctx, predIndex);
		case 205:
			return updateStatement_sempred((UpdateStatementContext)_localctx, predIndex);
		case 209:
			return transactionCharacteristic_sempred((TransactionCharacteristicContext)_localctx, predIndex);
		case 211:
			return lockStatement_sempred((LockStatementContext)_localctx, predIndex);
		case 215:
			return xaConvert_sempred((XaConvertContext)_localctx, predIndex);
		case 217:
			return replicationStatement_sempred((ReplicationStatementContext)_localctx, predIndex);
		case 218:
			return resetOption_sempred((ResetOptionContext)_localctx, predIndex);
		case 219:
			return masterResetOptions_sempred((MasterResetOptionsContext)_localctx, predIndex);
		case 228:
			return changeReplication_sempred((ChangeReplicationContext)_localctx, predIndex);
		case 236:
			return slaveUntilOptions_sempred((SlaveUntilOptionsContext)_localctx, predIndex);
		case 237:
			return slaveConnectionOptions_sempred((SlaveConnectionOptionsContext)_localctx, predIndex);
		case 244:
			return cloneStatement_sempred((CloneStatementContext)_localctx, predIndex);
		case 247:
			return accountManagementStatement_sempred((AccountManagementStatementContext)_localctx, predIndex);
		case 248:
			return alterUser_sempred((AlterUserContext)_localctx, predIndex);
		case 249:
			return alterUserTail_sempred((AlterUserTailContext)_localctx, predIndex);
		case 251:
			return createUser_sempred((CreateUserContext)_localctx, predIndex);
		case 252:
			return createUserTail_sempred((CreateUserTailContext)_localctx, predIndex);
		case 253:
			return defaultRoleClause_sempred((DefaultRoleClauseContext)_localctx, predIndex);
		case 256:
			return accountLockPasswordExpireOptions_sempred((AccountLockPasswordExpireOptionsContext)_localctx, predIndex);
		case 257:
			return dropUser_sempred((DropUserContext)_localctx, predIndex);
		case 258:
			return grant_sempred((GrantContext)_localctx, predIndex);
		case 259:
			return grantTargetList_sempred((GrantTargetListContext)_localctx, predIndex);
		case 260:
			return grantOptions_sempred((GrantOptionsContext)_localctx, predIndex);
		case 264:
			return versionedRequireClause_sempred((VersionedRequireClauseContext)_localctx, predIndex);
		case 266:
			return revoke_sempred((RevokeContext)_localctx, predIndex);
		case 267:
			return onTypeTo_sempred((OnTypeToContext)_localctx, predIndex);
		case 270:
			return roleOrPrivilege_sempred((RoleOrPrivilegeContext)_localctx, predIndex);
		case 271:
			return grantIdentifier_sempred((GrantIdentifierContext)_localctx, predIndex);
		case 278:
			return tableAdministrationStatement_sempred((TableAdministrationStatementContext)_localctx, predIndex);
		case 284:
			return startOptionValueList_sempred((StartOptionValueListContext)_localctx, predIndex);
		case 289:
			return optionValueNoOptionType_sempred((OptionValueNoOptionTypeContext)_localctx, predIndex);
		case 294:
			return setExprOrDefault_sempred((SetExprOrDefaultContext)_localctx, predIndex);
		case 295:
			return showStatement_sempred((ShowStatementContext)_localctx, predIndex);
		case 296:
			return showCommandType_sempred((ShowCommandTypeContext)_localctx, predIndex);
		case 297:
			return nonBlocking_sempred((NonBlockingContext)_localctx, predIndex);
		case 301:
			return otherAdministrativeStatement_sempred((OtherAdministrativeStatementContext)_localctx, predIndex);
		case 309:
			return flushOption_sempred((FlushOptionContext)_localctx, predIndex);
		case 312:
			return flushTablesOptions_sempred((FlushTablesOptionsContext)_localctx, predIndex);
		case 327:
			return utilityStatement_sempred((UtilityStatementContext)_localctx, predIndex);
		case 329:
			return explainCommand_sempred((ExplainCommandContext)_localctx, predIndex);
		case 330:
			return explainableStatement_sempred((ExplainableStatementContext)_localctx, predIndex);
		case 334:
			return expr_sempred((ExprContext)_localctx, predIndex);
		case 335:
			return boolPri_sempred((BoolPriContext)_localctx, predIndex);
		case 337:
			return predicate_sempred((PredicateContext)_localctx, predIndex);
		case 339:
			return bitExpr_sempred((BitExprContext)_localctx, predIndex);
		case 340:
			return simpleExpr_sempred((SimpleExprContext)_localctx, predIndex);
		case 341:
			return arrayCast_sempred((ArrayCastContext)_localctx, predIndex);
		case 342:
			return jsonOperator_sempred((JsonOperatorContext)_localctx, predIndex);
		case 343:
			return sumExpr_sempred((SumExprContext)_localctx, predIndex);
		case 354:
			return runtimeFunctionCall_sempred((RuntimeFunctionCallContext)_localctx, predIndex);
		case 355:
			return geometryFunction_sempred((GeometryFunctionContext)_localctx, predIndex);
		case 357:
			return fractionalPrecision_sempred((FractionalPrecisionContext)_localctx, predIndex);
		case 369:
			return internalVariableName_sempred((InternalVariableNameContext)_localctx, predIndex);
		case 373:
			return castType_sempred((CastTypeContext)_localctx, predIndex);
		case 387:
			return channel_sempred((ChannelContext)_localctx, predIndex);
		case 416:
			return getDiagnostics_sempred((GetDiagnosticsContext)_localctx, predIndex);
		case 429:
			return checkOrReferences_sempred((CheckOrReferencesContext)_localctx, predIndex);
		case 432:
			return tableConstraintDef_sempred((TableConstraintDefContext)_localctx, predIndex);
		case 434:
			return fieldDefinition_sempred((FieldDefinitionContext)_localctx, predIndex);
		case 435:
			return columnAttribute_sempred((ColumnAttributeContext)_localctx, predIndex);
		case 445:
			return keyListVariants_sempred((KeyListVariantsContext)_localctx, predIndex);
		case 448:
			return commonIndexOption_sempred((CommonIndexOptionContext)_localctx, predIndex);
		case 454:
			return dataType_sempred((DataTypeContext)_localctx, predIndex);
		case 464:
			return charsetName_sempred((CharsetNameContext)_localctx, predIndex);
		case 465:
			return collationName_sempred((CollationNameContext)_localctx, predIndex);
		case 468:
			return createTableOption_sempred((CreateTableOptionContext)_localctx, predIndex);
		case 476:
			return partitionKeyAlgorithm_sempred((PartitionKeyAlgorithmContext)_localctx, predIndex);
		case 503:
			return createUserEntry_sempred((CreateUserEntryContext)_localctx, predIndex);
		case 514:
			return usePartition_sempred((UsePartitionContext)_localctx, predIndex);
		case 516:
			return columnName_sempred((ColumnNameContext)_localctx, predIndex);
		case 559:
			return pureIdentifier_sempred((PureIdentifierContext)_localctx, predIndex);
		case 564:
			return simpleIdentifier_sempred((SimpleIdentifierContext)_localctx, predIndex);
		case 569:
			return real_ulonglong_number_sempred((Real_ulonglong_numberContext)_localctx, predIndex);
		case 573:
			return textStringLiteral_sempred((TextStringLiteralContext)_localctx, predIndex);
		case 575:
			return textStringHash_sempred((TextStringHashContext)_localctx, predIndex);
		case 595:
			return identifierKeyword_sempred((IdentifierKeywordContext)_localctx, predIndex);
		case 598:
			return labelKeyword_sempred((LabelKeywordContext)_localctx, predIndex);
		case 601:
			return roleKeyword_sempred((RoleKeywordContext)_localctx, predIndex);
		case 604:
			return roleOrIdentifierKeyword_sempred((RoleOrIdentifierKeywordContext)_localctx, predIndex);
		case 605:
			return roleOrLabelKeyword_sempred((RoleOrLabelKeywordContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean simpleStatement_sempred(SimpleStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return serverVersion >= 80000;
		case 1:
			return serverVersion >= 80000;
		case 2:
			return serverVersion >= 80000;
		case 3:
			return serverVersion >= 50604;
		}
		return true;
	}
	private boolean alterStatement_sempred(AlterStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4:
			return serverVersion >= 80014;
		case 5:
			return serverVersion >= 50713;
		}
		return true;
	}
	private boolean alterDatabase_sempred(AlterDatabaseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6:
			return serverVersion < 80000;
		}
		return true;
	}
	private boolean alterTable_sempred(AlterTableContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7:
			return serverVersion < 50700;
		}
		return true;
	}
	private boolean standaloneAlterCommands_sempred(StandaloneAlterCommandsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8:
			return serverVersion >= 80014;
		}
		return true;
	}
	private boolean alterPartition_sempred(AlterPartitionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9:
			return serverVersion >= 50704;
		case 10:
			return serverVersion >= 50704;
		}
		return true;
	}
	private boolean alterListItem_sempred(AlterListItemContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11:
			return serverVersion >= 50700;
		case 12:
			return serverVersion < 50700;
		case 13:
			return serverVersion >= 80014;
		case 14:
			return serverVersion >= 80000;
		case 15:
			return serverVersion >= 80017;
		case 16:
			return serverVersion >= 80000;
		case 17:
			return serverVersion >= 50700;
		case 18:
			return serverVersion >= 80014;
		case 19:
			return serverVersion >= 50708 && serverVersion < 80000;
		}
		return true;
	}
	private boolean withValidation_sempred(WithValidationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 20:
			return serverVersion >= 50706;
		}
		return true;
	}
	private boolean alterTablespace_sempred(AlterTablespaceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 21:
			return serverVersion < 80000;
		case 22:
			return serverVersion >= 80014;
		}
		return true;
	}
	private boolean createStatement_sempred(CreateStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 23:
			return serverVersion >= 80000;
		case 24:
			return serverVersion >= 80011;
		case 25:
			return serverVersion >= 80014;
		}
		return true;
	}
	private boolean createDatabaseOption_sempred(CreateDatabaseOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 26:
			return serverVersion >= 80016;
		}
		return true;
	}
	private boolean createIndex_sempred(CreateIndexContext _localctx, int predIndex) {
		switch (predIndex) {
		case 27:
			return serverVersion >= 80014;
		}
		return true;
	}
	private boolean tsDataFileName_sempred(TsDataFileNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 28:
			return serverVersion >= 80014;
		}
		return true;
	}
	private boolean tablespaceOption_sempred(TablespaceOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 29:
			return serverVersion >= 50707;
		case 30:
			return serverVersion >= 80014;
		}
		return true;
	}
	private boolean triggerFollowsPrecedesClause_sempred(TriggerFollowsPrecedesClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 31:
			return serverVersion >= 50700;
		}
		return true;
	}
	private boolean dropStatement_sempred(DropStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 32:
			return serverVersion >= 80000;
		case 33:
			return serverVersion >= 80011;
		case 34:
			return serverVersion >= 80014;
		}
		return true;
	}
	private boolean deleteStatement_sempred(DeleteStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 35:
			return serverVersion >= 80000;
		case 36:
			return serverVersion >= 80017;
		}
		return true;
	}
	private boolean partitionDelete_sempred(PartitionDeleteContext _localctx, int predIndex) {
		switch (predIndex) {
		case 37:
			return serverVersion >= 50602;
		}
		return true;
	}
	private boolean doStatement_sempred(DoStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 38:
			return serverVersion < 50709;
		case 39:
			return serverVersion >= 50709;
		}
		return true;
	}
	private boolean insertStatement_sempred(InsertStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 40:
			return  serverVersion >= 80018;
		case 41:
			return  serverVersion >= 80018;
		}
		return true;
	}
	private boolean queryExpression_sempred(QueryExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 42:
			return serverVersion >= 80000;
		case 43:
			return serverVersion < 80000;
		case 44:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean queryExpressionBody_sempred(QueryExpressionBodyContext _localctx, int predIndex) {
		switch (predIndex) {
		case 45:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean querySpecification_sempred(QuerySpecificationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 46:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean olapOption_sempred(OlapOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 47:
			return serverVersion < 80000;
		}
		return true;
	}
	private boolean selectOption_sempred(SelectOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 48:
			return serverVersion < 80000;
		case 49:
			return serverVersion >= 50704 && serverVersion < 50708;
		}
		return true;
	}
	private boolean lockingClause_sempred(LockingClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 50:
			return serverVersion >= 80000;
		case 51:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean lockStrengh_sempred(LockStrenghContext _localctx, int predIndex) {
		switch (predIndex) {
		case 52:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean tableReference_sempred(TableReferenceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 53:
			return serverVersion < 80017;
		}
		return true;
	}
	private boolean tableFactor_sempred(TableFactorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 54:
			return serverVersion >= 80004;
		}
		return true;
	}
	private boolean derivedTable_sempred(DerivedTableContext _localctx, int predIndex) {
		switch (predIndex) {
		case 55:
			return serverVersion >= 80000;
		case 56:
			return serverVersion >= 80014;
		}
		return true;
	}
	private boolean jtColumn_sempred(JtColumnContext _localctx, int predIndex) {
		switch (predIndex) {
		case 57:
			return serverVersion >= 80014;
		}
		return true;
	}
	private boolean tableAlias_sempred(TableAliasContext _localctx, int predIndex) {
		switch (predIndex) {
		case 58:
			return serverVersion < 80017;
		}
		return true;
	}
	private boolean updateStatement_sempred(UpdateStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 59:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean transactionCharacteristic_sempred(TransactionCharacteristicContext _localctx, int predIndex) {
		switch (predIndex) {
		case 60:
			return serverVersion >= 50605;
		}
		return true;
	}
	private boolean lockStatement_sempred(LockStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 61:
			return serverVersion >= 80000;
		case 62:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean xaConvert_sempred(XaConvertContext _localctx, int predIndex) {
		switch (predIndex) {
		case 63:
			return serverVersion >= 50704;
		}
		return true;
	}
	private boolean replicationStatement_sempred(ReplicationStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 64:
			return serverVersion > 80000;
		case 65:
			return serverVersion >= 50700;
		case 66:
			return serverVersion > 50706;
		}
		return true;
	}
	private boolean resetOption_sempred(ResetOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 67:
			return serverVersion < 80000;
		}
		return true;
	}
	private boolean masterResetOptions_sempred(MasterResetOptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 68:
			return serverVersion >= 80000;
		case 69:
			return serverVersion < 80017;
		case 70:
			return serverVersion >= 80017;
		}
		return true;
	}
	private boolean changeReplication_sempred(ChangeReplicationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 71:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean slaveUntilOptions_sempred(SlaveUntilOptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 72:
			return serverVersion >= 50606;
		case 73:
			return serverVersion >= 50606;
		}
		return true;
	}
	private boolean slaveConnectionOptions_sempred(SlaveConnectionOptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 74:
			return serverVersion >= 50604;
		}
		return true;
	}
	private boolean cloneStatement_sempred(CloneStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 75:
			return serverVersion >= 80014;
		}
		return true;
	}
	private boolean accountManagementStatement_sempred(AccountManagementStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 76:
			return serverVersion >= 50606;
		case 77:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean alterUser_sempred(AlterUserContext _localctx, int predIndex) {
		switch (predIndex) {
		case 78:
			return serverVersion >= 50706;
		}
		return true;
	}
	private boolean alterUserTail_sempred(AlterUserTailContext _localctx, int predIndex) {
		switch (predIndex) {
		case 79:
			return serverVersion < 80014;
		case 80:
			return serverVersion >= 80014;
		case 81:
			return serverVersion >= 50706;
		case 82:
			return serverVersion >= 80014;
		case 83:
			return serverVersion >= 80014;
		case 84:
			return serverVersion >= 80014;
		case 85:
			return serverVersion >= 80000;
		case 86:
			return serverVersion >= 80018;
		}
		return true;
	}
	private boolean createUser_sempred(CreateUserContext _localctx, int predIndex) {
		switch (predIndex) {
		case 87:
			return serverVersion >= 50706;
		}
		return true;
	}
	private boolean createUserTail_sempred(CreateUserTailContext _localctx, int predIndex) {
		switch (predIndex) {
		case 88:
			return serverVersion >= 50706;
		}
		return true;
	}
	private boolean defaultRoleClause_sempred(DefaultRoleClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 89:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean accountLockPasswordExpireOptions_sempred(AccountLockPasswordExpireOptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 90:
			return serverVersion >= 80014;
		}
		return true;
	}
	private boolean dropUser_sempred(DropUserContext _localctx, int predIndex) {
		switch (predIndex) {
		case 91:
			return serverVersion >= 50706;
		}
		return true;
	}
	private boolean grant_sempred(GrantContext _localctx, int predIndex) {
		switch (predIndex) {
		case 92:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean grantTargetList_sempred(GrantTargetListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 93:
			return serverVersion < 80011;
		case 94:
			return serverVersion >= 80011;
		}
		return true;
	}
	private boolean grantOptions_sempred(GrantOptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 95:
			return serverVersion < 80011;
		case 96:
			return serverVersion >= 80011;
		}
		return true;
	}
	private boolean versionedRequireClause_sempred(VersionedRequireClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 97:
			return serverVersion < 80011;
		}
		return true;
	}
	private boolean revoke_sempred(RevokeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 98:
			return serverVersion >= 80000;
		case 99:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean onTypeTo_sempred(OnTypeToContext _localctx, int predIndex) {
		switch (predIndex) {
		case 100:
			return serverVersion < 80000;
		case 101:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean roleOrPrivilege_sempred(RoleOrPrivilegeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 102:
			return serverVersion > 80000;
		case 103:
			return serverVersion > 80000;
		}
		return true;
	}
	private boolean grantIdentifier_sempred(GrantIdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 104:
			return serverVersion >= 80017;
		}
		return true;
	}
	private boolean tableAdministrationStatement_sempred(TableAdministrationStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 105:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean startOptionValueList_sempred(StartOptionValueListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 106:
			return serverVersion < 50706;
		case 107:
			return serverVersion < 80014;
		case 108:
			return serverVersion >= 80018;
		}
		return true;
	}
	private boolean optionValueNoOptionType_sempred(OptionValueNoOptionTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 109:
			return serverVersion >= 80011;
		}
		return true;
	}
	private boolean setExprOrDefault_sempred(SetExprOrDefaultContext _localctx, int predIndex) {
		switch (predIndex) {
		case 110:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean showStatement_sempred(ShowStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 111:
			return serverVersion < 50700;
		case 112:
			return serverVersion >= 80000;
		case 113:
			return serverVersion < 50700;
		case 114:
			return serverVersion >= 50704;
		}
		return true;
	}
	private boolean showCommandType_sempred(ShowCommandTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 115:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean nonBlocking_sempred(NonBlockingContext _localctx, int predIndex) {
		switch (predIndex) {
		case 116:
			return serverVersion >= 50700 && serverVersion < 50706;
		}
		return true;
	}
	private boolean otherAdministrativeStatement_sempred(OtherAdministrativeStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 117:
			return serverVersion >= 50709;
		}
		return true;
	}
	private boolean flushOption_sempred(FlushOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 118:
			return serverVersion < 80000;
		case 119:
			return serverVersion >= 50706;
		}
		return true;
	}
	private boolean flushTablesOptions_sempred(FlushTablesOptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 120:
			return serverVersion >= 50606;
		}
		return true;
	}
	private boolean utilityStatement_sempred(UtilityStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 121:
			return serverVersion >= 80011;
		}
		return true;
	}
	private boolean explainCommand_sempred(ExplainCommandContext _localctx, int predIndex) {
		switch (predIndex) {
		case 122:
			return serverVersion < 80000;
		case 123:
			return serverVersion < 80000;
		case 124:
			return serverVersion >= 50605;
		case 125:
			return serverVersion >= 80018;
		}
		return true;
	}
	private boolean explainableStatement_sempred(ExplainableStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 126:
			return serverVersion >= 50603;
		case 127:
			return serverVersion >= 50700;
		}
		return true;
	}
	private boolean expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 128:
			return precpred(_ctx, 3);
		case 129:
			return precpred(_ctx, 2);
		case 130:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean boolPri_sempred(BoolPriContext _localctx, int predIndex) {
		switch (predIndex) {
		case 131:
			return precpred(_ctx, 3);
		case 132:
			return precpred(_ctx, 2);
		case 133:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean predicate_sempred(PredicateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 134:
			return serverVersion >= 80017;
		}
		return true;
	}
	private boolean bitExpr_sempred(BitExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 135:
			return precpred(_ctx, 7);
		case 136:
			return precpred(_ctx, 6);
		case 137:
			return precpred(_ctx, 5);
		case 138:
			return precpred(_ctx, 3);
		case 139:
			return precpred(_ctx, 2);
		case 140:
			return precpred(_ctx, 1);
		case 141:
			return precpred(_ctx, 4);
		}
		return true;
	}
	private boolean simpleExpr_sempred(SimpleExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 142:
			return serverVersion >= 80000;
		case 143:
			return serverVersion >= 80000;
		case 144:
			return precpred(_ctx, 15);
		case 145:
			return precpred(_ctx, 21);
		}
		return true;
	}
	private boolean arrayCast_sempred(ArrayCastContext _localctx, int predIndex) {
		switch (predIndex) {
		case 146:
			return serverVersion >= 80017;
		}
		return true;
	}
	private boolean jsonOperator_sempred(JsonOperatorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 147:
			return serverVersion >= 50708;
		case 148:
			return serverVersion >= 50713;
		}
		return true;
	}
	private boolean sumExpr_sempred(SumExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 149:
			return serverVersion >= 80000;
		case 150:
			return serverVersion >= 80000;
		case 151:
			return serverVersion >= 80000;
		case 152:
			return serverVersion >= 80000;
		case 153:
			return serverVersion >= 80000;
		case 154:
			return serverVersion >= 80000;
		case 155:
			return serverVersion >= 80000;
		case 156:
			return serverVersion >= 80000;
		case 157:
			return serverVersion >= 80000;
		case 158:
			return serverVersion >= 80000;
		case 159:
			return serverVersion >= 80000;
		case 160:
			return serverVersion >= 80000;
		case 161:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean runtimeFunctionCall_sempred(RuntimeFunctionCallContext _localctx, int predIndex) {
		switch (predIndex) {
		case 162:
			return serverVersion < 50607;
		case 163:
			return serverVersion < 80011;
		case 164:
			return serverVersion < 80000;
		}
		return true;
	}
	private boolean geometryFunction_sempred(GeometryFunctionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 165:
			return serverVersion < 50706;
		}
		return true;
	}
	private boolean fractionalPrecision_sempred(FractionalPrecisionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 166:
			return serverVersion >= 50604;
		}
		return true;
	}
	private boolean internalVariableName_sempred(InternalVariableNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 167:
			return serverVersion < 80017;
		case 168:
			return serverVersion >= 80017;
		}
		return true;
	}
	private boolean castType_sempred(CastTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 169:
			return serverVersion >= 50708;
		case 170:
			return serverVersion >= 80017;
		case 171:
			return serverVersion >= 80017;
		}
		return true;
	}
	private boolean channel_sempred(ChannelContext _localctx, int predIndex) {
		switch (predIndex) {
		case 172:
			return serverVersion >= 50706;
		}
		return true;
	}
	private boolean getDiagnostics_sempred(GetDiagnosticsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 173:
			return serverVersion >= 50700;
		}
		return true;
	}
	private boolean checkOrReferences_sempred(CheckOrReferencesContext _localctx, int predIndex) {
		switch (predIndex) {
		case 174:
			return serverVersion < 80016;
		}
		return true;
	}
	private boolean tableConstraintDef_sempred(TableConstraintDefContext _localctx, int predIndex) {
		switch (predIndex) {
		case 175:
			return serverVersion >= 80017;
		}
		return true;
	}
	private boolean fieldDefinition_sempred(FieldDefinitionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 176:
			return serverVersion >= 50707;
		case 177:
			return serverVersion < 80000;
		case 178:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean columnAttribute_sempred(ColumnAttributeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 179:
			return serverVersion >= 80014;
		case 180:
			return serverVersion >= 80013;
		case 181:
			return serverVersion >= 80000;
		case 182:
			return serverVersion >= 80017;
		case 183:
			return serverVersion >= 80017;
		}
		return true;
	}
	private boolean keyListVariants_sempred(KeyListVariantsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 184:
			return serverVersion >= 80013;
		case 185:
			return serverVersion < 80013;
		}
		return true;
	}
	private boolean commonIndexOption_sempred(CommonIndexOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 186:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean dataType_sempred(DataTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 187:
			return serverVersion >= 50708;
		}
		return true;
	}
	private boolean charsetName_sempred(CharsetNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 188:
			return serverVersion < 80011;
		}
		return true;
	}
	private boolean collationName_sempred(CollationNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 189:
			return serverVersion < 80011;
		case 190:
			return serverVersion >= 80018;
		}
		return true;
	}
	private boolean createTableOption_sempred(CreateTableOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 191:
			return serverVersion >= 80014;
		case 192:
			return serverVersion >= 50708;
		case 193:
			return serverVersion >= 50711;
		case 194:
			return serverVersion >= 50707;
		}
		return true;
	}
	private boolean partitionKeyAlgorithm_sempred(PartitionKeyAlgorithmContext _localctx, int predIndex) {
		switch (predIndex) {
		case 195:
			return serverVersion >= 50700;
		}
		return true;
	}
	private boolean createUserEntry_sempred(CreateUserEntryContext _localctx, int predIndex) {
		switch (predIndex) {
		case 196:
			return serverVersion < 80011;
		case 197:
			return serverVersion >= 50706;
		case 198:
			return serverVersion >= 80018;
		}
		return true;
	}
	private boolean usePartition_sempred(UsePartitionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 199:
			return serverVersion >= 50602;
		}
		return true;
	}
	private boolean columnName_sempred(ColumnNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 200:
			return serverVersion >= 80000;
		case 201:
			return serverVersion < 80000;
		}
		return true;
	}
	private boolean pureIdentifier_sempred(PureIdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 202:
			return isSqlModeActive(AnsiQuotes);
		}
		return true;
	}
	private boolean simpleIdentifier_sempred(SimpleIdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 203:
			return serverVersion < 80000;
		}
		return true;
	}
	private boolean real_ulonglong_number_sempred(Real_ulonglong_numberContext _localctx, int predIndex) {
		switch (predIndex) {
		case 204:
			return serverVersion >= 80017;
		}
		return true;
	}
	private boolean textStringLiteral_sempred(TextStringLiteralContext _localctx, int predIndex) {
		switch (predIndex) {
		case 205:
			return !isSqlModeActive(AnsiQuotes);
		}
		return true;
	}
	private boolean textStringHash_sempred(TextStringHashContext _localctx, int predIndex) {
		switch (predIndex) {
		case 206:
			return serverVersion >= 80017;
		}
		return true;
	}
	private boolean identifierKeyword_sempred(IdentifierKeywordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 207:
			return serverVersion < 80017;
		case 208:
			return serverVersion >= 50709;
		case 209:
			return serverVersion >= 80011;
		}
		return true;
	}
	private boolean labelKeyword_sempred(LabelKeywordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 210:
			return serverVersion < 80017;
		}
		return true;
	}
	private boolean roleKeyword_sempred(RoleKeywordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 211:
			return serverVersion < 80017;
		}
		return true;
	}
	private boolean roleOrIdentifierKeyword_sempred(RoleOrIdentifierKeywordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 212:
			return serverVersion >= 50709;
		case 213:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean roleOrLabelKeyword_sempred(RoleOrLabelKeywordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 214:
			return serverVersion < 50709;
		case 215:
			return serverVersion < 80000;
		case 216:
			return serverVersion >= 80000;
		case 217:
			return serverVersion >= 80014;
		}
		return true;
	}

	private static final int _serializedATNSegments = 4;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0311\u20ab\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
		"\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
		"\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
		"\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181"+
		"\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\4\u0184\t\u0184\4\u0185\t\u0185"+
		"\4\u0186\t\u0186\4\u0187\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\4\u018a"+
		"\t\u018a\4\u018b\t\u018b\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e\t\u018e"+
		"\4\u018f\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191\4\u0192\t\u0192\4\u0193"+
		"\t\u0193\4\u0194\t\u0194\4\u0195\t\u0195\4\u0196\t\u0196\4\u0197\t\u0197"+
		"\4\u0198\t\u0198\4\u0199\t\u0199\4\u019a\t\u019a\4\u019b\t\u019b\4\u019c"+
		"\t\u019c\4\u019d\t\u019d\4\u019e\t\u019e\4\u019f\t\u019f\4\u01a0\t\u01a0"+
		"\4\u01a1\t\u01a1\4\u01a2\t\u01a2\4\u01a3\t\u01a3\4\u01a4\t\u01a4\4\u01a5"+
		"\t\u01a5\4\u01a6\t\u01a6\4\u01a7\t\u01a7\4\u01a8\t\u01a8\4\u01a9\t\u01a9"+
		"\4\u01aa\t\u01aa\4\u01ab\t\u01ab\4\u01ac\t\u01ac\4\u01ad\t\u01ad\4\u01ae"+
		"\t\u01ae\4\u01af\t\u01af\4\u01b0\t\u01b0\4\u01b1\t\u01b1\4\u01b2\t\u01b2"+
		"\4\u01b3\t\u01b3\4\u01b4\t\u01b4\4\u01b5\t\u01b5\4\u01b6\t\u01b6\4\u01b7"+
		"\t\u01b7\4\u01b8\t\u01b8\4\u01b9\t\u01b9\4\u01ba\t\u01ba\4\u01bb\t\u01bb"+
		"\4\u01bc\t\u01bc\4\u01bd\t\u01bd\4\u01be\t\u01be\4\u01bf\t\u01bf\4\u01c0"+
		"\t\u01c0\4\u01c1\t\u01c1\4\u01c2\t\u01c2\4\u01c3\t\u01c3\4\u01c4\t\u01c4"+
		"\4\u01c5\t\u01c5\4\u01c6\t\u01c6\4\u01c7\t\u01c7\4\u01c8\t\u01c8\4\u01c9"+
		"\t\u01c9\4\u01ca\t\u01ca\4\u01cb\t\u01cb\4\u01cc\t\u01cc\4\u01cd\t\u01cd"+
		"\4\u01ce\t\u01ce\4\u01cf\t\u01cf\4\u01d0\t\u01d0\4\u01d1\t\u01d1\4\u01d2"+
		"\t\u01d2\4\u01d3\t\u01d3\4\u01d4\t\u01d4\4\u01d5\t\u01d5\4\u01d6\t\u01d6"+
		"\4\u01d7\t\u01d7\4\u01d8\t\u01d8\4\u01d9\t\u01d9\4\u01da\t\u01da\4\u01db"+
		"\t\u01db\4\u01dc\t\u01dc\4\u01dd\t\u01dd\4\u01de\t\u01de\4\u01df\t\u01df"+
		"\4\u01e0\t\u01e0\4\u01e1\t\u01e1\4\u01e2\t\u01e2\4\u01e3\t\u01e3\4\u01e4"+
		"\t\u01e4\4\u01e5\t\u01e5\4\u01e6\t\u01e6\4\u01e7\t\u01e7\4\u01e8\t\u01e8"+
		"\4\u01e9\t\u01e9\4\u01ea\t\u01ea\4\u01eb\t\u01eb\4\u01ec\t\u01ec\4\u01ed"+
		"\t\u01ed\4\u01ee\t\u01ee\4\u01ef\t\u01ef\4\u01f0\t\u01f0\4\u01f1\t\u01f1"+
		"\4\u01f2\t\u01f2\4\u01f3\t\u01f3\4\u01f4\t\u01f4\4\u01f5\t\u01f5\4\u01f6"+
		"\t\u01f6\4\u01f7\t\u01f7\4\u01f8\t\u01f8\4\u01f9\t\u01f9\4\u01fa\t\u01fa"+
		"\4\u01fb\t\u01fb\4\u01fc\t\u01fc\4\u01fd\t\u01fd\4\u01fe\t\u01fe\4\u01ff"+
		"\t\u01ff\4\u0200\t\u0200\4\u0201\t\u0201\4\u0202\t\u0202\4\u0203\t\u0203"+
		"\4\u0204\t\u0204\4\u0205\t\u0205\4\u0206\t\u0206\4\u0207\t\u0207\4\u0208"+
		"\t\u0208\4\u0209\t\u0209\4\u020a\t\u020a\4\u020b\t\u020b\4\u020c\t\u020c"+
		"\4\u020d\t\u020d\4\u020e\t\u020e\4\u020f\t\u020f\4\u0210\t\u0210\4\u0211"+
		"\t\u0211\4\u0212\t\u0212\4\u0213\t\u0213\4\u0214\t\u0214\4\u0215\t\u0215"+
		"\4\u0216\t\u0216\4\u0217\t\u0217\4\u0218\t\u0218\4\u0219\t\u0219\4\u021a"+
		"\t\u021a\4\u021b\t\u021b\4\u021c\t\u021c\4\u021d\t\u021d\4\u021e\t\u021e"+
		"\4\u021f\t\u021f\4\u0220\t\u0220\4\u0221\t\u0221\4\u0222\t\u0222\4\u0223"+
		"\t\u0223\4\u0224\t\u0224\4\u0225\t\u0225\4\u0226\t\u0226\4\u0227\t\u0227"+
		"\4\u0228\t\u0228\4\u0229\t\u0229\4\u022a\t\u022a\4\u022b\t\u022b\4\u022c"+
		"\t\u022c\4\u022d\t\u022d\4\u022e\t\u022e\4\u022f\t\u022f\4\u0230\t\u0230"+
		"\4\u0231\t\u0231\4\u0232\t\u0232\4\u0233\t\u0233\4\u0234\t\u0234\4\u0235"+
		"\t\u0235\4\u0236\t\u0236\4\u0237\t\u0237\4\u0238\t\u0238\4\u0239\t\u0239"+
		"\4\u023a\t\u023a\4\u023b\t\u023b\4\u023c\t\u023c\4\u023d\t\u023d\4\u023e"+
		"\t\u023e\4\u023f\t\u023f\4\u0240\t\u0240\4\u0241\t\u0241\4\u0242\t\u0242"+
		"\4\u0243\t\u0243\4\u0244\t\u0244\4\u0245\t\u0245\4\u0246\t\u0246\4\u0247"+
		"\t\u0247\4\u0248\t\u0248\4\u0249\t\u0249\4\u024a\t\u024a\4\u024b\t\u024b"+
		"\4\u024c\t\u024c\4\u024d\t\u024d\4\u024e\t\u024e\4\u024f\t\u024f\4\u0250"+
		"\t\u0250\4\u0251\t\u0251\4\u0252\t\u0252\4\u0253\t\u0253\4\u0254\t\u0254"+
		"\4\u0255\t\u0255\4\u0256\t\u0256\4\u0257\t\u0257\4\u0258\t\u0258\4\u0259"+
		"\t\u0259\4\u025a\t\u025a\4\u025b\t\u025b\4\u025c\t\u025c\4\u025d\t\u025d"+
		"\4\u025e\t\u025e\4\u025f\t\u025f\3\2\7\2\u04c0\n\2\f\2\16\2\u04c3\13\2"+
		"\3\2\3\2\3\3\3\3\5\3\u04c9\n\3\3\3\5\3\u04cc\n\3\3\4\3\4\3\4\3\4\3\4\3"+
		"\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4"+
		"\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u04f0\n\4\3\5\3\5\3\5"+
		"\3\5\3\5\3\5\5\5\u04f8\n\5\3\5\3\5\3\5\5\5\u04fd\n\5\3\5\3\5\3\5\3\5\3"+
		"\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u050d\n\5\3\6\3\6\3\6\6\6\u0512"+
		"\n\6\r\6\16\6\u0513\3\6\3\6\3\6\3\6\3\6\5\6\u051b\n\6\3\7\5\7\u051e\n"+
		"\7\3\7\3\7\3\7\3\7\3\7\5\7\u0525\n\7\3\7\3\7\3\7\5\7\u052a\n\7\3\7\5\7"+
		"\u052d\n\7\3\7\3\7\3\7\5\7\u0532\n\7\3\7\3\7\3\7\3\7\5\7\u0538\n\7\5\7"+
		"\u053a\n\7\3\7\3\7\5\7\u053e\n\7\3\7\3\7\5\7\u0542\n\7\3\b\3\b\3\b\3\b"+
		"\3\b\3\b\3\b\5\b\u054b\n\b\3\t\3\t\5\t\u054f\n\t\3\t\7\t\u0552\n\t\f\t"+
		"\16\t\u0555\13\t\3\n\3\n\3\n\5\n\u055a\n\n\3\13\3\13\3\13\3\13\3\f\5\f"+
		"\u0561\n\f\3\f\3\f\5\f\u0565\n\f\3\f\3\f\3\f\5\f\u056a\n\f\3\r\3\r\3\r"+
		"\5\r\u056f\n\r\3\r\3\r\3\r\3\r\3\r\5\r\u0576\n\r\3\r\5\r\u0579\n\r\3\16"+
		"\3\16\3\16\3\16\5\16\u057f\n\16\3\16\5\16\u0582\n\16\3\17\3\17\3\17\7"+
		"\17\u0587\n\17\f\17\16\17\u058a\13\17\3\20\3\20\3\20\3\20\3\20\3\20\3"+
		"\20\5\20\u0593\n\20\3\21\3\21\3\21\5\21\u0598\n\21\3\21\3\21\3\21\5\21"+
		"\u059d\n\21\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u05a5\n\21\3\21\3\21\3"+
		"\21\3\21\5\21\u05ab\n\21\3\21\3\21\5\21\u05af\n\21\3\21\3\21\3\21\5\21"+
		"\u05b4\n\21\3\21\3\21\3\21\3\21\3\21\7\21\u05bb\n\21\f\21\16\21\u05be"+
		"\13\21\3\21\3\21\3\21\5\21\u05c3\n\21\3\21\3\21\7\21\u05c7\n\21\f\21\16"+
		"\21\u05ca\13\21\3\21\3\21\3\21\5\21\u05cf\n\21\3\21\3\21\3\21\3\21\3\21"+
		"\3\21\3\21\3\21\5\21\u05d9\n\21\3\21\3\21\3\21\3\21\5\21\u05df\n\21\3"+
		"\21\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u05e8\n\21\3\21\3\21\3\21\3\21"+
		"\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u05f6\n\21\3\22\3\22\5\22"+
		"\u05fa\n\22\3\22\3\22\3\22\3\22\5\22\u0600\n\22\7\22\u0602\n\22\f\22\16"+
		"\22\u0605\13\22\3\23\3\23\3\23\5\23\u060a\n\23\3\24\3\24\5\24\u060e\n"+
		"\24\3\24\3\24\3\24\5\24\u0613\n\24\3\24\5\24\u0616\n\24\3\24\3\24\3\24"+
		"\3\24\5\24\u061c\n\24\3\24\3\24\3\24\3\24\5\24\u0622\n\24\3\24\3\24\3"+
		"\24\3\24\5\24\u0628\n\24\3\24\3\24\5\24\u062c\n\24\3\24\3\24\3\24\5\24"+
		"\u0631\n\24\3\24\3\24\5\24\u0635\n\24\3\24\3\24\5\24\u0639\n\24\3\24\3"+
		"\24\3\24\3\24\3\24\3\24\5\24\u0641\n\24\5\24\u0643\n\24\3\24\3\24\3\24"+
		"\3\24\3\24\5\24\u064a\n\24\3\24\3\24\3\24\3\24\3\24\3\24\5\24\u0652\n"+
		"\24\3\24\3\24\3\24\3\24\3\24\3\24\5\24\u065a\n\24\3\24\3\24\5\24\u065e"+
		"\n\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24"+
		"\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\5\24\u0675\n\24\3\24\3\24\3\24"+
		"\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\5\24\u0685\n\24"+
		"\3\24\5\24\u0688\n\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\5\24\u0691\n"+
		"\24\3\25\3\25\3\25\5\25\u0696\n\25\3\26\3\26\3\27\3\27\5\27\u069c\n\27"+
		"\3\27\3\27\3\27\5\27\u06a1\n\27\7\27\u06a3\n\27\f\27\16\27\u06a6\13\27"+
		"\3\30\3\30\5\30\u06aa\n\30\3\30\3\30\5\30\u06ae\n\30\3\31\3\31\5\31\u06b2"+
		"\n\31\3\31\3\31\5\31\u06b6\n\31\3\32\3\32\5\32\u06ba\n\32\3\32\3\32\5"+
		"\32\u06be\n\32\5\32\u06c0\n\32\3\33\3\33\3\33\3\33\3\34\3\34\3\34\3\35"+
		"\3\35\5\35\u06cb\n\35\3\36\3\36\3\36\5\36\u06d0\n\36\3\36\3\36\3\36\3"+
		"\36\5\36\u06d6\n\36\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u06de\n\37\3\37"+
		"\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u06e7\n\37\3\37\7\37\u06ea\n\37\f"+
		"\37\16\37\u06ed\13\37\5\37\u06ef\n\37\3\37\3\37\3\37\5\37\u06f4\n\37\3"+
		"\37\3\37\3\37\3\37\3\37\5\37\u06fb\n\37\3 \3 \3 \3 \3 \3 \5 \u0703\n "+
		"\3!\3!\5!\u0707\n!\3!\7!\u070a\n!\f!\16!\u070d\13!\3\"\3\"\3#\3#\5#\u0713"+
		"\n#\3#\7#\u0716\n#\f#\16#\u0719\13#\3$\3$\5$\u071d\n$\3$\3$\3$\3$\3$\3"+
		"$\5$\u0725\n$\3%\3%\5%\u0729\n%\3%\3%\3%\5%\u072e\n%\3&\5&\u0731\n&\3"+
		"&\5&\u0734\n&\3&\5&\u0737\n&\3&\3&\3&\3&\3\'\5\'\u073e\n\'\3\'\3\'\3\'"+
		"\3(\3(\5(\u0745\n(\3)\3)\5)\u0749\n)\3)\3)\3)\3*\3*\3*\3*\3*\3*\3*\3*"+
		"\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\5*\u0761\n*\3+\3+\5+\u0765\n+\3+\3+"+
		"\7+\u0769\n+\f+\16+\u076c\13+\3,\3,\3,\3,\5,\u0772\n,\3-\5-\u0775\n-\3"+
		"-\3-\5-\u0779\n-\3-\3-\3-\3-\3-\5-\u0780\n-\3-\5-\u0783\n-\3-\5-\u0786"+
		"\n-\3-\5-\u0789\n-\3-\3-\3-\3-\3-\3-\3-\5-\u0792\n-\3.\3.\3.\7.\u0797"+
		"\n.\f.\16.\u079a\13.\3/\3/\5/\u079e\n/\3\60\5\60\u07a1\n\60\3\60\5\60"+
		"\u07a4\n\60\3\60\3\60\3\61\3\61\5\61\u07aa\n\61\3\62\3\62\3\62\3\62\5"+
		"\62\u07b0\n\62\3\62\5\62\u07b3\n\62\3\62\3\62\3\63\5\63\u07b8\n\63\3\63"+
		"\3\63\3\63\3\63\3\63\3\63\7\63\u07c0\n\63\f\63\16\63\u07c3\13\63\5\63"+
		"\u07c5\n\63\3\63\3\63\7\63\u07c9\n\63\f\63\16\63\u07cc\13\63\3\63\3\63"+
		"\3\64\5\64\u07d1\n\64\3\64\3\64\3\64\3\64\3\64\3\64\7\64\u07d9\n\64\f"+
		"\64\16\64\u07dc\13\64\5\64\u07de\n\64\3\64\3\64\3\64\3\64\7\64\u07e4\n"+
		"\64\f\64\16\64\u07e7\13\64\3\64\3\64\3\65\5\65\u07ec\n\65\3\65\3\65\3"+
		"\65\3\65\3\65\3\65\3\65\3\66\3\66\5\66\u07f7\n\66\3\66\5\66\u07fa\n\66"+
		"\3\67\6\67\u07fd\n\67\r\67\16\67\u07fe\38\38\38\38\38\38\38\38\38\38\3"+
		"8\38\38\38\38\38\38\58\u0812\n8\39\59\u0815\n9\39\59\u0818\n9\39\39\3"+
		"9\39\59\u081e\n9\39\59\u0821\n9\59\u0823\n9\39\39\79\u0827\n9\f9\169\u082a"+
		"\139\39\39\39\39\39\79\u0831\n9\f9\169\u0834\139\39\39\39\39\39\79\u083b"+
		"\n9\f9\169\u083e\139\59\u0840\n9\39\59\u0843\n9\3:\3:\3:\5:\u0848\n:\3"+
		":\3:\3:\3:\5:\u084e\n:\3;\3;\3;\3;\3<\3<\3<\3<\3<\3<\3<\5<\u085b\n<\3"+
		"=\3=\5=\u085f\n=\3=\7=\u0862\n=\f=\16=\u0865\13=\3>\3>\3>\3>\3>\3>\5>"+
		"\u086d\n>\3?\3?\3?\3?\3?\3?\3?\3?\3@\3@\3@\3@\3@\7@\u087c\n@\f@\16@\u087f"+
		"\13@\3@\3@\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\5A\u0891\nA\3B\3"+
		"B\3B\3B\3B\3B\3B\5B\u089a\nB\3B\5B\u089d\nB\3C\3C\3C\3C\3C\3C\5C\u08a5"+
		"\nC\3D\3D\3D\5D\u08aa\nD\3D\3D\5D\u08ae\nD\3E\3E\3E\3F\3F\5F\u08b5\nF"+
		"\3F\7F\u08b8\nF\fF\16F\u08bb\13F\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\5"+
		"G\u08c9\nG\3H\3H\5H\u08cd\nH\3H\3H\3I\3I\5I\u08d3\nI\3I\3I\3J\3J\5J\u08d9"+
		"\nJ\3J\3J\3K\3K\5K\u08df\nK\3K\3K\3L\3L\5L\u08e5\nL\3L\3L\3M\3M\5M\u08eb"+
		"\nM\3M\3M\3N\5N\u08f0\nN\3N\3N\5N\u08f4\nN\3N\3N\3O\3O\3P\3P\5P\u08fc"+
		"\nP\3P\3P\3Q\3Q\5Q\u0902\nQ\3Q\3Q\3R\3R\5R\u0908\nR\3R\3R\3S\5S\u090d"+
		"\nS\3S\5S\u0910\nS\3S\5S\u0913\nS\3S\3S\3S\3S\3T\3T\3T\5T\u091c\nT\3T"+
		"\5T\u091f\nT\3U\3U\3U\3U\3V\3V\3V\3V\3W\5W\u092a\nW\3W\3W\3W\3W\3W\3W"+
		"\3W\3W\3W\3W\5W\u0936\nW\3W\3W\3X\3X\3X\3X\3Y\5Y\u093f\nY\3Y\3Y\5Y\u0943"+
		"\nY\3Y\3Y\3Y\3Y\3Y\3Y\3Y\5Y\u094c\nY\3Y\5Y\u094f\nY\3Y\3Y\3Y\3Y\5Y\u0955"+
		"\nY\5Y\u0957\nY\3Y\3Y\5Y\u095b\nY\3Y\3Y\3Y\3Z\3Z\5Z\u0962\nZ\3Z\3Z\3["+
		"\3[\3[\3[\3[\3[\3[\7[\u096d\n[\f[\16[\u0970\13[\3[\3[\3[\3[\5[\u0976\n"+
		"[\3[\3[\7[\u097a\n[\f[\16[\u097d\13[\5[\u097f\n[\3\\\3\\\3\\\3\\\3\\\3"+
		"\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\5\\\u0990\n\\\3]\3]\3]\3]\3]\3"+
		"]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\5]\u09a4\n]\3^\3^\5^\u09a8\n^\3"+
		"^\3^\3_\3_\5_\u09ae\n_\3_\3_\3`\3`\5`\u09b4\n`\3`\3`\3a\3a\5a\u09ba\n"+
		"a\3a\3a\3b\5b\u09bf\nb\3b\3b\3b\3b\3b\5b\u09c6\nb\3c\3c\3c\3c\3c\5c\u09cd"+
		"\nc\3c\7c\u09d0\nc\fc\16c\u09d3\13c\5c\u09d5\nc\3d\3d\5d\u09d9\nd\3e\3"+
		"e\5e\u09dd\ne\3e\3e\3f\5f\u09e2\nf\3f\3f\5f\u09e6\nf\3f\3f\5f\u09ea\n"+
		"f\3g\3g\3g\3g\5g\u09f0\ng\3g\7g\u09f3\ng\fg\16g\u09f6\13g\5g\u09f8\ng"+
		"\3h\3h\5h\u09fc\nh\3h\3h\3i\3i\5i\u0a02\ni\3i\3i\5i\u0a06\ni\3j\3j\5j"+
		"\u0a0a\nj\3j\3j\3k\3k\3k\3k\5k\u0a12\nk\3k\3k\3l\3l\3l\3l\5l\u0a1a\nl"+
		"\3m\3m\3m\3m\3m\7m\u0a21\nm\fm\16m\u0a24\13m\3n\3n\3n\3n\3o\3o\5o\u0a2c"+
		"\no\3o\3o\3p\3p\3p\3p\3p\3q\3q\3q\3q\5q\u0a39\nq\3q\5q\u0a3c\nq\3r\3r"+
		"\5r\u0a40\nr\3r\3r\7r\u0a44\nr\fr\16r\u0a47\13r\3r\3r\3r\3r\3r\5r\u0a4e"+
		"\nr\3r\3r\3r\5r\u0a53\nr\3r\5r\u0a56\nr\3r\5r\u0a59\nr\3r\5r\u0a5c\nr"+
		"\3r\5r\u0a5f\nr\5r\u0a61\nr\3r\3r\3r\3r\5r\u0a67\nr\5r\u0a69\nr\3s\3s"+
		"\3s\3s\3s\3s\3t\3t\3u\3u\3u\3u\3u\5u\u0a78\nu\3v\3v\3v\3v\5v\u0a7e\nv"+
		"\3v\3v\3v\3v\3v\5v\u0a85\nv\3v\5v\u0a88\nv\5v\u0a8a\nv\5v\u0a8c\nv\3w"+
		"\3w\3w\3w\3w\3w\3w\3w\5w\u0a96\nw\5w\u0a98\nw\3x\3x\5x\u0a9c\nx\3x\5x"+
		"\u0a9f\nx\3x\5x\u0aa2\nx\3x\3x\5x\u0aa6\nx\3x\3x\3x\5x\u0aab\nx\3x\3x"+
		"\3x\3x\5x\u0ab1\nx\3x\5x\u0ab4\nx\3x\5x\u0ab7\nx\3y\3y\3z\3z\5z\u0abd"+
		"\nz\3z\5z\u0ac0\nz\3z\3z\3{\3{\3{\7{\u0ac7\n{\f{\16{\u0aca\13{\3|\3|\3"+
		"|\3}\3}\3}\5}\u0ad2\n}\3}\3}\5}\u0ad6\n}\3~\3~\5~\u0ada\n~\3~\3~\3~\3"+
		"~\5~\u0ae0\n~\3~\7~\u0ae3\n~\f~\16~\u0ae6\13~\3\177\3\177\5\177\u0aea"+
		"\n\177\3\177\3\177\3\177\5\177\u0aef\n\177\7\177\u0af1\n\177\f\177\16"+
		"\177\u0af4\13\177\3\u0080\3\u0080\3\u0080\5\u0080\u0af9\n\u0080\3\u0081"+
		"\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0082\3\u0082\3\u0082\5\u0082"+
		"\u0b04\n\u0082\3\u0082\5\u0082\u0b07\n\u0082\3\u0082\3\u0082\3\u0082\5"+
		"\u0082\u0b0c\n\u0082\3\u0082\3\u0082\3\u0082\3\u0082\5\u0082\u0b12\n\u0082"+
		"\3\u0082\5\u0082\u0b15\n\u0082\3\u0082\5\u0082\u0b18\n\u0082\3\u0082\5"+
		"\u0082\u0b1b\n\u0082\3\u0082\5\u0082\u0b1e\n\u0082\3\u0082\3\u0082\3\u0083"+
		"\3\u0083\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0085\3\u0085\3\u0085"+
		"\5\u0085\u0b2c\n\u0085\3\u0085\5\u0085\u0b2f\n\u0085\3\u0085\3\u0085\5"+
		"\u0085\u0b33\n\u0085\3\u0086\3\u0086\5\u0086\u0b37\n\u0086\3\u0086\3\u0086"+
		"\3\u0087\3\u0087\5\u0087\u0b3d\n\u0087\3\u0087\3\u0087\3\u0087\5\u0087"+
		"\u0b42\n\u0087\7\u0087\u0b44\n\u0087\f\u0087\16\u0087\u0b47\13\u0087\3"+
		"\u0088\3\u0088\5\u0088\u0b4b\n\u0088\3\u0088\5\u0088\u0b4e\n\u0088\3\u0088"+
		"\3\u0088\5\u0088\u0b52\n\u0088\3\u0088\3\u0088\3\u0088\3\u0088\5\u0088"+
		"\u0b58\n\u0088\3\u0089\3\u0089\3\u0089\5\u0089\u0b5d\n\u0089\3\u008a\3"+
		"\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\5\u008a\u0b66\n\u008a\3"+
		"\u008b\3\u008b\5\u008b\u0b6a\n\u008b\3\u008b\3\u008b\5\u008b\u0b6e\n\u008b"+
		"\3\u008b\5\u008b\u0b71\n\u008b\3\u008b\3\u008b\3\u008b\5\u008b\u0b76\n"+
		"\u008b\3\u008b\5\u008b\u0b79\n\u008b\5\u008b\u0b7b\n\u008b\3\u008b\3\u008b"+
		"\5\u008b\u0b7f\n\u008b\3\u008b\5\u008b\u0b82\n\u008b\3\u008b\3\u008b\3"+
		"\u008b\3\u008b\5\u008b\u0b88\n\u008b\5\u008b\u0b8a\n\u008b\3\u008c\3\u008c"+
		"\3\u008c\3\u008c\3\u008c\5\u008c\u0b91\n\u008c\3\u008c\3\u008c\5\u008c"+
		"\u0b95\n\u008c\5\u008c\u0b97\n\u008c\3\u008c\3\u008c\3\u008c\5\u008c\u0b9c"+
		"\n\u008c\3\u008c\3\u008c\5\u008c\u0ba0\n\u008c\7\u008c\u0ba2\n\u008c\f"+
		"\u008c\16\u008c\u0ba5\13\u008c\3\u008d\3\u008d\3\u008d\5\u008d\u0baa\n"+
		"\u008d\3\u008d\3\u008d\3\u008e\3\u008e\7\u008e\u0bb0\n\u008e\f\u008e\16"+
		"\u008e\u0bb3\13\u008e\3\u008e\3\u008e\5\u008e\u0bb7\n\u008e\3\u008e\5"+
		"\u008e\u0bba\n\u008e\3\u008e\5\u008e\u0bbd\n\u008e\3\u008e\5\u008e\u0bc0"+
		"\n\u008e\3\u008e\5\u008e\u0bc3\n\u008e\3\u008e\3\u008e\5\u008e\u0bc7\n"+
		"\u008e\3\u008f\3\u008f\3\u0090\3\u0090\3\u0091\3\u0091\3\u0091\3\u0092"+
		"\3\u0092\3\u0092\3\u0093\3\u0093\3\u0093\5\u0093\u0bd6\n\u0093\3\u0094"+
		"\3\u0094\5\u0094\u0bda\n\u0094\3\u0095\3\u0095\3\u0095\3\u0095\5\u0095"+
		"\u0be0\n\u0095\3\u0095\5\u0095\u0be3\n\u0095\3\u0095\5\u0095\u0be6\n\u0095"+
		"\3\u0095\3\u0095\3\u0095\3\u0095\5\u0095\u0bec\n\u0095\3\u0095\3\u0095"+
		"\3\u0095\5\u0095\u0bf1\n\u0095\7\u0095\u0bf3\n\u0095\f\u0095\16\u0095"+
		"\u0bf6\13\u0095\5\u0095\u0bf8\n\u0095\3\u0096\3\u0096\3\u0096\3\u0096"+
		"\3\u0096\3\u0096\5\u0096\u0c00\n\u0096\5\u0096\u0c02\n\u0096\3\u0096\3"+
		"\u0096\3\u0097\3\u0097\3\u0097\3\u0098\3\u0098\3\u0098\3\u0098\7\u0098"+
		"\u0c0d\n\u0098\f\u0098\16\u0098\u0c10\13\u0098\3\u0099\3\u0099\3\u0099"+
		"\3\u0099\3\u009a\3\u009a\3\u009a\3\u009a\3\u009b\5\u009b\u0c1b\n\u009b"+
		"\3\u009b\3\u009b\3\u009b\5\u009b\u0c20\n\u009b\3\u009b\5\u009b\u0c23\n"+
		"\u009b\3\u009b\5\u009b\u0c26\n\u009b\3\u009c\3\u009c\3\u009c\5\u009c\u0c2b"+
		"\n\u009c\3\u009d\3\u009d\3\u009e\3\u009e\5\u009e\u0c31\n\u009e\3\u009f"+
		"\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f"+
		"\3\u009f\3\u009f\3\u009f\3\u009f\5\u009f\u0c41\n\u009f\3\u00a0\3\u00a0"+
		"\3\u00a0\3\u00a0\3\u00a0\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1"+
		"\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\5\u00a1\u0c55"+
		"\n\u00a1\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\5\u00a2"+
		"\u0c5e\n\u00a2\3\u00a3\3\u00a3\5\u00a3\u0c62\n\u00a3\3\u00a3\3\u00a3\3"+
		"\u00a3\7\u00a3\u0c67\n\u00a3\f\u00a3\16\u00a3\u0c6a\13\u00a3\3\u00a4\3"+
		"\u00a4\5\u00a4\u0c6e\n\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a5\3\u00a5\3"+
		"\u00a5\3\u00a5\5\u00a5\u0c77\n\u00a5\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3"+
		"\u00a6\5\u00a6\u0c7e\n\u00a6\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a8\3"+
		"\u00a8\3\u00a9\3\u00a9\3\u00a9\5\u00a9\u0c89\n\u00a9\3\u00aa\3\u00aa\3"+
		"\u00aa\7\u00aa\u0c8e\n\u00aa\f\u00aa\16\u00aa\u0c91\13\u00aa\3\u00ab\3"+
		"\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\5\u00ab\u0c9b\n"+
		"\u00ab\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\5\u00ac\u0ca2\n\u00ac\3"+
		"\u00ac\3\u00ac\5\u00ac\u0ca6\n\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\5"+
		"\u00ac\u0cac\n\u00ac\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u0cb1\n\u00ad\3\u00ae"+
		"\3\u00ae\3\u00ae\5\u00ae\u0cb6\n\u00ae\3\u00af\3\u00af\5\u00af\u0cba\n"+
		"\u00af\3\u00af\3\u00af\7\u00af\u0cbe\n\u00af\f\u00af\16\u00af\u0cc1\13"+
		"\u00af\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u0cc6\n\u00b0\5\u00b0\u0cc8\n\u00b0"+
		"\3\u00b1\5\u00b1\u0ccb\n\u00b1\3\u00b1\3\u00b1\5\u00b1\u0ccf\n\u00b1\3"+
		"\u00b2\3\u00b2\3\u00b2\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\5\u00b3"+
		"\u0cd9\n\u00b3\3\u00b3\3\u00b3\3\u00b3\5\u00b3\u0cde\n\u00b3\3\u00b3\7"+
		"\u00b3\u0ce1\n\u00b3\f\u00b3\16\u00b3\u0ce4\13\u00b3\3\u00b4\3\u00b4\7"+
		"\u00b4\u0ce8\n\u00b4\f\u00b4\16\u00b4\u0ceb\13\u00b4\3\u00b5\3\u00b5\3"+
		"\u00b5\3\u00b5\3\u00b5\3\u00b5\5\u00b5\u0cf3\n\u00b5\3\u00b5\3\u00b5\3"+
		"\u00b5\3\u00b5\3\u00b5\3\u00b5\5\u00b5\u0cfb\n\u00b5\3\u00b5\3\u00b5\3"+
		"\u00b5\5\u00b5\u0d00\n\u00b5\3\u00b6\3\u00b6\5\u00b6\u0d04\n\u00b6\3\u00b6"+
		"\3\u00b6\3\u00b6\3\u00b6\5\u00b6\u0d0a\n\u00b6\3\u00b6\5\u00b6\u0d0d\n"+
		"\u00b6\3\u00b7\5\u00b7\u0d10\n\u00b7\3\u00b7\3\u00b7\5\u00b7\u0d14\n\u00b7"+
		"\3\u00b8\3\u00b8\5\u00b8\u0d18\n\u00b8\3\u00b8\3\u00b8\3\u00b9\3\u00b9"+
		"\3\u00b9\3\u00b9\3\u00b9\3\u00b9\5\u00b9\u0d22\n\u00b9\3\u00ba\3\u00ba"+
		"\5\u00ba\u0d26\n\u00ba\3\u00ba\5\u00ba\u0d29\n\u00ba\3\u00ba\5\u00ba\u0d2c"+
		"\n\u00ba\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u0d31\n\u00bb\3\u00bb\3\u00bb"+
		"\3\u00bc\3\u00bc\5\u00bc\u0d37\n\u00bc\3\u00bc\3\u00bc\5\u00bc\u0d3b\n"+
		"\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u0d41\n\u00bc\3\u00bc\5"+
		"\u00bc\u0d44\n\u00bc\5\u00bc\u0d46\n\u00bc\3\u00bd\3\u00bd\3\u00bd\5\u00bd"+
		"\u0d4b\n\u00bd\3\u00bd\3\u00bd\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be"+
		"\3\u00be\3\u00be\3\u00be\5\u00be\u0d57\n\u00be\3\u00bf\3\u00bf\3\u00bf"+
		"\3\u00bf\3\u00bf\7\u00bf\u0d5e\n\u00bf\f\u00bf\16\u00bf\u0d61\13\u00bf"+
		"\3\u00bf\3\u00bf\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0"+
		"\3\u00c0\5\u00c0\u0d6d\n\u00c0\3\u00c0\5\u00c0\u0d70\n\u00c0\3\u00c0\3"+
		"\u00c0\3\u00c0\5\u00c0\u0d75\n\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3"+
		"\u00c0\5\u00c0\u0d7c\n\u00c0\3\u00c1\3\u00c1\5\u00c1\u0d80\n\u00c1\3\u00c1"+
		"\3\u00c1\5\u00c1\u0d84\n\u00c1\5\u00c1\u0d86\n\u00c1\3\u00c2\3\u00c2\3"+
		"\u00c2\3\u00c2\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c4\3\u00c4\3\u00c4"+
		"\3\u00c4\5\u00c4\u0d94\n\u00c4\3\u00c5\3\u00c5\3\u00c6\3\u00c6\3\u00c6"+
		"\5\u00c6\u0d9b\n\u00c6\3\u00c6\3\u00c6\3\u00c7\3\u00c7\3\u00c7\7\u00c7"+
		"\u0da2\n\u00c7\f\u00c7\16\u00c7\u0da5\13\u00c7\3\u00c8\3\u00c8\3\u00c8"+
		"\5\u00c8\u0daa\n\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8"+
		"\3\u00c8\5\u00c8\u0db3\n\u00c8\3\u00c8\3\u00c8\5\u00c8\u0db7\n\u00c8\3"+
		"\u00c8\3\u00c8\5\u00c8\u0dbb\n\u00c8\3\u00c9\3\u00c9\3\u00ca\3\u00ca\3"+
		"\u00cb\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u0dc5\n\u00cb\5\u00cb\u0dc7\n\u00cb"+
		"\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u0dcf\n\u00cc"+
		"\3\u00cd\3\u00cd\3\u00cd\7\u00cd\u0dd4\n\u00cd\f\u00cd\16\u00cd\u0dd7"+
		"\13\u00cd\3\u00ce\3\u00ce\5\u00ce\u0ddb\n\u00ce\3\u00cf\3\u00cf\5\u00cf"+
		"\u0ddf\n\u00cf\3\u00cf\3\u00cf\5\u00cf\u0de3\n\u00cf\3\u00cf\5\u00cf\u0de6"+
		"\n\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\5\u00cf\u0dec\n\u00cf\3\u00cf"+
		"\5\u00cf\u0def\n\u00cf\3\u00cf\5\u00cf\u0df2\n\u00cf\3\u00d0\3\u00d0\3"+
		"\u00d0\3\u00d0\5\u00d0\u0df8\n\u00d0\3\u00d1\3\u00d1\3\u00d1\7\u00d1\u0dfd"+
		"\n\u00d1\f\u00d1\16\u00d1\u0e00\13\u00d1\3\u00d1\3\u00d1\5\u00d1\u0e04"+
		"\n\u00d1\3\u00d1\3\u00d1\5\u00d1\u0e08\n\u00d1\3\u00d1\5\u00d1\u0e0b\n"+
		"\u00d1\3\u00d1\5\u00d1\u0e0e\n\u00d1\3\u00d1\5\u00d1\u0e11\n\u00d1\5\u00d1"+
		"\u0e13\n\u00d1\3\u00d2\3\u00d2\5\u00d2\u0e17\n\u00d2\3\u00d3\3\u00d3\3"+
		"\u00d3\3\u00d3\3\u00d3\3\u00d3\5\u00d3\u0e1f\n\u00d3\3\u00d4\3\u00d4\3"+
		"\u00d4\3\u00d4\5\u00d4\u0e25\n\u00d4\3\u00d4\3\u00d4\5\u00d4\u0e29\n\u00d4"+
		"\3\u00d4\3\u00d4\3\u00d4\5\u00d4\u0e2e\n\u00d4\3\u00d4\5\u00d4\u0e31\n"+
		"\u00d4\3\u00d4\5\u00d4\u0e34\n\u00d4\3\u00d4\5\u00d4\u0e37\n\u00d4\5\u00d4"+
		"\u0e39\n\u00d4\3\u00d4\3\u00d4\3\u00d4\5\u00d4\u0e3e\n\u00d4\3\u00d5\3"+
		"\u00d5\3\u00d5\3\u00d5\3\u00d5\7\u00d5\u0e45\n\u00d5\f\u00d5\16\u00d5"+
		"\u0e48\13\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5"+
		"\3\u00d5\3\u00d5\3\u00d5\5\u00d5\u0e54\n\u00d5\5\u00d5\u0e56\n\u00d5\3"+
		"\u00d6\3\u00d6\5\u00d6\u0e5a\n\u00d6\3\u00d6\3\u00d6\3\u00d7\3\u00d7\5"+
		"\u00d7\u0e60\n\u00d7\3\u00d7\5\u00d7\u0e63\n\u00d7\3\u00d7\5\u00d7\u0e66"+
		"\n\u00d7\3\u00d8\3\u00d8\3\u00d8\3\u00d8\5\u00d8\u0e6c\n\u00d8\3\u00d8"+
		"\3\u00d8\3\u00d8\3\u00d8\3\u00d8\5\u00d8\u0e73\n\u00d8\5\u00d8\u0e75\n"+
		"\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\5\u00d8\u0e7d\n"+
		"\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\5\u00d8\u0e83\n\u00d8\3\u00d9\3"+
		"\u00d9\3\u00d9\5\u00d9\u0e88\n\u00d9\3\u00d9\5\u00d9\u0e8b\n\u00d9\3\u00da"+
		"\3\u00da\3\u00da\3\u00da\3\u00da\5\u00da\u0e92\n\u00da\5\u00da\u0e94\n"+
		"\u00da\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\5\u00db"+
		"\u0e9d\n\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\7\u00db\u0ea4\n"+
		"\u00db\f\u00db\16\u00db\u0ea7\13\u00db\3\u00db\3\u00db\3\u00db\3\u00db"+
		"\3\u00db\3\u00db\5\u00db\u0eaf\n\u00db\3\u00db\3\u00db\3\u00db\3\u00db"+
		"\3\u00db\3\u00db\5\u00db\u0eb7\n\u00db\3\u00dc\3\u00dc\5\u00dc\u0ebb\n"+
		"\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\5\u00dc\u0ec2\n\u00dc\3"+
		"\u00dc\5\u00dc\u0ec5\n\u00dc\5\u00dc\u0ec7\n\u00dc\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\5\u00dd\u0ecf\n\u00dd\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\5\u00de\u0ed5\n\u00de\3\u00de\3\u00de\3\u00de\3\u00df\3\u00df"+
		"\3\u00df\3\u00df\3\u00df\5\u00df\u0edf\n\u00df\3\u00e0\3\u00e0\3\u00e0"+
		"\7\u00e0\u0ee4\n\u00e0\f\u00e0\16\u00e0\u0ee7\13\u00e0\3\u00e1\3\u00e1"+
		"\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1"+
		"\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1"+
		"\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1"+
		"\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1"+
		"\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1"+
		"\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1"+
		"\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1"+
		"\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1"+
		"\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1"+
		"\3\u00e1\3\u00e1\5\u00e1\u0f3e\n\u00e1\3\u00e2\3\u00e2\5\u00e2\u0f42\n"+
		"\u00e2\3\u00e3\3\u00e3\5\u00e3\u0f46\n\u00e3\3\u00e4\3\u00e4\3\u00e4\3"+
		"\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\5\u00e4\u0f54\n\u00e4\3\u00e5\3\u00e5\3\u00e5\3\u00e5\7\u00e5\u0f5a\n"+
		"\u00e5\f\u00e5\16\u00e5\u0f5d\13\u00e5\5\u00e5\u0f5f\n\u00e5\3\u00e5\3"+
		"\u00e5\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\7\u00e6\u0f69\n"+
		"\u00e6\f\u00e6\16\u00e6\u0f6c\13\u00e6\3\u00e6\3\u00e6\5\u00e6\u0f70\n"+
		"\u00e6\3\u00e7\3\u00e7\3\u00e7\3\u00e7\5\u00e7\u0f76\n\u00e7\3\u00e7\3"+
		"\u00e7\3\u00e7\3\u00e7\3\u00e7\5\u00e7\u0f7d\n\u00e7\3\u00e7\3\u00e7\3"+
		"\u00e7\3\u00e7\3\u00e7\5\u00e7\u0f84\n\u00e7\3\u00e7\3\u00e7\3\u00e7\3"+
		"\u00e7\3\u00e7\5\u00e7\u0f8b\n\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3"+
		"\u00e7\5\u00e7\u0f92\n\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\5"+
		"\u00e7\u0f99\n\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\5\u00e7\u0fa0"+
		"\n\u00e7\3\u00e7\5\u00e7\u0fa3\n\u00e7\3\u00e8\3\u00e8\3\u00e8\7\u00e8"+
		"\u0fa8\n\u00e8\f\u00e8\16\u00e8\u0fab\13\u00e8\3\u00e9\3\u00e9\3\u00e9"+
		"\7\u00e9\u0fb0\n\u00e9\f\u00e9\16\u00e9\u0fb3\13\u00e9\3\u00ea\3\u00ea"+
		"\3\u00ea\7\u00ea\u0fb8\n\u00ea\f\u00ea\16\u00ea\u0fbb\13\u00ea\3\u00eb"+
		"\3\u00eb\3\u00ec\3\u00ec\3\u00ec\7\u00ec\u0fc2\n\u00ec\f\u00ec\16\u00ec"+
		"\u0fc5\13\u00ec\3\u00ed\3\u00ed\3\u00ed\5\u00ed\u0fca\n\u00ed\3\u00ed"+
		"\3\u00ed\5\u00ed\u0fce\n\u00ed\3\u00ed\3\u00ed\5\u00ed\u0fd2\n\u00ed\3"+
		"\u00ed\3\u00ed\3\u00ed\5\u00ed\u0fd7\n\u00ed\3\u00ed\5\u00ed\u0fda\n\u00ed"+
		"\5\u00ed\u0fdc\n\u00ed\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee"+
		"\3\u00ee\5\u00ee\u0fe5\n\u00ee\3\u00ee\3\u00ee\7\u00ee\u0fe9\n\u00ee\f"+
		"\u00ee\16\u00ee\u0fec\13\u00ee\3\u00ef\3\u00ef\3\u00ef\3\u00ef\5\u00ef"+
		"\u0ff2\n\u00ef\3\u00ef\3\u00ef\3\u00ef\5\u00ef\u0ff7\n\u00ef\3\u00ef\3"+
		"\u00ef\3\u00ef\5\u00ef\u0ffc\n\u00ef\3\u00ef\3\u00ef\3\u00ef\5\u00ef\u1001"+
		"\n\u00ef\3\u00ef\5\u00ef\u1004\n\u00ef\3\u00f0\3\u00f0\3\u00f0\7\u00f0"+
		"\u1009\n\u00f0\f\u00f0\16\u00f0\u100c\13\u00f0\3\u00f1\3\u00f1\3\u00f2"+
		"\3\u00f2\3\u00f2\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\5\u00f3\u1018"+
		"\n\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\5\u00f3\u101e\n\u00f3\3\u00f4"+
		"\3\u00f4\3\u00f4\3\u00f4\5\u00f4\u1024\n\u00f4\3\u00f5\3\u00f5\3\u00f5"+
		"\7\u00f5\u1029\n\u00f5\f\u00f5\16\u00f5\u102c\13\u00f5\3\u00f6\3\u00f6"+
		"\3\u00f6\3\u00f6\3\u00f6\5\u00f6\u1033\n\u00f6\3\u00f6\3\u00f6\3\u00f6"+
		"\3\u00f6\5\u00f6\u1039\n\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6"+
		"\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\5\u00f6\u1045\n\u00f6\5\u00f6"+
		"\u1047\n\u00f6\3\u00f7\3\u00f7\3\u00f7\3\u00f7\5\u00f7\u104d\n\u00f7\3"+
		"\u00f7\3\u00f7\5\u00f7\u1051\n\u00f7\5\u00f7\u1053\n\u00f7\3\u00f8\3\u00f8"+
		"\5\u00f8\u1057\n\u00f8\3\u00f8\3\u00f8\3\u00f9\3\u00f9\3\u00f9\3\u00f9"+
		"\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\5\u00f9\u1064\n\u00f9\3\u00fa"+
		"\3\u00fa\3\u00fa\3\u00fa\5\u00fa\u106a\n\u00fa\3\u00fa\3\u00fa\3\u00fb"+
		"\3\u00fb\3\u00fb\3\u00fb\5\u00fb\u1072\n\u00fb\3\u00fb\3\u00fb\3\u00fb"+
		"\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\5\u00fb\u107d\n\u00fb"+
		"\3\u00fb\3\u00fb\5\u00fb\u1081\n\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb"+
		"\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\5\u00fb\u108e"+
		"\n\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\5\u00fb\u1095\n\u00fb"+
		"\3\u00fb\3\u00fb\3\u00fb\3\u00fb\5\u00fb\u109b\n\u00fb\5\u00fb\u109d\n"+
		"\u00fb\3\u00fc\3\u00fc\3\u00fc\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd"+
		"\5\u00fd\u10a7\n\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fe\3\u00fe"+
		"\5\u00fe\u10af\n\u00fe\3\u00fe\5\u00fe\u10b2\n\u00fe\3\u00fe\7\u00fe\u10b5"+
		"\n\u00fe\f\u00fe\16\u00fe\u10b8\13\u00fe\3\u00fe\5\u00fe\u10bb\n\u00fe"+
		"\3\u00ff\3\u00ff\3\u00ff\3\u00ff\5\u00ff\u10c1\n\u00ff\3\u00ff\5\u00ff"+
		"\u10c4\n\u00ff\3\u0100\3\u0100\3\u0100\5\u0100\u10c9\n\u0100\3\u0101\3"+
		"\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\6\u0101"+
		"\u10d4\n\u0101\r\u0101\16\u0101\u10d5\3\u0102\3\u0102\3\u0102\3\u0102"+
		"\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\5\u0102\u10e2\n\u0102"+
		"\3\u0102\3\u0102\3\u0102\5\u0102\u10e7\n\u0102\3\u0102\3\u0102\3\u0102"+
		"\3\u0102\3\u0102\3\u0102\5\u0102\u10ef\n\u0102\3\u0102\3\u0102\3\u0102"+
		"\3\u0102\5\u0102\u10f5\n\u0102\5\u0102\u10f7\n\u0102\5\u0102\u10f9\n\u0102"+
		"\3\u0103\3\u0103\3\u0103\3\u0103\5\u0103\u10ff\n\u0103\3\u0103\3\u0103"+
		"\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\5\u0104"+
		"\u110b\n\u0104\3\u0104\3\u0104\3\u0104\5\u0104\u1110\n\u0104\5\u0104\u1112"+
		"\n\u0104\3\u0104\3\u0104\5\u0104\u1116\n\u0104\3\u0104\3\u0104\3\u0104"+
		"\3\u0104\5\u0104\u111c\n\u0104\3\u0104\5\u0104\u111f\n\u0104\3\u0104\5"+
		"\u0104\u1122\n\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3"+
		"\u0104\3\u0104\5\u0104\u112c\n\u0104\5\u0104\u112e\n\u0104\3\u0105\3\u0105"+
		"\3\u0105\3\u0105\5\u0105\u1134\n\u0105\3\u0106\3\u0106\3\u0106\6\u0106"+
		"\u1139\n\u0106\r\u0106\16\u0106\u113a\3\u0106\3\u0106\3\u0106\3\u0106"+
		"\5\u0106\u1141\n\u0106\3\u0107\3\u0107\3\u0107\3\u0108\3\u0108\3\u0108"+
		"\3\u0108\3\u0108\5\u0108\u114b\n\u0108\3\u0108\3\u0108\5\u0108\u114f\n"+
		"\u0108\3\u0109\3\u0109\3\u0109\5\u0109\u1154\n\u0109\3\u010a\3\u010a\3"+
		"\u010a\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b"+
		"\3\u010b\3\u010b\7\u010b\u1163\n\u010b\f\u010b\16\u010b\u1166\13\u010b"+
		"\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c"+
		"\3\u010c\3\u010c\3\u010c\3\u010c\5\u010c\u1175\n\u010c\3\u010c\3\u010c"+
		"\3\u010c\5\u010c\u117a\n\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c"+
		"\3\u010c\5\u010c\u1182\n\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c"+
		"\3\u010c\5\u010c\u118a\n\u010c\3\u010d\3\u010d\3\u010d\5\u010d\u118f\n"+
		"\u010d\3\u010d\3\u010d\3\u010d\3\u010d\5\u010d\u1195\n\u010d\3\u010d\5"+
		"\u010d\u1198\n\u010d\5\u010d\u119a\n\u010d\3\u010e\3\u010e\3\u010f\3\u010f"+
		"\3\u010f\7\u010f\u11a1\n\u010f\f\u010f\16\u010f\u11a4\13\u010f\3\u0110"+
		"\3\u0110\3\u0110\5\u0110\u11a9\n\u0110\3\u0110\3\u0110\3\u0110\3\u0110"+
		"\5\u0110\u11af\n\u0110\5\u0110\u11b1\n\u0110\3\u0110\3\u0110\5\u0110\u11b5"+
		"\n\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110"+
		"\3\u0110\5\u0110\u11c0\n\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110"+
		"\3\u0110\3\u0110\3\u0110\5\u0110\u11ca\n\u0110\3\u0110\3\u0110\3\u0110"+
		"\5\u0110\u11cf\n\u0110\3\u0111\3\u0111\3\u0111\5\u0111\u11d4\n\u0111\3"+
		"\u0111\3\u0111\3\u0111\5\u0111\u11d9\n\u0111\3\u0111\3\u0111\3\u0111\3"+
		"\u0111\3\u0111\3\u0111\5\u0111\u11e1\n\u0111\3\u0112\3\u0112\5\u0112\u11e5"+
		"\n\u0112\3\u0112\7\u0112\u11e8\n\u0112\f\u0112\16\u0112\u11eb\13\u0112"+
		"\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\5\u0113\u11f3\n\u0113"+
		"\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114"+
		"\3\u0114\5\u0114\u11ff\n\u0114\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115"+
		"\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u120d"+
		"\n\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\5\u0115"+
		"\u1216\n\u0115\5\u0115\u1218\n\u0115\3\u0116\3\u0116\3\u0116\7\u0116\u121d"+
		"\n\u0116\f\u0116\16\u0116\u1220\13\u0116\3\u0117\3\u0117\3\u0117\3\u0117"+
		"\5\u0117\u1226\n\u0117\3\u0118\3\u0118\5\u0118\u122a\n\u0118\3\u0118\3"+
		"\u0118\3\u0118\3\u0118\5\u0118\u1230\n\u0118\3\u0118\3\u0118\3\u0118\3"+
		"\u0118\7\u0118\u1236\n\u0118\f\u0118\16\u0118\u1239\13\u0118\3\u0118\3"+
		"\u0118\3\u0118\3\u0118\5\u0118\u123f\n\u0118\3\u0118\3\u0118\5\u0118\u1243"+
		"\n\u0118\3\u0118\3\u0118\3\u0118\3\u0118\5\u0118\u1249\n\u0118\3\u0118"+
		"\3\u0118\3\u0118\7\u0118\u124e\n\u0118\f\u0118\16\u0118\u1251\13\u0118"+
		"\5\u0118\u1253\n\u0118\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119"+
		"\3\u0119\5\u0119\u125c\n\u0119\3\u0119\3\u0119\3\u0119\3\u0119\5\u0119"+
		"\u1262\n\u0119\3\u011a\3\u011a\3\u011a\5\u011a\u1267\n\u011a\3\u011b\3"+
		"\u011b\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c"+
		"\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c"+
		"\7\u011c\u127c\n\u011c\f\u011c\16\u011c\u127f\13\u011c\5\u011c\u1281\n"+
		"\u011c\3\u011d\3\u011d\3\u011d\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e"+
		"\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\5\u011e\u1291\n\u011e"+
		"\3\u011e\3\u011e\3\u011e\5\u011e\u1296\n\u011e\3\u011e\5\u011e\u1299\n"+
		"\u011e\3\u011e\3\u011e\5\u011e\u129d\n\u011e\3\u011e\5\u011e\u12a0\n\u011e"+
		"\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e"+
		"\3\u011e\3\u011e\3\u011e\5\u011e\u12ae\n\u011e\3\u011e\3\u011e\3\u011e"+
		"\3\u011e\5\u011e\u12b4\n\u011e\3\u011e\3\u011e\3\u011e\5\u011e\u12b9\n"+
		"\u011e\3\u011e\5\u011e\u12bc\n\u011e\5\u011e\u12be\n\u011e\3\u011f\3\u011f"+
		"\5\u011f\u12c2\n\u011f\3\u011f\3\u011f\3\u011f\5\u011f\u12c7\n\u011f\5"+
		"\u011f\u12c9\n\u011f\3\u0120\3\u0120\3\u0120\3\u0121\3\u0121\3\u0121\3"+
		"\u0121\3\u0121\3\u0121\3\u0121\5\u0121\u12d5\n\u0121\3\u0122\3\u0122\7"+
		"\u0122\u12d9\n\u0122\f\u0122\16\u0122\u12dc\13\u0122\3\u0123\3\u0123\3"+
		"\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123"+
		"\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\5\u0123"+
		"\u12f1\n\u0123\3\u0123\3\u0123\5\u0123\u12f5\n\u0123\5\u0123\u12f7\n\u0123"+
		"\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\5\u0124\u12ff\n\u0124"+
		"\3\u0125\3\u0125\5\u0125\u1303\n\u0125\3\u0125\3\u0125\3\u0126\3\u0126"+
		"\3\u0126\3\u0126\3\u0126\5\u0126\u130c\n\u0126\3\u0127\3\u0127\3\u0127"+
		"\3\u0127\3\u0128\3\u0128\3\u0128\3\u0128\5\u0128\u1316\n\u0128\3\u0129"+
		"\3\u0129\3\u0129\3\u0129\3\u0129\5\u0129\u131d\n\u0129\3\u0129\5\u0129"+
		"\u1320\n\u0129\3\u0129\3\u0129\5\u0129\u1324\n\u0129\3\u0129\5\u0129\u1327"+
		"\n\u0129\3\u0129\5\u0129\u132a\n\u0129\3\u0129\3\u0129\5\u0129\u132e\n"+
		"\u0129\3\u0129\5\u0129\u1331\n\u0129\3\u0129\3\u0129\5\u0129\u1335\n\u0129"+
		"\3\u0129\5\u0129\u1338\n\u0129\3\u0129\3\u0129\3\u0129\5\u0129\u133d\n"+
		"\u0129\3\u0129\5\u0129\u1340\n\u0129\3\u0129\3\u0129\3\u0129\5\u0129\u1345"+
		"\n\u0129\3\u0129\5\u0129\u1348\n\u0129\3\u0129\3\u0129\3\u0129\3\u0129"+
		"\5\u0129\u134e\n\u0129\3\u0129\3\u0129\5\u0129\u1352\n\u0129\3\u0129\3"+
		"\u0129\3\u0129\3\u0129\5\u0129\u1358\n\u0129\3\u0129\5\u0129\u135b\n\u0129"+
		"\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\5\u0129\u1364"+
		"\n\u0129\5\u0129\u1366\n\u0129\3\u0129\3\u0129\3\u0129\3\u0129\5\u0129"+
		"\u136c\n\u0129\3\u0129\3\u0129\5\u0129\u1370\n\u0129\3\u0129\5\u0129\u1373"+
		"\n\u0129\3\u0129\5\u0129\u1376\n\u0129\3\u0129\3\u0129\5\u0129\u137a\n"+
		"\u0129\3\u0129\3\u0129\3\u0129\3\u0129\5\u0129\u1380\n\u0129\3\u0129\5"+
		"\u0129\u1383\n\u0129\3\u0129\5\u0129\u1386\n\u0129\3\u0129\3\u0129\3\u0129"+
		"\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\5\u0129\u1390\n\u0129\3\u0129"+
		"\3\u0129\5\u0129\u1394\n\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129"+
		"\7\u0129\u139b\n\u0129\f\u0129\16\u0129\u139e\13\u0129\5\u0129\u13a0\n"+
		"\u0129\3\u0129\3\u0129\3\u0129\5\u0129\u13a5\n\u0129\3\u0129\5\u0129\u13a8"+
		"\n\u0129\3\u0129\5\u0129\u13ab\n\u0129\3\u0129\3\u0129\5\u0129\u13af\n"+
		"\u0129\3\u0129\5\u0129\u13b2\n\u0129\3\u0129\3\u0129\3\u0129\5\u0129\u13b7"+
		"\n\u0129\3\u0129\3\u0129\5\u0129\u13bb\n\u0129\3\u0129\3\u0129\3\u0129"+
		"\3\u0129\3\u0129\3\u0129\5\u0129\u13c3\n\u0129\3\u0129\3\u0129\3\u0129"+
		"\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\5\u0129"+
		"\u13d0\n\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129"+
		"\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129"+
		"\5\u0129\u13e2\n\u0129\3\u0129\3\u0129\3\u0129\5\u0129\u13e7\n\u0129\3"+
		"\u0129\3\u0129\3\u0129\5\u0129\u13ec\n\u0129\3\u0129\3\u0129\3\u0129\3"+
		"\u0129\3\u0129\3\u0129\5\u0129\u13f4\n\u0129\3\u012a\3\u012a\3\u012a\3"+
		"\u012a\5\u012a\u13fa\n\u012a\5\u012a\u13fc\n\u012a\3\u012b\3\u012b\5\u012b"+
		"\u1400\n\u012b\3\u012b\5\u012b\u1403\n\u012b\3\u012c\3\u012c\3\u012d\3"+
		"\u012d\3\u012d\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e"+
		"\5\u012e\u1411\n\u012e\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f"+
		"\3\u012f\3\u012f\5\u012f\u141b\n\u012f\3\u012f\3\u012f\5\u012f\u141f\n"+
		"\u012f\3\u012f\3\u012f\3\u012f\3\u012f\7\u012f\u1425\n\u012f\f\u012f\16"+
		"\u012f\u1428\13\u012f\5\u012f\u142a\n\u012f\3\u012f\3\u012f\5\u012f\u142e"+
		"\n\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f"+
		"\5\u012f\u1438\n\u012f\3\u0130\3\u0130\5\u0130\u143c\n\u0130\3\u0131\3"+
		"\u0131\3\u0131\7\u0131\u1441\n\u0131\f\u0131\16\u0131\u1444\13\u0131\3"+
		"\u0132\3\u0132\5\u0132\u1448\n\u0132\3\u0133\3\u0133\3\u0133\3\u0133\3"+
		"\u0133\3\u0133\5\u0133\u1450\n\u0133\3\u0134\3\u0134\3\u0134\5\u0134\u1455"+
		"\n\u0134\3\u0134\3\u0134\3\u0135\3\u0135\5\u0135\u145b\n\u0135\3\u0136"+
		"\3\u0136\3\u0136\7\u0136\u1460\n\u0136\f\u0136\16\u0136\u1463\13\u0136"+
		"\3\u0137\3\u0137\5\u0137\u1467\n\u0137\3\u0137\3\u0137\3\u0137\3\u0137"+
		"\5\u0137\u146d\n\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\5\u0137"+
		"\u1474\n\u0137\3\u0138\3\u0138\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139"+
		"\3\u0139\5\u0139\u147e\n\u0139\5\u0139\u1480\n\u0139\3\u013a\3\u013a\3"+
		"\u013a\3\u013a\3\u013a\3\u013a\5\u013a\u1488\n\u013a\3\u013b\3\u013b\3"+
		"\u013b\5\u013b\u148d\n\u013b\3\u013b\3\u013b\5\u013b\u1491\n\u013b\3\u013b"+
		"\5\u013b\u1494\n\u013b\3\u013c\3\u013c\3\u013c\7\u013c\u1499\n\u013c\f"+
		"\u013c\16\u013c\u149c\13\u013c\3\u013d\3\u013d\5\u013d\u14a0\n\u013d\3"+
		"\u013d\3\u013d\5\u013d\u14a4\n\u013d\3\u013e\3\u013e\3\u013e\3\u013e\3"+
		"\u013e\3\u013f\3\u013f\3\u013f\3\u013f\5\u013f\u14af\n\u013f\3\u0140\3"+
		"\u0140\3\u0140\3\u0140\3\u0140\3\u0140\5\u0140\u14b7\n\u0140\3\u0140\3"+
		"\u0140\5\u0140\u14bb\n\u0140\3\u0140\5\u0140\u14be\n\u0140\3\u0140\5\u0140"+
		"\u14c1\n\u0140\3\u0141\3\u0141\5\u0141\u14c5\n\u0141\3\u0141\3\u0141\5"+
		"\u0141\u14c9\n\u0141\3\u0141\7\u0141\u14cc\n\u0141\f\u0141\16\u0141\u14cf"+
		"\13\u0141\3\u0142\3\u0142\3\u0142\5\u0142\u14d4\n\u0142\3\u0143\3\u0143"+
		"\5\u0143\u14d8\n\u0143\3\u0143\3\u0143\3\u0144\3\u0144\3\u0145\3\u0145"+
		"\3\u0145\3\u0145\3\u0145\5\u0145\u14e3\n\u0145\3\u0145\5\u0145\u14e6\n"+
		"\u0145\3\u0145\5\u0145\u14e9\n\u0145\3\u0145\5\u0145\u14ec\n\u0145\3\u0146"+
		"\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146\5\u0146\u14f4\n\u0146\3\u0147"+
		"\3\u0147\5\u0147\u14f8\n\u0147\3\u0147\7\u0147\u14fb\n\u0147\f\u0147\16"+
		"\u0147\u14fe\13\u0147\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\5\u0148"+
		"\u1505\n\u0148\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\5\u0149"+
		"\u150d\n\u0149\3\u014a\3\u014a\3\u014a\3\u014a\5\u014a\u1513\n\u014a\3"+
		"\u014b\3\u014b\3\u014b\3\u014b\3\u014b\3\u014b\3\u014b\3\u014b\3\u014b"+
		"\3\u014b\3\u014b\5\u014b\u1520\n\u014b\3\u014b\3\u014b\3\u014c\3\u014c"+
		"\3\u014c\3\u014c\3\u014c\3\u014c\5\u014c\u152a\n\u014c\3\u014c\3\u014c"+
		"\3\u014c\3\u014c\5\u014c\u1530\n\u014c\3\u014d\3\u014d\3\u014d\3\u014e"+
		"\3\u014e\3\u014e\3\u014f\3\u014f\3\u0150\3\u0150\3\u0150\3\u0150\5\u0150"+
		"\u153e\n\u0150\3\u0150\5\u0150\u1541\n\u0150\3\u0150\3\u0150\5\u0150\u1545"+
		"\n\u0150\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150"+
		"\3\u0150\7\u0150\u1550\n\u0150\f\u0150\16\u0150\u1553\13\u0150\3\u0151"+
		"\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\5\u0151\u155b\n\u0151\3\u0151"+
		"\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151"+
		"\7\u0151\u1567\n\u0151\f\u0151\16\u0151\u156a\13\u0151\3\u0152\3\u0152"+
		"\3\u0153\3\u0153\5\u0153\u1570\n\u0153\3\u0153\3\u0153\3\u0153\3\u0153"+
		"\5\u0153\u1576\n\u0153\3\u0153\3\u0153\3\u0153\3\u0153\5\u0153\u157c\n"+
		"\u0153\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\5\u0154\u1584\n"+
		"\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154"+
		"\3\u0154\5\u0154\u158f\n\u0154\3\u0154\3\u0154\5\u0154\u1593\n\u0154\3"+
		"\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155"+
		"\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155"+
		"\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155"+
		"\7\u0155\u15b0\n\u0155\f\u0155\16\u0155\u15b3\13\u0155\3\u0156\3\u0156"+
		"\3\u0156\3\u0156\5\u0156\u15b9\n\u0156\3\u0156\3\u0156\3\u0156\3\u0156"+
		"\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156"+
		"\3\u0156\3\u0156\5\u0156\u15ca\n\u0156\3\u0156\3\u0156\3\u0156\3\u0156"+
		"\3\u0156\5\u0156\u15d1\n\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156"+
		"\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\5\u0156\u15df"+
		"\n\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156"+
		"\3\u0156\3\u0156\5\u0156\u15eb\n\u0156\3\u0156\3\u0156\3\u0156\3\u0156"+
		"\5\u0156\u15f1\n\u0156\3\u0156\3\u0156\3\u0156\6\u0156\u15f6\n\u0156\r"+
		"\u0156\16\u0156\u15f7\3\u0156\5\u0156\u15fb\n\u0156\3\u0156\3\u0156\3"+
		"\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156"+
		"\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156"+
		"\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156"+
		"\3\u0156\3\u0156\3\u0156\5\u0156\u161d\n\u0156\3\u0156\3\u0156\3\u0156"+
		"\3\u0156\3\u0156\3\u0156\7\u0156\u1625\n\u0156\f\u0156\16\u0156\u1628"+
		"\13\u0156\3\u0157\3\u0157\3\u0157\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158"+
		"\3\u0158\5\u0158\u1633\n\u0158\3\u0159\3\u0159\3\u0159\5\u0159\u1638\n"+
		"\u0159\3\u0159\3\u0159\3\u0159\3\u0159\5\u0159\u163e\n\u0159\3\u0159\3"+
		"\u0159\3\u0159\3\u0159\3\u0159\3\u0159\5\u0159\u1646\n\u0159\3\u0159\3"+
		"\u0159\3\u0159\3\u0159\3\u0159\5\u0159\u164d\n\u0159\3\u0159\3\u0159\3"+
		"\u0159\3\u0159\5\u0159\u1653\n\u0159\3\u0159\3\u0159\3\u0159\5\u0159\u1658"+
		"\n\u0159\3\u0159\3\u0159\3\u0159\3\u0159\5\u0159\u165e\n\u0159\3\u0159"+
		"\3\u0159\3\u0159\5\u0159\u1663\n\u0159\3\u0159\3\u0159\3\u0159\5\u0159"+
		"\u1668\n\u0159\3\u0159\3\u0159\3\u0159\3\u0159\5\u0159\u166e\n\u0159\3"+
		"\u0159\3\u0159\3\u0159\5\u0159\u1673\n\u0159\3\u0159\3\u0159\3\u0159\3"+
		"\u0159\5\u0159\u1679\n\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3"+
		"\u0159\5\u0159\u1681\n\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3"+
		"\u0159\5\u0159\u1689\n\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3"+
		"\u0159\5\u0159\u1691\n\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3"+
		"\u0159\5\u0159\u1699\n\u0159\3\u0159\3\u0159\3\u0159\5\u0159\u169e\n\u0159"+
		"\3\u0159\3\u0159\3\u0159\3\u0159\5\u0159\u16a4\n\u0159\3\u0159\3\u0159"+
		"\3\u0159\5\u0159\u16a9\n\u0159\3\u0159\3\u0159\5\u0159\u16ad\n\u0159\3"+
		"\u0159\3\u0159\5\u0159\u16b1\n\u0159\3\u0159\3\u0159\3\u0159\5\u0159\u16b6"+
		"\n\u0159\5\u0159\u16b8\n\u0159\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a"+
		"\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b"+
		"\3\u015b\3\u015b\3\u015b\5\u015b\u16cb\n\u015b\3\u015b\3\u015b\5\u015b"+
		"\u16cf\n\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\5\u015b\u16d6\n"+
		"\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b"+
		"\3\u015b\3\u015b\5\u015b\u16e2\n\u015b\3\u015b\5\u015b\u16e5\n\u015b\3"+
		"\u015b\3\u015b\5\u015b\u16e9\n\u015b\3\u015c\3\u015c\3\u015c\5\u015c\u16ee"+
		"\n\u015c\3\u015d\3\u015d\3\u015d\5\u015d\u16f3\n\u015d\3\u015d\3\u015d"+
		"\5\u015d\u16f7\n\u015d\3\u015e\3\u015e\3\u015e\3\u015f\3\u015f\3\u015f"+
		"\3\u015f\3\u015f\5\u015f\u1701\n\u015f\3\u015f\3\u015f\3\u015f\3\u015f"+
		"\3\u015f\3\u015f\3\u015f\5\u015f\u170a\n\u015f\5\u015f\u170c\n\u015f\3"+
		"\u0160\5\u0160\u170f\n\u0160\3\u0160\3\u0160\3\u0161\3\u0161\3\u0161\3"+
		"\u0161\3\u0161\5\u0161\u1718\n\u0161\3\u0162\3\u0162\3\u0162\7\u0162\u171d"+
		"\n\u0162\f\u0162\16\u0162\u1720\13\u0162\3\u0163\3\u0163\3\u0163\3\u0163"+
		"\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\5\u0163\u172c\n\u0163"+
		"\3\u0163\3\u0163\3\u0163\5\u0163\u1731\n\u0163\3\u0164\3\u0164\3\u0164"+
		"\3\u0164\3\u0164\5\u0164\u1738\n\u0164\3\u0164\3\u0164\3\u0164\3\u0164"+
		"\5\u0164\u173e\n\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164"+
		"\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164"+
		"\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\6\u0164\u1756"+
		"\n\u0164\r\u0164\16\u0164\u1757\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164"+
		"\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164"+
		"\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164"+
		"\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\5\u0164\u1777\n\u0164"+
		"\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164"+
		"\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164"+
		"\5\u0164\u178b\n\u0164\3\u0164\3\u0164\3\u0164\3\u0164\5\u0164\u1791\n"+
		"\u0164\3\u0164\3\u0164\5\u0164\u1795\n\u0164\3\u0164\3\u0164\3\u0164\3"+
		"\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164"+
		"\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164"+
		"\3\u0164\3\u0164\3\u0164\3\u0164\5\u0164\u17b0\n\u0164\3\u0164\3\u0164"+
		"\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\5\u0164"+
		"\u17bc\n\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164"+
		"\3\u0164\3\u0164\3\u0164\3\u0164\5\u0164\u17c9\n\u0164\3\u0164\3\u0164"+
		"\5\u0164\u17cd\n\u0164\3\u0164\3\u0164\5\u0164\u17d1\n\u0164\3\u0164\3"+
		"\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164"+
		"\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164"+
		"\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\5\u0164\u17ed"+
		"\n\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164"+
		"\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164"+
		"\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164"+
		"\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164"+
		"\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164"+
		"\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164"+
		"\3\u0164\5\u0164\u1825\n\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164"+
		"\3\u0164\3\u0164\3\u0164\5\u0164\u182f\n\u0164\3\u0164\3\u0164\5\u0164"+
		"\u1833\n\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164"+
		"\3\u0164\3\u0164\3\u0164\5\u0164\u183f\n\u0164\3\u0164\3\u0164\3\u0164"+
		"\5\u0164\u1844\n\u0164\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165"+
		"\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\5\u0165\u1851\n\u0165\3\u0165"+
		"\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165"+
		"\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\5\u0165"+
		"\u1865\n\u0165\3\u0166\3\u0166\5\u0166\u1869\n\u0166\3\u0166\3\u0166\3"+
		"\u0167\3\u0167\3\u0167\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168"+
		"\3\u0168\3\u0168\7\u0168\u1878\n\u0168\f\u0168\16\u0168\u187b\13\u0168"+
		"\5\u0168\u187d\n\u0168\3\u0169\3\u0169\3\u0169\5\u0169\u1882\n\u0169\3"+
		"\u0169\5\u0169\u1885\n\u0169\3\u016a\3\u016a\3\u016b\3\u016b\3\u016b\3"+
		"\u016b\3\u016b\5\u016b\u188e\n\u016b\3\u016b\3\u016b\5\u016b\u1892\n\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\5\u016b\u1898\n\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\5\u016b\u189e\n\u016b\3\u016b\3\u016b\5\u016b\u18a2\n"+
		"\u016b\3\u016b\3\u016b\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c"+
		"\3\u016c\5\u016c\u18ad\n\u016c\3\u016c\3\u016c\3\u016c\3\u016c\5\u016c"+
		"\u18b3\n\u016c\5\u016c\u18b5\n\u016c\3\u016c\3\u016c\3\u016d\3\u016d\3"+
		"\u016d\5\u016d\u18bc\n\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\5"+
		"\u016d\u18c3\n\u016d\3\u016d\3\u016d\5\u016d\u18c7\n\u016d\3\u016e\3\u016e"+
		"\3\u016e\7\u016e\u18cc\n\u016e\f\u016e\16\u016e\u18cf\13\u016e\3\u016f"+
		"\3\u016f\5\u016f\u18d3\n\u016f\3\u0170\3\u0170\3\u0170\5\u0170\u18d8\n"+
		"\u0170\3\u0170\5\u0170\u18db\n\u0170\3\u0171\3\u0171\3\u0171\5\u0171\u18e0"+
		"\n\u0171\3\u0172\3\u0172\5\u0172\u18e4\n\u0172\3\u0172\3\u0172\5\u0172"+
		"\u18e8\n\u0172\3\u0173\3\u0173\3\u0173\5\u0173\u18ed\n\u0173\3\u0173\3"+
		"\u0173\3\u0173\5\u0173\u18f2\n\u0173\5\u0173\u18f4\n\u0173\3\u0173\3\u0173"+
		"\5\u0173\u18f8\n\u0173\3\u0174\3\u0174\3\u0174\3\u0175\3\u0175\3\u0175"+
		"\3\u0176\3\u0176\3\u0176\3\u0177\3\u0177\5\u0177\u1905\n\u0177\3\u0177"+
		"\3\u0177\5\u0177\u1909\n\u0177\3\u0177\5\u0177\u190c\n\u0177\3\u0177\3"+
		"\u0177\5\u0177\u1910\n\u0177\3\u0177\3\u0177\5\u0177\u1914\n\u0177\3\u0177"+
		"\3\u0177\5\u0177\u1918\n\u0177\3\u0177\3\u0177\3\u0177\5\u0177\u191d\n"+
		"\u0177\3\u0177\3\u0177\5\u0177\u1921\n\u0177\3\u0177\3\u0177\5\u0177\u1925"+
		"\n\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\5\u0177"+
		"\u192e\n\u0177\5\u0177\u1930\n\u0177\3\u0178\3\u0178\3\u0178\7\u0178\u1935"+
		"\n\u0178\f\u0178\16\u0178\u1938\13\u0178\3\u0179\3\u0179\3\u0179\5\u0179"+
		"\u193d\n\u0179\3\u017a\3\u017a\3\u017b\3\u017b\3\u017c\3\u017c\5\u017c"+
		"\u1945\n\u017c\3\u017d\3\u017d\3\u017e\3\u017e\3\u017e\3\u017e\3\u017f"+
		"\3\u017f\3\u017f\3\u017f\3\u0180\3\u0180\3\u0180\3\u0180\3\u0181\3\u0181"+
		"\3\u0181\7\u0181\u1958\n\u0181\f\u0181\16\u0181\u195b\13\u0181\3\u0182"+
		"\3\u0182\5\u0182\u195f\n\u0182\3\u0183\3\u0183\3\u0183\7\u0183\u1964\n"+
		"\u0183\f\u0183\16\u0183\u1967\13\u0183\3\u0184\3\u0184\3\u0185\3\u0185"+
		"\3\u0185\3\u0185\3\u0185\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186"+
		"\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\5\u0186\u197d"+
		"\n\u0186\3\u0187\3\u0187\3\u0187\3\u0188\3\u0188\3\u0188\3\u0188\3\u0188"+
		"\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189\5\u0189\u198d\n\u0189"+
		"\3\u018a\3\u018a\3\u018a\3\u018b\3\u018b\3\u018b\6\u018b\u1995\n\u018b"+
		"\r\u018b\16\u018b\u1996\3\u018c\3\u018c\5\u018c\u199b\n\u018c\3\u018c"+
		"\3\u018c\3\u018c\6\u018c\u19a0\n\u018c\r\u018c\16\u018c\u19a1\3\u018c"+
		"\5\u018c\u19a5\n\u018c\3\u018c\3\u018c\3\u018c\3\u018d\3\u018d\3\u018d"+
		"\3\u018e\3\u018e\3\u018e\5\u018e\u19b0\n\u018e\3\u018f\3\u018f\3\u0190"+
		"\3\u0190\3\u0190\3\u0191\3\u0191\5\u0191\u19b9\n\u0191\3\u0191\5\u0191"+
		"\u19bc\n\u0191\3\u0191\3\u0191\3\u0192\3\u0192\3\u0192\5\u0192\u19c3\n"+
		"\u0192\3\u0193\3\u0193\3\u0193\5\u0193\u19c8\n\u0193\3\u0194\3\u0194\3"+
		"\u0194\3\u0194\3\u0194\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195"+
		"\3\u0195\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0197"+
		"\3\u0197\3\u0197\6\u0197\u19e0\n\u0197\r\u0197\16\u0197\u19e1\3\u0198"+
		"\3\u0198\3\u0198\3\u0198\5\u0198\u19e8\n\u0198\3\u0199\3\u0199\3\u0199"+
		"\3\u0199\5\u0199\u19ee\n\u0199\3\u0199\3\u0199\5\u0199\u19f2\n\u0199\3"+
		"\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019b\3\u019b\5\u019b"+
		"\u19fc\n\u019b\3\u019c\3\u019c\5\u019c\u1a00\n\u019c\3\u019c\3\u019c\3"+
		"\u019d\3\u019d\3\u019d\3\u019d\3\u019d\3\u019d\3\u019d\7\u019d\u1a0b\n"+
		"\u019d\f\u019d\16\u019d\u1a0e\13\u019d\3\u019d\3\u019d\3\u019e\3\u019e"+
		"\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\5\u019e\u1a19\n\u019e\3\u019f"+
		"\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u01a0\3\u01a0\3\u01a0\3\u01a1"+
		"\3\u01a1\3\u01a1\3\u01a2\3\u01a2\3\u01a2\3\u01a2\5\u01a2\u1a2b\n\u01a2"+
		"\3\u01a2\3\u01a2\3\u01a2\3\u01a2\7\u01a2\u1a31\n\u01a2\f\u01a2\16\u01a2"+
		"\u1a34\13\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\7\u01a2\u1a3b"+
		"\n\u01a2\f\u01a2\16\u01a2\u1a3e\13\u01a2\5\u01a2\u1a40\n\u01a2\3\u01a3"+
		"\3\u01a3\3\u01a3\5\u01a3\u1a45\n\u01a3\3\u01a4\3\u01a4\5\u01a4\u1a49\n"+
		"\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a5\3\u01a5\5\u01a5\u1a50\n\u01a5\3"+
		"\u01a5\3\u01a5\3\u01a5\5\u01a5\u1a55\n\u01a5\3\u01a6\3\u01a6\3\u01a7\3"+
		"\u01a7\3\u01a7\5\u01a7\u1a5c\n\u01a7\3\u01a7\3\u01a7\3\u01a7\3\u01a7\7"+
		"\u01a7\u1a62\n\u01a7\f\u01a7\16\u01a7\u1a65\13\u01a7\5\u01a7\u1a67\n\u01a7"+
		"\3\u01a8\3\u01a8\3\u01a8\5\u01a8\u1a6c\n\u01a8\3\u01a8\5\u01a8\u1a6f\n"+
		"\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a8\7\u01a8\u1a75\n\u01a8\f\u01a8\16"+
		"\u01a8\u1a78\13\u01a8\5\u01a8\u1a7a\n\u01a8\3\u01a9\3\u01a9\3\u01a9\3"+
		"\u01a9\3\u01aa\3\u01aa\3\u01aa\3\u01ab\3\u01ab\3\u01ab\3\u01ac\3\u01ac"+
		"\5\u01ac\u1a88\n\u01ac\3\u01ac\5\u01ac\u1a8b\n\u01ac\3\u01ac\3\u01ac\3"+
		"\u01ac\3\u01ac\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad"+
		"\5\u01ad\u1a98\n\u01ad\3\u01ad\3\u01ad\5\u01ad\u1a9c\n\u01ad\5\u01ad\u1a9e"+
		"\n\u01ad\3\u01ae\3\u01ae\3\u01ae\5\u01ae\u1aa3\n\u01ae\3\u01af\3\u01af"+
		"\3\u01af\5\u01af\u1aa8\n\u01af\3\u01b0\3\u01b0\3\u01b0\3\u01b1\5\u01b1"+
		"\u1aae\n\u01b1\3\u01b1\3\u01b1\3\u01b2\3\u01b2\5\u01b2\u1ab4\n\u01b2\3"+
		"\u01b2\3\u01b2\7\u01b2\u1ab8\n\u01b2\f\u01b2\16\u01b2\u1abb\13\u01b2\3"+
		"\u01b2\3\u01b2\5\u01b2\u1abf\n\u01b2\3\u01b2\5\u01b2\u1ac2\n\u01b2\3\u01b2"+
		"\3\u01b2\7\u01b2\u1ac6\n\u01b2\f\u01b2\16\u01b2\u1ac9\13\u01b2\3\u01b2"+
		"\3\u01b2\5\u01b2\u1acd\n\u01b2\3\u01b2\5\u01b2\u1ad0\n\u01b2\3\u01b2\3"+
		"\u01b2\7\u01b2\u1ad4\n\u01b2\f\u01b2\16\u01b2\u1ad7\13\u01b2\3\u01b2\5"+
		"\u01b2\u1ada\n\u01b2\3\u01b2\3\u01b2\3\u01b2\3\u01b2\5\u01b2\u1ae0\n\u01b2"+
		"\5\u01b2\u1ae2\n\u01b2\3\u01b2\5\u01b2\u1ae5\n\u01b2\3\u01b2\3\u01b2\7"+
		"\u01b2\u1ae9\n\u01b2\f\u01b2\16\u01b2\u1aec\13\u01b2\3\u01b2\3\u01b2\3"+
		"\u01b2\5\u01b2\u1af1\n\u01b2\3\u01b2\3\u01b2\3\u01b2\3\u01b2\3\u01b2\3"+
		"\u01b2\5\u01b2\u1af9\n\u01b2\5\u01b2\u1afb\n\u01b2\5\u01b2\u1afd\n\u01b2"+
		"\3\u01b3\3\u01b3\5\u01b3\u1b01\n\u01b3\3\u01b4\3\u01b4\7\u01b4\u1b05\n"+
		"\u01b4\f\u01b4\16\u01b4\u1b08\13\u01b4\3\u01b4\3\u01b4\5\u01b4\u1b0c\n"+
		"\u01b4\3\u01b4\3\u01b4\5\u01b4\u1b10\n\u01b4\3\u01b4\3\u01b4\3\u01b4\5"+
		"\u01b4\u1b15\n\u01b4\3\u01b4\3\u01b4\7\u01b4\u1b19\n\u01b4\f\u01b4\16"+
		"\u01b4\u1b1c\13\u01b4\3\u01b4\3\u01b4\7\u01b4\u1b20\n\u01b4\f\u01b4\16"+
		"\u01b4\u1b23\13\u01b4\5\u01b4\u1b25\n\u01b4\5\u01b4\u1b27\n\u01b4\3\u01b5"+
		"\5\u01b5\u1b2a\n\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5"+
		"\3\u01b5\3\u01b5\5\u01b5\u1b34\n\u01b5\3\u01b5\3\u01b5\5\u01b5\u1b38\n"+
		"\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\5\u01b5\u1b3e\n\u01b5\3\u01b5\3"+
		"\u01b5\3\u01b5\3\u01b5\3\u01b5\5\u01b5\u1b45\n\u01b5\3\u01b5\3\u01b5\3"+
		"\u01b5\5\u01b5\u1b4a\n\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3"+
		"\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\5\u01b5\u1b58\n"+
		"\u01b5\3\u01b5\3\u01b5\3\u01b5\5\u01b5\u1b5d\n\u01b5\3\u01b6\3\u01b6\3"+
		"\u01b7\3\u01b7\3\u01b8\3\u01b8\5\u01b8\u1b65\n\u01b8\3\u01b8\3\u01b8\3"+
		"\u01b8\5\u01b8\u1b6a\n\u01b8\3\u01b8\3\u01b8\5\u01b8\u1b6e\n\u01b8\3\u01b8"+
		"\5\u01b8\u1b71\n\u01b8\3\u01b9\3\u01b9\3\u01b9\5\u01b9\u1b76\n\u01b9\3"+
		"\u01b9\3\u01b9\5\u01b9\u1b7a\n\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3"+
		"\u01b9\3\u01b9\5\u01b9\u1b82\n\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3"+
		"\u01b9\3\u01b9\5\u01b9\u1b8a\n\u01b9\5\u01b9\u1b8c\n\u01b9\3\u01ba\3\u01ba"+
		"\3\u01ba\3\u01ba\3\u01ba\5\u01ba\u1b93\n\u01ba\3\u01bb\3\u01bb\3\u01bb"+
		"\3\u01bb\7\u01bb\u1b99\n\u01bb\f\u01bb\16\u01bb\u1b9c\13\u01bb\3\u01bb"+
		"\3\u01bb\3\u01bc\3\u01bc\5\u01bc\u1ba2\n\u01bc\3\u01bc\5\u01bc\u1ba5\n"+
		"\u01bc\3\u01bd\3\u01bd\3\u01bd\3\u01bd\7\u01bd\u1bab\n\u01bd\f\u01bd\16"+
		"\u01bd\u1bae\13\u01bd\3\u01bd\3\u01bd\3\u01be\3\u01be\3\u01be\5\u01be"+
		"\u1bb5\n\u01be\5\u01be\u1bb7\n\u01be\3\u01bf\3\u01bf\3\u01bf\3\u01bf\5"+
		"\u01bf\u1bbd\n\u01bf\3\u01c0\3\u01c0\3\u01c1\3\u01c1\5\u01c1\u1bc3\n\u01c1"+
		"\3\u01c2\3\u01c2\5\u01c2\u1bc7\n\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c2"+
		"\3\u01c2\5\u01c2\u1bce\n\u01c2\3\u01c3\3\u01c3\3\u01c4\3\u01c4\3\u01c4"+
		"\3\u01c5\3\u01c5\3\u01c5\3\u01c5\5\u01c5\u1bd9\n\u01c5\3\u01c6\3\u01c6"+
		"\3\u01c7\3\u01c7\3\u01c7\3\u01c8\3\u01c8\5\u01c8\u1be2\n\u01c8\3\u01c8"+
		"\5\u01c8\u1be5\n\u01c8\3\u01c8\3\u01c8\3\u01c8\5\u01c8\u1bea\n\u01c8\5"+
		"\u01c8\u1bec\n\u01c8\3\u01c8\5\u01c8\u1bef\n\u01c8\3\u01c8\5\u01c8\u1bf2"+
		"\n\u01c8\3\u01c8\3\u01c8\5\u01c8\u1bf6\n\u01c8\3\u01c8\5\u01c8\u1bf9\n"+
		"\u01c8\3\u01c8\3\u01c8\5\u01c8\u1bfd\n\u01c8\3\u01c8\3\u01c8\3\u01c8\5"+
		"\u01c8\u1c02\n\u01c8\3\u01c8\5\u01c8\u1c05\n\u01c8\3\u01c8\3\u01c8\5\u01c8"+
		"\u1c09\n\u01c8\3\u01c8\5\u01c8\u1c0c\n\u01c8\3\u01c8\3\u01c8\5\u01c8\u1c10"+
		"\n\u01c8\3\u01c8\3\u01c8\3\u01c8\5\u01c8\u1c15\n\u01c8\3\u01c8\3\u01c8"+
		"\5\u01c8\u1c19\n\u01c8\3\u01c8\3\u01c8\3\u01c8\3\u01c8\3\u01c8\3\u01c8"+
		"\3\u01c8\3\u01c8\3\u01c8\3\u01c8\5\u01c8\u1c25\n\u01c8\3\u01c8\3\u01c8"+
		"\5\u01c8\u1c29\n\u01c8\3\u01c8\3\u01c8\3\u01c8\3\u01c8\5\u01c8\u1c2f\n"+
		"\u01c8\3\u01c8\5\u01c8\u1c32\n\u01c8\3\u01c8\3\u01c8\3\u01c8\5\u01c8\u1c37"+
		"\n\u01c8\3\u01c8\3\u01c8\5\u01c8\u1c3b\n\u01c8\3\u01c8\3\u01c8\5\u01c8"+
		"\u1c3f\n\u01c8\3\u01c8\3\u01c8\3\u01c8\5\u01c8\u1c44\n\u01c8\3\u01c8\3"+
		"\u01c8\3\u01c8\3\u01c8\3\u01c8\3\u01c8\3\u01c8\5\u01c8\u1c4d\n\u01c8\3"+
		"\u01c8\5\u01c8\u1c50\n\u01c8\3\u01c8\3\u01c8\5\u01c8\u1c54\n\u01c8\3\u01c8"+
		"\3\u01c8\5\u01c8\u1c58\n\u01c8\3\u01c8\5\u01c8\u1c5b\n\u01c8\3\u01c8\3"+
		"\u01c8\5\u01c8\u1c5f\n\u01c8\3\u01c8\3\u01c8\5\u01c8\u1c63\n\u01c8\3\u01c8"+
		"\3\u01c8\3\u01c8\5\u01c8\u1c68\n\u01c8\3\u01c8\3\u01c8\3\u01c8\5\u01c8"+
		"\u1c6d\n\u01c8\3\u01c8\3\u01c8\3\u01c8\3\u01c8\5\u01c8\u1c73\n\u01c8\3"+
		"\u01c9\3\u01c9\3\u01c9\5\u01c9\u1c78\n\u01c9\3\u01ca\3\u01ca\3\u01ca\5"+
		"\u01ca\u1c7d\n\u01ca\5\u01ca\u1c7f\n\u01ca\3\u01cb\3\u01cb\3\u01cb\5\u01cb"+
		"\u1c84\n\u01cb\3\u01cb\3\u01cb\3\u01cc\6\u01cc\u1c89\n\u01cc\r\u01cc\16"+
		"\u01cc\u1c8a\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd\5\u01cd\u1c93"+
		"\n\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd\5\u01cd\u1c99\n\u01cd\5\u01cd"+
		"\u1c9b\n\u01cd\3\u01ce\3\u01ce\5\u01ce\u1c9f\n\u01ce\3\u01ce\3\u01ce\5"+
		"\u01ce\u1ca3\n\u01ce\3\u01cf\3\u01cf\5\u01cf\u1ca7\n\u01cf\3\u01cf\3\u01cf"+
		"\5\u01cf\u1cab\n\u01cf\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d1\3\u01d1"+
		"\3\u01d1\3\u01d1\3\u01d2\3\u01d2\3\u01d2\3\u01d2\5\u01d2\u1cb9\n\u01d2"+
		"\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\5\u01d3\u1cc0\n\u01d3\3\u01d4"+
		"\3\u01d4\5\u01d4\u1cc4\n\u01d4\3\u01d4\7\u01d4\u1cc7\n\u01d4\f\u01d4\16"+
		"\u01d4\u1cca\13\u01d4\3\u01d5\6\u01d5\u1ccd\n\u01d5\r\u01d5\16\u01d5\u1cce"+
		"\3\u01d6\3\u01d6\5\u01d6\u1cd3\n\u01d6\3\u01d6\3\u01d6\3\u01d6\3\u01d6"+
		"\5\u01d6\u1cd9\n\u01d6\3\u01d6\3\u01d6\5\u01d6\u1cdd\n\u01d6\3\u01d6\3"+
		"\u01d6\5\u01d6\u1ce1\n\u01d6\3\u01d6\3\u01d6\3\u01d6\5\u01d6\u1ce6\n\u01d6"+
		"\3\u01d6\3\u01d6\3\u01d6\5\u01d6\u1ceb\n\u01d6\3\u01d6\3\u01d6\3\u01d6"+
		"\5\u01d6\u1cf0\n\u01d6\3\u01d6\3\u01d6\3\u01d6\5\u01d6\u1cf5\n\u01d6\3"+
		"\u01d6\3\u01d6\3\u01d6\3\u01d6\5\u01d6\u1cfb\n\u01d6\3\u01d6\3\u01d6\3"+
		"\u01d6\3\u01d6\5\u01d6\u1d01\n\u01d6\3\u01d6\3\u01d6\3\u01d6\5\u01d6\u1d06"+
		"\n\u01d6\3\u01d6\3\u01d6\3\u01d6\5\u01d6\u1d0b\n\u01d6\3\u01d6\3\u01d6"+
		"\3\u01d6\5\u01d6\u1d10\n\u01d6\3\u01d6\3\u01d6\3\u01d6\5\u01d6\u1d15\n"+
		"\u01d6\3\u01d6\3\u01d6\3\u01d6\5\u01d6\u1d1a\n\u01d6\3\u01d6\3\u01d6\3"+
		"\u01d6\5\u01d6\u1d1f\n\u01d6\3\u01d6\3\u01d6\3\u01d6\5\u01d6\u1d24\n\u01d6"+
		"\3\u01d6\3\u01d6\3\u01d6\3\u01d6\3\u01d6\3\u01d6\3\u01d6\3\u01d6\5\u01d6"+
		"\u1d2e\n\u01d6\3\u01d6\3\u01d6\3\u01d6\3\u01d6\5\u01d6\u1d34\n\u01d6\3"+
		"\u01d6\3\u01d6\3\u01d6\3\u01d6\5\u01d6\u1d3a\n\u01d6\3\u01d6\3\u01d6\3"+
		"\u01d6\3\u01d6\5\u01d6\u1d40\n\u01d6\3\u01d6\5\u01d6\u1d43\n\u01d6\3\u01d6"+
		"\3\u01d6\3\u01d6\3\u01d6\3\u01d6\5\u01d6\u1d4a\n\u01d6\3\u01d6\3\u01d6"+
		"\3\u01d6\5\u01d6\u1d4f\n\u01d6\3\u01d6\5\u01d6\u1d52\n\u01d6\3\u01d7\3"+
		"\u01d7\5\u01d7\u1d56\n\u01d7\3\u01d8\5\u01d8\u1d59\n\u01d8\3\u01d8\3\u01d8"+
		"\5\u01d8\u1d5d\n\u01d8\3\u01d8\3\u01d8\3\u01d9\5\u01d9\u1d62\n\u01d9\3"+
		"\u01d9\3\u01d9\5\u01d9\u1d66\n\u01d9\3\u01d9\3\u01d9\3\u01da\5\u01da\u1d6b"+
		"\n\u01da\3\u01da\3\u01da\5\u01da\u1d6f\n\u01da\3\u01da\3\u01da\3\u01db"+
		"\3\u01db\3\u01db\3\u01db\3\u01db\5\u01db\u1d78\n\u01db\3\u01db\5\u01db"+
		"\u1d7b\n\u01db\3\u01db\5\u01db\u1d7e\n\u01db\3\u01dc\5\u01dc\u1d81\n\u01dc"+
		"\3\u01dc\3\u01dc\5\u01dc\u1d85\n\u01dc\3\u01dc\3\u01dc\5\u01dc\u1d89\n"+
		"\u01dc\3\u01dc\3\u01dc\5\u01dc\u1d8d\n\u01dc\3\u01dc\3\u01dc\3\u01dc\3"+
		"\u01dc\3\u01dc\3\u01dc\3\u01dc\3\u01dc\3\u01dc\3\u01dc\3\u01dc\3\u01dc"+
		"\3\u01dc\5\u01dc\u1d9c\n\u01dc\3\u01dc\5\u01dc\u1d9f\n\u01dc\5\u01dc\u1da1"+
		"\n\u01dc\3\u01dd\3\u01dd\3\u01dd\5\u01dd\u1da6\n\u01dd\3\u01dd\3\u01dd"+
		"\3\u01dd\3\u01dd\3\u01dd\3\u01dd\3\u01dd\5\u01dd\u1daf\n\u01dd\3\u01dd"+
		"\5\u01dd\u1db2\n\u01dd\3\u01dd\3\u01dd\5\u01dd\u1db6\n\u01dd\3\u01de\3"+
		"\u01de\3\u01de\3\u01de\3\u01de\3\u01df\3\u01df\3\u01df\3\u01df\7\u01df"+
		"\u1dc1\n\u01df\f\u01df\16\u01df\u1dc4\13\u01df\3\u01df\3\u01df\3\u01e0"+
		"\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\5\u01e0\u1dcf\n\u01e0"+
		"\3\u01e0\3\u01e0\3\u01e0\5\u01e0\u1dd4\n\u01e0\3\u01e0\7\u01e0\u1dd7\n"+
		"\u01e0\f\u01e0\16\u01e0\u1dda\13\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0"+
		"\7\u01e0\u1de0\n\u01e0\f\u01e0\16\u01e0\u1de3\13\u01e0\3\u01e0\3\u01e0"+
		"\5\u01e0\u1de7\n\u01e0\3\u01e1\3\u01e1\3\u01e1\3\u01e1\3\u01e1\7\u01e1"+
		"\u1dee\n\u01e1\f\u01e1\16\u01e1\u1df1\13\u01e1\3\u01e1\3\u01e1\5\u01e1"+
		"\u1df5\n\u01e1\3\u01e2\3\u01e2\5\u01e2\u1df9\n\u01e2\3\u01e2\3\u01e2\5"+
		"\u01e2\u1dfd\n\u01e2\3\u01e2\3\u01e2\5\u01e2\u1e01\n\u01e2\3\u01e2\3\u01e2"+
		"\3\u01e2\5\u01e2\u1e06\n\u01e2\3\u01e2\3\u01e2\3\u01e2\5\u01e2\u1e0b\n"+
		"\u01e2\3\u01e2\3\u01e2\3\u01e2\3\u01e2\5\u01e2\u1e11\n\u01e2\3\u01e2\3"+
		"\u01e2\3\u01e2\5\u01e2\u1e16\n\u01e2\3\u01e2\5\u01e2\u1e19\n\u01e2\3\u01e3"+
		"\3\u01e3\3\u01e3\7\u01e3\u1e1e\n\u01e3\f\u01e3\16\u01e3\u1e21\13\u01e3"+
		"\3\u01e4\3\u01e4\3\u01e4\3\u01e4\7\u01e4\u1e27\n\u01e4\f\u01e4\16\u01e4"+
		"\u1e2a\13\u01e4\3\u01e4\3\u01e4\3\u01e5\3\u01e5\5\u01e5\u1e30\n\u01e5"+
		"\3\u01e6\3\u01e6\3\u01e6\3\u01e6\3\u01e7\3\u01e7\3\u01e7\3\u01e8\3\u01e8"+
		"\3\u01e8\3\u01e8\3\u01e9\5\u01e9\u1e3e\n\u01e9\3\u01e9\3\u01e9\3\u01ea"+
		"\3\u01ea\3\u01ea\3\u01eb\3\u01eb\3\u01eb\3\u01ec\3\u01ec\5\u01ec\u1e4a"+
		"\n\u01ec\3\u01ed\3\u01ed\3\u01ed\3\u01ed\3\u01ed\3\u01ed\3\u01ee\3\u01ee"+
		"\3\u01ee\7\u01ee\u1e55\n\u01ee\f\u01ee\16\u01ee\u1e58\13\u01ee\3\u01ef"+
		"\3\u01ef\3\u01ef\7\u01ef\u1e5d\n\u01ef\f\u01ef\16\u01ef\u1e60\13\u01ef"+
		"\3\u01f0\3\u01f0\3\u01f0\3\u01f0\5\u01f0\u1e66\n\u01f0\3\u01f1\3\u01f1"+
		"\3\u01f1\3\u01f2\3\u01f2\6\u01f2\u1e6d\n\u01f2\r\u01f2\16\u01f2\u1e6e"+
		"\3\u01f3\3\u01f3\3\u01f3\3\u01f3\5\u01f3\u1e75\n\u01f3\3\u01f3\3\u01f3"+
		"\3\u01f3\3\u01f3\3\u01f3\3\u01f3\5\u01f3\u1e7d\n\u01f3\3\u01f4\3\u01f4"+
		"\6\u01f4\u1e81\n\u01f4\r\u01f4\16\u01f4\u1e82\3\u01f5\3\u01f5\3\u01f5"+
		"\3\u01f5\3\u01f6\3\u01f6\3\u01f6\7\u01f6\u1e8c\n\u01f6\f\u01f6\16\u01f6"+
		"\u1e8f\13\u01f6\3\u01f7\3\u01f7\3\u01f7\7\u01f7\u1e94\n\u01f7\f\u01f7"+
		"\16\u01f7\u1e97\13\u01f7\3\u01f8\3\u01f8\3\u01f8\7\u01f8\u1e9c\n\u01f8"+
		"\f\u01f8\16\u01f8\u1e9f\13\u01f8\3\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9"+
		"\5\u01f9\u1ea6\n\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9"+
		"\3\u01f9\3\u01f9\5\u01f9\u1eb0\n\u01f9\3\u01f9\3\u01f9\3\u01f9\5\u01f9"+
		"\u1eb5\n\u01f9\3\u01f9\3\u01f9\3\u01f9\5\u01f9\u1eba\n\u01f9\5\u01f9\u1ebc"+
		"\n\u01f9\3\u01fa\3\u01fa\3\u01fa\3\u01fa\5\u01fa\u1ec2\n\u01fa\3\u01fa"+
		"\3\u01fa\3\u01fa\3\u01fa\5\u01fa\u1ec8\n\u01fa\3\u01fa\5\u01fa\u1ecb\n"+
		"\u01fa\3\u01fa\3\u01fa\3\u01fa\3\u01fa\3\u01fa\5\u01fa\u1ed2\n\u01fa\5"+
		"\u01fa\u1ed4\n\u01fa\5\u01fa\u1ed6\n\u01fa\3\u01fa\5\u01fa\u1ed9\n\u01fa"+
		"\5\u01fa\u1edb\n\u01fa\3\u01fb\3\u01fb\3\u01fb\3\u01fb\3\u01fc\3\u01fc"+
		"\3\u01fc\3\u01fc\3\u01fd\3\u01fd\3\u01fd\3\u01fe\3\u01fe\3\u01fe\3\u01fe"+
		"\5\u01fe\u1eec\n\u01fe\3\u01ff\3\u01ff\3\u01ff\5\u01ff\u1ef1\n\u01ff\5"+
		"\u01ff\u1ef3\n\u01ff\3\u0200\3\u0200\3\u0200\3\u0201\3\u0201\5\u0201\u1efa"+
		"\n\u0201\3\u0202\3\u0202\3\u0203\3\u0203\3\u0204\3\u0204\3\u0204\3\u0204"+
		"\3\u0205\3\u0205\3\u0205\5\u0205\u1f07\n\u0205\5\u0205\u1f09\n\u0205\3"+
		"\u0206\3\u0206\3\u0206\3\u0206\5\u0206\u1f0f\n\u0206\3\u0207\3\u0207\3"+
		"\u0208\3\u0208\3\u0208\3\u0208\7\u0208\u1f17\n\u0208\f\u0208\16\u0208"+
		"\u1f1a\13\u0208\3\u0208\3\u0208\3\u0209\3\u0209\3\u020a\3\u020a\5\u020a"+
		"\u1f22\n\u020a\3\u020b\3\u020b\3\u020c\3\u020c\3\u020d\3\u020d\3\u020d"+
		"\3\u020d\3\u020d\5\u020d\u1f2d\n\u020d\3\u020d\3\u020d\3\u020e\3\u020e"+
		"\3\u020f\3\u020f\3\u0210\3\u0210\3\u0211\3\u0211\3\u0212\3\u0212\3\u0213"+
		"\3\u0213\3\u0214\3\u0214\3\u0215\3\u0215\3\u0216\3\u0216\5\u0216\u1f43"+
		"\n\u0216\3\u0217\3\u0217\5\u0217\u1f47\n\u0217\3\u0218\3\u0218\3\u0219"+
		"\3\u0219\3\u021a\3\u021a\3\u021b\3\u021b\3\u021c\3\u021c\3\u021d\3\u021d"+
		"\3\u021e\3\u021e\3\u021f\3\u021f\3\u0220\3\u0220\3\u0221\3\u0221\3\u0222"+
		"\3\u0222\5\u0222\u1f5f\n\u0222\3\u0223\3\u0223\3\u0223\3\u0224\3\u0224"+
		"\3\u0224\3\u0224\3\u0224\3\u0224\5\u0224\u1f6a\n\u0224\5\u0224\u1f6c\n"+
		"\u0224\3\u0225\3\u0225\5\u0225\u1f70\n\u0225\3\u0226\3\u0226\3\u0226\7"+
		"\u0226\u1f75\n\u0226\f\u0226\16\u0226\u1f78\13\u0226\3\u0227\3\u0227\3"+
		"\u0227\7\u0227\u1f7d\n\u0227\f\u0227\16\u0227\u1f80\13\u0227\3\u0228\3"+
		"\u0228\3\u0229\3\u0229\5\u0229\u1f86\n\u0229\3\u022a\3\u022a\3\u022b\3"+
		"\u022b\5\u022b\u1f8c\n\u022b\3\u022c\3\u022c\3\u022d\3\u022d\3\u022e\3"+
		"\u022e\3\u022f\3\u022f\3\u0230\3\u0230\3\u0231\3\u0231\3\u0231\5\u0231"+
		"\u1f9b\n\u0231\3\u0232\3\u0232\5\u0232\u1f9f\n\u0232\3\u0233\3\u0233\3"+
		"\u0233\7\u0233\u1fa4\n\u0233\f\u0233\16\u0233\u1fa7\13\u0233\3\u0234\3"+
		"\u0234\3\u0234\3\u0234\3\u0235\3\u0235\5\u0235\u1faf\n\u0235\3\u0236\3"+
		"\u0236\3\u0236\5\u0236\u1fb4\n\u0236\5\u0236\u1fb6\n\u0236\3\u0236\3\u0236"+
		"\3\u0236\3\u0236\5\u0236\u1fbc\n\u0236\3\u0237\3\u0237\3\u0237\3\u0238"+
		"\3\u0238\3\u0239\3\u0239\3\u023a\3\u023a\3\u023b\3\u023b\3\u023b\3\u023b"+
		"\3\u023b\5\u023b\u1fcc\n\u023b\3\u023c\3\u023c\3\u023c\3\u023c\3\u023c"+
		"\3\u023c\5\u023c\u1fd4\n\u023c\3\u023c\5\u023c\u1fd7\n\u023c\3\u023d\3"+
		"\u023d\3\u023d\3\u023d\3\u023d\5\u023d\u1fde\n\u023d\3\u023e\3\u023e\3"+
		"\u023e\3\u023e\7\u023e\u1fe4\n\u023e\f\u023e\16\u023e\u1fe7\13\u023e\3"+
		"\u023e\3\u023e\3\u023f\3\u023f\3\u023f\5\u023f\u1fee\n\u023f\3\u0240\3"+
		"\u0240\3\u0240\5\u0240\u1ff3\n\u0240\3\u0241\3\u0241\3\u0241\5\u0241\u1ff8"+
		"\n\u0241\3\u0242\5\u0242\u1ffb\n\u0242\3\u0242\3\u0242\5\u0242\u1fff\n"+
		"\u0242\3\u0242\7\u0242\u2002\n\u0242\f\u0242\16\u0242\u2005\13\u0242\3"+
		"\u0243\3\u0243\3\u0244\3\u0244\3\u0244\7\u0244\u200c\n\u0244\f\u0244\16"+
		"\u0244\u200f\13\u0244\3\u0245\3\u0245\3\u0246\3\u0246\3\u0247\3\u0247"+
		"\3\u0248\3\u0248\3\u0248\3\u0248\3\u0248\3\u0248\5\u0248\u201d\n\u0248"+
		"\3\u0249\3\u0249\5\u0249\u2021\n\u0249\3\u024a\3\u024a\3\u024b\3\u024b"+
		"\3\u024b\3\u024b\3\u024b\3\u024b\3\u024c\3\u024c\5\u024c\u202d\n\u024c"+
		"\3\u024d\3\u024d\5\u024d\u2031\n\u024d\3\u024e\3\u024e\5\u024e\u2035\n"+
		"\u024e\3\u024f\3\u024f\5\u024f\u2039\n\u024f\3\u0250\3\u0250\3\u0250\3"+
		"\u0251\3\u0251\3\u0252\3\u0252\3\u0253\3\u0253\3\u0253\3\u0253\3\u0253"+
		"\3\u0253\5\u0253\u2048\n\u0253\3\u0254\3\u0254\3\u0254\3\u0254\3\u0254"+
		"\3\u0254\3\u0254\3\u0254\3\u0254\3\u0254\5\u0254\u2054\n\u0254\3\u0255"+
		"\3\u0255\3\u0255\3\u0255\3\u0255\3\u0255\3\u0255\3\u0255\5\u0255\u205e"+
		"\n\u0255\3\u0255\3\u0255\3\u0255\3\u0255\3\u0255\5\u0255\u2065\n\u0255"+
		"\5\u0255\u2067\n\u0255\3\u0256\3\u0256\3\u0257\3\u0257\3\u0258\3\u0258"+
		"\3\u0258\3\u0258\3\u0258\3\u0258\3\u0258\3\u0258\3\u0258\3\u0258\3\u0258"+
		"\5\u0258\u2078\n\u0258\3\u0258\3\u0258\3\u0258\5\u0258\u207d\n\u0258\5"+
		"\u0258\u207f\n\u0258\3\u0259\3\u0259\3\u025a\3\u025a\3\u025b\3\u025b\3"+
		"\u025b\5\u025b\u2088\n\u025b\3\u025b\3\u025b\3\u025b\5\u025b\u208d\n\u025b"+
		"\5\u025b\u208f\n\u025b\3\u025c\3\u025c\3\u025c\3\u025c\5\u025c\u2095\n"+
		"\u025c\3\u025d\3\u025d\3\u025e\3\u025e\3\u025e\3\u025e\3\u025e\5\u025e"+
		"\u209e\n\u025e\3\u025f\3\u025f\3\u025f\3\u025f\3\u025f\3\u025f\3\u025f"+
		"\3\u025f\3\u025f\5\u025f\u20a9\n\u025f\3\u025f\2\7\u0116\u029e\u02a0\u02a8"+
		"\u02aa\u0260\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64"+
		"\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088"+
		"\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0"+
		"\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8"+
		"\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0"+
		"\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8"+
		"\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100"+
		"\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118"+
		"\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130"+
		"\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148"+
		"\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160"+
		"\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178"+
		"\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190"+
		"\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8"+
		"\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0"+
		"\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8"+
		"\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0"+
		"\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208"+
		"\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220"+
		"\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238"+
		"\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248\u024a\u024c\u024e\u0250"+
		"\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268"+
		"\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278\u027a\u027c\u027e\u0280"+
		"\u0282\u0284\u0286\u0288\u028a\u028c\u028e\u0290\u0292\u0294\u0296\u0298"+
		"\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0"+
		"\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2\u02c4\u02c6\u02c8"+
		"\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8\u02da\u02dc\u02de\u02e0"+
		"\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8"+
		"\u02fa\u02fc\u02fe\u0300\u0302\u0304\u0306\u0308\u030a\u030c\u030e\u0310"+
		"\u0312\u0314\u0316\u0318\u031a\u031c\u031e\u0320\u0322\u0324\u0326\u0328"+
		"\u032a\u032c\u032e\u0330\u0332\u0334\u0336\u0338\u033a\u033c\u033e\u0340"+
		"\u0342\u0344\u0346\u0348\u034a\u034c\u034e\u0350\u0352\u0354\u0356\u0358"+
		"\u035a\u035c\u035e\u0360\u0362\u0364\u0366\u0368\u036a\u036c\u036e\u0370"+
		"\u0372\u0374\u0376\u0378\u037a\u037c\u037e\u0380\u0382\u0384\u0386\u0388"+
		"\u038a\u038c\u038e\u0390\u0392\u0394\u0396\u0398\u039a\u039c\u039e\u03a0"+
		"\u03a2\u03a4\u03a6\u03a8\u03aa\u03ac\u03ae\u03b0\u03b2\u03b4\u03b6\u03b8"+
		"\u03ba\u03bc\u03be\u03c0\u03c2\u03c4\u03c6\u03c8\u03ca\u03cc\u03ce\u03d0"+
		"\u03d2\u03d4\u03d6\u03d8\u03da\u03dc\u03de\u03e0\u03e2\u03e4\u03e6\u03e8"+
		"\u03ea\u03ec\u03ee\u03f0\u03f2\u03f4\u03f6\u03f8\u03fa\u03fc\u03fe\u0400"+
		"\u0402\u0404\u0406\u0408\u040a\u040c\u040e\u0410\u0412\u0414\u0416\u0418"+
		"\u041a\u041c\u041e\u0420\u0422\u0424\u0426\u0428\u042a\u042c\u042e\u0430"+
		"\u0432\u0434\u0436\u0438\u043a\u043c\u043e\u0440\u0442\u0444\u0446\u0448"+
		"\u044a\u044c\u044e\u0450\u0452\u0454\u0456\u0458\u045a\u045c\u045e\u0460"+
		"\u0462\u0464\u0466\u0468\u046a\u046c\u046e\u0470\u0472\u0474\u0476\u0478"+
		"\u047a\u047c\u047e\u0480\u0482\u0484\u0486\u0488\u048a\u048c\u048e\u0490"+
		"\u0492\u0494\u0496\u0498\u049a\u049c\u049e\u04a0\u04a2\u04a4\u04a6\u04a8"+
		"\u04aa\u04ac\u04ae\u04b0\u04b2\u04b4\u04b6\u04b8\u04ba\u04bc\2\u0092\3"+
		"\2\u02f2\u02f3\4\2\u01b1\u01b1\u028f\u028f\4\2\u01c0\u01c0\u0263\u0263"+
		"\3\2\u02ac\u02ad\4\2\u01ac\u01ac\u01e9\u01e9\4\2\u010f\u010f\u0259\u0259"+
		"\3\2\u02f4\u02f5\4\2OO\u00b6\u00b6\4\2\u020a\u020a\u0260\u0260\6\2\u014b"+
		"\u014b\u01de\u01de\u0213\u0213\u025a\u025a\4\2uu\u00a3\u00a3\4\2\u0113"+
		"\u0113\u016a\u016a\4\2\u0112\u0112\u0169\u0169\4\2\u00ef\u00ef\u0174\u0174"+
		"\5\2\u00d9\u00d9\u015a\u015a\u0168\u0168\4\2==\u01b4\u01b4\5\2\u01e2\u01e2"+
		"\u0210\u0210\u0299\u0299\4\2\25\25$$\4\2\u0156\u0156\u0289\u0289\5\2\u010e"+
		"\u010e\u020a\u020a\u022c\u022c\4\2\u0096\u0096\u00ed\u00ed\6\2\u0096\u0096"+
		"\u00b0\u00b0\u00ed\u00ed\u0105\u0105\4\2\u0181\u0181\u0184\u0187\5\2\u01e1"+
		"\u01e1\u0205\u0205\u022c\u022c\4\2\u0172\u0172\u02a1\u02a1\4\2cc\u022c"+
		"\u022c\4\2oo\u017a\u017a\4\2\u012c\u012c\u0223\u0223\4\2\u01e1\u01e1\u022c"+
		"\u022c\b\2\u0141\u0141\u01ad\u01ad\u01e6\u01e6\u0205\u0205\u0277\u0279"+
		"\u0282\u0282\4\2\u00f4\u00f4\u0198\u0198\4\2\u017e\u0180\u01a6\u01a6\5"+
		"\2\u012c\u012c\u0256\u0256\u02cb\u02cb\4\2\u01b2\u01b2\u01e3\u01e3\4\2"+
		"\u021f\u021f\u0266\u0266\4\2\u01ce\u01ce\u020d\u020d\4\2\u01ad\u01ad\u01e6"+
		"\u01e6\4\2\u01fa\u01fa\u020a\u020a\4\2\u020b\u020b\u021b\u021b\4\2\u0247"+
		"\u0247\u02ae\u02ae\4\2\7\7\62\62\4\2\u0125\u0125\u0219\u0219\4\2\u00bb"+
		"\u00bb\u01b7\u01b7\4\2\u013d\u013d\u013f\u013f\4\2\u0119\u0119\u0143\u0143"+
		"\3\2\62\63\4\2\20\20\u01e9\u01e9\5\2\u00f1\u00f1\u0178\u0178\u027b\u027b"+
		"\4\2\u0226\u0226\u0297\u0297\4\2\u01e0\u01e0\u02ef\u02ef\5\2\u0166\u0166"+
		"\u0254\u0254\u0289\u0289\6\2\u0210\u0210\u025b\u025b\u0268\u0268\u0299"+
		"\u0299\17\2\23\23::\u0087\u0087\u0093\u0093\u0107\u0107\u010b\u010b\u011a"+
		"\u011a\u0151\u0151\u01e2\u01e2\u01e9\u01e9\u020b\u020b\u0291\u0291\u029a"+
		"\u029a\6\2\u012b\u012b\u0158\u0158\u016e\u016e\u0171\u0171\4\2//UU\4\2"+
		"\u01cd\u01cd\u01e9\u01e9\4\2\u00f1\u00f1\u01e0\u01e0\4\2\u008c\u008c\u010e"+
		"\u010e\7\2RR\u008c\u008c\u008f\u008f\u00d7\u00d7\u010e\u010e\5\2\u008c"+
		"\u008c\u010e\u010e\u016f\u016f\4\2]]\u0167\u0167\6\2\u01ad\u01ad\u01b7"+
		"\u01b7\u01e0\u01e0\u0245\u0245\4\2\u012f\u012f\u02e6\u02e6\5\2\u00b9\u00b9"+
		"\u00e5\u00e5\u0149\u0149\4\2\u01fd\u01fd\u0214\u0214\4\2II\u0116\u0116"+
		"\5\2\u00a5\u00a5\u020b\u020b\u021a\u021a\4\2\u0085\u0085\u0173\u0173\4"+
		"\2\u0149\u0149\u0170\u0170\b\2kk\u00aa\u00aa\u00d8\u00d8\u013c\u013c\u0153"+
		"\u0153\u01ad\u01ad\4\2dd\u010d\u010d\7\2ww\u009f\u009f\u0106\u0106\u0149"+
		"\u0149\u016d\u016d\7\2\u0082\u0082\u0084\u0084\u0098\u0098\u0139\u0139"+
		"\u01b7\u01b7\4\2\u016e\u016e\u02e6\u02e6\4\2zz\u0091\u0091\4\2\u01e3\u01e4"+
		"\u01f5\u01f5\5\2\u016b\u016b\u01f7\u01f7\u0293\u0293\4\2\u0192\u0192\u01b0"+
		"\u01b0\4\2\u0195\u0195\u024d\u024d\4\2BB\u01ad\u01ad\4\2\u0181\u0181\u0183"+
		"\u0188\5\2\u018b\u018d\u01e7\u01e7\u023a\u023a\3\2\u0189\u018a\3\2\u0190"+
		"\u0191\4\2\u0189\u018a\u018f\u018f\3\2\u01b9\u01bb\6\2\u02c6\u02c7\u02d4"+
		"\u02d4\u02d6\u02d6\u02d8\u02d8\4\2\u02cc\u02cc\u02ce\u02ce\4\2\u02c9\u02c9"+
		"\u02cd\u02cd\4\2\u0096\u0096\u00b0\u00b0\4\2\u020a\u020a\u02d7\u02d7\4"+
		"\2<<\u014d\u014d\3\2\u01d7\u01d8\3\2\u0160\u0161\5\2qr\u015f\u015f\u0162"+
		"\u0162\4\2\u017c\u017c\u023f\u023f\4\2\u017c\u017c\u018e\u018e\7\2\u01d9"+
		"\u01dc\u0206\u0208\u0236\u0237\u0267\u0267\u02b0\u02b0\13\2ss\u00a0\u00a0"+
		"\u00db\u00db\u00dd\u00dd\u00e1\u00e1\u010c\u010c\u0133\u0133\u0175\u0175"+
		"\u017b\u017b\5\2\u01ca\u01ca\u01f3\u01f3\u0294\u0294\4\2\u00f2\u00f2\u012d"+
		"\u012d\f\2PPVVZZfhnn\u00da\u00da\u00e6\u00e6\u0132\u0132\u014c\u014c\u0155"+
		"\u0155\4\2\u0281\u0281\u02a8\u02a8\5\2\177\177\u0097\u0097\u01e0\u01e0"+
		"\5\2||\u00d8\u00d8\u01e0\u01e0\5\2\u0092\u0092\u00fa\u00fa\u0137\u0137"+
		"\5\2NN\u009e\u009e\u0130\u0130\3\2\u02b5\u02b6\4\2\u0164\u0164\u029c\u029c"+
		"\7\2\u01b6\u01b6\u0213\u0213\u0233\u0233\u0271\u0271\u028d\u028d\6\2\u0097"+
		"\u0097\u01de\u01de\u01f9\u01f9\u0243\u0243\3\2LM\4\2\u0227\u0227\u0232"+
		"\u0232\6\2\u0099\u009a\u00b4\u00b4\u00e2\u00e4\u0102\u0103\5\2..\u0298"+
		"\u0298\u02b1\u02b1\3\2\u0146\u0148\4\2\13\13\u0157\u0157\b\2^^``\177\177"+
		"\u0097\u0097\u0114\u0114\u01e0\u01e0\5\2\35\35\u0096\u0096\u00b0\u00b0"+
		"\4\2||\u00d8\u00d8\4\2\u00b5\u00b5\u0256\u0256\4\2\u00ba\u00ba\u00de\u00de"+
		"\4\2oo\u020b\u020b\5\2\u020e\u020e\u0214\u0214\u0250\u0250\4\2\u027c\u027c"+
		"\u028a\u028a\4\2\u0244\u0244\u0246\u0246\4\2\u00b6\u00b6\u0241\u0241\4"+
		"\2\u0306\u0306\u0308\u0308\5\2\u017e\u0180\u01a7\u01a7\u01a9\u01aa\4\2"+
		"\u017e\u0180\u01a7\u01a7\4\2\u017e\u0180\u01a9\u01aa\3\2\u01a7\u01a8\4"+
		"\2\u01f7\u01f7\u0293\u0293\4\2\u01a5\u01a5\u0242\u0242\3\2\u0181\u0182"+
		"\7\2\u009d\u009d\u00b6\u00b6\u0136\u0136\u02b2\u02b2\u02c1\u02c1\5\2\23"+
		"\23::\u02ea\u02ea\20\2\4\4\7\13\r\22\24\25\30\31\33\35$%\'(*+./\62\66"+
		"99\u00a4\u00a4\u02c5\u02c5\13\2\u0087\u0087\u0093\u0093\u00f1\u00f1\u0107"+
		"\u0107\u010b\u010b\u011a\u011a\u011d\u011d\u0151\u0151\u02e5\u02e5=\2"+
		"\3\3\5\6\f\f\26\27\32\32\36!##&&)),-\60\61\678;@BCEikkmvx\u0086\u0088"+
		"\u0092\u0094\u009c\u009e\u00a3\u00a5\u00a7\u00a9\u00b5\u00b7\u00d2\u00d4"+
		"\u00f0\u00f2\u00f4\u00f7\u0106\u0108\u010a\u010c\u0112\u0114\u0119\u011b"+
		"\u011c\u011e\u012b\u012d\u012e\u0130\u0135\u0137\u013f\u0141\u0150\u0152"+
		"\u0164\u0167\u017b\u01f1\u01f1\u01f4\u01f4\u0247\u0247\u02a0\u02a0\u02ad"+
		"\u02ad\u02b3\u02b6\u02b8\u02b8\u02bd\u02bf\u02c2\u02c3\u02c8\u02c8\u02ca"+
		"\u02ca\u02d1\u02d2\u02d5\u02d5\u02d7\u02d7\u02d9\u02da\u02de\u02e4\u02e7"+
		"\u02e9\u02eb\u02f5\u02f7\u02fa\u02fc\u02fc\u02ff\u0302\b\2\3\22\249\u02b3"+
		"\u02b3\u02b5\u02b6\u02c5\u02c5\u02f0\u02f3\"\2;@Bkm\u0086\u0088\u0092"+
		"\u0094\u00a3\u00a5\u00a7\u00a9\u00f0\u00f2\u00f5\u00f7\u0106\u0108\u010a"+
		"\u010c\u0119\u011b\u011c\u011e\u012b\u012d\u012e\u0130\u0165\u0167\u017b"+
		"\u01af\u01af\u02b8\u02b8\u02bd\u02bf\u02c2\u02c4\u02c8\u02c8\u02ca\u02ca"+
		"\u02d1\u02d2\u02d5\u02d5\u02d7\u02d7\u02d9\u02da\u02de\u02e4\u02e7\u02e8"+
		"\u02ec\u02ed\u02ef\u02ef\u02f4\u02f5\u02f7\u02f8\7\2ll\u00a4\u00a4\u012c"+
		"\u012c\u012f\u012f\u0166\u0166\b\2\u0151\u0151\u01f1\u01f1\u01f4\u01f4"+
		"\u0247\u0247\u02a0\u02a0\u02ad\u02ad\2\u2500\2\u04c1\3\2\2\2\4\u04c8\3"+
		"\2\2\2\6\u04ef\3\2\2\2\b\u04f1\3\2\2\2\n\u050e\3\2\2\2\f\u051d\3\2\2\2"+
		"\16\u0543\3\2\2\2\20\u054c\3\2\2\2\22\u0559\3\2\2\2\24\u055b\3\2\2\2\26"+
		"\u0560\3\2\2\2\30\u0578\3\2\2\2\32\u0581\3\2\2\2\34\u0583\3\2\2\2\36\u0592"+
		"\3\2\2\2 \u05f5\3\2\2\2\"\u05f9\3\2\2\2$\u0609\3\2\2\2&\u0690\3\2\2\2"+
		"(\u0695\3\2\2\2*\u0697\3\2\2\2,\u0699\3\2\2\2.\u06a7\3\2\2\2\60\u06af"+
		"\3\2\2\2\62\u06bf\3\2\2\2\64\u06c1\3\2\2\2\66\u06c5\3\2\2\28\u06ca\3\2"+
		"\2\2:\u06cc\3\2\2\2<\u06d7\3\2\2\2>\u06fc\3\2\2\2@\u0704\3\2\2\2B\u070e"+
		"\3\2\2\2D\u0710\3\2\2\2F\u0724\3\2\2\2H\u072d\3\2\2\2J\u0730\3\2\2\2L"+
		"\u073d\3\2\2\2N\u0742\3\2\2\2P\u0746\3\2\2\2R\u074d\3\2\2\2T\u0762\3\2"+
		"\2\2V\u0771\3\2\2\2X\u0774\3\2\2\2Z\u0793\3\2\2\2\\\u079d\3\2\2\2^\u07a0"+
		"\3\2\2\2`\u07a9\3\2\2\2b\u07ab\3\2\2\2d\u07b7\3\2\2\2f\u07d0\3\2\2\2h"+
		"\u07eb\3\2\2\2j\u07f9\3\2\2\2l\u07fc\3\2\2\2n\u0811\3\2\2\2p\u0814\3\2"+
		"\2\2r\u084d\3\2\2\2t\u084f\3\2\2\2v\u0853\3\2\2\2x\u085c\3\2\2\2z\u086c"+
		"\3\2\2\2|\u086e\3\2\2\2~\u0876\3\2\2\2\u0080\u0890\3\2\2\2\u0082\u0892"+
		"\3\2\2\2\u0084\u089e\3\2\2\2\u0086\u08ad\3\2\2\2\u0088\u08af\3\2\2\2\u008a"+
		"\u08b2\3\2\2\2\u008c\u08c8\3\2\2\2\u008e\u08ca\3\2\2\2\u0090\u08d0\3\2"+
		"\2\2\u0092\u08d6\3\2\2\2\u0094\u08dc\3\2\2\2\u0096\u08e2\3\2\2\2\u0098"+
		"\u08e8\3\2\2\2\u009a\u08ef\3\2\2\2\u009c\u08f7\3\2\2\2\u009e\u08f9\3\2"+
		"\2\2\u00a0\u08ff\3\2\2\2\u00a2\u0905\3\2\2\2\u00a4\u090c\3\2\2\2\u00a6"+
		"\u091e\3\2\2\2\u00a8\u0920\3\2\2\2\u00aa\u0924\3\2\2\2\u00ac\u0929\3\2"+
		"\2\2\u00ae\u0939\3\2\2\2\u00b0\u093e\3\2\2\2\u00b2\u095f\3\2\2\2\u00b4"+
		"\u097e\3\2\2\2\u00b6\u098f\3\2\2\2\u00b8\u0991\3\2\2\2\u00ba\u09a5\3\2"+
		"\2\2\u00bc\u09ab\3\2\2\2\u00be\u09b1\3\2\2\2\u00c0\u09b7\3\2\2\2\u00c2"+
		"\u09be\3\2\2\2\u00c4\u09c7\3\2\2\2\u00c6\u09d8\3\2\2\2\u00c8\u09da\3\2"+
		"\2\2\u00ca\u09e1\3\2\2\2\u00cc\u09eb\3\2\2\2\u00ce\u09f9\3\2\2\2\u00d0"+
		"\u09ff\3\2\2\2\u00d2\u0a07\3\2\2\2\u00d4\u0a0d\3\2\2\2\u00d6\u0a15\3\2"+
		"\2\2\u00d8\u0a1b\3\2\2\2\u00da\u0a25\3\2\2\2\u00dc\u0a29\3\2\2\2\u00de"+
		"\u0a2f\3\2\2\2\u00e0\u0a34\3\2\2\2\u00e2\u0a3f\3\2\2\2\u00e4\u0a6a\3\2"+
		"\2\2\u00e6\u0a70\3\2\2\2\u00e8\u0a72\3\2\2\2\u00ea\u0a79\3\2\2\2\u00ec"+
		"\u0a97\3\2\2\2\u00ee\u0a99\3\2\2\2\u00f0\u0ab8\3\2\2\2\u00f2\u0abf\3\2"+
		"\2\2\u00f4\u0ac3\3\2\2\2\u00f6\u0acb\3\2\2\2\u00f8\u0ad5\3\2\2\2\u00fa"+
		"\u0ad7\3\2\2\2\u00fc\u0ae9\3\2\2\2\u00fe\u0af5\3\2\2\2\u0100\u0afa\3\2"+
		"\2\2\u0102\u0b00\3\2\2\2\u0104\u0b21\3\2\2\2\u0106\u0b23\3\2\2\2\u0108"+
		"\u0b2b\3\2\2\2\u010a\u0b34\3\2\2\2\u010c\u0b3c\3\2\2\2\u010e\u0b48\3\2"+
		"\2\2\u0110\u0b5c\3\2\2\2\u0112\u0b65\3\2\2\2\u0114\u0b89\3\2\2\2\u0116"+
		"\u0b96\3\2\2\2\u0118\u0ba6\3\2\2\2\u011a\u0bad\3\2\2\2\u011c\u0bc8\3\2"+
		"\2\2\u011e\u0bca\3\2\2\2\u0120\u0bcc\3\2\2\2\u0122\u0bcf\3\2\2\2\u0124"+
		"\u0bd2\3\2\2\2\u0126\u0bd9\3\2\2\2\u0128\u0bdb\3\2\2\2\u012a\u0bf9\3\2"+
		"\2\2\u012c\u0c05\3\2\2\2\u012e\u0c08\3\2\2\2\u0130\u0c11\3\2\2\2\u0132"+
		"\u0c15\3\2\2\2\u0134\u0c1a\3\2\2\2\u0136\u0c27\3\2\2\2\u0138\u0c2c\3\2"+
		"\2\2\u013a\u0c30\3\2\2\2\u013c\u0c40\3\2\2\2\u013e\u0c42\3\2\2\2\u0140"+
		"\u0c54\3\2\2\2\u0142\u0c56\3\2\2\2\u0144\u0c5f\3\2\2\2\u0146\u0c6b\3\2"+
		"\2\2\u0148\u0c72\3\2\2\2\u014a\u0c7d\3\2\2\2\u014c\u0c7f\3\2\2\2\u014e"+
		"\u0c83\3\2\2\2\u0150\u0c85\3\2\2\2\u0152\u0c8a\3\2\2\2\u0154\u0c9a\3\2"+
		"\2\2\u0156\u0cab\3\2\2\2\u0158\u0cb0\3\2\2\2\u015a\u0cb5\3\2\2\2\u015c"+
		"\u0cb9\3\2\2\2\u015e\u0cc7\3\2\2\2\u0160\u0cca\3\2\2\2\u0162\u0cd0\3\2"+
		"\2\2\u0164\u0cdd\3\2\2\2\u0166\u0ce5\3\2\2\2\u0168\u0cff\3\2\2\2\u016a"+
		"\u0d0c\3\2\2\2\u016c\u0d13\3\2\2\2\u016e\u0d15\3\2\2\2\u0170\u0d21\3\2"+
		"\2\2\u0172\u0d23\3\2\2\2\u0174\u0d2d\3\2\2\2\u0176\u0d45\3\2\2\2\u0178"+
		"\u0d47\3\2\2\2\u017a\u0d4e\3\2\2\2\u017c\u0d58\3\2\2\2\u017e\u0d7b\3\2"+
		"\2\2\u0180\u0d85\3\2\2\2\u0182\u0d87\3\2\2\2\u0184\u0d8b\3\2\2\2\u0186"+
		"\u0d93\3\2\2\2\u0188\u0d95\3\2\2\2\u018a\u0d9a\3\2\2\2\u018c\u0d9e\3\2"+
		"\2\2\u018e\u0dba\3\2\2\2\u0190\u0dbc\3\2\2\2\u0192\u0dbe\3\2\2\2\u0194"+
		"\u0dc6\3\2\2\2\u0196\u0dc8\3\2\2\2\u0198\u0dd0\3\2\2\2\u019a\u0dda\3\2"+
		"\2\2\u019c\u0dde\3\2\2\2\u019e\u0df7\3\2\2\2\u01a0\u0e12\3\2\2\2\u01a2"+
		"\u0e14\3\2\2\2\u01a4\u0e1e\3\2\2\2\u01a6\u0e3d\3\2\2\2\u01a8\u0e55\3\2"+
		"\2\2\u01aa\u0e57\3\2\2\2\u01ac\u0e65\3\2\2\2\u01ae\u0e67\3\2\2\2\u01b0"+
		"\u0e8a\3\2\2\2\u01b2\u0e8c\3\2\2\2\u01b4\u0eb6\3\2\2\2\u01b6\u0ec6\3\2"+
		"\2\2\u01b8\u0ec8\3\2\2\2\u01ba\u0ed0\3\2\2\2\u01bc\u0ed9\3\2\2\2\u01be"+
		"\u0ee0\3\2\2\2\u01c0\u0f3d\3\2\2\2\u01c2\u0f41\3\2\2\2\u01c4\u0f45\3\2"+
		"\2\2\u01c6\u0f53\3\2\2\2\u01c8\u0f55\3\2\2\2\u01ca\u0f62\3\2\2\2\u01cc"+
		"\u0fa2\3\2\2\2\u01ce\u0fa4\3\2\2\2\u01d0\u0fac\3\2\2\2\u01d2\u0fb4\3\2"+
		"\2\2\u01d4\u0fbc\3\2\2\2\u01d6\u0fbe\3\2\2\2\u01d8\u0fdb\3\2\2\2\u01da"+
		"\u0fe4\3\2\2\2\u01dc\u1003\3\2\2\2\u01de\u1005\3\2\2\2\u01e0\u100d\3\2"+
		"\2\2\u01e2\u100f\3\2\2\2\u01e4\u101d\3\2\2\2\u01e6\u101f\3\2\2\2\u01e8"+
		"\u1025\3\2\2\2\u01ea\u102d\3\2\2\2\u01ec\u1052\3\2\2\2\u01ee\u1054\3\2"+
		"\2\2\u01f0\u1063\3\2\2\2\u01f2\u1065\3\2\2\2\u01f4\u109c\3\2\2\2\u01f6"+
		"\u109e\3\2\2\2\u01f8\u10a1\3\2\2\2\u01fa\u10ba\3\2\2\2\u01fc\u10c3\3\2"+
		"\2\2\u01fe\u10c5\3\2\2\2\u0200\u10ca\3\2\2\2\u0202\u10f8\3\2\2\2\u0204"+
		"\u10fa\3\2\2\2\u0206\u1102\3\2\2\2\u0208\u1133\3\2\2\2\u020a\u1140\3\2"+
		"\2\2\u020c\u1142\3\2\2\2\u020e\u1145\3\2\2\2\u0210\u1150\3\2\2\2\u0212"+
		"\u1155\3\2\2\2\u0214\u1158\3\2\2\2\u0216\u1167\3\2\2\2\u0218\u1199\3\2"+
		"\2\2\u021a\u119b\3\2\2\2\u021c\u119d\3\2\2\2\u021e\u11ce\3\2\2\2\u0220"+
		"\u11e0\3\2\2\2\u0222\u11e2\3\2\2\2\u0224\u11f2\3\2\2\2\u0226\u11fe\3\2"+
		"\2\2\u0228\u1217\3\2\2\2\u022a\u1219\3\2\2\2\u022c\u1221\3\2\2\2\u022e"+
		"\u1252\3\2\2\2\u0230\u1261\3\2\2\2\u0232\u1266\3\2\2\2\u0234\u1268\3\2"+
		"\2\2\u0236\u1280\3\2\2\2\u0238\u1282\3\2\2\2\u023a\u12bd\3\2\2\2\u023c"+
		"\u12c8\3\2\2\2\u023e\u12ca\3\2\2\2\u0240\u12cd\3\2\2\2\u0242\u12da\3\2"+
		"\2\2\u0244\u12f6\3\2\2\2\u0246\u12fe\3\2\2\2\u0248\u1300\3\2\2\2\u024a"+
		"\u130b\3\2\2\2\u024c\u130d\3\2\2\2\u024e\u1315\3\2\2\2\u0250\u1317\3\2"+
		"\2\2\u0252\u13fb\3\2\2\2\u0254\u1402\3\2\2\2\u0256\u1404\3\2\2\2\u0258"+
		"\u1406\3\2\2\2\u025a\u1410\3\2\2\2\u025c\u1437\3\2\2\2\u025e\u143b\3\2"+
		"\2\2\u0260\u143d\3\2\2\2\u0262\u1445\3\2\2\2\u0264\u1449\3\2\2\2\u0266"+
		"\u1451\3\2\2\2\u0268\u145a\3\2\2\2\u026a\u145c\3\2\2\2\u026c\u1473\3\2"+
		"\2\2\u026e\u1475\3\2\2\2\u0270\u1477\3\2\2\2\u0272\u1487\3\2\2\2\u0274"+
		"\u1493\3\2\2\2\u0276\u1495\3\2\2\2\u0278\u149d\3\2\2\2\u027a\u14a5\3\2"+
		"\2\2\u027c\u14ae\3\2\2\2\u027e\u14b0\3\2\2\2\u0280\u14c2\3\2\2\2\u0282"+
		"\u14d0\3\2\2\2\u0284\u14d5\3\2\2\2\u0286\u14db\3\2\2\2\u0288\u14dd\3\2"+
		"\2\2\u028a\u14ed\3\2\2\2\u028c\u14f5\3\2\2\2\u028e\u14ff\3\2\2\2\u0290"+
		"\u150c\3\2\2\2\u0292\u150e\3\2\2\2\u0294\u1514\3\2\2\2\u0296\u152f\3\2"+
		"\2\2\u0298\u1531\3\2";
	private static final String _serializedATNSegment1 =
		"\2\2\u029a\u1534\3\2\2\2\u029c\u1537\3\2\2\2\u029e\u1544\3\2\2\2\u02a0"+
		"\u1554\3\2\2\2\u02a2\u156b\3\2\2\2\u02a4\u156d\3\2\2\2\u02a6\u1592\3\2"+
		"\2\2\u02a8\u1594\3\2\2\2\u02aa\u161c\3\2\2\2\u02ac\u1629\3\2\2\2\u02ae"+
		"\u1632\3\2\2\2\u02b0\u16b7\3\2\2\2\u02b2\u16b9\3\2\2\2\u02b4\u16e8\3\2"+
		"\2\2\u02b6\u16ea\3\2\2\2\u02b8\u16ef\3\2\2\2\u02ba\u16f8\3\2\2\2\u02bc"+
		"\u170b\3\2\2\2\u02be\u170e\3\2\2\2\u02c0\u1717\3\2\2\2\u02c2\u1719\3\2"+
		"\2\2\u02c4\u1730\3\2\2\2\u02c6\u1843\3\2\2\2\u02c8\u1864\3\2\2\2\u02ca"+
		"\u1866\3\2\2\2\u02cc\u186c\3\2\2\2\u02ce\u186f\3\2\2\2\u02d0\u187e\3\2"+
		"\2\2\u02d2\u1886\3\2\2\2\u02d4\u1888\3\2\2\2\u02d6\u18a5\3\2\2\2\u02d8"+
		"\u18c6\3\2\2\2\u02da\u18c8\3\2\2\2\u02dc\u18d0\3\2\2\2\u02de\u18da\3\2"+
		"\2\2\u02e0\u18df\3\2\2\2\u02e2\u18e1\3\2\2\2\u02e4\u18f7\3\2\2\2\u02e6"+
		"\u18f9\3\2\2\2\u02e8\u18fc\3\2\2\2\u02ea\u18ff\3\2\2\2\u02ec\u192f\3\2"+
		"\2\2\u02ee\u1931\3\2\2\2\u02f0\u193c\3\2\2\2\u02f2\u193e\3\2\2\2\u02f4"+
		"\u1940\3\2\2\2\u02f6\u1944\3\2\2\2\u02f8\u1946\3\2\2\2\u02fa\u1948\3\2"+
		"\2\2\u02fc\u194c\3\2\2\2\u02fe\u1950\3\2\2\2\u0300\u1954\3\2\2\2\u0302"+
		"\u195c\3\2\2\2\u0304\u1960\3\2\2\2\u0306\u1968\3\2\2\2\u0308\u196a\3\2"+
		"\2\2\u030a\u197c\3\2\2\2\u030c\u197e\3\2\2\2\u030e\u1981\3\2\2\2\u0310"+
		"\u1986\3\2\2\2\u0312\u198e\3\2\2\2\u0314\u1994\3\2\2\2\u0316\u1998\3\2"+
		"\2\2\u0318\u19a9\3\2\2\2\u031a\u19ac\3\2\2\2\u031c\u19b1\3\2\2\2\u031e"+
		"\u19b3\3\2\2\2\u0320\u19b6\3\2\2\2\u0322\u19bf\3\2\2\2\u0324\u19c7\3\2"+
		"\2\2\u0326\u19c9\3\2\2\2\u0328\u19ce\3\2\2\2\u032a\u19d5\3\2\2\2\u032c"+
		"\u19df\3\2\2\2\u032e\u19e7\3\2\2\2\u0330\u19e9\3\2\2\2\u0332\u19f3\3\2"+
		"\2\2\u0334\u19fb\3\2\2\2\u0336\u19fd\3\2\2\2\u0338\u1a03\3\2\2\2\u033a"+
		"\u1a18\3\2\2\2\u033c\u1a1a\3\2\2\2\u033e\u1a20\3\2\2\2\u0340\u1a23\3\2"+
		"\2\2\u0342\u1a26\3\2\2\2\u0344\u1a44\3\2\2\2\u0346\u1a48\3\2\2\2\u0348"+
		"\u1a4f\3\2\2\2\u034a\u1a56\3\2\2\2\u034c\u1a58\3\2\2\2\u034e\u1a68\3\2"+
		"\2\2\u0350\u1a7b\3\2\2\2\u0352\u1a7f\3\2\2\2\u0354\u1a82\3\2\2\2\u0356"+
		"\u1a85\3\2\2\2\u0358\u1a9d\3\2\2\2\u035a\u1a9f\3\2\2\2\u035c\u1aa7\3\2"+
		"\2\2\u035e\u1aa9\3\2\2\2\u0360\u1aad\3\2\2\2\u0362\u1afc\3\2\2\2\u0364"+
		"\u1afe\3\2\2\2\u0366\u1b02\3\2\2\2\u0368\u1b5c\3\2\2\2\u036a\u1b5e\3\2"+
		"\2\2\u036c\u1b60\3\2\2\2\u036e\u1b70\3\2\2\2\u0370\u1b72\3\2\2\2\u0372"+
		"\u1b92\3\2\2\2\u0374\u1b94\3\2\2\2\u0376\u1b9f\3\2\2\2\u0378\u1ba6\3\2"+
		"\2\2\u037a\u1bb6\3\2\2\2\u037c\u1bbc\3\2\2\2\u037e\u1bbe\3\2\2\2\u0380"+
		"\u1bc2\3\2\2\2\u0382\u1bcd\3\2\2\2\u0384\u1bcf\3\2\2\2\u0386\u1bd1\3\2"+
		"\2\2\u0388\u1bd8\3\2\2\2\u038a\u1bda\3\2\2\2\u038c\u1bdc\3\2\2\2\u038e"+
		"\u1c72\3\2\2\2\u0390\u1c77\3\2\2\2\u0392\u1c7e\3\2\2\2\u0394\u1c80\3\2"+
		"\2\2\u0396\u1c88\3\2\2\2\u0398\u1c9a\3\2\2\2\u039a\u1ca2\3\2\2\2\u039c"+
		"\u1caa\3\2\2\2\u039e\u1cac\3\2\2\2\u03a0\u1cb0\3\2\2\2\u03a2\u1cb8\3\2"+
		"\2\2\u03a4\u1cbf\3\2\2\2\u03a6\u1cc1\3\2\2\2\u03a8\u1ccc\3\2\2\2\u03aa"+
		"\u1d51\3\2\2\2\u03ac\u1d55\3\2\2\2\u03ae\u1d58\3\2\2\2\u03b0\u1d61\3\2"+
		"\2\2\u03b2\u1d6a\3\2\2\2\u03b4\u1d72\3\2\2\2\u03b6\u1da0\3\2\2\2\u03b8"+
		"\u1da2\3\2\2\2\u03ba\u1db7\3\2\2\2\u03bc\u1dbc\3\2\2\2\u03be\u1dc7\3\2"+
		"\2\2\u03c0\u1df4\3\2\2\2\u03c2\u1e18\3\2\2\2\u03c4\u1e1a\3\2\2\2\u03c6"+
		"\u1e22\3\2\2\2\u03c8\u1e2f\3\2\2\2\u03ca\u1e31\3\2\2\2\u03cc\u1e35\3\2"+
		"\2\2\u03ce\u1e38\3\2\2\2\u03d0\u1e3d\3\2\2\2\u03d2\u1e41\3\2\2\2\u03d4"+
		"\u1e44\3\2\2\2\u03d6\u1e47\3\2\2\2\u03d8\u1e4b\3\2\2\2\u03da\u1e51\3\2"+
		"\2\2\u03dc\u1e59\3\2\2\2\u03de\u1e61\3\2\2\2\u03e0\u1e67\3\2\2\2\u03e2"+
		"\u1e6a\3\2\2\2\u03e4\u1e7c\3\2\2\2\u03e6\u1e7e\3\2\2\2\u03e8\u1e84\3\2"+
		"\2\2\u03ea\u1e88\3\2\2\2\u03ec\u1e90\3\2\2\2\u03ee\u1e98\3\2\2\2\u03f0"+
		"\u1ea0\3\2\2\2\u03f2\u1ebd\3\2\2\2\u03f4\u1edc\3\2\2\2\u03f6\u1ee0\3\2"+
		"\2\2\u03f8\u1ee4\3\2\2\2\u03fa\u1ee7\3\2\2\2\u03fc\u1ef2\3\2\2\2\u03fe"+
		"\u1ef4\3\2\2\2\u0400\u1ef9\3\2\2\2\u0402\u1efb\3\2\2\2\u0404\u1efd\3\2"+
		"\2\2\u0406\u1eff\3\2\2\2\u0408\u1f08\3\2\2\2\u040a\u1f0e\3\2\2\2\u040c"+
		"\u1f10\3\2\2\2\u040e\u1f12\3\2\2\2\u0410\u1f1d\3\2\2\2\u0412\u1f21\3\2"+
		"\2\2\u0414\u1f23\3\2\2\2\u0416\u1f25\3\2\2\2\u0418\u1f27\3\2\2\2\u041a"+
		"\u1f30\3\2\2\2\u041c\u1f32\3\2\2\2\u041e\u1f34\3\2\2\2\u0420\u1f36\3\2"+
		"\2\2\u0422\u1f38\3\2\2\2\u0424\u1f3a\3\2\2\2\u0426\u1f3c\3\2\2\2\u0428"+
		"\u1f3e\3\2\2\2\u042a\u1f42\3\2\2\2\u042c\u1f46\3\2\2\2\u042e\u1f48\3\2"+
		"\2\2\u0430\u1f4a\3\2\2\2\u0432\u1f4c\3\2\2\2\u0434\u1f4e\3\2\2\2\u0436"+
		"\u1f50\3\2\2\2\u0438\u1f52\3\2\2\2\u043a\u1f54\3\2\2\2\u043c\u1f56\3\2"+
		"\2\2\u043e\u1f58\3\2\2\2\u0440\u1f5a\3\2\2\2\u0442\u1f5e\3\2\2\2\u0444"+
		"\u1f60\3\2\2\2\u0446\u1f63\3\2\2\2\u0448\u1f6f\3\2\2\2\u044a\u1f71\3\2"+
		"\2\2\u044c\u1f79\3\2\2\2\u044e\u1f81\3\2\2\2\u0450\u1f85\3\2\2\2\u0452"+
		"\u1f87\3\2\2\2\u0454\u1f8b\3\2\2\2\u0456\u1f8d\3\2\2\2\u0458\u1f8f\3\2"+
		"\2\2\u045a\u1f91\3\2\2\2\u045c\u1f93\3\2\2\2\u045e\u1f95\3\2\2\2\u0460"+
		"\u1f9a\3\2\2\2\u0462\u1f9e\3\2\2\2\u0464\u1fa0\3\2\2\2\u0466\u1fa8\3\2"+
		"\2\2\u0468\u1fac\3\2\2\2\u046a\u1fbb\3\2\2\2\u046c\u1fbd\3\2\2\2\u046e"+
		"\u1fc0\3\2\2\2\u0470\u1fc2\3\2\2\2\u0472\u1fc4\3\2\2\2\u0474\u1fcb\3\2"+
		"\2\2\u0476\u1fd6\3\2\2\2\u0478\u1fdd\3\2\2\2\u047a\u1fdf\3\2\2\2\u047c"+
		"\u1fed\3\2\2\2\u047e\u1ff2\3\2\2\2\u0480\u1ff7\3\2\2\2\u0482\u1ffe\3\2"+
		"\2\2\u0484\u2006\3\2\2\2\u0486\u2008\3\2\2\2\u0488\u2010\3\2\2\2\u048a"+
		"\u2012\3\2\2\2\u048c\u2014\3\2\2\2\u048e\u201c\3\2\2\2\u0490\u2020\3\2"+
		"\2\2\u0492\u2022\3\2\2\2\u0494\u2024\3\2\2\2\u0496\u202c\3\2\2\2\u0498"+
		"\u2030\3\2\2\2\u049a\u2034\3\2\2\2\u049c\u2038\3\2\2\2\u049e\u203a\3\2"+
		"\2\2\u04a0\u203d\3\2\2\2\u04a2\u203f\3\2\2\2\u04a4\u2047\3\2\2\2\u04a6"+
		"\u2053\3\2\2\2\u04a8\u2066\3\2\2\2\u04aa\u2068\3\2\2\2\u04ac\u206a\3\2"+
		"\2\2\u04ae\u207e\3\2\2\2\u04b0\u2080\3\2\2\2\u04b2\u2082\3\2\2\2\u04b4"+
		"\u208e\3\2\2\2\u04b6\u2094\3\2\2\2\u04b8\u2096\3\2\2\2\u04ba\u209d\3\2"+
		"\2\2\u04bc\u20a8\3\2\2\2\u04be\u04c0\5\4\3\2\u04bf\u04be\3\2\2\2\u04c0"+
		"\u04c3\3\2\2\2\u04c1\u04bf\3\2\2\2\u04c1\u04c2\3\2\2\2\u04c2\u04c4\3\2"+
		"\2\2\u04c3\u04c1\3\2\2\2\u04c4\u04c5\7\2\2\3\u04c5\3\3\2\2\2\u04c6\u04c9"+
		"\5\6\4\2\u04c7\u04c9\5\u01a2\u00d2\2\u04c8\u04c6\3\2\2\2\u04c8\u04c7\3"+
		"\2\2\2\u04c9\u04cb\3\2\2\2\u04ca\u04cc\7\u0199\2\2\u04cb\u04ca\3\2\2\2"+
		"\u04cb\u04cc\3\2\2\2\u04cc\5\3\2\2\2\u04cd\u04f0\5\b\5\2\u04ce\u04f0\5"+
		"R*\2\u04cf\u04f0\5\u00b8]\2\u04d0\u04f0\5\u00d8m\2\u04d1\u04f0\5\u00dc"+
		"o\2\u04d2\u04d3\6\4\2\2\u04d3\u04f0\5\u00dep\2\u04d4\u04f0\5\u00e0q\2"+
		"\u04d5\u04f0\5\u00e2r\2\u04d6\u04f0\5\u00e8u\2\u04d7\u04f0\5\u00eav\2"+
		"\u04d8\u04f0\5\u00eex\2\u04d9\u04f0\5\u0102\u0082\2\u04da\u04f0\5\u010e"+
		"\u0088\2\u04db\u04f0\5\u0110\u0089\2\u04dc\u04f0\5\u019c\u00cf\2\u04dd"+
		"\u04f0\5\u019e\u00d0\2\u04de\u04f0\5\u01b4\u00db\2\u04df\u04f0\5\u01e4"+
		"\u00f3\2\u04e0\u04e1\6\4\3\2\u04e1\u04f0\5\u01ea\u00f6\2\u04e2\u04f0\5"+
		"\u01f0\u00f9\2\u04e3\u04f0\5\u022e\u0118\2\u04e4\u04f0\5\u0236\u011c\2"+
		"\u04e5\u04f0\5\u0238\u011d\2\u04e6\u04f0\5\u0250\u0129\2\u04e7\u04e8\6"+
		"\4\4\2\u04e8\u04f0\5\u027c\u013f\2\u04e9\u04f0\5\u025c\u012f\2\u04ea\u04f0"+
		"\5\u0290\u0149\2\u04eb\u04ec\6\4\5\2\u04ec\u04f0\5\u0342\u01a2\2\u04ed"+
		"\u04f0\5\u034c\u01a7\2\u04ee\u04f0\5\u034e\u01a8\2\u04ef\u04cd\3\2\2\2"+
		"\u04ef\u04ce\3\2\2\2\u04ef\u04cf\3\2\2\2\u04ef\u04d0\3\2\2\2\u04ef\u04d1"+
		"\3\2\2\2\u04ef\u04d2\3\2\2\2\u04ef\u04d4\3\2\2\2\u04ef\u04d5\3\2\2\2\u04ef"+
		"\u04d6\3\2\2\2\u04ef\u04d7\3\2\2\2\u04ef\u04d8\3\2\2\2\u04ef\u04d9\3\2"+
		"\2\2\u04ef\u04da\3\2\2\2\u04ef\u04db\3\2\2\2\u04ef\u04dc\3\2\2\2\u04ef"+
		"\u04dd\3\2\2\2\u04ef\u04de\3\2\2\2\u04ef\u04df\3\2\2\2\u04ef\u04e0\3\2"+
		"\2\2\u04ef\u04e2\3\2\2\2\u04ef\u04e3\3\2\2\2\u04ef\u04e4\3\2\2\2\u04ef"+
		"\u04e5\3\2\2\2\u04ef\u04e6\3\2\2\2\u04ef\u04e7\3\2\2\2\u04ef\u04e9\3\2"+
		"\2\2\u04ef\u04ea\3\2\2\2\u04ef\u04eb\3\2\2\2\u04ef\u04ed\3\2\2\2\u04ef"+
		"\u04ee\3\2\2\2\u04f0\7\3\2\2\2\u04f1\u050c\7\u01ae\2\2\u04f2\u050d\5\26"+
		"\f\2\u04f3\u050d\5\n\6\2\u04f4\u04f5\7\u0254\2\2\u04f5\u04f7\5\u0420\u0211"+
		"\2\u04f6\u04f8\5l\67\2\u04f7\u04f6\3\2\2\2\u04f7\u04f8\3\2\2\2\u04f8\u050d"+
		"\3\2\2\2\u04f9\u04fa\7\u0166\2\2\u04fa\u04fc\5\u0424\u0213\2\u04fb\u04fd"+
		"\5l\67\2\u04fc\u04fb\3\2\2\2\u04fc\u04fd\3\2\2\2\u04fd\u050d\3\2\2\2\u04fe"+
		"\u050d\5J&\2\u04ff\u050d\5\f\7\2\u0500\u050d\5<\37\2\u0501\u0502\6\5\6"+
		"\2\u0502\u050d\5> \2\u0503\u050d\5\16\b\2\u0504\u050d\5\24\13\2\u0505"+
		"\u0506\6\5\7\2\u0506\u0507\7\u00a7\2\2\u0507\u0508\7\u012a\2\2\u0508\u0509"+
		"\5\u0496\u024c\2\u0509\u050a\7\u00bb\2\2\u050a\u050b\7\u021b\2\2\u050b"+
		"\u050d\3\2\2\2\u050c\u04f2\3\2\2\2\u050c\u04f3\3\2\2\2\u050c\u04f4\3\2"+
		"\2\2\u050c\u04f9\3\2\2\2\u050c\u04fe\3\2\2\2\u050c\u04ff\3\2\2\2\u050c"+
		"\u0500\3\2\2\2\u050c\u0501\3\2\2\2\u050c\u0503\3\2\2\2\u050c\u0504\3\2"+
		"\2\2\u050c\u0505\3\2\2\2\u050d\t\3\2\2\2\u050e\u050f\7\u01d5\2\2\u050f"+
		"\u051a\5\u041c\u020f\2\u0510\u0512\5V,\2\u0511\u0510\3\2\2\2\u0512\u0513"+
		"\3\2\2\2\u0513\u0511\3\2\2\2\u0513\u0514\3\2\2\2\u0514\u051b\3\2\2\2\u0515"+
		"\u0516\6\6\b\2\u0516\u0517\7\67\2\2\u0517\u0518\7o\2\2\u0518\u0519\7y"+
		"\2\2\u0519\u051b\7\u00e7\2\2\u051a\u0511\3\2\2\2\u051a\u0515\3\2\2\2\u051b"+
		"\13\3\2\2\2\u051c\u051e\5\u03ca\u01e6\2\u051d\u051c\3\2\2\2\u051d\u051e"+
		"\3\2\2\2\u051e\u051f\3\2\2\2\u051f\u0520\7\u0087\2\2\u0520\u0524\5\u0438"+
		"\u021d\2\u0521\u0522\7\u0245\2\2\u0522\u0523\7\u0131\2\2\u0523\u0525\5"+
		"\u0358\u01ad\2\u0524\u0521\3\2\2\2\u0524\u0525\3\2\2\2\u0525\u052c\3\2"+
		"\2\2\u0526\u0527\7\u0245\2\2\u0527\u0529\7_\2\2\u0528\u052a\7\u023f\2"+
		"\2\u0529\u0528\3\2\2\2\u0529\u052a\3\2\2\2\u052a\u052b\3\2\2\2\u052b\u052d"+
		"\7\u0104\2\2\u052c\u0526\3\2\2\2\u052c\u052d\3\2\2\2\u052d\u0531\3\2\2"+
		"\2\u052e\u052f\7\u025e\2\2\u052f\u0530\7\u028f\2\2\u0530\u0532\5\u0462"+
		"\u0232\2\u0531\u052e\3\2\2\2\u0531\u0532\3\2\2\2\u0532\u0539\3\2\2\2\u0533"+
		"\u053a\7\u0091\2\2\u0534\u0537\7z\2\2\u0535\u0536\7\u0245\2\2\u0536\u0538"+
		"\7/\2\2\u0537\u0535\3\2\2\2\u0537\u0538\3\2\2\2\u0538\u053a\3\2\2\2\u0539"+
		"\u0533\3\2\2\2\u0539\u0534\3\2\2\2\u0539\u053a\3\2\2\2\u053a\u053d\3\2"+
		"\2\2\u053b\u053c\7\r\2\2\u053c\u053e\5\u0482\u0242\2\u053d\u053b\3\2\2"+
		"\2\u053d\u053e\3\2\2\2\u053e\u0541\3\2\2\2\u053f\u0540\7\21\2\2\u0540"+
		"\u0542\5\u030a\u0186\2\u0541\u053f\3\2\2\2\u0541\u0542\3\2\2\2\u0542\r"+
		"\3\2\2\2\u0543\u0544\7\u00b8\2\2\u0544\u0545\7\u0202\2\2\u0545\u0546\5"+
		"\u0434\u021b\2\u0546\u0547\7\u01ac\2\2\u0547\u0548\7\u016a\2\2\u0548\u054a"+
		"\5\u0482\u0242\2\u0549\u054b\5\20\t\2\u054a\u0549\3\2\2\2\u054a\u054b"+
		"\3\2\2\2\u054b\17\3\2\2\2\u054c\u0553\5\22\n\2\u054d\u054f\7\u0198\2\2"+
		"\u054e\u054d\3\2\2\2\u054e\u054f\3\2\2\2\u054f\u0550\3\2\2\2\u0550\u0552"+
		"\5\22\n\2\u0551\u054e\3\2\2\2\u0552\u0555\3\2\2\2\u0553\u0551\3\2\2\2"+
		"\u0553\u0554\3\2\2\2\u0554\21\3\2\2\2\u0555\u0553\3\2\2\2\u0556\u055a"+
		"\5\u008eH\2\u0557\u055a\5\u009aN\2\u0558\u055a\5\u009cO\2\u0559\u0556"+
		"\3\2\2\2\u0559\u0557\3\2\2\2\u0559\u0558\3\2\2\2\u055a\23\3\2\2\2\u055b"+
		"\u055c\7-\2\2\u055c\u055d\5\u043e\u0220\2\u055d\u055e\5~@\2\u055e\25\3"+
		"\2\2\2\u055f\u0561\5\u0402\u0202\2\u0560\u055f\3\2\2\2\u0560\u0561\3\2"+
		"\2\2\u0561\u0564\3\2\2\2\u0562\u0563\6\f\t\2\u0563\u0565\7\u020a\2\2\u0564"+
		"\u0562\3\2\2\2\u0564\u0565\3\2\2\2\u0565\u0566\3\2\2\2\u0566\u0567\7\u0289"+
		"\2\2\u0567\u0569\5\u0448\u0225\2\u0568\u056a\5\30\r\2\u0569\u0568\3\2"+
		"\2\2\u0569\u056a\3\2\2\2\u056a\27\3\2\2\2\u056b\u056e\5\32\16\2\u056c"+
		"\u056f\5\u03b4\u01db\2\u056d\u056f\5\66\34\2\u056e\u056c\3\2\2\2\u056e"+
		"\u056d\3\2\2\2\u056e\u056f\3\2\2\2\u056f\u0579\3\2\2\2\u0570\u0579\5\u03b4"+
		"\u01db\2\u0571\u0579\5\66\34\2\u0572\u0573\5\34\17\2\u0573\u0574\7\u0198"+
		"\2\2\u0574\u0576\3\2\2\2\u0575\u0572\3\2\2\2\u0575\u0576\3\2\2\2\u0576"+
		"\u0577\3\2\2\2\u0577\u0579\5\36\20\2\u0578\u056b\3\2\2\2\u0578\u0570\3"+
		"\2\2\2\u0578\u0571\3\2\2\2\u0578\u0575\3\2\2\2\u0579\31\3\2\2\2\u057a"+
		"\u0582\5\34\17\2\u057b\u057c\5\34\17\2\u057c\u057d\7\u0198\2\2\u057d\u057f"+
		"\3\2\2\2\u057e\u057b\3\2\2\2\u057e\u057f\3\2\2\2\u057f\u0580\3\2\2\2\u0580"+
		"\u0582\5\"\22\2\u0581\u057a\3\2\2\2\u0581\u057e\3\2\2\2\u0582\33\3\2\2"+
		"\2\u0583\u0588\5$\23\2\u0584\u0585\7\u0198\2\2\u0585\u0587\5$\23\2\u0586"+
		"\u0584\3\2\2\2\u0587\u058a\3\2\2\2\u0588\u0586\3\2\2\2\u0588\u0589\3\2"+
		"\2\2\u0589\35\3\2\2\2\u058a\u0588\3\2\2\2\u058b\u058c\7{\2\2\u058c\u0593"+
		"\7\u0158\2\2\u058d\u058e\7\u00a4\2\2\u058e\u0593\7\u0158\2\2\u058f\u0593"+
		"\5 \21\2\u0590\u0591\6\20\n\2\u0591\u0593\t\2\2\2\u0592\u058b\3\2\2\2"+
		"\u0592\u058d\3\2\2\2\u0592\u058f\3\2\2\2\u0592\u0590\3\2\2\2\u0593\37"+
		"\3\2\2\2\u0594\u0595\7\u01ac\2\2\u0595\u0597\7\"\2\2\u0596\u0598\5\u0404"+
		"\u0203\2\u0597\u0596\3\2\2\2\u0597\u0598\3\2\2\2\u0598\u059c\3\2\2\2\u0599"+
		"\u059d\5\u03bc\u01df\2\u059a\u059b\7\u00fc\2\2\u059b\u059d\5\u0470\u0239"+
		"\2\u059c\u0599\3\2\2\2\u059c\u059a\3\2\2\2\u059d\u05f6\3\2\2\2\u059e\u059f"+
		"\7\u01e9\2\2\u059f\u05a0\7\"\2\2\u05a0\u05f6\5\u0464\u0233\2\u05a1\u05a2"+
		"\7\u0110\2\2\u05a2\u05a4\7\"\2\2\u05a3\u05a5\5\u0404\u0203\2\u05a4\u05a3"+
		"\3\2\2\2\u05a4\u05a5\3\2\2\2\u05a5\u05a6\3\2\2\2\u05a6\u05f6\58\35\2\u05a7"+
		"\u05a8\7\u0248\2\2\u05a8\u05aa\7\"\2\2\u05a9\u05ab\5\u0404\u0203\2\u05aa"+
		"\u05a9\3\2\2\2\u05aa\u05ab\3\2\2\2\u05ab\u05ac\3\2\2\2\u05ac\u05ae\58"+
		"\35\2\u05ad\u05af\5\u0404\u0203\2\u05ae\u05ad\3\2\2\2\u05ae\u05af\3\2"+
		"\2\2\u05af\u05f6\3\2\2\2\u05b0\u05b1\7A\2\2\u05b1\u05b3\7\"\2\2\u05b2"+
		"\u05b4\5\u0404\u0203\2\u05b3\u05b2\3\2\2\2\u05b3\u05b4\3\2\2\2\u05b4\u05b5"+
		"\3\2\2\2\u05b5\u05f6\58\35\2\u05b6\u05b7\7\u01c5\2\2\u05b7\u05b8\7\"\2"+
		"\2\u05b8\u05bc\58\35\2\u05b9\u05bb\5\u0232\u011a\2\u05ba\u05b9\3\2\2\2"+
		"\u05bb\u05be\3\2\2\2\u05bc\u05ba\3\2\2\2\u05bc\u05bd\3\2\2\2\u05bd\u05f6"+
		"\3\2\2\2\u05be\u05bc\3\2\2\2\u05bf\u05c0\7\'\2\2\u05c0\u05c2\7\"\2\2\u05c1"+
		"\u05c3\5\u0404\u0203\2\u05c2\u05c1\3\2\2\2\u05c2\u05c3\3\2\2\2\u05c3\u05c4"+
		"\3\2\2\2\u05c4\u05c8\58\35\2\u05c5\u05c7\5\u0234\u011b\2\u05c6\u05c5\3"+
		"\2\2\2\u05c7\u05ca\3\2\2\2\u05c8\u05c6\3\2\2\2\u05c8\u05c9\3\2\2\2\u05c9"+
		"\u05f6\3\2\2\2\u05ca\u05c8\3\2\2\2\u05cb\u05cc\7W\2\2\u05cc\u05ce\7\""+
		"\2\2\u05cd\u05cf\5\u0404\u0203\2\u05ce\u05cd\3\2\2\2\u05ce\u05cf\3\2\2"+
		"\2\u05cf\u05d0\3\2\2\2\u05d0\u05f6\5\u0470\u0239\2\u05d1\u05d2\7\64\2"+
		"\2\u05d2\u05d3\7\"\2\2\u05d3\u05f6\58\35\2\u05d4\u05f6\5:\36\2\u05d5\u05d6"+
		"\7\u011b\2\2\u05d6\u05d8\7\"\2\2\u05d7\u05d9\5\u0404\u0203\2\u05d8\u05d7"+
		"\3\2\2\2\u05d8\u05d9\3\2\2\2\u05d9\u05de\3\2\2\2\u05da\u05db\5\u0464\u0233"+
		"\2\u05db\u05dc\7\u0212\2\2\u05dc\u05dd\5\u03bc\u01df\2\u05dd\u05df\3\2"+
		"\2\2\u05de\u05da\3\2\2\2\u05de\u05df\3\2\2\2\u05df\u05f6\3\2\2\2\u05e0"+
		"\u05e1\7\u01f1\2\2\u05e1\u05e2\7\"\2\2\u05e2\u05e3\5\u0462\u0232\2\u05e3"+
		"\u05e4\7\u02ac\2\2\u05e4\u05e5\7\u0289\2\2\u05e5\u05e7\5\u0448\u0225\2"+
		"\u05e6\u05e8\5\64\33\2\u05e7\u05e6\3\2\2\2\u05e7\u05e8\3\2\2\2\u05e8\u05f6"+
		"\3\2\2\2\u05e9\u05ea\6\21\13\2\u05ea\u05eb\7{\2\2\u05eb\u05ec\7\"\2\2"+
		"\u05ec\u05ed\58\35\2\u05ed\u05ee\7\u0158\2\2\u05ee\u05f6\3\2\2\2\u05ef"+
		"\u05f0\6\21\f\2\u05f0\u05f1\7\u00a4\2\2\u05f1\u05f2\7\"\2\2\u05f2\u05f3"+
		"\58\35\2\u05f3\u05f4\7\u0158\2\2\u05f4\u05f6\3\2\2\2\u05f5\u0594\3\2\2"+
		"\2\u05f5\u059e\3\2\2\2\u05f5\u05a1\3\2\2\2\u05f5\u05a7\3\2\2\2\u05f5\u05b0"+
		"\3\2\2\2\u05f5\u05b6\3\2\2\2\u05f5\u05bf\3\2\2\2\u05f5\u05cb\3\2\2\2\u05f5"+
		"\u05d1\3\2\2\2\u05f5\u05d4\3\2\2\2\u05f5\u05d5\3\2\2\2\u05f5\u05e0\3\2"+
		"\2\2\u05f5\u05e9\3\2\2\2\u05f5\u05ef\3\2\2\2\u05f6!\3\2\2\2\u05f7\u05fa"+
		"\5&\24\2\u05f8\u05fa\5\u03a8\u01d5\2\u05f9\u05f7\3\2\2\2\u05f9\u05f8\3"+
		"\2\2\2\u05fa\u0603\3\2\2\2\u05fb\u05ff\7\u0198\2\2\u05fc\u0600\5&\24\2"+
		"\u05fd\u0600\5$\23\2\u05fe\u0600\5\u03a8\u01d5\2\u05ff\u05fc\3\2\2\2\u05ff"+
		"\u05fd\3\2\2\2\u05ff\u05fe\3\2\2\2\u0600\u0602\3\2\2\2\u0601\u05fb\3\2"+
		"\2\2\u0602\u0605\3\2\2\2\u0603\u0601\3\2\2\2\u0603\u0604\3\2\2\2\u0604"+
		"#\3\2\2\2\u0605\u0603\3\2\2\2\u0606\u060a\5.\30\2\u0607\u060a\5\60\31"+
		"\2\u0608\u060a\5\64\33\2\u0609\u0606\3\2\2\2\u0609\u0607\3\2\2\2\u0609"+
		"\u0608\3\2\2\2\u060a%\3\2\2\2\u060b\u060d\7\u01ac\2\2\u060c\u060e\7\u01c7"+
		"\2\2\u060d\u060c\3\2\2\2\u060d\u060e\3\2\2\2\u060e\u061b\3\2\2\2\u060f"+
		"\u0610\5\u0462\u0232\2\u0610\u0612\5\u0366\u01b4\2\u0611\u0613\5\u035c"+
		"\u01af\2\u0612\u0611\3\2\2\2\u0612\u0613\3\2\2\2\u0613\u0615\3\2\2\2\u0614"+
		"\u0616\5(\25\2\u0615\u0614\3\2\2\2\u0615\u0616\3\2\2\2\u0616\u061c\3\2"+
		"\2\2\u0617\u0618\7\u019b\2\2\u0618\u0619\5Z.\2\u0619\u061a\7\u019c\2\2"+
		"\u061a\u061c\3\2\2\2\u061b\u060f\3\2\2\2\u061b\u0617\3\2\2\2\u061c\u0691"+
		"\3\2\2\2\u061d\u061e\7\u01ac\2\2\u061e\u0691\5\u0362\u01b2\2\u061f\u0621"+
		"\7\u01c3\2\2\u0620\u0622\7\u01c7\2\2\u0621\u0620\3\2\2\2\u0621\u0622\3"+
		"\2\2\2\u0622\u0623\3\2\2\2\u0623\u0624\5\u040c\u0207\2\u0624\u0625\5\u0462"+
		"\u0232\2\u0625\u0627\5\u0366\u01b4\2\u0626\u0628\5(\25\2\u0627\u0626\3"+
		"\2\2\2\u0627\u0628\3\2\2\2\u0628\u0691\3\2\2\2\u0629\u062b\7\u00df\2\2"+
		"\u062a\u062c\7\u01c7\2\2\u062b\u062a\3\2\2\2\u062b\u062c\3\2\2\2\u062c"+
		"\u062d\3\2\2\2\u062d\u062e\5\u040c\u0207\2\u062e\u0630\5\u0366\u01b4\2"+
		"\u062f\u0631\5(\25\2\u0630\u062f\3\2\2\2\u0630\u0631\3\2\2\2\u0631\u0691"+
		"\3\2\2\2\u0632\u0649\7\u01e9\2\2\u0633\u0635\7\u01c7\2\2\u0634\u0633\3"+
		"\2\2\2\u0634\u0635\3\2\2\2\u0635\u0636\3\2\2\2\u0636\u0638\5\u040c\u0207"+
		"\2\u0637\u0639\5*\26\2\u0638\u0637\3\2\2\2\u0638\u0639\3\2\2\2\u0639\u064a"+
		"\3\2\2\2\u063a\u063b\7\u01fb\2\2\u063b\u0642\7\u021b\2\2\u063c\u063d\6"+
		"\24\r\2\u063d\u0643\5\u040c\u0207\2\u063e\u0640\6\24\16\2\u063f\u0641"+
		"\5\u040c\u0207\2\u0640\u063f\3\2\2\2\u0640\u0641\3\2\2\2\u0641\u0643\3"+
		"\2\2\2\u0642\u063c\3\2\2\2\u0642\u063e\3\2\2\2\u0643\u064a\3\2\2\2\u0644"+
		"\u0645\7\u0253\2\2\u0645\u064a\7\u021b\2\2\u0646\u0647\5\u0192\u00ca\2"+
		"\u0647\u0648\5\u0416\u020c\2\u0648\u064a\3\2\2\2\u0649\u0634\3\2\2\2\u0649"+
		"\u063a\3\2\2\2\u0649\u0644\3\2\2\2\u0649\u0646\3\2\2\2\u064a\u0691\3\2"+
		"\2\2\u064b\u064c\7z\2\2\u064c\u0691\7\u021a\2\2\u064d\u064e\7\u0091\2"+
		"\2\u064e\u0691\7\u021a\2\2\u064f\u0651\7\u01ae\2\2\u0650\u0652\7\u01c7"+
		"\2\2\u0651\u0650\3\2\2\2\u0651\u0652\3\2\2\2\u0652\u0653\3\2\2\2\u0653"+
		"\u065d\5\u040c\u0207\2\u0654\u0655\7\u026d\2\2\u0655\u0659\7\u01e0\2\2"+
		"\u0656\u0657\6\24\17\2\u0657\u065a\5\u02fc\u017f\2\u0658\u065a\5\u0478"+
		"\u023d\2\u0659\u0656\3\2\2\2\u0659\u0658\3\2\2\2\u065a\u065e\3\2\2\2\u065b"+
		"\u065c\7\u01e9\2\2\u065c\u065e\7\u01e0\2\2\u065d\u0654\3\2\2\2\u065d\u065b"+
		"\3\2\2\2\u065e\u0691\3\2\2\2\u065f\u0660\6\24\20\2\u0660\u0661\7\u01ae"+
		"\2\2\u0661\u0662\7\u020b\2\2\u0662\u0663\5\u0416\u020c\2\u0663\u0664\5"+
		"\u0384\u01c3\2\u0664\u0691\3\2\2\2\u0665\u0666\6\24\21\2\u0666\u0667\7"+
		"\u01ae\2\2\u0667\u0668\7\u01c5\2\2\u0668\u0669\5\u0462\u0232\2\u0669\u066a"+
		"\5\u0360\u01b1\2\u066a\u0691\3\2\2\2\u066b\u066c\6\24\22\2\u066c\u066d"+
		"\7\u025e\2\2\u066d\u066e\7\u01c7\2\2\u066e\u066f\5\u040c\u0207\2\u066f"+
		"\u0670\7\u028f\2\2\u0670\u0671\5\u0462\u0232\2\u0671\u0691\3\2\2\2\u0672"+
		"\u0674\7\u025e\2\2\u0673\u0675\t\3\2\2\u0674\u0673\3\2\2\2\u0674\u0675"+
		"\3\2\2\2\u0675\u0676\3\2\2\2\u0676\u0691\5\u0442\u0222\2\u0677\u0678\6"+
		"\24\23\2\u0678\u0679\7\u025e\2\2\u0679\u067a\5\u0192\u00ca\2\u067a\u067b"+
		"\5\u0416\u020c\2\u067b\u067c\7\u028f\2\2\u067c\u067d\5\u0414\u020b\2\u067d"+
		"\u0691\3\2\2\2\u067e\u067f\7\u01cb\2\2\u067f\u0680\7\u028f\2\2\u0680\u0684"+
		"\5\u02f0\u0179\2\u0681\u0682\6\24\24\2\u0682\u0685\7\u01e0\2\2\u0683\u0685"+
		"\5\u03a2\u01d2\2\u0684\u0681\3\2\2\2\u0684\u0683\3\2\2\2\u0685\u0687\3"+
		"\2\2\2\u0686\u0688\5\u03d4\u01eb\2\u0687\u0686\3\2\2\2\u0687\u0688\3\2"+
		"\2\2\u0688\u0691\3\2\2\2\u0689\u0691\7\u01fa\2\2\u068a\u068b\7\u024c\2"+
		"\2\u068b\u068c\7\u01be\2\2\u068c\u0691\5,\27\2\u068d\u068e\6\24\25\2\u068e"+
		"\u068f\7\67\2\2\u068f\u0691\7\u00fb\2\2\u0690\u060b\3\2\2\2\u0690\u061d"+
		"\3\2\2\2\u0690\u061f\3\2\2\2\u0690\u0629\3\2\2\2\u0690\u0632\3\2\2\2\u0690"+
		"\u064b\3\2\2\2\u0690\u064d\3\2\2\2\u0690\u064f\3\2\2\2\u0690\u065f\3\2"+
		"\2\2\u0690\u0665\3\2\2\2\u0690\u066b\3\2\2\2\u0690\u0672\3\2\2\2\u0690"+
		"\u0677\3\2\2\2\u0690\u067e\3\2\2\2\u0690\u0689\3\2\2\2\u0690\u068a\3\2"+
		"\2\2\u0690\u068d\3\2\2\2\u0691\'\3\2\2\2\u0692\u0693\7=\2\2\u0693\u0696"+
		"\5\u0462\u0232\2\u0694\u0696\7\u0096\2\2\u0695\u0692\3\2\2\2\u0695\u0694"+
		"\3\2\2\2\u0696)\3\2\2\2\u0697\u0698\t\4\2\2\u0698+\3\2\2\2\u0699\u069b"+
		"\5\u0462\u0232\2\u069a\u069c\5\u014e\u00a8\2\u069b\u069a\3\2\2\2\u069b"+
		"\u069c\3\2\2\2\u069c\u06a4\3\2\2\2\u069d\u069e\7\u0198\2\2\u069e\u06a0"+
		"\5\u0462\u0232\2\u069f\u06a1\5\u014e\u00a8\2\u06a0\u069f\3\2\2\2\u06a0"+
		"\u06a1\3\2\2\2\u06a1\u06a3\3\2\2\2\u06a2\u069d\3\2\2\2\u06a3\u06a6\3\2"+
		"\2\2\u06a4\u06a2\3\2\2\2\u06a4\u06a5\3\2\2\2\u06a5-\3\2\2\2\u06a6\u06a4"+
		"\3\2\2\2\u06a7\u06a9\7@\2\2\u06a8\u06aa\7\u0181\2\2\u06a9\u06a8\3\2\2"+
		"\2\u06a9\u06aa\3\2\2\2\u06aa\u06ad\3\2\2\2\u06ab\u06ae\7\u01e0\2\2\u06ac"+
		"\u06ae\5\u0462\u0232\2\u06ad\u06ab\3\2\2\2\u06ad\u06ac\3\2\2\2\u06ae/"+
		"\3\2\2\2\u06af\u06b1\7\u0226\2\2\u06b0\u06b2\7\u0181\2\2\u06b1\u06b0\3"+
		"\2\2\2\u06b1\u06b2\3\2\2\2\u06b2\u06b5\3\2\2\2\u06b3\u06b6\7\u01e0\2\2"+
		"\u06b4\u06b6\5\u0462\u0232\2\u06b5\u06b3\3\2\2\2\u06b5\u06b4\3\2\2\2\u06b6"+
		"\61\3\2\2\2\u06b7\u06b9\5.\30\2\u06b8\u06ba\5\60\31\2\u06b9\u06b8\3\2"+
		"\2\2\u06b9\u06ba\3\2\2\2\u06ba\u06c0\3\2\2\2\u06bb\u06bd\5\60\31\2\u06bc"+
		"\u06be\5.\30\2\u06bd\u06bc\3\2\2\2\u06bd\u06be\3\2\2\2\u06be\u06c0\3\2"+
		"\2\2\u06bf\u06b7\3\2\2\2\u06bf\u06bb\3\2\2\2\u06c0\63\3\2\2\2\u06c1\u06c2"+
		"\6\33\26\2\u06c2\u06c3\t\5\2\2\u06c3\u06c4\7\u02a0\2\2\u06c4\65\3\2\2"+
		"\2\u06c5\u06c6\7&\2\2\u06c6\u06c7\7\u00fb\2\2\u06c7\67\3\2\2\2\u06c8\u06cb"+
		"\7\u01ad\2\2\u06c9\u06cb\5\u0464\u0233\2\u06ca\u06c8\3\2\2\2\u06ca\u06c9"+
		"\3\2\2\2\u06cb9\3\2\2\2\u06cc\u06cd\7\u011b\2\2\u06cd\u06cf\7\"\2\2\u06ce"+
		"\u06d0\5\u0404\u0203\2\u06cf\u06ce\3\2\2\2\u06cf\u06d0\3\2\2\2\u06d0\u06d5"+
		"\3\2\2\2\u06d1\u06d2\5\u0464\u0233\2\u06d2\u06d3\7\u0212\2\2\u06d3\u06d4"+
		"\5\u03bc\u01df\2\u06d4\u06d6\3\2\2\2\u06d5\u06d1\3\2\2\2\u06d5\u06d6\3"+
		"\2\2\2\u06d6;\3\2\2\2\u06d7\u06d8\7\u0158\2\2\u06d8\u06fa\5\u0430\u0219"+
		"\2\u06d9\u06da\t\6\2\2\u06da\u06db\7p\2\2\u06db\u06dd\5\u0482\u0242\2"+
		"\u06dc\u06de\5D#\2\u06dd\u06dc\3\2\2\2\u06dd\u06de\3\2\2\2\u06de\u06fb"+
		"\3\2\2\2\u06df\u06f3\6\37\27\2\u06e0\u06f4\3\2\2\2\u06e1\u06e2\7\u01c3"+
		"\2\2\u06e2\u06e3\7p\2\2\u06e3\u06ee\5\u0482\u0242\2\u06e4\u06eb\5H%\2"+
		"\u06e5\u06e7\7\u0198\2\2\u06e6\u06e5\3\2\2\2\u06e6\u06e7\3\2\2\2\u06e7"+
		"\u06e8\3\2\2\2\u06e8\u06ea\5H%\2\u06e9\u06e6\3\2\2\2\u06ea\u06ed\3\2\2"+
		"\2\u06eb\u06e9\3\2\2\2\u06eb\u06ec\3\2\2\2\u06ec\u06ef\3\2\2\2\u06ed\u06eb"+
		"\3\2\2\2\u06ee\u06e4\3\2\2\2\u06ee\u06ef\3\2\2\2\u06ef\u06f4\3\2\2\2\u06f0"+
		"\u06f4\t\7\2\2\u06f1\u06f2\7\u023f\2\2\u06f2\u06f4\7\u01ab\2\2\u06f3\u06e0"+
		"\3\2\2\2\u06f3\u06e1\3\2\2\2\u06f3\u06f0\3\2\2\2\u06f3\u06f1\3\2\2\2\u06f4"+
		"\u06fb\3\2\2\2\u06f5\u06f6\7\u025e\2\2\u06f6\u06f7\7\u028f\2\2\u06f7\u06fb"+
		"\5\u0462\u0232\2\u06f8\u06f9\6\37\30\2\u06f9\u06fb\5D#\2\u06fa\u06d9\3"+
		"\2\2\2\u06fa\u06df\3\2\2\2\u06fa\u06f5\3\2\2\2\u06fa\u06f8\3\2\2\2\u06fb"+
		"=\3\2\2\2\u06fc\u06fd\7\u0294\2\2\u06fd\u06fe\7\u0158\2\2\u06fe\u06ff"+
		"\5\u0430\u0219\2\u06ff\u0700\7\u026d\2\2\u0700\u0702\t\b\2\2\u0701\u0703"+
		"\5@!\2\u0702\u0701\3\2\2\2\u0702\u0703\3\2\2\2\u0703?\3\2\2\2\u0704\u070b"+
		"\5B\"\2\u0705\u0707\7\u0198\2\2\u0706\u0705\3\2\2\2\u0706\u0707\3\2\2"+
		"\2\u0707\u0708\3\2\2\2\u0708\u070a\5B\"\2\u0709\u0706\3\2\2\2\u070a\u070d"+
		"\3\2\2\2\u070b\u0709\3\2\2\2\u070b\u070c\3\2\2\2\u070cA\3\2\2\2\u070d"+
		"\u070b\3\2\2\2\u070e\u070f\5\u009aN\2\u070fC\3\2\2\2\u0710\u0717\5F$\2"+
		"\u0711\u0713\7\u0198\2\2\u0712\u0711\3\2\2\2\u0712\u0713\3\2\2\2\u0713"+
		"\u0714\3\2\2\2\u0714\u0716\5F$\2\u0715\u0712\3\2\2\2\u0716\u0719\3\2\2"+
		"\2\u0717\u0715\3\2\2\2\u0717\u0718\3\2\2\2\u0718E\3\2\2\2\u0719\u0717"+
		"\3\2\2\2\u071a\u071c\7\u00a6\2\2\u071b\u071d\7\u0181\2\2\u071c\u071b\3"+
		"\2\2\2\u071c\u071d\3\2\2\2\u071d\u071e\3\2\2\2\u071e\u0725\5\u049c\u024f"+
		"\2\u071f\u0725\5\u0092J\2\u0720\u0725\5\u0094K\2\u0721\u0725\5\u009aN"+
		"\2\u0722\u0725\5\u009cO\2\u0723\u0725\5\u00a2R\2\u0724\u071a\3\2\2\2\u0724"+
		"\u071f\3\2\2\2\u0724\u0720\3\2\2\2\u0724\u0721\3\2\2\2\u0724\u0722\3\2"+
		"\2\2\u0724\u0723\3\2\2\2\u0725G\3\2\2\2\u0726\u0728\7\u00a6\2\2\u0727"+
		"\u0729\7\u0181\2\2\u0728\u0727\3\2\2\2\u0728\u0729\3\2\2\2\u0729\u072a"+
		"\3\2\2\2\u072a\u072e\5\u049c\u024f\2\u072b\u072e\5\u0092J\2\u072c\u072e"+
		"\5\u0094K\2\u072d\u0726\3\2\2\2\u072d\u072b\3\2\2\2\u072d\u072c\3\2\2"+
		"\2\u072eI\3\2\2\2\u072f\u0731\5\u00a8U\2\u0730\u072f\3\2\2\2\u0730\u0731"+
		"\3\2\2\2\u0731\u0733\3\2\2\2\u0732\u0734\5\u03ca\u01e6\2\u0733\u0732\3"+
		"\2\2\2\u0733\u0734\3\2\2\2\u0734\u0736\3\2\2\2\u0735\u0737\5\u00aaV\2"+
		"\u0736\u0735\3\2\2\2\u0736\u0737\3\2\2\2\u0737\u0738\3\2\2\2\u0738\u0739"+
		"\7\u0171\2\2\u0739\u073a\5\u042c\u0217\2\u073a\u073b\5L\'\2\u073bK\3\2"+
		"\2\2\u073c\u073e\5\u040e\u0208\2\u073d\u073c\3\2\2\2\u073d\u073e\3\2\2"+
		"\2\u073e\u073f\3\2\2\2\u073f\u0740\7\u01b1\2\2\u0740\u0741\5N(\2\u0741"+
		"M\3\2\2\2\u0742\u0744\5`\61\2\u0743\u0745\5P)\2\u0744\u0743\3\2\2\2\u0744"+
		"\u0745\3\2\2\2\u0745O\3\2\2\2\u0746\u0748\7\u02ac\2\2\u0747\u0749\t\t"+
		"\2\2\u0748\u0747\3\2\2\2\u0748\u0749\3\2\2\2\u0749\u074a\3\2\2\2\u074a"+
		"\u074b\7\u01c5\2\2\u074b\u074c\7\u024a\2\2\u074cQ\3\2\2\2\u074d\u0760"+
		"\7\u01cd\2\2\u074e\u0761\5T+\2\u074f\u0761\5X-\2\u0750\u0761\5f\64\2\u0751"+
		"\u0761\5d\63\2\u0752\u0761\5h\65\2\u0753\u0761\5v<\2\u0754\u0761\5\u00a4"+
		"S\2\u0755\u0761\5\u00acW\2\u0756\u0761\5p9\2\u0757\u0761\5|?\2\u0758\u0761"+
		"\5\u0082B\2\u0759\u0761\5\u00b0Y\2\u075a\u075b\6*\31\2\u075b\u0761\5\u00b2"+
		"Z\2\u075c\u075d\6*\32\2\u075d\u0761\5\u00b4[\2\u075e\u075f\6*\33\2\u075f"+
		"\u0761\5\u0084C\2\u0760\u074e\3\2\2\2\u0760\u074f\3\2\2\2\u0760\u0750"+
		"\3\2\2\2\u0760\u0751\3\2\2\2\u0760\u0752\3\2\2\2\u0760\u0753\3\2\2\2\u0760"+
		"\u0754\3\2\2\2\u0760\u0755\3\2\2\2\u0760\u0756\3\2\2\2\u0760\u0757\3\2"+
		"\2\2\u0760\u0758\3\2\2\2\u0760\u0759\3\2\2\2\u0760\u075a\3\2\2\2\u0760"+
		"\u075c\3\2\2\2\u0760\u075e\3\2\2\2\u0761S\3\2\2\2\u0762\u0764\7\u01d5"+
		"\2\2\u0763\u0765\5\u03ce\u01e8\2\u0764\u0763\3\2\2\2\u0764\u0765\3\2\2"+
		"\2\u0765\u0766\3\2\2\2\u0766\u076a\5\u041a\u020e\2\u0767\u0769\5V,\2\u0768"+
		"\u0767\3\2\2\2\u0769\u076c\3\2\2\2\u076a\u0768\3\2\2\2\u076a\u076b\3\2"+
		"\2\2\u076bU\3\2\2\2\u076c\u076a\3\2\2\2\u076d\u0772\5\u03b2\u01da\2\u076e"+
		"\u0772\5\u03ae\u01d8\2\u076f\u0770\6,\34\2\u0770\u0772\5\u03b0\u01d9\2"+
		"\u0771\u076d\3\2\2\2\u0771\u076e\3\2\2\2\u0771\u076f\3\2\2\2\u0772W\3"+
		"\2\2\2\u0773\u0775\7\u0159\2\2\u0774\u0773\3\2\2\2\u0774\u0775\3\2\2\2"+
		"\u0775\u0776\3\2\2\2\u0776\u0778\7\u0289\2\2\u0777\u0779\5\u03ce\u01e8"+
		"\2\u0778\u0777\3\2\2\2\u0778\u0779\3\2\2\2\u0779\u077a\3\2\2\2\u077a\u0791"+
		"\5\u0442\u0222\2\u077b\u077c\7\u019b\2\2\u077c\u077d\5Z.\2\u077d\u077e"+
		"\7\u019c\2\2\u077e\u0780\3\2\2\2\u077f\u077b\3\2\2\2\u077f\u0780\3\2\2"+
		"\2\u0780\u0782\3\2\2\2\u0781\u0783\5\u03a6\u01d4\2\u0782\u0781\3\2\2\2"+
		"\u0782\u0783\3\2\2\2\u0783\u0785\3\2\2\2\u0784\u0786\5\u03b4\u01db\2\u0785"+
		"\u0784\3\2\2\2\u0785\u0786\3\2\2\2\u0786\u0788\3\2\2\2\u0787\u0789\5^"+
		"\60\2\u0788\u0787\3\2\2\2\u0788\u0789\3\2\2\2\u0789\u0792\3\2\2\2\u078a"+
		"\u078b\7\u0220\2\2\u078b\u0792\5\u0448\u0225\2\u078c\u078d\7\u019b\2\2"+
		"\u078d\u078e\7\u0220\2\2\u078e\u078f\5\u0448\u0225\2\u078f\u0790\7\u019c"+
		"\2\2\u0790\u0792\3\2\2\2\u0791\u077f\3\2\2\2\u0791\u078a\3\2\2\2\u0791"+
		"\u078c\3\2\2\2\u0792Y\3\2\2\2\u0793\u0798\5\\/\2\u0794\u0795\7\u0198\2"+
		"\2\u0795\u0797\5\\/\2\u0796\u0794\3\2\2\2\u0797\u079a\3\2\2\2\u0798\u0796"+
		"\3\2\2\2\u0798\u0799\3\2\2\2\u0799[\3\2\2\2\u079a\u0798\3\2\2\2\u079b"+
		"\u079e\5\u035a\u01ae\2\u079c\u079e\5\u0362\u01b2\2\u079d\u079b\3\2\2\2"+
		"\u079d\u079c\3\2\2\2\u079e]\3\2\2\2\u079f\u07a1\t\n\2\2\u07a0\u079f\3"+
		"\2\2\2\u07a0\u07a1\3\2\2\2\u07a1\u07a3\3\2\2\2\u07a2\u07a4\7\u01b1\2\2"+
		"\u07a3\u07a2\3\2\2\2\u07a3\u07a4\3\2\2\2\u07a4\u07a5\3\2\2\2\u07a5\u07a6"+
		"\5`\61\2\u07a6_\3\2\2\2\u07a7\u07aa\5\u0114\u008b\2\u07a8\u07aa\5\u0118"+
		"\u008d\2\u07a9\u07a7\3\2\2\2\u07a9\u07a8\3\2\2\2\u07aaa\3\2\2\2\u07ab"+
		"\u07af\7\u01cd\2\2\u07ac\u07b0\5d\63\2\u07ad\u07b0\5f\64\2\u07ae\u07b0"+
		"\5h\65\2\u07af\u07ac\3\2\2\2\u07af\u07ad\3\2\2\2\u07af\u07ae\3\2\2\2\u07b0"+
		"\u07b2\3\2\2\2\u07b1\u07b3\7\u0199\2\2\u07b2\u07b1\3\2\2\2\u07b2\u07b3"+
		"\3\2\2\2\u07b3\u07b4\3\2\2\2\u07b4\u07b5\7\2\2\3\u07b5c\3\2\2\2\u07b6"+
		"\u07b8\5\u03ca\u01e6\2\u07b7\u07b6\3\2\2\2\u07b7\u07b8\3\2\2\2\u07b8\u07b9"+
		"\3\2\2\2\u07b9\u07ba\7\u0254\2\2\u07ba\u07bb\5\u041e\u0210\2\u07bb\u07c4"+
		"\7\u019b\2\2\u07bc\u07c1\5\u03d0\u01e9\2\u07bd\u07be\7\u0198\2\2\u07be"+
		"\u07c0\5\u03d0\u01e9\2\u07bf\u07bd\3\2\2\2\u07c0\u07c3\3\2\2\2\u07c1\u07bf"+
		"\3\2\2\2\u07c1\u07c2\3\2\2\2\u07c2\u07c5\3\2\2\2\u07c3\u07c1\3\2\2\2\u07c4"+
		"\u07bc\3\2\2\2\u07c4\u07c5\3\2\2\2\u07c5\u07c6\3\2\2\2\u07c6\u07ca\7\u019c"+
		"\2\2\u07c7\u07c9\5j\66\2\u07c8\u07c7\3\2\2\2\u07c9\u07cc\3\2\2\2\u07ca"+
		"\u07c8\3\2\2\2\u07ca\u07cb\3\2\2\2\u07cb\u07cd\3\2\2\2\u07cc\u07ca\3\2"+
		"\2\2\u07cd\u07ce\5\u030a\u0186\2\u07cee\3\2\2\2\u07cf\u07d1\5\u03ca\u01e6"+
		"\2\u07d0\u07cf\3\2\2\2\u07d0\u07d1\3\2\2\2\u07d1\u07d2\3\2\2\2\u07d2\u07d3"+
		"\7\u0166\2\2\u07d3\u07d4\5\u0422\u0212\2\u07d4\u07dd\7\u019b\2\2\u07d5"+
		"\u07da\5\u03d2\u01ea\2\u07d6\u07d7\7\u0198\2\2\u07d7\u07d9\5\u03d2\u01ea"+
		"\2\u07d8\u07d6\3\2\2\2\u07d9\u07dc\3\2\2\2\u07da\u07d8\3\2\2\2\u07da\u07db"+
		"\3\2\2\2\u07db\u07de\3\2\2\2\u07dc\u07da\3\2\2\2\u07dd\u07d5\3\2\2\2\u07dd"+
		"\u07de\3\2\2\2\u07de\u07df\3\2\2\2\u07df\u07e0\7\u019c\2\2\u07e0\u07e1"+
		"\7\u0127\2\2\u07e1\u07e5\5\u03d6\u01ec\2\u07e2\u07e4\5j\66\2\u07e3\u07e2"+
		"\3\2\2\2\u07e4\u07e7\3\2\2\2\u07e5\u07e3\3\2\2\2\u07e5\u07e6\3\2\2\2\u07e6"+
		"\u07e8\3\2\2\2\u07e7\u07e5\3\2\2\2\u07e8\u07e9\5\u030a\u0186\2\u07e9g"+
		"\3\2\2\2\u07ea\u07ec\7?\2\2\u07eb\u07ea\3\2\2\2\u07eb\u07ec\3\2\2\2\u07ec"+
		"\u07ed\3\2\2\2\u07ed\u07ee\7\u0166\2\2\u07ee\u07ef\5\u043a\u021e\2\u07ef"+
		"\u07f0\7\u0127\2\2\u07f0\u07f1\t\13\2\2\u07f1\u07f2\7\61\2\2\u07f2\u07f3"+
		"\5\u0482\u0242\2\u07f3i\3\2\2\2\u07f4\u07fa\5n8\2\u07f5\u07f7\7\u023f"+
		"\2\2\u07f6\u07f5\3\2\2\2\u07f6\u07f7\3\2\2\2\u07f7\u07f8\3\2\2\2\u07f8"+
		"\u07fa\7\u01e5\2\2\u07f9\u07f4\3\2\2\2\u07f9\u07f6\3\2\2\2\u07fak\3\2"+
		"\2\2\u07fb\u07fd\5j\66\2\u07fc\u07fb\3\2\2\2\u07fd\u07fe\3\2\2\2\u07fe"+
		"\u07fc\3\2\2\2\u07fe\u07ff\3\2\2\2\u07ffm\3\2\2\2\u0800\u0801\7\r\2\2"+
		"\u0801\u0812\5\u0482\u0242\2\u0802\u0803\7\34\2\2\u0803\u0812\7\u027a"+
		"\2\2\u0804\u0805\7\35\2\2\u0805\u0812\7\u027a\2\2\u0806\u0807\7\17\2\2"+
		"\u0807\u0812\7\u027a\2\2\u0808\u0809\7\u0257\2\2\u0809\u080a\7\u027a\2"+
		"\2\u080a\u0812\7o\2\2\u080b\u080c\7\u0239\2\2\u080c\u080d\7\u027a\2\2"+
		"\u080d\u0812\7o\2\2\u080e\u080f\7\u027a\2\2\u080f\u0810\7,\2\2\u0810\u0812"+
		"\t\f\2\2\u0811\u0800\3\2\2\2\u0811\u0802\3\2\2\2\u0811\u0804\3\2\2\2\u0811"+
		"\u0806\3\2\2\2\u0811\u0808\3\2\2\2\u0811\u080b\3\2\2\2\u0811\u080e\3\2"+
		"\2\2\u0812o\3\2\2\2\u0813\u0815\5\u0402\u0202\2\u0814\u0813\3\2\2\2\u0814"+
		"\u0815\3\2\2\2\u0815\u083f\3\2\2\2\u0816\u0818\7\u0296\2\2\u0817\u0816"+
		"\3\2\2\2\u0817\u0818\3\2\2\2\u0818\u0819\3\2\2\2\u0819\u0822\7\u020b\2"+
		"\2\u081a\u081b\69\35\2\u081b\u081d\5\u0414\u020b\2\u081c\u081e\5\u0386"+
		"\u01c4\2\u081d\u081c\3\2\2\2\u081d\u081e\3\2\2\2\u081e\u0823\3\2\2\2\u081f"+
		"\u0821\5r:\2\u0820\u081f\3\2\2\2\u0820\u0821\3\2\2\2\u0821\u0823\3\2\2"+
		"\2\u0822\u081a\3\2\2\2\u0822\u0820\3\2\2\2\u0823\u0824\3\2\2\2\u0824\u0828"+
		"\5t;\2\u0825\u0827\5\u0380\u01c1\2\u0826\u0825\3\2\2\2\u0827\u082a\3\2"+
		"\2\2\u0828\u0826\3\2\2\2\u0828\u0829\3\2\2\2\u0829\u0840\3\2\2\2\u082a"+
		"\u0828\3\2\2\2\u082b\u082c\7\u01fe\2\2\u082c\u082d\7\u020b\2\2\u082d\u082e"+
		"\5\u0414\u020b\2\u082e\u0832\5t;\2\u082f\u0831\5\u0388\u01c5\2\u0830\u082f"+
		"\3\2\2\2\u0831\u0834\3\2\2\2\u0832\u0830\3\2\2\2\u0832\u0833\3\2\2\2\u0833"+
		"\u0840\3\2\2\2\u0834\u0832\3\2\2\2\u0835\u0836\7\u0272\2\2\u0836\u0837"+
		"\7\u020b\2\2\u0837\u0838\5\u0414\u020b\2\u0838\u083c\5t;\2\u0839\u083b"+
		"\5\u038a\u01c6\2\u083a\u0839\3\2\2\2\u083b\u083e\3\2\2\2\u083c\u083a\3"+
		"\2\2\2\u083c\u083d\3\2\2\2\u083d\u0840\3\2\2\2\u083e\u083c\3\2\2\2\u083f"+
		"\u0817\3\2\2\2\u083f\u082b\3\2\2\2\u083f\u0835\3\2\2\2\u0840\u0842\3\2"+
		"\2\2\u0841\u0843\5\62\32\2\u0842\u0841\3\2\2\2\u0842\u0843\3\2\2\2\u0843"+
		"q\3\2\2\2\u0844\u0847\5\u0414\u020b\2\u0845\u0846\7\u029c\2\2\u0846\u0848"+
		"\5\u037e\u01c0\2\u0847\u0845\3\2\2\2\u0847\u0848\3\2\2\2\u0848\u084e\3"+
		"\2\2\2\u0849\u084a\5\u0414\u020b\2\u084a\u084b\7\u0164\2\2\u084b\u084c"+
		"\5\u037e\u01c0\2\u084c\u084e\3\2\2\2\u084d\u0844\3\2\2\2\u084d\u0849\3"+
		"\2\2\2\u084es\3\2\2\2\u084f\u0850\7\u0245\2\2\u0850\u0851\5\u0448\u0225"+
		"\2\u0851\u0852\5\u037c\u01bf\2\u0852u\3\2\2\2\u0853\u0854\7\u00b8\2\2"+
		"\u0854\u0855\7\u0202\2\2\u0855\u0856\5\u0432\u021a\2\u0856\u0857\7\u01ac"+
		"\2\2\u0857\u0858\t\r\2\2\u0858\u085a\5\u0482\u0242\2\u0859\u085b\5x=\2"+
		"\u085a\u0859\3\2\2\2\u085a\u085b\3\2\2\2\u085bw\3\2\2\2\u085c\u0863\5"+
		"z>\2\u085d\u085f\7\u0198\2\2\u085e\u085d\3\2\2\2\u085e\u085f\3\2\2\2\u085f"+
		"\u0860\3\2\2\2\u0860\u0862\5z>\2\u0861\u085e\3\2\2\2\u0862\u0865\3\2\2"+
		"\2\u0863\u0861\3\2\2\2\u0863\u0864\3\2\2\2\u0864y\3\2\2\2\u0865\u0863"+
		"\3\2\2\2\u0866\u086d\5\u008eH\2\u0867\u086d\5\u0090I\2\u0868\u086d\5\u0098"+
		"M\2\u0869\u086d\5\u009aN\2\u086a\u086d\5\u009cO\2\u086b\u086d\5\u009e"+
		"P\2\u086c\u0866\3\2\2\2\u086c\u0867\3\2\2\2\u086c\u0868\3\2\2\2\u086c"+
		"\u0869\3\2\2\2\u086c\u086a\3\2\2\2\u086c\u086b\3\2\2\2\u086d{\3\2\2\2"+
		"\u086e\u086f\7-\2\2\u086f\u0870\5\u043c\u021f\2\u0870\u0871\7\u01fb\2"+
		"\2\u0871\u0872\7o\2\2\u0872\u0873\78\2\2\u0873\u0874\5\u0496\u024c\2\u0874"+
		"\u0875\5~@\2\u0875}\3\2\2\2\u0876\u0877\7\37\2\2\u0877\u0878\7\u019b\2"+
		"\2\u0878\u087d\5\u0080A\2\u0879\u087a\7\u0198\2\2\u087a\u087c\5\u0080"+
		"A\2\u087b\u0879\3\2\2\2\u087c\u087f\3\2\2\2\u087d\u087b\3\2\2\2\u087d"+
		"\u087e\3\2\2\2\u087e\u0880\3\2\2\2\u087f\u087d\3\2\2\2\u0880\u0881\7\u019c"+
		"\2\2\u0881\177\3\2\2\2\u0882\u0883\7\32\2\2\u0883\u0891\5\u0482\u0242"+
		"\2\u0884\u0885\7\u01d5\2\2\u0885\u0891\5\u0482\u0242\2\u0886\u0887\7\u016e"+
		"\2\2\u0887\u0891\5\u0482\u0242\2\u0888\u0889\7\u00fd\2\2\u0889\u0891\5"+
		"\u0482\u0242\2\u088a\u088b\7\60\2\2\u088b\u0891\5\u0482\u0242\2\u088c"+
		"\u088d\7 \2\2\u088d\u0891\5\u0482\u0242\2\u088e\u088f\7#\2\2\u088f\u0891"+
		"\5\u046e\u0238\2\u0890\u0882\3\2\2\2\u0890\u0884\3\2\2\2\u0890\u0886\3"+
		"\2\2\2\u0890\u0888\3\2\2\2\u0890\u088a\3\2\2\2\u0890\u088c\3\2\2\2\u0890"+
		"\u088e\3\2\2\2\u0891\u0081\3\2\2\2\u0892\u0893\7\u0158\2\2\u0893\u0894"+
		"\5\u042e\u0218\2\u0894\u0899\5\u0086D\2\u0895\u0896\7\u029b\2\2\u0896"+
		"\u0897\7\u00b8\2\2\u0897\u0898\7\u0202\2\2\u0898\u089a\5\u0434\u021b\2"+
		"\u0899\u0895\3\2\2\2\u0899\u089a\3\2\2\2\u089a\u089c\3\2\2\2\u089b\u089d"+
		"\5\u008aF\2\u089c\u089b\3\2\2\2\u089c\u089d\3\2\2\2\u089d\u0083\3\2\2"+
		"\2\u089e\u089f\7\u0294\2\2\u089f\u08a0\7\u0158\2\2\u08a0\u08a1\5\u042e"+
		"\u0218\2\u08a1\u08a2\7\u01ac\2\2\u08a2\u08a4\5\u0088E\2\u08a3\u08a5\5"+
		"@!\2\u08a4\u08a3\3\2\2\2\u08a4\u08a5\3\2\2\2\u08a5\u0085\3\2\2\2\u08a6"+
		"\u08a9\6D\36\2\u08a7\u08a8\7\u01ac\2\2\u08a8\u08aa\5\u0088E\2\u08a9\u08a7"+
		"\3\2\2\2\u08a9\u08aa\3\2\2\2\u08aa\u08ae\3\2\2\2\u08ab\u08ac\7\u01ac\2"+
		"\2\u08ac\u08ae\5\u0088E\2\u08ad\u08a6\3\2\2\2\u08ad\u08ab\3\2\2\2\u08ae"+
		"\u0087\3\2\2\2\u08af\u08b0\7p\2\2\u08b0\u08b1\5\u0482\u0242\2\u08b1\u0089"+
		"\3\2\2\2\u08b2\u08b9\5\u008cG\2\u08b3\u08b5\7\u0198\2\2\u08b4\u08b3\3"+
		"\2\2\2\u08b4\u08b5\3\2\2\2\u08b5\u08b6\3\2\2\2\u08b6\u08b8\5\u008cG\2"+
		"\u08b7\u08b4\3\2\2\2\u08b8\u08bb\3\2\2\2\u08b9\u08b7\3\2\2\2\u08b9\u08ba"+
		"\3\2\2\2\u08ba\u008b\3\2\2\2\u08bb\u08b9\3\2\2\2\u08bc\u08c9\5\u008eH"+
		"\2\u08bd\u08c9\5\u0092J\2\u08be\u08c9\5\u0094K\2\u08bf\u08c9\5\u0096L"+
		"\2\u08c0\u08c9\5\u0098M\2\u08c1\u08c9\5\u009aN\2\u08c2\u08c9\5\u009cO"+
		"\2\u08c3\u08c9\5\u009eP\2\u08c4\u08c5\6G\37\2\u08c5\u08c9\5\u00a0Q\2\u08c6"+
		"\u08c7\6G \2\u08c7\u08c9\5\u00a2R\2\u08c8\u08bc\3\2\2\2\u08c8\u08bd\3"+
		"\2\2\2\u08c8\u08be\3\2\2\2\u08c8\u08bf\3\2\2\2\u08c8\u08c0\3\2\2\2\u08c8"+
		"\u08c1\3\2\2\2\u08c8\u08c2\3\2\2\2\u08c8\u08c3\3\2\2\2\u08c8\u08c4\3\2"+
		"\2\2\u08c8\u08c6\3\2\2\2\u08c9\u008d\3\2\2\2\u08ca\u08cc\7\u00a6\2\2\u08cb"+
		"\u08cd\7\u0181\2\2\u08cc\u08cb\3\2\2\2\u08cc\u08cd\3\2\2\2\u08cd\u08ce"+
		"\3\2\2\2\u08ce\u08cf\5\u049c\u024f\2\u08cf\u008f\3\2\2\2\u08d0\u08d2\t"+
		"\16\2\2\u08d1\u08d3\7\u0181\2\2\u08d2\u08d1\3\2\2\2\u08d2\u08d3\3\2\2"+
		"\2\u08d3\u08d4\3\2\2\2\u08d4\u08d5\5\u049c\u024f\2\u08d5\u0091\3\2\2\2"+
		"\u08d6\u08d8\7F\2\2\u08d7\u08d9\7\u0181\2\2\u08d8\u08d7\3\2\2\2\u08d8"+
		"\u08d9\3\2\2\2\u08d9\u08da\3\2\2\2\u08da\u08db\5\u049c\u024f\2\u08db\u0093"+
		"\3\2\2\2\u08dc\u08de\7\u00d4\2\2\u08dd\u08df\7\u0181\2\2\u08de\u08dd\3"+
		"\2\2\2\u08de\u08df\3\2\2\2\u08df\u08e0\3\2\2\2\u08e0\u08e1\5\u049c\u024f"+
		"\2\u08e1\u0095\3\2\2\2\u08e2\u08e4\7\u008d\2\2\u08e3\u08e5\7\u0181\2\2"+
		"\u08e4\u08e3\3\2\2\2\u08e4\u08e5\3\2\2\2\u08e5\u08e6\3\2\2\2\u08e6\u08e7"+
		"\5\u049c\u024f\2\u08e7\u0097\3\2\2\2\u08e8\u08ea\7\u00f0\2\2\u08e9\u08eb"+
		"\7\u0181\2\2\u08ea\u08e9\3\2\2\2\u08ea\u08eb\3\2\2\2\u08eb\u08ec\3\2\2"+
		"\2\u08ec\u08ed\5\u0470\u0239\2\u08ed\u0099\3\2\2\2\u08ee\u08f0\7\u014a"+
		"\2\2\u08ef\u08ee\3\2\2\2\u08ef\u08f0\3\2\2\2\u08f0\u08f1\3\2\2\2\u08f1"+
		"\u08f3\7\u0082\2\2\u08f2\u08f4\7\u0181\2\2\u08f3\u08f2\3\2\2\2\u08f3\u08f4"+
		"\3\2\2\2\u08f4\u08f5\3\2\2\2\u08f5\u08f6\5\u0440\u0221\2\u08f6\u009b\3"+
		"\2\2\2\u08f7\u08f8\t\17\2\2\u08f8\u009d\3\2\2\2\u08f9\u08fb\7\r\2\2\u08fa"+
		"\u08fc\7\u0181\2\2\u08fb\u08fa\3\2\2\2\u08fb\u08fc\3\2\2\2\u08fc\u08fd"+
		"\3\2\2\2\u08fd\u08fe\5\u0482\u0242\2\u08fe\u009f\3\2\2\2\u08ff\u0901\7"+
		"\u0094\2\2\u0900\u0902\7\u0181\2\2\u0901\u0900\3\2\2\2\u0901\u0902\3\2"+
		"\2\2\u0902\u0903\3\2\2\2\u0903\u0904\5\u049c\u024f\2\u0904\u00a1\3\2\2"+
		"\2\u0905\u0907\7b\2\2\u0906\u0908\7\u0181\2\2\u0907\u0906\3\2\2\2\u0907"+
		"\u0908\3\2\2\2\u0908\u0909\3\2\2\2\u0909\u090a\5\u047c\u023f\2\u090a\u00a3"+
		"\3\2\2\2\u090b\u090d\5\u00a6T\2\u090c\u090b\3\2\2\2\u090c\u090d\3\2\2"+
		"\2\u090d\u090f\3\2\2\2\u090e\u0910\5\u03ca\u01e6\2\u090f\u090e\3\2\2\2"+
		"\u090f\u0910\3\2\2\2\u0910\u0912\3\2\2\2\u0911\u0913\5\u00aaV\2\u0912"+
		"\u0911\3\2\2\2\u0912\u0913\3\2\2\2\u0913\u0914\3\2\2\2\u0914\u0915\7\u0171"+
		"\2\2\u0915\u0916\5\u042a\u0216\2\u0916\u0917\5L\'\2\u0917\u00a5\3\2\2"+
		"\2\u0918\u0919\7\u024d\2\2\u0919\u091b\7\u0260\2\2\u091a\u091c\5\u00a8"+
		"U\2\u091b\u091a\3\2\2\2\u091b\u091c\3\2\2\2\u091c\u091f\3\2\2\2\u091d"+
		"\u091f\5\u00a8U\2\u091e\u0918\3\2\2\2\u091e\u091d\3\2\2\2\u091f\u00a7"+
		"\3\2\2\2\u0920\u0921\7@\2\2\u0921\u0922\7\u0181\2\2\u0922\u0923\t\20\2"+
		"\2\u0923\u00a9\3\2\2\2\u0924\u0925\7\u027a\2\2\u0925\u0926\7,\2\2\u0926"+
		"\u0927\t\f\2\2\u0927\u00ab\3\2\2\2\u0928\u092a\5\u03ca\u01e6\2\u0929\u0928"+
		"\3\2\2\2\u0929\u092a\3\2\2\2\u092a\u092b\3\2\2\2\u092b\u092c\7\u0291\2"+
		"\2\u092c\u092d\5\u0426\u0214\2\u092d\u092e\t\21\2\2\u092e\u092f\t\22\2"+
		"\2\u092f\u0930\7\u0245\2\2\u0930\u0931\5\u0448\u0225\2\u0931\u0932\7\u01fc"+
		"\2\2\u0932\u0933\7\u01eb\2\2\u0933\u0935\7\u012f\2\2\u0934\u0936\5\u00ae"+
		"X\2\u0935\u0934\3\2\2\2\u0935\u0936\3\2\2\2\u0936\u0937\3\2\2\2\u0937"+
		"\u0938\5\u030a\u0186\2\u0938\u00ad\3\2\2\2\u0939\u093a\6X!\2\u093a\u093b"+
		"\t\23\2\2\u093b\u093c\5\u0496\u024c\2\u093c\u00af\3\2\2\2\u093d\u093f"+
		"\5\u03ca\u01e6\2\u093e\u093d\3\2\2\2\u093e\u093f\3\2\2\2\u093f\u0940\3"+
		"\2\2\2\u0940\u0942\7\u0087\2\2\u0941\u0943\5\u03ce\u01e8\2\u0942\u0941"+
		"\3\2\2\2\u0942\u0943\3\2\2\2\u0943\u0944\3\2\2\2\u0944\u0945\5\u0436\u021c"+
		"\2\u0945\u0946\7\u0245\2\2\u0946\u0947\7\u0131\2\2\u0947\u094e\5\u0358"+
		"\u01ad\2\u0948\u0949\7\u0245\2\2\u0949\u094b\7_\2\2\u094a\u094c\7\u023f"+
		"\2\2\u094b\u094a\3\2\2\2\u094b\u094c\3\2\2\2\u094c\u094d\3\2\2\2\u094d"+
		"\u094f\7\u0104\2\2\u094e\u0948\3\2\2\2\u094e\u094f\3\2\2\2\u094f\u0956"+
		"\3\2\2\2\u0950\u0957\7\u0091\2\2\u0951\u0954\7z\2\2\u0952\u0953\7\u0245"+
		"\2\2\u0953\u0955\7/\2\2\u0954\u0952\3\2\2\2\u0954\u0955\3\2\2\2\u0955"+
		"\u0957\3\2\2\2\u0956\u0950\3\2\2\2\u0956\u0951\3\2\2\2\u0956\u0957\3\2"+
		"\2\2\u0957\u095a\3\2\2\2\u0958\u0959\7\r\2\2\u0959\u095b\5\u0482\u0242"+
		"\2\u095a\u0958\3\2\2\2\u095a\u095b\3\2\2\2\u095b\u095c\3\2\2\2\u095c\u095d"+
		"\7\21\2\2\u095d\u095e\5\u030a\u0186\2\u095e\u00b1\3\2\2\2\u095f\u0961"+
		"\7\u02b3\2\2\u0960\u0962\5\u03ce\u01e8\2\u0961\u0960\3\2\2\2\u0961\u0962"+
		"\3\2\2\2\u0962\u0963\3\2\2\2\u0963\u0964\5\u022a\u0116\2\u0964\u00b3\3"+
		"\2\2\2\u0965\u0966\7\u024d\2\2\u0966\u0967\7\u0260\2\2\u0967\u0968\7\u0272"+
		"\2\2\u0968\u0969\7\u02ee\2\2\u0969\u096a\7\u02e6\2\2\u096a\u096e\5\u0474"+
		"\u023b\2\u096b\u096d\5\u00b6\\\2\u096c\u096b\3\2\2\2\u096d\u0970\3\2\2"+
		"\2\u096e\u096c\3\2\2\2\u096e\u096f\3\2\2\2\u096f\u097f\3\2\2\2\u0970\u096e"+
		"\3\2\2\2\u0971\u0972\7\u0272\2\2\u0972\u0973\7\u02ee\2\2\u0973\u0975\7"+
		"\u02e6\2\2\u0974\u0976\5\u03ce\u01e8\2\u0975\u0974\3\2\2\2\u0975\u0976"+
		"\3\2\2\2\u0976\u0977\3\2\2\2\u0977\u097b\5\u0474\u023b\2\u0978\u097a\5"+
		"\u00b6\\\2\u0979\u0978\3\2\2\2\u097a\u097d\3\2\2\2\u097b\u0979\3\2\2\2"+
		"\u097b\u097c\3\2\2\2\u097c\u097f\3\2\2\2\u097d\u097b\3\2\2\2\u097e\u0965"+
		"\3\2\2\2\u097e\u0971\3\2\2\2\u097f\u00b5\3\2\2\2\u0980\u0981\7\u00e7\2"+
		"\2\u0981\u0982\7\u015b\2\2\u0982\u0990\5\u0484\u0243\2\u0983\u0984\7\u02eb"+
		"\2\2\u0984\u0985\7\u015b\2\2\u0985\u0990\5\u0484\u0243\2\u0986\u0987\7"+
		"\u02ed\2\2\u0987\u0988\5\u0484\u0243\2\u0988\u0989\7\u00a1\2\2\u0989\u098a"+
		"\7\u01be\2\2\u098a\u098b\5\u0474\u023b\2\u098b\u0990\3\2\2\2\u098c\u098d"+
		"\7\u02ec\2\2\u098d\u098e\7\u015b\2\2\u098e\u0990\5\u0484\u0243\2\u098f"+
		"\u0980\3\2\2\2\u098f\u0983\3\2\2\2\u098f\u0986\3\2\2\2\u098f\u098c\3\2"+
		"\2\2\u0990\u00b7\3\2\2\2\u0991\u09a3\7\u01e9\2\2\u0992\u09a4\5\u00ba^"+
		"\2\u0993\u09a4\5\u00bc_\2\u0994\u09a4\5\u00be`\2\u0995\u09a4\5\u00c0a"+
		"\2\u0996\u09a4\5\u00c2b\2\u0997\u09a4\5\u00c4c\2\u0998\u09a4\5\u00c8e"+
		"\2\u0999\u09a4\5\u00caf\2\u099a\u09a4\5\u00ccg\2\u099b\u09a4\5\u00ceh"+
		"\2\u099c\u09a4\5\u00d0i\2\u099d\u099e\6]\"\2\u099e\u09a4\5\u00d2j\2\u099f"+
		"\u09a0\6]#\2\u09a0\u09a4\5\u00d4k\2\u09a1\u09a2\6]$\2\u09a2\u09a4\5\u00d6"+
		"l\2\u09a3\u0992\3\2\2\2\u09a3\u0993\3\2\2\2\u09a3\u0994\3\2\2\2\u09a3"+
		"\u0995\3\2\2\2\u09a3\u0996\3\2\2\2\u09a3\u0997\3\2\2\2\u09a3\u0998\3\2"+
		"\2\2\u09a3\u0999\3\2\2\2\u09a3\u099a\3\2\2\2\u09a3\u099b\3\2\2\2\u09a3"+
		"\u099c\3\2\2\2\u09a3\u099d\3\2\2\2\u09a3\u099f\3\2\2\2\u09a3\u09a1\3\2"+
		"\2\2\u09a4\u00b9\3\2\2\2\u09a5\u09a7\7\u01d5\2\2\u09a6\u09a8\5\u03cc\u01e7"+
		"\2\u09a7\u09a6\3\2\2\2\u09a7\u09a8\3\2\2\2\u09a8\u09a9\3\2\2\2\u09a9\u09aa"+
		"\5\u041c\u020f\2\u09aa\u00bb\3\2\2\2\u09ab\u09ad\7\u0087\2\2\u09ac\u09ae"+
		"\5\u03cc\u01e7\2\u09ad\u09ac\3\2\2\2\u09ad\u09ae\3\2\2\2\u09ae\u09af\3"+
		"\2\2\2\u09af\u09b0\5\u0438\u021d\2\u09b0\u00bd\3\2\2\2\u09b1\u09b3\7\u0166"+
		"\2\2\u09b2\u09b4\5\u03cc\u01e7\2\u09b3\u09b2\3\2\2\2\u09b3\u09b4\3\2\2"+
		"\2\u09b4\u09b5\3\2\2\2\u09b5\u09b6\5\u0424\u0213\2\u09b6\u00bf\3\2\2\2"+
		"\u09b7\u09b9\7\u0254\2\2\u09b8\u09ba\5\u03cc\u01e7\2\u09b9\u09b8\3\2\2"+
		"\2\u09b9\u09ba\3\2\2\2\u09ba\u09bb\3\2\2\2\u09bb\u09bc\5\u0420\u0211\2"+
		"\u09bc\u00c1\3\2\2\2\u09bd\u09bf\5\u0402\u0202\2\u09be\u09bd\3\2\2\2\u09be"+
		"\u09bf\3\2\2\2\u09bf\u09c0\3\2\2\2\u09c0\u09c1\7\u020b\2\2\u09c1\u09c2"+
		"\5\u0416\u020c\2\u09c2\u09c3\7\u0245\2\2\u09c3\u09c5\5\u0448\u0225\2\u09c4"+
		"\u09c6\5\62\32\2\u09c5\u09c4\3\2\2\2\u09c5\u09c6\3\2\2\2\u09c6\u00c3\3"+
		"\2\2\2\u09c7\u09c8\7\u00b8\2\2\u09c8\u09c9\7\u0202\2\2\u09c9\u09d4\5\u0434"+
		"\u021b\2\u09ca\u09d1\5\u00c6d\2\u09cb\u09cd\7\u0198\2\2\u09cc\u09cb\3"+
		"\2\2\2\u09cc\u09cd\3\2\2\2\u09cd\u09ce\3\2\2\2\u09ce\u09d0\5\u00c6d\2"+
		"\u09cf\u09cc\3\2\2\2\u09d0\u09d3\3\2\2\2\u09d1\u09cf\3\2\2\2\u09d1\u09d2"+
		"\3\2\2\2\u09d2\u09d5\3\2\2\2\u09d3\u09d1\3\2\2\2\u09d4\u09ca\3\2\2\2\u09d4"+
		"\u09d5\3\2\2\2\u09d5\u00c5\3\2\2\2\u09d6\u09d9\5\u009cO\2\u09d7\u09d9"+
		"\5\u009aN\2\u09d8\u09d6\3\2\2\2\u09d8\u09d7\3\2\2\2\u09d9\u00c7\3\2\2"+
		"\2\u09da\u09dc\7-\2\2\u09db\u09dd\5\u03cc\u01e7\2\u09dc\u09db\3\2\2\2"+
		"\u09dc\u09dd\3\2\2\2\u09dd\u09de\3\2\2\2\u09de\u09df\5\u043e\u0220\2\u09df"+
		"\u00c9\3\2\2\2\u09e0\u09e2\7\u0159\2\2\u09e1\u09e0\3\2\2\2\u09e1\u09e2"+
		"\3\2\2\2\u09e2\u09e3\3\2\2\2\u09e3\u09e5\t\24\2\2\u09e4\u09e6\5\u03cc"+
		"\u01e7\2\u09e5\u09e4\3\2\2\2\u09e5\u09e6\3\2\2\2\u09e6\u09e7\3\2\2\2\u09e7"+
		"\u09e9\5\u044a\u0226\2\u09e8\u09ea\t\4\2\2\u09e9\u09e8\3\2\2\2\u09e9\u09ea"+
		"\3\2\2\2\u09ea\u00cb\3\2\2\2\u09eb\u09ec\7\u0158\2\2\u09ec\u09f7\5\u0430"+
		"\u0219\2\u09ed\u09f4\5\u00c6d\2\u09ee\u09f0\7\u0198\2\2\u09ef\u09ee\3"+
		"\2\2\2\u09ef\u09f0\3\2\2\2\u09f0\u09f1\3\2\2\2\u09f1\u09f3\5\u00c6d\2"+
		"\u09f2\u09ef\3\2\2\2\u09f3\u09f6\3\2\2\2\u09f4\u09f2\3\2\2\2\u09f4\u09f5"+
		"\3\2\2\2\u09f5\u09f8\3\2\2\2\u09f6\u09f4\3\2\2\2\u09f7\u09ed\3\2\2\2\u09f7"+
		"\u09f8\3\2\2\2\u09f8\u00cd\3\2\2\2\u09f9\u09fb\7\u0291\2\2\u09fa\u09fc"+
		"\5\u03cc\u01e7\2\u09fb\u09fa\3\2\2\2\u09fb\u09fc\3\2\2\2\u09fc\u09fd\3"+
		"\2\2\2\u09fd\u09fe\5\u0428\u0215\2\u09fe\u00cf\3\2\2\2\u09ff\u0a01\7\u0171"+
		"\2\2\u0a00\u0a02\5\u03cc\u01e7\2\u0a01\u0a00\3\2\2\2\u0a01\u0a02\3\2\2"+
		"\2\u0a02\u0a03\3\2\2\2\u0a03\u0a05\5\u03da\u01ee\2\u0a04\u0a06\t\4\2\2"+
		"\u0a05\u0a04\3\2\2\2\u0a05\u0a06\3\2\2\2\u0a06\u00d1\3\2\2\2\u0a07\u0a09"+
		"\7\u02b3\2\2\u0a08\u0a0a\5\u03cc\u01e7\2\u0a09\u0a08\3\2\2\2\u0a09\u0a0a"+
		"\3\2\2\2\u0a0a\u0a0b\3\2\2\2\u0a0b\u0a0c\5\u022a\u0116\2\u0a0c\u00d3\3"+
		"\2\2\2\u0a0d\u0a0e\7\u0272\2\2\u0a0e\u0a0f\7\u02ee\2\2\u0a0f\u0a11\7\u02e6"+
		"\2\2\u0a10\u0a12\5\u03cc\u01e7\2\u0a11\u0a10\3\2\2\2\u0a11\u0a12\3\2\2"+
		"\2\u0a12\u0a13\3\2\2\2\u0a13\u0a14\5\u0474\u023b\2\u0a14\u00d5\3\2\2\2"+
		"\u0a15\u0a16\7\u0294\2\2\u0a16\u0a17\7\u0158\2\2\u0a17\u0a19\5\u0430\u0219"+
		"\2\u0a18\u0a1a\5@!\2\u0a19\u0a18\3\2\2\2\u0a19\u0a1a\3\2\2\2\u0a1a\u00d7"+
		"\3\2\2\2\u0a1b\u0a1c\7\u025e\2\2\u0a1c\u0a1d\t\24\2\2\u0a1d\u0a22\5\u00da"+
		"n\2\u0a1e\u0a1f\7\u0198\2\2\u0a1f\u0a21\5\u00dan\2\u0a20\u0a1e\3\2\2\2"+
		"\u0a21\u0a24\3\2\2\2\u0a22\u0a20\3\2\2\2\u0a22\u0a23\3\2\2\2\u0a23\u00d9"+
		"\3\2\2\2\u0a24\u0a22\3\2\2\2\u0a25\u0a26\5\u0448\u0225\2\u0a26\u0a27\7"+
		"\u028f\2\2\u0a27\u0a28\5\u0442\u0222\2\u0a28\u00db\3\2\2\2\u0a29\u0a2b"+
		"\7\64\2\2\u0a2a\u0a2c\7\u0289\2\2\u0a2b\u0a2a\3\2\2\2\u0a2b\u0a2c\3\2"+
		"\2\2\u0a2c\u0a2d\3\2\2\2\u0a2d\u0a2e\5\u0448\u0225\2\u0a2e\u00dd\3\2\2"+
		"\2\u0a2f\u0a30\7\u00a4\2\2\u0a30\u0a31\7\u0289\2\2\u0a31\u0a32\7\u01fd"+
		"\2\2\u0a32\u0a33\5\u0486\u0244\2\u0a33\u00df\3\2\2\2\u0a34\u0a35\7\u01bf"+
		"\2\2\u0a35\u0a3b\5\u0420\u0211\2\u0a36\u0a38\7\u019b\2\2\u0a37\u0a39\5"+
		"\u02ee\u0178\2\u0a38\u0a37\3\2\2\2\u0a38\u0a39\3\2\2\2\u0a39\u0a3a\3\2"+
		"\2\2\u0a3a\u0a3c\7\u019c\2\2\u0a3b\u0a36\3\2\2\2\u0a3b\u0a3c\3\2\2\2\u0a3c"+
		"\u00e1\3\2\2\2\u0a3d\u0a3e\6r%\2\u0a3e\u0a40\5\u0144\u00a3\2\u0a3f\u0a3d"+
		"\3\2\2\2\u0a3f\u0a40\3\2\2\2\u0a40\u0a41\3\2\2\2\u0a41\u0a45\7\u01e2\2"+
		"\2\u0a42\u0a44\5\u00e6t\2\u0a43\u0a42\3\2\2\2\u0a44\u0a47\3\2\2\2\u0a45"+
		"\u0a43\3\2\2\2\u0a45\u0a46\3\2\2\2\u0a46\u0a68\3\2\2\2\u0a47\u0a45\3\2"+
		"\2\2\u0a48\u0a60\7\u01fd\2\2\u0a49\u0a4a\5\u044c\u0227\2\u0a4a\u0a4b\7"+
		"\u029c\2\2\u0a4b\u0a4d\5\u0152\u00aa\2\u0a4c\u0a4e\5\u0162\u00b2\2\u0a4d"+
		"\u0a4c\3\2\2\2\u0a4d\u0a4e\3\2\2\2\u0a4e\u0a61\3\2\2\2\u0a4f\u0a52\5\u0448"+
		"\u0225\2\u0a50\u0a51\6r&\2\u0a51\u0a53\5\u018a\u00c6\2\u0a52\u0a50\3\2"+
		"\2\2\u0a52\u0a53\3\2\2\2\u0a53\u0a55\3\2\2\2\u0a54\u0a56\5\u00e4s\2\u0a55"+
		"\u0a54\3\2\2\2\u0a55\u0a56\3\2\2\2\u0a56\u0a58\3\2\2\2\u0a57\u0a59\5\u0162"+
		"\u00b2\2\u0a58\u0a57\3\2\2\2\u0a58\u0a59\3\2\2\2\u0a59\u0a5b\3\2\2\2\u0a5a"+
		"\u0a5c\5\u014c\u00a7\2\u0a5b\u0a5a\3\2\2\2\u0a5b\u0a5c\3\2\2\2\u0a5c\u0a5e"+
		"\3\2\2\2\u0a5d\u0a5f\5\u0122\u0092\2\u0a5e\u0a5d\3\2\2\2\u0a5e\u0a5f\3"+
		"\2\2\2\u0a5f\u0a61\3\2\2\2\u0a60\u0a49\3\2\2\2\u0a60\u0a4f\3\2\2\2\u0a61"+
		"\u0a69\3\2\2\2\u0a62\u0a63\5\u044c\u0227\2\u0a63\u0a64\7\u01fd\2\2\u0a64"+
		"\u0a66\5\u0152\u00aa\2\u0a65\u0a67\5\u0162\u00b2\2\u0a66\u0a65\3\2\2\2"+
		"\u0a66\u0a67\3\2\2\2\u0a67\u0a69\3\2\2\2\u0a68\u0a48\3\2\2\2\u0a68\u0a62"+
		"\3\2\2\2\u0a69\u00e3\3\2\2\2\u0a6a\u0a6b\6s\'\2\u0a6b\u0a6c\7\"\2\2\u0a6c"+
		"\u0a6d\7\u019b\2\2\u0a6d\u0a6e\5\u0464\u0233\2\u0a6e\u0a6f\7\u019c\2\2"+
		"\u0a6f\u00e5\3\2\2\2\u0a70\u0a71\t\25\2\2\u0a71\u00e7\3\2\2\2\u0a72\u0a77"+
		"\7\21\2\2\u0a73\u0a74\6u(\2\u0a74\u0a78\5\u02ee\u0178\2\u0a75\u0a76\6"+
		"u)\2\u0a76\u0a78\5\u015c\u00af\2\u0a77\u0a73\3\2\2\2\u0a77\u0a75\3\2\2"+
		"\2\u0a78\u00e9\3\2\2\2\u0a79\u0a8b\7\30\2\2\u0a7a\u0a7b\5\u0448\u0225"+
		"\2\u0a7b\u0a7d\7\36\2\2\u0a7c\u0a7e\5\u018a\u00c6\2\u0a7d\u0a7c\3\2\2"+
		"\2\u0a7d\u0a7e\3\2\2\2\u0a7e\u0a8c\3\2\2\2\u0a7f\u0a89\5\u0462\u0232\2"+
		"\u0a80\u0a8a\7\f\2\2\u0a81\u0a82\7\u0258\2\2\u0a82\u0a84\5\u00ecw\2\u0a83"+
		"\u0a85\5\u0162\u00b2\2\u0a84\u0a83\3\2\2\2\u0a84\u0a85\3\2\2\2\u0a85\u0a87"+
		"\3\2\2\2\u0a86\u0a88\5\u0120\u0091\2\u0a87\u0a86\3\2\2\2\u0a87\u0a88\3"+
		"\2\2\2\u0a88\u0a8a\3\2\2\2\u0a89\u0a80\3\2\2\2\u0a89\u0a81\3\2\2\2\u0a8a"+
		"\u0a8c\3\2\2\2\u0a8b\u0a7a\3\2\2\2\u0a8b\u0a7f\3\2\2\2\u0a8c\u00eb\3\2"+
		"\2\2\u0a8d\u0a98\t\26\2\2\u0a8e\u0a95\5\u0462\u0232\2\u0a8f\u0a96\t\27"+
		"\2\2\u0a90\u0a91\t\30\2\2\u0a91\u0a92\7\u019b\2\2\u0a92\u0a93\5\u00fc"+
		"\177\2\u0a93\u0a94\7\u019c\2\2\u0a94\u0a96\3\2\2\2\u0a95\u0a8f\3\2\2\2"+
		"\u0a95\u0a90\3\2\2\2\u0a96\u0a98\3\2\2\2\u0a97\u0a8d\3\2\2\2\u0a97\u0a8e"+
		"\3\2\2\2\u0a98\u00ed\3\2\2\2\u0a99\u0a9b\7\u0210\2\2\u0a9a\u0a9c\5\u00f0"+
		"y\2\u0a9b\u0a9a\3\2\2\2\u0a9b\u0a9c\3\2\2\2\u0a9c\u0a9e\3\2\2\2\u0a9d"+
		"\u0a9f\7\u020a\2\2\u0a9e\u0a9d\3\2\2\2\u0a9e\u0a9f\3\2\2\2\u0a9f\u0aa1"+
		"\3\2\2\2\u0aa0\u0aa2\7\u0212\2\2\u0aa1\u0aa0\3\2\2\2\u0aa1\u0aa2\3\2\2"+
		"\2\u0aa2\u0aa3\3\2\2\2\u0aa3\u0aa5\5\u0448\u0225\2\u0aa4\u0aa6\5\u0406"+
		"\u0204\2\u0aa5\u0aa4\3\2\2\2\u0aa5\u0aa6\3\2\2\2\u0aa6\u0ab3\3\2\2\2\u0aa7"+
		"\u0aaa\5\u00f2z\2\u0aa8\u0aa9\6x*\2\u0aa9\u0aab\5\u00fe\u0080\2\u0aaa"+
		"\u0aa8\3\2\2\2\u0aaa\u0aab\3\2\2\2\u0aab\u0ab4\3\2\2\2\u0aac\u0aad\7\u026d"+
		"\2\2\u0aad\u0ab0\5\u03dc\u01ef\2\u0aae\u0aaf\6x+\2\u0aaf\u0ab1\5\u00fe"+
		"\u0080\2\u0ab0\u0aae\3\2\2\2\u0ab0\u0ab1\3\2\2\2\u0ab1\u0ab4\3\2\2\2\u0ab2"+
		"\u0ab4\5\u00f8}\2\u0ab3\u0aa7\3\2\2\2\u0ab3\u0aac\3\2\2\2\u0ab3\u0ab2"+
		"\3\2\2\2\u0ab4\u0ab6\3\2\2\2\u0ab5\u0ab7\5\u0100\u0081\2\u0ab6\u0ab5\3"+
		"\2\2\2\u0ab6\u0ab7\3\2\2\2\u0ab7\u00ef\3\2\2\2\u0ab8\u0ab9\t\31\2\2\u0ab9"+
		"\u00f1\3\2\2\2\u0aba\u0abc\7\u019b\2\2\u0abb\u0abd\5\u00f4{\2\u0abc\u0abb"+
		"\3\2\2\2\u0abc\u0abd\3\2\2\2\u0abd\u0abe\3\2\2\2\u0abe\u0ac0\7\u019c\2"+
		"\2\u0abf\u0aba\3\2\2\2\u0abf\u0ac0\3\2\2\2\u0ac0\u0ac1\3\2\2\2\u0ac1\u0ac2"+
		"\5\u00f6|\2\u0ac2\u00f3\3\2\2\2\u0ac3\u0ac8\5\u0412\u020a\2\u0ac4\u0ac5"+
		"\7\u0198\2\2\u0ac5\u0ac7\5\u0412\u020a\2\u0ac6\u0ac4\3\2\2\2\u0ac7\u0aca"+
		"\3\2\2\2\u0ac8\u0ac6\3\2\2\2\u0ac8\u0ac9\3\2\2\2\u0ac9\u00f5\3\2\2\2\u0aca"+
		"\u0ac8\3\2\2\2\u0acb\u0acc\t\32\2\2\u0acc\u0acd\5\u00fa~\2\u0acd\u00f7"+
		"\3\2\2\2\u0ace\u0ad6\5`\61\2\u0acf\u0ad1\7\u019b\2\2\u0ad0\u0ad2\5\u00f4"+
		"{\2\u0ad1\u0ad0\3\2\2\2\u0ad1\u0ad2\3\2\2\2\u0ad2\u0ad3\3\2\2\2\u0ad3"+
		"\u0ad4\7\u019c\2\2\u0ad4\u0ad6\5`\61\2\u0ad5\u0ace\3\2\2\2\u0ad5\u0acf"+
		"\3\2\2\2\u0ad6\u00f9\3\2\2\2\u0ad7\u0ad9\7\u019b\2\2\u0ad8\u0ada\5\u00fc"+
		"\177\2\u0ad9\u0ad8\3\2\2\2\u0ad9\u0ada\3\2\2\2\u0ada\u0adb\3\2\2\2\u0adb"+
		"\u0ae4\7\u019c\2\2\u0adc\u0add\7\u0198\2\2\u0add\u0adf\7\u019b\2\2\u0ade"+
		"\u0ae0\5\u00fc\177\2\u0adf\u0ade\3\2\2\2\u0adf\u0ae0\3\2\2\2\u0ae0\u0ae1"+
		"\3\2\2\2\u0ae1\u0ae3\7\u019c\2\2\u0ae2\u0adc\3\2\2\2\u0ae3\u0ae6\3\2\2"+
		"\2\u0ae4\u0ae2\3\2\2\2\u0ae4\u0ae5\3\2\2\2\u0ae5\u00fb\3\2\2\2\u0ae6\u0ae4"+
		"\3\2\2\2\u0ae7\u0aea\5\u029e\u0150\2\u0ae8\u0aea\7\u01e0\2\2\u0ae9\u0ae7"+
		"\3\2\2\2\u0ae9\u0ae8\3\2\2\2\u0aea\u0af2\3\2\2\2\u0aeb\u0aee\7\u0198\2"+
		"\2\u0aec\u0aef\5\u029e\u0150\2\u0aed\u0aef\7\u01e0\2\2\u0aee\u0aec\3\2"+
		"\2\2\u0aee\u0aed\3\2\2\2\u0aef\u0af1\3\2\2\2\u0af0\u0aeb\3\2\2\2\u0af1"+
		"\u0af4\3\2\2\2\u0af2\u0af0\3\2\2\2\u0af2\u0af3\3\2\2\2\u0af3\u00fd\3\2"+
		"\2\2\u0af4\u0af2\3\2\2\2\u0af5\u0af6\7\u01b1\2\2\u0af6\u0af8\5\u0462\u0232"+
		"\2\u0af7\u0af9\5\u040e\u0208\2\u0af8\u0af7\3\2\2\2\u0af8\u0af9\3\2\2\2"+
		"\u0af9\u00ff\3\2\2\2\u0afa\u0afb\7\u0245\2\2\u0afb\u0afc\7~\2\2\u0afc"+
		"\u0afd\7\u021b\2\2\u0afd\u0afe\7\u0299\2\2\u0afe\u0aff\5\u03dc\u01ef\2"+
		"\u0aff\u0101\3\2\2\2\u0b00\u0b01\7\u0224\2\2\u0b01\u0b03\5\u0104\u0083"+
		"\2\u0b02\u0b04\t\33\2\2\u0b03\u0b02\3\2\2\2\u0b03\u0b04\3\2\2\2\u0b04"+
		"\u0b06\3\2\2\2\u0b05\u0b07\7\u00b6\2\2\u0b06\u0b05\3\2\2\2\u0b06\u0b07"+
		"\3\2\2\2\u0b07\u0b08\3\2\2\2\u0b08\u0b09\7\u020c\2\2\u0b09\u0b0b\5\u0482"+
		"\u0242\2\u0b0a\u0b0c\t\n\2\2\u0b0b\u0b0a\3\2\2\2\u0b0b\u0b0c\3\2\2\2\u0b0c"+
		"\u0b0d\3\2\2\2\u0b0d\u0b0e\7\u0212\2\2\u0b0e\u0b0f\7\u0289\2\2\u0b0f\u0b11"+
		"\5\u0448\u0225\2\u0b10\u0b12\5\u0406\u0204\2\u0b11\u0b10\3\2\2\2\u0b11"+
		"\u0b12\3\2\2\2\u0b12\u0b14\3\2\2\2\u0b13\u0b15\5\u03e0\u01f1\2\u0b14\u0b13"+
		"\3\2\2\2\u0b14\u0b15\3\2\2\2\u0b15\u0b17\3\2\2\2\u0b16\u0b18\5\u0106\u0084"+
		"\2\u0b17\u0b16\3\2\2\2\u0b17\u0b18\3\2\2\2\u0b18\u0b1a\3\2\2\2\u0b19\u0b1b"+
		"\5\u03e2\u01f2\2\u0b1a\u0b19\3\2\2\2\u0b1a\u0b1b\3\2\2\2\u0b1b\u0b1d\3"+
		"\2\2\2\u0b1c\u0b1e\5\u03e6\u01f4\2\u0b1d\u0b1c\3\2\2\2\u0b1d\u0b1e\3\2"+
		"\2\2\u0b1e\u0b1f\3\2\2\2\u0b1f\u0b20\5\u0108\u0085\2\u0b20\u0103\3\2\2"+
		"\2\u0b21\u0b22\t\34\2\2\u0b22\u0105\3\2\2\2\u0b23\u0b24\7\u012c\2\2\u0b24"+
		"\u0b25\7\u00a1\2\2\u0b25\u0b26\7\u01be\2\2\u0b26\u0b27\5\u047e\u0240\2"+
		"\u0b27\u0107\3\2\2\2\u0b28\u0b29\7\u020a\2\2\u0b29\u0b2a\7\u017e\2\2\u0b2a"+
		"\u0b2c\t\35\2\2\u0b2b\u0b28\3\2\2\2\u0b2b\u0b2c\3\2\2\2\u0b2c\u0b2e\3"+
		"\2\2\2\u0b2d\u0b2f\5\u010a\u0086\2\u0b2e\u0b2d\3\2\2\2\u0b2e\u0b2f\3\2"+
		"\2\2\u0b2f\u0b32\3\2\2\2\u0b30\u0b31\7\u026d\2\2\u0b31\u0b33\5\u03dc\u01ef"+
		"\2\u0b32\u0b30\3\2\2\2\u0b32\u0b33\3\2\2\2\u0b33\u0109\3\2\2\2\u0b34\u0b36"+
		"\7\u019b\2\2\u0b35\u0b37\5\u010c\u0087\2\u0b36\u0b35\3\2\2\2\u0b36\u0b37"+
		"\3\2\2\2\u0b37\u0b38\3\2\2\2\u0b38\u0b39\7\u019c\2\2\u0b39\u010b\3\2\2"+
		"\2\u0b3a\u0b3d\5\u0410\u0209\2\u0b3b\u0b3d\5\u02e0\u0171\2\u0b3c\u0b3a"+
		"\3\2\2\2\u0b3c\u0b3b\3\2\2\2\u0b3d\u0b45\3\2\2\2\u0b3e\u0b41\7\u0198\2"+
		"\2\u0b3f\u0b42\5\u0410\u0209\2\u0b40\u0b42\5\u02e0\u0171\2\u0b41\u0b3f"+
		"\3\2\2\2\u0b41\u0b40\3\2\2\2\u0b42\u0b44\3\2\2\2\u0b43\u0b3e\3\2\2\2\u0b44"+
		"\u0b47\3\2\2\2\u0b45\u0b43\3\2\2\2\u0b45\u0b46\3\2\2\2\u0b46\u010d\3\2"+
		"\2\2\u0b47\u0b45\3\2\2\2\u0b48\u0b4a\7\u0260\2\2\u0b49\u0b4b\t\36\2\2"+
		"\u0b4a\u0b49\3\2\2\2\u0b4a\u0b4b\3\2\2\2\u0b4b\u0b4d\3\2\2\2\u0b4c\u0b4e"+
		"\7\u0212\2\2\u0b4d\u0b4c\3\2\2\2\u0b4d\u0b4e\3\2\2\2\u0b4e\u0b4f\3\2\2"+
		"\2\u0b4f\u0b51\5\u0448\u0225\2\u0b50\u0b52\5\u0406\u0204\2\u0b51\u0b50"+
		"\3\2\2\2\u0b51\u0b52\3\2\2\2\u0b52\u0b57\3\2\2\2\u0b53\u0b58\5\u00f2z"+
		"\2\u0b54\u0b55\7\u026d\2\2\u0b55\u0b58\5\u03dc\u01ef\2\u0b56\u0b58\5\u00f8"+
		"}\2\u0b57\u0b53\3\2\2\2\u0b57\u0b54\3\2\2\2\u0b57\u0b56\3\2\2\2\u0b58"+
		"\u010f\3\2\2\2\u0b59\u0b5d\5\u0114\u008b\2\u0b5a\u0b5d\5\u0118\u008d\2"+
		"\u0b5b\u0b5d\5\u0112\u008a\2\u0b5c\u0b59\3\2\2\2\u0b5c\u0b5a\3\2\2\2\u0b5c"+
		"\u0b5b\3\2\2\2\u0b5d\u0111\3\2\2\2\u0b5e\u0b5f\7\u019b\2\2\u0b5f\u0b60"+
		"\5\u0112\u008a\2\u0b60\u0b61\7\u019c\2\2\u0b61\u0b66\3\2\2\2\u0b62\u0b63"+
		"\5\u0114\u008b\2\u0b63\u0b64\5\u0128\u0095\2\u0b64\u0b66\3\2\2\2\u0b65"+
		"\u0b5e\3\2\2\2\u0b65\u0b62\3\2\2\2\u0b66\u0113\3\2\2\2\u0b67\u0b68\6\u008b"+
		",\2\u0b68\u0b6a\5\u0144\u00a3\2\u0b69\u0b67\3\2\2\2\u0b69\u0b6a\3\2\2"+
		"\2\u0b6a\u0b7a\3\2\2\2\u0b6b\u0b6d\5\u0116\u008c\2\u0b6c\u0b6e\5\u014c"+
		"\u00a7\2\u0b6d\u0b6c\3\2\2\2\u0b6d\u0b6e\3\2\2\2\u0b6e\u0b70\3\2\2\2\u0b6f"+
		"\u0b71\5\u0120\u0091\2\u0b70\u0b6f\3\2\2\2\u0b70\u0b71\3\2\2\2\u0b71\u0b7b"+
		"\3\2\2\2\u0b72\u0b78\5\u0118\u008d\2\u0b73\u0b75\5\u014c\u00a7\2\u0b74"+
		"\u0b76\5\u0120\u0091\2\u0b75\u0b74\3\2\2\2\u0b75\u0b76\3\2\2\2\u0b76\u0b79"+
		"\3\2\2\2\u0b77\u0b79\5\u0120\u0091\2\u0b78\u0b73\3\2\2\2\u0b78\u0b77\3"+
		"\2\2\2\u0b79\u0b7b\3\2\2\2\u0b7a\u0b6b\3\2\2\2\u0b7a\u0b72\3\2\2\2\u0b7b"+
		"\u0b7e\3\2\2\2\u0b7c\u0b7d\6\u008b-\2\u0b7d\u0b7f\5\u012a\u0096\2\u0b7e"+
		"\u0b7c\3\2\2\2\u0b7e\u0b7f\3\2\2\2\u0b7f\u0b81\3\2\2\2\u0b80\u0b82\5\u0156"+
		"\u00ac\2\u0b81\u0b80\3\2\2\2\u0b81\u0b82\3\2\2\2\u0b82\u0b8a\3\2\2\2\u0b83"+
		"\u0b84\6\u008b.\2\u0b84\u0b85\5\u0144\u00a3\2\u0b85\u0b87\5\u0118\u008d"+
		"\2\u0b86\u0b88\5\u0156\u00ac\2\u0b87\u0b86\3\2\2\2\u0b87\u0b88\3\2\2\2"+
		"\u0b88\u0b8a\3\2\2\2\u0b89\u0b69\3\2\2\2\u0b89\u0b83\3\2\2\2\u0b8a\u0115"+
		"\3\2\2\2\u0b8b\u0b8c\b\u008c\1\2\u0b8c\u0b97\5\u011a\u008e\2\u0b8d\u0b8e"+
		"\5\u0118\u008d\2\u0b8e\u0b90\7\u0295\2\2\u0b8f\u0b91\5\u0188\u00c5\2\u0b90"+
		"\u0b8f\3\2\2\2\u0b90\u0b91\3\2\2\2\u0b91\u0b94\3\2\2\2\u0b92\u0b95\5\u011a"+
		"\u008e\2\u0b93\u0b95\5\u0118\u008d\2\u0b94\u0b92\3\2\2\2\u0b94\u0b93\3"+
		"\2\2\2\u0b95\u0b97\3\2\2\2\u0b96\u0b8b\3\2\2\2\u0b96\u0b8d\3\2\2\2\u0b97"+
		"\u0ba3\3\2\2\2\u0b98\u0b99\f\4\2\2\u0b99\u0b9b\7\u0295\2\2\u0b9a\u0b9c"+
		"\5\u0188\u00c5\2\u0b9b\u0b9a\3\2\2\2\u0b9b\u0b9c\3\2\2\2\u0b9c\u0b9f\3"+
		"\2\2\2\u0b9d\u0ba0\5\u011a\u008e\2\u0b9e\u0ba0\5\u0118\u008d\2\u0b9f\u0b9d"+
		"\3\2\2\2\u0b9f\u0b9e\3\2\2\2\u0ba0\u0ba2\3\2\2\2\u0ba1\u0b98\3\2\2\2\u0ba2"+
		"\u0ba5\3\2\2\2\u0ba3\u0ba1\3\2\2\2\u0ba3\u0ba4\3\2\2\2\u0ba4\u0117\3\2"+
		"\2\2\u0ba5\u0ba3\3\2\2\2\u0ba6\u0ba9\7\u019b\2\2\u0ba7\u0baa\5\u0118\u008d"+
		"\2\u0ba8\u0baa\5\u0114\u008b\2\u0ba9\u0ba7\3\2\2\2\u0ba9\u0ba8\3\2\2\2"+
		"\u0baa\u0bab\3\2\2\2\u0bab\u0bac\7\u019c\2\2\u0bac\u0119\3\2\2\2\u0bad"+
		"\u0bb1\7\u0268\2\2\u0bae\u0bb0\5\u0154\u00ab\2\u0baf\u0bae\3\2\2\2\u0bb0"+
		"\u0bb3\3\2\2\2\u0bb1\u0baf\3\2\2\2\u0bb1\u0bb2\3\2\2\2\u0bb2\u0bb4\3\2"+
		"\2\2\u0bb3\u0bb1\3\2\2\2\u0bb4\u0bb6\5\u015c\u00af\2\u0bb5\u0bb7\5\u0128"+
		"\u0095\2\u0bb6\u0bb5\3\2\2\2\u0bb6\u0bb7\3\2\2\2\u0bb7\u0bb9\3\2\2\2\u0bb8"+
		"\u0bba\5\u0150\u00a9\2\u0bb9\u0bb8\3\2\2\2\u0bb9\u0bba\3\2\2\2\u0bba\u0bbc"+
		"\3\2\2\2\u0bbb\u0bbd\5\u0162\u00b2\2\u0bbc\u0bbb\3\2\2\2\u0bbc\u0bbd\3"+
		"\2\2\2\u0bbd\u0bbf\3\2\2\2\u0bbe\u0bc0\5\u0148\u00a5\2\u0bbf\u0bbe\3\2"+
		"\2\2\u0bbf\u0bc0\3\2\2\2\u0bc0\u0bc2\3\2\2\2\u0bc1\u0bc3\5\u012c\u0097"+
		"\2\u0bc2\u0bc1\3\2\2\2\u0bc2\u0bc3\3\2\2\2\u0bc3\u0bc6\3\2\2\2\u0bc4\u0bc5"+
		"\6\u008e\60\2\u0bc5\u0bc7\5\u012e\u0098\2\u0bc6\u0bc4\3\2\2\2\u0bc6\u0bc7"+
		"\3\2\2\2\u0bc7\u011b\3\2\2\2\u0bc8\u0bc9\5\u0118\u008d\2\u0bc9\u011d\3"+
		"\2\2\2\u0bca\u0bcb\t\37\2\2\u0bcb\u011f\3\2\2\2\u0bcc\u0bcd\7\u0221\2"+
		"\2\u0bcd\u0bce\5\u0124\u0093\2\u0bce\u0121\3\2\2\2\u0bcf\u0bd0\7\u0221"+
		"\2\2\u0bd0\u0bd1\5\u0126\u0094\2\u0bd1\u0123\3\2\2\2\u0bd2\u0bd5\5\u0126"+
		"\u0094\2\u0bd3\u0bd4\t \2\2\u0bd4\u0bd6\5\u0126\u0094\2\u0bd5\u0bd3\3"+
		"\2\2\2\u0bd5\u0bd6\3\2\2\2\u0bd6\u0125\3\2\2\2\u0bd7\u0bda\5\u0462\u0232"+
		"\2\u0bd8\u0bda\t!\2\2\u0bd9\u0bd7\3\2\2\2\u0bd9\u0bd8\3\2\2\2\u0bda\u0127"+
		"\3\2\2\2\u0bdb\u0bf7\7\u0212\2\2\u0bdc\u0bdd\7\u024f\2\2\u0bdd\u0bdf\5"+
		"\u047c\u023f\2\u0bde\u0be0\5\u03e0\u01f1\2\u0bdf\u0bde\3\2\2\2\u0bdf\u0be0"+
		"\3\2\2\2\u0be0\u0be2\3\2\2\2\u0be1\u0be3\5\u03e2\u01f2\2\u0be2\u0be1\3"+
		"\2\2\2\u0be2\u0be3\3\2\2\2\u0be3\u0be5\3\2\2\2\u0be4\u0be6\5\u03e6\u01f4"+
		"\2\u0be5\u0be4\3\2\2\2\u0be5\u0be6\3\2\2\2\u0be6\u0bf8\3\2\2\2\u0be7\u0be8"+
		"\7}\2\2\u0be8\u0bf8\5\u047c\u023f\2\u0be9\u0bec\5\u0496\u024c\2\u0bea"+
		"\u0bec\5\u02e0\u0171\2\u0beb\u0be9\3\2\2\2\u0beb\u0bea\3\2\2\2\u0bec\u0bf4"+
		"\3\2\2\2\u0bed\u0bf0\7\u0198\2\2\u0bee\u0bf1\5\u0496\u024c\2\u0bef\u0bf1"+
		"\5\u02e0\u0171\2\u0bf0\u0bee\3\2\2\2\u0bf0\u0bef\3\2\2\2\u0bf1\u0bf3\3"+
		"\2\2\2\u0bf2\u0bed\3\2\2\2\u0bf3\u0bf6\3\2\2\2\u0bf4\u0bf2\3\2\2\2\u0bf4"+
		"\u0bf5\3\2\2\2\u0bf5\u0bf8\3\2\2\2\u0bf6\u0bf4\3\2\2\2\u0bf7\u0bdc\3\2"+
		"\2\2\u0bf7\u0be7\3\2\2\2\u0bf7\u0beb\3\2\2\2\u0bf8\u0129\3\2\2\2\u0bf9"+
		"\u0bfa\7\u0254\2\2\u0bfa\u0bfb\7\u01af\2\2\u0bfb\u0c01\7\u019b\2\2\u0bfc"+
		"\u0bff\7\u017e\2\2\u0bfd\u0bfe\7\u0198\2\2\u0bfe\u0c00\7\u017e\2\2\u0bff"+
		"\u0bfd\3\2\2\2\u0bff\u0c00\3\2\2\2\u0c00\u0c02\3\2\2\2\u0c01\u0bfc\3\2"+
		"\2\2\u0c01\u0c02\3\2\2\2\u0c02\u0c03\3\2\2\2\u0c03\u0c04\7\u019c\2\2\u0c04"+
		"\u012b\3\2\2\2\u0c05\u0c06\7\u0204\2\2\u0c06\u0c07\5\u029e\u0150\2\u0c07"+
		"\u012d\3\2\2\2\u0c08\u0c09\7\u02db\2\2\u0c09\u0c0e\5\u0130\u0099\2\u0c0a"+
		"\u0c0b\7\u0198\2\2\u0c0b\u0c0d\5\u0130\u0099\2\u0c0c\u0c0a\3\2\2\2\u0c0d"+
		"\u0c10\3\2\2\2\u0c0e\u0c0c\3\2\2\2\u0c0e\u0c0f\3\2\2\2\u0c0f\u012f\3\2"+
		"\2\2\u0c10\u0c0e\3\2\2\2\u0c11\u0c12\5\u045e\u0230\2\u0c12\u0c13\7\u01b1"+
		"\2\2\u0c13\u0c14\5\u0132\u009a\2\u0c14\u0131\3\2\2\2\u0c15\u0c16\7\u019b"+
		"\2\2\u0c16\u0c17\5\u0134\u009b\2\u0c17\u0c18\7\u019c\2\2\u0c18\u0133\3"+
		"\2\2\2\u0c19\u0c1b\5\u045e\u0230\2\u0c1a\u0c19\3\2\2\2\u0c1a\u0c1b\3\2"+
		"\2\2\u0c1b\u0c1f\3\2\2\2\u0c1c\u0c1d\7\"\2\2\u0c1d\u0c1e\7\u01be\2\2\u0c1e"+
		"\u0c20\5\u0300\u0181\2\u0c1f\u0c1c\3\2\2\2\u0c1f\u0c20\3\2\2\2\u0c20\u0c22"+
		"\3\2\2\2\u0c21\u0c23\5\u014c\u00a7\2\u0c22\u0c21\3\2\2\2\u0c22\u0c23\3"+
		"\2\2\2\u0c23\u0c25\3\2\2\2\u0c24\u0c26\5\u0136\u009c\2\u0c25\u0c24\3\2"+
		"\2\2\u0c25\u0c26\3\2\2\2\u0c26\u0135\3\2\2\2\u0c27\u0c28\5\u0138\u009d"+
		"\2\u0c28\u0c2a\5\u013a\u009e\2\u0c29\u0c2b\5\u0142\u00a2\2\u0c2a\u0c29"+
		"\3\2\2\2\u0c2a\u0c2b\3\2\2\2\u0c2b\u0137\3\2\2\2\u0c2c\u0c2d\t\"\2\2\u0c2d"+
		"\u0139\3\2\2\2\u0c2e\u0c31\5\u013c\u009f\2\u0c2f\u0c31\5\u013e\u00a0\2"+
		"\u0c30\u0c2e\3\2\2\2\u0c30\u0c2f\3\2\2\2\u0c31\u013b\3\2\2\2\u0c32\u0c33"+
		"\7\u02da\2\2\u0c33\u0c41\7\u02d5\2\2\u0c34\u0c35\5\u0472\u023a\2\u0c35"+
		"\u0c36\7\u02d5\2\2\u0c36\u0c41\3\2\2\2\u0c37\u0c38\7\u01a6\2\2\u0c38\u0c41"+
		"\7\u02d5\2\2\u0c39\u0c3a\7\u0211\2\2\u0c3a\u0c3b\5\u029e\u0150\2\u0c3b"+
		"\u0c3c\5\u02f6\u017c\2\u0c3c\u0c3d\7\u02d5\2\2\u0c3d\u0c41\3\2\2\2\u0c3e"+
		"\u0c3f\7m\2\2\u0c3f\u0c41\7\u012f\2\2\u0c40\u0c32\3\2\2\2\u0c40\u0c34"+
		"\3\2\2\2\u0c40\u0c37\3\2\2\2\u0c40\u0c39\3\2\2\2\u0c40\u0c3e\3\2\2\2\u0c41"+
		"\u013d\3\2\2\2\u0c42\u0c43\7\u01b5\2\2\u0c43\u0c44\5\u0140\u00a1\2\u0c44"+
		"\u0c45\7\u01b0\2\2\u0c45\u0c46\5\u0140\u00a1\2\u0c46\u013f\3\2\2\2\u0c47"+
		"\u0c55\5\u013c\u009f\2\u0c48\u0c49\7\u02da\2\2\u0c49\u0c55\7\u02ca\2\2"+
		"\u0c4a\u0c4b\5\u0472\u023a\2\u0c4b\u0c4c\7\u02ca\2\2\u0c4c\u0c55\3\2\2"+
		"\2\u0c4d\u0c4e\7\u01a6\2\2\u0c4e\u0c55\7\u02ca\2\2\u0c4f\u0c50\7\u0211"+
		"\2\2\u0c50\u0c51\5\u029e\u0150\2\u0c51\u0c52\5\u02f6\u017c\2\u0c52\u0c53"+
		"\7\u02ca\2\2\u0c53\u0c55\3\2\2\2\u0c54\u0c47\3\2\2\2\u0c54\u0c48\3\2\2"+
		"\2\u0c54\u0c4a\3\2\2\2\u0c54\u0c4d\3\2\2\2\u0c54\u0c4f\3\2\2\2\u0c55\u0141"+
		"\3\2\2\2\u0c56\u0c5d\7\u02c8\2\2\u0c57\u0c58\7m\2\2\u0c58\u0c5e\7\u012f"+
		"\2\2\u0c59\u0c5e\7\u0202\2\2\u0c5a\u0c5e\7\u02d9\2\2\u0c5b\u0c5c\7\35"+
		"\2\2\u0c5c\u0c5e\7\u02d2\2\2\u0c5d\u0c57\3\2\2\2\u0c5d\u0c59\3\2\2\2\u0c5d"+
		"\u0c5a\3\2\2\2\u0c5d\u0c5b\3\2\2\2\u0c5e\u0143\3\2\2\2\u0c5f\u0c61\7\u02ac"+
		"\2\2\u0c60\u0c62\7\u02b9\2\2\u0c61\u0c60\3\2\2\2\u0c61\u0c62\3\2\2\2\u0c62"+
		"\u0c63\3\2\2\2\u0c63\u0c68\5\u0146\u00a4\2\u0c64\u0c65\7\u0198\2\2\u0c65"+
		"\u0c67\5\u0146\u00a4\2\u0c66\u0c64\3\2\2\2\u0c67\u0c6a\3\2\2\2\u0c68\u0c66"+
		"\3\2\2\2\u0c68\u0c69\3\2\2\2\u0c69\u0145\3\2\2\2\u0c6a\u0c68\3\2\2\2\u0c6b"+
		"\u0c6d\5\u0462\u0232\2\u0c6c\u0c6e\5\u040e\u0208\2\u0c6d\u0c6c\3\2\2\2"+
		"\u0c6d\u0c6e\3\2\2\2\u0c6e\u0c6f\3\2\2\2\u0c6f\u0c70\7\u01b1\2\2\u0c70"+
		"\u0c71\5\u011c\u008f\2\u0c71\u0147\3\2\2\2\u0c72\u0c73\7\u0202\2\2\u0c73"+
		"\u0c74\7\u01be\2\2\u0c74\u0c76\5\u0300\u0181\2\u0c75\u0c77\5\u014a\u00a6"+
		"\2\u0c76\u0c75\3\2\2\2\u0c76\u0c77\3\2\2\2\u0c77\u0149\3\2\2\2\u0c78\u0c79"+
		"\7\u02ac\2\2\u0c79\u0c7e\7\u0129\2\2\u0c7a\u0c7b\6\u00a6\61\2\u0c7b\u0c7c"+
		"\7\u02ac\2\2\u0c7c\u0c7e\7l\2\2\u0c7d\u0c78\3\2\2\2\u0c7d\u0c7a\3\2\2"+
		"\2\u0c7e\u014b\3\2\2\2\u0c7f\u0c80\7\u024c\2\2\u0c80\u0c81\7\u01be\2\2"+
		"\u0c81\u0c82\5\u0300\u0181\2\u0c82\u014d\3\2\2\2\u0c83\u0c84\t#\2\2\u0c84"+
		"\u014f\3\2\2\2\u0c85\u0c88\7\u01fd\2\2\u0c86\u0c89\7\u01ea\2\2\u0c87\u0c89"+
		"\5\u0152\u00aa\2\u0c88\u0c86\3\2\2\2\u0c88\u0c87\3\2\2\2\u0c89\u0151\3"+
		"\2\2\2\u0c8a\u0c8f\5\u0164\u00b3\2\u0c8b\u0c8c\7\u0198\2\2\u0c8c\u0c8e"+
		"\5\u0164\u00b3\2\u0c8d\u0c8b\3\2\2\2\u0c8e\u0c91\3\2\2\2\u0c8f\u0c8d\3"+
		"\2\2\2\u0c8f\u0c90\3\2\2\2\u0c90\u0153\3\2\2\2\u0c91\u0c8f\3\2\2\2\u0c92"+
		"\u0c9b\5\u011e\u0090\2\u0c93\u0c9b\7\u0142\2\2\u0c94\u0c95\6\u00ab\62"+
		"\2\u0c95\u0c9b\7\u0140\2\2\u0c96\u0c97\6\u00ab\63\2\u0c97\u0c98\7\u00d3"+
		"\2\2\u0c98\u0c99\7\u0181\2\2\u0c99\u0c9b\5\u0470\u0239\2\u0c9a\u0c92\3"+
		"\2\2\2\u0c9a\u0c93\3\2\2\2\u0c9a\u0c94\3\2\2\2\u0c9a\u0c96\3\2\2\2\u0c9b"+
		"\u0155\3\2\2\2\u0c9c\u0c9d\7\u01fc\2\2\u0c9d\u0ca1\5\u0158\u00ad\2\u0c9e"+
		"\u0c9f\6\u00ac\64\2\u0c9f\u0ca0\7\u02bc\2\2\u0ca0\u0ca2\5\u044c\u0227"+
		"\2\u0ca1\u0c9e\3\2\2\2\u0ca1\u0ca2\3\2\2\2\u0ca2\u0ca5\3\2\2\2\u0ca3\u0ca4"+
		"\6\u00ac\65\2\u0ca4\u0ca6\5\u015a\u00ae\2\u0ca5\u0ca3\3\2\2\2\u0ca5\u0ca6"+
		"\3\2\2\2\u0ca6\u0cac\3\2\2\2\u0ca7\u0ca8\7\u0226\2\2\u0ca8\u0ca9\7\u0214"+
		"\2\2\u0ca9\u0caa\7\u0138\2\2\u0caa\u0cac\7\u00e0\2\2\u0cab\u0c9c\3\2\2"+
		"\2\u0cab\u0ca7\3\2\2\2\u0cac\u0157\3\2\2\2\u0cad\u0cb1\7\u0299\2\2\u0cae"+
		"\u0caf\6\u00ad\66\2\u0caf\u0cb1\7\u0138\2\2\u0cb0\u0cad\3\2\2\2\u0cb0"+
		"\u0cae\3\2\2\2\u0cb1\u0159\3\2\2\2\u0cb2\u0cb3\7\u02bd\2\2\u0cb3\u0cb6"+
		"\7\u02be\2\2\u0cb4\u0cb6\7\u02bf\2\2\u0cb5\u0cb2\3\2\2\2\u0cb5\u0cb4\3"+
		"\2\2\2\u0cb6\u015b\3\2\2\2\u0cb7\u0cba\5\u015e\u00b0\2\u0cb8\u0cba\7\u018b"+
		"\2\2\u0cb9\u0cb7\3\2\2\2\u0cb9\u0cb8\3\2\2\2\u0cba\u0cbf\3\2\2\2\u0cbb"+
		"\u0cbc\7\u0198\2\2\u0cbc\u0cbe\5\u015e\u00b0\2\u0cbd\u0cbb\3\2\2\2\u0cbe"+
		"\u0cc1\3\2\2\2\u0cbf\u0cbd\3\2\2\2\u0cbf\u0cc0\3\2\2\2\u0cc0\u015d\3\2"+
		"\2\2\u0cc1\u0cbf\3\2\2\2\u0cc2\u0cc8\5\u0418\u020d\2\u0cc3\u0cc5\5\u029e"+
		"\u0150\2\u0cc4\u0cc6\5\u0160\u00b1\2\u0cc5\u0cc4\3\2\2\2\u0cc5\u0cc6\3"+
		"\2\2\2\u0cc6\u0cc8\3\2\2\2\u0cc7\u0cc2\3\2\2\2\u0cc7\u0cc3\3\2\2\2\u0cc8"+
		"\u015f\3\2\2\2\u0cc9\u0ccb\7\u01b1\2\2\u0cca\u0cc9\3\2\2\2\u0cca\u0ccb"+
		"\3\2\2\2\u0ccb\u0cce\3\2\2\2\u0ccc\u0ccf\5\u0462\u0232\2\u0ccd\u0ccf\5"+
		"\u047c\u023f\2\u0cce\u0ccc\3\2\2\2\u0cce\u0ccd\3\2\2\2\u0ccf\u0161\3\2"+
		"\2\2\u0cd0\u0cd1\7\u02aa\2\2\u0cd1\u0cd2\5\u029e\u0150\2\u0cd2\u0163\3"+
		"\2\2\2\u0cd3\u0cde\5\u0170\u00b9\2\u0cd4\u0cd8\7\u019d\2\2\u0cd5\u0cd6"+
		"\6\u00b3\67\2\u0cd6\u0cd9\5\u0462\u0232\2\u0cd7\u0cd9\7\u02fc\2\2\u0cd8"+
		"\u0cd5\3\2\2\2\u0cd8\u0cd7\3\2\2\2\u0cd9\u0cda\3\2\2\2\u0cda\u0cdb\5\u0166"+
		"\u00b4\2\u0cdb\u0cdc\7\u019e\2\2\u0cdc\u0cde\3\2\2\2\u0cdd\u0cd3\3\2\2"+
		"\2\u0cdd\u0cd4\3\2\2\2\u0cde\u0ce2\3\2\2\2\u0cdf\u0ce1\5\u0168\u00b5\2"+
		"\u0ce0\u0cdf\3\2\2\2\u0ce1\u0ce4\3\2\2\2\u0ce2\u0ce0\3\2\2\2\u0ce2\u0ce3"+
		"\3\2\2\2\u0ce3\u0165\3\2\2\2\u0ce4\u0ce2\3\2\2\2\u0ce5\u0ce9\5\u0170\u00b9"+
		"\2\u0ce6\u0ce8\5\u0168\u00b5\2\u0ce7\u0ce6\3\2\2\2\u0ce8\u0ceb\3\2\2\2"+
		"\u0ce9\u0ce7\3\2\2\2\u0ce9\u0cea\3\2\2\2\u0cea\u0167\3\2\2\2\u0ceb\u0ce9"+
		"\3\2\2\2\u0cec\u0ced\5\u016c\u00b7\2\u0ced\u0cf2\5\u0164\u00b3\2\u0cee"+
		"\u0cef\7\u0245\2\2\u0cef\u0cf3\5\u029e\u0150\2\u0cf0\u0cf1\7\u029c\2\2"+
		"\u0cf1\u0cf3\5\u0466\u0234\2\u0cf2\u0cee\3\2\2\2\u0cf2\u0cf0\3\2\2\2\u0cf2"+
		"\u0cf3\3\2\2\2\u0cf3\u0d00\3\2\2\2\u0cf4\u0cf5\5\u016e\u00b8\2\u0cf5\u0cfa"+
		"\5\u0164\u00b3\2\u0cf6\u0cf7\7\u0245\2\2\u0cf7\u0cfb\5\u029e\u0150\2\u0cf8"+
		"\u0cf9\7\u029c\2\2\u0cf9\u0cfb\5\u0466\u0234\2\u0cfa\u0cf6\3\2\2\2\u0cfa"+
		"\u0cf8\3\2\2\2\u0cfb\u0d00\3\2\2\2\u0cfc\u0cfd\5\u016a\u00b6\2\u0cfd\u0cfe"+
		"\5\u0170\u00b9\2\u0cfe\u0d00\3\2\2\2\u0cff\u0cec\3\2\2\2\u0cff\u0cf4\3"+
		"\2\2\2\u0cff\u0cfc\3\2\2\2\u0d00\u0169\3\2\2\2\u0d01\u0d03\7\u023b\2\2"+
		"\u0d02\u0d04\7\u020d\2\2\u0d03\u0d02\3\2\2\2\u0d03\u0d04\3\2\2\2\u0d04"+
		"\u0d05\3\2\2\2\u0d05\u0d0d\7\u0219\2\2\u0d06\u0d07\7\u023b\2\2\u0d07\u0d09"+
		"\t$\2\2\u0d08\u0d0a\7\u024e\2\2\u0d09\u0d08\3\2\2\2\u0d09\u0d0a\3\2\2"+
		"\2\u0d0a\u0d0b\3\2\2\2\u0d0b\u0d0d\7\u0219\2\2\u0d0c\u0d01\3\2\2\2\u0d0c"+
		"\u0d06\3\2\2\2\u0d0d\u016b\3\2\2\2\u0d0e\u0d10\t%\2\2\u0d0f\u0d0e\3\2"+
		"\2\2\u0d0f\u0d10\3\2\2\2\u0d10\u0d11\3\2\2\2\u0d11\u0d14\7\u0219\2\2\u0d12"+
		"\u0d14\7\u0282\2\2\u0d13\u0d0f\3\2\2\2\u0d13\u0d12\3\2\2\2\u0d14\u016d"+
		"\3\2\2\2\u0d15\u0d17\t$\2\2\u0d16\u0d18\7\u024e\2\2\u0d17\u0d16\3\2\2"+
		"\2\u0d17\u0d18\3\2\2\2\u0d18\u0d19\3\2\2\2\u0d19\u0d1a\7\u0219\2\2\u0d1a"+
		"\u016f\3\2\2\2\u0d1b\u0d22\5\u0172\u00ba\2\u0d1c\u0d22\5\u0174\u00bb\2"+
		"\u0d1d\u0d22\5\u0176\u00bc\2\u0d1e\u0d22\5\u0178\u00bd\2\u0d1f\u0d20\6"+
		"\u00b98\2\u0d20\u0d22\5\u017a\u00be\2\u0d21\u0d1b\3\2\2\2\u0d21\u0d1c"+
		"\3\2\2\2\u0d21\u0d1d\3\2\2\2\u0d21\u0d1e\3\2\2\2\u0d21\u0d1f\3\2\2\2\u0d22"+
		"\u0171\3\2\2\2\u0d23\u0d25\5\u0448\u0225\2\u0d24\u0d26\5\u0406\u0204\2"+
		"\u0d25\u0d24\3\2\2\2\u0d25\u0d26\3\2\2\2\u0d26\u0d28\3\2\2\2\u0d27\u0d29"+
		"\5\u018a\u00c6\2\u0d28\u0d27\3\2\2\2\u0d28\u0d29\3\2\2\2\u0d29\u0d2b\3"+
		"\2\2\2\u0d2a\u0d2c\5\u018c\u00c7\2\u0d2b\u0d2a\3\2\2\2\u0d2b\u0d2c\3\2"+
		"\2\2\u0d2c\u0173\3\2\2\2\u0d2d\u0d30\7\u019b\2\2\u0d2e\u0d31\5\u0172\u00ba"+
		"\2\u0d2f\u0d31\5\u0174\u00bb\2\u0d30\u0d2e\3\2\2\2\u0d30\u0d2f\3\2\2\2"+
		"\u0d31\u0d32\3\2\2\2\u0d32\u0d33\7\u019c\2\2\u0d33\u0175\3\2\2\2\u0d34"+
		"\u0d36\5\u011c\u008f\2\u0d35\u0d37\5\u018a\u00c6\2\u0d36\u0d35\3\2\2\2"+
		"\u0d36\u0d37\3\2\2\2\u0d37\u0d3a\3\2\2\2\u0d38\u0d39\6\u00bc9\2\u0d39"+
		"\u0d3b\5\u040e\u0208\2\u0d3a\u0d38\3\2\2\2\u0d3a\u0d3b\3\2\2\2\u0d3b\u0d46"+
		"\3\2\2\2\u0d3c\u0d3d\6\u00bc:\2\u0d3d\u0d3e\7\u02f6\2\2\u0d3e\u0d40\5"+
		"\u011c\u008f\2\u0d3f\u0d41\5\u018a\u00c6\2\u0d40\u0d3f\3\2\2\2\u0d40\u0d41"+
		"\3\2\2\2\u0d41\u0d43\3\2\2\2\u0d42\u0d44\5\u040e\u0208\2\u0d43\u0d42\3"+
		"\2\2\2\u0d43\u0d44\3\2\2\2\u0d44\u0d46\3\2\2\2\u0d45\u0d34\3\2\2\2\u0d45"+
		"\u0d3c\3\2\2\2\u0d46\u0177\3\2\2\2\u0d47\u0d4a\7\u019b\2\2\u0d48\u0d4b"+
		"\5\u0152\u00aa\2\u0d49\u0d4b\5\u0178\u00bd\2\u0d4a\u0d48\3\2\2\2\u0d4a"+
		"\u0d49\3\2\2\2\u0d4b\u0d4c\3\2\2\2\u0d4c\u0d4d\7\u019c\2\2\u0d4d\u0179"+
		"\3\2\2\2\u0d4e\u0d4f\7\u02dd\2\2\u0d4f\u0d50\7\u019b\2\2\u0d50\u0d51\5"+
		"\u029e\u0150\2\u0d51\u0d52\7\u0198\2\2\u0d52\u0d53\5\u047c\u023f\2\u0d53"+
		"\u0d54\5\u017c\u00bf\2\u0d54\u0d56\7\u019c\2\2\u0d55\u0d57\5\u018a\u00c6"+
		"\2\u0d56\u0d55\3\2\2\2\u0d56\u0d57\3\2\2\2\u0d57\u017b\3\2\2\2\u0d58\u0d59"+
		"\7\\\2\2\u0d59\u0d5a\7\u019b\2\2\u0d5a\u0d5f\5\u017e\u00c0\2\u0d5b\u0d5c"+
		"\7\u0198\2\2\u0d5c\u0d5e\5\u017e\u00c0\2\u0d5d\u0d5b\3\2\2\2\u0d5e\u0d61"+
		"\3\2\2\2\u0d5f\u0d5d\3\2\2\2\u0d5f\u0d60\3\2\2\2\u0d60\u0d62\3\2\2\2\u0d61"+
		"\u0d5f\3\2\2\2\u0d62\u0d63\7\u019c\2\2\u0d63\u017d\3\2\2\2\u0d64\u0d65"+
		"\5\u0462\u0232\2\u0d65\u0d66\7\u01fc\2\2\u0d66\u0d67\7\u02df\2\2\u0d67"+
		"\u0d7c\3\2\2\2\u0d68\u0d69\5\u0462\u0232\2\u0d69\u0d6c\5\u038e\u01c8\2"+
		"\u0d6a\u0d6b\6\u00c0;\2\u0d6b\u0d6d\5\u03d4\u01eb\2\u0d6c\u0d6a\3\2\2"+
		"\2\u0d6c\u0d6d\3\2\2\2\u0d6d\u0d6f\3\2\2\2\u0d6e\u0d70\7\u01f2\2\2\u0d6f"+
		"\u0d6e\3\2\2\2\u0d6f\u0d70\3\2\2\2\u0d70\u0d71\3\2\2\2\u0d71\u0d72\7\u02e0"+
		"\2\2\u0d72\u0d74\5\u047c\u023f\2\u0d73\u0d75\5\u0180\u00c1\2\u0d74\u0d73"+
		"\3\2\2\2\u0d74\u0d75\3\2\2\2\u0d75\u0d7c\3\2\2\2\u0d76\u0d77\7\u02de\2"+
		"\2\u0d77\u0d78\7\u02e0\2\2\u0d78\u0d79\5\u047c\u023f\2\u0d79\u0d7a\5\u017c"+
		"\u00bf\2\u0d7a\u0d7c\3\2\2\2\u0d7b\u0d64\3\2\2\2\u0d7b\u0d68\3\2\2\2\u0d7b"+
		"\u0d76\3\2\2\2\u0d7c\u017f\3\2\2\2\u0d7d\u0d7f\5\u0182\u00c2\2\u0d7e\u0d80"+
		"\5\u0184\u00c3\2\u0d7f\u0d7e\3\2\2\2\u0d7f\u0d80\3\2\2\2\u0d80\u0d86\3"+
		"\2\2\2\u0d81\u0d83\5\u0184\u00c3\2\u0d82\u0d84\5\u0182\u00c2\2\u0d83\u0d82"+
		"\3\2\2\2\u0d83\u0d84\3\2\2\2\u0d84\u0d86\3\2\2\2\u0d85\u0d7d\3\2\2\2\u0d85"+
		"\u0d81\3\2\2\2\u0d86\u0181\3\2\2\2\u0d87\u0d88\5\u0186\u00c4\2\u0d88\u0d89"+
		"\7\u0245\2\2\u0d89\u0d8a\7\u02dc\2\2\u0d8a\u0183\3\2\2\2\u0d8b\u0d8c\5"+
		"\u0186\u00c4\2\u0d8c\u0d8d\7\u0245\2\2\u0d8d\u0d8e\7\u0084\2\2\u0d8e\u0185"+
		"\3\2\2\2\u0d8f\u0d94\7\u0084\2\2\u0d90\u0d94\7\u0242\2\2\u0d91\u0d92\7"+
		"\u01e0\2\2\u0d92\u0d94\5\u047c\u023f\2\u0d93\u0d8f\3\2\2\2\u0d93\u0d90"+
		"\3\2\2\2\u0d93\u0d91\3\2\2\2\u0d94\u0187\3\2\2\2\u0d95\u0d96\t&\2\2\u0d96"+
		"\u0189\3\2\2\2\u0d97\u0d9b\7\u01b1\2\2\u0d98\u0d99\6\u00c6<\2\u0d99\u0d9b"+
		"\7\u0181\2\2\u0d9a\u0d97\3\2\2\2\u0d9a\u0d98\3\2\2\2\u0d9a\u0d9b\3\2\2"+
		"\2\u0d9b\u0d9c\3\2\2\2\u0d9c\u0d9d\5\u0462\u0232\2\u0d9d\u018b\3\2\2\2"+
		"\u0d9e\u0da3\5\u018e\u00c8\2\u0d9f\u0da0\7\u0198\2\2\u0da0\u0da2\5\u018e"+
		"\u00c8\2\u0da1\u0d9f\3\2\2\2\u0da2\u0da5\3\2\2\2\u0da3\u0da1\3\2\2\2\u0da3"+
		"\u0da4\3\2\2\2\u0da4\u018d\3\2\2\2\u0da5\u0da3\3\2\2\2\u0da6\u0da7\5\u0190"+
		"\u00c9\2\u0da7\u0da9\5\u0192\u00ca\2\u0da8\u0daa\5\u0196\u00cc\2\u0da9"+
		"\u0da8\3\2\2\2\u0da9\u0daa\3\2\2\2\u0daa\u0dab\3\2\2\2\u0dab\u0dac\7\u019b"+
		"\2\2\u0dac\u0dad\5\u0198\u00cd\2\u0dad\u0dae\7\u019c\2\2\u0dae\u0dbb\3"+
		"\2\2\2\u0daf\u0db0\7\u029b\2\2\u0db0\u0db2\5\u0192\u00ca\2\u0db1\u0db3"+
		"\5\u0196\u00cc\2\u0db2\u0db1\3\2\2\2\u0db2\u0db3\3\2\2\2\u0db3\u0db4\3"+
		"\2\2\2\u0db4\u0db6\7\u019b\2\2\u0db5\u0db7\5\u0198\u00cd\2\u0db6\u0db5"+
		"\3\2\2\2\u0db6\u0db7\3\2\2\2\u0db7\u0db8\3\2\2\2\u0db8\u0db9\7\u019c\2"+
		"\2\u0db9\u0dbb\3\2\2\2\u0dba\u0da6\3\2\2\2\u0dba\u0daf\3\2\2\2\u0dbb\u018f"+
		"\3\2\2\2\u0dbc\u0dbd\t\'\2\2\u0dbd\u0191\3\2\2\2\u0dbe\u0dbf\t(\2\2\u0dbf"+
		"\u0193\3\2\2\2\u0dc0\u0dc1\7\u0253\2\2\u0dc1\u0dc7\7\u021b\2\2\u0dc2\u0dc4"+
		"\7\u0296\2\2\u0dc3\u0dc5\5\u0192\u00ca\2\u0dc4\u0dc3\3\2\2\2\u0dc4\u0dc5"+
		"\3\2\2\2\u0dc5\u0dc7\3\2\2\2\u0dc6\u0dc0\3\2\2\2\u0dc6\u0dc2\3\2\2\2\u0dc7"+
		"\u0195\3\2\2\2\u0dc8\u0dce\7\u01fc\2\2\u0dc9\u0dcf\7\u0219\2\2\u0dca\u0dcb"+
		"\7\u024c\2\2\u0dcb\u0dcf\7\u01be\2\2\u0dcc\u0dcd\7\u0202\2\2\u0dcd\u0dcf"+
		"\7\u01be\2\2\u0dce\u0dc9\3\2\2\2\u0dce\u0dca\3\2\2\2\u0dce\u0dcc\3\2\2"+
		"\2\u0dcf\u0197\3\2\2\2\u0dd0\u0dd5\5\u019a\u00ce\2\u0dd1\u0dd2\7\u0198"+
		"\2\2\u0dd2\u0dd4\5\u019a\u00ce\2\u0dd3\u0dd1\3\2\2\2\u0dd4\u0dd7\3\2\2"+
		"\2\u0dd5\u0dd3\3\2\2\2\u0dd5\u0dd6\3\2\2\2\u0dd6\u0199\3\2\2\2\u0dd7\u0dd5"+
		"\3\2\2\2\u0dd8\u0ddb\5\u0462\u0232\2\u0dd9\u0ddb\7\u0253\2\2\u0dda\u0dd8"+
		"\3\2\2\2\u0dda\u0dd9\3\2\2\2\u0ddb\u019b\3\2\2\2\u0ddc\u0ddd\6\u00cf="+
		"\2\u0ddd\u0ddf\5\u0144\u00a3\2\u0dde\u0ddc\3\2\2\2\u0dde\u0ddf\3\2\2\2"+
		"\u0ddf\u0de0\3\2\2\2\u0de0\u0de2\7\u0299\2\2\u0de1\u0de3\7\u022c\2\2\u0de2"+
		"\u0de1\3\2\2\2\u0de2\u0de3\3\2\2\2\u0de3\u0de5\3\2\2\2\u0de4\u0de6\7\u020a"+
		"\2\2\u0de5\u0de4\3\2\2\2\u0de5\u0de6\3\2\2\2\u0de6\u0de7\3\2\2\2\u0de7"+
		"\u0de8\5\u0152\u00aa\2\u0de8\u0de9\7\u026d\2\2\u0de9\u0deb\5\u03dc\u01ef"+
		"\2\u0dea\u0dec\5\u0162\u00b2\2\u0deb\u0dea\3\2\2\2\u0deb\u0dec\3\2\2\2"+
		"\u0dec\u0dee\3\2\2\2\u0ded\u0def\5\u014c\u00a7\2\u0dee\u0ded\3\2\2\2\u0dee"+
		"\u0def\3\2\2\2\u0def\u0df1\3\2\2\2\u0df0\u0df2\5\u0122\u0092\2\u0df1\u0df0"+
		"\3\2\2\2\u0df1\u0df2\3\2\2\2\u0df2\u019d\3\2\2\2\u0df3\u0df8\5\u01a0\u00d1"+
		"\2\u0df4\u0df8\5\u01a6\u00d4\2\u0df5\u0df8\5\u01a8\u00d5\2\u0df6\u0df8"+
		"\5\u01ae\u00d8\2\u0df7\u0df3\3\2\2\2\u0df7\u0df4\3\2\2\2\u0df7\u0df5\3"+
		"\2\2\2\u0df7\u0df6\3\2\2\2\u0df8\u019f\3\2\2\2\u0df9\u0dfa\7\62\2\2\u0dfa"+
		"\u0dfe\7\u015d\2\2\u0dfb\u0dfd\5\u01a4\u00d3\2\u0dfc\u0dfb\3\2\2\2\u0dfd"+
		"\u0e00\3\2\2\2\u0dfe\u0dfc\3\2\2\2\u0dfe\u0dff\3\2\2\2\u0dff\u0e13\3\2"+
		"\2\2\u0e00\u0dfe\3\2\2\2\u0e01\u0e03\7\16\2\2\u0e02\u0e04\7\u0176\2\2"+
		"\u0e03\u0e02\3\2\2\2\u0e03\u0e04\3\2\2\2\u0e04\u0e0a\3\2\2\2\u0e05\u0e07"+
		"\7\u01b0\2\2\u0e06\u0e08\7\35\2\2\u0e07\u0e06\3\2\2\2\u0e07\u0e08\3\2"+
		"\2\2\u0e08\u0e09\3\2\2\2\u0e09\u0e0b\7Q\2\2\u0e0a\u0e05\3\2\2\2\u0e0a"+
		"\u0e0b\3\2\2\2\u0e0b\u0e10\3\2\2\2\u0e0c\u0e0e\7\35\2\2\u0e0d\u0e0c\3"+
		"\2\2\2\u0e0d\u0e0e\3\2\2\2\u0e0e\u0e0f\3\2\2\2\u0e0f\u0e11\7\u025d\2\2"+
		"\u0e10\u0e0d\3\2\2\2\u0e10\u0e11\3\2\2\2\u0e11\u0e13\3\2\2\2\u0e12\u0df9"+
		"\3\2\2\2\u0e12\u0e01\3\2\2\2\u0e13\u01a1\3\2\2\2\u0e14\u0e16\7\7\2\2\u0e15"+
		"\u0e17\7\u0176\2\2\u0e16\u0e15\3\2\2\2\u0e16\u0e17\3\2\2\2\u0e17\u01a3"+
		"\3\2\2\2\u0e18\u0e19\7\u02ac\2\2\u0e19\u0e1a\7e\2\2\u0e1a\u0e1f\7\u013a"+
		"\2\2\u0e1b\u0e1c\6\u00d3>\2\u0e1c\u0e1d\7\u0258\2\2\u0e1d\u0e1f\t)\2\2"+
		"\u0e1e\u0e18\3\2\2\2\u0e1e\u0e1b\3\2\2\2\u0e1f\u01a5\3\2\2\2\u0e20\u0e21"+
		"\7+\2\2\u0e21\u0e3e\5\u0462\u0232\2\u0e22\u0e24\7*\2\2\u0e23\u0e25\7\u0176"+
		"\2\2\u0e24\u0e23\3\2\2\2\u0e24\u0e25\3\2\2\2\u0e25\u0e38\3\2\2\2\u0e26"+
		"\u0e28\7\u028f\2\2\u0e27\u0e29\7+\2\2\u0e28\u0e27\3\2\2\2\u0e28\u0e29"+
		"\3\2\2\2\u0e29\u0e2a\3\2\2\2\u0e2a\u0e39\5\u0462\u0232\2\u0e2b\u0e2d\7"+
		"\u01b0\2\2\u0e2c\u0e2e\7\35\2\2\u0e2d\u0e2c\3\2\2\2\u0e2d\u0e2e\3\2\2"+
		"\2\u0e2e\u0e2f\3\2\2\2\u0e2f\u0e31\7Q\2\2\u0e30\u0e2b\3\2\2\2\u0e30\u0e31"+
		"\3\2\2\2\u0e31\u0e36\3\2\2\2\u0e32\u0e34\7\35\2\2\u0e33\u0e32\3\2\2\2"+
		"\u0e33\u0e34\3\2\2\2\u0e34\u0e35\3\2\2\2\u0e35\u0e37\7\u025d\2\2\u0e36"+
		"\u0e33\3\2\2\2\u0e36\u0e37\3\2\2\2\u0e37\u0e39\3\2\2\2\u0e38\u0e26\3\2"+
		"\2\2\u0e38\u0e30\3\2\2\2\u0e39\u0e3e\3\2\2\2\u0e3a\u0e3b\7\u025d\2\2\u0e3b"+
		"\u0e3c\7+\2\2\u0e3c\u0e3e\5\u0462\u0232\2\u0e3d\u0e20\3\2\2\2\u0e3d\u0e22"+
		"\3\2\2\2\u0e3d\u0e3a\3\2\2\2\u0e3e\u01a7\3\2\2\2\u0e3f\u0e40\7\u0226\2"+
		"\2\u0e40\u0e41\t\24\2\2\u0e41\u0e46\5\u01aa\u00d6\2\u0e42\u0e43\7\u0198"+
		"\2\2\u0e43\u0e45\5\u01aa\u00d6\2\u0e44\u0e42\3\2\2\2\u0e45\u0e48\3\2\2"+
		"\2\u0e46\u0e44\3\2\2\2\u0e46\u0e47\3\2\2\2\u0e47\u0e56\3\2\2\2\u0e48\u0e46"+
		"\3\2\2\2\u0e49\u0e4a\6\u00d5?\2\u0e4a\u0e4b\7\u0226\2\2\u0e4b\u0e4c\7"+
		"\u00a7\2\2\u0e4c\u0e4d\7\u01fc\2\2\u0e4d\u0e56\7\6\2\2\u0e4e\u0e53\7\u0297"+
		"\2\2\u0e4f\u0e54\7\u0156\2\2\u0e50\u0e54\7\u0289\2\2\u0e51\u0e52\6\u00d5"+
		"@\2\u0e52\u0e54\7\u00a7\2\2\u0e53\u0e4f\3\2\2\2\u0e53\u0e50\3\2\2\2\u0e53"+
		"\u0e51\3\2\2\2\u0e54\u0e56\3\2\2\2\u0e55\u0e3f\3\2\2\2\u0e55\u0e49\3\2"+
		"\2\2\u0e55\u0e4e\3\2\2\2\u0e56\u01a9\3\2\2\2\u0e57\u0e59\5\u0448\u0225"+
		"\2\u0e58\u0e5a\5\u018a\u00c6\2\u0e59\u0e58\3\2\2\2\u0e59\u0e5a\3\2\2\2"+
		"\u0e5a\u0e5b\3\2\2\2\u0e5b\u0e5c\5\u01ac\u00d7\2\u0e5c\u01ab\3\2\2\2\u0e5d"+
		"\u0e5f\7\u0258\2\2\u0e5e\u0e60\7\u00b6\2\2\u0e5f\u0e5e\3\2\2\2\u0e5f\u0e60"+
		"\3\2\2\2\u0e60\u0e66\3\2\2\2\u0e61\u0e63\7\u022c\2\2\u0e62\u0e61\3\2\2"+
		"\2\u0e62\u0e63\3\2\2\2\u0e63\u0e64\3\2\2\2\u0e64\u0e66\7\u02ae\2\2\u0e65"+
		"\u0e5d\3\2\2\2\u0e65\u0e62\3\2\2\2\u0e66\u01ad\3\2\2\2\u0e67\u0e82\79"+
		"\2\2\u0e68\u0e69\t*\2\2\u0e69\u0e6b\5\u01b2\u00da\2\u0e6a\u0e6c\t+\2\2"+
		"\u0e6b\u0e6a\3\2\2\2\u0e6b\u0e6c\3\2\2\2\u0e6c\u0e83\3\2\2\2\u0e6d\u0e6e"+
		"\7\22\2\2\u0e6e\u0e74\5\u01b2\u00da\2\u0e6f\u0e72\7\u0152\2\2\u0e70\u0e71"+
		"\7\u01fc\2\2\u0e71\u0e73\7\u00dc\2\2\u0e72\u0e70\3\2\2\2\u0e72\u0e73\3"+
		"\2\2\2\u0e73\u0e75\3\2\2\2\u0e74\u0e6f\3\2\2\2\u0e74\u0e75\3\2\2\2\u0e75"+
		"\u0e83\3\2\2\2\u0e76\u0e77\7%\2\2\u0e77\u0e83\5\u01b2\u00da\2\u0e78\u0e79"+
		"\7\16\2\2\u0e79\u0e7c\5\u01b2\u00da\2\u0e7a\u0e7b\7\u00f7\2\2\u0e7b\u0e7d"+
		"\7\u00fe\2\2\u0e7c\u0e7a\3\2\2\2\u0e7c\u0e7d\3\2\2\2\u0e7d\u0e83\3\2\2"+
		"\2\u0e7e\u0e7f\7*\2\2\u0e7f\u0e83\5\u01b2\u00da\2\u0e80\u0e81\7\u0111"+
		"\2\2\u0e81\u0e83\5\u01b0\u00d9\2\u0e82\u0e68\3\2\2\2\u0e82\u0e6d\3\2\2"+
		"\2\u0e82\u0e76\3\2\2\2\u0e82\u0e78\3\2\2\2\u0e82\u0e7e\3\2\2\2\u0e82\u0e80"+
		"\3\2\2\2\u0e83\u01af\3\2\2\2\u0e84\u0e87\6\u00d9A\2\u0e85\u0e86\7\u01cb"+
		"\2\2\u0e86\u0e88\7\u0179\2\2\u0e87\u0e85\3\2\2\2\u0e87\u0e88\3\2\2\2\u0e88"+
		"\u0e8b\3\2\2\2\u0e89\u0e8b\3\2\2\2\u0e8a\u0e84\3\2\2\2\u0e8a\u0e89\3\2"+
		"\2\2\u0e8b\u01b1\3\2\2\2\u0e8c\u0e93\5\u047e\u0240\2\u0e8d\u0e8e\7\u0198"+
		"\2\2\u0e8e\u0e91\5\u047e\u0240\2\u0e8f\u0e90\7\u0198\2\2\u0e90\u0e92\5"+
		"\u046e\u0238\2\u0e91\u0e8f\3\2\2\2\u0e91\u0e92\3\2\2\2\u0e92\u0e94\3\2"+
		"\2\2\u0e93\u0e8d\3\2\2\2\u0e93\u0e94\3\2\2\2\u0e94\u01b3\3\2\2\2\u0e95"+
		"\u0e96\7\u0255\2\2\u0e96\u0e97\t,\2\2\u0e97\u0e9c\7\u00b9\2\2\u0e98\u0e99"+
		"\7\u028f\2\2\u0e99\u0e9d\5\u0482\u0242\2\u0e9a\u0e9b\7\u01b4\2\2\u0e9b"+
		"\u0e9d\5\u029e\u0150\2\u0e9c\u0e98\3\2\2\2\u0e9c\u0e9a\3\2\2\2\u0e9d\u0eb7"+
		"\3\2\2\2\u0e9e\u0eb7\5\u01bc\u00df\2\u0e9f\u0ea0\7(\2\2\u0ea0\u0ea5\5"+
		"\u01b6\u00dc\2\u0ea1\u0ea2\7\u0198\2\2\u0ea2\u0ea4\5\u01b6\u00dc\2\u0ea3"+
		"\u0ea1\3\2\2\2\u0ea4\u0ea7\3\2\2\2\u0ea5\u0ea3\3\2\2\2\u0ea5\u0ea6\3\2"+
		"\2\2\u0ea6\u0eb7\3\2\2\2\u0ea7\u0ea5\3\2\2\2\u0ea8\u0ea9\6\u00dbB\2\u0ea9"+
		"\u0eaa\7(\2\2\u0eaa\u0eae\7\u02b2\2\2\u0eab\u0eac\5\u03cc\u01e7\2\u0eac"+
		"\u0ead\5\u0462\u0232\2\u0ead\u0eaf\3\2\2\2\u0eae\u0eab\3\2\2\2\u0eae\u0eaf"+
		"\3\2\2\2\u0eaf\u0eb7\3\2\2\2\u0eb0\u0eb7\5\u01d8\u00ed\2\u0eb1\u0eb2\6"+
		"\u00dbC\2\u0eb2\u0eb7\5\u01ca\u00e6\2\u0eb3\u0eb7\5\u01ba\u00de\2\u0eb4"+
		"\u0eb5\6\u00dbD\2\u0eb5\u0eb7\5\u01e2\u00f2\2\u0eb6\u0e95\3\2\2\2\u0eb6"+
		"\u0e9e\3\2\2\2\u0eb6\u0e9f\3\2\2\2\u0eb6\u0ea8\3\2\2\2\u0eb6\u0eb0\3\2"+
		"\2\2\u0eb6\u0eb1\3\2\2\2\u0eb6\u0eb3\3\2\2\2\u0eb6\u0eb4\3\2\2\2\u0eb7"+
		"\u01b5\3\2\2\2\u0eb8\u0eba\7\u00bb\2\2\u0eb9\u0ebb\5\u01b8\u00dd\2\u0eba"+
		"\u0eb9\3\2\2\2\u0eba\u0ebb\3\2\2\2\u0ebb\u0ec7\3\2\2\2\u0ebc\u0ebd\6\u00dc"+
		"E\2\u0ebd\u0ebe\7\u010d\2\2\u0ebe\u0ec7\7\t\2\2\u0ebf\u0ec1\7/\2\2\u0ec0"+
		"\u0ec2\7\u01ad\2\2\u0ec1\u0ec0\3\2\2\2\u0ec1\u0ec2\3\2\2\2\u0ec2\u0ec4"+
		"\3\2\2\2\u0ec3\u0ec5\5\u0308\u0185\2\u0ec4\u0ec3\3\2\2\2\u0ec4\u0ec5\3"+
		"\2\2\2\u0ec5\u0ec7\3\2\2\2\u0ec6\u0eb8\3\2\2\2\u0ec6\u0ebc\3\2\2\2\u0ec6"+
		"\u0ebf\3\2\2\2\u0ec7\u01b7\3\2\2\2\u0ec8\u0ec9\6\u00ddF\2\u0ec9\u0ece"+
		"\7\u028f\2\2\u0eca\u0ecb\6\u00ddG\2\u0ecb\u0ecf\5\u0470\u0239\2\u0ecc"+
		"\u0ecd\6\u00ddH\2\u0ecd\u0ecf\5\u0474\u023b\2\u0ece\u0eca\3\2\2\2\u0ece"+
		"\u0ecc\3\2\2\2\u0ecf\u01b9\3\2\2\2\u0ed0\u0ed4\7\u0224\2\2\u0ed1\u0ed5"+
		"\7o\2\2\u0ed2\u0ed3\7\u0289\2\2\u0ed3\u0ed5\5\u0448\u0225\2\u0ed4\u0ed1"+
		"\3\2\2\2\u0ed4\u0ed2\3\2\2\2\u0ed5\u0ed6\3\2\2\2\u0ed6\u0ed7\7\u01fd\2"+
		"\2\u0ed7\u0ed8\7\u00bb\2\2\u0ed8\u01bb\3\2\2\2\u0ed9\u0eda\7\u01c3\2\2"+
		"\u0eda\u0edb\7\u00bb\2\2\u0edb\u0edc\7\u028f\2\2\u0edc\u0ede\5\u01be\u00e0"+
		"\2\u0edd\u0edf\5\u0308\u0185\2\u0ede\u0edd\3\2\2\2\u0ede\u0edf\3\2\2\2"+
		"\u0edf\u01bd\3\2\2\2\u0ee0\u0ee5\5\u01c0\u00e1\2\u0ee1\u0ee2\7\u0198\2"+
		"\2\u0ee2\u0ee4\5\u01c0\u00e1\2\u0ee3\u0ee1\3\2\2\2\u0ee4\u0ee7\3\2\2\2"+
		"\u0ee5\u0ee3\3\2\2\2\u0ee5\u0ee6\3\2\2\2\u0ee6\u01bf\3\2\2\2\u0ee7\u0ee5"+
		"\3\2\2\2\u0ee8\u0ee9\7\u00bd\2\2\u0ee9\u0eea\7\u0181\2\2\u0eea\u0f3e\5"+
		"\u0484\u0243\2\u0eeb\u0eec\7\u02f9\2\2\u0eec\u0eed\7\u0181\2\2\u0eed\u0f3e"+
		"\5\u0484\u0243\2\u0eee\u0eef\7\u022d\2\2\u0eef\u0ef0\7\u0181\2\2\u0ef0"+
		"\u0f3e\5\u0484\u0243\2\u0ef1\u0ef2\7\u00c1\2\2\u0ef2\u0ef3\7\u0181\2\2"+
		"\u0ef3\u0f3e\5\u0484\u0243\2\u0ef4\u0ef5\7\u00c2\2\2\u0ef5\u0ef6\7\u0181"+
		"\2\2\u0ef6\u0f3e\5\u0484\u0243\2\u0ef7\u0ef8\7\u00be\2\2\u0ef8\u0ef9\7"+
		"\u0181\2\2\u0ef9\u0f3e\5\u046e\u0238\2\u0efa\u0efb\7\u00c4\2\2\u0efb\u0efc"+
		"\7\u0181\2\2\u0efc\u0f3e\5\u046e\u0238\2\u0efd\u0efe\7\u00c5\2\2\u0efe"+
		"\u0eff\7\u0181\2\2\u0eff\u0f3e\5\u046e\u0238\2\u0f00\u0f01\7\u00c6\2\2"+
		"\u0f01\u0f02\7\u0181\2\2\u0f02\u0f3e\5\u046e\u0238\2\u0f03\u0f04\7\u00c7"+
		"\2\2\u0f04\u0f05\7\u0181\2\2\u0f05\u0f3e\5\u046e\u0238\2\u0f06\u0f07\7"+
		"\u00c8\2\2\u0f07\u0f08\7\u0181\2\2\u0f08\u0f3e\5\u0484\u0243\2\u0f09\u0f0a"+
		"\7\u00c9\2\2\u0f0a\u0f0b\7\u0181\2\2\u0f0b\u0f3e\5\u0484\u0243\2\u0f0c"+
		"\u0f0d\7\u00ca\2\2\u0f0d\u0f0e\7\u0181\2\2\u0f0e\u0f3e\5\u0484\u0243\2"+
		"\u0f0f\u0f10\7\u00cb\2\2\u0f10\u0f11\7\u0181\2\2\u0f11\u0f3e\5\u0484\u0243"+
		"\2\u0f12\u0f13\7\u0302\2\2\u0f13\u0f14\7\u0181\2\2\u0f14\u0f3e\5\u01c4"+
		"\u00e3\2\u0f15\u0f16\7\u00cc\2\2\u0f16\u0f17\7\u0181\2\2\u0f17\u0f3e\5"+
		"\u0484\u0243\2\u0f18\u0f19\7\u00cf\2\2\u0f19\u0f1a\7\u0181\2\2\u0f1a\u0f3e"+
		"\5\u0484\u0243\2\u0f1b\u0f1c\7\u022e\2\2\u0f1c\u0f1d\7\u0181\2\2\u0f1d"+
		"\u0f3e\5\u046e\u0238\2\u0f1e\u0f1f\7\u00cd\2\2\u0f1f\u0f20\7\u0181\2\2"+
		"\u0f20\u0f3e\5\u0482\u0242\2\u0f21\u0f22\7\u00ce\2\2\u0f22\u0f23\7\u0181"+
		"\2\2\u0f23\u0f3e\5\u0484\u0243\2\u0f24\u0f25\7\u02e8\2\2\u0f25\u0f26\7"+
		"\u0181\2\2\u0f26\u0f3e\5\u0484\u0243\2\u0f27\u0f28\7\u02e9\2\2\u0f28\u0f29"+
		"\7\u0181\2\2\u0f29\u0f3e\5\u046e\u0238\2\u0f2a\u0f2b\7\u00bc\2\2\u0f2b"+
		"\u0f2c\7\u0181\2\2\u0f2c\u0f3e\5\u046e\u0238\2\u0f2d\u0f2e\7\u00a2\2\2"+
		"\u0f2e\u0f2f\7\u0181\2\2\u0f2f\u0f3e\5\u01c8\u00e5\2\u0f30\u0f31\7\u02ff"+
		"\2\2\u0f31\u0f32\7\u0181\2\2\u0f32\u0f3e\5\u047c\u023f\2\u0f33\u0f34\7"+
		"\u0300\2\2\u0f34\u0f35\7\u0181\2\2\u0f35\u0f3e\5\u046e\u0238\2\u0f36\u0f37"+
		"\7\u00d0\2\2\u0f37\u0f38\7\u0181\2\2\u0f38\u0f3e\5\u046e\u0238\2\u0f39"+
		"\u0f3a\7\u0301\2\2\u0f3a\u0f3b\7\u0181\2\2\u0f3b\u0f3e\5\u01c2\u00e2\2"+
		"\u0f3c\u0f3e\5\u01c6\u00e4\2\u0f3d\u0ee8\3\2\2\2\u0f3d\u0eeb\3\2\2\2\u0f3d"+
		"\u0eee\3\2\2\2\u0f3d\u0ef1\3\2\2\2\u0f3d\u0ef4\3\2\2\2\u0f3d\u0ef7\3\2"+
		"\2\2\u0f3d\u0efa\3\2\2\2\u0f3d\u0efd\3\2\2\2\u0f3d\u0f00\3\2\2\2\u0f3d"+
		"\u0f03\3\2\2\2\u0f3d\u0f06\3\2\2\2\u0f3d\u0f09\3\2\2\2\u0f3d\u0f0c\3\2"+
		"\2\2\u0f3d\u0f0f\3\2\2\2\u0f3d\u0f12\3\2\2\2\u0f3d\u0f15\3\2\2\2\u0f3d"+
		"\u0f18\3\2\2\2\u0f3d\u0f1b\3\2\2\2\u0f3d\u0f1e\3\2\2\2\u0f3d\u0f21\3\2"+
		"\2\2\u0f3d\u0f24\3\2\2\2\u0f3d\u0f27\3\2\2\2\u0f3d\u0f2a\3\2\2\2\u0f3d"+
		"\u0f2d\3\2\2\2\u0f3d\u0f30\3\2\2\2\u0f3d\u0f33\3\2\2\2\u0f3d\u0f36\3\2"+
		"\2\2\u0f3d\u0f39\3\2\2\2\u0f3d\u0f3c\3\2\2\2\u0f3e\u01c1\3\2\2\2\u0f3f"+
		"\u0f42\5\u03fa\u01fe\2\u0f40\u0f42\7\u0242\2\2\u0f41\u0f3f\3\2\2\2\u0f41"+
		"\u0f40\3\2\2\2\u0f42\u01c3\3\2\2\2\u0f43\u0f46\5\u0484\u0243\2\u0f44\u0f46"+
		"\7\u0242\2\2\u0f45\u0f43\3\2\2\2\u0f45\u0f44\3\2\2\2\u0f46\u01c5\3\2\2"+
		"\2\u0f47\u0f48\7\u00bf\2\2\u0f48\u0f49\7\u0181\2\2\u0f49\u0f54\5\u0484"+
		"\u0243\2\u0f4a\u0f4b\7\u00c0\2\2\u0f4b\u0f4c\7\u0181\2\2\u0f4c\u0f54\5"+
		"\u0472\u023a\2\u0f4d\u0f4e\7\u0117\2\2\u0f4e\u0f4f\7\u0181\2\2\u0f4f\u0f54"+
		"\5\u0484\u0243\2\u0f50\u0f51\7\u0118\2\2\u0f51\u0f52\7\u0181\2\2\u0f52"+
		"\u0f54\5\u046e\u0238\2\u0f53\u0f47\3\2\2\2\u0f53\u0f4a\3\2\2\2\u0f53\u0f4d"+
		"\3\2\2\2\u0f53\u0f50\3\2\2\2\u0f54\u01c7\3\2\2\2\u0f55\u0f5e\7\u019b\2"+
		"\2\u0f56\u0f5b\5\u046e\u0238\2\u0f57\u0f58\7\u0198\2\2\u0f58\u0f5a\5";
	private static final String _serializedATNSegment2 =
		"\u046e\u0238\2\u0f59\u0f57\3\2\2\2\u0f5a\u0f5d\3\2\2\2\u0f5b\u0f59\3\2"+
		"\2\2\u0f5b\u0f5c\3\2\2\2\u0f5c\u0f5f\3\2\2\2\u0f5d\u0f5b\3\2\2\2\u0f5e"+
		"\u0f56\3\2\2\2\u0f5e\u0f5f\3\2\2\2\u0f5f\u0f60\3\2\2\2\u0f60\u0f61\7\u019c"+
		"\2\2\u0f61\u01c9\3\2\2\2\u0f62\u0f63\7\u01c3\2\2\u0f63\u0f64\7\u011d\2"+
		"\2\u0f64\u0f65\7\u0095\2\2\u0f65\u0f6a\5\u01cc\u00e7\2\u0f66\u0f67\7\u0198"+
		"\2\2\u0f67\u0f69\5\u01cc\u00e7\2\u0f68\u0f66\3\2\2\2\u0f69\u0f6c\3\2\2"+
		"\2\u0f6a\u0f68\3\2\2\2\u0f6a\u0f6b\3\2\2\2\u0f6b\u0f6f\3\2\2\2\u0f6c\u0f6a"+
		"\3\2\2\2\u0f6d\u0f6e\6\u00e6I\2\u0f6e\u0f70\5\u0308\u0185\2\u0f6f\u0f6d"+
		"\3\2\2\2\u0f6f\u0f70\3\2\2\2\u0f70\u01cb\3\2\2\2\u0f71\u0f72\7\u011e\2"+
		"\2\u0f72\u0f73\7\u0181\2\2\u0f73\u0f75\7\u019b\2\2\u0f74\u0f76\5\u01ce"+
		"\u00e8\2\u0f75\u0f74\3\2\2\2\u0f75\u0f76\3\2\2\2\u0f76\u0f77\3\2\2\2\u0f77"+
		"\u0fa3\7\u019c\2\2\u0f78\u0f79\7\u011f\2\2\u0f79\u0f7a\7\u0181\2\2\u0f7a"+
		"\u0f7c\7\u019b\2\2\u0f7b\u0f7d\5\u01ce\u00e8\2\u0f7c\u0f7b\3\2\2\2\u0f7c"+
		"\u0f7d\3\2\2\2\u0f7d\u0f7e\3\2\2\2\u0f7e\u0fa3\7\u019c\2\2\u0f7f\u0f80"+
		"\7\u0120\2\2\u0f80\u0f81\7\u0181\2\2\u0f81\u0f83\7\u019b\2\2\u0f82\u0f84"+
		"\5\u01d0\u00e9\2\u0f83\u0f82\3\2\2\2\u0f83\u0f84\3\2\2\2\u0f84\u0f85\3"+
		"\2\2\2\u0f85\u0fa3\7\u019c\2\2\u0f86\u0f87\7\u0121\2\2\u0f87\u0f88\7\u0181"+
		"\2\2\u0f88\u0f8a\7\u019b\2\2\u0f89\u0f8b\5\u01d0\u00e9\2\u0f8a\u0f89\3"+
		"\2\2\2\u0f8a\u0f8b\3\2\2\2\u0f8b\u0f8c\3\2\2\2\u0f8c\u0fa3\7\u019c\2\2"+
		"\u0f8d\u0f8e\7\u0122\2\2\u0f8e\u0f8f\7\u0181\2\2\u0f8f\u0f91\7\u019b\2"+
		"\2\u0f90\u0f92\5\u01d2\u00ea\2\u0f91\u0f90\3\2\2\2\u0f91\u0f92\3\2\2\2"+
		"\u0f92\u0f93\3\2\2\2\u0f93\u0fa3\7\u019c\2\2\u0f94\u0f95\7\u0123\2\2\u0f95"+
		"\u0f96\7\u0181\2\2\u0f96\u0f98\7\u019b\2\2\u0f97\u0f99\5\u01d2\u00ea\2"+
		"\u0f98\u0f97\3\2\2\2\u0f98\u0f99\3\2\2\2\u0f99\u0f9a\3\2\2\2\u0f9a\u0fa3"+
		"\7\u019c\2\2\u0f9b\u0f9c\7\u0124\2\2\u0f9c\u0f9d\7\u0181\2\2\u0f9d\u0f9f"+
		"\7\u019b\2\2\u0f9e\u0fa0\5\u01d6\u00ec\2\u0f9f\u0f9e\3\2\2\2\u0f9f\u0fa0"+
		"\3\2\2\2\u0fa0\u0fa1\3\2\2\2\u0fa1\u0fa3\7\u019c\2\2\u0fa2\u0f71\3\2\2"+
		"\2\u0fa2\u0f78\3\2\2\2\u0fa2\u0f7f\3\2\2\2\u0fa2\u0f86\3\2\2\2\u0fa2\u0f8d"+
		"\3\2\2\2\u0fa2\u0f94\3\2\2\2\u0fa2\u0f9b\3\2\2\2\u0fa3\u01cd\3\2\2\2\u0fa4"+
		"\u0fa9\5\u041c\u020f\2\u0fa5\u0fa6\7\u0198\2\2\u0fa6\u0fa8\5\u041c\u020f"+
		"\2\u0fa7\u0fa5\3\2\2\2\u0fa8\u0fab\3\2\2\2\u0fa9\u0fa7\3\2\2\2\u0fa9\u0faa"+
		"\3\2\2\2\u0faa\u01cf\3\2\2\2\u0fab\u0fa9\3\2\2\2\u0fac\u0fb1\5\u0444\u0223"+
		"\2\u0fad\u0fae\7\u0198\2\2\u0fae\u0fb0\5\u0444\u0223\2\u0faf\u0fad\3\2"+
		"\2\2\u0fb0\u0fb3\3\2\2\2\u0fb1\u0faf\3\2\2\2\u0fb1\u0fb2\3\2\2\2\u0fb2"+
		"\u01d1\3\2\2\2\u0fb3\u0fb1\3\2\2\2\u0fb4\u0fb9\5\u01d4\u00eb\2\u0fb5\u0fb6"+
		"\7\u0198\2\2\u0fb6\u0fb8\5\u01d4\u00eb\2\u0fb7\u0fb5\3\2\2\2\u0fb8\u0fbb"+
		"\3\2\2\2\u0fb9\u0fb7\3\2\2\2\u0fb9\u0fba\3\2\2\2\u0fba\u01d3\3\2\2\2\u0fbb"+
		"\u0fb9\3\2\2\2\u0fbc\u0fbd\5\u0484\u0243\2\u0fbd\u01d5\3\2\2\2\u0fbe\u0fc3"+
		"\5\u03d8\u01ed\2\u0fbf\u0fc0\7\u0198\2\2\u0fc0\u0fc2\5\u03d8\u01ed\2\u0fc1"+
		"\u0fbf\3\2\2\2\u0fc2\u0fc5\3\2\2\2\u0fc3\u0fc1\3\2\2\2\u0fc3\u0fc4\3\2"+
		"\2\2\u0fc4\u01d7\3\2\2\2\u0fc5\u0fc3\3\2\2\2\u0fc6\u0fc7\7\62\2\2\u0fc7"+
		"\u0fc9\7/\2\2\u0fc8\u0fca\5\u01de\u00f0\2\u0fc9\u0fc8\3\2\2\2\u0fc9\u0fca"+
		"\3\2\2\2\u0fca\u0fcd\3\2\2\2\u0fcb\u0fcc\7\u016c\2\2\u0fcc\u0fce\5\u01da"+
		"\u00ee\2\u0fcd\u0fcb\3\2\2\2\u0fcd\u0fce\3\2\2\2\u0fce\u0fcf\3\2\2\2\u0fcf"+
		"\u0fd1\5\u01dc\u00ef\2\u0fd0\u0fd2\5\u0308\u0185\2\u0fd1\u0fd0\3\2\2\2"+
		"\u0fd1\u0fd2\3\2\2\2\u0fd2\u0fdc\3\2\2\2\u0fd3\u0fd4\7\63\2\2\u0fd4\u0fd6"+
		"\7/\2\2\u0fd5\u0fd7\5\u01de\u00f0\2\u0fd6\u0fd5\3\2\2\2\u0fd6\u0fd7\3"+
		"\2\2\2\u0fd7\u0fd9\3\2\2\2\u0fd8\u0fda\5\u0308\u0185\2\u0fd9\u0fd8\3\2"+
		"\2\2\u0fd9\u0fda\3\2\2\2\u0fda\u0fdc\3\2\2\2\u0fdb\u0fc6\3\2\2\2\u0fdb"+
		"\u0fd3\3\2\2\2\u0fdc\u01d9\3\2\2\2\u0fdd\u0fe5\5\u01c6\u00e4\2\u0fde\u0fdf"+
		"\6\u00eeJ\2\u0fdf\u0fe0\t-\2\2\u0fe0\u0fe1\7\u0181\2\2\u0fe1\u0fe5\5\u047e"+
		"\u0240\2\u0fe2\u0fe3\6\u00eeK\2\u0fe3\u0fe5\7\u013e\2\2\u0fe4\u0fdd\3"+
		"\2\2\2\u0fe4\u0fde\3\2\2\2\u0fe4\u0fe2\3\2\2\2\u0fe5\u0fea\3\2\2\2\u0fe6"+
		"\u0fe7\7\u0198\2\2\u0fe7\u0fe9\5\u01c6\u00e4\2\u0fe8\u0fe6\3\2\2\2\u0fe9"+
		"\u0fec\3\2\2\2\u0fea\u0fe8\3\2\2\2\u0fea\u0feb\3\2\2\2\u0feb\u01db\3\2"+
		"\2\2\u0fec\u0fea\3\2\2\2\u0fed\u0ff1\6\u00efL\2\u0fee\u0fef\7\u016e\2"+
		"\2\u0fef\u0ff0\7\u0181\2\2\u0ff0\u0ff2\5\u047e\u0240\2\u0ff1\u0fee\3\2"+
		"\2\2\u0ff1\u0ff2\3\2\2\2\u0ff2\u0ff6\3\2\2\2\u0ff3\u0ff4\7\u00fd\2\2\u0ff4"+
		"\u0ff5\7\u0181\2\2\u0ff5\u0ff7\5\u047e\u0240\2\u0ff6\u0ff3\3\2\2\2\u0ff6"+
		"\u0ff7\3\2\2\2\u0ff7\u0ffb\3\2\2\2\u0ff8\u0ff9\7t\2\2\u0ff9\u0ffa\7\u0181"+
		"\2\2\u0ffa\u0ffc\5\u047e\u0240\2\u0ffb\u0ff8\3\2\2\2\u0ffb\u0ffc\3\2\2"+
		"\2\u0ffc\u1000\3\2\2\2\u0ffd\u0ffe\7\u00ff\2\2\u0ffe\u0fff\7\u0181\2\2"+
		"\u0fff\u1001\5\u047e\u0240\2\u1000\u0ffd\3\2\2\2\u1000\u1001\3\2\2\2\u1001"+
		"\u1004\3\2\2\2\u1002\u1004\3\2\2\2\u1003\u0fed\3\2\2\2\u1003\u1002\3\2"+
		"\2\2\u1004\u01dd\3\2\2\2\u1005\u100a\5\u01e0\u00f1\2\u1006\u1007\7\u0198"+
		"\2\2\u1007\u1009\5\u01e0\u00f1\2\u1008\u1006\3\2\2\2\u1009\u100c\3\2\2"+
		"\2\u100a\u1008\3\2\2\2\u100a\u100b\3\2\2\2\u100b\u01df\3\2\2\2\u100c\u100a"+
		"\3\2\2\2\u100d\u100e\t.\2\2\u100e\u01e1\3\2\2\2\u100f\u1010\t/\2\2\u1010"+
		"\u1011\7\27\2\2\u1011\u01e3\3\2\2\2\u1012\u1013\7%\2\2\u1013\u1014\5\u0462"+
		"\u0232\2\u1014\u1017\7\u01fd\2\2\u1015\u1018\5\u0482\u0242\2\u1016\u1018"+
		"\5\u02e0\u0171\2\u1017\u1015\3\2\2\2\u1017\u1016\3\2\2\2\u1018\u101e\3"+
		"\2\2\2\u1019\u101e\5\u01e6\u00f4\2\u101a\u101b\t\60\2\2\u101b\u101c\7"+
		"%\2\2\u101c\u101e\5\u0462\u0232\2\u101d\u1012\3\2\2\2\u101d\u1019\3\2"+
		"\2\2\u101d\u101a\3\2\2\2\u101e\u01e5\3\2\2\2\u101f\u1020\7\23\2\2\u1020"+
		"\u1023\5\u0462\u0232\2\u1021\u1022\7\u029c\2\2\u1022\u1024\5\u01e8\u00f5"+
		"\2\u1023\u1021\3\2\2\2\u1023\u1024\3\2\2\2\u1024\u01e7\3\2\2\2\u1025\u102a"+
		"\5\u02e0\u0171\2\u1026\u1027\7\u0198\2\2\u1027\u1029\5\u02e0\u0171\2\u1028"+
		"\u1026\3\2\2\2\u1029\u102c\3\2\2\2\u102a\u1028\3\2\2\2\u102a\u102b\3\2"+
		"\2\2\u102b\u01e9\3\2\2\2\u102c\u102a\3\2\2\2\u102d\u1046\7\u02c5\2\2\u102e"+
		"\u102f\7\u00b6\2\2\u102f\u1030\7o\2\2\u1030\u1032\7y\2\2\u1031\u1033\5"+
		"\u04a0\u0251\2\u1032\u1031\3\2\2\2\u1032\u1033\3\2\2\2\u1033\u1034\3\2"+
		"\2\2\u1034\u1047\5\u047c\u023f\2\u1035\u1038\7\u02c4\2\2\u1036\u1037\7"+
		"\u01fc\2\2\u1037\u1039\7\u011d\2\2\u1038\u1036\3\2\2\2\u1038\u1039\3\2"+
		"\2\2\u1039\u1047\3\2\2\2\u103a\u103b\6\u00f6M\2\u103b\u103c\7\u00a7\2"+
		"\2\u103c\u103d\7\u01fd\2\2\u103d\u103e\5\u03fc\u01ff\2\u103e\u103f\7\u019a"+
		"\2\2\u103f\u1040\5\u046e\u0238\2\u1040\u1041\7\u00a1\2\2\u1041\u1042\7"+
		"\u01be\2\2\u1042\u1044\5\u047c\u023f\2\u1043\u1045\5\u01ec\u00f7\2\u1044"+
		"\u1043\3\2\2\2\u1044\u1045\3\2\2\2\u1045\u1047\3\2\2\2\u1046\u102e\3\2"+
		"\2\2\u1046\u1035\3\2\2\2\u1046\u103a\3\2\2\2\u1047\u01eb\3\2\2\2\u1048"+
		"\u1053\5\u01ee\u00f8\2\u1049\u104a\7o\2\2\u104a\u104c\7y\2\2\u104b\u104d"+
		"\5\u04a0\u0251\2\u104c\u104b\3\2\2\2\u104c\u104d\3\2\2\2\u104d\u104e\3"+
		"\2\2\2\u104e\u1050\5\u047c\u023f\2\u104f\u1051\5\u01ee\u00f8\2\u1050\u104f"+
		"\3\2\2\2\u1050\u1051\3\2\2\2\u1051\u1053\3\2\2\2\u1052\u1048\3\2\2\2\u1052"+
		"\u1049\3\2\2\2\u1053\u01ed\3\2\2\2\u1054\u1056\7\u0261\2\2\u1055\u1057"+
		"\7\35\2\2\u1056\u1055\3\2\2\2\u1056\u1057\3\2\2\2\u1057\u1058\3\2\2\2"+
		"\u1058\u1059\7\u027b\2\2\u1059\u01ef\3\2\2\2\u105a\u105b\6\u00f9N\2\u105b"+
		"\u1064\5\u01f2\u00fa\2\u105c\u1064\5\u01f8\u00fd\2\u105d\u1064\5\u0204"+
		"\u0103\2\u105e\u1064\5\u0206\u0104\2\u105f\u1064\5\u0214\u010b\2\u1060"+
		"\u1064\5\u0216\u010c\2\u1061\u1062\6\u00f9O\2\u1062\u1064\5\u0228\u0115"+
		"\2\u1063\u105a\3\2\2\2\u1063\u105c\3\2\2\2\u1063\u105d\3\2\2\2\u1063\u105e"+
		"\3\2\2\2\u1063\u105f\3\2\2\2\u1063\u1060\3\2\2\2\u1063\u1061\3\2\2\2\u1064"+
		"\u01f1\3\2\2\2\u1065\u1066\7\u01ae\2\2\u1066\u1069\7\u016e\2\2\u1067\u1068"+
		"\6\u00faP\2\u1068\u106a\5\u03cc\u01e7\2\u1069\u1067\3\2\2\2\u1069\u106a"+
		"\3\2\2\2\u106a\u106b\3\2\2\2\u106b\u106c\5\u01f4\u00fb\2\u106c\u01f3\3"+
		"\2\2\2\u106d\u106e\6\u00fbQ\2\u106e\u1072\5\u03ec\u01f7\2\u106f\u1070"+
		"\6\u00fbR\2\u1070\u1072\5\u03ee\u01f8\2\u1071\u106d\3\2\2\2\u1071\u106f"+
		"\3\2\2\2\u1072\u1073\3\2\2\2\u1073\u1074\5\u01fa\u00fe\2\u1074\u109d\3"+
		"\2\2\2\u1075\u1076\6\u00fbS\2\u1076\u1077\5\u03fc\u01ff\2\u1077\u1078"+
		"\7\u00a1\2\2\u1078\u1079\7\u01be\2\2\u1079\u107c\5\u047e\u0240\2\u107a"+
		"\u107b\6\u00fbT\2\u107b\u107d\5\u03f8\u01fd\2\u107c\u107a\3\2\2\2\u107c"+
		"\u107d\3\2\2\2\u107d\u1080\3\2\2\2\u107e\u107f\6\u00fbU\2\u107f\u1081"+
		"\5\u03f4\u01fb\2\u1080\u107e\3\2\2\2\u1080\u1081\3\2\2\2\u1081\u109d\3"+
		"\2\2\2\u1082\u1083\6\u00fbV\2\u1083\u1084\5\u03fc\u01ff\2\u1084\u1085"+
		"\5\u03f6\u01fc\2\u1085\u109d\3\2\2\2\u1086\u1087\6\u00fbW\2\u1087\u1088"+
		"\5\u03fc\u01ff\2\u1088\u1089\7\u01e0\2\2\u1089\u108d\7\u02b3\2\2\u108a"+
		"\u108e\7\u01ad\2\2\u108b\u108e\7\u00f1\2\2\u108c\u108e\5\u022a\u0116\2"+
		"\u108d\u108a\3\2\2\2\u108d\u108b\3\2\2\2\u108d\u108c\3\2\2\2\u108e\u109d"+
		"\3\2\2\2\u108f\u1090\6\u00fbX\2\u1090\u1091\5\u03fc\u01ff\2\u1091\u1094"+
		"\7\u00a1\2\2\u1092\u1093\7\u02ac\2\2\u1093\u1095\5\u0496\u024c\2\u1094"+
		"\u1092\3\2\2\2\u1094\u1095\3\2\2\2\u1095\u1096\3\2\2\2\u1096\u1097\7\u01be"+
		"\2\2\u1097\u1098\7\u02fe\2\2\u1098\u109a\7\u00fd\2\2\u1099\u109b\5\u03f4"+
		"\u01fb\2\u109a\u1099\3\2\2\2\u109a\u109b\3\2\2\2\u109b\u109d\3\2\2\2\u109c"+
		"\u1071\3\2\2\2\u109c\u1075\3\2\2\2\u109c\u1082\3\2\2\2\u109c\u1086\3\2"+
		"\2\2\u109c\u108f\3\2\2\2\u109d\u01f5\3\2\2\2\u109e\u109f\7\u016e\2\2\u109f"+
		"\u10a0\5\u049e\u0250\2\u10a0\u01f7\3\2\2\2\u10a1\u10a2\7\u01cd\2\2\u10a2"+
		"\u10a6\7\u016e\2\2\u10a3\u10a4\6\u00fdY\2\u10a4\u10a7\5\u03ce\u01e8\2"+
		"\u10a5\u10a7\3\2\2\2\u10a6\u10a3\3\2\2\2\u10a6\u10a5\3\2\2\2\u10a7\u10a8"+
		"\3\2\2\2\u10a8\u10a9\5\u03ec\u01f7\2\u10a9\u10aa\5\u01fc\u00ff\2\u10aa"+
		"\u10ab\5\u01fa\u00fe\2\u10ab\u01f9\3\2\2\2\u10ac\u10ae\6\u00feZ\2\u10ad"+
		"\u10af\5\u01fe\u0100\2\u10ae\u10ad\3\2\2\2\u10ae\u10af\3\2\2\2\u10af\u10b1"+
		"\3\2\2\2\u10b0\u10b2\5\u0200\u0101\2\u10b1\u10b0\3\2\2\2\u10b1\u10b2\3"+
		"\2\2\2\u10b2\u10b6\3\2\2\2\u10b3\u10b5\5\u0202\u0102\2\u10b4\u10b3\3\2"+
		"\2\2\u10b5\u10b8\3\2\2\2\u10b6\u10b4\3\2\2\2\u10b6\u10b7\3\2\2\2\u10b7"+
		"\u10bb\3\2\2\2\u10b8\u10b6\3\2\2\2\u10b9\u10bb\3\2\2\2\u10ba\u10ac\3\2"+
		"\2\2\u10ba\u10b9\3\2\2\2\u10bb\u01fb\3\2\2\2\u10bc\u10c0\6\u00ff[\2\u10bd"+
		"\u10be\7\u01e0\2\2\u10be\u10bf\7\u02b3\2\2\u10bf\u10c1\5\u022a\u0116\2"+
		"\u10c0\u10bd\3\2\2\2\u10c0\u10c1\3\2\2\2\u10c1\u10c4\3\2\2\2\u10c2\u10c4"+
		"\3\2\2\2\u10c3\u10bc\3\2\2\2\u10c3\u10c2\3\2\2\2\u10c4\u01fd\3\2\2\2\u10c5"+
		"\u10c8\7\u0261\2\2\u10c6\u10c9\5\u0222\u0112\2\u10c7\u10c9\t\61\2\2\u10c8"+
		"\u10c6\3\2\2\2\u10c8\u10c7\3\2\2\2\u10c9\u01ff\3\2\2\2\u10ca\u10d3\7\u02ac"+
		"\2\2\u10cb\u10cc\7\u00d2\2\2\u10cc\u10d4\5\u046e\u0238\2\u10cd\u10ce\7"+
		"\u00d5\2\2\u10ce\u10d4\5\u046e\u0238\2\u10cf\u10d0\7\u00d1\2\2\u10d0\u10d4"+
		"\5\u046e\u0238\2\u10d1\u10d2\7\u00d6\2\2\u10d2\u10d4\5\u046e\u0238\2\u10d3"+
		"\u10cb\3\2\2\2\u10d3\u10cd\3\2\2\2\u10d3\u10cf\3\2\2\2\u10d3\u10d1\3\2"+
		"\2\2\u10d4\u10d5\3\2\2\2\u10d5\u10d3\3\2\2\2\u10d5\u10d6\3\2\2\2\u10d6"+
		"\u0201\3\2\2\2\u10d7\u10d8\7\3\2\2\u10d8\u10f9\t\62\2\2\u10d9\u10f6\7"+
		"\u00fd\2\2\u10da\u10e1\7\u01f4\2\2\u10db\u10dc\7\u0211\2\2\u10dc\u10dd"+
		"\5\u0470\u0239\2\u10dd\u10de\7s\2\2\u10de\u10e2\3\2\2\2\u10df\u10e2\7"+
		"\u00ec\2\2\u10e0\u10e2\7\u01e0\2\2\u10e1\u10db\3\2\2\2\u10e1\u10df\3\2"+
		"\2\2\u10e1\u10e0\3\2\2\2\u10e1\u10e2\3\2\2\2\u10e2\u10f7\3\2\2\2\u10e3"+
		"\u10e6\7\u02e1\2\2\u10e4\u10e7\5\u0470\u0239\2\u10e5\u10e7\7\u01e0\2\2"+
		"\u10e6\u10e4\3\2\2\2\u10e6\u10e5\3\2\2\2\u10e7\u10f7\3\2\2\2\u10e8\u10e9"+
		"\7\u02e2\2\2\u10e9\u10ee\7\u0211\2\2\u10ea\u10eb\5\u0470\u0239\2\u10eb"+
		"\u10ec\7s\2\2\u10ec\u10ef\3\2\2\2\u10ed\u10ef\7\u01e0\2\2\u10ee\u10ea"+
		"\3\2\2\2\u10ee\u10ed\3\2\2\2\u10ef\u10f7\3\2\2\2\u10f0\u10f1\6\u0102\\"+
		"\2\u10f1\u10f2\7\u0261\2\2\u10f2\u10f4\7m\2\2\u10f3\u10f5\t\63\2\2\u10f4"+
		"\u10f3\3\2\2\2\u10f4\u10f5\3\2\2\2\u10f5\u10f7\3\2\2\2\u10f6\u10da\3\2"+
		"\2\2\u10f6\u10e3\3\2\2\2\u10f6\u10e8\3\2\2\2\u10f6\u10f0\3\2\2\2\u10f7"+
		"\u10f9\3\2\2\2\u10f8\u10d7\3\2\2\2\u10f8\u10d9\3\2\2\2\u10f9\u0203\3\2"+
		"\2\2\u10fa\u10fb\7\u01e9\2\2\u10fb\u10fe\7\u016e\2\2\u10fc\u10fd\6\u0103"+
		"]\2\u10fd\u10ff\5\u03cc\u01e7\2\u10fe\u10fc\3\2\2\2\u10fe\u10ff\3\2\2"+
		"\2\u10ff\u1100\3\2\2\2\u1100\u1101\5\u03ea\u01f6\2\u1101\u0205\3\2\2\2"+
		"\u1102\u112d\7\u0201\2\2\u1103\u1104\6\u0104^\2\u1104\u1105\5\u021c\u010f"+
		"\2\u1105\u1106\7\u028f\2\2\u1106\u110a\5\u03ea\u01f6\2\u1107\u1108\7\u02ac"+
		"\2\2\u1108\u1109\7\u02b4\2\2\u1109\u110b\7\u024a\2\2\u110a\u1107\3\2\2"+
		"\2\u110a\u110b\3\2\2\2\u110b\u112e\3\2\2\2\u110c\u1112\5\u021c\u010f\2"+
		"\u110d\u110f\7\u01ad\2\2\u110e\u1110\7\u0106\2\2\u110f\u110e\3\2\2\2\u110f"+
		"\u1110\3\2\2\2\u1110\u1112\3\2\2\2\u1111\u110c\3\2\2\2\u1111\u110d\3\2"+
		"\2\2\u1112\u1113\3\2\2\2\u1113\u1115\7\u0245\2\2\u1114\u1116\5\u021a\u010e"+
		"\2\u1115\u1114\3\2\2\2\u1115\u1116\3\2\2\2\u1116\u1117\3\2\2\2\u1117\u1118"+
		"\5\u0220\u0111\2\u1118\u1119\7\u028f\2\2\u1119\u111b\5\u0208\u0105\2\u111a"+
		"\u111c\5\u0212\u010a\2\u111b\u111a\3\2\2\2\u111b\u111c\3\2\2\2\u111c\u111e"+
		"\3\2\2\2\u111d\u111f\5\u020a\u0106\2\u111e\u111d\3\2\2\2\u111e\u111f\3"+
		"\2\2\2\u111f\u1121\3\2\2\2\u1120\u1122\5\u0210\u0109\2\u1121\u1120\3\2"+
		"\2\2\u1121\u1122\3\2\2\2\u1122\u112e\3\2\2\2\u1123\u1124\7\u010b\2\2\u1124"+
		"\u1125\7\u0245\2\2\u1125\u1126\5\u03fc\u01ff\2\u1126\u1127\7\u028f\2\2"+
		"\u1127\u112b\5\u0208\u0105\2\u1128\u1129\7\u02ac\2\2\u1129\u112a\7\u0201"+
		"\2\2\u112a\u112c\7\u024a\2\2\u112b\u1128\3\2\2\2\u112b\u112c\3\2\2\2\u112c"+
		"\u112e\3\2\2\2\u112d\u1103\3\2\2\2\u112d\u1111\3\2\2\2\u112d\u1123\3\2"+
		"\2\2\u112e\u0207\3\2\2\2\u112f\u1130\6\u0105_\2\u1130\u1134\5\u03ec\u01f7"+
		"\2\u1131\u1132\6\u0105`\2\u1132\u1134\5\u03ea\u01f6\2\u1133\u112f\3\2"+
		"\2\2\u1133\u1131\3\2\2\2\u1134\u0209\3\2\2\2\u1135\u1136\6\u0106a\2\u1136"+
		"\u1138\7\u02ac\2\2\u1137\u1139\5\u0226\u0114\2\u1138\u1137\3\2\2\2\u1139"+
		"\u113a\3\2\2\2\u113a\u1138\3\2\2\2\u113a\u113b\3\2\2\2\u113b\u1141\3\2"+
		"\2\2\u113c\u113d\6\u0106b\2\u113d\u113e\7\u02ac\2\2\u113e\u113f\7\u0201"+
		"\2\2\u113f\u1141\7\u024a\2\2\u1140\u1135\3\2\2\2\u1140\u113c\3\2\2\2\u1141"+
		"\u020b\3\2\2\2\u1142\u1143\7\u02b7\2\2\u1143\u1144\5\u022a\u0116\2\u1144"+
		"\u020d\3\2\2\2\u1145\u1146\7\u02ac\2\2\u1146\u114e\7\u02b3\2\2\u1147\u114f"+
		"\5\u022a\u0116\2\u1148\u114a\7\u01ad\2\2\u1149\u114b\5\u020c\u0107\2\u114a"+
		"\u1149\3\2\2\2\u114a\u114b\3\2\2\2\u114b\u114f\3\2\2\2\u114c\u114f\7\u00f1"+
		"\2\2\u114d\u114f\7\u01e0\2\2\u114e\u1147\3\2\2\2\u114e\u1148\3\2\2\2\u114e"+
		"\u114c\3\2\2\2\u114e\u114d\3\2\2\2\u114f\u020f\3\2\2\2\u1150\u1151\7\u01b1"+
		"\2\2\u1151\u1153\7\u016e\2\2\u1152\u1154\5\u020e\u0108\2\u1153\u1152\3"+
		"\2\2\2\u1153\u1154\3\2\2\2\u1154\u0211\3\2\2\2\u1155\u1156\6\u010ac\2"+
		"\u1156\u1157\5\u01fe\u0100\2\u1157\u0213\3\2\2\2\u1158\u1159\7\u025e\2"+
		"\2\u1159\u115a\7\u016e\2\2\u115a\u115b\5\u03fc\u01ff\2\u115b\u115c\7\u028f"+
		"\2\2\u115c\u1164\5\u03fc\u01ff\2\u115d\u115e\7\u0198\2\2\u115e\u115f\5"+
		"\u03fc\u01ff\2\u115f\u1160\7\u028f\2\2\u1160\u1161\5\u03fc\u01ff\2\u1161"+
		"\u1163\3\2\2\2\u1162\u115d\3\2\2\2\u1163\u1166\3\2\2\2\u1164\u1162\3\2"+
		"\2\2\u1164\u1165\3\2\2\2\u1165\u0215\3\2\2\2\u1166\u1164\3\2\2\2\u1167"+
		"\u1189\7\u0265\2\2\u1168\u1169\6\u010cd\2\u1169\u116a\5\u021c\u010f\2"+
		"\u116a\u116b\7\u01fd\2\2\u116b\u116c\5\u03ea\u01f6\2\u116c\u118a\3\2\2"+
		"\2\u116d\u116e\5\u021c\u010f\2\u116e\u116f\5\u0218\u010d\2\u116f\u1170"+
		"\7\u01fd\2\2\u1170\u1171\5\u03ea\u01f6\2\u1171\u118a\3\2\2\2\u1172\u1174"+
		"\7\u01ad\2\2\u1173\u1175\7\u0106\2\2\u1174\u1173\3\2\2\2\u1174\u1175\3"+
		"\2\2\2\u1175\u1181\3\2\2\2\u1176\u1177\6\u010ce\2\u1177\u1179\7\u0245"+
		"\2\2\u1178\u117a\5\u021a\u010e\2\u1179\u1178\3\2\2\2\u1179\u117a\3\2\2"+
		"\2\u117a\u117b\3\2\2\2\u117b\u1182\5\u0220\u0111\2\u117c\u117d\7\u0198"+
		"\2\2\u117d\u117e\7\u0201\2\2\u117e\u117f\7\u024a\2\2\u117f\u1180\7\u01fd"+
		"\2\2\u1180\u1182\5\u03ea\u01f6\2\u1181\u1176\3\2\2\2\u1181\u117c\3\2\2"+
		"\2\u1182\u118a\3\2\2\2\u1183\u1184\7\u010b\2\2\u1184\u1185\7\u0245\2\2"+
		"\u1185\u1186\5\u03fc\u01ff\2\u1186\u1187\7\u01fd\2\2\u1187\u1188\5\u03ea"+
		"\u01f6\2\u1188\u118a\3\2\2\2\u1189\u1168\3\2\2\2\u1189\u116d\3\2\2\2\u1189"+
		"\u1172\3\2\2\2\u1189\u1183\3\2\2\2\u118a\u0217\3\2\2\2\u118b\u118c\6\u010d"+
		"f\2\u118c\u118e\7\u0245\2\2\u118d\u118f\5\u021a\u010e\2\u118e\u118d\3"+
		"\2\2\2\u118e\u118f\3\2\2\2\u118f\u1190\3\2\2\2\u1190\u119a\5\u0220\u0111"+
		"\2\u1191\u1197\6\u010dg\2\u1192\u1194\7\u0245\2\2\u1193\u1195\5\u021a"+
		"\u010e\2\u1194\u1193\3\2\2\2\u1194\u1195\3\2\2\2\u1195\u1196\3\2\2\2\u1196"+
		"\u1198\5\u0220\u0111\2\u1197\u1192\3\2\2\2\u1197\u1198\3\2\2\2\u1198\u119a"+
		"\3\2\2\2\u1199\u118b\3\2\2\2\u1199\u1191\3\2\2\2\u119a\u0219\3\2\2\2\u119b"+
		"\u119c\t\64\2\2\u119c\u021b\3\2\2\2\u119d\u11a2\5\u021e\u0110\2\u119e"+
		"\u119f\7\u0198\2\2\u119f\u11a1\5\u021e\u0110\2\u11a0\u119e\3\2\2\2\u11a1"+
		"\u11a4\3\2\2\2\u11a2\u11a0\3\2\2\2\u11a2\u11a3\3\2\2\2\u11a3\u021d\3\2"+
		"\2\2\u11a4\u11a2\3\2\2\2\u11a5\u11b0\6\u0110h\2\u11a6\u11a8\5\u049a\u024e"+
		"\2\u11a7\u11a9\5\u040e\u0208\2\u11a8\u11a7\3\2\2\2\u11a8\u11a9\3\2\2\2"+
		"\u11a9\u11b1\3\2\2\2\u11aa\u11ae\5\u049a\u024e\2\u11ab\u11af\7\u01a3\2"+
		"\2\u11ac\u11ad\7\u01a2\2\2\u11ad\u11af\5\u0496\u024c\2\u11ae\u11ab\3\2"+
		"\2\2\u11ae\u11ac\3\2\2\2\u11af\u11b1\3\2\2\2\u11b0\u11a6\3\2\2\2\u11b0"+
		"\u11aa\3\2\2\2\u11b1\u11cf\3\2\2\2\u11b2\u11b4\t\65\2\2\u11b3\u11b5\5"+
		"\u040e\u0208\2\u11b4\u11b3\3\2\2\2\u11b4\u11b5\3\2\2\2\u11b5\u11cf\3\2"+
		"\2\2\u11b6\u11cf\t\66\2\2\u11b7\u11b8\7\u0201\2\2\u11b8\u11cf\7\u024a"+
		"\2\2\u11b9\u11ba\7\u026f\2\2\u11ba\u11cf\7\u01d6\2\2\u11bb\u11bf\7\u01cd"+
		"\2\2\u11bc\u11bd\7\u0159\2\2\u11bd\u11c0\7\u0156\2\2\u11be\u11c0\t\67"+
		"\2\2\u11bf\u11bc\3\2\2\2\u11bf\u11be\3\2\2\2\u11bf\u11c0\3\2\2\2\u11c0"+
		"\u11cf\3\2\2\2\u11c1\u11c2\7\u0226\2\2\u11c2\u11cf\7\u0156\2\2\u11c3\u11c4"+
		"\7\u011d\2\2\u11c4\u11cf\t8\2\2\u11c5\u11c6\7\u026f\2\2\u11c6\u11cf\7"+
		"\u0171\2\2\u11c7\u11c9\7\u01ae\2\2\u11c8\u11ca\7\u012b\2\2\u11c9\u11c8"+
		"\3\2\2\2\u11c9\u11ca\3\2\2\2\u11ca\u11cf\3\2\2\2\u11cb\u11cc\6\u0110i"+
		"\2\u11cc\u11cd\t9\2\2\u11cd\u11cf\7\u02b3\2\2\u11ce\u11a5\3\2\2\2\u11ce"+
		"\u11b2\3\2\2\2\u11ce\u11b6\3\2\2\2\u11ce\u11b7\3\2\2\2\u11ce\u11b9\3\2"+
		"\2\2\u11ce\u11bb\3\2\2\2\u11ce\u11c1\3\2\2\2\u11ce\u11c3\3\2\2\2\u11ce"+
		"\u11c5\3\2\2\2\u11ce\u11c7\3\2\2\2\u11ce\u11cb\3\2\2\2\u11cf\u021f\3\2"+
		"\2\2\u11d0\u11d3\7\u018b\2\2\u11d1\u11d2\7\u0197\2\2\u11d2\u11d4\7\u018b"+
		"\2\2\u11d3\u11d1\3\2\2\2\u11d3\u11d4\3\2\2\2\u11d4\u11e1\3\2\2\2\u11d5"+
		"\u11d8\5\u041c\u020f\2\u11d6\u11d7\7\u0197\2\2\u11d7\u11d9\7\u018b\2\2"+
		"\u11d8\u11d6\3\2\2\2\u11d8\u11d9\3\2\2\2\u11d9\u11e1\3\2\2\2\u11da\u11e1"+
		"\5\u0448\u0225\2\u11db\u11dc\6\u0111j\2\u11dc\u11dd\5\u041c\u020f\2\u11dd"+
		"\u11de\7\u0197\2\2\u11de\u11df\5\u0448\u0225\2\u11df\u11e1\3\2\2\2\u11e0"+
		"\u11d0\3\2\2\2\u11e0\u11d5\3\2\2\2\u11e0\u11da\3\2\2\2\u11e0\u11db\3\2"+
		"\2\2\u11e1\u0221\3\2\2\2\u11e2\u11e9\5\u0224\u0113\2\u11e3\u11e5\7\u01b0"+
		"\2\2\u11e4\u11e3\3\2\2\2\u11e4\u11e5\3\2\2\2\u11e5\u11e6\3\2\2\2\u11e6"+
		"\u11e8\5\u0224\u0113\2\u11e7\u11e4\3\2\2\2\u11e8\u11eb\3\2\2\2\u11e9\u11e7"+
		"\3\2\2\2\u11e9\u11ea\3\2\2\2\u11ea\u0223\3\2\2\2\u11eb\u11e9\3\2\2\2\u11ec"+
		"\u11ed\7T\2\2\u11ed\u11f3\5\u047e\u0240\2\u11ee\u11ef\7\u00ac\2\2\u11ef"+
		"\u11f3\5\u047e\u0240\2\u11f0\u11f1\7\u014e\2\2\u11f1\u11f3\5\u047e\u0240"+
		"\2\u11f2\u11ec\3\2\2\2\u11f2\u11ee\3\2\2\2\u11f2\u11f0\3\2\2\2\u11f3\u0225"+
		"\3\2\2\2\u11f4\u11f5\7\u0201\2\2\u11f5\u11ff\7\u024a\2\2\u11f6\u11f7\7"+
		"\u00d2\2\2\u11f7\u11ff\5\u046e\u0238\2\u11f8\u11f9\7\u00d5\2\2\u11f9\u11ff"+
		"\5\u046e\u0238\2\u11fa\u11fb\7\u00d1\2\2\u11fb\u11ff\5\u046e\u0238\2\u11fc"+
		"\u11fd\7\u00d6\2\2\u11fd\u11ff\5\u046e\u0238\2\u11fe\u11f4\3\2\2\2\u11fe"+
		"\u11f6\3\2\2\2\u11fe\u11f8\3\2\2\2\u11fe\u11fa\3\2\2\2\u11fe\u11fc\3\2"+
		"\2\2\u11ff\u0227\3\2\2\2\u1200\u1201\7\u026d\2\2\u1201\u1202\7\u02b3\2"+
		"\2\u1202\u1218\5\u022a\u0116\2\u1203\u1204\7\u026d\2\2\u1204\u1205\7\u02b3"+
		"\2\2\u1205\u1218\t:\2\2\u1206\u1207\7\u026d\2\2\u1207\u1208\7\u01e0\2"+
		"\2\u1208\u120c\7\u02b3\2\2\u1209\u120d\5\u022a\u0116\2\u120a\u120d\7\u00f1"+
		"\2\2\u120b\u120d\7\u01ad\2\2\u120c\u1209\3\2\2\2\u120c\u120a\3\2\2\2\u120c"+
		"\u120b\3\2\2\2\u120d\u120e\3\2\2\2\u120e\u120f\7\u028f\2\2\u120f\u1218"+
		"\5\u022a\u0116\2\u1210\u1211\7\u026d\2\2\u1211\u1212\7\u02b3\2\2\u1212"+
		"\u1215\7\u01ad\2\2\u1213\u1214\7\u02b7\2\2\u1214\u1216\5\u022a\u0116\2"+
		"\u1215\u1213\3\2\2\2\u1215\u1216\3\2\2\2\u1216\u1218\3\2\2\2\u1217\u1200"+
		"\3\2\2\2\u1217\u1203\3\2\2\2\u1217\u1206\3\2\2\2\u1217\u1210\3\2\2\2\u1218"+
		"\u0229\3\2\2\2\u1219\u121e\5\u022c\u0117\2\u121a\u121b\7\u0198\2\2\u121b"+
		"\u121d\5\u022c\u0117\2\u121c\u121a\3\2\2\2\u121d\u1220\3\2\2\2\u121e\u121c"+
		"\3\2\2\2\u121e\u121f\3\2\2\2\u121f\u022b\3\2\2\2\u1220\u121e\3\2\2\2\u1221"+
		"\u1225\5\u049a\u024e\2\u1222\u1223\7\u01a2\2\2\u1223\u1226\5\u0496\u024c"+
		"\2\u1224\u1226\7\u01a3\2\2\u1225\u1222\3\2\2\2\u1225\u1224\3\2\2\2\u1225"+
		"\u1226\3\2\2\2\u1226\u022d\3\2\2\2\u1227\u1229\7A\2\2\u1228\u122a\5\u0404"+
		"\u0203\2\u1229\u1228\3\2\2\2\u1229\u122a\3\2\2\2\u122a\u122b\3\2\2\2\u122b"+
		"\u122c\7\u0289\2\2\u122c\u122f\5\u044a\u0226\2\u122d\u122e\6\u0118k\2"+
		"\u122e\u1230\5\u0230\u0119\2\u122f\u122d\3\2\2\2\u122f\u1230\3\2\2\2\u1230"+
		"\u1253\3\2\2\2\u1231\u1232\7\u01c5\2\2\u1232\u1233\7\u0289\2\2\u1233\u1237"+
		"\5\u044a\u0226\2\u1234\u1236\5\u0232\u011a\2\u1235\u1234\3\2\2\2\u1236"+
		"\u1239\3\2\2\2\u1237\u1235\3\2\2\2\u1237\u1238\3\2\2\2\u1238\u1253\3\2"+
		"\2\2\u1239\u1237\3\2\2\2\u123a\u123b\7\13\2\2\u123b\u123c\7\u0289\2\2"+
		"\u123c\u123e\5\u044a\u0226\2\u123d\u123f\t;\2\2\u123e\u123d\3\2\2\2\u123e"+
		"\u123f\3\2\2\2\u123f\u1253\3\2\2\2\u1240\u1242\7\u0248\2\2\u1241\u1243"+
		"\5\u0404\u0203\2\u1242\u1241\3\2\2\2\u1242\u1243\3\2\2\2\u1243\u1244\3"+
		"\2\2\2\u1244\u1245\7\u0289\2\2\u1245\u1253\5\u044a\u0226\2\u1246\u1248"+
		"\7\'\2\2\u1247\u1249\5\u0404\u0203\2\u1248\u1247\3\2\2\2\u1248\u1249\3"+
		"\2\2\2\u1249\u124a\3\2\2\2\u124a\u124b\7\u0289\2\2\u124b\u124f\5\u044a"+
		"\u0226\2\u124c\u124e\5\u0234\u011b\2\u124d\u124c\3\2\2\2\u124e\u1251\3"+
		"\2\2\2\u124f\u124d\3\2\2\2\u124f\u1250\3\2\2\2\u1250\u1253\3\2\2\2\u1251"+
		"\u124f\3\2\2\2\u1252\u1227\3\2\2\2\u1252\u1231\3\2\2\2\u1252\u123a\3\2"+
		"\2\2\u1252\u1240\3\2\2\2\u1252\u1246\3\2\2\2\u1253\u022f\3\2\2\2\u1254"+
		"\u1255\7\u0299\2\2\u1255\u1256\7\u02c2\2\2\u1256\u1257\7\u0245\2\2\u1257"+
		"\u125b\5\u0464\u0233\2\u1258\u1259\7\u02ac\2\2\u1259\u125a\7\u017e\2\2"+
		"\u125a\u125c\7\u02c3\2\2\u125b\u1258\3\2\2\2\u125b\u125c\3\2\2\2\u125c"+
		"\u1262\3\2\2\2\u125d\u125e\7\u01e9\2\2\u125e\u125f\7\u02c2\2\2\u125f\u1260"+
		"\7\u0245\2\2\u1260\u1262\5\u0464\u0233\2\u1261\u1254\3\2\2\2\u1261\u125d"+
		"\3\2\2\2\u1262\u0231\3\2\2\2\u1263\u1264\7\u01fc\2\2\u1264\u1267\7\67"+
		"\2\2\u1265\u1267\t<\2\2\u1266\u1263\3\2\2\2\u1266\u1265\3\2\2\2\u1267"+
		"\u0233\3\2\2\2\u1268\u1269\t=\2\2\u1269\u0235\3\2\2\2\u126a\u126b\7\33"+
		"\2\2\u126b\u126c\7\u0100\2\2\u126c\u126d\5\u0462\u0232\2\u126d\u126e\7"+
		"\61\2\2\u126e\u126f\5\u047c\u023f\2\u126f\u1281\3\2\2\2\u1270\u1271\7"+
		"\33\2\2\u1271\u1272\7\u02b8\2\2\u1272\u1281\5\u0486\u0244\2\u1273\u1274"+
		"\7\66\2\2\u1274\u1275\7\u0100\2\2\u1275\u1281\5\u0458\u022d\2\u1276\u1277"+
		"\7\66\2\2\u1277\u1278\7\u02b8\2\2\u1278\u127d\5\u045a\u022e\2\u1279\u127a"+
		"\7\u0198\2\2\u127a\u127c\5\u045a\u022e\2\u127b\u1279\3\2\2\2\u127c\u127f"+
		"\3\2\2\2\u127d\u127b\3\2\2\2\u127d\u127e\3\2\2\2\u127e\u1281\3\2\2\2\u127f"+
		"\u127d\3\2\2\2\u1280\u126a\3\2\2\2\u1280\u1270\3\2\2\2\u1280\u1273\3\2"+
		"\2\2\u1280\u1276\3\2\2\2\u1281\u0237\3\2\2\2\u1282\u1283\7\u026d\2\2\u1283"+
		"\u1284\5\u023a\u011e\2\u1284\u0239\3\2\2\2\u1285\u1286\5\u0244\u0123\2"+
		"\u1286\u1287\5\u0242\u0122\2\u1287\u12be\3\2\2\2\u1288\u1289\7\u015d\2"+
		"\2\u1289\u12be\5\u023c\u011f\2\u128a\u128b\5\u04a2\u0252\2\u128b\u128c"+
		"\5\u024a\u0126\2\u128c\u12be\3\2\2\2\u128d\u1290\7\u00fd\2\2\u128e\u128f"+
		"\7\u01fc\2\2\u128f\u1291\5\u03fc\u01ff\2\u1290\u128e\3\2\2\2\u1290\u1291"+
		"\3\2\2\2\u1291\u1292\3\2\2\2\u1292\u12ad\5\u04a0\u0251\2\u1293\u1295\5"+
		"\u047e\u0240\2\u1294\u1296\5\u03f8\u01fd\2\u1295\u1294\3\2\2\2\u1295\u1296"+
		"\3\2\2\2\u1296\u1298\3\2\2\2\u1297\u1299\5\u03f4\u01fb\2\u1298\u1297\3"+
		"\2\2\2\u1298\u1299\3\2\2\2\u1299\u12ae\3\2\2\2\u129a\u129c\5\u047e\u0240"+
		"\2\u129b\u129d\5\u03f8\u01fd\2\u129c\u129b\3\2\2\2\u129c\u129d\3\2\2\2"+
		"\u129d\u129f\3\2\2\2\u129e\u12a0\5\u03f4\u01fb\2\u129f\u129e\3\2\2\2\u129f"+
		"\u12a0\3\2\2\2\u12a0\u12ae\3\2\2\2\u12a1\u12a2\6\u011el\2\u12a2\u12a3"+
		"\7\u00f5\2\2\u12a3\u12a4\7\u019b\2\2\u12a4\u12a5\5\u047e\u0240\2\u12a5"+
		"\u12a6\7\u019c\2\2\u12a6\u12ae\3\2\2\2\u12a7\u12a8\6\u011em\2\u12a8\u12a9"+
		"\7\u00fd\2\2\u12a9\u12aa\7\u019b\2\2\u12aa\u12ab\5\u047e\u0240\2\u12ab"+
		"\u12ac\7\u019c\2\2\u12ac\u12ae\3\2\2\2\u12ad\u1293\3\2\2\2\u12ad\u129a"+
		"\3\2\2\2\u12ad\u12a1\3\2\2\2\u12ad\u12a7\3\2\2\2\u12ae\u12be\3\2\2\2\u12af"+
		"\u12b0\6\u011en\2\u12b0\u12b3\7\u00fd\2\2\u12b1\u12b2\7\u01fc\2\2\u12b2"+
		"\u12b4\5\u03fc\u01ff\2\u12b3\u12b1\3\2\2\2\u12b3\u12b4\3\2\2\2\u12b4\u12b5"+
		"\3\2\2\2\u12b5\u12b6\7\u028f\2\2\u12b6\u12b8\7\u02fe\2\2\u12b7\u12b9\5"+
		"\u03f8\u01fd\2\u12b8\u12b7\3\2\2\2\u12b8\u12b9\3\2\2\2\u12b9\u12bb\3\2"+
		"\2\2\u12ba\u12bc\5\u03f4\u01fb\2\u12bb\u12ba\3\2\2\2\u12bb\u12bc\3\2\2"+
		"\2\u12bc\u12be\3\2\2\2\u12bd\u1285\3\2\2\2\u12bd\u1288\3\2\2\2\u12bd\u128a"+
		"\3\2\2\2\u12bd\u128d\3\2\2\2\u12bd\u12af\3\2\2\2\u12be\u023b\3\2\2\2\u12bf"+
		"\u12c1\5\u023e\u0120\2\u12c0\u12c2\5\u0240\u0121\2\u12c1\u12c0\3\2\2\2"+
		"\u12c1\u12c2\3\2\2\2\u12c2\u12c9\3\2\2\2\u12c3\u12c6\5\u0240\u0121\2\u12c4"+
		"\u12c5\7\u0198\2\2\u12c5\u12c7\5\u023e\u0120\2\u12c6\u12c4\3\2\2\2\u12c6"+
		"\u12c7\3\2\2\2\u12c7\u12c9\3\2\2\2\u12c8\u12bf\3\2\2\2\u12c8\u12c3\3\2"+
		"\2\2\u12c9\u023d\3\2\2\2\u12ca\u12cb\7\u0258\2\2\u12cb\u12cc\t)\2\2\u12cc"+
		"\u023f\3\2\2\2\u12cd\u12ce\7\u00ab\2\2\u12ce\u12d4\7\u00b3\2\2\u12cf\u12d0"+
		"\7\u011c\2\2\u12d0\u12d5\7\u0258\2\2\u12d1\u12d2\7\u0258\2\2\u12d2\u12d5"+
		"\t>\2\2\u12d3\u12d5\7\u0135\2\2\u12d4\u12cf\3\2\2\2\u12d4\u12d1\3\2\2"+
		"\2\u12d4\u12d3\3\2\2\2\u12d5\u0241\3\2\2\2\u12d6\u12d7\7\u0198\2\2\u12d7"+
		"\u12d9\5\u0246\u0124\2\u12d8\u12d6\3\2\2\2\u12d9\u12dc\3\2\2\2\u12da\u12d8"+
		"\3\2\2\2\u12da\u12db\3\2\2\2\u12db\u0243\3\2\2\2\u12dc\u12da\3\2\2\2\u12dd"+
		"\u12de\5\u02e4\u0173\2\u12de\u12df\5\u04a0\u0251\2\u12df\u12e0\5\u024e"+
		"\u0128\2\u12e0\u12f7\3\2\2\2\u12e1\u12f7\5\u03e0\u01f1\2\u12e2\u12e3\5"+
		"\u02e0\u0171\2\u12e3\u12e4\5\u04a0\u0251\2\u12e4\u12e5\5\u029e\u0150\2"+
		"\u12e5\u12f7\3\2\2\2\u12e6\u12e7\5\u0248\u0125\2\u12e7\u12e8\5\u04a0\u0251"+
		"\2\u12e8\u12e9\5\u024e\u0128\2\u12e9\u12f7\3\2\2\2\u12ea\u12f4\7\u00e8"+
		"\2\2\u12eb\u12ec\5\u04a0\u0251\2\u12ec\u12ed\5\u029e\u0150\2\u12ed\u12f5"+
		"\3\2\2\2\u12ee\u12f0\5\u03a2\u01d2\2\u12ef\u12f1\5\u03d4\u01eb\2\u12f0"+
		"\u12ef\3\2\2\2\u12f0\u12f1\3\2\2\2\u12f1\u12f5\3\2\2\2\u12f2\u12f3\6\u0123"+
		"o\2\u12f3\u12f5\7\u01e0\2\2\u12f4\u12eb\3\2\2\2\u12f4\u12ee\3\2\2\2\u12f4"+
		"\u12f2\3\2\2\2\u12f5\u12f7\3\2\2\2\u12f6\u12dd\3\2\2\2\u12f6\u12e1\3\2"+
		"\2\2\u12f6\u12e2\3\2\2\2\u12f6\u12e6\3\2\2\2\u12f6\u12ea\3\2\2\2\u12f7"+
		"\u0245\3\2\2\2\u12f8\u12f9\5\u04a2\u0252\2\u12f9\u12fa\5\u02e4\u0173\2"+
		"\u12fa\u12fb\5\u04a0\u0251\2\u12fb\u12fc\5\u024e\u0128\2\u12fc\u12ff\3"+
		"\2\2\2\u12fd\u12ff\5\u0244\u0123\2\u12fe\u12f8\3\2\2\2\u12fe\u12fd\3\2"+
		"\2\2\u12ff\u0247\3\2\2\2\u1300\u1302\7\u01a4\2\2\u1301\u1303\5\u04a6\u0254"+
		"\2\u1302\u1301\3\2\2\2\u1302\u1303\3\2\2\2\u1303\u1304\3\2\2\2\u1304\u1305"+
		"\5\u02e4\u0173\2\u1305\u0249\3\2\2\2\u1306\u1307\5\u024c\u0127\2\u1307"+
		"\u1308\5\u0242\u0122\2\u1308\u130c\3\2\2\2\u1309\u130a\7\u015d\2\2\u130a"+
		"\u130c\5\u023c\u011f\2\u130b\u1306\3\2\2\2\u130b\u1309\3\2\2\2\u130c\u024b"+
		"\3\2\2\2\u130d\u130e\5\u02e4\u0173\2\u130e\u130f\5\u04a0\u0251\2\u130f"+
		"\u1310\5\u024e\u0128\2\u1310\u024d\3\2\2\2\u1311\u1316\5\u029e\u0150\2"+
		"\u1312\u1316\t?\2\2\u1313\u1314\6\u0128p\2\u1314\u1316\t@\2\2\u1315\u1311"+
		"\3\2\2\2\u1315\u1312\3\2\2\2\u1315\u1313\3\2\2\2\u1316\u024f\3\2\2\2\u1317"+
		"\u13f3\7\u026f\2\2\u1318\u1319\6\u0129q\2\u1319\u13f4\7D\2\2\u131a\u131c"+
		"\7\u01d6\2\2\u131b\u131d\5\u0400\u0201\2\u131c\u131b\3\2\2\2\u131c\u131d"+
		"\3\2\2\2\u131d\u13f4\3\2\2\2\u131e\u1320\5\u0252\u012a\2\u131f\u131e\3"+
		"\2\2\2\u131f\u1320\3\2\2\2\u1320\u1321\3\2\2\2\u1321\u1323\7\u0156\2\2"+
		"\u1322\u1324\5\u0258\u012d\2\u1323\u1322\3\2\2\2\u1323\u1324\3\2\2\2\u1324"+
		"\u1326\3\2\2\2\u1325\u1327\5\u0400\u0201\2\u1326\u1325\3\2\2\2\u1326\u1327"+
		"\3\2\2\2\u1327\u13f4\3\2\2\2\u1328\u132a\7\u0092\2\2\u1329\u1328\3\2\2"+
		"\2\u1329\u132a\3\2\2\2\u132a\u132b\3\2\2\2\u132b\u132d\7\u015e\2\2\u132c"+
		"\u132e\5\u0258\u012d\2\u132d\u132c\3\2\2\2\u132d\u132e\3\2\2\2\u132e\u1330"+
		"\3\2\2\2\u132f\u1331\5\u0400\u0201\2\u1330\u132f\3\2\2\2\u1330\u1331\3"+
		"\2\2\2\u1331\u13f4\3\2\2\2\u1332\u1334\7\u0088\2\2\u1333\u1335\5\u0258"+
		"\u012d\2\u1334\u1333\3\2\2\2\u1334\u1335\3\2\2\2\u1335\u1337\3\2\2\2\u1336"+
		"\u1338\5\u0400\u0201\2\u1337\u1336\3\2\2\2\u1337\u1338\3\2\2\2\u1338\u13f4"+
		"\3\2\2\2\u1339\u133a\7\u0289\2\2\u133a\u133c\7\u0149\2\2\u133b\u133d\5"+
		"\u0258\u012d\2\u133c\u133b\3\2\2\2\u133c\u133d\3\2\2\2\u133d\u133f\3\2"+
		"\2\2\u133e\u1340\5\u0400\u0201\2\u133f\u133e\3\2\2\2\u133f\u1340\3\2\2"+
		"\2\u1340\u13f4\3\2\2\2\u1341\u1342\7\36\2\2\u1342\u1344\7\u0156\2\2\u1343"+
		"\u1345\5\u0258\u012d\2\u1344\u1343\3\2\2\2\u1344\u1345\3\2\2\2\u1345\u1347"+
		"\3\2\2\2\u1346\u1348\5\u0400\u0201\2\u1347\u1346\3\2\2\2\u1347\u1348\3"+
		"\2\2\2\u1348\u13f4\3\2\2\2\u1349\u13f4\7\u0101\2\2\u134a\u134d\7\u0082"+
		"\2\2\u134b\u134e\5\u0440\u0221\2\u134c\u134e\7\u01ad\2\2\u134d\u134b\3"+
		"\2\2\2\u134d\u134c\3\2\2\2\u134e\u134f\3\2\2\2\u134f\u13f4\tA\2\2\u1350"+
		"\u1352\5\u0252\u012a\2\u1351\u1350\3\2\2\2\u1351\u1352\3\2\2\2\u1352\u1353"+
		"\3\2\2\2\u1353\u1354\7\\\2\2\u1354\u1355\tB\2\2\u1355\u1357\5\u0448\u0225"+
		"\2\u1356\u1358\5\u0258\u012d\2\u1357\u1356\3\2\2\2\u1357\u1358\3\2\2\2"+
		"\u1358\u135a\3\2\2\2\u1359\u135b\5\u0400\u0201\2\u135a\u1359\3\2\2\2\u135a"+
		"\u135b\3\2\2\2\u135b\u13f4\3\2\2\2\u135c\u135d\t,\2\2\u135d\u13f4\7\u00b9"+
		"\2\2\u135e\u1365\7/\2\2\u135f\u1366\7\u009f\2\2\u1360\u1361\7\u0149\2"+
		"\2\u1361\u1363\5\u0254\u012b\2\u1362\u1364\5\u0308\u0185\2\u1363\u1362"+
		"\3\2\2\2\u1363\u1364\3\2\2\2\u1364\u1366\3\2\2\2\u1365\u135f\3\2\2\2\u1365"+
		"\u1360\3\2\2\2\u1366\u13f4\3\2\2\2\u1367\u1368\tC\2\2\u1368\u136b\7\u0088"+
		"\2\2\u1369\u136a\7\u0214\2\2\u136a\u136c\5\u047e\u0240\2\u136b\u1369\3"+
		"\2\2\2\u136b\u136c\3\2\2\2\u136c\u136f\3\2\2\2\u136d\u136e\7\u01fd\2\2"+
		"\u136e\u1370\5\u0472\u023a\2\u136f\u136d\3\2\2\2\u136f\u1370\3\2\2\2\u1370"+
		"\u1372\3\2\2\2\u1371\u1373\5\u0120\u0091\2\u1372\u1371\3\2\2\2\u1372\u1373"+
		"\3\2\2\2\u1373\u1375\3\2\2\2\u1374\u1376\5\u0308\u0185\2\u1375\u1374\3"+
		"\2\2\2\u1375\u1376\3\2\2\2\u1376\u13f4\3\2\2\2\u1377\u1378\6\u0129r\2"+
		"\u1378\u137a\7\u008c\2\2\u1379\u1377\3\2\2\2\u1379\u137a\3\2\2\2\u137a"+
		"\u137b\3\2\2\2\u137b\u137c\tD\2\2\u137c\u137d\5\u0256\u012c\2\u137d\u137f"+
		"\5\u0448\u0225\2\u137e\u1380\5\u0258\u012d\2\u137f\u137e\3\2\2\2\u137f"+
		"\u1380\3\2\2\2\u1380\u1382\3\2\2\2\u1381\u1383\5\u0162\u00b2\2\u1382\u1381"+
		"\3\2\2\2\u1382\u1383\3\2\2\2\u1383\u13f4\3\2\2\2\u1384\u1386\7\u014a\2"+
		"\2\u1385\u1384\3\2\2\2\u1385\u1386\3\2\2\2\u1386\u1387\3\2\2\2\u1387\u13f4"+
		"\7\u0083\2\2\u1388\u1389\7\u01cc\2\2\u1389\u138a\7\u019b\2\2\u138a\u138b"+
		"\7\u018b\2\2\u138b\u138c\7\u019c\2\2\u138c\u13f4\tE\2\2\u138d\u138f\7"+
		"\u0173\2\2\u138e\u1390\5\u0120\u0091\2\u138f\u138e\3\2\2\2\u138f\u1390"+
		"\3\2\2\2\u1390\u13f4\3\2\2\2\u1391\u1393\7\u0085\2\2\u1392\u1394\5\u0120"+
		"\u0091\2\u1393\u1392\3\2\2\2\u1393\u1394\3\2\2\2\u1394\u13f4\3\2\2\2\u1395"+
		"\u13f4\7\u010a\2\2\u1396\u139f\7\u0109\2\2\u1397\u139c\5\u025a\u012e\2"+
		"\u1398\u1399\7\u0198\2\2\u1399\u139b\5\u025a\u012e\2\u139a\u1398\3\2\2"+
		"\2\u139b\u139e\3\2\2\2\u139c\u139a\3\2\2\2\u139c\u139d\3\2\2\2\u139d\u13a0"+
		"\3\2\2\2\u139e\u139c\3\2\2\2\u139f\u1397\3\2\2\2\u139f\u13a0\3\2\2\2\u13a0"+
		"\u13a4\3\2\2\2\u13a1\u13a2\7\u01fc\2\2\u13a2\u13a3\7\u010d\2\2\u13a3\u13a5"+
		"\7\u017e\2\2\u13a4\u13a1\3\2\2\2\u13a4\u13a5\3\2\2\2\u13a5\u13a7\3\2\2"+
		"\2\u13a6\u13a8\5\u0120\u0091\2\u13a7\u13a6\3\2\2\2\u13a7\u13a8\3\2\2\2"+
		"\u13a8\u13f4\3\2\2\2\u13a9\u13ab\5\u04a2\u0252\2\u13aa\u13a9\3\2\2\2\u13aa"+
		"\u13ab\3\2\2\2\u13ab\u13ac\3\2\2\2\u13ac\u13ae\tF\2\2\u13ad\u13af\5\u0400"+
		"\u0201\2\u13ae\u13ad\3\2\2\2\u13ae\u13af\3\2\2\2\u13af\u13f4\3\2\2\2\u13b0"+
		"\u13b2\7\u0092\2\2\u13b1\u13b0\3\2\2\2\u13b1\u13b2\3\2\2\2\u13b2\u13b3"+
		"\3\2\2\2\u13b3\u13f4\7\u0108\2\2\u13b4\u13b6\5\u02f0\u0179\2\u13b5\u13b7"+
		"\5\u0400\u0201\2\u13b6\u13b5\3\2\2\2\u13b6\u13b7\3\2\2\2\u13b7\u13f4\3"+
		"\2\2\2\u13b8\u13ba\7Y\2\2\u13b9\u13bb\5\u0400\u0201\2\u13ba\u13b9\3\2"+
		"\2\2\u13ba\u13bb\3\2\2\2\u13bb\u13f4\3\2\2\2\u13bc\u13bd\6\u0129s\2\u13bd"+
		"\u13f4\7j\2\2\u13be\u13f4\7\u0106\2\2\u13bf\u13c2\7\u009c\2\2\u13c0\u13c1"+
		"\7\u01fc\2\2\u13c1\u13c3\5\u03fc\u01ff\2\u13c2\u13c0\3\2\2\2\u13c2\u13c3"+
		"\3\2\2\2\u13c3\u13f4\3\2\2\2\u13c4\u13c5\7\u009c\2\2\u13c5\u13c6\7\u01fc"+
		"\2\2\u13c6\u13c7\5\u03fc\u01ff\2\u13c7\u13c8\7\u029c\2\2\u13c8\u13c9\5"+
		"\u03ea\u01f6\2\u13c9\u13f4\3\2\2\2\u13ca\u13cb\7\u00bb\2\2\u13cb\u13f4"+
		"\7\u0149\2\2\u13cc\u13e1\7\u01cd\2\2\u13cd\u13cf\7\u01d5\2\2\u13ce\u13d0"+
		"\5\u03ce\u01e8\2\u13cf\u13ce\3\2\2\2\u13cf\u13d0\3\2\2\2\u13d0\u13d1\3"+
		"\2\2\2\u13d1\u13e2\5\u041c\u020f\2\u13d2\u13d3\7\u0087\2\2\u13d3\u13e2"+
		"\5\u0438\u021d\2\u13d4\u13d5\7\u0166\2\2\u13d5\u13e2\5\u0424\u0213\2\u13d6"+
		"\u13d7\7\u0254\2\2\u13d7\u13e2\5\u0420\u0211\2\u13d8\u13d9\7\u0289\2\2"+
		"\u13d9\u13e2\5\u0448\u0225\2\u13da\u13db\7\u0291\2\2\u13db\u13e2\5\u0428"+
		"\u0215\2\u13dc\u13dd\7\u0171\2\2\u13dd\u13e2\5\u042c\u0217\2\u13de\u13df"+
		"\6\u0129t\2\u13df\u13e0\7\u016e\2\2\u13e0\u13e2\5\u03fc\u01ff\2\u13e1"+
		"\u13cd\3\2\2\2\u13e1\u13d2\3\2\2\2\u13e1\u13d4\3\2\2\2\u13e1\u13d6\3\2"+
		"\2\2\u13e1\u13d8\3\2\2\2\u13e1\u13da\3\2\2\2\u13e1\u13dc\3\2\2\2\u13e1"+
		"\u13de\3\2\2\2\u13e2\u13f4\3\2\2\2\u13e3\u13e4\7\u0254\2\2\u13e4\u13e6"+
		"\7\u0149\2\2\u13e5\u13e7\5\u0400\u0201\2\u13e6\u13e5\3\2\2\2\u13e6\u13e7"+
		"\3\2\2\2\u13e7\u13f4\3\2\2\2\u13e8\u13e9\7\u0166\2\2\u13e9\u13eb\7\u0149"+
		"\2\2\u13ea\u13ec\5\u0400\u0201\2\u13eb\u13ea\3\2\2\2\u13eb\u13ec\3\2\2"+
		"\2\u13ec\u13f4\3\2\2\2\u13ed\u13ee\7\u0254\2\2\u13ee\u13ef\7X\2\2\u13ef"+
		"\u13f4\5\u0420\u0211\2\u13f0\u13f1\7\u0166\2\2\u13f1\u13f2\7X\2\2\u13f2"+
		"\u13f4\5\u0424\u0213\2\u13f3\u1318\3\2\2\2\u13f3\u131a\3\2\2\2\u13f3\u131f"+
		"\3\2\2\2\u13f3\u1329\3\2\2\2\u13f3\u1332\3\2\2\2\u13f3\u1339\3\2\2\2\u13f3"+
		"\u1341\3\2\2\2\u13f3\u1349\3\2\2\2\u13f3\u134a\3\2\2\2\u13f3\u1351\3\2"+
		"\2\2\u13f3\u135c\3\2\2\2\u13f3\u135e\3\2\2\2\u13f3\u1367\3\2\2\2\u13f3"+
		"\u1379\3\2\2\2\u13f3\u1385\3\2\2\2\u13f3\u1388\3\2\2\2\u13f3\u138d\3\2"+
		"\2\2\u13f3\u1391\3\2\2\2\u13f3\u1395\3\2\2\2\u13f3\u1396\3\2\2\2\u13f3"+
		"\u13aa\3\2\2\2\u13f3\u13b1\3\2\2\2\u13f3\u13b4\3\2\2\2\u13f3\u13b8\3\2"+
		"\2\2\u13f3\u13bc\3\2\2\2\u13f3\u13be\3\2\2\2\u13f3\u13bf\3\2\2\2\u13f3"+
		"\u13c4\3\2\2\2\u13f3\u13ca\3\2\2\2\u13f3\u13cc\3\2\2\2\u13f3\u13e3\3\2"+
		"\2\2\u13f3\u13e8\3\2\2\2\u13f3\u13ed\3\2\2\2\u13f3\u13f0\3\2\2\2\u13f4"+
		"\u0251\3\2\2\2\u13f5\u13fc\7\u0092\2\2\u13f6\u13f7\6\u012au\2\u13f7\u13f9"+
		"\7\u008c\2\2\u13f8\u13fa\7\u0092\2\2\u13f9\u13f8\3\2\2\2\u13f9\u13fa\3"+
		"\2\2\2\u13fa\u13fc\3\2\2\2\u13fb\u13f5\3\2\2\2\u13fb\u13f6\3\2\2\2\u13fc"+
		"\u0253\3\2\2\2\u13fd\u13ff\6\u012bv\2\u13fe\u1400\7\u023e\2\2\u13ff\u13fe"+
		"\3\2\2\2\u13ff\u1400\3\2\2\2\u1400\u1403\3\2\2\2\u1401\u1403\3\2\2\2\u1402"+
		"\u13fd\3\2\2\2\u1402\u1401\3\2\2\2\u1403\u0255\3\2\2\2\u1404\u1405\tB"+
		"\2\2\u1405\u0257\3\2\2\2\u1406\u1407\5\u0256\u012c\2\u1407\u1408\5\u0462"+
		"\u0232\2\u1408\u0259\3\2\2\2\u1409\u140a\7K\2\2\u140a\u1411\7\u00a9\2"+
		"\2\u140b\u140c\7i\2\2\u140c\u1411\7\u0154\2\2\u140d\u140e\7\u00f9\2\2"+
		"\u140e\u1411\7\u008e\2\2\u140f\u1411\tG\2\2\u1410\u1409\3\2\2\2\u1410"+
		"\u140b\3\2\2\2\u1410\u140d\3\2\2\2\u1410\u140f\3\2\2\2\u1411\u025b\3\2"+
		"\2\2\u1412\u1413\7I\2\2\u1413\u1438\5\u0482\u0242\2\u1414\u1415\7\t\2"+
		"\2\u1415\u1416\7\u020b\2\2\u1416\u1417\5\u025e\u0130\2\u1417\u141a\7\u0214"+
		"\2\2\u1418\u141b\5\u0462\u0232\2\u1419\u141b\7\u01e0\2\2\u141a\u1418\3"+
		"\2\2\2\u141a\u1419\3\2\2\2\u141b\u1438\3\2\2\2\u141c\u141e\7\24\2\2\u141d"+
		"\u141f\5\u0404\u0203\2\u141e\u141d\3\2\2\2\u141e\u141f\3\2\2\2\u141f\u1429"+
		"\3\2\2\2\u1420\u142a\5\u0270\u0139\2\u1421\u1426\5\u026c\u0137\2\u1422"+
		"\u1423\7\u0198\2\2\u1423\u1425\5\u026c\u0137\2\u1424\u1422\3\2\2\2\u1425"+
		"\u1428\3\2\2\2\u1426\u1424\3\2\2\2\u1426\u1427\3\2\2\2\u1427\u142a\3\2"+
		"\2\2\u1428\u1426\3\2\2\2\u1429\u1420\3\2\2\2\u1429\u1421\3\2\2\2\u142a"+
		"\u1438\3\2\2\2\u142b\u142d\7\u021c\2\2\u142c\u142e\tH\2\2\u142d\u142c"+
		"\3\2\2\2\u142d\u142e\3\2\2\2\u142e\u142f\3\2\2\2\u142f\u1438\5\u029e\u0150"+
		"\2\u1430\u1431\7\u0224\2\2\u1431\u1432\7\u020b\2\2\u1432\u1433\7\u0212"+
		"\2\2\u1433\u1434\7\t\2\2\u1434\u1438\5\u0274\u013b\2\u1435\u1436\6\u012f"+
		"w\2\u1436\u1438\7:\2\2\u1437\u1412\3\2\2\2\u1437\u1414\3\2\2\2\u1437\u141c"+
		"\3\2\2\2\u1437\u142b\3\2\2\2\u1437\u1430\3\2\2\2\u1437\u1435\3\2\2\2\u1438"+
		"\u025d\3\2\2\2\u1439\u143c\5\u0260\u0131\2\u143a\u143c\5\u0264\u0133\2"+
		"\u143b\u1439\3\2\2\2\u143b\u143a\3\2\2\2\u143c\u025f\3\2\2\2\u143d\u1442"+
		"\5\u0262\u0132\2\u143e\u143f\7\u0198\2\2\u143f\u1441\5\u0262\u0132\2\u1440"+
		"\u143e\3\2\2\2\u1441\u1444\3\2\2\2\u1442\u1440\3\2\2\2\u1442\u1443\3\2"+
		"\2\2\u1443\u0261\3\2\2\2\u1444\u1442\3\2\2\2\u1445\u1447\5\u0448\u0225"+
		"\2\u1446\u1448\5\u0266\u0134\2\u1447\u1446\3\2\2\2\u1447\u1448\3\2\2\2"+
		"\u1448\u0263\3\2\2\2\u1449\u144a\5\u0448\u0225\2\u144a\u144b\7\"\2\2\u144b"+
		"\u144c\7\u019b\2\2\u144c\u144d\58\35\2\u144d\u144f\7\u019c\2\2\u144e\u1450"+
		"\5\u0266\u0134\2\u144f\u144e\3\2\2\2\u144f\u1450\3\2\2\2\u1450\u0265\3"+
		"\2\2\2\u1451\u1452\5\u0192\u00ca\2\u1452\u1454\7\u019b\2\2\u1453\u1455"+
		"\5\u026a\u0136\2\u1454\u1453\3\2\2\2\u1454\u1455\3\2\2\2\u1455\u1456\3"+
		"\2\2\2\u1456\u1457\7\u019c\2\2\u1457\u0267\3\2\2\2\u1458\u145b\5\u0462"+
		"\u0232\2\u1459\u145b\7\u0253\2\2\u145a\u1458\3\2\2\2\u145a\u1459\3\2\2"+
		"\2\u145b\u0269\3\2\2\2\u145c\u1461\5\u0268\u0135\2\u145d\u145e\7\u0198"+
		"\2\2\u145e\u1460\5\u0268\u0135\2\u145f\u145d\3\2\2\2\u1460\u1463\3\2\2"+
		"\2\u1461\u145f\3\2\2\2\u1461\u1462\3\2\2\2\u1462\u026b\3\2\2\2\u1463\u1461"+
		"\3\2\2\2\u1464\u1474\tI\2\2\u1465\u1467\5\u026e\u0138\2\u1466\u1465\3"+
		"\2\2\2\u1466\u1467\3\2\2\2\u1467\u1468\3\2\2\2\u1468\u1474\7\u00b9\2\2"+
		"\u1469\u146a\7\u0115\2\2\u146a\u146c\7\u00b9\2\2\u146b\u146d\5\u0308\u0185"+
		"\2\u146c\u146b\3\2\2\2\u146c\u146d\3\2\2\2\u146d\u1474\3\2\2\2\u146e\u146f"+
		"\6\u0137x\2\u146f\u1470\7\u010d\2\2\u1470\u1474\7\t\2\2\u1471\u1472\6"+
		"\u0137y\2\u1472\u1474\7\u0249\2\2\u1473\u1464\3\2\2\2\u1473\u1466\3\2"+
		"\2\2\u1473\u1469\3\2\2\2\u1473\u146e\3\2\2\2\u1473\u1471\3\2\2\2\u1474"+
		"\u026d\3\2\2\2\u1475\u1476\tJ\2\2\u1476\u026f\3\2\2\2\u1477\u147f\t\24"+
		"\2\2\u1478\u1479\7\u02ac\2\2\u1479\u147a\7\u0258\2\2\u147a\u1480\7\u0226"+
		"\2\2\u147b\u147d\5\u0464\u0233\2\u147c\u147e\5\u0272\u013a\2\u147d\u147c"+
		"\3\2\2\2\u147d\u147e\3\2\2\2\u147e\u1480\3\2\2\2\u147f\u1478\3\2\2\2\u147f"+
		"\u147b\3\2\2\2\u147f\u1480\3\2\2\2\u1480\u0271\3\2\2\2\u1481\u1482\6\u013a"+
		"z\2\u1482\u1483\7\u01fc\2\2\u1483\u1488\7\u008b\2\2\u1484\u1485\7\u02ac"+
		"\2\2\u1485\u1486\7\u0258\2\2\u1486\u1488\7\u0226\2\2\u1487\u1481\3\2\2"+
		"\2\u1487\u1484\3\2\2\2\u1488\u0273\3\2\2\2\u1489\u148a\5\u0448\u0225\2"+
		"\u148a\u148c\5\u027a\u013e\2\u148b\u148d\5\u0266\u0134\2\u148c\u148b\3"+
		"\2\2\2\u148c\u148d\3\2\2\2\u148d\u1490\3\2\2\2\u148e\u148f\7\u020a\2\2"+
		"\u148f\u1491\7\u00b1\2\2\u1490\u148e\3\2\2\2\u1490\u1491\3\2\2\2\u1491"+
		"\u1494\3\2\2\2\u1492\u1494\5\u0276\u013c\2\u1493\u1489\3\2\2\2\u1493\u1492"+
		"\3\2\2\2\u1494\u0275\3\2\2\2\u1495\u149a\5\u0278\u013d\2\u1496\u1497\7"+
		"\u0198\2\2\u1497\u1499\5\u0278\u013d\2\u1498\u1496\3\2\2\2\u1499\u149c"+
		"\3\2\2\2\u149a\u1498\3\2\2\2\u149a\u149b\3\2\2\2\u149b\u0277\3\2\2\2\u149c"+
		"\u149a\3\2\2\2\u149d\u149f\5\u0448\u0225\2\u149e\u14a0\5\u0266\u0134\2"+
		"\u149f\u149e\3\2\2\2\u149f\u14a0\3\2\2\2\u14a0\u14a3\3\2\2\2\u14a1\u14a2"+
		"\7\u020a\2\2\u14a2\u14a4\7\u00b1\2\2\u14a3\u14a1\3\2\2\2\u14a3\u14a4\3"+
		"\2\2\2\u14a4\u0279\3\2\2\2\u14a5\u14a6\7\"\2\2\u14a6\u14a7\7\u019b\2\2"+
		"\u14a7\u14a8\58\35\2\u14a8\u14a9\7\u019c\2\2\u14a9\u027b\3\2\2\2\u14aa"+
		"\u14af\5\u027e\u0140\2\u14ab\u14af\5\u0288\u0145\2\u14ac\u14af\5\u028a"+
		"\u0146\2\u14ad\u14af\5\u028e\u0148\2\u14ae\u14aa\3\2\2\2\u14ae\u14ab\3"+
		"\2\2\2\u14ae\u14ac\3\2\2\2\u14ae\u14ad\3\2\2\2\u14af\u027d\3\2\2\2\u14b0"+
		"\u14b1\7\u01cd\2\2\u14b1\u14b2\7\u02e5\2\2\u14b2\u14b3\7\u0202\2\2\u14b3"+
		"\u14b4\5\u0462\u0232\2\u14b4\u14b6\7\u0164\2\2\u14b5\u14b7\5\u04a0\u0251"+
		"\2\u14b6\u14b5\3\2\2\2\u14b6\u14b7\3\2\2\2\u14b7\u14b8\3\2\2\2\u14b8\u14ba"+
		"\tK\2\2\u14b9\u14bb\5\u0280\u0141\2\u14ba\u14b9\3\2\2\2\u14ba\u14bb\3"+
		"\2\2\2\u14bb\u14bd\3\2\2\2\u14bc\u14be\5\u0284\u0143\2\u14bd\u14bc\3\2"+
		"\2\2\u14bd\u14be\3\2\2\2\u14be\u14c0\3\2\2\2\u14bf\u14c1\5\u0286\u0144"+
		"\2\u14c0\u14bf\3\2\2\2\u14c0\u14c1\3\2\2\2\u14c1\u027f\3\2\2\2\u14c2\u14c4"+
		"\7\u02e7\2\2\u14c3\u14c5\5\u04a0\u0251\2\u14c4\u14c3\3\2\2\2\u14c4\u14c5"+
		"\3\2\2\2\u14c5\u14c6\3\2\2\2\u14c6\u14cd\5\u0282\u0142\2\u14c7\u14c9\7"+
		"\u0198\2\2\u14c8\u14c7\3\2\2\2\u14c8\u14c9\3\2\2\2\u14c9\u14ca\3\2\2\2"+
		"\u14ca\u14cc\5\u0282\u0142\2\u14cb\u14c8\3\2\2\2\u14cc\u14cf\3\2\2\2\u14cd"+
		"\u14cb\3\2\2\2\u14cd\u14ce\3\2\2\2\u14ce\u0281\3\2\2\2\u14cf\u14cd\3\2"+
		"\2\2\u14d0\u14d3\7\u017e\2\2\u14d1\u14d2\7\u018a\2\2\u14d2\u14d4\7\u017e"+
		"\2\2\u14d3\u14d1\3\2\2\2\u14d3\u14d4\3\2\2\2\u14d4\u0283\3\2\2\2\u14d5"+
		"\u14d7\7\u02e4\2\2\u14d6\u14d8\5\u04a0\u0251\2\u14d7\u14d6\3\2\2\2\u14d7"+
		"\u14d8\3\2\2\2\u14d8\u14d9\3\2\2\2\u14d9\u14da\7\u017e\2\2\u14da\u0285"+
		"\3\2\2\2\u14db\u14dc\tL\2\2\u14dc\u0287\3\2\2\2\u14dd\u14de\7\u01ae\2"+
		"\2\u14de\u14df\7\u02e5\2\2\u14df\u14e0\7\u0202\2\2\u14e0\u14e2\5\u045c"+
		"\u022f\2\u14e1\u14e3\5\u0280\u0141\2\u14e2\u14e1\3\2\2\2\u14e2\u14e3\3"+
		"\2\2\2\u14e3\u14e5\3\2\2\2\u14e4\u14e6\5\u0284\u0143\2\u14e5\u14e4\3\2"+
		"\2\2\u14e5\u14e6\3\2\2\2\u14e6\u14e8\3\2\2\2\u14e7\u14e9\5\u0286\u0144"+
		"\2\u14e8\u14e7\3\2\2\2\u14e8\u14e9\3\2\2\2\u14e9\u14eb\3\2\2\2\u14ea\u14ec"+
		"\7\u01fa\2\2\u14eb\u14ea\3\2\2\2\u14eb\u14ec\3\2\2\2\u14ec\u0289\3\2\2"+
		"\2\u14ed\u14ee\7\u026d\2\2\u14ee\u14ef\7\u02e5\2\2\u14ef\u14f0\7\u0202"+
		"\2\2\u14f0\u14f3\5\u0462\u0232\2\u14f1\u14f2\7\u01fc\2\2\u14f2\u14f4\5"+
		"\u028c\u0147\2\u14f3\u14f1\3\2\2\2\u14f3\u14f4\3\2\2\2\u14f4\u028b\3\2"+
		"\2\2\u14f5\u14fc\5\u0470\u0239\2\u14f6\u14f8\7\u0198\2\2\u14f7\u14f6\3"+
		"\2\2\2\u14f7\u14f8\3\2\2\2\u14f8\u14f9\3\2\2\2\u14f9\u14fb\5\u0470\u0239"+
		"\2\u14fa\u14f7\3\2\2\2\u14fb\u14fe\3\2\2\2\u14fc\u14fa\3\2\2\2\u14fc\u14fd"+
		"\3\2\2\2\u14fd\u028d\3\2\2\2\u14fe\u14fc\3\2\2\2\u14ff\u1500\7\u01e9\2"+
		"\2\u1500\u1501\7\u02e5\2\2\u1501\u1502\7\u0202\2\2\u1502\u1504\5\u045c"+
		"\u022f\2\u1503\u1505\7\u01fa\2\2\u1504\u1503\3\2\2\2\u1504\u1505\3\2\2"+
		"\2\u1505\u028f\3\2\2\2\u1506\u150d\5\u0292\u014a\2\u1507\u150d\5\u0294"+
		"\u014b\2\u1508\u150d\5\u0298\u014d\2\u1509\u150d\5\u029a\u014e\2\u150a"+
		"\u150b\6\u0149{\2\u150b\u150d\5\u029c\u014f\2\u150c\u1506\3\2\2\2\u150c"+
		"\u1507\3\2\2\2\u150c\u1508\3\2\2\2\u150c\u1509\3\2\2\2\u150c\u150a\3\2"+
		"\2\2\u150d\u0291\3\2\2\2\u150e\u150f\tM\2\2\u150f\u1512\5\u0448\u0225"+
		"\2\u1510\u1513\5\u047e\u0240\2\u1511\u1513\5\u0410\u0209\2\u1512\u1510"+
		"\3\2\2\2\u1512\u1511\3\2\2\2\u1512\u1513\3\2\2\2\u1513\u0293\3\2\2\2\u1514"+
		"\u151f\tM\2\2\u1515\u1516\6\u014b|\2\u1516\u1520\7\u008c\2\2\u1517\u1518"+
		"\6\u014b}\2\u1518\u1520\7\u00fc\2\2\u1519\u151a\6\u014b~\2\u151a\u151b"+
		"\7\26\2\2\u151b\u151c\7\u0181\2\2\u151c\u1520\5\u0496\u024c\2\u151d\u151e"+
		"\6\u014b\177\2\u151e\u1520\7A\2\2\u151f\u1515\3\2\2\2\u151f\u1517\3\2"+
		"\2\2\u151f\u1519\3\2\2\2\u151f\u151d\3\2\2\2\u151f\u1520\3\2\2\2\u1520"+
		"\u1521\3\2\2\2\u1521\u1522\5\u0296\u014c\2\u1522\u0295\3\2\2\2\u1523\u1530"+
		"\5\u0110\u0089\2\u1524\u1529\6\u014c\u0080\2\u1525\u152a\5\u00e2r\2\u1526"+
		"\u152a\5\u00eex\2\u1527\u152a\5\u010e\u0088\2\u1528\u152a\5\u019c\u00cf"+
		"\2\u1529\u1525\3\2\2\2\u1529\u1526\3\2\2\2\u1529\u1527\3\2\2\2\u1529\u1528"+
		"\3\2\2\2\u152a\u1530\3\2\2\2\u152b\u152c\6\u014c\u0081\2\u152c\u152d\7"+
		"\u01fc\2\2\u152d\u152e\7d\2\2\u152e\u1530\5\u0470\u0239\2\u152f\u1523"+
		"\3\2\2\2\u152f\u1524\3\2\2\2\u152f\u152b\3\2\2\2\u1530\u0297\3\2\2\2\u1531"+
		"\u1532\7\31\2\2\u1532\u1533\5\u0496\u024c\2\u1533\u0299\3\2\2\2\u1534"+
		"\u1535\7\u029b\2\2\u1535\u1536\5\u0462\u0232\2\u1536\u029b\3\2\2\2\u1537"+
		"\u1538\7\u02ea\2\2\u1538\u029d\3\2\2\2\u1539\u153a\b\u0150\1\2\u153a\u1540"+
		"\5\u02a0\u0151\2\u153b\u153d\7\u0217\2\2\u153c\u153e\5\u02f2\u017a\2\u153d"+
		"\u153c\3\2\2\2\u153d\u153e\3\2\2\2\u153e\u153f\3\2\2\2\u153f\u1541\tN"+
		"\2\2\u1540\u153b\3\2\2\2\u1540\u1541\3\2\2\2\u1541\u1545\3\2\2\2\u1542"+
		"\u1543\7\u023f\2\2\u1543\u1545\5\u029e\u0150\6\u1544\u1539\3\2\2\2\u1544"+
		"\u1542\3\2\2\2\u1545\u1551\3\2\2\2\u1546\u1547\f\5\2\2\u1547\u1548\tO"+
		"\2\2\u1548\u1550\5\u029e\u0150\6\u1549\u154a\f\4\2\2\u154a\u154b\7\u02af"+
		"\2\2\u154b\u1550\5\u029e\u0150\5\u154c\u154d\f\3\2\2\u154d\u154e\tP\2"+
		"\2\u154e\u1550\5\u029e\u0150\4\u154f\u1546\3\2\2\2\u154f\u1549\3\2\2\2"+
		"\u154f\u154c\3\2\2\2\u1550\u1553\3\2\2\2\u1551\u154f\3\2\2\2\u1551\u1552"+
		"\3\2\2\2\u1552\u029f\3\2\2\2\u1553\u1551\3\2\2\2\u1554\u1555\b\u0151\1"+
		"\2\u1555\u1556\5\u02a4\u0153\2\u1556\u1568\3\2\2\2\u1557\u1558\f\5\2\2"+
		"\u1558\u155a\7\u0217\2\2\u1559\u155b\5\u02f2\u017a\2\u155a\u1559\3\2\2"+
		"\2\u155a\u155b\3\2\2\2\u155b\u155c\3\2\2\2\u155c\u1567\7\u0242\2\2\u155d"+
		"\u155e\f\4\2\2\u155e\u155f\5\u02a2\u0152\2\u155f\u1560\5\u02a4\u0153\2"+
		"\u1560\u1567\3\2\2\2\u1561\u1562\f\3\2\2\u1562\u1563\5\u02a2\u0152\2\u1563"+
		"\u1564\tQ\2\2\u1564\u1565\5\u011c\u008f\2\u1565\u1567\3\2\2\2\u1566\u1557"+
		"\3\2\2\2\u1566\u155d\3\2\2\2\u1566\u1561\3\2\2\2\u1567\u156a\3\2\2\2\u1568"+
		"\u1566\3\2\2\2\u1568\u1569\3\2\2\2\u1569\u02a1\3\2\2\2\u156a\u1568\3\2"+
		"\2\2\u156b\u156c\tR\2\2\u156c\u02a3\3\2\2\2\u156d\u157b\5\u02a8\u0155"+
		"\2\u156e\u1570\5\u02f2\u017a\2\u156f\u156e\3\2\2\2\u156f\u1570\3\2\2\2"+
		"\u1570\u1571\3\2\2\2\u1571\u157c\5\u02a6\u0154\2\u1572\u1573\6\u0153\u0088"+
		"\2\u1573\u1575\7\u02fd\2\2\u1574\u1576\7\u02bc\2\2\u1575\u1574\3\2\2\2"+
		"\u1575\u1576\3\2\2\2\u1576\u1577\3\2\2\2\u1577\u157c\5\u02fe\u0180\2\u1578"+
		"\u1579\7\u013b\2\2\u1579\u157a\7\u0220\2\2\u157a\u157c\5\u02a8\u0155\2"+
		"\u157b\u156f\3\2\2\2\u157b\u1572\3\2\2\2\u157b\u1578\3\2\2\2\u157b\u157c"+
		"\3\2\2\2\u157c\u02a5\3\2\2\2\u157d\u1583\7\u0214\2\2\u157e\u1584\5\u011c"+
		"\u008f\2\u157f\u1580\7\u019b\2\2\u1580\u1581\5\u02ee\u0178\2\u1581\u1582"+
		"\7\u019c\2\2\u1582\u1584\3\2\2\2\u1583\u157e\3\2\2\2\u1583\u157f\3\2\2"+
		"\2\u1584\u1593\3\2\2\2\u1585\u1586\7\u01b5\2\2\u1586\u1587\5\u02a8\u0155"+
		"\2\u1587\u1588\7\u01b0\2\2\u1588\u1589\5\u02a4\u0153\2\u1589\u1593\3\2"+
		"\2\2\u158a\u158b\7\u0220\2\2\u158b\u158e\5\u02aa\u0156\2\u158c\u158d\7"+
		"\u0086\2\2\u158d\u158f\5\u02aa\u0156\2\u158e\u158c\3\2\2\2\u158e\u158f"+
		"\3\2\2\2\u158f\u1593\3\2\2\2\u1590\u1591\7\u025c\2\2\u1591\u1593\5\u02a8"+
		"\u0155\2\u1592\u157d\3\2\2\2\u1592\u1585\3\2\2\2\u1592\u158a\3\2\2\2\u1592"+
		"\u1590\3\2\2\2\u1593\u02a7\3\2\2\2\u1594\u1595\b\u0155\1\2\u1595\u1596"+
		"\5\u02aa\u0156\2\u1596\u15b1\3\2\2\2\u1597\u1598\f\t\2\2\u1598\u1599\7"+
		"\u0194\2\2\u1599\u15b0\5\u02a8\u0155\n\u159a\u159b\f\b\2\2\u159b\u159c"+
		"\tS\2\2\u159c\u15b0\5\u02a8\u0155\t\u159d\u159e\f\7\2\2\u159e\u159f\t"+
		"T\2\2\u159f\u15b0\5\u02a8\u0155\b\u15a0\u15a1\f\5\2\2\u15a1\u15a2\tU\2"+
		"\2\u15a2\u15b0\5\u02a8\u0155\6\u15a3\u15a4\f\4\2\2\u15a4\u15a5\7\u0193"+
		"\2\2\u15a5\u15b0\5\u02a8\u0155\5\u15a6\u15a7\f\3\2\2\u15a7\u15a8\7\u0196"+
		"\2\2\u15a8\u15b0\5\u02a8\u0155\4\u15a9\u15aa\f\6\2\2\u15aa\u15ab\tT\2"+
		"\2\u15ab\u15ac\7\u0211\2\2\u15ac\u15ad\5\u029e\u0150\2\u15ad\u15ae\5\u02f6"+
		"\u017c\2\u15ae\u15b0\3\2\2\2\u15af\u1597\3\2\2\2\u15af\u159a\3\2\2\2\u15af"+
		"\u159d\3\2\2\2\u15af\u15a0\3\2\2\2\u15af\u15a3\3\2\2\2\u15af\u15a6\3\2"+
		"\2\2\u15af\u15a9\3\2\2\2\u15b0\u15b3\3\2\2\2\u15b1\u15af\3\2\2\2\u15b1"+
		"\u15b2\3\2\2\2\u15b2\u02a9\3\2\2\2\u15b3\u15b1\3\2\2\2\u15b4\u15b5\b\u0156"+
		"\1\2\u15b5\u161d\5\u02de\u0170\2\u15b6\u15b8\5\u0410\u0209\2\u15b7\u15b9"+
		"\5\u02ae\u0158\2\u15b8\u15b7\3\2\2\2\u15b8\u15b9\3\2\2\2\u15b9\u161d\3"+
		"\2\2\2\u15ba\u161d\5\u02c6\u0164\2\u15bb\u161d\5\u02d8\u016d\2\u15bc\u161d"+
		"\5\u0476\u023c\2\u15bd\u161d\7\u01a6\2\2\u15be\u161d\5\u02b0\u0159\2\u15bf"+
		"\u15c0\6\u0156\u0090\2\u15c0\u161d\5\u02b2\u015a\2\u15c1\u15c2\6\u0156"+
		"\u0091\2\u15c2\u161d\5\u02b4\u015b\2\u15c3\u15c4\tV\2\2\u15c4\u161d\5"+
		"\u02aa\u0156\20\u15c5\u15c6\5\u02f4\u017b\2\u15c6\u15c7\5\u02aa\u0156"+
		"\17\u15c7\u161d\3\2\2\2\u15c8\u15ca\7\u012f\2\2\u15c9\u15c8\3\2\2\2\u15c9"+
		"\u15ca\3\2\2\2\u15ca\u15cb\3\2\2\2\u15cb\u15cc\7\u019b\2\2\u15cc\u15cd"+
		"\5\u02ee\u0178\2\u15cd\u15ce\7\u019c\2\2\u15ce\u161d\3\2\2\2\u15cf\u15d1"+
		"\7\u01f2\2\2\u15d0\u15cf\3\2\2\2\u15d0\u15d1\3\2\2\2\u15d1\u15d2\3\2\2"+
		"\2\u15d2\u161d\5\u011c\u008f\2\u15d3\u15d4\7\u019d\2\2\u15d4\u15d5\5\u0462"+
		"\u0232\2\u15d5\u15d6\5\u029e\u0150\2\u15d6\u15d7\7\u019e\2\2\u15d7\u161d"+
		"\3\2\2\2\u15d8\u15d9\7\u022f\2\2\u15d9\u15da\5\u02c0\u0161\2\u15da\u15db"+
		"\7>\2\2\u15db\u15dc\7\u019b\2\2\u15dc\u15de\5\u02a8\u0155\2\u15dd\u15df"+
		"\5\u02c4\u0163\2\u15de\u15dd\3\2\2\2\u15de\u15df\3\2\2\2\u15df\u15e0\3"+
		"\2\2\2\u15e0\u15e1\7\u019c\2\2\u15e1\u161d\3\2\2\2\u15e2\u15e3\7\u01b7"+
		"\2\2\u15e3\u161d\5\u02aa\u0156\n\u15e4\u15e5\7\u01c2\2\2\u15e5\u15e6\7"+
		"\u019b\2\2\u15e6\u15e7\5\u029e\u0150\2\u15e7\u15e8\7\u01b1\2\2\u15e8\u15ea"+
		"\5\u02ec\u0177\2\u15e9\u15eb\5\u02ac\u0157\2\u15ea\u15e9\3\2\2\2\u15ea"+
		"\u15eb\3\2\2\2\u15eb\u15ec\3\2\2\2\u15ec\u15ed\7\u019c\2\2\u15ed\u161d"+
		"\3\2\2\2\u15ee\u15f0\7\u01c1\2\2\u15ef\u15f1\5\u029e\u0150\2\u15f0\u15ef"+
		"\3\2\2\2\u15f0\u15f1\3\2\2\2\u15f1\u15f5\3\2\2\2\u15f2\u15f3\5\u02e6\u0174"+
		"\2\u15f3\u15f4\5\u02e8\u0175\2\u15f4\u15f6\3\2\2\2\u15f5\u15f2\3\2\2\2"+
		"\u15f6\u15f7\3\2\2\2\u15f7\u15f5\3\2\2\2\u15f7\u15f8\3\2\2\2\u15f8\u15fa"+
		"\3\2\2\2\u15f9\u15fb\5\u02ea\u0176\2\u15fa\u15f9\3\2\2\2\u15fa\u15fb\3"+
		"\2\2\2\u15fb\u15fc\3\2\2\2\u15fc\u15fd\7\22\2\2\u15fd\u161d\3\2\2\2\u15fe"+
		"\u15ff\7\u01cb\2\2\u15ff\u1600\7\u019b\2\2\u1600\u1601\5\u029e\u0150\2"+
		"\u1601\u1602\7\u0198\2\2\u1602\u1603\5\u02ec\u0177\2\u1603\u1604\7\u019c"+
		"\2\2\u1604\u161d\3\2\2\2\u1605\u1606\7\u01cb\2\2\u1606\u1607\7\u019b\2"+
		"\2\u1607\u1608\5\u029e\u0150\2\u1608\u1609\7\u029c\2\2\u1609\u160a\5\u03a2"+
		"\u01d2\2\u160a\u160b\7\u019c\2\2\u160b\u161d\3\2\2\2\u160c\u160d\7\u01e0"+
		"\2\2\u160d\u160e\7\u019b\2\2\u160e\u160f\5\u046a\u0236\2\u160f\u1610\7"+
		"\u019c\2\2\u1610\u161d\3\2\2\2\u1611\u1612\7\u02a1\2\2\u1612\u1613\7\u019b"+
		"\2\2\u1613\u1614\5\u046a\u0236\2\u1614\u1615\7\u019c\2\2\u1615\u161d\3"+
		"\2\2\2\u1616\u1617\7\u0211\2\2\u1617\u1618\5\u029e\u0150\2\u1618\u1619"+
		"\5\u02f6\u017c\2\u1619\u161a\7\u0189\2\2\u161a\u161b\5\u029e\u0150\2\u161b"+
		"\u161d\3\2\2\2\u161c\u15b4\3\2\2\2\u161c\u15b6\3\2\2\2\u161c\u15ba\3\2"+
		"\2\2\u161c\u15bb\3\2\2\2\u161c\u15bc\3\2\2\2\u161c\u15bd\3\2\2\2\u161c"+
		"\u15be\3\2\2\2\u161c\u15bf\3\2\2\2\u161c\u15c1\3\2\2\2\u161c\u15c3\3\2"+
		"\2\2\u161c\u15c5\3\2\2\2\u161c\u15c9\3\2\2\2\u161c\u15d0\3\2\2\2\u161c"+
		"\u15d3\3\2\2\2\u161c\u15d8\3\2\2\2\u161c\u15e2\3\2\2\2\u161c\u15e4\3\2"+
		"\2\2\u161c\u15ee\3\2\2\2\u161c\u15fe\3\2\2\2\u161c\u1605\3\2\2\2\u161c"+
		"\u160c\3\2\2\2\u161c\u1611\3\2\2\2\u161c\u1616\3\2\2\2\u161d\u1626\3\2"+
		"\2\2\u161e\u161f\f\21\2\2\u161f\u1620\7\u017d\2\2\u1620\u1625\5\u02aa"+
		"\u0156\22\u1621\u1622\f\27\2\2\u1622\u1623\7\u01c6\2\2\u1623\u1625\5\u0496"+
		"\u024c\2\u1624\u161e\3\2\2\2\u1624\u1621\3\2\2\2\u1625\u1628\3\2\2\2\u1626"+
		"\u1624\3\2\2\2\u1626\u1627\3\2\2\2\u1627\u02ab\3\2\2\2\u1628\u1626\3\2"+
		"\2\2\u1629\u162a\6\u0157\u0094\2\u162a\u162b\7\u02fb\2\2\u162b\u02ad\3"+
		"\2\2\2\u162c\u162d\6\u0158\u0095\2\u162d\u162e\7\u01a0\2\2\u162e\u1633"+
		"\5\u047c\u023f\2\u162f\u1630\6\u0158\u0096\2\u1630\u1631\7\u01a1\2\2\u1631"+
		"\u1633\5\u047c\u023f\2\u1632\u162c\3\2\2\2\u1632\u162f\3\2\2\2\u1633\u02af"+
		"\3\2\2\2\u1634\u1635\7H\2\2\u1635\u1637\7\u019b\2\2\u1636\u1638\7\u01e6"+
		"\2\2\u1637\u1636\3\2\2\2\u1637\u1638\3\2\2\2\u1638\u1639\3\2\2\2\u1639"+
		"\u163a\5\u02be\u0160\2\u163a\u163d\7\u019c\2\2\u163b\u163c\6\u0159\u0097"+
		"\2\u163c\u163e\5\u02b6\u015c\2\u163d\u163b\3\2\2\2\u163d\u163e\3\2\2\2"+
		"\u163e\u16b8\3\2\2\2\u163f\u1640\tW\2\2\u1640\u1641\7\u019b\2\2\u1641"+
		"\u1642\5\u02be\u0160\2\u1642\u1645\7\u019c\2\2\u1643\u1644\6\u0159\u0098"+
		"\2\u1644\u1646\5\u02b6\u015c\2\u1645\u1643\3\2\2\2\u1645\u1646\3\2\2\2"+
		"\u1646\u16b8\3\2\2\2\u1647\u1648\6\u0159\u0099\2\u1648\u16b8\5\u02bc\u015f"+
		"\2\u1649\u164a\7\u01cc\2\2\u164a\u164c\7\u019b\2\2\u164b\u164d\7\u01ad"+
		"\2\2\u164c\u164b\3\2\2\2\u164c\u164d\3\2\2\2\u164d\u164e\3\2\2\2\u164e"+
		"\u164f\7\u018b\2\2\u164f\u1652\7\u019c\2\2\u1650\u1651\6\u0159\u009a\2"+
		"\u1651\u1653\5\u02b6\u015c\2\u1652\u1650\3\2\2\2\u1652\u1653\3\2\2\2\u1653"+
		"\u16b8\3\2\2\2\u1654\u1655\7\u01cc\2\2\u1655\u165d\7\u019b\2\2\u1656\u1658"+
		"\7\u01ad\2\2\u1657\u1656\3\2\2\2\u1657\u1658\3\2\2\2\u1658\u1659\3\2\2"+
		"\2\u1659\u165e\7\u018b\2\2\u165a\u165e\5\u02be\u0160\2\u165b\u165c\7\u01e6"+
		"\2\2\u165c\u165e\5\u02ee\u0178\2\u165d\u1657\3\2\2\2\u165d\u165a\3\2\2"+
		"\2\u165d\u165b\3\2\2\2\u165e\u165f\3\2\2\2\u165f\u1662\7\u019c\2\2\u1660"+
		"\u1661\6\u0159\u009b\2\u1661\u1663\5\u02b6\u015c\2\u1662\u1660\3\2\2\2"+
		"\u1662\u1663\3\2\2\2\u1663\u16b8\3\2\2\2\u1664\u1665\7\u0238\2\2\u1665"+
		"\u1667\7\u019b\2\2\u1666\u1668\7\u01e6\2\2\u1667\u1666\3\2\2\2\u1667\u1668"+
		"\3\2\2\2\u1668\u1669\3\2\2\2\u1669\u166a\5\u02be\u0160\2\u166a\u166d\7"+
		"\u019c\2\2\u166b\u166c\6\u0159\u009c\2\u166c\u166e\5\u02b6\u015c\2\u166d"+
		"\u166b\3\2\2\2\u166d\u166e\3\2\2\2\u166e\u16b8\3\2\2\2\u166f\u1670\7\u0230"+
		"\2\2\u1670\u1672\7\u019b\2\2\u1671\u1673\7\u01e6\2\2\u1672\u1671\3\2\2"+
		"\2\u1672\u1673\3\2\2\2\u1673\u1674\3\2\2\2\u1674\u1675\5\u02be\u0160\2"+
		"\u1675\u1678\7\u019c\2\2\u1676\u1677\6\u0159\u009d\2\u1677\u1679\5\u02b6"+
		"\u015c\2\u1678\u1676\3\2\2\2\u1678\u1679\3\2\2\2\u1679\u16b8\3\2\2\2\u167a"+
		"\u167b\7\u0280\2\2\u167b\u167c\7\u019b\2\2\u167c\u167d\5\u02be\u0160\2"+
		"\u167d\u1680\7\u019c\2\2\u167e\u167f\6\u0159\u009e\2\u167f\u1681\5\u02b6"+
		"\u015c\2\u1680\u167e\3\2\2\2\u1680\u1681\3\2\2\2\u1681\u16b8\3\2\2\2\u1682"+
		"\u1683\7\u02a4\2\2\u1683\u1684\7\u019b\2\2\u1684\u1685\5\u02be\u0160\2"+
		"\u1685\u1688\7\u019c\2\2\u1686\u1687\6\u0159\u009f\2\u1687\u1689\5\u02b6"+
		"\u015c\2\u1688\u1686\3\2\2\2\u1688\u1689\3\2\2\2\u1689\u16b8\3\2\2\2\u168a"+
		"\u168b\7\u027d\2\2\u168b\u168c\7\u019b\2\2\u168c\u168d\5\u02be\u0160\2"+
		"\u168d\u1690\7\u019c\2\2\u168e\u168f\6\u0159\u00a0\2\u168f\u1691\5\u02b6"+
		"\u015c\2\u1690\u168e\3\2\2\2\u1690\u1691\3\2\2\2\u1691\u16b8\3\2\2\2\u1692"+
		"\u1693\7\u02a7\2\2\u1693\u1694\7\u019b\2\2\u1694\u1695\5\u02be\u0160\2"+
		"\u1695\u1698\7\u019c\2\2\u1696\u1697\6\u0159\u00a1\2\u1697\u1699\5\u02b6"+
		"\u015c\2\u1698\u1696\3\2\2\2\u1698\u1699\3\2\2\2\u1699\u16b8\3\2\2\2\u169a"+
		"\u169b\7\u0285\2\2\u169b\u169d\7\u019b\2\2\u169c\u169e\7\u01e6\2\2\u169d"+
		"\u169c\3\2\2\2\u169d\u169e\3\2\2\2\u169e\u169f\3\2\2\2\u169f\u16a0\5\u02be"+
		"\u0160\2\u16a0\u16a3\7\u019c\2\2\u16a1\u16a2\6\u0159\u00a2\2\u16a2\u16a4"+
		"\5\u02b6\u015c\2\u16a3\u16a1\3\2\2\2\u16a3\u16a4\3\2\2\2\u16a4\u16b8\3"+
		"\2\2\2\u16a5\u16a6\7\u0203\2\2\u16a6\u16a8\7\u019b\2\2\u16a7\u16a9\7\u01e6"+
		"\2\2\u16a8\u16a7\3\2\2\2\u16a8\u16a9\3\2\2\2\u16a9\u16aa\3\2\2\2\u16aa"+
		"\u16ac\5\u02ee\u0178\2\u16ab\u16ad\5\u014c\u00a7\2\u16ac\u16ab\3\2\2\2"+
		"\u16ac\u16ad\3\2\2\2\u16ad\u16b0\3\2\2\2\u16ae\u16af\7\u026a\2\2\u16af"+
		"\u16b1\5\u047e\u0240\2\u16b0\u16ae\3\2\2\2\u16b0\u16b1\3\2\2\2\u16b1\u16b2"+
		"\3\2\2\2\u16b2\u16b5\7\u019c\2\2\u16b3\u16b4\6\u0159\u00a3\2\u16b4\u16b6"+
		"\5\u02b6\u015c\2\u16b5\u16b3\3\2\2\2\u16b5\u16b6\3\2\2\2\u16b6\u16b8\3"+
		"\2\2\2\u16b7\u1634\3\2\2\2\u16b7\u163f\3\2\2\2\u16b7\u1647\3\2\2\2\u16b7"+
		"\u1649\3\2\2\2\u16b7\u1654\3\2\2\2\u16b7\u1664\3\2\2\2\u16b7\u166f\3\2"+
		"\2\2\u16b7\u167a\3\2\2\2\u16b7\u1682\3\2\2\2\u16b7\u168a\3\2\2\2\u16b7"+
		"\u1692\3\2\2\2\u16b7\u169a\3\2\2\2\u16b7\u16a5\3\2\2\2\u16b8\u02b1\3\2"+
		"\2\2\u16b9\u16ba\7\u02c0\2\2\u16ba\u16bb\7\u019b\2\2\u16bb\u16bc\5\u02ee"+
		"\u0178\2\u16bc\u16bd\7\u019c\2\2\u16bd\u02b3\3\2\2\2\u16be\u16bf\tX\2"+
		"\2\u16bf\u16c0\5\u049e\u0250\2\u16c0\u16c1\5\u02b6\u015c\2\u16c1\u16e9"+
		"\3\2\2\2\u16c2\u16c3\7\u02d0\2\2\u16c3\u16c4\5\u02fe\u0180\2\u16c4\u16c5"+
		"\5\u02b6\u015c\2\u16c5\u16e9\3\2\2\2\u16c6\u16c7\tY\2\2\u16c7\u16c8\7"+
		"\u019b\2\2\u16c8\u16ca\5\u029e\u0150\2\u16c9\u16cb\5\u02b8\u015d\2\u16ca"+
		"\u16c9\3\2\2\2\u16ca\u16cb\3\2\2\2\u16cb\u16cc\3\2\2\2\u16cc\u16ce\7\u019c"+
		"\2\2\u16cd\u16cf\5\u02ba\u015e\2\u16ce\u16cd\3\2\2\2\u16ce\u16cf\3\2\2"+
		"\2\u16cf\u16d0\3\2\2\2\u16d0\u16d1\5\u02b6\u015c\2\u16d1\u16e9\3\2\2\2"+
		"\u16d2\u16d3\tZ\2\2\u16d3\u16d5\5\u02fc\u017f\2\u16d4\u16d6\5\u02ba\u015e"+
		"\2\u16d5\u16d4\3\2\2\2\u16d5\u16d6\3\2\2\2\u16d6\u16d7\3\2\2\2\u16d7\u16d8"+
		"\5\u02b6\u015c\2\u16d8\u16e9\3\2\2\2\u16d9\u16da\7\u02cf\2\2\u16da\u16db"+
		"\7\u019b\2\2\u16db\u16dc\5\u029e\u0150\2\u16dc\u16dd\7\u0198\2\2\u16dd"+
		"\u16de\5\u02aa\u0156\2\u16de\u16e1\7\u019c\2\2\u16df\u16e0\7\u01fd\2\2"+
		"\u16e0\u16e2\t[\2\2\u16e1\u16df\3\2\2\2\u16e1\u16e2\3\2\2\2\u16e2\u16e4"+
		"\3\2\2\2\u16e3\u16e5\5\u02ba\u015e\2\u16e4\u16e3\3\2\2\2\u16e4\u16e5\3"+
		"\2\2\2\u16e5\u16e6\3\2\2\2\u16e6\u16e7\5\u02b6\u015c\2\u16e7\u16e9\3\2"+
		"\2\2\u16e8\u16be\3\2\2\2\u16e8\u16c2\3\2\2\2\u16e8\u16c6\3\2\2\2\u16e8"+
		"\u16d2\3\2\2\2\u16e8\u16d9\3\2\2\2\u16e9\u02b5\3\2\2\2\u16ea\u16ed\7\u02d3"+
		"\2\2\u16eb\u16ee\5\u045e\u0230\2\u16ec\u16ee\5\u0132\u009a\2\u16ed\u16eb"+
		"\3\2\2\2\u16ed\u16ec\3\2\2\2\u16ee\u02b7\3\2\2\2\u16ef\u16f2\7\u0198\2"+
		"\2\u16f0\u16f3\5\u0472\u023a\2\u16f1\u16f3\7\u01a6\2\2\u16f2\u16f0\3\2"+
		"\2\2\u16f2\u16f1\3\2\2\2\u16f3\u16f6\3\2\2\2\u16f4\u16f5\7\u0198\2\2\u16f5"+
		"\u16f7\5\u029e\u0150\2\u16f6\u16f4\3\2\2\2\u16f6\u16f7\3\2\2\2\u16f7\u02b9"+
		"\3\2\2\2\u16f8\u16f9\t\\\2\2\u16f9\u16fa\7\u02d1\2\2\u16fa\u02bb\3\2\2"+
		"\2\u16fb\u16fc\7\u02bb\2\2\u16fc\u16fd\7\u019b\2\2\u16fd\u16fe\5\u02be"+
		"\u0160\2\u16fe\u1700\7\u019c\2\2\u16ff\u1701\5\u02b6\u015c\2\u1700\u16ff"+
		"\3\2\2\2\u1700\u1701\3\2\2\2\u1701\u170c\3\2\2\2\u1702\u1703\7\u02ba\2"+
		"\2\u1703\u1704\7\u019b\2\2\u1704\u1705\5\u02be\u0160\2\u1705\u1706\7\u0198"+
		"\2\2\u1706\u1707\5\u02be\u0160\2\u1707\u1709\7\u019c\2\2\u1708\u170a\5"+
		"\u02b6\u015c\2\u1709\u1708\3\2\2\2\u1709\u170a\3\2\2\2\u170a\u170c\3\2"+
		"\2\2\u170b\u16fb\3\2\2\2\u170b\u1702\3\2\2\2\u170c\u02bd\3\2\2\2\u170d"+
		"\u170f\7\u01ad\2\2\u170e\u170d\3\2\2\2\u170e\u170f\3\2\2\2\u170f\u1710"+
		"\3\2\2\2\u1710\u1711\5\u029e\u0150\2\u1711\u02bf\3\2\2\2\u1712\u1718\5"+
		"\u02c2\u0162\2\u1713\u1714\7\u019b\2\2\u1714\u1715\5\u02c2\u0162\2\u1715"+
		"\u1716\7\u019c\2\2\u1716\u1718\3\2\2\2\u1717\u1712\3\2\2\2\u1717\u1713"+
		"\3\2\2\2\u1718\u02c1\3\2\2\2\u1719\u171e\5\u046a\u0236\2\u171a\u171b\7"+
		"\u0198\2\2\u171b\u171d\5\u046a\u0236\2\u171c\u171a\3\2\2\2\u171d\u1720"+
		"\3\2\2\2\u171e\u171c\3\2\2\2\u171e\u171f\3\2\2\2\u171f\u02c3\3\2\2\2\u1720"+
		"\u171e\3\2\2\2\u1721\u1722\7\u0214\2\2\u1722\u1723\7M\2\2\u1723\u1731"+
		"\7\u00e0\2\2\u1724\u1725\7\u0214\2\2\u1725\u1726\7\u023b\2\2\u1726\u1727"+
		"\7\34\2\2\u1727\u172b\7\u00e0\2\2\u1728\u1729\7\u02ac\2\2\u1729\u172a"+
		"\7\u010d\2\2\u172a\u172c\7\u008a\2\2\u172b\u1728\3\2\2\2\u172b\u172c\3"+
		"\2\2\2\u172c\u1731\3\2\2\2\u172d\u172e\7\u02ac\2\2\u172e\u172f\7\u010d"+
		"\2\2\u172f\u1731\7\u008a\2\2\u1730\u1721\3\2\2\2\u1730\u1724\3\2\2\2\u1730"+
		"\u172d\3\2\2\2\u1731\u02c5\3\2\2\2\u1732\u1733\7\u01c4\2\2\u1733\u1734"+
		"\7\u019b\2\2\u1734\u1737\5\u02ee\u0178\2\u1735\u1736\7\u029c\2\2\u1736"+
		"\u1738\5\u03a2\u01d2\2\u1737\u1735\3\2\2\2\u1737\u1738\3\2\2\2\u1738\u1739"+
		"\3\2\2\2\u1739\u173a\7\u019c\2\2\u173a\u1844\3\2\2\2\u173b\u173d\7\u01d2"+
		"\2\2\u173c\u173e\5\u049e\u0250\2\u173d\u173c\3\2\2\2\u173d\u173e\3\2\2"+
		"\2\u173e\u1844\3\2\2\2\u173f\u1740\7r\2\2\u1740\u1844\5\u02fc\u017f\2"+
		"\u1741\u1742\7s\2\2\u1742\u1844\5\u02fc\u017f\2\u1743\u1744\7\u00a0\2"+
		"\2\u1744\u1844\5\u02fc\u017f\2\u1745\u1746\7\u0210\2\2\u1746\u1747\7\u019b"+
		"\2\2\u1747\u1748\5\u029e\u0150\2\u1748\u1749\7\u0198\2\2\u1749\u174a\5"+
		"\u029e\u0150\2\u174a\u174b\7\u0198\2\2\u174b\u174c\5\u029e\u0150\2\u174c"+
		"\u174d\7\u0198\2\2\u174d\u174e\5\u029e\u0150\2\u174e\u174f\7\u019c\2\2"+
		"\u174f\u1844\3\2\2\2\u1750\u1751\7\u0211\2\2\u1751\u1752\7\u019b\2\2\u1752"+
		"\u1755\5\u029e\u0150\2\u1753\u1754\7\u0198\2\2\u1754\u1756\5\u029e\u0150"+
		"\2\u1755\u1753\3\2\2\2\u1756\u1757\3\2\2\2\u1757\u1755\3\2\2\2\u1757\u1758"+
		"\3\2\2\2\u1758\u1759\3\2\2\2\u1759\u175a\7\u019c\2\2\u175a\u1844\3\2\2"+
		"\2\u175b\u175c\7\u021f\2\2\u175c\u175d\7\u019b\2\2\u175d\u175e\5\u029e"+
		"\u0150\2\u175e\u175f\7\u0198\2\2\u175f\u1760\5\u029e\u0150\2\u1760\u1761"+
		"\7\u019c\2\2\u1761\u1844\3\2\2\2\u1762\u1763\7\u00dd\2\2\u1763\u1844\5"+
		"\u02fc\u017f\2\u1764\u1765\7\u00e1\2\2\u1765\u1844\5\u02fc\u017f\2\u1766"+
		"\u1767\7\u0266\2\2\u1767\u1768\7\u019b\2\2\u1768\u1769\5\u029e\u0150\2"+
		"\u1769\u176a\7\u0198\2\2\u176a\u176b\5\u029e\u0150\2\u176b\u176c\7\u019c"+
		"\2\2\u176c\u1844\3\2\2\2\u176d\u176e\7\u0133\2\2\u176e\u1844\5\u02fc\u017f"+
		"\2\u176f\u1770\7\u0162\2\2\u1770\u1844\5\u02fc\u017f\2\u1771\u1772\7\u015f"+
		"\2\2\u1772\u1773\7\u019b\2\2\u1773\u1776\5\u029e\u0150\2\u1774\u1775\7"+
		"\u0198\2\2\u1775\u1777\5\u029e\u0150\2\u1776\u1774\3\2\2\2\u1776\u1777"+
		"\3\2\2\2\u1777\u1778\3\2\2\2\u1778\u1779\7\u019c\2\2\u1779\u1844\3\2\2"+
		"\2\u177a\u1844\5\u02d4\u016b\2\u177b\u177c\7\u016e\2\2\u177c\u1844\5\u049e"+
		"\u0250\2\u177d\u177e\7\u02a1\2\2\u177e\u1844\5\u02fc\u017f\2\u177f\u1780"+
		"\7\u017b\2\2\u1780\u1844\5\u02fc\u017f\2\u1781\u1782\t]\2\2\u1782\u1783"+
		"\7\u019b\2\2\u1783\u1784\5\u029e\u0150\2\u1784\u178a\7\u0198\2\2\u1785"+
		"\u178b\5\u029e\u0150\2\u1786\u1787\7\u0211\2\2\u1787\u1788\5\u029e\u0150"+
		"\2\u1788\u1789\5\u02f6\u017c\2\u1789\u178b\3\2\2\2\u178a\u1785\3\2\2\2"+
		"\u178a\u1786\3\2\2\2\u178b\u178c\3\2\2\2\u178c\u178d\7\u019c\2\2\u178d"+
		"\u1844\3\2\2\2\u178e\u1790\7\u01cf\2\2\u178f\u1791\5\u049e\u0250\2\u1790"+
		"\u178f\3\2\2\2\u1790\u1791\3\2\2\2\u1791\u1844\3\2\2\2\u1792\u1794\7\u01d4"+
		"\2\2\u1793\u1795\5\u02ca\u0166\2\u1794\u1793\3\2\2\2\u1794\u1795\3\2\2"+
		"\2\u1795\u1844\3\2\2\2\u1796\u1797\t^\2\2\u1797\u1798\7\u019b\2\2\u1798"+
		"\u1799\5\u029e\u0150\2\u1799\u179a\7\u0198\2\2\u179a\u179b\7\u0211\2\2"+
		"\u179b\u179c\5\u029e\u0150\2\u179c\u179d\5\u02f6\u017c\2\u179d\u179e\7"+
		"\u019c\2\2\u179e\u1844\3\2\2\2\u179f\u17a0\7\u01f6\2\2\u17a0\u17a1\7\u019b"+
		"\2\2\u17a1\u17a2\5\u02f6\u017c\2\u17a2\u17a3\7\u01fd\2\2\u17a3\u17a4\5"+
		"\u029e\u0150\2\u17a4\u17a5\7\u019c\2\2\u17a5\u1844\3\2\2\2\u17a6\u17a7"+
		"\7\u009b\2\2\u17a7\u17a8\7\u019b\2\2\u17a8\u17a9\5\u02d2\u016a\2\u17a9"+
		"\u17aa\7\u0198\2\2\u17aa\u17ab\5\u029e\u0150\2\u17ab\u17ac\7\u019c\2\2"+
		"\u17ac\u1844\3\2\2\2\u17ad\u17af\7\u0240\2\2\u17ae\u17b0\5\u02ca\u0166"+
		"\2\u17af\u17ae\3\2\2\2\u17af\u17b0\3\2\2\2\u17b0\u1844\3\2\2\2\u17b1\u17b2"+
		"\7\u0251\2\2\u17b2\u17b3\7\u019b\2\2\u17b3\u17b4\5\u02a8\u0155\2\u17b4"+
		"\u17b5\7\u0214\2\2\u17b5\u17b6\5\u029e\u0150\2\u17b6\u17b7\7\u019c\2\2"+
		"\u17b7\u1844\3\2\2\2\u17b8\u1844\5\u02d6\u016c\2\u17b9\u17bb\7\u0286\2"+
		"\2\u17ba\u17bc\5\u02ca\u0166\2\u17bb\u17ba\3\2\2\2\u17bb\u17bc\3\2\2\2"+
		"\u17bc\u1844\3\2\2\2\u17bd\u17be\t_\2\2\u17be\u17bf\7\u019b\2\2\u17bf"+
		"\u17c0\5\u02f8\u017d\2\u17c0\u17c1\7\u0198\2\2\u17c1\u17c2\5\u029e\u0150"+
		"\2\u17c2\u17c3\7\u0198\2\2\u17c3\u17c4\5\u029e\u0150\2\u17c4\u17c5\7\u019c"+
		"\2\2\u17c5\u1844\3\2\2\2\u17c6\u17c8\7\u029d\2\2\u17c7\u17c9\5\u049e\u0250"+
		"\2\u17c8\u17c7\3\2\2\2\u17c8\u17c9\3\2\2\2\u17c9\u1844\3\2\2\2\u17ca\u17cc"+
		"\7\u029f\2\2\u17cb\u17cd\5\u02ca\u0166\2\u17cc\u17cb\3\2\2\2\u17cc\u17cd"+
		"\3\2\2\2\u17cd\u1844\3\2\2\2\u17ce\u17d0\7\u029e\2\2\u17cf\u17d1\5\u02ca"+
		"\u0166\2\u17d0\u17cf\3\2\2\2\u17d0\u17d1\3\2\2\2\u17d1\u1844\3\2\2\2\u17d2"+
		"\u17d3\7\4\2\2\u17d3\u1844\5\u02fc\u017f\2\u17d4\u17d5\7\n\2\2\u17d5\u1844"+
		"\5\u02fc\u017f\2\u17d6\u17d7\7W\2\2\u17d7\u1844\5\u02fa\u017e\2\u17d8"+
		"\u17d9\7Y\2\2\u17d9\u1844\5\u02fc\u017f\2\u17da\u17db\7\u01d5\2\2\u17db"+
		"\u1844\5\u049e\u0250\2\u17dc\u17dd\7\u0209\2\2\u17dd\u17de\7\u019b\2\2"+
		"\u17de\u17df\5\u029e\u0150\2\u17df\u17e0\7\u0198\2\2\u17e0\u17e1\5\u029e"+
		"\u0150\2\u17e1\u17e2\7\u0198\2\2\u17e2\u17e3\5\u029e\u0150\2\u17e3\u17e4"+
		"\7\u019c\2\2\u17e4\u1844\3\2\2\2\u17e5\u17e6\7\26\2\2\u17e6\u17e7\7\u019b"+
		"\2\2\u17e7\u17e8\5\u029e\u0150\2\u17e8\u17e9\7\u0198\2\2\u17e9\u17ec\5"+
		"\u029e\u0150\2\u17ea\u17eb\7\u0198\2\2\u17eb\u17ed\5\u029e\u0150\2\u17ec"+
		"\u17ea\3\2\2\2\u17ec\u17ed\3\2\2\2\u17ed\u17ee\3\2\2\2\u17ee\u17ef\7\u019c"+
		"\2\2\u17ef\u1844\3\2\2\2\u17f0\u17f1\7\u00db\2\2\u17f1\u1844\5\u02fc\u017f"+
		"\2\u17f2\u17f3\7\u023a\2\2\u17f3\u17f4\7\u019b\2\2\u17f4\u17f5\5\u029e"+
		"\u0150\2\u17f5\u17f6\7\u0198\2\2\u17f6\u17f7\5\u029e\u0150\2\u17f7\u17f8"+
		"\7\u019c\2\2\u17f8\u1844\3\2\2\2\u17f9\u17fa\6\u0164\u00a4\2\u17fa\u17fb"+
		"\7\u00f5\2\2\u17fb\u17fc\7\u019b\2\2\u17fc\u17fd\5\u0482\u0242\2\u17fd"+
		"\u17fe\7\u019c\2\2\u17fe\u1844\3\2\2\2\u17ff\u1800\6\u0164\u00a5\2\u1800"+
		"\u1801\7\u00fd\2\2\u1801\u1844\5\u02fc\u017f\2\u1802\u1803\7\u010c\2\2"+
		"\u1803\u1844\5\u02fc\u017f\2\u1804\u1805\7\u025f\2\2\u1805\u1806\7\u019b"+
		"\2\2\u1806\u1807\5\u029e\u0150\2\u1807\u1808\7\u0198\2\2\u1808\u1809\5"+
		"\u029e\u0150\2\u1809\u180a\7\u019c\2\2\u180a\u1844\3\2\2\2\u180b\u180c"+
		"\7\u0260\2\2\u180c\u180d\7\u019b\2\2\u180d\u180e\5\u029e\u0150\2\u180e"+
		"\u180f\7\u0198\2\2\u180f\u1810\5\u029e\u0150\2\u1810\u1811\7\u0198\2\2"+
		"\u1811\u1812\5\u029e\u0150\2\u1812\u1813\7\u019c\2\2\u1813\u1844\3\2\2"+
		"\2\u1814\u1815\7\u0128\2\2\u1815\u1844\5\u02fc\u017f\2\u1816\u1817\7\u012d"+
		"\2\2\u1817\u1844\5\u049e\u0250\2\u1818\u1819\7\64\2\2\u1819\u181a\7\u019b"+
		"\2\2\u181a\u181b\5\u029e\u0150\2\u181b\u181c\7\u0198\2\2\u181c\u181d\5"+
		"\u029e\u0150\2\u181d\u181e\7\u019c\2\2\u181e\u1844\3\2\2\2\u181f\u1820"+
		"\7\u0175\2\2\u1820\u1821\7\u019b\2\2\u1821\u1824\5\u029e\u0150\2\u1822"+
		"\u1823\7\u0198\2\2\u1823\u1825\5\u029e\u0150\2\u1824\u1822\3\2\2\2\u1824"+
		"\u1825\3\2\2\2\u1825\u1826\3\2\2\2\u1826\u1827\7\u019c\2\2\u1827\u1844"+
		"\3\2\2\2\u1828\u1829\7\u0177\2\2\u1829\u182a\7\u019b\2\2\u182a\u183e\5"+
		"\u029e\u0150\2\u182b\u182c\7\u01b1\2\2\u182c\u182d\7\u01c4\2\2\u182d\u182f"+
		"\5\u039e\u01d0\2\u182e\u182b\3\2\2\2\u182e\u182f\3\2\2\2\u182f\u1832\3"+
		"\2\2\2\u1830\u1831\6\u0164\u00a6\2\u1831\u1833\5\u02ce\u0168\2\u1832\u1830"+
		"\3\2\2\2\u1832\u1833\3\2\2\2\u1833\u183f\3\2\2\2\u1834\u1835\7\u01b1\2"+
		"\2\u1835\u1836\7\u01b7\2\2\u1836\u183f\5\u039e\u01d0\2\u1837\u1838\7\u0198"+
		"\2\2\u1838\u1839\5\u046e\u0238\2\u1839\u183a\7\u0198\2\2\u183a\u183b\5"+
		"\u046e\u0238\2\u183b\u183c\7\u0198\2\2\u183c\u183d\5\u046e\u0238\2\u183d"+
		"\u183f\3\2\2\2\u183e\u182e\3\2\2\2\u183e\u1834\3\2\2\2\u183e\u1837\3\2"+
		"\2\2\u183f\u1840\3\2\2\2\u1840\u1841\7\u019c\2\2\u1841\u1844\3\2\2\2\u1842"+
		"\u1844\5\u02c8\u0165\2\u1843\u1732\3\2\2\2\u1843\u173b\3\2\2\2\u1843\u173f"+
		"\3\2\2\2\u1843\u1741\3\2\2\2\u1843\u1743\3\2\2\2\u1843\u1745\3\2\2\2\u1843"+
		"\u1750\3\2\2\2\u1843\u175b\3\2\2\2\u1843\u1762\3\2\2\2\u1843\u1764\3\2"+
		"\2\2\u1843\u1766\3\2\2\2\u1843\u176d\3\2\2\2\u1843\u176f\3\2\2\2\u1843"+
		"\u1771\3\2\2\2\u1843\u177a\3\2\2\2\u1843\u177b\3\2\2\2\u1843\u177d\3\2"+
		"\2\2\u1843\u177f\3\2\2\2\u1843\u1781\3\2\2\2\u1843\u178e\3\2\2\2\u1843"+
		"\u1792\3\2\2\2\u1843\u1796\3\2\2\2\u1843\u179f\3\2\2\2\u1843\u17a6\3\2"+
		"\2\2\u1843\u17ad\3\2\2\2\u1843\u17b1\3\2\2\2\u1843\u17b8\3\2\2\2\u1843"+
		"\u17b9\3\2\2\2\u1843\u17bd\3\2\2\2\u1843\u17c6\3\2\2\2\u1843\u17ca\3\2"+
		"\2\2\u1843\u17ce\3\2\2\2\u1843\u17d2\3\2\2\2\u1843\u17d4\3\2\2\2\u1843"+
		"\u17d6\3\2\2\2\u1843\u17d8\3\2\2\2\u1843\u17da\3\2\2\2\u1843\u17dc\3\2"+
		"\2\2\u1843\u17e5\3\2\2\2\u1843\u17f0\3\2\2\2\u1843\u17f2\3\2\2\2\u1843"+
		"\u17f9\3\2\2\2\u1843\u17ff\3\2\2\2\u1843\u1802\3\2\2\2\u1843\u1804\3\2"+
		"\2\2\u1843\u180b\3\2\2\2\u1843\u1814\3\2\2\2\u1843\u1816\3\2\2\2\u1843"+
		"\u1818\3\2\2\2\u1843\u181f\3\2\2\2\u1843\u1828\3\2\2\2\u1843\u1842\3\2"+
		"\2\2\u1844\u02c7\3\2\2\2\u1845\u1846\6\u0165\u00a7\2\u1846\u1847\7\17"+
		"\2\2\u1847\u1848\7\u019b\2\2\u1848\u1849\5\u029e\u0150\2\u1849\u184a\7"+
		"\u0198\2\2\u184a\u184b\5\u029e\u0150\2\u184b\u184c\7\u019c\2\2\u184c\u1865"+
		"\3\2\2\2\u184d\u184e\7\u009a\2\2\u184e\u1850\7\u019b\2\2\u184f\u1851\5"+
		"\u02ee\u0178\2\u1850\u184f\3\2\2\2\u1850\u1851\3\2\2\2\u1851\u1852\3\2"+
		"\2\2\u1852\u1865\7\u019c\2\2\u1853\u1854\7\u00b4\2\2\u1854\u1865\5\u02fa"+
		"\u017e\2\u1855\u1856\7\u00e2\2\2\u1856\u1865\5\u02fa\u017e\2\u1857\u1858"+
		"\7\u00e3\2\2\u1858\u1865\5\u02fa\u017e\2\u1859\u185a\7\u00e4\2\2\u185a"+
		"\u1865\5\u02fa\u017e\2\u185b\u185c\7\u0102\2\2\u185c\u185d\7\u019b\2\2"+
		"\u185d\u185e\5\u029e\u0150\2\u185e\u185f\7\u0198\2\2\u185f\u1860\5\u029e"+
		"\u0150\2\u1860\u1861\7\u019c\2\2\u1861\u1865\3\2\2\2\u1862\u1863\7\u0103"+
		"\2\2\u1863\u1865\5\u02fa\u017e\2\u1864\u1845\3\2\2\2\u1864\u184d\3\2\2"+
		"\2\u1864\u1853\3\2\2\2\u1864\u1855\3\2\2\2\u1864\u1857\3\2\2\2\u1864\u1859"+
		"\3\2\2\2\u1864\u185b\3\2\2\2\u1864\u1862\3\2\2\2\u1865\u02c9\3\2\2\2\u1866"+
		"\u1868\7\u019b\2\2\u1867\u1869\5\u02cc\u0167\2\u1868\u1867\3\2\2\2\u1868"+
		"\u1869\3\2\2\2\u1869\u186a\3\2\2\2\u186a\u186b\7\u019c\2\2\u186b\u02cb"+
		"\3\2\2\2\u186c\u186d\6\u0167\u00a8\2\u186d\u186e\7\u017e\2\2\u186e\u02cd"+
		"\3\2\2\2\u186f\u187c\7\u00b3\2\2\u1870\u1871\5\u0470\u0239\2\u1871\u1872"+
		"\7\u018a\2\2\u1872\u1873\5\u0470\u0239\2\u1873\u187d\3\2\2\2\u1874\u1879"+
		"\5\u02d0\u0169\2\u1875\u1876\7\u0198\2\2\u1876\u1878\5\u02d0\u0169\2\u1877"+
		"\u1875\3\2\2\2\u1878\u187b\3\2\2\2\u1879\u1877\3\2\2\2\u1879\u187a\3\2"+
		"\2\2\u187a\u187d\3\2\2\2\u187b\u1879\3\2\2\2\u187c\u1870\3\2\2\2\u187c"+
		"\u1874\3\2\2\2\u187d\u02cf\3\2\2\2\u187e\u1884\5\u0470\u0239\2\u187f\u1881"+
		"\t#\2\2\u1880\u1882\7\u0128\2\2\u1881\u1880\3\2\2\2\u1881\u1882\3\2\2"+
		"\2\u1882\u1885\3\2\2\2\u1883\u1885\7\u0128\2\2\u1884\u187f\3\2\2\2\u1884"+
		"\u1883\3\2\2\2\u1884\u1885\3\2\2\2\u1885\u02d1\3\2\2\2\u1886\u1887\t`"+
		"\2\2\u1887\u02d3\3\2\2\2\u1888\u1889\7\u0292\2\2\u1889\u18a1\7\u019b\2"+
		"\2\u188a\u188d\5\u029e\u0150\2\u188b\u188c\7\u01fd\2\2\u188c\u188e\5\u029e"+
		"\u0150\2\u188d\u188b\3\2\2\2\u188d\u188e\3\2\2\2\u188e\u18a2\3\2\2\2\u188f"+
		"\u1891\7\u021d\2\2\u1890\u1892\5\u029e\u0150\2\u1891\u1890\3\2\2\2\u1891"+
		"\u1892\3\2\2\2\u1892\u1893\3\2\2\2\u1893\u1894\7\u01fd\2\2\u1894\u18a2"+
		"\5\u029e\u0150\2\u1895\u1897\7\u0290\2\2\u1896\u1898\5\u029e\u0150\2\u1897"+
		"\u1896\3\2\2\2\u1897\u1898\3\2\2\2\u1898\u1899\3\2\2\2\u1899\u189a\7\u01fd"+
		"\2\2\u189a\u18a2\5\u029e\u0150\2\u189b\u189d\7\u01bd\2\2\u189c\u189e\5"+
		"\u029e\u0150\2\u189d\u189c\3\2\2\2\u189d\u189e\3\2\2\2\u189e\u189f\3\2"+
		"\2\2\u189f\u18a0\7\u01fd\2\2\u18a0\u18a2\5\u029e\u0150\2\u18a1\u188a\3"+
		"\2\2\2\u18a1\u188f\3\2\2\2\u18a1\u1895\3\2\2\2\u18a1\u189b\3\2\2\2\u18a2"+
		"\u18a3\3\2\2\2\u18a3\u18a4\7\u019c\2\2\u18a4\u02d5\3\2\2\2\u18a5\u18a6"+
		"\7\u0284\2\2\u18a6\u18a7\7\u019b\2\2\u18a7\u18b4\5\u029e\u0150\2\u18a8"+
		"\u18a9\7\u0198\2\2\u18a9\u18ac\5\u029e\u0150\2\u18aa\u18ab\7\u0198\2\2"+
		"\u18ab\u18ad\5\u029e\u0150\2\u18ac\u18aa\3\2\2\2\u18ac\u18ad\3\2\2\2\u18ad"+
		"\u18b5\3\2\2\2\u18ae\u18af\7\u01fd\2\2\u18af\u18b2\5\u029e\u0150\2\u18b0"+
		"\u18b1\7\u01fc\2\2\u18b1\u18b3\5\u029e\u0150\2\u18b2\u18b0\3\2\2\2\u18b2"+
		"\u18b3\3\2\2\2\u18b3\u18b5\3\2\2\2\u18b4\u18a8\3\2\2\2\u18b4\u18ae\3\2"+
		"\2\2\u18b5\u18b6\3\2\2\2\u18b6\u18b7\7\u019c\2\2\u18b7\u02d7\3\2\2\2\u18b8"+
		"\u18b9\5\u0460\u0231\2\u18b9\u18bb\7\u019b\2\2\u18ba\u18bc\5\u02da\u016e"+
		"\2\u18bb\u18ba\3\2\2\2\u18bb\u18bc\3\2\2\2\u18bc\u18bd\3\2\2\2\u18bd\u18be"+
		"\7\u019c\2\2\u18be\u18c7\3\2\2\2\u18bf\u18c0\5\u0468\u0235\2\u18c0\u18c2"+
		"\7\u019b\2\2\u18c1\u18c3\5\u02ee\u0178\2\u18c2\u18c1\3\2\2\2\u18c2\u18c3"+
		"\3\2\2\2\u18c3\u18c4\3\2\2\2\u18c4\u18c5\7\u019c\2\2\u18c5\u18c7\3\2\2"+
		"\2\u18c6\u18b8\3\2\2\2\u18c6\u18bf\3\2\2\2\u18c7\u02d9\3\2\2\2\u18c8\u18cd"+
		"\5\u02dc\u016f\2\u18c9\u18ca\7\u0198\2\2\u18ca\u18cc\5\u02dc\u016f\2\u18cb"+
		"\u18c9\3\2\2\2\u18cc\u18cf\3\2\2\2\u18cd\u18cb\3\2\2\2\u18cd\u18ce\3\2"+
		"\2\2\u18ce\u02db\3\2\2\2\u18cf\u18cd\3\2\2\2\u18d0\u18d2\5\u029e\u0150"+
		"\2\u18d1\u18d3\5\u0160\u00b1\2\u18d2\u18d1\3\2\2\2\u18d2\u18d3\3\2\2\2"+
		"\u18d3\u02dd\3\2\2\2\u18d4\u18d7\5\u02e0\u0171\2\u18d5\u18d6\7\u0182\2"+
		"\2\u18d6\u18d8\5\u029e\u0150\2\u18d7\u18d5\3\2\2\2\u18d7\u18d8\3\2\2\2"+
		"\u18d8\u18db\3\2\2\2\u18d9\u18db\5\u02e2\u0172\2\u18da\u18d4\3\2\2\2\u18da"+
		"\u18d9\3\2\2\2\u18db\u02df\3\2\2\2\u18dc\u18dd\7\u01a2\2\2\u18dd\u18e0"+
		"\5\u0496\u024c\2\u18de\u18e0\7\u01a3\2\2\u18df\u18dc\3\2\2\2\u18df\u18de"+
		"\3\2\2\2\u18e0\u02e1\3\2\2\2\u18e1\u18e3\7\u01a4\2\2\u18e2\u18e4\5\u04a4"+
		"\u0253\2\u18e3\u18e2\3\2\2\2\u18e3\u18e4\3\2\2\2\u18e4\u18e5\3\2\2\2\u18e5"+
		"\u18e7\5\u0496\u024c\2\u18e6\u18e8\5\u046c\u0237\2\u18e7\u18e6\3\2\2\2"+
		"\u18e7\u18e8\3\2\2\2\u18e8\u02e3\3\2\2\2\u18e9\u18ea\6\u0173\u00a9\2\u18ea"+
		"\u18ec\5\u0462\u0232\2\u18eb\u18ed\5\u046c\u0237\2\u18ec\u18eb\3\2\2\2"+
		"\u18ec\u18ed\3\2\2\2\u18ed\u18f4\3\2\2\2\u18ee\u18ef\6\u0173\u00aa\2\u18ef"+
		"\u18f1\5\u0498\u024d\2\u18f0\u18f2\5\u046c\u0237\2\u18f1\u18f0\3\2\2\2"+
		"\u18f1\u18f2\3\2\2\2\u18f2\u18f4\3\2\2\2\u18f3\u18e9\3\2\2\2\u18f3\u18ee"+
		"\3\2\2\2\u18f4\u18f8\3\2\2\2\u18f5\u18f6\7\u01e0\2\2\u18f6\u18f8\5\u046c"+
		"\u0237\2\u18f7\u18f3\3\2\2\2\u18f7\u18f5\3\2\2\2\u18f8\u02e5\3\2\2\2\u18f9"+
		"\u18fa\7\u02a9\2\2\u18fa\u18fb\5\u029e\u0150\2\u18fb\u02e7\3\2\2\2\u18fc"+
		"\u18fd\7\u028b\2\2\u18fd\u18fe\5\u029e\u0150\2\u18fe\u02e9\3\2\2\2\u18ff"+
		"\u1900\7\u01ec\2\2\u1900\u1901\5\u029e\u0150\2\u1901\u02eb\3\2\2\2\u1902"+
		"\u1904\7\u01b7\2\2\u1903\u1905\5\u0394\u01cb\2\u1904\u1903\3\2\2\2\u1904"+
		"\u1905\3\2\2\2\u1905\u1930\3\2\2\2\u1906\u1908\7\u01c4\2\2\u1907\u1909"+
		"\5\u0394\u01cb\2\u1908\u1907\3\2\2\2\u1908\u1909\3\2\2\2\u1909\u190b\3"+
		"\2\2\2\u190a\u190c\5\u0398\u01cd\2\u190b\u190a\3\2\2\2\u190b\u190c\3\2"+
		"\2\2\u190c\u1930\3\2\2\2\u190d\u190f\5\u0390\u01c9\2\u190e\u1910\5\u0394"+
		"\u01cb\2\u190f\u190e\3\2\2\2\u190f\u1910\3\2\2\2\u1910\u1930\3\2\2\2\u1911"+
		"\u1913\7.\2\2\u1912\u1914\7\u0213\2\2\u1913\u1912\3\2\2\2\u1913\u1914"+
		"\3\2\2\2\u1914\u1930\3\2\2\2\u1915\u1917\7\u0298\2\2\u1916\u1918\7\u0213"+
		"\2\2\u1917\u1916\3\2\2\2\u1917\u1918\3\2\2\2\u1918\u1930\3\2\2\2\u1919"+
		"\u1930\7r\2\2\u191a\u191c\7\u0162\2\2\u191b\u191d\5\u03a0\u01d1\2\u191c"+
		"\u191b\3\2\2\2\u191c\u191d\3\2\2\2\u191d\u1930\3\2\2\2\u191e\u1920\7q"+
		"\2\2\u191f\u1921\5\u03a0\u01d1\2\u1920\u191f\3\2\2\2\u1920\u1921\3\2\2"+
		"\2\u1921\u1930\3\2\2\2\u1922\u1924\7\u01de\2\2\u1923\u1925\5\u0490\u0249"+
		"\2\u1924\u1923\3\2\2\2\u1924\u1925\3\2\2\2\u1925\u1930\3\2\2\2\u1926\u1927"+
		"\6\u0177\u00ab\2\u1927\u1930\7\u00ae\2\2\u1928\u1929\6\u0177\u00ac\2\u1929"+
		"\u1930\5\u0392\u01ca\2\u192a\u192b\6\u0177\u00ad\2\u192b\u192d\7\u01f9"+
		"\2\2\u192c\u192e\5\u0492\u024a\2\u192d\u192c\3\2\2\2\u192d\u192e\3\2\2"+
		"\2\u192e\u1930\3\2\2\2\u192f\u1902\3\2\2\2\u192f\u1906\3\2\2\2\u192f\u190d"+
		"\3\2\2\2\u192f\u1911\3\2\2\2\u192f\u1915\3\2\2\2\u192f\u1919\3\2\2\2\u192f"+
		"\u191a\3\2\2\2\u192f\u191e\3\2\2\2\u192f\u1922\3\2\2\2\u192f\u1926\3\2"+
		"\2\2\u192f\u1928\3\2\2\2\u192f\u192a\3\2\2\2\u1930\u02ed\3\2\2\2\u1931"+
		"\u1936\5\u029e\u0150\2\u1932\u1933\7\u0198\2\2\u1933\u1935\5\u029e\u0150"+
		"\2\u1934\u1932\3\2\2\2\u1935\u1938\3\2\2\2\u1936\u1934\3\2\2\2\u1936\u1937"+
		"\3\2\2\2\u1937\u02ef\3\2\2\2\u1938\u1936\3\2\2\2\u1939\u193a\7\u01c4\2"+
		"\2\u193a\u193d\7\u026d\2\2\u193b\u193d\7\n\2\2\u193c\u1939\3\2\2\2\u193c"+
		"\u193b\3\2\2\2\u193d\u02f1\3\2\2\2\u193e\u193f\ta\2\2\u193f\u02f3\3\2"+
		"\2\2\u1940\u1941\tb\2\2\u1941\u02f5\3\2\2\2\u1942\u1945\5\u02f8\u017d"+
		"\2\u1943\u1945\tc\2\2\u1944\u1942\3\2\2\2\u1944\u1943\3\2\2\2\u1945\u02f7"+
		"\3\2\2\2\u1946\u1947\td\2\2\u1947\u02f9\3\2\2\2\u1948\u1949\7\u019b\2"+
		"\2\u1949\u194a\5\u02ee\u0178\2\u194a\u194b\7\u019c\2\2\u194b\u02fb\3\2"+
		"\2\2\u194c\u194d\7\u019b\2\2\u194d\u194e\5\u029e\u0150\2\u194e\u194f\7"+
		"\u019c\2\2\u194f\u02fd\3\2\2\2\u1950\u1951\7\u019b\2\2\u1951\u1952\5\u02aa"+
		"\u0156\2\u1952\u1953\7\u019c\2\2\u1953\u02ff\3\2\2\2\u1954\u1959\5\u0302"+
		"\u0182\2\u1955\u1956\7\u0198\2\2\u1956\u1958\5\u0302\u0182\2\u1957\u1955"+
		"\3\2\2\2\u1958\u195b\3\2\2\2\u1959\u1957\3\2\2\2\u1959\u195a\3\2\2\2\u195a"+
		"\u0301\3\2\2\2\u195b\u1959\3\2\2\2\u195c\u195e\5\u029e\u0150\2\u195d\u195f"+
		"\5\u014e\u00a8\2\u195e\u195d\3\2\2\2\u195e\u195f\3\2\2\2\u195f\u0303\3"+
		"\2\2\2\u1960\u1965\5\u0306\u0184\2\u1961\u1962\7\u0198\2\2\u1962\u1964"+
		"\5\u0306\u0184\2\u1963\u1961\3\2\2\2\u1964\u1967\3\2\2\2\u1965\u1963\3"+
		"\2\2\2\u1965\u1966\3\2\2\2\u1966\u0305\3\2\2\2\u1967\u1965\3\2\2\2\u1968"+
		"\u1969\5\u029e\u0150\2\u1969\u0307\3\2\2\2\u196a\u196b\6\u0185\u00ae\2"+
		"\u196b\u196c\7\u01fc\2\2\u196c\u196d\7S\2\2\u196d\u196e\5\u0484\u0243"+
		"\2\u196e\u0309\3\2\2\2\u196f\u197d\5\6\4\2\u1970\u197d\5\u030c\u0187\2"+
		"\u1971\u197d\5\u030e\u0188\2\u1972\u197d\5\u0316\u018c\2\u1973\u197d\5"+
		"\u031a\u018e\2\u1974\u197d\5\u031c\u018f\2\u1975\u197d\5\u0322\u0192\2"+
		"\u1976\u197d\5\u0324\u0193\2\u1977\u197d\5\u0340\u01a1\2\u1978\u197d\5"+
		"\u033e\u01a0\2\u1979\u197d\5\u0352\u01aa\2\u197a\u197d\5\u0356\u01ac\2"+
		"\u197b\u197d\5\u0354\u01ab\2\u197c\u196f\3\2\2\2\u197c\u1970\3\2\2\2\u197c"+
		"\u1971\3\2\2\2\u197c\u1972\3\2\2\2\u197c\u1973\3\2\2\2\u197c\u1974\3\2"+
		"\2\2\u197c\u1975\3\2\2\2\u197c\u1976\3\2\2\2\u197c\u1977\3\2\2\2\u197c"+
		"\u1978\3\2\2\2\u197c\u1979\3\2\2\2\u197c\u197a\3\2\2\2\u197c\u197b\3\2"+
		"\2\2\u197d\u030b\3\2\2\2\u197e\u197f\7\u0264\2\2\u197f\u1980\5\u029e\u0150"+
		"\2\u1980\u030d\3\2\2\2\u1981\u1982\7\u0209\2\2\u1982\u1983\5\u0310\u0189"+
		"\2\u1983\u1984\7\22\2\2\u1984\u1985\7\u0209\2\2\u1985\u030f\3\2\2\2\u1986"+
		"\u1987\5\u029e\u0150\2\u1987\u198c\5\u0312\u018a\2\u1988\u1989\7\u01ed"+
		"\2\2\u1989\u198d\5\u0310\u0189\2\u198a\u198b\7\u01ec\2\2\u198b\u198d\5"+
		"\u0314\u018b\2\u198c\u1988\3\2\2\2\u198c\u198a\3\2\2\2\u198c\u198d\3\2"+
		"\2\2\u198d\u0311\3\2\2\2\u198e\u198f\7\u028b\2\2\u198f\u1990\5\u0314\u018b"+
		"\2\u1990\u0313\3\2\2\2\u1991\u1992\5\u030a\u0186\2\u1992\u1993\7\u0199"+
		"\2\2\u1993\u1995\3\2\2\2\u1994\u1991\3\2\2\2\u1995\u1996\3\2\2\2\u1996"+
		"\u1994\3\2\2\2\u1996\u1997\3\2\2\2\u1997\u0315\3\2\2\2\u1998\u199a\7\u01c1"+
		"\2\2\u1999\u199b\5\u029e\u0150\2\u199a\u1999\3\2\2\2\u199a\u199b\3\2\2"+
		"\2\u199b\u199f\3\2\2\2\u199c\u199d\5\u02e6\u0174\2\u199d\u199e\5\u0312"+
		"\u018a\2\u199e\u19a0\3\2\2\2\u199f\u199c\3\2\2\2\u19a0\u19a1\3\2\2\2\u19a1"+
		"\u199f\3\2\2\2\u19a1\u19a2\3\2\2\2\u19a2\u19a4\3\2\2\2\u19a3\u19a5\5\u0318"+
		"\u018d\2\u19a4\u19a3\3\2\2\2\u19a4\u19a5\3\2\2\2\u19a5\u19a6\3\2\2\2\u19a6"+
		"\u19a7\7\22\2\2\u19a7\u19a8\7\u01c1\2\2\u19a8\u0317\3\2\2\2\u19a9\u19aa"+
		"\7\u01ec\2\2\u19aa\u19ab\5\u0314\u018b\2\u19ab\u0319\3\2\2\2\u19ac\u19ad"+
		"\5\u031e\u0190\2\u19ad\u19af\5\u0320\u0191\2\u19ae\u19b0\5\u0452\u022a"+
		"\2\u19af\u19ae\3\2\2\2\u19af\u19b0\3\2\2\2\u19b0\u031b\3\2\2\2\u19b1\u19b2"+
		"\5\u0320\u0191\2\u19b2\u031d\3\2\2\2\u19b3\u19b4\5\u0450\u0229\2\u19b4"+
		"\u19b5\7\u019a\2\2\u19b5\u031f\3\2\2\2\u19b6\u19b8\7\7\2\2\u19b7\u19b9"+
		"\5\u032c\u0197\2\u19b8\u19b7\3\2\2\2\u19b8\u19b9\3\2\2\2\u19b9\u19bb\3"+
		"\2\2\2\u19ba\u19bc\5\u0314\u018b\2\u19bb\u19ba\3\2\2\2\u19bb\u19bc\3\2"+
		"\2\2\u19bc\u19bd\3\2\2\2\u19bd\u19be\7\22\2\2\u19be\u0321\3\2\2\2\u19bf"+
		"\u19c0\5\u031e\u0190\2\u19c0\u19c2\5\u0324\u0193\2\u19c1\u19c3\5\u0452"+
		"\u022a\2\u19c2\u19c1\3\2\2\2\u19c2\u19c3\3\2\2\2\u19c3\u0323\3\2\2\2\u19c4"+
		"\u19c8\5\u0326\u0194\2\u19c5\u19c8\5\u0328\u0195\2\u19c6\u19c8\5\u032a"+
		"\u0196\2\u19c7\u19c4\3\2\2\2\u19c7\u19c5\3\2\2\2\u19c7\u19c6\3\2\2\2\u19c8"+
		"\u0325\3\2\2\2\u19c9\u19ca\7\u022b\2\2\u19ca\u19cb\5\u0314\u018b\2\u19cb"+
		"\u19cc\7\22\2\2\u19cc\u19cd\7\u022b\2\2\u19cd\u0327\3\2\2\2\u19ce\u19cf"+
		"\7\u02ab\2\2\u19cf\u19d0\5\u029e\u0150\2\u19d0\u19d1\7\21\2\2\u19d1\u19d2"+
		"\5\u0314\u018b\2\u19d2\u19d3\7\22\2\2\u19d3\u19d4\7\u02ab\2\2\u19d4\u0329"+
		"\3\2\2\2\u19d5\u19d6\7\u025f\2\2\u19d6\u19d7\5\u0314\u018b\2\u19d7\u19d8"+
		"\7\u016c\2\2\u19d8\u19d9\5\u029e\u0150\2\u19d9\u19da\7\22\2\2\u19da\u19db"+
		"\7\u025f\2\2\u19db\u032b\3\2\2\2\u19dc\u19dd\5\u032e\u0198\2\u19dd\u19de"+
		"\7\u0199\2\2\u19de\u19e0\3\2\2\2\u19df\u19dc\3\2\2\2\u19e0\u19e1\3\2\2"+
		"\2\u19e1\u19df\3\2\2\2\u19e1\u19e2\3\2\2\2\u19e2\u032d\3\2\2\2\u19e3\u19e8"+
		"\5\u0330\u0199\2\u19e4\u19e8\5\u0332\u019a\2\u19e5\u19e8\5\u0338\u019d"+
		"\2\u19e6\u19e8\5\u033c\u019f\2\u19e7\u19e3\3\2\2\2\u19e7\u19e4\3\2\2\2"+
		"\u19e7\u19e5\3\2\2\2\u19e7\u19e6\3\2\2\2\u19e8\u032f\3\2\2\2\u19e9\u19ea"+
		"\7\u01df\2\2\u19ea\u19eb\5\u0464\u0233\2\u19eb\u19ed\5\u038e\u01c8\2\u19ec"+
		"\u19ee\5\u03d4\u01eb\2\u19ed\u19ec\3\2\2\2\u19ed\u19ee\3\2\2\2\u19ee\u19f1"+
		"\3\2\2\2\u19ef\u19f0\7\u01e0\2\2\u19f0\u19f2\5\u029e\u0150\2\u19f1\u19ef"+
		"\3\2\2\2\u19f1\u19f2\3\2\2\2\u19f2\u0331\3\2\2\2\u19f3\u19f4\7\u01df\2"+
		"\2\u19f4\u19f5\5\u0462\u0232\2\u19f5\u19f6\7\u01c8\2\2\u19f6\u19f7\7\u01fc"+
		"\2\2\u19f7\u19f8\5\u0334\u019b\2\u19f8\u0333\3\2\2\2\u19f9\u19fc\5\u046e"+
		"\u0238\2\u19fa\u19fc\5\u0336\u019c\2\u19fb\u19f9\3\2\2\2\u19fb\u19fa\3"+
		"\2\2\2\u19fc\u0335\3\2\2\2\u19fd\u19ff\7\u0275\2\2\u19fe\u1a00\7\u0172"+
		"\2\2\u19ff\u19fe\3\2\2\2\u19ff\u1a00\3\2\2\2\u1a00\u1a01\3\2\2\2\u1a01"+
		"\u1a02\5\u0482\u0242\2\u1a02\u0337\3\2\2\2\u1a03\u1a04\7\u01df\2\2\u1a04"+
		"\u1a05\te\2\2\u1a05\u1a06\7\30\2\2\u1a06\u1a07\7\u01fc\2\2\u1a07\u1a0c"+
		"\5\u033a\u019e\2\u1a08\u1a09\7\u0198\2\2\u1a09\u1a0b\5\u033a\u019e\2\u1a0a"+
		"\u1a08\3\2\2\2\u1a0b\u1a0e\3\2\2\2\u1a0c\u1a0a\3\2\2\2\u1a0c\u1a0d\3\2"+
		"\2\2\u1a0d\u1a0f\3\2\2\2\u1a0e\u1a0c\3\2\2\2\u1a0f\u1a10\5\u030a\u0186"+
		"\2\u1a10\u0339\3\2\2\2\u1a11\u1a19\5\u0334\u019b\2\u1a12\u1a19\5\u0462"+
		"\u0232\2\u1a13\u1a19\7\u0276\2\2\u1a14\u1a15\5\u02f2\u017a\2\u1a15\u1a16"+
		"\7\u0090\2\2\u1a16\u1a19\3\2\2\2\u1a17\u1a19\7\u0274\2\2\u1a18\u1a11\3"+
		"\2\2\2\u1a18\u1a12\3\2\2\2\u1a18\u1a13\3\2\2\2\u1a18\u1a14\3\2\2\2\u1a18"+
		"\u1a17\3\2\2\2\u1a19\u033b\3\2\2\2\u1a1a\u1a1b\7\u01df\2\2\u1a1b\u1a1c"+
		"\5\u0462\u0232\2\u1a1c\u1a1d\7\u01d3\2\2\u1a1d\u1a1e\7\u01fc\2\2\u1a1e"+
		"\u1a1f\5\u0110\u0089\2\u1a1f\u033d\3\2\2\2\u1a20\u1a21\7\u0218\2\2\u1a21"+
		"\u1a22\5\u0452\u022a\2\u1a22\u033f\3\2\2\2\u1a23\u1a24\7\u021e\2\2\u1a24"+
		"\u1a25\5\u0452\u022a\2\u1a25\u0341\3\2\2\2\u1a26\u1a2a\7\u01ff\2\2\u1a27"+
		"\u1a2b\7m\2\2\u1a28\u1a29\6\u01a2\u00af\2\u1a29\u1a2b\7\u0144\2\2\u1a2a"+
		"\u1a27\3\2\2\2\u1a2a\u1a28\3\2\2\2\u1a2a\u1a2b\3\2\2\2\u1a2b\u1a2c\3\2"+
		"\2\2\u1a2c\u1a3f\7x\2\2\u1a2d\u1a32\5\u0346\u01a4\2\u1a2e\u1a2f\7\u0198"+
		"\2\2\u1a2f\u1a31\5\u0346\u01a4\2\u1a30\u1a2e\3\2\2\2\u1a31\u1a34\3\2\2"+
		"\2\u1a32\u1a30\3\2\2\2\u1a32\u1a33\3\2\2\2\u1a33\u1a40\3\2\2\2\u1a34\u1a32"+
		"\3\2\2\2\u1a35\u1a36\7\u01c8\2\2\u1a36\u1a37\5\u0344\u01a3\2\u1a37\u1a3c"+
		"\5\u0348\u01a5\2\u1a38\u1a39\7\u0198\2\2\u1a39\u1a3b\5\u0348\u01a5\2\u1a3a"+
		"\u1a38\3\2\2\2\u1a3b\u1a3e\3\2\2\2\u1a3c\u1a3a\3\2\2\2\u1a3c\u1a3d\3\2"+
		"\2\2\u1a3d\u1a40\3\2\2\2\u1a3e\u1a3c\3\2\2\2\u1a3f\u1a2d\3\2\2\2\u1a3f"+
		"\u1a35\3\2\2\2\u1a40\u0343\3\2\2\2\u1a41\u1a45\5\u0476\u023c\2\u1a42\u1a45"+
		"\5\u02de\u0170\2\u1a43\u1a45\5\u0468\u0235\2\u1a44\u1a41\3\2\2\2\u1a44"+
		"\u1a42\3\2\2\2\u1a44\u1a43\3\2\2\2\u1a45\u0345\3\2\2\2\u1a46\u1a49\5\u02de"+
		"\u0170\2\u1a47\u1a49\5\u0462\u0232\2\u1a48\u1a46\3\2\2\2\u1a48\u1a47\3"+
		"\2\2\2\u1a49\u1a4a\3\2\2\2\u1a4a\u1a4b\7\u0181\2\2\u1a4b\u1a4c\tf\2\2"+
		"\u1a4c\u0347\3\2\2\2\u1a4d\u1a50\5\u02de\u0170\2\u1a4e\u1a50\5\u0462\u0232"+
		"\2\u1a4f\u1a4d\3\2\2\2\u1a4f\u1a4e\3\2\2\2\u1a50\u1a51\3\2\2\2\u1a51\u1a54"+
		"\7\u0181\2\2\u1a52\u1a55\5\u034a\u01a6\2\u1a53\u1a55\7\u0126\2\2\u1a54"+
		"\u1a52\3\2\2\2\u1a54\u1a53\3\2\2\2\u1a55\u0349\3\2\2\2\u1a56\u1a57\tg"+
		"\2\2\u1a57\u034b\3\2\2\2\u1a58\u1a5b\7\u0270\2\2\u1a59\u1a5c\5\u0462\u0232"+
		"\2\u1a5a\u1a5c\5\u0336\u019c\2\u1a5b\u1a59\3\2\2\2\u1a5b\u1a5a\3\2\2\2"+
		"\u1a5c\u1a66\3\2\2\2\u1a5d\u1a5e\7\u026d\2\2\u1a5e\u1a63\5\u0350\u01a9"+
		"\2\u1a5f\u1a60\7\u0198\2\2\u1a60\u1a62\5\u0350\u01a9\2\u1a61\u1a5f\3\2"+
		"\2\2\u1a62\u1a65\3\2\2\2\u1a63\u1a61\3\2\2\2\u1a63\u1a64\3\2\2\2\u1a64"+
		"\u1a67\3\2\2\2\u1a65\u1a63\3\2\2\2\u1a66\u1a5d\3\2\2\2\u1a66\u1a67\3\2"+
		"\2\2\u1a67\u034d\3\2\2\2\u1a68\u1a6e\7\u0262\2\2\u1a69\u1a6b\7\u0275\2"+
		"\2\u1a6a\u1a6c\7\u0172\2\2\u1a6b\u1a6a\3\2\2\2\u1a6b\u1a6c\3\2\2\2\u1a6c"+
		"\u1a6d\3\2\2\2\u1a6d\u1a6f\5\u0496\u024c\2\u1a6e\u1a69\3\2\2\2\u1a6e\u1a6f"+
		"\3\2\2\2\u1a6f\u1a79\3\2\2\2\u1a70\u1a71\7\u026d\2\2\u1a71\u1a76\5\u0350"+
		"\u01a9\2\u1a72\u1a73\7\u0198\2\2\u1a73\u1a75\5\u0350\u01a9\2\u1a74\u1a72"+
		"\3\2\2\2\u1a75\u1a78\3\2\2\2\u1a76\u1a74\3\2\2\2\u1a76\u1a77\3\2\2\2\u1a77"+
		"\u1a7a\3\2\2\2\u1a78\u1a76\3\2\2\2\u1a79\u1a70\3\2\2\2\u1a79\u1a7a\3\2"+
		"\2\2\u1a7a\u034f\3\2\2\2\u1a7b\u1a7c\5\u034a\u01a6\2\u1a7c\u1a7d\7\u0181"+
		"\2\2\u1a7d\u1a7e\5\u0344\u01a3\2\u1a7e\u0351\3\2\2\2\u1a7f\u1a80\7\36"+
		"\2\2\u1a80\u1a81\5\u0462\u0232\2\u1a81\u0353\3\2\2\2\u1a82\u1a83\7\f\2"+
		"\2\u1a83\u1a84\5\u0462\u0232\2\u1a84\u0355\3\2\2\2\u1a85\u1a8a\7\u01f8"+
		"\2\2\u1a86\u1a88\7\u00ed\2\2\u1a87\u1a86\3\2\2\2\u1a87\u1a88\3\2\2\2\u1a88"+
		"\u1a89\3\2\2\2\u1a89\u1a8b\7\u01fd\2\2\u1a8a\u1a87\3\2\2\2\u1a8a\u1a8b"+
		"\3\2\2\2\u1a8b\u1a8c\3\2\2\2\u1a8c\u1a8d\5\u0462\u0232\2\u1a8d\u1a8e\7"+
		"\u0212\2\2\u1a8e\u1a8f\5\u0464\u0233\2\u1a8f\u0357\3\2\2\2\u1a90\u1a91"+
		"\7C\2\2\u1a91\u1a9e\5\u029e\u0150\2\u1a92\u1a93\7\u0089\2\2\u1a93\u1a94"+
		"\5\u029e\u0150\2\u1a94\u1a97\5\u02f6\u017c\2\u1a95\u1a96\7\u0145\2\2\u1a96"+
		"\u1a98\5\u029e\u0150\2\u1a97\u1a95\3\2\2\2\u1a97\u1a98\3\2\2\2\u1a98\u1a9b"+
		"\3\2\2\2\u1a99\u1a9a\7\u0080\2\2\u1a9a\u1a9c\5\u029e\u0150\2\u1a9b\u1a99"+
		"\3\2\2\2\u1a9b\u1a9c\3\2\2\2\u1a9c\u1a9e\3\2\2\2\u1a9d\u1a90\3\2\2\2\u1a9d"+
		"\u1a92\3\2\2\2\u1a9e\u0359\3\2\2\2\u1a9f\u1aa0\5\u040a\u0206\2\u1aa0\u1aa2"+
		"\5\u0366\u01b4\2\u1aa1\u1aa3\5\u035c\u01af\2\u1aa2\u1aa1\3\2\2\2\u1aa2"+
		"\u1aa3\3\2\2\2\u1aa3\u035b\3\2\2\2\u1aa4\u1aa5\6\u01af\u00b0\2\u1aa5\u1aa8"+
		"\5\u035e\u01b0\2\u1aa6\u1aa8\5\u0370\u01b9\2\u1aa7\u1aa4\3\2\2\2\u1aa7"+
		"\u1aa6\3\2\2\2\u1aa8\u035d\3\2\2\2\u1aa9\u1aaa\7\u01c5\2\2\u1aaa\u1aab"+
		"\5\u02fc\u017f\2\u1aab\u035f\3\2\2\2\u1aac\u1aae\7\u023f\2\2\u1aad\u1aac"+
		"\3\2\2\2\u1aad\u1aae\3\2\2\2\u1aae\u1aaf\3\2\2\2\u1aaf\u1ab0\7\u02fa\2"+
		"\2\u1ab0\u0361\3\2\2\2\u1ab1\u1ab3\t(\2\2\u1ab2\u1ab4\5r:\2\u1ab3\u1ab2"+
		"\3\2\2\2\u1ab3\u1ab4\3\2\2\2\u1ab4\u1ab5\3\2\2\2\u1ab5\u1ab9\5\u037c\u01bf"+
		"\2\u1ab6\u1ab8\5\u0380\u01c1\2\u1ab7\u1ab6\3\2\2\2\u1ab8\u1abb\3\2\2\2"+
		"\u1ab9\u1ab7\3\2\2\2\u1ab9\u1aba\3\2\2\2\u1aba\u1afd\3\2\2\2\u1abb\u1ab9"+
		"\3\2\2\2\u1abc\u1abe\7\u01fe\2\2\u1abd\u1abf\5\u0192\u00ca\2\u1abe\u1abd"+
		"\3\2\2\2\u1abe\u1abf\3\2\2\2\u1abf\u1ac1\3\2\2\2\u1ac0\u1ac2\5\u0414\u020b"+
		"\2\u1ac1\u1ac0\3\2\2\2\u1ac1\u1ac2\3\2\2\2\u1ac2\u1ac3\3\2\2\2\u1ac3\u1ac7"+
		"\5\u037c\u01bf\2\u1ac4\u1ac6\5\u0388\u01c5\2\u1ac5\u1ac4\3\2\2\2\u1ac6"+
		"\u1ac9\3\2\2\2\u1ac7\u1ac5\3\2\2\2\u1ac7\u1ac8\3\2\2\2\u1ac8\u1afd\3\2"+
		"\2\2\u1ac9\u1ac7\3\2\2\2\u1aca\u1acc\7\u0272\2\2\u1acb\u1acd\5\u0192\u00ca"+
		"\2\u1acc\u1acb\3\2\2\2\u1acc\u1acd\3\2\2\2\u1acd\u1acf\3\2\2\2\u1ace\u1ad0"+
		"\5\u0414\u020b\2\u1acf\u1ace\3\2\2\2\u1acf\u1ad0\3\2\2\2\u1ad0\u1ad1\3"+
		"\2\2\2\u1ad1\u1ad5\5\u037c\u01bf\2\u1ad2\u1ad4\5\u038a\u01c6\2\u1ad3\u1ad2"+
		"\3\2\2\2\u1ad4\u1ad7\3\2\2\2\u1ad5\u1ad3\3\2\2\2\u1ad5\u1ad6\3\2\2\2\u1ad6"+
		"\u1afd\3\2\2\2\u1ad7\u1ad5\3\2\2\2\u1ad8\u1ada\5\u0364\u01b3\2\u1ad9\u1ad8"+
		"\3\2\2\2\u1ad9\u1ada\3\2\2\2\u1ada\u1afa\3\2\2\2\u1adb\u1adc\7\u0253\2"+
		"\2\u1adc\u1ae2\7\u021b\2\2\u1add\u1adf\7\u0296\2\2\u1ade\u1ae0\5\u0192"+
		"\u00ca\2\u1adf\u1ade\3\2\2\2\u1adf\u1ae0";
	private static final String _serializedATNSegment3 =
		"\3\2\2\2\u1ae0\u1ae2\3\2\2\2\u1ae1\u1adb\3\2\2\2\u1ae1\u1add\3\2\2\2\u1ae2"+
		"\u1ae4\3\2\2\2\u1ae3\u1ae5\5r:\2\u1ae4\u1ae3\3\2\2\2\u1ae4\u1ae5\3\2\2"+
		"\2\u1ae5\u1ae6\3\2\2\2\u1ae6\u1aea\5\u037c\u01bf\2\u1ae7\u1ae9\5\u0380"+
		"\u01c1\2\u1ae8\u1ae7\3\2\2\2\u1ae9\u1aec\3\2\2\2\u1aea\u1ae8\3\2\2\2\u1aea"+
		"\u1aeb\3\2\2\2\u1aeb\u1afb\3\2\2\2\u1aec\u1aea\3\2\2\2\u1aed\u1aee\7\u01fb"+
		"\2\2\u1aee\u1af0\7\u021b\2\2\u1aef\u1af1\5\u0414\u020b\2\u1af0\u1aef\3"+
		"\2\2\2\u1af0\u1af1\3\2\2\2\u1af1\u1af2\3\2\2\2\u1af2\u1af3\5\u0374\u01bb"+
		"\2\u1af3\u1af4\5\u0370\u01b9\2\u1af4\u1afb\3\2\2\2\u1af5\u1af8\5\u035e"+
		"\u01b0\2\u1af6\u1af7\6\u01b2\u00b1\2\u1af7\u1af9\5\u0360\u01b1\2\u1af8"+
		"\u1af6\3\2\2\2\u1af8\u1af9\3\2\2\2\u1af9\u1afb\3\2\2\2\u1afa\u1ae1\3\2"+
		"\2\2\u1afa\u1aed\3\2\2\2\u1afa\u1af5\3\2\2\2\u1afb\u1afd\3\2\2\2\u1afc"+
		"\u1ab1\3\2\2\2\u1afc\u1abc\3\2\2\2\u1afc\u1aca\3\2\2\2\u1afc\u1ad9\3\2"+
		"\2\2\u1afd\u0363\3\2\2\2\u1afe\u1b00\7\u01c9\2\2\u1aff\u1b01\5\u0462\u0232"+
		"\2\u1b00\u1aff\3\2\2\2\u1b00\u1b01\3\2\2\2\u1b01\u0365\3\2\2\2\u1b02\u1b26"+
		"\5\u038e\u01c8\2\u1b03\u1b05\5\u0368\u01b5\2\u1b04\u1b03\3\2\2\2\u1b05"+
		"\u1b08\3\2\2\2\u1b06\u1b04\3\2\2\2\u1b06\u1b07\3\2\2\2\u1b07\u1b27\3\2"+
		"\2\2\u1b08\u1b06\3\2\2\2\u1b09\u1b0b\6\u01b4\u00b2\2\u1b0a\u1b0c\5\u03d4"+
		"\u01eb\2\u1b0b\u1b0a\3\2\2\2\u1b0b\u1b0c\3\2\2\2\u1b0c\u1b0f\3\2\2\2\u1b0d"+
		"\u1b0e\7\u0200\2\2\u1b0e\u1b10\7\5\2\2\u1b0f\u1b0d\3\2\2\2\u1b0f\u1b10"+
		"\3\2\2\2\u1b10\u1b11\3\2\2\2\u1b11\u1b12\7\u01b1\2\2\u1b12\u1b14\5\u02fc"+
		"\u017f\2\u1b13\u1b15\th\2\2\u1b14\u1b13\3\2\2\2\u1b14\u1b15\3\2\2\2\u1b15"+
		"\u1b24\3\2\2\2\u1b16\u1b1a\6\u01b4\u00b3\2\u1b17\u1b19\5\u036e\u01b8\2"+
		"\u1b18\u1b17\3\2\2\2\u1b19\u1b1c\3\2\2\2\u1b1a\u1b18\3\2\2\2\u1b1a\u1b1b"+
		"\3\2\2\2\u1b1b\u1b25\3\2\2\2\u1b1c\u1b1a\3\2\2\2\u1b1d\u1b21\6\u01b4\u00b4"+
		"\2\u1b1e\u1b20\5\u0368\u01b5\2\u1b1f\u1b1e\3\2\2\2\u1b20\u1b23\3\2\2\2"+
		"\u1b21\u1b1f\3\2\2\2\u1b21\u1b22\3\2\2\2\u1b22\u1b25\3\2\2\2\u1b23\u1b21"+
		"\3\2\2\2\u1b24\u1b16\3\2\2\2\u1b24\u1b1d\3\2\2\2\u1b25\u1b27\3\2\2\2\u1b26"+
		"\u1b06\3\2\2\2\u1b26\u1b09\3\2\2\2\u1b27\u0367\3\2\2\2\u1b28\u1b2a\7\u023f"+
		"\2\2\u1b29\u1b28\3\2\2\2\u1b29\u1b2a\3\2\2\2\u1b2a\u1b2b\3\2\2\2\u1b2b"+
		"\u1b5d\5\u048c\u0247\2\u1b2c\u1b2d\6\u01b5\u00b5\2\u1b2d\u1b2e\7\u023f"+
		"\2\2\u1b2e\u1b5d\7\u02f0\2\2\u1b2f\u1b37\7\u01e0\2\2\u1b30\u1b38\5\u0478"+
		"\u023d\2\u1b31\u1b33\7\u0240\2\2\u1b32\u1b34\5\u02ca\u0166\2\u1b33\u1b32"+
		"\3\2\2\2\u1b33\u1b34\3\2\2\2\u1b34\u1b38\3\2\2\2\u1b35\u1b36\6\u01b5\u00b6"+
		"\2\u1b36\u1b38\5\u02fc\u017f\2\u1b37\u1b30\3\2\2\2\u1b37\u1b31\3\2\2\2"+
		"\u1b37\u1b35\3\2\2\2\u1b38\u1b5d\3\2\2\2\u1b39\u1b3a\7\u0245\2\2\u1b3a"+
		"\u1b3b\7\u0299\2\2\u1b3b\u1b3d\7\u0240\2\2\u1b3c\u1b3e\5\u02ca\u0166\2"+
		"\u1b3d\u1b3c\3\2\2\2\u1b3d\u1b3e\3\2\2\2\u1b3e\u1b5d\3\2\2\2\u1b3f\u1b5d"+
		"\7E\2\2\u1b40\u1b41\7\u0134\2\2\u1b41\u1b42\7\u01e0\2\2\u1b42\u1b5d\7"+
		"\u0172\2\2\u1b43\u1b45\7\u0253\2\2\u1b44\u1b43\3\2\2\2\u1b44\u1b45\3\2"+
		"\2\2\u1b45\u1b46\3\2\2\2\u1b46\u1b5d\7\u021b\2\2\u1b47\u1b49\7\u0296\2"+
		"\2\u1b48\u1b4a\7\u021b\2\2\u1b49\u1b48\3\2\2\2\u1b49\u1b4a\3\2\2\2\u1b4a"+
		"\u1b5d\3\2\2\2\u1b4b\u1b4c\7\r\2\2\u1b4c\u1b5d\5\u0482\u0242\2\u1b4d\u1b5d"+
		"\5\u03d4\u01eb\2\u1b4e\u1b4f\7[\2\2\u1b4f\u1b5d\5\u036a\u01b6\2\u1b50"+
		"\u1b51\7\u014a\2\2\u1b51\u1b5d\5\u036c\u01b7\2\u1b52\u1b53\6\u01b5\u00b7"+
		"\2\u1b53\u1b54\7\u02e3\2\2\u1b54\u1b5d\5\u0474\u023b\2\u1b55\u1b57\6\u01b5"+
		"\u00b8\2\u1b56\u1b58\5\u0364\u01b3\2\u1b57\u1b56\3\2\2\2\u1b57\u1b58\3"+
		"\2\2\2\u1b58\u1b59\3\2\2\2\u1b59\u1b5d\5\u035e\u01b0\2\u1b5a\u1b5b\6\u01b5"+
		"\u00b9\2\u1b5b\u1b5d\5\u0360\u01b1\2\u1b5c\u1b29\3\2\2\2\u1b5c\u1b2c\3"+
		"\2\2\2\u1b5c\u1b2f\3\2\2\2\u1b5c\u1b39\3\2\2\2\u1b5c\u1b3f\3\2\2\2\u1b5c"+
		"\u1b40\3\2\2\2\u1b5c\u1b44\3\2\2\2\u1b5c\u1b47\3\2\2\2\u1b5c\u1b4b\3\2"+
		"\2\2\u1b5c\u1b4d\3\2\2\2\u1b5c\u1b4e\3\2\2\2\u1b5c\u1b50\3\2\2\2\u1b5c"+
		"\u1b52\3\2\2\2\u1b5c\u1b55\3\2\2\2\u1b5c\u1b5a\3\2\2\2\u1b5d\u0369\3\2"+
		"\2\2\u1b5e\u1b5f\ti\2\2\u1b5f\u036b\3\2\2\2\u1b60\u1b61\tj\2\2\u1b61\u036d"+
		"\3\2\2\2\u1b62\u1b64\7\u0296\2\2\u1b63\u1b65\7\u021b\2\2\u1b64\u1b63\3"+
		"\2\2\2\u1b64\u1b65\3\2\2\2\u1b65\u1b71\3\2\2\2\u1b66\u1b67\7\r\2\2\u1b67"+
		"\u1b71\5\u047e\u0240\2\u1b68\u1b6a\5\u02f2\u017a\2\u1b69\u1b68\3\2\2\2"+
		"\u1b69\u1b6a\3\2\2\2\u1b6a\u1b6b\3\2\2\2\u1b6b\u1b71\7\u0242\2\2\u1b6c"+
		"\u1b6e\7\u0253\2\2\u1b6d\u1b6c\3\2\2\2\u1b6d\u1b6e\3\2\2\2\u1b6e\u1b6f"+
		"\3\2\2\2\u1b6f\u1b71\7\u021b\2\2\u1b70\u1b62\3\2\2\2\u1b70\u1b66\3\2\2"+
		"\2\u1b70\u1b69\3\2\2\2\u1b70\u1b6d\3\2\2\2\u1b71\u036f\3\2\2\2\u1b72\u1b73"+
		"\7\u025b\2\2\u1b73\u1b75\5\u0448\u0225\2\u1b74\u1b76\5\u0466\u0234\2\u1b75"+
		"\u1b74\3\2\2\2\u1b75\u1b76\3\2\2\2\u1b76\u1b79\3\2\2\2\u1b77\u1b78\7\u022f"+
		"\2\2\u1b78\u1b7a\tk\2\2\u1b79\u1b77\3\2\2\2\u1b79\u1b7a\3\2\2\2\u1b7a"+
		"\u1b8b\3\2\2\2\u1b7b\u1b7c\7\u0245\2\2\u1b7c\u1b7d\7\u0299\2\2\u1b7d\u1b81"+
		"\5\u0372\u01ba\2\u1b7e\u1b7f\7\u0245\2\2\u1b7f\u1b80\7\u01e2\2\2\u1b80"+
		"\u1b82\5\u0372\u01ba\2\u1b81\u1b7e\3\2\2\2\u1b81\u1b82\3\2\2\2\u1b82\u1b8c"+
		"\3\2\2\2\u1b83\u1b84\7\u0245\2\2\u1b84\u1b85\7\u01e2\2\2\u1b85\u1b89\5"+
		"\u0372\u01ba\2\u1b86\u1b87\7\u0245\2\2\u1b87\u1b88\7\u0299\2\2\u1b88\u1b8a"+
		"\5\u0372\u01ba\2\u1b89\u1b86\3\2\2\2\u1b89\u1b8a\3\2\2\2\u1b8a\u1b8c\3"+
		"\2\2\2\u1b8b\u1b7b\3\2\2\2\u1b8b\u1b83\3\2\2\2\u1b8b\u1b8c\3\2\2\2\u1b8c"+
		"\u0371\3\2\2\2\u1b8d\u1b93\t\4\2\2\u1b8e\u1b8f\7\u026d\2\2\u1b8f\u1b93"+
		"\5\u048c\u0247\2\u1b90\u1b91\7\35\2\2\u1b91\u1b93\7;\2\2\u1b92\u1b8d\3"+
		"\2\2\2\u1b92\u1b8e\3\2\2\2\u1b92\u1b90\3\2\2\2\u1b93\u0373\3\2\2\2\u1b94"+
		"\u1b95\7\u019b\2\2\u1b95\u1b9a\5\u0376\u01bc\2\u1b96\u1b97\7\u0198\2\2"+
		"\u1b97\u1b99\5\u0376\u01bc\2\u1b98\u1b96\3\2\2\2\u1b99\u1b9c\3\2\2\2\u1b9a"+
		"\u1b98\3\2\2\2\u1b9a\u1b9b\3\2\2\2\u1b9b\u1b9d\3\2\2\2\u1b9c\u1b9a\3\2"+
		"\2\2\u1b9d\u1b9e\7\u019c\2\2\u1b9e\u0375\3\2\2\2\u1b9f\u1ba1\5\u0462\u0232"+
		"\2\u1ba0\u1ba2\5\u0394\u01cb\2\u1ba1\u1ba0\3\2\2\2\u1ba1\u1ba2\3\2\2\2"+
		"\u1ba2\u1ba4\3\2\2\2\u1ba3\u1ba5\5\u014e\u00a8\2\u1ba4\u1ba3\3\2\2\2\u1ba4"+
		"\u1ba5\3\2\2\2\u1ba5\u0377\3\2\2\2\u1ba6\u1ba7\7\u019b\2\2\u1ba7\u1bac"+
		"\5\u037a\u01be\2\u1ba8\u1ba9\7\u0198\2\2\u1ba9\u1bab\5\u037a\u01be\2\u1baa"+
		"\u1ba8\3\2\2\2\u1bab\u1bae\3\2\2\2\u1bac\u1baa\3\2\2\2\u1bac\u1bad\3\2"+
		"\2\2\u1bad\u1baf\3\2\2\2\u1bae\u1bac\3\2\2\2\u1baf\u1bb0\7\u019c\2\2\u1bb0"+
		"\u0379\3\2\2\2\u1bb1\u1bb7\5\u0376\u01bc\2\u1bb2\u1bb4\5\u02fc\u017f\2"+
		"\u1bb3\u1bb5\5\u014e\u00a8\2\u1bb4\u1bb3\3\2\2\2\u1bb4\u1bb5\3\2\2\2\u1bb5"+
		"\u1bb7\3\2\2\2\u1bb6\u1bb1\3\2\2\2\u1bb6\u1bb2\3\2\2\2\u1bb7\u037b\3\2"+
		"\2\2\u1bb8\u1bb9\6\u01bf\u00ba\2\u1bb9\u1bbd\5\u0378\u01bd\2\u1bba\u1bbb"+
		"\6\u01bf\u00bb\2\u1bbb\u1bbd\5\u0374\u01bb\2\u1bbc\u1bb8\3\2\2\2\u1bbc"+
		"\u1bba\3\2\2\2\u1bbd\u037d\3\2\2\2\u1bbe\u1bbf\tl\2\2\u1bbf\u037f\3\2"+
		"\2\2\u1bc0\u1bc3\5\u0382\u01c2\2\u1bc1\u1bc3\5\u0386\u01c4\2\u1bc2\u1bc0"+
		"\3\2\2\2\u1bc2\u1bc1\3\2\2\2\u1bc3\u0381\3\2\2\2\u1bc4\u1bc6\7\u00af\2"+
		"\2\u1bc5\u1bc7\7\u0181\2\2\u1bc6\u1bc5\3\2\2\2\u1bc6\u1bc7\3\2\2\2\u1bc7"+
		"\u1bc8\3\2\2\2\u1bc8\u1bce\5\u046e\u0238\2\u1bc9\u1bca\7\r\2\2\u1bca\u1bce"+
		"\5\u0482\u0242\2\u1bcb\u1bcc\6\u01c2\u00bc\2\u1bcc\u1bce\5\u0384\u01c3"+
		"\2\u1bcd\u1bc4\3\2\2\2\u1bcd\u1bc9\3\2\2\2\u1bcd\u1bcb\3\2\2\2\u1bce\u0383"+
		"\3\2\2\2\u1bcf\u1bd0\tm\2\2\u1bd0\u0385\3\2\2\2\u1bd1\u1bd2\tn\2\2\u1bd2"+
		"\u1bd3\5\u037e\u01c0\2\u1bd3\u0387\3\2\2\2\u1bd4\u1bd9\5\u0382\u01c2\2"+
		"\u1bd5\u1bd6\7\u02ac\2\2\u1bd6\u1bd7\7!\2\2\u1bd7\u1bd9\5\u0462\u0232"+
		"\2\u1bd8\u1bd4\3\2\2\2\u1bd8\u1bd5\3\2\2\2\u1bd9\u0389\3\2\2\2\u1bda\u1bdb"+
		"\5\u0382\u01c2\2\u1bdb\u038b\3\2\2\2\u1bdc\u1bdd\5\u038e\u01c8\2\u1bdd"+
		"\u1bde\7\2\2\3\u1bde\u038d\3\2\2\2\u1bdf\u1be1\to\2\2\u1be0\u1be2\5\u0394"+
		"\u01cb\2\u1be1\u1be0\3\2\2\2\u1be1\u1be2\3\2\2\2\u1be2\u1be4\3\2\2\2\u1be3"+
		"\u1be5\5\u0396\u01cc\2\u1be4\u1be3\3\2\2\2\u1be4\u1be5\3\2\2\2\u1be5\u1c73"+
		"\3\2\2\2\u1be6\u1bec\7\u025a\2\2\u1be7\u1be9\7\u01e8\2\2\u1be8\u1bea\7"+
		"\u0252\2\2\u1be9\u1be8\3\2\2\2\u1be9\u1bea\3\2\2\2\u1bea\u1bec\3\2\2\2"+
		"\u1beb\u1be6\3\2\2\2\u1beb\u1be7\3\2\2\2\u1bec\u1bee\3\2\2\2\u1bed\u1bef"+
		"\5\u0494\u024b\2\u1bee\u1bed\3\2\2\2\u1bee\u1bef\3\2\2\2\u1bef\u1bf1\3"+
		"\2\2\2\u1bf0\u1bf2\5\u0396\u01cc\2\u1bf1\u1bf0\3\2\2\2\u1bf1\u1bf2\3\2"+
		"\2\2\u1bf2\u1c73\3\2\2\2\u1bf3\u1bf5\tp\2\2\u1bf4\u1bf6\5\u0490\u0249"+
		"\2\u1bf5\u1bf4\3\2\2\2\u1bf5\u1bf6\3\2\2\2\u1bf6\u1bf8\3\2\2\2\u1bf7\u1bf9"+
		"\5\u0396\u01cc\2\u1bf8\u1bf7\3\2\2\2\u1bf8\u1bf9\3\2\2\2\u1bf9\u1c73\3"+
		"\2\2\2\u1bfa\u1bfc\7J\2\2\u1bfb\u1bfd\5\u0394\u01cb\2\u1bfc\u1bfb\3\2"+
		"\2\2\u1bfc\u1bfd\3\2\2\2\u1bfd\u1c73\3\2\2\2\u1bfe\u1c73\tq\2\2\u1bff"+
		"\u1c01\7\u01c4\2\2\u1c00\u1c02\5\u0394\u01cb\2\u1c01\u1c00\3\2\2\2\u1c01"+
		"\u1c02\3\2\2\2\u1c02\u1c04\3\2\2\2\u1c03\u1c05\5\u0398\u01cd\2\u1c04\u1c03"+
		"\3\2\2\2\u1c04\u1c05\3\2\2\2\u1c05\u1c73\3\2\2\2\u1c06\u1c08\5\u0390\u01c9"+
		"\2\u1c07\u1c09\5\u0394\u01cb\2\u1c08\u1c07\3\2\2\2\u1c08\u1c09\3\2\2\2"+
		"\u1c09\u1c0b\3\2\2\2\u1c0a\u1c0c\7\u01b7\2\2\u1c0b\u1c0a\3\2\2\2\u1c0b"+
		"\u1c0c\3\2\2\2\u1c0c\u1c73\3\2\2\2\u1c0d\u1c0f\7\u01b7\2\2\u1c0e\u1c10"+
		"\5\u0394\u01cb\2\u1c0f\u1c0e\3\2\2\2\u1c0f\u1c10\3\2\2\2\u1c10\u1c73\3"+
		"\2\2\2\u1c11\u1c12\7\u01c4\2\2\u1c12\u1c15\7\u02a5\2\2\u1c13\u1c15\7\u02a3"+
		"\2\2\u1c14\u1c11\3\2\2\2\u1c14\u1c13\3\2\2\2\u1c15\u1c16\3\2\2\2\u1c16"+
		"\u1c18\5\u0394\u01cb\2\u1c17\u1c19\5\u0398\u01cd\2\u1c18\u1c17\3\2\2\2"+
		"\u1c18\u1c19\3\2\2\2\u1c19\u1c73\3\2\2\2\u1c1a\u1c1b\7\u00e9\2\2\u1c1b"+
		"\u1c25\7\u02a3\2\2\u1c1c\u1c25\7\u00f3\2\2\u1c1d\u1c1e\7\u00ea\2\2\u1c1e"+
		"\u1c25\7\u02a3\2\2\u1c1f\u1c20\7\u00e9\2\2\u1c20\u1c21\7\u01c4\2\2\u1c21"+
		"\u1c25\7\u02a5\2\2\u1c22\u1c23\7\u00ea\2\2\u1c23\u1c25\7\u02a5\2\2\u1c24"+
		"\u1c1a\3\2\2\2\u1c24\u1c1c\3\2\2\2\u1c24\u1c1d\3\2\2\2\u1c24\u1c1f\3\2"+
		"\2\2\u1c24\u1c22\3\2\2\2\u1c25\u1c26\3\2\2\2\u1c26\u1c28\5\u0394\u01cb"+
		"\2\u1c27\u1c29\7\u01b7\2\2\u1c28\u1c27\3\2\2\2\u1c28\u1c29\3\2\2\2\u1c29"+
		"\u1c73\3\2\2\2\u1c2a\u1c2b\7\u02a2\2\2\u1c2b\u1c73\5\u0394\u01cb\2\u1c2c"+
		"\u1c2e\7\u017b\2\2\u1c2d\u1c2f\5\u0394\u01cb\2\u1c2e\u1c2d\3\2\2\2\u1c2e"+
		"\u1c2f\3\2\2\2\u1c2f\u1c31\3\2\2\2\u1c30\u1c32\5\u0396\u01cc\2\u1c31\u1c30"+
		"\3\2\2\2\u1c31\u1c32\3\2\2\2\u1c32\u1c73\3\2\2\2\u1c33\u1c73\7r\2\2\u1c34"+
		"\u1c36\7\u0162\2\2\u1c35\u1c37\5\u03a0\u01d1\2\u1c36\u1c35\3\2\2\2\u1c36"+
		"\u1c37\3\2\2\2\u1c37\u1c73\3\2\2\2\u1c38\u1c3a\7\u015f\2\2\u1c39\u1c3b"+
		"\5\u03a0\u01d1\2\u1c3a\u1c39\3\2\2\2\u1c3a\u1c3b\3\2\2\2\u1c3b\u1c73\3"+
		"\2\2\2\u1c3c\u1c3e\7q\2\2\u1c3d\u1c3f\5\u03a0\u01d1\2\u1c3e\u1c3d\3\2"+
		"\2\2\u1c3e\u1c3f\3\2\2\2\u1c3f\u1c73\3\2\2\2\u1c40\u1c73\7\u028c\2\2\u1c41"+
		"\u1c43\7\u01bc\2\2\u1c42\u1c44\5\u0394\u01cb\2\u1c43\u1c42\3\2\2\2\u1c43"+
		"\u1c44\3\2\2\2\u1c44\u1c73\3\2\2\2\u1c45\u1c73\tr\2\2\u1c46\u1c47\7\u022a"+
		"\2\2\u1c47\u1c73\7\u02a2\2\2\u1c48\u1c4c\7\u022a\2\2\u1c49\u1c4a\7\u01c4"+
		"\2\2\u1c4a\u1c4d\7\u02a5\2\2\u1c4b\u1c4d\7\u02a3\2\2\u1c4c\u1c49\3\2\2"+
		"\2\u1c4c\u1c4b\3\2\2\2\u1c4c\u1c4d\3\2\2\2\u1c4d\u1c4f\3\2\2\2\u1c4e\u1c50"+
		"\5\u0398\u01cd\2\u1c4f\u1c4e\3\2\2\2\u1c4f\u1c50\3\2\2\2\u1c50\u1c73\3"+
		"\2\2\2\u1c51\u1c53\7\u028e\2\2\u1c52\u1c54\5\u0398\u01cd\2\u1c53\u1c52"+
		"\3\2\2\2\u1c53\u1c54\3\2\2\2\u1c54\u1c73\3\2\2\2\u1c55\u1c57\7\u015b\2"+
		"\2\u1c56\u1c58\5\u0394\u01cb\2\u1c57\u1c56\3\2\2\2\u1c57\u1c58\3\2\2\2"+
		"\u1c58\u1c5a\3\2\2\2\u1c59\u1c5b\5\u0398\u01cd\2\u1c5a\u1c59\3\2\2\2\u1c5a"+
		"\u1c5b\3\2\2\2\u1c5b\u1c73\3\2\2\2\u1c5c\u1c5e\7\u0234\2\2\u1c5d\u1c5f"+
		"\5\u0398\u01cd\2\u1c5e\u1c5d\3\2\2\2\u1c5e\u1c5f\3\2\2\2\u1c5f\u1c73\3"+
		"\2\2\2\u1c60\u1c62\7\u0228\2\2\u1c61\u1c63\5\u0398\u01cd\2\u1c62\u1c61"+
		"\3\2\2\2\u1c62\u1c63\3\2\2\2\u1c63\u1c73\3\2\2\2\u1c64\u1c65\7\u0081\2"+
		"\2\u1c65\u1c67\5\u047a\u023e\2\u1c66\u1c68\5\u0398\u01cd\2\u1c67\u1c66"+
		"\3\2\2\2\u1c67\u1c68\3\2\2\2\u1c68\u1c73\3\2\2\2\u1c69\u1c6a\7\u026d\2"+
		"\2\u1c6a\u1c6c\5\u047a\u023e\2\u1c6b\u1c6d\5\u0398\u01cd\2\u1c6c\u1c6b"+
		"\3\2\2\2\u1c6c\u1c6d\3\2\2\2\u1c6d\u1c73\3\2\2\2\u1c6e\u1c73\7\u0134\2"+
		"\2\u1c6f\u1c70\6\u01c8\u00bd\2\u1c70\u1c73\7\u00ae\2\2\u1c71\u1c73\ts"+
		"\2\2\u1c72\u1bdf\3\2\2\2\u1c72\u1beb\3\2\2\2\u1c72\u1bf3\3\2\2\2\u1c72"+
		"\u1bfa\3\2\2\2\u1c72\u1bfe\3\2\2\2\u1c72\u1bff\3\2\2\2\u1c72\u1c06\3\2"+
		"\2\2\u1c72\u1c0d\3\2\2\2\u1c72\u1c14\3\2\2\2\u1c72\u1c24\3\2\2\2\u1c72"+
		"\u1c2a\3\2\2\2\u1c72\u1c2c\3\2\2\2\u1c72\u1c33\3\2\2\2\u1c72\u1c34\3\2"+
		"\2\2\u1c72\u1c38\3\2\2\2\u1c72\u1c3c\3\2\2\2\u1c72\u1c40\3\2\2\2\u1c72"+
		"\u1c41\3\2\2\2\u1c72\u1c45\3\2\2\2\u1c72\u1c46\3\2\2\2\u1c72\u1c48\3\2"+
		"\2\2\u1c72\u1c51\3\2\2\2\u1c72\u1c55\3\2\2\2\u1c72\u1c5c\3\2\2\2\u1c72"+
		"\u1c60\3\2\2\2\u1c72\u1c64\3\2\2\2\u1c72\u1c69\3\2\2\2\u1c72\u1c6e\3\2"+
		"\2\2\u1c72\u1c6f\3\2\2\2\u1c72\u1c71\3\2\2\2\u1c73\u038f\3\2\2\2\u1c74"+
		"\u1c78\7\u00ea\2\2\u1c75\u1c76\7\u00e9\2\2\u1c76\u1c78\7\u01c4\2\2\u1c77"+
		"\u1c74\3\2\2\2\u1c77\u1c75\3\2\2\2\u1c78\u0391\3\2\2\2\u1c79\u1c7f\7\u025a"+
		"\2\2\u1c7a\u1c7c\7\u01e8\2\2\u1c7b\u1c7d\7\u0252\2\2\u1c7c\u1c7b\3\2\2"+
		"\2\u1c7c\u1c7d\3\2\2\2\u1c7d\u1c7f\3\2\2\2\u1c7e\u1c79\3\2\2\2\u1c7e\u1c7a"+
		"\3\2\2\2\u1c7f\u0393\3\2\2\2\u1c80\u1c83\7\u019b\2\2\u1c81\u1c84\5\u0474"+
		"\u023b\2\u1c82\u1c84\7\u01a9\2\2\u1c83\u1c81\3\2\2\2\u1c83\u1c82\3\2\2"+
		"\2\u1c84\u1c85\3\2\2\2\u1c85\u1c86\7\u019c\2\2\u1c86\u0395\3\2\2\2\u1c87"+
		"\u1c89\tt\2\2\u1c88\u1c87\3\2\2\2\u1c89\u1c8a\3\2\2\2\u1c8a\u1c88\3\2"+
		"\2\2\u1c8a\u1c8b\3\2\2\2\u1c8b\u0397\3\2\2\2\u1c8c\u1c9b\5\u039a\u01ce"+
		"\2\u1c8d\u1c9b\5\u039c\u01cf\2\u1c8e\u1c9b\7\b\2\2\u1c8f\u1c90\5\u02f0"+
		"\u0179\2\u1c90\u1c92\5\u03a2\u01d2\2\u1c91\u1c93\7\u01b7\2\2\u1c92\u1c91"+
		"\3\2\2\2\u1c92\u1c93\3\2\2\2\u1c93\u1c9b\3\2\2\2\u1c94\u1c98\7\u01b7\2"+
		"\2\u1c95\u1c96\5\u02f0\u0179\2\u1c96\u1c97\5\u03a2\u01d2\2\u1c97\u1c99"+
		"\3\2\2\2\u1c98\u1c95\3\2\2\2\u1c98\u1c99\3\2\2\2\u1c99\u1c9b\3\2\2\2\u1c9a"+
		"\u1c8c\3\2\2\2\u1c9a\u1c8d\3\2\2\2\u1c9a\u1c8e\3\2\2\2\u1c9a\u1c8f\3\2"+
		"\2\2\u1c9a\u1c94\3\2\2\2\u1c9b\u0399\3\2\2\2\u1c9c\u1c9e\7\4\2\2\u1c9d"+
		"\u1c9f\7\u01b7\2\2\u1c9e\u1c9d\3\2\2\2\u1c9e\u1c9f\3\2\2\2\u1c9f\u1ca3"+
		"\3\2\2\2\u1ca0\u1ca1\7\u01b7\2\2\u1ca1\u1ca3\7\4\2\2\u1ca2\u1c9c\3\2\2"+
		"\2\u1ca2\u1ca0\3\2\2\2\u1ca3\u039b\3\2\2\2\u1ca4\u1ca6\7\65\2\2\u1ca5"+
		"\u1ca7\7\u01b7\2\2\u1ca6\u1ca5\3\2\2\2\u1ca6\u1ca7\3\2\2\2\u1ca7\u1cab"+
		"\3\2\2\2\u1ca8\u1ca9\7\u01b7\2\2\u1ca9\u1cab\7\65\2\2\u1caa\u1ca4\3\2"+
		"\2\2\u1caa\u1ca8\3\2\2\2\u1cab\u039d\3\2\2\2\u1cac\u1cad\7\u019b\2\2\u1cad"+
		"\u1cae\5\u0470\u0239\2\u1cae\u1caf\7\u019c\2\2\u1caf\u039f\3\2\2\2\u1cb0"+
		"\u1cb1\7\u019b\2\2\u1cb1\u1cb2\7\u017e\2\2\u1cb2\u1cb3\7\u019c\2\2\u1cb3"+
		"\u03a1\3\2\2\2\u1cb4\u1cb9\5\u0496\u024c\2\u1cb5\u1cb9\7\u01b7\2\2\u1cb6"+
		"\u1cb7\6\u01d2\u00be\2\u1cb7\u1cb9\7\u01e0\2\2\u1cb8\u1cb4\3\2\2\2\u1cb8"+
		"\u1cb5\3\2\2\2\u1cb8\u1cb6\3\2\2\2\u1cb9\u03a3\3\2\2\2\u1cba\u1cc0\5\u0496"+
		"\u024c\2\u1cbb\u1cbc\6\u01d3\u00bf\2\u1cbc\u1cc0\7\u01e0\2\2\u1cbd\u1cbe"+
		"\6\u01d3\u00c0\2\u1cbe\u1cc0\7\u01b7\2\2\u1cbf\u1cba\3\2\2\2\u1cbf\u1cbb"+
		"\3\2\2\2\u1cbf\u1cbd\3\2\2\2\u1cc0\u03a5\3\2\2\2\u1cc1\u1cc8\5\u03aa\u01d6"+
		"\2\u1cc2\u1cc4\7\u0198\2\2\u1cc3\u1cc2\3\2\2\2\u1cc3\u1cc4\3\2\2\2\u1cc4"+
		"\u1cc5\3\2\2\2\u1cc5\u1cc7\5\u03aa\u01d6\2\u1cc6\u1cc3\3\2\2\2\u1cc7\u1cca"+
		"\3\2\2\2\u1cc8\u1cc6\3\2\2\2\u1cc8\u1cc9\3\2\2\2\u1cc9\u03a7\3\2\2\2\u1cca"+
		"\u1cc8\3\2\2\2\u1ccb\u1ccd\5\u03aa\u01d6\2\u1ccc\u1ccb\3\2\2\2\u1ccd\u1cce"+
		"\3\2\2\2\u1cce\u1ccc\3\2\2\2\u1cce\u1ccf\3\2\2\2\u1ccf\u03a9\3\2\2\2\u1cd0"+
		"\u1cd2\7\u0082\2\2\u1cd1\u1cd3\7\u0181\2\2\u1cd2\u1cd1\3\2\2\2\u1cd2\u1cd3"+
		"\3\2\2\2\u1cd3\u1cd4\3\2\2\2\u1cd4\u1d52\5\u0440\u0221\2\u1cd5\u1cd6\6"+
		"\u01d6\u00c1\2\u1cd6\u1cd8\7\u02f1\2\2\u1cd7\u1cd9\5\u04a0\u0251\2\u1cd8"+
		"\u1cd7\3\2\2\2\u1cd8\u1cd9\3\2\2\2\u1cd9\u1cdc\3\2\2\2\u1cda\u1cdd\7\u0242"+
		"\2\2\u1cdb\u1cdd\5\u0496\u024c\2\u1cdc\u1cda\3\2\2\2\u1cdc\u1cdb\3\2\2"+
		"\2\u1cdd\u1d52\3\2\2\2\u1cde\u1ce0\7\u00ba\2\2\u1cdf\u1ce1\7\u0181\2\2"+
		"\u1ce0\u1cdf\3\2\2\2\u1ce0\u1ce1\3\2\2\2\u1ce1\u1ce2\3\2\2\2\u1ce2\u1d52"+
		"\5\u0472\u023a\2\u1ce3\u1ce5\7\u00de\2\2\u1ce4\u1ce6\7\u0181\2\2\u1ce5"+
		"\u1ce4\3\2\2\2\u1ce5\u1ce6\3\2\2\2\u1ce6\u1ce7\3\2\2\2\u1ce7\u1d52\5\u0472"+
		"\u023a\2\u1ce8\u1cea\7G\2\2\u1ce9\u1ceb\7\u0181\2\2\u1cea\u1ce9\3\2\2"+
		"\2\u1cea\u1ceb\3\2\2\2\u1ceb\u1cec\3\2\2\2\u1cec\u1d52\5\u046e\u0238\2"+
		"\u1ced\u1cef\7\u00fd\2\2\u1cee\u1cf0\7\u0181\2\2\u1cef\u1cee\3\2\2\2\u1cef"+
		"\u1cf0\3\2\2\2\u1cf0\u1cf1\3\2\2\2\u1cf1\u1d52\5\u047c\u023f\2\u1cf2\u1cf4"+
		"\7\r\2\2\u1cf3\u1cf5\7\u0181\2\2\u1cf4\u1cf3\3\2\2\2\u1cf4\u1cf5\3\2\2"+
		"\2\u1cf5\u1cf6\3\2\2\2\u1cf6\u1d52\5\u047c\u023f\2\u1cf7\u1cf8\6\u01d6"+
		"\u00c2\2\u1cf8\u1cfa\7a\2\2\u1cf9\u1cfb\7\u0181\2\2\u1cfa\u1cf9\3\2\2"+
		"\2\u1cfa\u1cfb\3\2\2\2\u1cfb\u1cfc\3\2\2\2\u1cfc\u1d52\5\u047e\u0240\2"+
		"\u1cfd\u1cfe\6\u01d6\u00c3\2\u1cfe\u1d00\7b\2\2\u1cff\u1d01\7\u0181\2"+
		"\2\u1d00\u1cff\3\2\2\2\u1d00\u1d01\3\2\2\2\u1d01\u1d02\3\2\2\2\u1d02\u1d52"+
		"\5\u047e\u0240\2\u1d03\u1d05\7E\2\2\u1d04\u1d06\7\u0181\2\2\u1d05\u1d04"+
		"\3\2\2\2\u1d05\u1d06\3\2\2\2\u1d06\u1d07\3\2\2\2\u1d07\u1d52\5\u0472\u023a"+
		"\2\u1d08\u1d0a\7\u00f8\2\2\u1d09\u1d0b\7\u0181\2\2\u1d0a\u1d09\3\2\2\2"+
		"\u1d0a\u1d0b\3\2\2\2\u1d0b\u1d0c\3\2\2\2\u1d0c\u1d52\5\u03ac\u01d7\2\u1d0d"+
		"\u1d0f\tu\2\2\u1d0e\u1d10\7\u0181\2\2\u1d0f\u1d0e\3\2\2\2\u1d0f\u1d10"+
		"\3\2\2\2\u1d10\u1d11\3\2\2\2\u1d11\u1d52\5\u03ac\u01d7\2\u1d12\u1d14\t"+
		"v\2\2\u1d13\u1d15\7\u0181\2\2\u1d14\u1d13\3\2\2\2\u1d14\u1d15\3\2\2\2"+
		"\u1d15\u1d16\3\2\2\2\u1d16\u1d52\5\u046e\u0238\2\u1d17\u1d19\7v\2\2\u1d18"+
		"\u1d1a\7\u0181\2\2\u1d19\u1d18\3\2\2\2\u1d19\u1d1a\3\2\2\2\u1d1a\u1d1b"+
		"\3\2\2\2\u1d1b\u1d52\5\u046e\u0238\2\u1d1c\u1d1e\7\u012e\2\2\u1d1d\u1d1f"+
		"\7\u0181\2\2\u1d1e\u1d1d\3\2\2\2\u1d1e\u1d1f\3\2\2\2\u1d1f\u1d20\3\2\2"+
		"\2\u1d20\u1d52\tw\2\2\u1d21\u1d23\7\u0295\2\2\u1d22\u1d24\7\u0181\2\2"+
		"\u1d23\u1d22\3\2\2\2\u1d23\u1d24\3\2\2\2\u1d24\u1d25\3\2\2\2\u1d25\u1d26"+
		"\7\u019b\2\2\u1d26\u1d27\5\u044a\u0226\2\u1d27\u1d28\7\u019c\2\2\u1d28"+
		"\u1d52\3\2\2\2\u1d29\u1d52\5\u03b2\u01da\2\u1d2a\u1d52\5\u03ae\u01d8\2"+
		"\u1d2b\u1d2d\7\u00ad\2\2\u1d2c\u1d2e\7\u0181\2\2\u1d2d\u1d2c\3\2\2\2\u1d2d"+
		"\u1d2e\3\2\2\2\u1d2e\u1d2f\3\2\2\2\u1d2f\u1d52\tx\2\2\u1d30\u1d31\7o\2"+
		"\2\u1d31\u1d33\7y\2\2\u1d32\u1d34\7\u0181\2\2\u1d33\u1d32\3\2\2\2\u1d33"+
		"\u1d34\3\2\2\2\u1d34\u1d35\3\2\2\2\u1d35\u1d52\5\u047e\u0240\2\u1d36\u1d37"+
		"\7\u020b\2\2\u1d37\u1d39\7y\2\2\u1d38\u1d3a\7\u0181\2\2\u1d39\u1d38\3"+
		"\2\2\2\u1d39\u1d3a\3\2\2\2\u1d3a\u1d3b\3\2\2\2\u1d3b\u1d52\5\u047e\u0240"+
		"\2\u1d3c\u1d42\7\u0158\2\2\u1d3d\u1d3f\6\u01d6\u00c4\2\u1d3e\u1d40\7\u0181"+
		"\2\2\u1d3f\u1d3e\3\2\2\2\u1d3f\u1d40\3\2\2\2\u1d40\u1d43\3\2\2\2\u1d41"+
		"\u1d43\3\2\2\2\u1d42\u1d3d\3\2\2\2\u1d42\u1d41\3\2\2\2\u1d43\u1d44\3\2"+
		"\2\2\u1d44\u1d52\5\u0462\u0232\2\u1d45\u1d46\7\u014a\2\2\u1d46\u1d52\t"+
		"y\2\2\u1d47\u1d49\7d\2\2\u1d48\u1d4a\7\u0181\2\2\u1d49\u1d48\3\2\2\2\u1d49"+
		"\u1d4a\3\2\2\2\u1d4a\u1d4b\3\2\2\2\u1d4b\u1d52\5\u047e\u0240\2\u1d4c\u1d4e"+
		"\7\u00af\2\2\u1d4d\u1d4f\7\u0181\2\2\u1d4e\u1d4d\3\2\2\2\u1d4e\u1d4f\3"+
		"\2\2\2\u1d4f\u1d50\3\2\2\2\u1d50\u1d52\5\u046e\u0238\2\u1d51\u1cd0\3\2"+
		"\2\2\u1d51\u1cd5\3\2\2\2\u1d51\u1cde\3\2\2\2\u1d51\u1ce3\3\2\2\2\u1d51"+
		"\u1ce8\3\2\2\2\u1d51\u1ced\3\2\2\2\u1d51\u1cf2\3\2\2\2\u1d51\u1cf7\3\2"+
		"\2\2\u1d51\u1cfd\3\2\2\2\u1d51\u1d03\3\2\2\2\u1d51\u1d08\3\2\2\2\u1d51"+
		"\u1d0d\3\2\2\2\u1d51\u1d12\3\2\2\2\u1d51\u1d17\3\2\2\2\u1d51\u1d1c\3\2"+
		"\2\2\u1d51\u1d21\3\2\2\2\u1d51\u1d29\3\2\2\2\u1d51\u1d2a\3\2\2\2\u1d51"+
		"\u1d2b\3\2\2\2\u1d51\u1d30\3\2\2\2\u1d51\u1d36\3\2\2\2\u1d51\u1d3c\3\2"+
		"\2\2\u1d51\u1d45\3\2\2\2\u1d51\u1d47\3\2\2\2\u1d51\u1d4c\3\2\2\2\u1d52"+
		"\u03ab\3\2\2\2\u1d53\u1d56\5\u046e\u0238\2\u1d54\u1d56\7\u01e0\2\2\u1d55"+
		"\u1d53\3\2\2\2\u1d55\u1d54\3\2\2\2\u1d56\u03ad\3\2\2\2\u1d57\u1d59\7\u01e0"+
		"\2\2\u1d58\u1d57\3\2\2\2\u1d58\u1d59\3\2\2\2\u1d59\u1d5a\3\2\2\2\u1d5a"+
		"\u1d5c\7\u01c6\2\2\u1d5b\u1d5d\7\u0181\2\2\u1d5c\u1d5b\3\2\2\2\u1d5c\u1d5d"+
		"\3\2\2\2\u1d5d\u1d5e\3\2\2\2\u1d5e\u1d5f\5\u03a4\u01d3\2\u1d5f\u03af\3"+
		"\2\2\2\u1d60\u1d62\7\u01e0\2\2\u1d61\u1d60\3\2\2\2\u1d61\u1d62\3\2\2\2"+
		"\u1d62\u1d63\3\2\2\2\u1d63\u1d65\7b\2\2\u1d64\u1d66\7\u0181\2\2\u1d65"+
		"\u1d64\3\2\2\2\u1d65\u1d66\3\2\2\2\u1d66\u1d67\3\2\2\2\u1d67\u1d68\5\u047c"+
		"\u023f\2\u1d68\u03b1\3\2\2\2\u1d69\u1d6b\7\u01e0\2\2\u1d6a\u1d69\3\2\2"+
		"\2\u1d6a\u1d6b\3\2\2\2\u1d6b\u1d6c\3\2\2\2\u1d6c\u1d6e\5\u02f0\u0179\2"+
		"\u1d6d\u1d6f\7\u0181\2\2\u1d6e\u1d6d\3\2\2\2\u1d6e\u1d6f\3\2\2\2\u1d6f"+
		"\u1d70\3\2\2\2\u1d70\u1d71\5\u03a2\u01d2\2\u1d71\u03b3\3\2\2\2\u1d72\u1d73"+
		"\7\"\2\2\u1d73\u1d74\7\u01be\2\2\u1d74\u1d77\5\u03b6\u01dc\2\u1d75\u1d76"+
		"\7\u00fc\2\2\u1d76\u1d78\5\u0470\u0239\2\u1d77\u1d75\3\2\2\2\u1d77\u1d78"+
		"\3\2\2\2\u1d78\u1d7a\3\2\2\2\u1d79\u1d7b\5\u03b8\u01dd\2\u1d7a\u1d79\3"+
		"\2\2\2\u1d7a\u1d7b\3\2\2\2\u1d7b\u1d7d\3\2\2\2\u1d7c\u1d7e\5\u03bc\u01df"+
		"\2\u1d7d\u1d7c\3\2\2\2\u1d7d\u1d7e\3\2\2\2\u1d7e\u03b5\3\2\2\2\u1d7f\u1d81"+
		"\7\u0222\2\2\u1d80\u1d7f\3\2\2\2\u1d80\u1d81\3\2\2\2\u1d81\u1d82\3\2\2"+
		"\2\u1d82\u1d84\7\u021b\2\2\u1d83\u1d85\5\u03ba\u01de\2\u1d84\u1d83\3\2"+
		"\2\2\u1d84\u1d85\3\2\2\2\u1d85\u1d86\3\2\2\2\u1d86\u1d88\7\u019b\2\2\u1d87"+
		"\u1d89\5\u0464\u0233\2\u1d88\u1d87\3\2\2\2\u1d88\u1d89\3\2\2\2\u1d89\u1d8a"+
		"\3\2\2\2\u1d8a\u1da1\7\u019c\2\2\u1d8b\u1d8d\7\u0222\2\2\u1d8c\u1d8b\3"+
		"\2\2\2\u1d8c\u1d8d\3\2\2\2\u1d8d\u1d8e\3\2\2\2\u1d8e\u1d8f\7\u009e\2\2"+
		"\u1d8f\u1d90\7\u019b\2\2\u1d90\u1d91\5\u02a8\u0155\2\u1d91\u1d92\7\u019c"+
		"\2\2\u1d92\u1da1\3\2\2\2\u1d93\u1d9e\tz\2\2\u1d94\u1d95\7\u019b\2\2\u1d95"+
		"\u1d96\5\u02a8\u0155\2\u1d96\u1d97\7\u019c\2\2\u1d97\u1d9f\3\2\2\2\u1d98"+
		"\u1d99\7\\\2\2\u1d99\u1d9b\7\u019b\2\2\u1d9a\u1d9c\5\u0464\u0233\2\u1d9b"+
		"\u1d9a\3\2\2\2\u1d9b\u1d9c\3\2\2\2\u1d9c\u1d9d\3\2\2\2\u1d9d\u1d9f\7\u019c"+
		"\2\2\u1d9e\u1d94\3\2\2\2\u1d9e\u1d98\3\2\2\2\u1d9f\u1da1\3\2\2\2\u1da0"+
		"\u1d80\3\2\2\2\u1da0\u1d8c\3\2\2\2\u1da0\u1d93\3\2\2\2\u1da1\u03b7\3\2"+
		"\2\2\u1da2\u1da3\7\u014f\2\2\u1da3\u1da5\7\u01be\2\2\u1da4\u1da6\7\u0222"+
		"\2\2\u1da5\u1da4\3\2\2\2\u1da5\u1da6\3\2\2\2\u1da6\u1db1\3\2\2\2\u1da7"+
		"\u1da8\7\u009e\2\2\u1da8\u1da9\7\u019b\2\2\u1da9\u1daa\5\u02a8\u0155\2"+
		"\u1daa\u1dab\7\u019c\2\2\u1dab\u1db2\3\2\2\2\u1dac\u1dae\7\u021b\2\2\u1dad"+
		"\u1daf\5\u03ba\u01de\2\u1dae\u1dad\3\2\2\2\u1dae\u1daf\3\2\2\2\u1daf\u1db0"+
		"\3\2\2\2\u1db0\u1db2\5\u0466\u0234\2\u1db1\u1da7\3\2\2\2\u1db1\u1dac\3"+
		"\2\2\2\u1db2\u1db5\3\2\2\2\u1db3\u1db4\7\u0150\2\2\u1db4\u1db6\5\u0470"+
		"\u0239\2\u1db5\u1db3\3\2\2\2\u1db5\u1db6\3\2\2\2\u1db6\u03b9\3\2\2\2\u1db7"+
		"\u1db8\6\u01de\u00c5\2\u1db8\u1db9\7@\2\2\u1db9\u1dba\7\u0181\2\2\u1dba"+
		"\u1dbb\5\u0470\u0239\2\u1dbb\u03bb\3\2\2\2\u1dbc\u1dbd\7\u019b\2\2\u1dbd"+
		"\u1dc2\5\u03be\u01e0\2\u1dbe\u1dbf\7\u0198\2\2\u1dbf\u1dc1\5\u03be\u01e0"+
		"\2\u1dc0\u1dbe\3\2\2\2\u1dc1\u1dc4\3\2\2\2\u1dc2\u1dc0\3\2\2\2\u1dc2\u1dc3"+
		"\3\2\2\2\u1dc3\u1dc5\3\2\2\2\u1dc4\u1dc2\3\2\2\2\u1dc5\u1dc6\7\u019c\2"+
		"\2\u1dc6\u03bd\3\2\2\2\u1dc7\u1dc8\7\"\2\2\u1dc8\u1dd3\5\u0462\u0232\2"+
		"\u1dc9\u1dca\7\u02a1\2\2\u1dca\u1dcb\7\u00b2\2\2\u1dcb\u1dce\7\u015c\2"+
		"\2\u1dcc\u1dcf\5\u03c6\u01e4\2\u1dcd\u1dcf\7\u0231\2\2\u1dce\u1dcc\3\2"+
		"\2\2\u1dce\u1dcd\3\2\2\2\u1dcf\u1dd4\3\2\2\2\u1dd0\u1dd1\7\u02a1\2\2\u1dd1"+
		"\u1dd2\7\u0214\2\2\u1dd2\u1dd4\5\u03c0\u01e1\2\u1dd3\u1dc9\3\2\2\2\u1dd3"+
		"\u1dd0\3\2\2\2\u1dd3\u1dd4\3\2\2\2\u1dd4\u1dd8\3\2\2\2\u1dd5\u1dd7\5\u03c2"+
		"\u01e2\2\u1dd6\u1dd5\3\2\2\2\u1dd7\u1dda\3\2\2\2\u1dd8\u1dd6\3\2\2\2\u1dd8"+
		"\u1dd9\3\2\2\2\u1dd9\u1de6\3\2\2\2\u1dda\u1dd8\3\2\2\2\u1ddb\u1ddc\7\u019b"+
		"\2\2\u1ddc\u1de1\5\u03c4\u01e3\2\u1ddd\u1dde\7\u0198\2\2\u1dde\u1de0\5"+
		"\u03c4\u01e3\2\u1ddf\u1ddd\3\2\2\2\u1de0\u1de3\3\2\2\2\u1de1\u1ddf\3\2"+
		"\2\2\u1de1\u1de2\3\2\2\2\u1de2\u1de4\3\2\2\2\u1de3\u1de1\3\2\2\2\u1de4"+
		"\u1de5\7\u019c\2\2\u1de5\u1de7\3\2\2\2\u1de6\u1ddb\3\2\2\2\u1de6\u1de7"+
		"\3\2\2\2\u1de7\u03bf\3\2\2\2\u1de8\u1df5\5\u03c6\u01e4\2\u1de9\u1dea\7"+
		"\u019b\2\2\u1dea\u1def\5\u03c6\u01e4\2\u1deb\u1dec\7\u0198\2\2\u1dec\u1dee"+
		"\5\u03c6\u01e4\2\u1ded\u1deb\3\2\2\2\u1dee\u1df1\3\2\2\2\u1def\u1ded\3"+
		"\2\2\2\u1def\u1df0\3\2\2\2\u1df0\u1df2\3\2\2\2\u1df1\u1def\3\2\2\2\u1df2"+
		"\u1df3\7\u019c\2\2\u1df3\u1df5\3\2\2\2\u1df4\u1de8\3\2\2\2\u1df4\u1de9"+
		"\3\2\2\2\u1df5\u03c1\3\2\2\2\u1df6\u1df8\7\u0158\2\2\u1df7\u1df9\7\u0181"+
		"\2\2\u1df8\u1df7\3\2\2\2\u1df8\u1df9\3\2\2\2\u1df9\u1dfa\3\2\2\2\u1dfa"+
		"\u1e19\5\u0462\u0232\2\u1dfb\u1dfd\7\u014a\2\2\u1dfc\u1dfb\3\2\2\2\u1dfc"+
		"\u1dfd\3\2\2\2\u1dfd\u1dfe\3\2\2\2\u1dfe\u1e00\7\u0082\2\2\u1dff\u1e01"+
		"\7\u0181\2\2\u1e00\u1dff\3\2\2\2\u1e00\u1e01\3\2\2\2\u1e01\u1e02\3\2\2"+
		"\2\u1e02\u1e19\5\u0440\u0221\2\u1e03\u1e05\7\u00f0\2\2\u1e04\u1e06\7\u0181"+
		"\2\2\u1e05\u1e04\3\2\2\2\u1e05\u1e06\3\2\2\2\u1e06\u1e07\3\2\2\2\u1e07"+
		"\u1e19\5\u0470\u0239\2\u1e08\u1e0a\t{\2\2\u1e09\u1e0b\7\u0181\2\2\u1e0a"+
		"\u1e09\3\2\2\2\u1e0a\u1e0b\3\2\2\2\u1e0b\u1e0c\3\2\2\2\u1e0c\u1e19\5\u0470"+
		"\u0239\2\u1e0d\u1e0e\t|\2\2\u1e0e\u1e10\7y\2\2\u1e0f\u1e11\7\u0181\2\2"+
		"\u1e10\u1e0f\3\2\2\2\u1e10\u1e11\3\2\2\2\u1e11\u1e12\3\2\2\2\u1e12\u1e19"+
		"\5\u0482\u0242\2\u1e13\u1e15\7\r\2\2\u1e14\u1e16\7\u0181\2\2\u1e15\u1e14"+
		"\3\2\2\2\u1e15\u1e16\3\2\2\2\u1e16\u1e17\3\2\2\2\u1e17\u1e19\5\u0482\u0242"+
		"\2\u1e18\u1df6\3\2\2\2\u1e18\u1dfc\3\2\2\2\u1e18\u1e03\3\2\2\2\u1e18\u1e08"+
		"\3\2\2\2\u1e18\u1e0d\3\2\2\2\u1e18\u1e13\3\2\2\2\u1e19\u03c3\3\2\2\2\u1e1a"+
		"\u1e1b\7\u014f\2\2\u1e1b\u1e1f\5\u0496\u024c\2\u1e1c\u1e1e\5\u03c2\u01e2"+
		"\2\u1e1d\u1e1c\3\2\2\2\u1e1e\u1e21\3\2\2\2\u1e1f\u1e1d\3\2\2\2\u1e1f\u1e20"+
		"\3\2\2\2\u1e20\u03c5\3\2\2\2\u1e21\u1e1f\3\2\2\2\u1e22\u1e23\7\u019b\2"+
		"\2\u1e23\u1e28\5\u03c8\u01e5\2\u1e24\u1e25\7\u0198\2\2\u1e25\u1e27\5\u03c8"+
		"\u01e5\2\u1e26\u1e24\3\2\2\2\u1e27\u1e2a\3\2\2\2\u1e28\u1e26\3\2\2\2\u1e28"+
		"\u1e29\3\2\2\2\u1e29\u1e2b\3\2\2\2\u1e2a\u1e28\3\2\2\2\u1e2b\u1e2c\7\u019c"+
		"\2\2\u1e2c\u03c7\3\2\2\2\u1e2d\u1e30\5\u02a8\u0155\2\u1e2e\u1e30\7\u0231"+
		"\2\2\u1e2f\u1e2d\3\2\2\2\u1e2f\u1e2e\3\2\2\2\u1e30\u03c9\3\2\2\2\u1e31"+
		"\u1e32\7u\2\2\u1e32\u1e33\7\u0181\2\2\u1e33\u1e34\5\u03fc\u01ff\2\u1e34"+
		"\u03cb\3\2\2\2\u1e35\u1e36\7\u0209\2\2\u1e36\u1e37\7\u01f2\2\2\u1e37\u03cd"+
		"\3\2\2\2\u1e38\u1e39\7\u0209\2\2\u1e39\u1e3a\5\u02f2\u017a\2\u1e3a\u1e3b"+
		"\7\u01f2\2\2\u1e3b\u03cf\3\2\2\2\u1e3c\u1e3e\t}\2\2\u1e3d\u1e3c\3\2\2"+
		"\2\u1e3d\u1e3e\3\2\2\2\u1e3e\u1e3f\3\2\2\2\u1e3f\u1e40\5\u03d2\u01ea\2"+
		"\u1e40\u03d1\3\2\2\2\u1e41\u1e42\5\u044e\u0228\2\u1e42\u1e43\5\u03d6\u01ec"+
		"\2\u1e43\u03d3\3\2\2\2\u1e44\u1e45\7\u01c6\2\2\u1e45\u1e46\5\u03a4\u01d3"+
		"\2\u1e46\u03d5\3\2\2\2\u1e47\u1e49\5\u038e\u01c8\2\u1e48\u1e4a\5\u03d4"+
		"\u01eb\2\u1e49\u1e48\3\2\2\2\u1e49\u1e4a\3\2\2\2\u1e4a\u03d7\3\2\2\2\u1e4b"+
		"\u1e4c\7\u019b\2\2\u1e4c\u1e4d\5\u041c\u020f\2\u1e4d\u1e4e\7\u0198\2\2"+
		"\u1e4e\u1e4f\5\u041c\u020f\2\u1e4f\u1e50\7\u019c\2\2\u1e50\u03d9\3\2\2"+
		"\2\u1e51\u1e56\5\u042c\u0217\2\u1e52\u1e53\7\u0198\2\2\u1e53\u1e55\5\u042c"+
		"\u0217\2\u1e54\u1e52\3\2\2\2\u1e55\u1e58\3\2\2\2\u1e56\u1e54\3\2\2\2\u1e56"+
		"\u1e57\3\2\2\2\u1e57\u03db\3\2\2\2\u1e58\u1e56\3\2\2\2\u1e59\u1e5e\5\u03de"+
		"\u01f0\2\u1e5a\u1e5b\7\u0198\2\2\u1e5b\u1e5d\5\u03de\u01f0\2\u1e5c\u1e5a"+
		"\3\2\2\2\u1e5d\u1e60\3\2\2\2\u1e5e\u1e5c\3\2\2\2\u1e5e\u1e5f\3\2\2\2\u1e5f"+
		"\u03dd\3\2\2\2\u1e60\u1e5e\3\2\2\2\u1e61\u1e62\5\u0410\u0209\2\u1e62\u1e65"+
		"\7\u0181\2\2\u1e63\u1e66\5\u029e\u0150\2\u1e64\u1e66\7\u01e0\2\2\u1e65"+
		"\u1e63\3\2\2\2\u1e65\u1e64\3\2\2\2\u1e66\u03df\3\2\2\2\u1e67\u1e68\5\u02f0"+
		"\u0179\2\u1e68\u1e69\5\u03a2\u01d2\2\u1e69\u03e1\3\2\2\2\u1e6a\u1e6c\7"+
		"\\\2\2\u1e6b\u1e6d\5\u03e4\u01f3\2\u1e6c\u1e6b\3\2\2\2\u1e6d\u1e6e\3\2"+
		"\2\2\u1e6e\u1e6c\3\2\2\2\u1e6e\u1e6f\3\2\2\2\u1e6f\u03e3\3\2\2\2\u1e70"+
		"\u1e71\7\u028a\2\2\u1e71\u1e72\7\u01be\2\2\u1e72\u1e7d\5\u047e\u0240\2"+
		"\u1e73\u1e75\7\u024b\2\2\u1e74\u1e73\3\2\2\2\u1e74\u1e75\3\2\2\2\u1e75"+
		"\u1e76\3\2\2\2\u1e76\u1e77\7\u01ee\2\2\u1e77\u1e78\7\u01be\2\2\u1e78\u1e7d"+
		"\5\u047e\u0240\2\u1e79\u1e7a\7\u01f0\2\2\u1e7a\u1e7b\7\u01be\2\2\u1e7b"+
		"\u1e7d\5\u047e\u0240\2\u1e7c\u1e70\3\2\2\2\u1e7c\u1e74\3\2\2\2\u1e7c\u1e79"+
		"\3\2\2\2\u1e7d\u03e5\3\2\2\2\u1e7e\u1e80\7\u0223\2\2\u1e7f\u1e81\5\u03e8"+
		"\u01f5\2\u1e80\u1e7f\3\2\2\2\u1e81\u1e82\3\2\2\2\u1e82\u1e80\3\2\2\2\u1e82"+
		"\u1e83\3\2\2\2\u1e83\u03e7\3\2\2\2\u1e84\u1e85\t~\2\2\u1e85\u1e86\7\u01be"+
		"\2\2\u1e86\u1e87\5\u047e\u0240\2\u1e87\u03e9\3\2\2\2\u1e88\u1e8d\5\u03fc"+
		"\u01ff\2\u1e89\u1e8a\7\u0198\2\2\u1e8a\u1e8c\5\u03fc\u01ff\2\u1e8b\u1e89"+
		"\3\2\2\2\u1e8c\u1e8f\3\2\2\2\u1e8d\u1e8b\3\2\2\2\u1e8d\u1e8e\3\2\2\2\u1e8e"+
		"\u03eb\3\2\2\2\u1e8f\u1e8d\3\2\2\2\u1e90\u1e95\5\u03f0\u01f9\2\u1e91\u1e92"+
		"\7\u0198\2\2\u1e92\u1e94\5\u03f0\u01f9\2\u1e93\u1e91\3\2\2\2\u1e94\u1e97"+
		"\3\2\2\2\u1e95\u1e93\3\2\2\2\u1e95\u1e96\3\2\2\2\u1e96\u03ed\3\2\2\2\u1e97"+
		"\u1e95\3\2\2\2\u1e98\u1e9d\5\u03f2\u01fa\2\u1e99\u1e9a\7\u0198\2\2\u1e9a"+
		"\u1e9c\5\u03f2\u01fa\2\u1e9b\u1e99\3\2\2\2\u1e9c\u1e9f\3\2\2\2\u1e9d\u1e9b"+
		"\3\2\2\2\u1e9d\u1e9e\3\2\2\2\u1e9e\u03ef\3\2\2\2\u1e9f\u1e9d\3\2\2\2\u1ea0"+
		"\u1ebb\5\u03fc\u01ff\2\u1ea1\u1eb9\7\u00a1\2\2\u1ea2\u1ea5\7\u01be\2\2"+
		"\u1ea3\u1ea4\6\u01f9\u00c6\2\u1ea4\u1ea6\7\u00fd\2\2\u1ea5\u1ea3\3\2\2"+
		"\2\u1ea5\u1ea6\3\2\2\2\u1ea6\u1ea7\3\2\2\2\u1ea7\u1eba\5\u047e\u0240\2"+
		"\u1ea8\u1ea9\7\u02ac\2\2\u1ea9\u1eaf\5\u0496\u024c\2\u1eaa\u1eab\7\u01b1"+
		"\2\2\u1eab\u1eb0\5\u0480\u0241\2\u1eac\u1ead\6\u01f9\u00c7\2\u1ead\u1eae"+
		"\7\u01be\2\2\u1eae\u1eb0\5\u047e\u0240\2\u1eaf\u1eaa\3\2\2\2\u1eaf\u1eac"+
		"\3\2\2\2\u1eaf\u1eb0\3\2\2\2\u1eb0\u1eba\3\2\2\2\u1eb1\u1eb4\6\u01f9\u00c8"+
		"\2\u1eb2\u1eb3\7\u02ac\2\2\u1eb3\u1eb5\5\u0496\u024c\2\u1eb4\u1eb2\3\2"+
		"\2\2\u1eb4\u1eb5\3\2\2\2\u1eb5\u1eb6\3\2\2\2\u1eb6\u1eb7\7\u01be\2\2\u1eb7"+
		"\u1eb8\7\u02fe\2\2\u1eb8\u1eba\7\u00fd\2\2\u1eb9\u1ea2\3\2\2\2\u1eb9\u1ea8"+
		"\3\2\2\2\u1eb9\u1eb1\3\2\2\2\u1eba\u1ebc\3\2\2\2\u1ebb\u1ea1\3\2\2\2\u1ebb"+
		"\u1ebc\3\2\2\2\u1ebc\u03f1\3\2\2\2\u1ebd\u1eda\5\u03fc\u01ff\2\u1ebe\u1ed5"+
		"\7\u00a1\2\2\u1ebf\u1ec0\7\u02ac\2\2\u1ec0\u1ec2\5\u0496\u024c\2\u1ec1"+
		"\u1ebf\3\2\2\2\u1ec1\u1ec2\3\2\2\2\u1ec2\u1ec3\3\2\2\2\u1ec3\u1ec4\7\u01be"+
		"\2\2\u1ec4\u1ec7\5\u047e\u0240\2\u1ec5\u1ec6\7\u0260\2\2\u1ec6\u1ec8\5"+
		"\u047e\u0240\2\u1ec7\u1ec5\3\2\2\2\u1ec7\u1ec8\3\2\2\2\u1ec8\u1eca\3\2"+
		"\2\2\u1ec9\u1ecb\5\u03f4\u01fb\2\u1eca\u1ec9\3\2\2\2\u1eca\u1ecb\3\2\2"+
		"\2\u1ecb\u1ed6\3\2\2\2\u1ecc\u1ecd\7\u02ac\2\2\u1ecd\u1ed3\5\u0496\u024c"+
		"\2\u1ece\u1ecf\7\u01b1\2\2\u1ecf\u1ed1\5\u0480\u0241\2\u1ed0\u1ed2\5\u03f4"+
		"\u01fb\2\u1ed1\u1ed0\3\2\2\2\u1ed1\u1ed2\3\2\2\2\u1ed2\u1ed4\3\2\2\2\u1ed3"+
		"\u1ece\3\2\2\2\u1ed3\u1ed4\3\2\2\2\u1ed4\u1ed6\3\2\2\2\u1ed5\u1ec1\3\2"+
		"\2\2\u1ed5\u1ecc\3\2\2\2\u1ed5\u1ed6\3\2\2\2\u1ed6\u1edb\3\2\2\2\u1ed7"+
		"\u1ed9\5\u03f6\u01fc\2\u1ed8\u1ed7\3\2\2\2\u1ed8\u1ed9\3\2\2\2\u1ed9\u1edb"+
		"\3\2\2\2\u1eda\u1ebe\3\2\2\2\u1eda\u1ed8\3\2\2\2\u1edb\u03f3\3\2\2\2\u1edc"+
		"\u1edd\7\u02f7\2\2\u1edd\u1ede\7m\2\2\u1ede\u1edf\7\u00fd\2\2\u1edf\u03f5"+
		"\3\2\2\2\u1ee0\u1ee1\7{\2\2\u1ee1\u1ee2\7\u02f8\2\2\u1ee2\u1ee3\7\u00fd"+
		"\2\2\u1ee3\u03f7\3\2\2\2\u1ee4\u1ee5\7\u0260\2\2\u1ee5\u1ee6\5\u047e\u0240"+
		"\2\u1ee6\u03f9\3\2\2\2\u1ee7\u1eeb\5\u0496\u024c\2\u1ee8\u1ee9\7\u01a2"+
		"\2\2\u1ee9\u1eec\5\u0496\u024c\2\u1eea\u1eec\7\u01a3\2\2\u1eeb\u1ee8\3"+
		"\2\2\2\u1eeb\u1eea\3\2\2\2\u1eeb\u1eec\3\2\2\2\u1eec\u03fb\3\2\2\2\u1eed"+
		"\u1ef3\5\u03fa\u01fe\2\u1eee\u1ef0\7\u01d2\2\2\u1eef\u1ef1\5\u049e\u0250"+
		"\2\u1ef0\u1eef\3\2\2\2\u1ef0\u1ef1\3\2\2\2\u1ef1\u1ef3\3\2\2\2\u1ef2\u1eed"+
		"\3\2\2\2\u1ef2\u1eee\3\2\2\2\u1ef3\u03fd\3\2\2\2\u1ef4\u1ef5\7\u0220\2"+
		"\2\u1ef5\u1ef6\5\u047c\u023f\2\u1ef6\u03ff\3\2\2\2\u1ef7\u1efa\5\u03fe"+
		"\u0200\2\u1ef8\u1efa\5\u0162\u00b2\2\u1ef9\u1ef7\3\2\2\2\u1ef9\u1ef8\3"+
		"\2\2\2\u1efa\u0401\3\2\2\2\u1efb\u1efc\t\177\2\2\u1efc\u0403\3\2\2\2\u1efd"+
		"\u1efe\t\u0080\2\2\u1efe\u0405\3\2\2\2\u1eff\u1f00\6\u0204\u00c9\2\u1f00"+
		"\u1f01\7\"\2\2\u1f01\u1f02\5\u0466\u0234\2\u1f02\u0407\3\2\2\2\u1f03\u1f09"+
		"\5\u046c\u0237\2\u1f04\u1f06\5\u0468\u0235\2\u1f05\u1f07\5\u046c\u0237"+
		"\2\u1f06\u1f05\3\2\2\2\u1f06\u1f07\3\2\2\2\u1f07\u1f09\3\2\2\2\u1f08\u1f03"+
		"\3\2\2\2\u1f08\u1f04\3\2\2\2\u1f09\u0409\3\2\2\2\u1f0a\u1f0b\6\u0206\u00ca"+
		"\2\u1f0b\u1f0f\5\u0462\u0232\2\u1f0c\u1f0d\6\u0206\u00cb\2\u1f0d\u1f0f"+
		"\5\u0408\u0205\2\u1f0e\u1f0a\3\2\2\2\u1f0e\u1f0c\3\2\2\2\u1f0f\u040b\3"+
		"\2\2\2\u1f10\u1f11\5\u0462\u0232\2\u1f11\u040d\3\2\2\2\u1f12\u1f13\7\u019b"+
		"\2\2\u1f13\u1f18\5\u040c\u0207\2\u1f14\u1f15\7\u0198\2\2\u1f15\u1f17\5"+
		"\u040c\u0207\2\u1f16\u1f14\3\2\2\2\u1f17\u1f1a\3\2\2\2\u1f18\u1f16\3\2"+
		"\2\2\u1f18\u1f19\3\2\2\2\u1f19\u1f1b\3\2\2\2\u1f1a\u1f18\3\2\2\2\u1f1b"+
		"\u1f1c\7\u019c\2\2\u1f1c\u040f\3\2\2\2\u1f1d\u1f1e\5\u0408\u0205\2\u1f1e"+
		"\u0411\3\2\2\2\u1f1f\u1f22\5\u0410\u0209\2\u1f20\u1f22\5\u0418\u020d\2"+
		"\u1f21\u1f1f\3\2\2\2\u1f21\u1f20\3\2\2\2\u1f22\u0413\3\2\2\2\u1f23\u1f24"+
		"\5\u0462\u0232\2\u1f24\u0415\3\2\2\2\u1f25\u1f26\5\u0408\u0205\2\u1f26"+
		"\u0417\3\2\2\2\u1f27\u1f28\5\u0462\u0232\2\u1f28\u1f2c\7\u0197\2\2\u1f29"+
		"\u1f2a\5\u0462\u0232\2\u1f2a\u1f2b\7\u0197\2\2\u1f2b\u1f2d\3\2\2\2\u1f2c"+
		"\u1f29\3\2\2\2\u1f2c\u1f2d\3\2\2\2\u1f2d\u1f2e\3\2\2\2\u1f2e\u1f2f\7\u018b"+
		"\2\2\u1f2f\u0419\3\2\2\2\u1f30\u1f31\5\u0462\u0232\2\u1f31\u041b\3\2\2"+
		"\2\u1f32\u1f33\5\u0462\u0232\2\u1f33\u041d\3\2\2\2\u1f34\u1f35\5\u0468"+
		"\u0235\2\u1f35\u041f\3\2\2\2\u1f36\u1f37\5\u0468\u0235\2\u1f37\u0421\3"+
		"\2\2\2\u1f38\u1f39\5\u0468\u0235\2\u1f39\u0423\3\2\2\2\u1f3a\u1f3b\5\u0468"+
		"\u0235\2\u1f3b\u0425\3\2\2\2\u1f3c\u1f3d\5\u0468\u0235\2\u1f3d\u0427\3"+
		"\2\2\2\u1f3e\u1f3f\5\u0468\u0235\2\u1f3f\u0429\3\2\2\2\u1f40\u1f43\5\u0468"+
		"\u0235\2\u1f41\u1f43\5\u046c\u0237\2\u1f42\u1f40\3\2\2\2\u1f42\u1f41\3"+
		"\2\2\2\u1f43\u042b\3\2\2\2\u1f44\u1f47\5\u0468\u0235\2\u1f45\u1f47\5\u046c"+
		"\u0237\2\u1f46\u1f44\3\2\2\2\u1f46\u1f45\3\2\2\2\u1f47\u042d\3\2\2\2\u1f48"+
		"\u1f49\5\u0462\u0232\2\u1f49\u042f\3\2\2\2\u1f4a\u1f4b\5\u0462\u0232\2"+
		"\u1f4b\u0431\3\2\2\2\u1f4c\u1f4d\5\u0462\u0232\2\u1f4d\u0433\3\2\2\2\u1f4e"+
		"\u1f4f\5\u0462\u0232\2\u1f4f\u0435\3\2\2\2\u1f50\u1f51\5\u0468\u0235\2"+
		"\u1f51\u0437\3\2\2\2\u1f52\u1f53\5\u0468\u0235\2\u1f53\u0439\3\2\2\2\u1f54"+
		"\u1f55\5\u0462\u0232\2\u1f55\u043b\3\2\2\2\u1f56\u1f57\5\u0496\u024c\2"+
		"\u1f57\u043d\3\2\2\2\u1f58\u1f59\5\u0496\u024c\2\u1f59\u043f\3\2\2\2\u1f5a"+
		"\u1f5b\5\u0496\u024c\2\u1f5b\u0441\3\2\2\2\u1f5c\u1f5f\5\u0468\u0235\2"+
		"\u1f5d\u1f5f\5\u046c\u0237\2\u1f5e\u1f5c\3\2\2\2\u1f5e\u1f5d\3\2\2\2\u1f5f"+
		"\u0443\3\2\2\2\u1f60\u1f61\5\u041c\u020f\2\u1f61\u1f62\5\u046c\u0237\2"+
		"\u1f62\u0445\3\2\2\2\u1f63\u1f6b\5\u0462\u0232\2\u1f64\u1f65\7\u0197\2"+
		"\2\u1f65\u1f6c\7\u018b\2\2\u1f66\u1f69\5\u046c\u0237\2\u1f67\u1f68\7\u0197"+
		"\2\2\u1f68\u1f6a\7\u018b\2\2\u1f69\u1f67\3\2\2\2\u1f69\u1f6a\3\2\2\2\u1f6a"+
		"\u1f6c\3\2\2\2\u1f6b\u1f64\3\2\2\2\u1f6b\u1f66\3\2\2\2\u1f6b\u1f6c\3\2"+
		"\2\2\u1f6c\u0447\3\2\2\2\u1f6d\u1f70\5\u0468\u0235\2\u1f6e\u1f70\5\u046c"+
		"\u0237\2\u1f6f\u1f6d\3\2\2\2\u1f6f\u1f6e\3\2\2\2\u1f70\u0449\3\2\2\2\u1f71"+
		"\u1f76\5\u0448\u0225\2\u1f72\u1f73\7\u0198\2\2\u1f73\u1f75\5\u0448\u0225"+
		"\2\u1f74\u1f72\3\2\2\2\u1f75\u1f78\3\2\2\2\u1f76\u1f74\3\2\2\2\u1f76\u1f77"+
		"\3\2\2\2\u1f77\u044b\3\2\2\2\u1f78\u1f76\3\2\2\2\u1f79\u1f7e\5\u0446\u0224"+
		"\2\u1f7a\u1f7b\7\u0198\2\2\u1f7b\u1f7d\5\u0446\u0224\2\u1f7c\u1f7a\3\2"+
		"\2\2\u1f7d\u1f80\3\2\2\2\u1f7e\u1f7c\3\2\2\2\u1f7e\u1f7f\3\2\2\2\u1f7f"+
		"\u044d\3\2\2\2\u1f80\u1f7e\3\2\2\2\u1f81\u1f82\5\u0462\u0232\2\u1f82\u044f"+
		"\3\2\2\2\u1f83\u1f86\5\u0460\u0231\2\u1f84\u1f86\5\u04ae\u0258\2\u1f85"+
		"\u1f83\3\2\2\2\u1f85\u1f84\3\2\2\2\u1f86\u0451\3\2\2\2\u1f87\u1f88\5\u0450"+
		"\u0229\2\u1f88\u0453\3\2\2\2\u1f89\u1f8c\5\u0460\u0231\2\u1f8a\u1f8c\5"+
		"\u04b4\u025b\2\u1f8b\u1f89\3\2\2\2\u1f8b\u1f8a\3\2\2\2\u1f8c\u0455\3\2"+
		"\2\2\u1f8d\u1f8e\5\u0454\u022b\2\u1f8e\u0457\3\2\2\2\u1f8f\u1f90\5\u0462"+
		"\u0232\2\u1f90\u0459\3\2\2\2\u1f91\u1f92\5\u047c\u023f\2\u1f92\u045b\3"+
		"\2\2\2\u1f93\u1f94\5\u0462\u0232\2\u1f94\u045d\3\2\2\2\u1f95\u1f96\5\u0462"+
		"\u0232\2\u1f96\u045f\3\2\2\2\u1f97\u1f9b\t\u0081\2\2\u1f98\u1f99\6\u0231"+
		"\u00cc\2\u1f99\u1f9b\7\u0309\2\2\u1f9a\u1f97\3\2\2\2\u1f9a\u1f98\3\2\2"+
		"\2\u1f9b\u0461\3\2\2\2\u1f9c\u1f9f\5\u0460\u0231\2\u1f9d\u1f9f\5\u04a8"+
		"\u0255\2\u1f9e\u1f9c\3\2\2\2\u1f9e\u1f9d\3\2\2\2\u1f9f\u0463\3\2\2\2\u1fa0"+
		"\u1fa5\5\u0462\u0232\2\u1fa1\u1fa2\7\u0198\2\2\u1fa2\u1fa4\5\u0462\u0232"+
		"\2\u1fa3\u1fa1\3\2\2\2\u1fa4\u1fa7\3\2\2\2\u1fa5\u1fa3\3\2\2\2\u1fa5\u1fa6"+
		"\3\2\2\2\u1fa6\u0465\3\2\2\2\u1fa7\u1fa5\3\2\2\2\u1fa8\u1fa9\7\u019b\2"+
		"\2\u1fa9\u1faa\5\u0464\u0233\2\u1faa\u1fab\7\u019c\2\2\u1fab\u0467\3\2"+
		"\2\2\u1fac\u1fae\5\u0462\u0232\2\u1fad\u1faf\5\u046c\u0237\2\u1fae\u1fad"+
		"\3\2\2\2\u1fae\u1faf\3\2\2\2\u1faf\u0469\3\2\2\2\u1fb0\u1fb5\5\u0462\u0232"+
		"\2\u1fb1\u1fb3\5\u046c\u0237\2\u1fb2\u1fb4\5\u046c\u0237\2\u1fb3\u1fb2"+
		"\3\2\2\2\u1fb3\u1fb4\3\2\2\2\u1fb4\u1fb6\3\2\2\2\u1fb5\u1fb1\3\2\2\2\u1fb5"+
		"\u1fb6\3\2\2\2\u1fb6\u1fbc\3\2\2\2\u1fb7\u1fb8\6\u0236\u00cd\2\u1fb8\u1fb9"+
		"\5\u046c\u0237\2\u1fb9\u1fba\5\u046c\u0237\2\u1fba\u1fbc\3\2\2\2\u1fbb"+
		"\u1fb0\3\2\2\2\u1fbb\u1fb7\3\2\2\2\u1fbc\u046b\3\2\2\2\u1fbd\u1fbe\7\u0197"+
		"\2\2\u1fbe\u1fbf\5\u0462\u0232\2\u1fbf\u046d\3\2\2\2\u1fc0\u1fc1\t\u0082"+
		"\2\2\u1fc1\u046f\3\2\2\2\u1fc2\u1fc3\t\u0083\2\2\u1fc3\u0471\3\2\2\2\u1fc4"+
		"\u1fc5\t\u0084\2\2\u1fc5\u0473\3\2\2\2\u1fc6\u1fcc\7\u017e\2\2\u1fc7\u1fc8"+
		"\6\u023b\u00ce\2\u1fc8\u1fcc\7\u01a7\2\2\u1fc9\u1fcc\7\u0180\2\2\u1fca"+
		"\u1fcc\7\u017f\2\2\u1fcb\u1fc6\3\2\2\2\u1fcb\u1fc7\3\2\2\2\u1fcb\u1fc9"+
		"\3\2\2\2\u1fcb\u1fca\3\2\2\2\u1fcc\u0475\3\2\2\2\u1fcd\u1fd7\5\u0482\u0242"+
		"\2\u1fce\u1fd7\5\u0488\u0245\2\u1fcf\u1fd7\5\u048e\u0248\2\u1fd0\u1fd7"+
		"\5\u048c\u0247\2\u1fd1\u1fd7\5\u048a\u0246\2\u1fd2\u1fd4\7\u0305\2\2\u1fd3"+
		"\u1fd2\3\2\2\2\u1fd3\u1fd4\3\2\2\2\u1fd4\u1fd5\3\2\2\2\u1fd5\u1fd7\t\u0085"+
		"\2\2\u1fd6\u1fcd\3\2\2\2\u1fd6\u1fce\3\2\2\2\u1fd6\u1fcf\3\2\2\2\u1fd6"+
		"\u1fd0\3\2\2\2\u1fd6\u1fd1\3\2\2\2\u1fd6\u1fd3\3\2\2\2\u1fd7\u0477\3\2"+
		"\2\2\u1fd8\u1fde\5\u0476\u023c\2\u1fd9\u1fda\7\u0189\2\2\u1fda\u1fde\5"+
		"\u046e\u0238\2\u1fdb\u1fdc\7\u018a\2\2\u1fdc\u1fde\5\u046e\u0238\2\u1fdd"+
		"\u1fd8\3\2\2\2\u1fdd\u1fd9\3\2\2\2\u1fdd\u1fdb\3\2\2\2\u1fde\u0479\3\2"+
		"\2\2\u1fdf\u1fe0\7\u019b\2\2\u1fe0\u1fe5\5\u047e\u0240\2\u1fe1\u1fe2\7"+
		"\u0198\2\2\u1fe2\u1fe4\5\u047e\u0240\2\u1fe3\u1fe1\3\2\2\2\u1fe4\u1fe7"+
		"\3\2\2\2\u1fe5\u1fe3\3\2\2\2\u1fe5\u1fe6\3\2\2\2\u1fe6\u1fe8\3\2\2\2\u1fe7"+
		"\u1fe5\3\2\2\2\u1fe8\u1fe9\7\u019c\2\2\u1fe9\u047b\3\2\2\2\u1fea\u1fee"+
		"\7\u030a\2\2\u1feb\u1fec\6\u023f\u00cf\2\u1fec\u1fee\7\u0309\2\2\u1fed"+
		"\u1fea\3\2\2\2\u1fed\u1feb\3\2\2\2\u1fee\u047d\3\2\2\2\u1fef\u1ff3\5\u047c"+
		"\u023f\2\u1ff0\u1ff3\7\u01a7\2\2\u1ff1\u1ff3\7\u01a8\2\2\u1ff2\u1fef\3"+
		"\2\2\2\u1ff2\u1ff0\3\2\2\2\u1ff2\u1ff1\3\2\2\2\u1ff3\u047f\3\2\2\2\u1ff4"+
		"\u1ff8\5\u047c\u023f\2\u1ff5\u1ff6\6\u0241\u00d0\2\u1ff6\u1ff8\7\u01a7"+
		"\2\2\u1ff7\u1ff4\3\2\2\2\u1ff7\u1ff5\3\2\2\2\u1ff8\u0481\3\2\2\2\u1ff9"+
		"\u1ffb\7\u0305\2\2\u1ffa\u1ff9\3\2\2\2\u1ffa\u1ffb\3\2\2\2\u1ffb\u1ffc"+
		"\3\2\2\2\u1ffc\u1fff\5\u047c\u023f\2\u1ffd\u1fff\7\u0307\2\2\u1ffe\u1ffa"+
		"\3\2\2\2\u1ffe\u1ffd\3\2\2\2\u1fff\u2003\3\2\2\2\u2000\u2002\5\u047c\u023f"+
		"\2\u2001\u2000\3\2\2\2\u2002\u2005\3\2\2\2\u2003\u2001\3\2\2\2\u2003\u2004"+
		"\3\2\2\2\u2004\u0483\3\2\2\2\u2005\u2003\3\2\2\2\u2006\u2007\5\u047c\u023f"+
		"\2\u2007\u0485\3\2\2\2\u2008\u200d\5\u047c\u023f\2\u2009\u200a\7\u0198"+
		"\2\2\u200a\u200c\5\u047c\u023f\2\u200b\u2009\3\2\2\2\u200c\u200f\3\2\2"+
		"\2\u200d\u200b\3\2\2\2\u200d\u200e\3\2\2\2\u200e\u0487\3\2\2\2\u200f\u200d"+
		"\3\2\2\2\u2010\u2011\t\u0084\2\2\u2011\u0489\3\2\2\2\u2012\u2013\t\u0086"+
		"\2\2\u2013\u048b\3\2\2\2\u2014\u2015\t\u0087\2\2\u2015\u048d\3\2\2\2\u2016"+
		"\u2017\7r\2\2\u2017\u201d\7\u030a\2\2\u2018\u2019\7\u0162\2\2\u2019\u201d"+
		"\7\u030a\2\2\u201a\u201b\7\u015f\2\2\u201b\u201d\7\u030a\2\2\u201c\u2016"+
		"\3\2\2\2\u201c\u2018\3\2\2\2\u201c\u201a\3\2\2\2\u201d\u048f\3\2\2\2\u201e"+
		"\u2021\5\u0394\u01cb\2\u201f\u2021\5\u0494\u024b\2\u2020\u201e\3\2\2\2"+
		"\u2020\u201f\3\2\2\2\u2021\u0491\3\2\2\2\u2022\u2023\5\u0494\u024b\2\u2023"+
		"\u0493\3\2\2\2\u2024\u2025\7\u019b\2\2\u2025\u2026\7\u017e\2\2\u2026\u2027"+
		"\7\u0198\2\2\u2027\u2028\7\u017e\2\2\u2028\u2029\7\u019c\2\2\u2029\u0495"+
		"\3\2\2\2\u202a\u202d\7\u030a\2\2\u202b\u202d\5\u0462\u0232\2\u202c\u202a"+
		"\3\2\2\2\u202c\u202b\3\2\2\2\u202d\u0497\3\2\2\2\u202e\u2031\5\u0460\u0231"+
		"\2\u202f\u2031\5\u04b6\u025c\2\u2030\u202e\3\2\2\2\u2030\u202f\3\2\2\2"+
		"\u2031\u0499\3\2\2\2\u2032\u2035\5\u0454\u022b\2\u2033\u2035\5\u047c\u023f"+
		"\2\u2034\u2032\3\2\2\2\u2034\u2033\3\2\2\2\u2035\u049b\3\2\2\2\u2036\u2039"+
		"\5\u0474\u023b\2\u2037\u2039\5\u0460\u0231\2\u2038\u2036\3\2\2\2\u2038"+
		"\u2037\3\2\2\2\u2039\u049d\3\2\2\2\u203a\u203b\7\u019b\2\2\u203b\u203c"+
		"\7\u019c\2\2\u203c\u049f\3\2\2\2\u203d\u203e\t\u0088\2\2\u203e\u04a1\3"+
		"\2\2\2\u203f\u2040\t\u0089\2\2\u2040\u04a3\3\2\2\2\u2041\u2042\7\u009d"+
		"\2\2\u2042\u2048\7\u0197\2\2\u2043\u2044\7\u00b6\2\2\u2044\u2048\7\u0197"+
		"\2\2\u2045\u2046\7\u0136\2\2\u2046\u2048\7\u0197\2\2\u2047\u2041\3\2\2"+
		"\2\u2047\u2043\3\2\2\2\u2047\u2045\3\2\2\2\u2048\u04a5\3\2\2\2\u2049\u204a"+
		"\7\u02b2\2\2\u204a\u2054\7\u0197\2\2\u204b\u204c\7\u02c1\2\2\u204c\u2054"+
		"\7\u0197\2\2\u204d\u204e\7\u009d\2\2\u204e\u2054\7\u0197\2\2\u204f\u2050"+
		"\7\u00b6\2\2\u2050\u2054\7\u0197\2\2\u2051\u2052\7\u0136\2\2\u2052\u2054"+
		"\7\u0197\2\2\u2053\u2049\3\2\2\2\u2053\u204b\3\2\2\2\u2053\u204d\3\2\2"+
		"\2\u2053\u204f\3\2\2\2\u2053\u2051\3\2\2\2\u2054\u04a7\3\2\2\2\u2055\u205d"+
		"\6\u0255\u00d1\2\u2056\u205e\5\u04ae\u0258\2\u2057\u205e\5\u04ba\u025e"+
		"\2\u2058\u205e\7\23\2\2\u2059\u205a\6\u0255\u00d2\2\u205a\u205e\7:\2\2"+
		"\u205b\u205c\6\u0255\u00d3\2\u205c\u205e\7\u02ea\2\2\u205d\u2056\3\2\2"+
		"\2\u205d\u2057\3\2\2\2\u205d\u2058\3\2\2\2\u205d\u2059\3\2\2\2\u205d\u205b"+
		"\3\2\2\2\u205e\u2067\3\2\2\2\u205f\u2065\5\u04b2\u025a\2\u2060\u2065\5"+
		"\u04aa\u0256\2\u2061\u2065\5\u04ac\u0257\2\u2062\u2065\5\u04b0\u0259\2"+
		"\u2063\u2065\5\u04b8\u025d\2\u2064\u205f\3\2\2\2\u2064\u2060\3\2\2\2\u2064"+
		"\u2061\3\2\2\2\u2064\u2062\3\2\2\2\u2064\u2063\3\2\2\2\u2065\u2067\3\2"+
		"\2\2\u2066\u2055\3\2\2\2\u2066\u2064\3\2\2\2\u2067\u04a9\3\2\2\2\u2068"+
		"\u2069\t\u008a\2\2\u2069\u04ab\3\2\2\2\u206a\u206b\t\u008b\2\2\u206b\u04ad"+
		"\3\2\2\2\u206c\u2077\6\u0258\u00d4\2\u206d\u2078\5\u04bc\u025f\2\u206e"+
		"\u2078\7\u0087\2\2\u206f\u2078\7\u0093\2\2\u2070\u2078\7\u00f1\2\2\u2071"+
		"\u2078\7\u0107\2\2\u2072\u2078\7\u010b\2\2\u2073\u2078\7\u011a\2\2\u2074"+
		"\u2078\7\u011d\2\2\u2075\u2078\7\u02e5\2\2\u2076\u2078\7\u0151\2\2\u2077"+
		"\u206d\3\2\2\2\u2077\u206e\3\2\2\2\u2077\u206f\3\2\2\2\u2077\u2070\3\2"+
		"\2\2\u2077\u2071\3\2\2\2\u2077\u2072\3\2\2\2\u2077\u2073\3\2\2\2\u2077"+
		"\u2074\3\2\2\2\u2077\u2075\3\2\2\2\u2077\u2076\3\2\2\2\u2078\u207f\3\2"+
		"\2\2\u2079\u207d\5\u04b2\u025a\2\u207a\u207d\5\u04b0\u0259\2\u207b\u207d"+
		"\5\u04b8\u025d\2\u207c\u2079\3\2\2\2\u207c\u207a\3\2\2\2\u207c\u207b\3"+
		"\2\2\2\u207d\u207f\3\2\2\2\u207e\u206c\3\2\2\2\u207e\u207c\3\2\2\2\u207f"+
		"\u04af\3\2\2\2\u2080\u2081\t\u008c\2\2\u2081\u04b1\3\2\2\2\u2082\u2083"+
		"\t\u008d\2\2\u2083\u04b3\3\2\2\2\u2084\u2087\6\u025b\u00d5\2\u2085\u2088"+
		"\5\u04bc\u025f\2\u2086\u2088\5\u04ba\u025e\2\u2087\u2085\3\2\2\2\u2087"+
		"\u2086\3\2\2\2\u2088\u208f\3\2\2\2\u2089\u208d\5\u04b2\u025a\2\u208a\u208d"+
		"\5\u04ac\u0257\2\u208b\u208d\5\u04b8\u025d\2\u208c\u2089\3\2\2\2\u208c"+
		"\u208a\3\2\2\2\u208c\u208b\3\2\2\2\u208d\u208f\3\2\2\2\u208e\u2084\3\2"+
		"\2\2\u208e\u208c\3\2\2\2\u208f\u04b5\3\2\2\2\u2090\u2095\5\u04b2\u025a"+
		"\2\u2091\u2095\5\u04aa\u0256\2\u2092\u2095\5\u04ac\u0257\2\u2093\u2095"+
		"\5\u04b0\u0259\2\u2094\u2090\3\2\2\2\u2094\u2091\3\2\2\2\u2094\u2092\3"+
		"\2\2\2\u2094\u2093\3\2\2\2\u2095\u04b7\3\2\2\2\u2096\u2097\t\u0089\2\2"+
		"\u2097\u04b9\3\2\2\2\u2098\u209e\t\u008e\2\2\u2099\u209a\6\u025e\u00d6"+
		"\2\u209a\u209e\7:\2\2\u209b\u209c\6\u025e\u00d7\2\u209c\u209e\7\u00a4"+
		"\2\2\u209d\u2098\3\2\2\2\u209d\u2099\3\2\2\2\u209d\u209b\3\2\2\2\u209e"+
		"\u04bb\3\2\2\2\u209f\u20a9\t\u008f\2\2\u20a0\u20a1\6\u025f\u00d8\2\u20a1"+
		"\u20a9\7:\2\2\u20a2\u20a3\6\u025f\u00d9\2\u20a3\u20a9\t\u0090\2\2\u20a4"+
		"\u20a5\6\u025f\u00da\2\u20a5\u20a9\t\u0091\2\2\u20a6\u20a7\6\u025f\u00db"+
		"\2\u20a7\u20a9\7\u02b4\2\2\u20a8\u209f\3\2\2\2\u20a8\u20a0\3\2\2\2\u20a8"+
		"\u20a2\3\2\2\2\u20a8\u20a4\3\2\2\2\u20a8\u20a6\3\2\2\2\u20a9\u04bd\3\2"+
		"\2\2\u0461\u04c1\u04c8\u04cb\u04ef\u04f7\u04fc\u050c\u0513\u051a\u051d"+
		"\u0524\u0529\u052c\u0531\u0537\u0539\u053d\u0541\u054a\u054e\u0553\u0559"+
		"\u0560\u0564\u0569\u056e\u0575\u0578\u057e\u0581\u0588\u0592\u0597\u059c"+
		"\u05a4\u05aa\u05ae\u05b3\u05bc\u05c2\u05c8\u05ce\u05d8\u05de\u05e7\u05f5"+
		"\u05f9\u05ff\u0603\u0609\u060d\u0612\u0615\u061b\u0621\u0627\u062b\u0630"+
		"\u0634\u0638\u0640\u0642\u0649\u0651\u0659\u065d\u0674\u0684\u0687\u0690"+
		"\u0695\u069b\u06a0\u06a4\u06a9\u06ad\u06b1\u06b5\u06b9\u06bd\u06bf\u06ca"+
		"\u06cf\u06d5\u06dd\u06e6\u06eb\u06ee\u06f3\u06fa\u0702\u0706\u070b\u0712"+
		"\u0717\u071c\u0724\u0728\u072d\u0730\u0733\u0736\u073d\u0744\u0748\u0760"+
		"\u0764\u076a\u0771\u0774\u0778\u077f\u0782\u0785\u0788\u0791\u0798\u079d"+
		"\u07a0\u07a3\u07a9\u07af\u07b2\u07b7\u07c1\u07c4\u07ca\u07d0\u07da\u07dd"+
		"\u07e5\u07eb\u07f6\u07f9\u07fe\u0811\u0814\u0817\u081d\u0820\u0822\u0828"+
		"\u0832\u083c\u083f\u0842\u0847\u084d\u085a\u085e\u0863\u086c\u087d\u0890"+
		"\u0899\u089c\u08a4\u08a9\u08ad\u08b4\u08b9\u08c8\u08cc\u08d2\u08d8\u08de"+
		"\u08e4\u08ea\u08ef\u08f3\u08fb\u0901\u0907\u090c\u090f\u0912\u091b\u091e"+
		"\u0929\u0935\u093e\u0942\u094b\u094e\u0954\u0956\u095a\u0961\u096e\u0975"+
		"\u097b\u097e\u098f\u09a3\u09a7\u09ad\u09b3\u09b9\u09be\u09c5\u09cc\u09d1"+
		"\u09d4\u09d8\u09dc\u09e1\u09e5\u09e9\u09ef\u09f4\u09f7\u09fb\u0a01\u0a05"+
		"\u0a09\u0a11\u0a19\u0a22\u0a2b\u0a38\u0a3b\u0a3f\u0a45\u0a4d\u0a52\u0a55"+
		"\u0a58\u0a5b\u0a5e\u0a60\u0a66\u0a68\u0a77\u0a7d\u0a84\u0a87\u0a89\u0a8b"+
		"\u0a95\u0a97\u0a9b\u0a9e\u0aa1\u0aa5\u0aaa\u0ab0\u0ab3\u0ab6\u0abc\u0abf"+
		"\u0ac8\u0ad1\u0ad5\u0ad9\u0adf\u0ae4\u0ae9\u0aee\u0af2\u0af8\u0b03\u0b06"+
		"\u0b0b\u0b11\u0b14\u0b17\u0b1a\u0b1d\u0b2b\u0b2e\u0b32\u0b36\u0b3c\u0b41"+
		"\u0b45\u0b4a\u0b4d\u0b51\u0b57\u0b5c\u0b65\u0b69\u0b6d\u0b70\u0b75\u0b78"+
		"\u0b7a\u0b7e\u0b81\u0b87\u0b89\u0b90\u0b94\u0b96\u0b9b\u0b9f\u0ba3\u0ba9"+
		"\u0bb1\u0bb6\u0bb9\u0bbc\u0bbf\u0bc2\u0bc6\u0bd5\u0bd9\u0bdf\u0be2\u0be5"+
		"\u0beb\u0bf0\u0bf4\u0bf7\u0bff\u0c01\u0c0e\u0c1a\u0c1f\u0c22\u0c25\u0c2a"+
		"\u0c30\u0c40\u0c54\u0c5d\u0c61\u0c68\u0c6d\u0c76\u0c7d\u0c88\u0c8f\u0c9a"+
		"\u0ca1\u0ca5\u0cab\u0cb0\u0cb5\u0cb9\u0cbf\u0cc5\u0cc7\u0cca\u0cce\u0cd8"+
		"\u0cdd\u0ce2\u0ce9\u0cf2\u0cfa\u0cff\u0d03\u0d09\u0d0c\u0d0f\u0d13\u0d17"+
		"\u0d21\u0d25\u0d28\u0d2b\u0d30\u0d36\u0d3a\u0d40\u0d43\u0d45\u0d4a\u0d56"+
		"\u0d5f\u0d6c\u0d6f\u0d74\u0d7b\u0d7f\u0d83\u0d85\u0d93\u0d9a\u0da3\u0da9"+
		"\u0db2\u0db6\u0dba\u0dc4\u0dc6\u0dce\u0dd5\u0dda\u0dde\u0de2\u0de5\u0deb"+
		"\u0dee\u0df1\u0df7\u0dfe\u0e03\u0e07\u0e0a\u0e0d\u0e10\u0e12\u0e16\u0e1e"+
		"\u0e24\u0e28\u0e2d\u0e30\u0e33\u0e36\u0e38\u0e3d\u0e46\u0e53\u0e55\u0e59"+
		"\u0e5f\u0e62\u0e65\u0e6b\u0e72\u0e74\u0e7c\u0e82\u0e87\u0e8a\u0e91\u0e93"+
		"\u0e9c\u0ea5\u0eae\u0eb6\u0eba\u0ec1\u0ec4\u0ec6\u0ece\u0ed4\u0ede\u0ee5"+
		"\u0f3d\u0f41\u0f45\u0f53\u0f5b\u0f5e\u0f6a\u0f6f\u0f75\u0f7c\u0f83\u0f8a"+
		"\u0f91\u0f98\u0f9f\u0fa2\u0fa9\u0fb1\u0fb9\u0fc3\u0fc9\u0fcd\u0fd1\u0fd6"+
		"\u0fd9\u0fdb\u0fe4\u0fea\u0ff1\u0ff6\u0ffb\u1000\u1003\u100a\u1017\u101d"+
		"\u1023\u102a\u1032\u1038\u1044\u1046\u104c\u1050\u1052\u1056\u1063\u1069"+
		"\u1071\u107c\u1080\u108d\u1094\u109a\u109c\u10a6\u10ae\u10b1\u10b6\u10ba"+
		"\u10c0\u10c3\u10c8\u10d3\u10d5\u10e1\u10e6\u10ee\u10f4\u10f6\u10f8\u10fe"+
		"\u110a\u110f\u1111\u1115\u111b\u111e\u1121\u112b\u112d\u1133\u113a\u1140"+
		"\u114a\u114e\u1153\u1164\u1174\u1179\u1181\u1189\u118e\u1194\u1197\u1199"+
		"\u11a2\u11a8\u11ae\u11b0\u11b4\u11bf\u11c9\u11ce\u11d3\u11d8\u11e0\u11e4"+
		"\u11e9\u11f2\u11fe\u120c\u1215\u1217\u121e\u1225\u1229\u122f\u1237\u123e"+
		"\u1242\u1248\u124f\u1252\u125b\u1261\u1266\u127d\u1280\u1290\u1295\u1298"+
		"\u129c\u129f\u12ad\u12b3\u12b8\u12bb\u12bd\u12c1\u12c6\u12c8\u12d4\u12da"+
		"\u12f0\u12f4\u12f6\u12fe\u1302\u130b\u1315\u131c\u131f\u1323\u1326\u1329"+
		"\u132d\u1330\u1334\u1337\u133c\u133f\u1344\u1347\u134d\u1351\u1357\u135a"+
		"\u1363\u1365\u136b\u136f\u1372\u1375\u1379\u137f\u1382\u1385\u138f\u1393"+
		"\u139c\u139f\u13a4\u13a7\u13aa\u13ae\u13b1\u13b6\u13ba\u13c2\u13cf\u13e1"+
		"\u13e6\u13eb\u13f3\u13f9\u13fb\u13ff\u1402\u1410\u141a\u141e\u1426\u1429"+
		"\u142d\u1437\u143b\u1442\u1447\u144f\u1454\u145a\u1461\u1466\u146c\u1473"+
		"\u147d\u147f\u1487\u148c\u1490\u1493\u149a\u149f\u14a3\u14ae\u14b6\u14ba"+
		"\u14bd\u14c0\u14c4\u14c8\u14cd\u14d3\u14d7\u14e2\u14e5\u14e8\u14eb\u14f3"+
		"\u14f7\u14fc\u1504\u150c\u1512\u151f\u1529\u152f\u153d\u1540\u1544\u154f"+
		"\u1551\u155a\u1566\u1568\u156f\u1575\u157b\u1583\u158e\u1592\u15af\u15b1"+
		"\u15b8\u15c9\u15d0\u15de\u15ea\u15f0\u15f7\u15fa\u161c\u1624\u1626\u1632"+
		"\u1637\u163d\u1645\u164c\u1652\u1657\u165d\u1662\u1667\u166d\u1672\u1678"+
		"\u1680\u1688\u1690\u1698\u169d\u16a3\u16a8\u16ac\u16b0\u16b5\u16b7\u16ca"+
		"\u16ce\u16d5\u16e1\u16e4\u16e8\u16ed\u16f2\u16f6\u1700\u1709\u170b\u170e"+
		"\u1717\u171e\u172b\u1730\u1737\u173d\u1757\u1776\u178a\u1790\u1794\u17af"+
		"\u17bb\u17c8\u17cc\u17d0\u17ec\u1824\u182e\u1832\u183e\u1843\u1850\u1864"+
		"\u1868\u1879\u187c\u1881\u1884\u188d\u1891\u1897\u189d\u18a1\u18ac\u18b2"+
		"\u18b4\u18bb\u18c2\u18c6\u18cd\u18d2\u18d7\u18da\u18df\u18e3\u18e7\u18ec"+
		"\u18f1\u18f3\u18f7\u1904\u1908\u190b\u190f\u1913\u1917\u191c\u1920\u1924"+
		"\u192d\u192f\u1936\u193c\u1944\u1959\u195e\u1965\u197c\u198c\u1996\u199a"+
		"\u19a1\u19a4\u19af\u19b8\u19bb\u19c2\u19c7\u19e1\u19e7\u19ed\u19f1\u19fb"+
		"\u19ff\u1a0c\u1a18\u1a2a\u1a32\u1a3c\u1a3f\u1a44\u1a48\u1a4f\u1a54\u1a5b"+
		"\u1a63\u1a66\u1a6b\u1a6e\u1a76\u1a79\u1a87\u1a8a\u1a97\u1a9b\u1a9d\u1aa2"+
		"\u1aa7\u1aad\u1ab3\u1ab9\u1abe\u1ac1\u1ac7\u1acc\u1acf\u1ad5\u1ad9\u1adf"+
		"\u1ae1\u1ae4\u1aea\u1af0\u1af8\u1afa\u1afc\u1b00\u1b06\u1b0b\u1b0f\u1b14"+
		"\u1b1a\u1b21\u1b24\u1b26\u1b29\u1b33\u1b37\u1b3d\u1b44\u1b49\u1b57\u1b5c"+
		"\u1b64\u1b69\u1b6d\u1b70\u1b75\u1b79\u1b81\u1b89\u1b8b\u1b92\u1b9a\u1ba1"+
		"\u1ba4\u1bac\u1bb4\u1bb6\u1bbc\u1bc2\u1bc6\u1bcd\u1bd8\u1be1\u1be4\u1be9"+
		"\u1beb\u1bee\u1bf1\u1bf5\u1bf8\u1bfc\u1c01\u1c04\u1c08\u1c0b\u1c0f\u1c14"+
		"\u1c18\u1c24\u1c28\u1c2e\u1c31\u1c36\u1c3a\u1c3e\u1c43\u1c4c\u1c4f\u1c53"+
		"\u1c57\u1c5a\u1c5e\u1c62\u1c67\u1c6c\u1c72\u1c77\u1c7c\u1c7e\u1c83\u1c8a"+
		"\u1c92\u1c98\u1c9a\u1c9e\u1ca2\u1ca6\u1caa\u1cb8\u1cbf\u1cc3\u1cc8\u1cce"+
		"\u1cd2\u1cd8\u1cdc\u1ce0\u1ce5\u1cea\u1cef\u1cf4\u1cfa\u1d00\u1d05\u1d0a"+
		"\u1d0f\u1d14\u1d19\u1d1e\u1d23\u1d2d\u1d33\u1d39\u1d3f\u1d42\u1d49\u1d4e"+
		"\u1d51\u1d55\u1d58\u1d5c\u1d61\u1d65\u1d6a\u1d6e\u1d77\u1d7a\u1d7d\u1d80"+
		"\u1d84\u1d88\u1d8c\u1d9b\u1d9e\u1da0\u1da5\u1dae\u1db1\u1db5\u1dc2\u1dce"+
		"\u1dd3\u1dd8\u1de1\u1de6\u1def\u1df4\u1df8\u1dfc\u1e00\u1e05\u1e0a\u1e10"+
		"\u1e15\u1e18\u1e1f\u1e28\u1e2f\u1e3d\u1e49\u1e56\u1e5e\u1e65\u1e6e\u1e74"+
		"\u1e7c\u1e82\u1e8d\u1e95\u1e9d\u1ea5\u1eaf\u1eb4\u1eb9\u1ebb\u1ec1\u1ec7"+
		"\u1eca\u1ed1\u1ed3\u1ed5\u1ed8\u1eda\u1eeb\u1ef0\u1ef2\u1ef9\u1f06\u1f08"+
		"\u1f0e\u1f18\u1f21\u1f2c\u1f42\u1f46\u1f5e\u1f69\u1f6b\u1f6f\u1f76\u1f7e"+
		"\u1f85\u1f8b\u1f9a\u1f9e\u1fa5\u1fae\u1fb3\u1fb5\u1fbb\u1fcb\u1fd3\u1fd6"+
		"\u1fdd\u1fe5\u1fed\u1ff2\u1ff7\u1ffa\u1ffe\u2003\u200d\u201c\u2020\u202c"+
		"\u2030\u2034\u2038\u2047\u2053\u205d\u2064\u2066\u2077\u207c\u207e\u2087"+
		"\u208c\u208e\u2094\u209d\u20a8";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2,
			_serializedATNSegment3
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}