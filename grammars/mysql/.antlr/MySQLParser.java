// Generated from c:\git\modelDBA_ANTLR4\grammars\mysql\MySQLParser.g4 by ANTLR 4.7.1
/*
 * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License, version 2.0,
 * as published by the Free Software Foundation.
 *
 * This program is also distributed with certain software (including
 * but not limited to OpenSSL) that is licensed under separate terms, as
 * designated in a particular file or component or in included license
 * documentation. The authors of MySQL hereby grant you an additional
 * permission to link the program and your derivative works with the
 * separately licensed software that they have included with MySQL.
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
 * the GNU General Public License, version 2.0, for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 */

import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class MySQLParser extends MySQLBaseRecognizer {
	static { RuntimeMetaData.checkVersion("4.7.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		ACCOUNT_SYMBOL=1, ASCII_SYMBOL=2, ALWAYS_SYMBOL=3, BACKUP_SYMBOL=4, BEGIN_SYMBOL=5, 
		BYTE_SYMBOL=6, CACHE_SYMBOL=7, CHARSET_SYMBOL=8, CHECKSUM_SYMBOL=9, CLOSE_SYMBOL=10, 
		COMMENT_SYMBOL=11, COMMIT_SYMBOL=12, CONTAINS_SYMBOL=13, DEALLOCATE_SYMBOL=14, 
		DO_SYMBOL=15, END_SYMBOL=16, EXECUTE_SYMBOL=17, FLUSH_SYMBOL=18, FOLLOWS_SYMBOL=19, 
		FORMAT_SYMBOL=20, GROUP_REPLICATION_SYMBOL=21, HANDLER_SYMBOL=22, HELP_SYMBOL=23, 
		HOST_SYMBOL=24, INSTALL_SYMBOL=25, LANGUAGE_SYMBOL=26, NO_SYMBOL=27, OPEN_SYMBOL=28, 
		OPTIONS_SYMBOL=29, OWNER_SYMBOL=30, PARSER_SYMBOL=31, PARTITION_SYMBOL=32, 
		PORT_SYMBOL=33, PRECEDES_SYMBOL=34, PREPARE_SYMBOL=35, REMOVE_SYMBOL=36, 
		REPAIR_SYMBOL=37, RESET_SYMBOL=38, RESTORE_SYMBOL=39, ROLLBACK_SYMBOL=40, 
		SAVEPOINT_SYMBOL=41, SECURITY_SYMBOL=42, SERVER_SYMBOL=43, SIGNED_SYMBOL=44, 
		SLAVE_SYMBOL=45, SOCKET_SYMBOL=46, SONAME_SYMBOL=47, START_SYMBOL=48, 
		STOP_SYMBOL=49, TRUNCATE_SYMBOL=50, UNICODE_SYMBOL=51, UNINSTALL_SYMBOL=52, 
		UPGRADE_SYMBOL=53, WRAPPER_SYMBOL=54, XA_SYMBOL=55, SHUTDOWN_SYMBOL=56, 
		ACTION_SYMBOL=57, ADDDATE_SYMBOL=58, AFTER_SYMBOL=59, AGAINST_SYMBOL=60, 
		AGGREGATE_SYMBOL=61, ALGORITHM_SYMBOL=62, ANALYZE_SYMBOL=63, ANY_SYMBOL=64, 
		AT_SYMBOL=65, AUTHORS_SYMBOL=66, AUTO_INCREMENT_SYMBOL=67, AUTOEXTEND_SIZE_SYMBOL=68, 
		AVG_ROW_LENGTH_SYMBOL=69, AVG_SYMBOL=70, BINLOG_SYMBOL=71, BIT_SYMBOL=72, 
		BLOCK_SYMBOL=73, BOOL_SYMBOL=74, BOOLEAN_SYMBOL=75, BTREE_SYMBOL=76, CASCADED_SYMBOL=77, 
		CATALOG_NAME_SYMBOL=78, CHAIN_SYMBOL=79, CHANGED_SYMBOL=80, CHANNEL_SYMBOL=81, 
		CIPHER_SYMBOL=82, CLIENT_SYMBOL=83, CLASS_ORIGIN_SYMBOL=84, COALESCE_SYMBOL=85, 
		CODE_SYMBOL=86, COLLATION_SYMBOL=87, COLUMN_NAME_SYMBOL=88, COLUMN_FORMAT_SYMBOL=89, 
		COLUMNS_SYMBOL=90, COMMITTED_SYMBOL=91, COMPACT_SYMBOL=92, COMPLETION_SYMBOL=93, 
		COMPRESSED_SYMBOL=94, COMPRESSION_SYMBOL=95, ENCRYPTION_SYMBOL=96, CONCURRENT_SYMBOL=97, 
		CONNECTION_SYMBOL=98, CONSISTENT_SYMBOL=99, CONSTRAINT_CATALOG_SYMBOL=100, 
		CONSTRAINT_SCHEMA_SYMBOL=101, CONSTRAINT_NAME_SYMBOL=102, CONTEXT_SYMBOL=103, 
		CONTRIBUTORS_SYMBOL=104, CPU_SYMBOL=105, CUBE_SYMBOL=106, CURRENT_SYMBOL=107, 
		CURSOR_NAME_SYMBOL=108, DATA_SYMBOL=109, DATAFILE_SYMBOL=110, DATETIME_SYMBOL=111, 
		DATE_SYMBOL=112, DAY_SYMBOL=113, DEFAULT_AUTH_SYMBOL=114, DEFINER_SYMBOL=115, 
		DELAY_KEY_WRITE_SYMBOL=116, DES_KEY_FILE_SYMBOL=117, DIAGNOSTICS_SYMBOL=118, 
		DIRECTORY_SYMBOL=119, DISABLE_SYMBOL=120, DISCARD_SYMBOL=121, DISK_SYMBOL=122, 
		DUMPFILE_SYMBOL=123, DUPLICATE_SYMBOL=124, DYNAMIC_SYMBOL=125, ENDS_SYMBOL=126, 
		ENUM_SYMBOL=127, ENGINE_SYMBOL=128, ENGINES_SYMBOL=129, ERROR_SYMBOL=130, 
		ERRORS_SYMBOL=131, ESCAPE_SYMBOL=132, EVENT_SYMBOL=133, EVENTS_SYMBOL=134, 
		EVERY_SYMBOL=135, EXPANSION_SYMBOL=136, EXPORT_SYMBOL=137, EXTENDED_SYMBOL=138, 
		EXTENT_SIZE_SYMBOL=139, FAULTS_SYMBOL=140, FAST_SYMBOL=141, FOUND_SYMBOL=142, 
		ENABLE_SYMBOL=143, FULL_SYMBOL=144, FILE_SYMBOL=145, FILE_BLOCK_SIZE_SYMBOL=146, 
		FILTER_SYMBOL=147, FIRST_SYMBOL=148, FIXED_SYMBOL=149, GENERAL_SYMBOL=150, 
		GEOMETRY_SYMBOL=151, GEOMETRYCOLLECTION_SYMBOL=152, GET_FORMAT_SYMBOL=153, 
		GRANTS_SYMBOL=154, GLOBAL_SYMBOL=155, HASH_SYMBOL=156, HOSTS_SYMBOL=157, 
		HOUR_SYMBOL=158, IDENTIFIED_SYMBOL=159, IGNORE_SERVER_IDS_SYMBOL=160, 
		INVOKER_SYMBOL=161, IMPORT_SYMBOL=162, INDEXES_SYMBOL=163, INITIAL_SIZE_SYMBOL=164, 
		INSTANCE_SYMBOL=165, INNODB_SYMBOL=166, IO_SYMBOL=167, IPC_SYMBOL=168, 
		ISOLATION_SYMBOL=169, ISSUER_SYMBOL=170, INSERT_METHOD_SYMBOL=171, JSON_SYMBOL=172, 
		KEY_BLOCK_SIZE_SYMBOL=173, LAST_SYMBOL=174, LEAVES_SYMBOL=175, LESS_SYMBOL=176, 
		LEVEL_SYMBOL=177, LINESTRING_SYMBOL=178, LIST_SYMBOL=179, LOCAL_SYMBOL=180, 
		LOCKS_SYMBOL=181, LOGFILE_SYMBOL=182, LOGS_SYMBOL=183, MAX_ROWS_SYMBOL=184, 
		MASTER_SYMBOL=185, MASTER_HEARTBEAT_PERIOD_SYMBOL=186, MASTER_HOST_SYMBOL=187, 
		MASTER_PORT_SYMBOL=188, MASTER_LOG_FILE_SYMBOL=189, MASTER_LOG_POS_SYMBOL=190, 
		MASTER_USER_SYMBOL=191, MASTER_PASSWORD_SYMBOL=192, MASTER_SERVER_ID_SYMBOL=193, 
		MASTER_CONNECT_RETRY_SYMBOL=194, MASTER_RETRY_COUNT_SYMBOL=195, MASTER_DELAY_SYMBOL=196, 
		MASTER_SSL_SYMBOL=197, MASTER_SSL_CA_SYMBOL=198, MASTER_SSL_CAPATH_SYMBOL=199, 
		MASTER_TLS_VERSION_SYMBOL=200, MASTER_SSL_CERT_SYMBOL=201, MASTER_SSL_CIPHER_SYMBOL=202, 
		MASTER_SSL_CRL_SYMBOL=203, MASTER_SSL_CRLPATH_SYMBOL=204, MASTER_SSL_KEY_SYMBOL=205, 
		MASTER_AUTO_POSITION_SYMBOL=206, MAX_CONNECTIONS_PER_HOUR_SYMBOL=207, 
		MAX_QUERIES_PER_HOUR_SYMBOL=208, MAX_STATEMENT_TIME_SYMBOL=209, MAX_SIZE_SYMBOL=210, 
		MAX_UPDATES_PER_HOUR_SYMBOL=211, MAX_USER_CONNECTIONS_SYMBOL=212, MEDIUM_SYMBOL=213, 
		MEMORY_SYMBOL=214, MERGE_SYMBOL=215, MESSAGE_TEXT_SYMBOL=216, MICROSECOND_SYMBOL=217, 
		MIGRATE_SYMBOL=218, MINUTE_SYMBOL=219, MIN_ROWS_SYMBOL=220, MODIFY_SYMBOL=221, 
		MODE_SYMBOL=222, MONTH_SYMBOL=223, MULTILINESTRING_SYMBOL=224, MULTIPOINT_SYMBOL=225, 
		MULTIPOLYGON_SYMBOL=226, MUTEX_SYMBOL=227, MYSQL_ERRNO_SYMBOL=228, NAME_SYMBOL=229, 
		NAMES_SYMBOL=230, NATIONAL_SYMBOL=231, NCHAR_SYMBOL=232, NDBCLUSTER_SYMBOL=233, 
		NEVER_SYMBOL=234, NEXT_SYMBOL=235, NEW_SYMBOL=236, NO_WAIT_SYMBOL=237, 
		NODEGROUP_SYMBOL=238, NONE_SYMBOL=239, NUMBER_SYMBOL=240, NVARCHAR_SYMBOL=241, 
		OFFSET_SYMBOL=242, OLD_PASSWORD_SYMBOL=243, ONE_SHOT_SYMBOL=244, ONE_SYMBOL=245, 
		PACK_KEYS_SYMBOL=246, PAGE_SYMBOL=247, PARTIAL_SYMBOL=248, PARTITIONING_SYMBOL=249, 
		PARTITIONS_SYMBOL=250, PASSWORD_SYMBOL=251, PHASE_SYMBOL=252, PLUGIN_DIR_SYMBOL=253, 
		PLUGIN_SYMBOL=254, PLUGINS_SYMBOL=255, POINT_SYMBOL=256, POLYGON_SYMBOL=257, 
		PRESERVE_SYMBOL=258, PREV_SYMBOL=259, PRIVILEGES_SYMBOL=260, PROCESS_SYMBOL=261, 
		PROCESSLIST_SYMBOL=262, PROFILE_SYMBOL=263, PROFILES_SYMBOL=264, PROXY_SYMBOL=265, 
		QUARTER_SYMBOL=266, QUERY_SYMBOL=267, QUICK_SYMBOL=268, READ_ONLY_SYMBOL=269, 
		REBUILD_SYMBOL=270, RECOVER_SYMBOL=271, REDO_BUFFER_SIZE_SYMBOL=272, REDOFILE_SYMBOL=273, 
		REDUNDANT_SYMBOL=274, RELAY_SYMBOL=275, RELAYLOG_SYMBOL=276, RELAY_LOG_FILE_SYMBOL=277, 
		RELAY_LOG_POS_SYMBOL=278, RELAY_THREAD_SYMBOL=279, RELOAD_SYMBOL=280, 
		REORGANIZE_SYMBOL=281, REPEATABLE_SYMBOL=282, REPLICATION_SYMBOL=283, 
		REPLICATE_DO_DB_SYMBOL=284, REPLICATE_IGNORE_DB_SYMBOL=285, REPLICATE_DO_TABLE_SYMBOL=286, 
		REPLICATE_IGNORE_TABLE_SYMBOL=287, REPLICATE_WILD_DO_TABLE_SYMBOL=288, 
		REPLICATE_WILD_IGNORE_TABLE_SYMBOL=289, REPLICATE_REWRITE_DB_SYMBOL=290, 
		RESUME_SYMBOL=291, RETURNED_SQLSTATE_SYMBOL=292, RETURNS_SYMBOL=293, REVERSE_SYMBOL=294, 
		ROLLUP_SYMBOL=295, ROTATE_SYMBOL=296, ROUTINE_SYMBOL=297, ROWS_SYMBOL=298, 
		ROW_COUNT_SYMBOL=299, ROW_FORMAT_SYMBOL=300, ROW_SYMBOL=301, RTREE_SYMBOL=302, 
		SCHEDULE_SYMBOL=303, SCHEMA_NAME_SYMBOL=304, SECOND_SYMBOL=305, SERIAL_SYMBOL=306, 
		SERIALIZABLE_SYMBOL=307, SESSION_SYMBOL=308, SIMPLE_SYMBOL=309, SHARE_SYMBOL=310, 
		SLOW_SYMBOL=311, SNAPSHOT_SYMBOL=312, SOUNDS_SYMBOL=313, SOURCE_SYMBOL=314, 
		SQL_AFTER_GTIDS_SYMBOL=315, SQL_AFTER_MTS_GAPS_SYMBOL=316, SQL_BEFORE_GTIDS_SYMBOL=317, 
		SQL_CACHE_SYMBOL=318, SQL_BUFFER_RESULT_SYMBOL=319, SQL_NO_CACHE_SYMBOL=320, 
		SQL_THREAD_SYMBOL=321, STACKED_SYMBOL=322, STARTS_SYMBOL=323, STATS_AUTO_RECALC_SYMBOL=324, 
		STATS_PERSISTENT_SYMBOL=325, STATS_SAMPLE_PAGES_SYMBOL=326, STATUS_SYMBOL=327, 
		STORAGE_SYMBOL=328, STRING_SYMBOL=329, SUBCLASS_ORIGIN_SYMBOL=330, SUBDATE_SYMBOL=331, 
		SUBJECT_SYMBOL=332, SUBPARTITION_SYMBOL=333, SUBPARTITIONS_SYMBOL=334, 
		SUPER_SYMBOL=335, SUSPEND_SYMBOL=336, SWAPS_SYMBOL=337, SWITCHES_SYMBOL=338, 
		TABLE_NAME_SYMBOL=339, TABLES_SYMBOL=340, TABLE_CHECKSUM_SYMBOL=341, TABLESPACE_SYMBOL=342, 
		TEMPORARY_SYMBOL=343, TEMPTABLE_SYMBOL=344, TEXT_SYMBOL=345, THAN_SYMBOL=346, 
		TRANSACTION_SYMBOL=347, TRIGGERS_SYMBOL=348, TIMESTAMP_SYMBOL=349, TIMESTAMP_ADD_SYMBOL=350, 
		TIMESTAMP_DIFF_SYMBOL=351, TIME_SYMBOL=352, TYPES_SYMBOL=353, TYPE_SYMBOL=354, 
		UDF_RETURNS_SYMBOL=355, FUNCTION_SYMBOL=356, UNCOMMITTED_SYMBOL=357, UNDEFINED_SYMBOL=358, 
		UNDO_BUFFER_SIZE_SYMBOL=359, UNDOFILE_SYMBOL=360, UNKNOWN_SYMBOL=361, 
		UNTIL_SYMBOL=362, USER_RESOURCES_SYMBOL=363, USER_SYMBOL=364, USE_FRM_SYMBOL=365, 
		VARIABLES_SYMBOL=366, VIEW_SYMBOL=367, VALUE_SYMBOL=368, WARNINGS_SYMBOL=369, 
		WAIT_SYMBOL=370, WEEK_SYMBOL=371, WORK_SYMBOL=372, WEIGHT_STRING_SYMBOL=373, 
		X509_SYMBOL=374, XID_SYMBOL=375, XML_SYMBOL=376, YEAR_SYMBOL=377, NOT2_SYMBOL=378, 
		CONCAT_PIPES_SYMBOL=379, INT_NUMBER=380, LONG_NUMBER=381, ULONGLONG_NUMBER=382, 
		EQUAL_OPERATOR=383, ASSIGN_OPERATOR=384, NULL_SAFE_EQUAL_OPERATOR=385, 
		GREATER_OR_EQUAL_OPERATOR=386, GREATER_THAN_OPERATOR=387, LESS_OR_EQUAL_OPERATOR=388, 
		LESS_THAN_OPERATOR=389, NOT_EQUAL_OPERATOR=390, PLUS_OPERATOR=391, MINUS_OPERATOR=392, 
		MULT_OPERATOR=393, DIV_OPERATOR=394, MOD_OPERATOR=395, LOGICAL_NOT_OPERATOR=396, 
		BITWISE_NOT_OPERATOR=397, SHIFT_LEFT_OPERATOR=398, SHIFT_RIGHT_OPERATOR=399, 
		LOGICAL_AND_OPERATOR=400, BITWISE_AND_OPERATOR=401, BITWISE_XOR_OPERATOR=402, 
		LOGICAL_OR_OPERATOR=403, BITWISE_OR_OPERATOR=404, DOT_SYMBOL=405, COMMA_SYMBOL=406, 
		SEMICOLON_SYMBOL=407, COLON_SYMBOL=408, OPEN_PAR_SYMBOL=409, CLOSE_PAR_SYMBOL=410, 
		OPEN_CURLY_SYMBOL=411, CLOSE_CURLY_SYMBOL=412, UNDERLINE_SYMBOL=413, JSON_SEPARATOR_SYMBOL=414, 
		JSON_UNQUOTED_SEPARATOR_SYMBOL=415, AT_SIGN_SYMBOL=416, AT_TEXT_SUFFIX=417, 
		AT_AT_SIGN_SYMBOL=418, NULL2_SYMBOL=419, PARAM_MARKER=420, HEX_NUMBER=421, 
		BIN_NUMBER=422, DECIMAL_NUMBER=423, FLOAT_NUMBER=424, ACCESSIBLE_SYMBOL=425, 
		ADD_SYMBOL=426, ALL_SYMBOL=427, ALTER_SYMBOL=428, ANALYSE_SYMBOL=429, 
		AND_SYMBOL=430, AS_SYMBOL=431, ASC_SYMBOL=432, ASENSITIVE_SYMBOL=433, 
		BEFORE_SYMBOL=434, BETWEEN_SYMBOL=435, BIGINT_SYMBOL=436, BINARY_SYMBOL=437, 
		BIN_NUM_SYMBOL=438, BIT_AND_SYMBOL=439, BIT_OR_SYMBOL=440, BIT_XOR_SYMBOL=441, 
		BLOB_SYMBOL=442, BOTH_SYMBOL=443, BY_SYMBOL=444, CALL_SYMBOL=445, CASCADE_SYMBOL=446, 
		CASE_SYMBOL=447, CAST_SYMBOL=448, CHANGE_SYMBOL=449, CHAR_SYMBOL=450, 
		CHECK_SYMBOL=451, COLLATE_SYMBOL=452, COLUMN_SYMBOL=453, CONDITION_SYMBOL=454, 
		CONSTRAINT_SYMBOL=455, CONTINUE_SYMBOL=456, CONVERT_SYMBOL=457, COUNT_SYMBOL=458, 
		CREATE_SYMBOL=459, CROSS_SYMBOL=460, CURDATE_SYMBOL=461, CURRENT_DATE_SYMBOL=462, 
		CURRENT_TIME_SYMBOL=463, CURRENT_USER_SYMBOL=464, CURSOR_SYMBOL=465, CURTIME_SYMBOL=466, 
		DATABASE_SYMBOL=467, DATABASES_SYMBOL=468, DATE_ADD_SYMBOL=469, DATE_SUB_SYMBOL=470, 
		DAY_HOUR_SYMBOL=471, DAY_MICROSECOND_SYMBOL=472, DAY_MINUTE_SYMBOL=473, 
		DAY_SECOND_SYMBOL=474, DECIMAL_NUM_SYMBOL=475, DECIMAL_SYMBOL=476, DECLARE_SYMBOL=477, 
		DEFAULT_SYMBOL=478, DELAYED_SYMBOL=479, DELETE_SYMBOL=480, DESC_SYMBOL=481, 
		DESCRIBE_SYMBOL=482, DETERMINISTIC_SYMBOL=483, DISTINCT_SYMBOL=484, DIV_SYMBOL=485, 
		DOUBLE_SYMBOL=486, DROP_SYMBOL=487, DUAL_SYMBOL=488, EACH_SYMBOL=489, 
		ELSE_SYMBOL=490, ELSEIF_SYMBOL=491, ENCLOSED_SYMBOL=492, END_OF_INPUT_SYMBOL=493, 
		ESCAPED_SYMBOL=494, EXCHANGE_SYMBOL=495, EXISTS_SYMBOL=496, EXIT_SYMBOL=497, 
		EXPIRE_SYMBOL=498, EXPLAIN_SYMBOL=499, EXTRACT_SYMBOL=500, FALSE_SYMBOL=501, 
		FETCH_SYMBOL=502, FLOAT_SYMBOL=503, FORCE_SYMBOL=504, FOREIGN_SYMBOL=505, 
		FOR_SYMBOL=506, FROM_SYMBOL=507, FULLTEXT_SYMBOL=508, GET_SYMBOL=509, 
		GENERATED_SYMBOL=510, GRANT_SYMBOL=511, GROUP_SYMBOL=512, GROUP_CONCAT_SYMBOL=513, 
		HAVING_SYMBOL=514, HIGH_PRIORITY_SYMBOL=515, HOUR_MICROSECOND_SYMBOL=516, 
		HOUR_MINUTE_SYMBOL=517, HOUR_SECOND_SYMBOL=518, IF_SYMBOL=519, IGNORE_SYMBOL=520, 
		INDEX_SYMBOL=521, INFILE_SYMBOL=522, INNER_SYMBOL=523, INOUT_SYMBOL=524, 
		INSENSITIVE_SYMBOL=525, INSERT_SYMBOL=526, INTERVAL_SYMBOL=527, INTO_SYMBOL=528, 
		INT_SYMBOL=529, IN_SYMBOL=530, IO_AFTER_GTIDS_SYMBOL=531, IO_BEFORE_GTIDS_SYMBOL=532, 
		IS_SYMBOL=533, ITERATE_SYMBOL=534, JOIN_SYMBOL=535, KEYS_SYMBOL=536, KEY_SYMBOL=537, 
		KILL_SYMBOL=538, LEADING_SYMBOL=539, LEAVE_SYMBOL=540, LEFT_SYMBOL=541, 
		LIKE_SYMBOL=542, LIMIT_SYMBOL=543, LINEAR_SYMBOL=544, LINES_SYMBOL=545, 
		LOAD_SYMBOL=546, LOCATOR_SYMBOL=547, LOCK_SYMBOL=548, LONGBLOB_SYMBOL=549, 
		LONGTEXT_SYMBOL=550, LONG_NUM_SYMBOL=551, LONG_SYMBOL=552, LOOP_SYMBOL=553, 
		LOW_PRIORITY_SYMBOL=554, MASTER_BIND_SYMBOL=555, MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL=556, 
		MATCH_SYMBOL=557, MAX_SYMBOL=558, MAXVALUE_SYMBOL=559, MEDIUMBLOB_SYMBOL=560, 
		MEDIUMINT_SYMBOL=561, MEDIUMTEXT_SYMBOL=562, MID_SYMBOL=563, MINUTE_MICROSECOND_SYMBOL=564, 
		MINUTE_SECOND_SYMBOL=565, MIN_SYMBOL=566, MODIFIES_SYMBOL=567, MOD_SYMBOL=568, 
		NATURAL_SYMBOL=569, NCHAR_STRING_SYMBOL=570, NEG_SYMBOL=571, NONBLOCKING_SYMBOL=572, 
		NOT_SYMBOL=573, NOW_SYMBOL=574, NO_WRITE_TO_BINLOG_SYMBOL=575, NULL_SYMBOL=576, 
		NUMERIC_SYMBOL=577, OFFLINE_SYMBOL=578, ON_SYMBOL=579, ONLINE_SYMBOL=580, 
		ONLY_SYMBOL=581, OPTIMIZE_SYMBOL=582, OPTIMIZER_COSTS_SYMBOL=583, OPTION_SYMBOL=584, 
		OPTIONALLY_SYMBOL=585, ORDER_SYMBOL=586, OR_SYMBOL=587, OUTER_SYMBOL=588, 
		OUTFILE_SYMBOL=589, OUT_SYMBOL=590, POSITION_SYMBOL=591, PRECISION_SYMBOL=592, 
		PRIMARY_SYMBOL=593, PROCEDURE_SYMBOL=594, PURGE_SYMBOL=595, RANGE_SYMBOL=596, 
		READS_SYMBOL=597, READ_SYMBOL=598, READ_WRITE_SYMBOL=599, REAL_SYMBOL=600, 
		REFERENCES_SYMBOL=601, REGEXP_SYMBOL=602, RELEASE_SYMBOL=603, RENAME_SYMBOL=604, 
		REPEAT_SYMBOL=605, REPLACE_SYMBOL=606, REQUIRE_SYMBOL=607, RESIGNAL_SYMBOL=608, 
		RESTRICT_SYMBOL=609, RETURN_SYMBOL=610, REVOKE_SYMBOL=611, RIGHT_SYMBOL=612, 
		SECOND_MICROSECOND_SYMBOL=613, SELECT_SYMBOL=614, SENSITIVE_SYMBOL=615, 
		SEPARATOR_SYMBOL=616, SERVER_OPTIONS_SYMBOL=617, SESSION_USER_SYMBOL=618, 
		SET_SYMBOL=619, SET_VAR_SYMBOL=620, SHOW_SYMBOL=621, SIGNAL_SYMBOL=622, 
		SMALLINT_SYMBOL=623, SPATIAL_SYMBOL=624, SPECIFIC_SYMBOL=625, SQLEXCEPTION_SYMBOL=626, 
		SQLSTATE_SYMBOL=627, SQLWARNING_SYMBOL=628, SQL_BIG_RESULT_SYMBOL=629, 
		SQL_CALC_FOUND_ROWS_SYMBOL=630, SQL_SMALL_RESULT_SYMBOL=631, SQL_SYMBOL=632, 
		SSL_SYMBOL=633, STARTING_SYMBOL=634, STDDEV_SAMP_SYMBOL=635, STDDEV_SYMBOL=636, 
		STDDEV_POP_SYMBOL=637, STD_SYMBOL=638, STORED_SYMBOL=639, STRAIGHT_JOIN_SYMBOL=640, 
		SUBSTR_SYMBOL=641, SUBSTRING_SYMBOL=642, SUM_SYMBOL=643, SYSDATE_SYMBOL=644, 
		SYSTEM_USER_SYMBOL=645, TABLE_REF_PRIORITY_SYMBOL=646, TABLE_SYMBOL=647, 
		TERMINATED_SYMBOL=648, THEN_SYMBOL=649, TINYBLOB_SYMBOL=650, TINYINT_SYMBOL=651, 
		TINYTEXT_SYMBOL=652, TO_SYMBOL=653, TRAILING_SYMBOL=654, TRIGGER_SYMBOL=655, 
		TRIM_SYMBOL=656, TRUE_SYMBOL=657, UNDO_SYMBOL=658, UNION_SYMBOL=659, UNIQUE_SYMBOL=660, 
		UNLOCK_SYMBOL=661, UNSIGNED_SYMBOL=662, UPDATE_SYMBOL=663, USAGE_SYMBOL=664, 
		USE_SYMBOL=665, USING_SYMBOL=666, UTC_DATE_SYMBOL=667, UTC_TIMESTAMP_SYMBOL=668, 
		UTC_TIME_SYMBOL=669, VALIDATION_SYMBOL=670, VALUES_SYMBOL=671, VARBINARY_SYMBOL=672, 
		VARCHAR_SYMBOL=673, VARIANCE_SYMBOL=674, VARYING_SYMBOL=675, VAR_POP_SYMBOL=676, 
		VAR_SAMP_SYMBOL=677, VIRTUAL_SYMBOL=678, WHEN_SYMBOL=679, WHERE_SYMBOL=680, 
		WHILE_SYMBOL=681, WITH_SYMBOL=682, WITHOUT_SYMBOL=683, WRITE_SYMBOL=684, 
		XOR_SYMBOL=685, YEAR_MONTH_SYMBOL=686, ZEROFILL_SYMBOL=687, PERSIST_SYMBOL=688, 
		ROLE_SYMBOL=689, ADMIN_SYMBOL=690, INVISIBLE_SYMBOL=691, VISIBLE_SYMBOL=692, 
		EXCEPT_SYMBOL=693, COMPONENT_SYMBOL=694, RECURSIVE_SYMBOL=695, JSON_OBJECTAGG_SYMBOL=696, 
		JSON_ARRAYAGG_SYMBOL=697, OF_SYMBOL=698, SKIP_SYMBOL=699, LOCKED_SYMBOL=700, 
		NOWAIT_SYMBOL=701, GROUPING_SYMBOL=702, PERSIST_ONLY_SYMBOL=703, HISTOGRAM_SYMBOL=704, 
		BUCKETS_SYMBOL=705, REMOTE_SYMBOL=706, CLONE_SYMBOL=707, CUME_DIST_SYMBOL=708, 
		DENSE_RANK_SYMBOL=709, EXCLUDE_SYMBOL=710, FIRST_VALUE_SYMBOL=711, FOLLOWING_SYMBOL=712, 
		GROUPS_SYMBOL=713, LAG_SYMBOL=714, LAST_VALUE_SYMBOL=715, LEAD_SYMBOL=716, 
		NTH_VALUE_SYMBOL=717, NTILE_SYMBOL=718, NULLS_SYMBOL=719, OTHERS_SYMBOL=720, 
		OVER_SYMBOL=721, PERCENT_RANK_SYMBOL=722, PRECEDING_SYMBOL=723, RANK_SYMBOL=724, 
		RESPECT_SYMBOL=725, ROW_NUMBER_SYMBOL=726, TIES_SYMBOL=727, UNBOUNDED_SYMBOL=728, 
		WINDOW_SYMBOL=729, EMPTY_SYMBOL=730, JSON_TABLE_SYMBOL=731, NESTED_SYMBOL=732, 
		ORDINALITY_SYMBOL=733, PATH_SYMBOL=734, HISTORY_SYMBOL=735, REUSE_SYMBOL=736, 
		SRID_SYMBOL=737, THREAD_PRIORITY_SYMBOL=738, RESOURCE_SYMBOL=739, SYSTEM_SYMBOL=740, 
		VCPU_SYMBOL=741, MASTER_PUBLIC_KEY_PATH_SYMBOL=742, GET_MASTER_PUBLIC_KEY_SYMBOL=743, 
		RESTART_SYMBOL=744, DEFINITION_SYMBOL=745, DESCRIPTION_SYMBOL=746, ORGANIZATION_SYMBOL=747, 
		REFERENCE_SYMBOL=748, OPTIONAL_SYMBOL=749, SECONDARY_SYMBOL=750, SECONDARY_ENGINE_SYMBOL=751, 
		SECONDARY_LOAD_SYMBOL=752, SECONDARY_UNLOAD_SYMBOL=753, ACTIVE_SYMBOL=754, 
		INACTIVE_SYMBOL=755, LATERAL_SYMBOL=756, RETAIN_SYMBOL=757, OLD_SYMBOL=758, 
		NETWORK_NAMESPACE_SYMBOL=759, ENFORCED_SYMBOL=760, ARRAY_SYMBOL=761, OJ_SYMBOL=762, 
		MEMBER_SYMBOL=763, RANDOM_SYMBOL=764, MASTER_COMPRESSION_ALGORITHM_SYMBOL=765, 
		MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL=766, PRIVILEGE_CHECKS_USER_SYMBOL=767, 
		MASTER_TLS_CIPHERSUITES_SYMBOL=768, WHITESPACE=769, INVALID_INPUT=770, 
		UNDERSCORE_CHARSET=771, IDENTIFIER=772, NCHAR_TEXT=773, BACK_TICK_QUOTED_ID=774, 
		DOUBLE_QUOTED_TEXT=775, SINGLE_QUOTED_TEXT=776, VERSION_COMMENT_START=777, 
		MYSQL_COMMENT_START=778, VERSION_COMMENT_END=779, BLOCK_COMMENT=780, POUND_COMMENT=781, 
		DASHDASH_COMMENT=782, NOT_EQUAL2_OPERATOR=783;
	public static final int
		RULE_query = 0, RULE_simpleStatement = 1, RULE_alterStatement = 2, RULE_alterDatabase = 3, 
		RULE_alterEvent = 4, RULE_alterLogfileGroup = 5, RULE_alterLogfileGroupOptions = 6, 
		RULE_alterLogfileGroupOption = 7, RULE_alterServer = 8, RULE_alterTable = 9, 
		RULE_alterTableActions = 10, RULE_alterCommandList = 11, RULE_alterCommandsModifierList = 12, 
		RULE_standaloneAlterCommands = 13, RULE_alterPartition = 14, RULE_alterList = 15, 
		RULE_alterCommandsModifier = 16, RULE_alterListItem = 17, RULE_place = 18, 
		RULE_restrict = 19, RULE_alterOrderList = 20, RULE_alterAlgorithmOption = 21, 
		RULE_alterLockOption = 22, RULE_indexLockAndAlgorithm = 23, RULE_withValidation = 24, 
		RULE_removePartitioning = 25, RULE_allOrPartitionNameList = 26, RULE_reorgPartitionRule = 27, 
		RULE_alterTablespace = 28, RULE_alterUndoTablespace = 29, RULE_undoTableSpaceOptions = 30, 
		RULE_undoTableSpaceOption = 31, RULE_alterTablespaceOptions = 32, RULE_alterTablespaceOption = 33, 
		RULE_changeTablespaceOption = 34, RULE_alterView = 35, RULE_viewTail = 36, 
		RULE_viewSelect = 37, RULE_viewCheckOption = 38, RULE_createStatement = 39, 
		RULE_createDatabase = 40, RULE_createDatabaseOption = 41, RULE_createTable = 42, 
		RULE_tableElementList = 43, RULE_tableElement = 44, RULE_duplicateAsQueryExpression = 45, 
		RULE_queryExpressionOrParens = 46, RULE_createRoutine = 47, RULE_createProcedure = 48, 
		RULE_createFunction = 49, RULE_createUdf = 50, RULE_routineCreateOption = 51, 
		RULE_routineAlterOptions = 52, RULE_routineOption = 53, RULE_createIndex = 54, 
		RULE_indexNameAndType = 55, RULE_createIndexTarget = 56, RULE_createLogfileGroup = 57, 
		RULE_logfileGroupOptions = 58, RULE_logfileGroupOption = 59, RULE_createServer = 60, 
		RULE_serverOptions = 61, RULE_serverOption = 62, RULE_createTablespace = 63, 
		RULE_createUndoTablespace = 64, RULE_tsDataFileName = 65, RULE_tsDataFile = 66, 
		RULE_tablespaceOptions = 67, RULE_tablespaceOption = 68, RULE_tsOptionInitialSize = 69, 
		RULE_tsOptionUndoRedoBufferSize = 70, RULE_tsOptionAutoextendSize = 71, 
		RULE_tsOptionMaxSize = 72, RULE_tsOptionExtentSize = 73, RULE_tsOptionNodegroup = 74, 
		RULE_tsOptionEngine = 75, RULE_tsOptionWait = 76, RULE_tsOptionComment = 77, 
		RULE_tsOptionFileblockSize = 78, RULE_tsOptionEncryption = 79, RULE_createView = 80, 
		RULE_viewReplaceOrAlgorithm = 81, RULE_viewAlgorithm = 82, RULE_viewSuid = 83, 
		RULE_createTrigger = 84, RULE_triggerFollowsPrecedesClause = 85, RULE_createEvent = 86, 
		RULE_createRole = 87, RULE_createSpatialReference = 88, RULE_srsAttribute = 89, 
		RULE_dropStatement = 90, RULE_dropDatabase = 91, RULE_dropEvent = 92, 
		RULE_dropFunction = 93, RULE_dropProcedure = 94, RULE_dropIndex = 95, 
		RULE_dropLogfileGroup = 96, RULE_dropLogfileGroupOption = 97, RULE_dropServer = 98, 
		RULE_dropTable = 99, RULE_dropTableSpace = 100, RULE_dropTrigger = 101, 
		RULE_dropView = 102, RULE_dropRole = 103, RULE_dropSpatialReference = 104, 
		RULE_dropUndoTablespace = 105, RULE_renameTableStatement = 106, RULE_renamePair = 107, 
		RULE_truncateTableStatement = 108, RULE_importStatement = 109, RULE_callStatement = 110, 
		RULE_deleteStatement = 111, RULE_partitionDelete = 112, RULE_deleteStatementOption = 113, 
		RULE_doStatement = 114, RULE_handlerStatement = 115, RULE_handlerReadOrScan = 116, 
		RULE_insertStatement = 117, RULE_insertLockOption = 118, RULE_insertFromConstructor = 119, 
		RULE_fields = 120, RULE_insertValues = 121, RULE_insertQueryExpression = 122, 
		RULE_valueList = 123, RULE_values = 124, RULE_valuesReference = 125, RULE_insertUpdateList = 126, 
		RULE_loadStatement = 127, RULE_dataOrXml = 128, RULE_xmlRowsIdentifiedBy = 129, 
		RULE_loadDataFileTail = 130, RULE_loadDataFileTargetList = 131, RULE_fieldOrVariableList = 132, 
		RULE_replaceStatement = 133, RULE_selectStatement = 134, RULE_selectStatementWithInto = 135, 
		RULE_queryExpression = 136, RULE_queryExpressionBody = 137, RULE_queryExpressionParens = 138, 
		RULE_querySpecification = 139, RULE_subquery = 140, RULE_querySpecOption = 141, 
		RULE_limitClause = 142, RULE_simpleLimitClause = 143, RULE_limitOptions = 144, 
		RULE_limitOption = 145, RULE_intoClause = 146, RULE_procedureAnalyseClause = 147, 
		RULE_havingClause = 148, RULE_windowClause = 149, RULE_windowDefinition = 150, 
		RULE_windowSpec = 151, RULE_windowSpecDetails = 152, RULE_windowFrameClause = 153, 
		RULE_windowFrameUnits = 154, RULE_windowFrameExtent = 155, RULE_windowFrameStart = 156, 
		RULE_windowFrameBetween = 157, RULE_windowFrameBound = 158, RULE_windowFrameExclusion = 159, 
		RULE_withClause = 160, RULE_commonTableExpression = 161, RULE_groupByClause = 162, 
		RULE_olapOption = 163, RULE_orderClause = 164, RULE_direction = 165, RULE_fromClause = 166, 
		RULE_tableReferenceList = 167, RULE_selectOption = 168, RULE_lockingClause = 169, 
		RULE_lockStrengh = 170, RULE_lockedRowAction = 171, RULE_selectItemList = 172, 
		RULE_selectItem = 173, RULE_selectAlias = 174, RULE_whereClause = 175, 
		RULE_tableReference = 176, RULE_escapedTableReference = 177, RULE_joinedTable = 178, 
		RULE_naturalJoinType = 179, RULE_innerJoinType = 180, RULE_outerJoinType = 181, 
		RULE_tableFactor = 182, RULE_singleTable = 183, RULE_singleTableParens = 184, 
		RULE_derivedTable = 185, RULE_tableReferenceListParens = 186, RULE_tableFunction = 187, 
		RULE_columnsClause = 188, RULE_jtColumn = 189, RULE_onEmptyOrError = 190, 
		RULE_onEmpty = 191, RULE_onError = 192, RULE_jtOnResponse = 193, RULE_unionOption = 194, 
		RULE_tableAlias = 195, RULE_indexHintList = 196, RULE_indexHint = 197, 
		RULE_indexHintType = 198, RULE_keyOrIndex = 199, RULE_constraintKeyType = 200, 
		RULE_indexHintClause = 201, RULE_indexList = 202, RULE_indexListElement = 203, 
		RULE_updateStatement = 204, RULE_transactionOrLockingStatement = 205, 
		RULE_transactionStatement = 206, RULE_beginWork = 207, RULE_transactionCharacteristic = 208, 
		RULE_savepointStatement = 209, RULE_lockStatement = 210, RULE_lockItem = 211, 
		RULE_lockOption = 212, RULE_xaStatement = 213, RULE_xaConvert = 214, RULE_xid = 215, 
		RULE_replicationStatement = 216, RULE_resetOption = 217, RULE_masterResetOptions = 218, 
		RULE_replicationLoad = 219, RULE_changeMaster = 220, RULE_changeMasterOptions = 221, 
		RULE_masterOption = 222, RULE_privilegeCheckDef = 223, RULE_masterTlsCiphersuitesDef = 224, 
		RULE_masterFileDef = 225, RULE_serverIdList = 226, RULE_changeReplication = 227, 
		RULE_filterDefinition = 228, RULE_filterDbList = 229, RULE_filterTableList = 230, 
		RULE_filterStringList = 231, RULE_filterWildDbTableString = 232, RULE_filterDbPairList = 233, 
		RULE_slave = 234, RULE_slaveUntilOptions = 235, RULE_slaveConnectionOptions = 236, 
		RULE_slaveThreadOptions = 237, RULE_slaveThreadOption = 238, RULE_groupReplication = 239, 
		RULE_preparedStatement = 240, RULE_executeStatement = 241, RULE_executeVarList = 242, 
		RULE_cloneStatement = 243, RULE_dataDirSSL = 244, RULE_ssl = 245, RULE_accountManagementStatement = 246, 
		RULE_alterUser = 247, RULE_alterUserTail = 248, RULE_userFunction = 249, 
		RULE_createUser = 250, RULE_createUserTail = 251, RULE_defaultRoleClause = 252, 
		RULE_requireClause = 253, RULE_connectOptions = 254, RULE_accountLockPasswordExpireOptions = 255, 
		RULE_dropUser = 256, RULE_grant = 257, RULE_grantTargetList = 258, RULE_grantOptions = 259, 
		RULE_exceptRoleList = 260, RULE_withRoles = 261, RULE_grantAs = 262, RULE_versionedRequireClause = 263, 
		RULE_renameUser = 264, RULE_revoke = 265, RULE_onTypeTo = 266, RULE_aclType = 267, 
		RULE_roleOrPrivilegesList = 268, RULE_roleOrPrivilege = 269, RULE_grantIdentifier = 270, 
		RULE_requireList = 271, RULE_requireListElement = 272, RULE_grantOption = 273, 
		RULE_setRole = 274, RULE_roleList = 275, RULE_role = 276, RULE_tableAdministrationStatement = 277, 
		RULE_histogram = 278, RULE_checkOption = 279, RULE_repairType = 280, RULE_installUninstallStatment = 281, 
		RULE_setStatement = 282, RULE_startOptionValueList = 283, RULE_transactionCharacteristics = 284, 
		RULE_transactionAccessMode = 285, RULE_isolationLevel = 286, RULE_optionValueListContinued = 287, 
		RULE_optionValueNoOptionType = 288, RULE_optionValue = 289, RULE_setSystemVariable = 290, 
		RULE_startOptionValueListFollowingOptionType = 291, RULE_optionValueFollowingOptionType = 292, 
		RULE_setExprOrDefault = 293, RULE_showStatement = 294, RULE_showCommandType = 295, 
		RULE_nonBlocking = 296, RULE_fromOrIn = 297, RULE_inDb = 298, RULE_profileType = 299, 
		RULE_otherAdministrativeStatement = 300, RULE_keyCacheListOrParts = 301, 
		RULE_keyCacheList = 302, RULE_assignToKeycache = 303, RULE_assignToKeycachePartition = 304, 
		RULE_cacheKeyList = 305, RULE_keyUsageElement = 306, RULE_keyUsageList = 307, 
		RULE_flushOption = 308, RULE_logType = 309, RULE_flushTables = 310, RULE_flushTablesOptions = 311, 
		RULE_preloadTail = 312, RULE_preloadList = 313, RULE_preloadKeys = 314, 
		RULE_adminPartition = 315, RULE_resourceGroupManagement = 316, RULE_createResourceGroup = 317, 
		RULE_resourceGroupVcpuList = 318, RULE_vcpuNumOrRange = 319, RULE_resourceGroupPriority = 320, 
		RULE_resourceGroupEnableDisable = 321, RULE_alterResourceGroup = 322, 
		RULE_setResourceGroup = 323, RULE_threadIdList = 324, RULE_dropResourceGroup = 325, 
		RULE_utilityStatement = 326, RULE_describeCommand = 327, RULE_explainCommand = 328, 
		RULE_explainableStatement = 329, RULE_helpCommand = 330, RULE_useCommand = 331, 
		RULE_restartServer = 332, RULE_expr = 333, RULE_boolPri = 334, RULE_compOp = 335, 
		RULE_predicate = 336, RULE_predicateOperations = 337, RULE_bitExpr = 338, 
		RULE_simpleExpr = 339, RULE_arrayCast = 340, RULE_jsonOperator = 341, 
		RULE_sumExpr = 342, RULE_groupingOperation = 343, RULE_windowFunctionCall = 344, 
		RULE_windowingClause = 345, RULE_leadLagInfo = 346, RULE_nullTreatment = 347, 
		RULE_jsonFunction = 348, RULE_inSumExpr = 349, RULE_identListArg = 350, 
		RULE_identList = 351, RULE_fulltextOptions = 352, RULE_runtimeFunctionCall = 353, 
		RULE_geometryFunction = 354, RULE_timeFunctionParameters = 355, RULE_fractionalPrecision = 356, 
		RULE_weightStringLevels = 357, RULE_weightStringLevelListItem = 358, RULE_dateTimeTtype = 359, 
		RULE_trimFunction = 360, RULE_substringFunction = 361, RULE_functionCall = 362, 
		RULE_udfExprList = 363, RULE_udfExpr = 364, RULE_variable = 365, RULE_userVariable = 366, 
		RULE_systemVariable = 367, RULE_internalVariableName = 368, RULE_whenExpression = 369, 
		RULE_thenExpression = 370, RULE_elseExpression = 371, RULE_castType = 372, 
		RULE_exprList = 373, RULE_charset = 374, RULE_notRule = 375, RULE_not2Rule = 376, 
		RULE_interval = 377, RULE_intervalTimeStamp = 378, RULE_exprListWithParentheses = 379, 
		RULE_exprWithParentheses = 380, RULE_simpleExprWithParentheses = 381, 
		RULE_orderList = 382, RULE_orderExpression = 383, RULE_groupList = 384, 
		RULE_groupingExpression = 385, RULE_channel = 386, RULE_compoundStatement = 387, 
		RULE_returnStatement = 388, RULE_ifStatement = 389, RULE_ifBody = 390, 
		RULE_thenStatement = 391, RULE_compoundStatementList = 392, RULE_caseStatement = 393, 
		RULE_elseStatement = 394, RULE_labeledBlock = 395, RULE_unlabeledBlock = 396, 
		RULE_label = 397, RULE_beginEndBlock = 398, RULE_labeledControl = 399, 
		RULE_unlabeledControl = 400, RULE_loopBlock = 401, RULE_whileDoBlock = 402, 
		RULE_repeatUntilBlock = 403, RULE_spDeclarations = 404, RULE_spDeclaration = 405, 
		RULE_variableDeclaration = 406, RULE_conditionDeclaration = 407, RULE_spCondition = 408, 
		RULE_sqlstate = 409, RULE_handlerDeclaration = 410, RULE_handlerCondition = 411, 
		RULE_cursorDeclaration = 412, RULE_iterateStatement = 413, RULE_leaveStatement = 414, 
		RULE_getDiagnostics = 415, RULE_signalAllowedExpr = 416, RULE_statementInformationItem = 417, 
		RULE_conditionInformationItem = 418, RULE_signalInformationItemName = 419, 
		RULE_signalStatement = 420, RULE_resignalStatement = 421, RULE_signalInformationItem = 422, 
		RULE_cursorOpen = 423, RULE_cursorClose = 424, RULE_cursorFetch = 425, 
		RULE_schedule = 426, RULE_columnDefinition = 427, RULE_checkOrReferences = 428, 
		RULE_checkConstraint = 429, RULE_constraintEnforcement = 430, RULE_tableConstraintDef = 431, 
		RULE_constraintName = 432, RULE_fieldDefinition = 433, RULE_columnAttribute = 434, 
		RULE_columnFormat = 435, RULE_storageMedia = 436, RULE_gcolAttribute = 437, 
		RULE_references = 438, RULE_deleteOption = 439, RULE_keyList = 440, RULE_keyPart = 441, 
		RULE_keyListWithExpression = 442, RULE_keyPartOrExpression = 443, RULE_keyListVariants = 444, 
		RULE_indexType = 445, RULE_indexOption = 446, RULE_commonIndexOption = 447, 
		RULE_visibility = 448, RULE_indexTypeClause = 449, RULE_fulltextIndexOption = 450, 
		RULE_spatialIndexOption = 451, RULE_dataTypeDefinition = 452, RULE_dataType = 453, 
		RULE_nchar = 454, RULE_realType = 455, RULE_fieldLength = 456, RULE_fieldOptions = 457, 
		RULE_charsetWithOptBinary = 458, RULE_ascii = 459, RULE_unicode = 460, 
		RULE_wsNumCodepoints = 461, RULE_typeDatetimePrecision = 462, RULE_charsetName = 463, 
		RULE_collationName = 464, RULE_createTableOptions = 465, RULE_createTableOptionsSpaceSeparated = 466, 
		RULE_createTableOption = 467, RULE_ternaryOption = 468, RULE_defaultCollation = 469, 
		RULE_defaultEncryption = 470, RULE_defaultCharset = 471, RULE_partitionClause = 472, 
		RULE_partitionTypeDef = 473, RULE_subPartitions = 474, RULE_partitionKeyAlgorithm = 475, 
		RULE_partitionDefinitions = 476, RULE_partitionDefinition = 477, RULE_partitionValuesIn = 478, 
		RULE_partitionOption = 479, RULE_subpartitionDefinition = 480, RULE_partitionValueItemListParen = 481, 
		RULE_partitionValueItem = 482, RULE_definerClause = 483, RULE_ifExists = 484, 
		RULE_ifNotExists = 485, RULE_procedureParameter = 486, RULE_functionParameter = 487, 
		RULE_collate = 488, RULE_typeWithOptCollate = 489, RULE_schemaIdentifierPair = 490, 
		RULE_viewRefList = 491, RULE_updateList = 492, RULE_updateElement = 493, 
		RULE_charsetClause = 494, RULE_fieldsClause = 495, RULE_fieldTerm = 496, 
		RULE_linesClause = 497, RULE_lineTerm = 498, RULE_userList = 499, RULE_createUserList = 500, 
		RULE_alterUserList = 501, RULE_createUserEntry = 502, RULE_alterUserEntry = 503, 
		RULE_retainCurrentPassword = 504, RULE_discardOldPassword = 505, RULE_replacePassword = 506, 
		RULE_userIdentifierOrText = 507, RULE_user = 508, RULE_likeClause = 509, 
		RULE_likeOrWhere = 510, RULE_onlineOption = 511, RULE_noWriteToBinLog = 512, 
		RULE_usePartition = 513, RULE_fieldIdentifier = 514, RULE_columnName = 515, 
		RULE_columnInternalRef = 516, RULE_columnInternalRefList = 517, RULE_columnRef = 518, 
		RULE_insertIdentifier = 519, RULE_indexName = 520, RULE_indexRef = 521, 
		RULE_tableWild = 522, RULE_schemaName = 523, RULE_schemaRef = 524, RULE_procedureName = 525, 
		RULE_procedureRef = 526, RULE_functionName = 527, RULE_functionRef = 528, 
		RULE_triggerName = 529, RULE_triggerRef = 530, RULE_viewName = 531, RULE_viewRef = 532, 
		RULE_tablespaceName = 533, RULE_tablespaceRef = 534, RULE_logfileGroupName = 535, 
		RULE_logfileGroupRef = 536, RULE_eventName = 537, RULE_eventRef = 538, 
		RULE_udfName = 539, RULE_serverName = 540, RULE_serverRef = 541, RULE_engineRef = 542, 
		RULE_tableName = 543, RULE_filterTableRef = 544, RULE_tableRefWithWildcard = 545, 
		RULE_tableRef = 546, RULE_tableRefList = 547, RULE_tableAliasRefList = 548, 
		RULE_parameterName = 549, RULE_labelIdentifier = 550, RULE_labelRef = 551, 
		RULE_roleIdentifier = 552, RULE_roleRef = 553, RULE_pluginRef = 554, RULE_componentRef = 555, 
		RULE_resourceGroupRef = 556, RULE_windowName = 557, RULE_pureIdentifier = 558, 
		RULE_identifier = 559, RULE_identifierList = 560, RULE_identifierListWithParentheses = 561, 
		RULE_qualifiedIdentifier = 562, RULE_simpleIdentifier = 563, RULE_dotIdentifier = 564, 
		RULE_ulong_number = 565, RULE_real_ulong_number = 566, RULE_ulonglong_number = 567, 
		RULE_real_ulonglong_number = 568, RULE_literal = 569, RULE_signedLiteral = 570, 
		RULE_stringList = 571, RULE_textStringLiteral = 572, RULE_textString = 573, 
		RULE_textStringHash = 574, RULE_textLiteral = 575, RULE_textStringNoLinebreak = 576, 
		RULE_textStringLiteralList = 577, RULE_numLiteral = 578, RULE_boolLiteral = 579, 
		RULE_nullLiteral = 580, RULE_temporalLiteral = 581, RULE_floatOptions = 582, 
		RULE_standardFloatOptions = 583, RULE_precision = 584, RULE_textOrIdentifier = 585, 
		RULE_lValueIdentifier = 586, RULE_roleIdentifierOrText = 587, RULE_sizeNumber = 588, 
		RULE_parentheses = 589, RULE_equal = 590, RULE_optionType = 591, RULE_varIdentType = 592, 
		RULE_setVarIdentType = 593, RULE_identifierKeyword = 594, RULE_identifierKeywordsAmbiguous1RolesAndLabels = 595, 
		RULE_identifierKeywordsAmbiguous2Labels = 596, RULE_labelKeyword = 597, 
		RULE_identifierKeywordsAmbiguous3Roles = 598, RULE_identifierKeywordsUnambiguous = 599, 
		RULE_roleKeyword = 600, RULE_lValueKeyword = 601, RULE_identifierKeywordsAmbiguous4SystemVariables = 602, 
		RULE_roleOrIdentifierKeyword = 603, RULE_roleOrLabelKeyword = 604;
	public static final String[] ruleNames = {
		"query", "simpleStatement", "alterStatement", "alterDatabase", "alterEvent", 
		"alterLogfileGroup", "alterLogfileGroupOptions", "alterLogfileGroupOption", 
		"alterServer", "alterTable", "alterTableActions", "alterCommandList", 
		"alterCommandsModifierList", "standaloneAlterCommands", "alterPartition", 
		"alterList", "alterCommandsModifier", "alterListItem", "place", "restrict", 
		"alterOrderList", "alterAlgorithmOption", "alterLockOption", "indexLockAndAlgorithm", 
		"withValidation", "removePartitioning", "allOrPartitionNameList", "reorgPartitionRule", 
		"alterTablespace", "alterUndoTablespace", "undoTableSpaceOptions", "undoTableSpaceOption", 
		"alterTablespaceOptions", "alterTablespaceOption", "changeTablespaceOption", 
		"alterView", "viewTail", "viewSelect", "viewCheckOption", "createStatement", 
		"createDatabase", "createDatabaseOption", "createTable", "tableElementList", 
		"tableElement", "duplicateAsQueryExpression", "queryExpressionOrParens", 
		"createRoutine", "createProcedure", "createFunction", "createUdf", "routineCreateOption", 
		"routineAlterOptions", "routineOption", "createIndex", "indexNameAndType", 
		"createIndexTarget", "createLogfileGroup", "logfileGroupOptions", "logfileGroupOption", 
		"createServer", "serverOptions", "serverOption", "createTablespace", "createUndoTablespace", 
		"tsDataFileName", "tsDataFile", "tablespaceOptions", "tablespaceOption", 
		"tsOptionInitialSize", "tsOptionUndoRedoBufferSize", "tsOptionAutoextendSize", 
		"tsOptionMaxSize", "tsOptionExtentSize", "tsOptionNodegroup", "tsOptionEngine", 
		"tsOptionWait", "tsOptionComment", "tsOptionFileblockSize", "tsOptionEncryption", 
		"createView", "viewReplaceOrAlgorithm", "viewAlgorithm", "viewSuid", "createTrigger", 
		"triggerFollowsPrecedesClause", "createEvent", "createRole", "createSpatialReference", 
		"srsAttribute", "dropStatement", "dropDatabase", "dropEvent", "dropFunction", 
		"dropProcedure", "dropIndex", "dropLogfileGroup", "dropLogfileGroupOption", 
		"dropServer", "dropTable", "dropTableSpace", "dropTrigger", "dropView", 
		"dropRole", "dropSpatialReference", "dropUndoTablespace", "renameTableStatement", 
		"renamePair", "truncateTableStatement", "importStatement", "callStatement", 
		"deleteStatement", "partitionDelete", "deleteStatementOption", "doStatement", 
		"handlerStatement", "handlerReadOrScan", "insertStatement", "insertLockOption", 
		"insertFromConstructor", "fields", "insertValues", "insertQueryExpression", 
		"valueList", "values", "valuesReference", "insertUpdateList", "loadStatement", 
		"dataOrXml", "xmlRowsIdentifiedBy", "loadDataFileTail", "loadDataFileTargetList", 
		"fieldOrVariableList", "replaceStatement", "selectStatement", "selectStatementWithInto", 
		"queryExpression", "queryExpressionBody", "queryExpressionParens", "querySpecification", 
		"subquery", "querySpecOption", "limitClause", "simpleLimitClause", "limitOptions", 
		"limitOption", "intoClause", "procedureAnalyseClause", "havingClause", 
		"windowClause", "windowDefinition", "windowSpec", "windowSpecDetails", 
		"windowFrameClause", "windowFrameUnits", "windowFrameExtent", "windowFrameStart", 
		"windowFrameBetween", "windowFrameBound", "windowFrameExclusion", "withClause", 
		"commonTableExpression", "groupByClause", "olapOption", "orderClause", 
		"direction", "fromClause", "tableReferenceList", "selectOption", "lockingClause", 
		"lockStrengh", "lockedRowAction", "selectItemList", "selectItem", "selectAlias", 
		"whereClause", "tableReference", "escapedTableReference", "joinedTable", 
		"naturalJoinType", "innerJoinType", "outerJoinType", "tableFactor", "singleTable", 
		"singleTableParens", "derivedTable", "tableReferenceListParens", "tableFunction", 
		"columnsClause", "jtColumn", "onEmptyOrError", "onEmpty", "onError", "jtOnResponse", 
		"unionOption", "tableAlias", "indexHintList", "indexHint", "indexHintType", 
		"keyOrIndex", "constraintKeyType", "indexHintClause", "indexList", "indexListElement", 
		"updateStatement", "transactionOrLockingStatement", "transactionStatement", 
		"beginWork", "transactionCharacteristic", "savepointStatement", "lockStatement", 
		"lockItem", "lockOption", "xaStatement", "xaConvert", "xid", "replicationStatement", 
		"resetOption", "masterResetOptions", "replicationLoad", "changeMaster", 
		"changeMasterOptions", "masterOption", "privilegeCheckDef", "masterTlsCiphersuitesDef", 
		"masterFileDef", "serverIdList", "changeReplication", "filterDefinition", 
		"filterDbList", "filterTableList", "filterStringList", "filterWildDbTableString", 
		"filterDbPairList", "slave", "slaveUntilOptions", "slaveConnectionOptions", 
		"slaveThreadOptions", "slaveThreadOption", "groupReplication", "preparedStatement", 
		"executeStatement", "executeVarList", "cloneStatement", "dataDirSSL", 
		"ssl", "accountManagementStatement", "alterUser", "alterUserTail", "userFunction", 
		"createUser", "createUserTail", "defaultRoleClause", "requireClause", 
		"connectOptions", "accountLockPasswordExpireOptions", "dropUser", "grant", 
		"grantTargetList", "grantOptions", "exceptRoleList", "withRoles", "grantAs", 
		"versionedRequireClause", "renameUser", "revoke", "onTypeTo", "aclType", 
		"roleOrPrivilegesList", "roleOrPrivilege", "grantIdentifier", "requireList", 
		"requireListElement", "grantOption", "setRole", "roleList", "role", "tableAdministrationStatement", 
		"histogram", "checkOption", "repairType", "installUninstallStatment", 
		"setStatement", "startOptionValueList", "transactionCharacteristics", 
		"transactionAccessMode", "isolationLevel", "optionValueListContinued", 
		"optionValueNoOptionType", "optionValue", "setSystemVariable", "startOptionValueListFollowingOptionType", 
		"optionValueFollowingOptionType", "setExprOrDefault", "showStatement", 
		"showCommandType", "nonBlocking", "fromOrIn", "inDb", "profileType", "otherAdministrativeStatement", 
		"keyCacheListOrParts", "keyCacheList", "assignToKeycache", "assignToKeycachePartition", 
		"cacheKeyList", "keyUsageElement", "keyUsageList", "flushOption", "logType", 
		"flushTables", "flushTablesOptions", "preloadTail", "preloadList", "preloadKeys", 
		"adminPartition", "resourceGroupManagement", "createResourceGroup", "resourceGroupVcpuList", 
		"vcpuNumOrRange", "resourceGroupPriority", "resourceGroupEnableDisable", 
		"alterResourceGroup", "setResourceGroup", "threadIdList", "dropResourceGroup", 
		"utilityStatement", "describeCommand", "explainCommand", "explainableStatement", 
		"helpCommand", "useCommand", "restartServer", "expr", "boolPri", "compOp", 
		"predicate", "predicateOperations", "bitExpr", "simpleExpr", "arrayCast", 
		"jsonOperator", "sumExpr", "groupingOperation", "windowFunctionCall", 
		"windowingClause", "leadLagInfo", "nullTreatment", "jsonFunction", "inSumExpr", 
		"identListArg", "identList", "fulltextOptions", "runtimeFunctionCall", 
		"geometryFunction", "timeFunctionParameters", "fractionalPrecision", "weightStringLevels", 
		"weightStringLevelListItem", "dateTimeTtype", "trimFunction", "substringFunction", 
		"functionCall", "udfExprList", "udfExpr", "variable", "userVariable", 
		"systemVariable", "internalVariableName", "whenExpression", "thenExpression", 
		"elseExpression", "castType", "exprList", "charset", "notRule", "not2Rule", 
		"interval", "intervalTimeStamp", "exprListWithParentheses", "exprWithParentheses", 
		"simpleExprWithParentheses", "orderList", "orderExpression", "groupList", 
		"groupingExpression", "channel", "compoundStatement", "returnStatement", 
		"ifStatement", "ifBody", "thenStatement", "compoundStatementList", "caseStatement", 
		"elseStatement", "labeledBlock", "unlabeledBlock", "label", "beginEndBlock", 
		"labeledControl", "unlabeledControl", "loopBlock", "whileDoBlock", "repeatUntilBlock", 
		"spDeclarations", "spDeclaration", "variableDeclaration", "conditionDeclaration", 
		"spCondition", "sqlstate", "handlerDeclaration", "handlerCondition", "cursorDeclaration", 
		"iterateStatement", "leaveStatement", "getDiagnostics", "signalAllowedExpr", 
		"statementInformationItem", "conditionInformationItem", "signalInformationItemName", 
		"signalStatement", "resignalStatement", "signalInformationItem", "cursorOpen", 
		"cursorClose", "cursorFetch", "schedule", "columnDefinition", "checkOrReferences", 
		"checkConstraint", "constraintEnforcement", "tableConstraintDef", "constraintName", 
		"fieldDefinition", "columnAttribute", "columnFormat", "storageMedia", 
		"gcolAttribute", "references", "deleteOption", "keyList", "keyPart", "keyListWithExpression", 
		"keyPartOrExpression", "keyListVariants", "indexType", "indexOption", 
		"commonIndexOption", "visibility", "indexTypeClause", "fulltextIndexOption", 
		"spatialIndexOption", "dataTypeDefinition", "dataType", "nchar", "realType", 
		"fieldLength", "fieldOptions", "charsetWithOptBinary", "ascii", "unicode", 
		"wsNumCodepoints", "typeDatetimePrecision", "charsetName", "collationName", 
		"createTableOptions", "createTableOptionsSpaceSeparated", "createTableOption", 
		"ternaryOption", "defaultCollation", "defaultEncryption", "defaultCharset", 
		"partitionClause", "partitionTypeDef", "subPartitions", "partitionKeyAlgorithm", 
		"partitionDefinitions", "partitionDefinition", "partitionValuesIn", "partitionOption", 
		"subpartitionDefinition", "partitionValueItemListParen", "partitionValueItem", 
		"definerClause", "ifExists", "ifNotExists", "procedureParameter", "functionParameter", 
		"collate", "typeWithOptCollate", "schemaIdentifierPair", "viewRefList", 
		"updateList", "updateElement", "charsetClause", "fieldsClause", "fieldTerm", 
		"linesClause", "lineTerm", "userList", "createUserList", "alterUserList", 
		"createUserEntry", "alterUserEntry", "retainCurrentPassword", "discardOldPassword", 
		"replacePassword", "userIdentifierOrText", "user", "likeClause", "likeOrWhere", 
		"onlineOption", "noWriteToBinLog", "usePartition", "fieldIdentifier", 
		"columnName", "columnInternalRef", "columnInternalRefList", "columnRef", 
		"insertIdentifier", "indexName", "indexRef", "tableWild", "schemaName", 
		"schemaRef", "procedureName", "procedureRef", "functionName", "functionRef", 
		"triggerName", "triggerRef", "viewName", "viewRef", "tablespaceName", 
		"tablespaceRef", "logfileGroupName", "logfileGroupRef", "eventName", "eventRef", 
		"udfName", "serverName", "serverRef", "engineRef", "tableName", "filterTableRef", 
		"tableRefWithWildcard", "tableRef", "tableRefList", "tableAliasRefList", 
		"parameterName", "labelIdentifier", "labelRef", "roleIdentifier", "roleRef", 
		"pluginRef", "componentRef", "resourceGroupRef", "windowName", "pureIdentifier", 
		"identifier", "identifierList", "identifierListWithParentheses", "qualifiedIdentifier", 
		"simpleIdentifier", "dotIdentifier", "ulong_number", "real_ulong_number", 
		"ulonglong_number", "real_ulonglong_number", "literal", "signedLiteral", 
		"stringList", "textStringLiteral", "textString", "textStringHash", "textLiteral", 
		"textStringNoLinebreak", "textStringLiteralList", "numLiteral", "boolLiteral", 
		"nullLiteral", "temporalLiteral", "floatOptions", "standardFloatOptions", 
		"precision", "textOrIdentifier", "lValueIdentifier", "roleIdentifierOrText", 
		"sizeNumber", "parentheses", "equal", "optionType", "varIdentType", "setVarIdentType", 
		"identifierKeyword", "identifierKeywordsAmbiguous1RolesAndLabels", "identifierKeywordsAmbiguous2Labels", 
		"labelKeyword", "identifierKeywordsAmbiguous3Roles", "identifierKeywordsUnambiguous", 
		"roleKeyword", "lValueKeyword", "identifierKeywordsAmbiguous4SystemVariables", 
		"roleOrIdentifierKeyword", "roleOrLabelKeyword"
	};

	private static final String[] _LITERAL_NAMES = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "'='", 
		"':='", "'<=>'", "'>='", "'>'", "'<='", "'<'", "'!='", "'+'", "'-'", "'*'", 
		"'/'", "'%'", "'!'", "'~'", "'<<'", "'>>'", "'&&'", "'&'", "'^'", "'||'", 
		"'|'", "'.'", "','", "';'", "':'", "'('", "')'", "'{'", "'}'", "'_'", 
		"'->'", "'->>'", "'@'", null, "'@@'", "'\\N'", "'?'", null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "'<>'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, "ACCOUNT_SYMBOL", "ASCII_SYMBOL", "ALWAYS_SYMBOL", "BACKUP_SYMBOL", 
		"BEGIN_SYMBOL", "BYTE_SYMBOL", "CACHE_SYMBOL", "CHARSET_SYMBOL", "CHECKSUM_SYMBOL", 
		"CLOSE_SYMBOL", "COMMENT_SYMBOL", "COMMIT_SYMBOL", "CONTAINS_SYMBOL", 
		"DEALLOCATE_SYMBOL", "DO_SYMBOL", "END_SYMBOL", "EXECUTE_SYMBOL", "FLUSH_SYMBOL", 
		"FOLLOWS_SYMBOL", "FORMAT_SYMBOL", "GROUP_REPLICATION_SYMBOL", "HANDLER_SYMBOL", 
		"HELP_SYMBOL", "HOST_SYMBOL", "INSTALL_SYMBOL", "LANGUAGE_SYMBOL", "NO_SYMBOL", 
		"OPEN_SYMBOL", "OPTIONS_SYMBOL", "OWNER_SYMBOL", "PARSER_SYMBOL", "PARTITION_SYMBOL", 
		"PORT_SYMBOL", "PRECEDES_SYMBOL", "PREPARE_SYMBOL", "REMOVE_SYMBOL", "REPAIR_SYMBOL", 
		"RESET_SYMBOL", "RESTORE_SYMBOL", "ROLLBACK_SYMBOL", "SAVEPOINT_SYMBOL", 
		"SECURITY_SYMBOL", "SERVER_SYMBOL", "SIGNED_SYMBOL", "SLAVE_SYMBOL", "SOCKET_SYMBOL", 
		"SONAME_SYMBOL", "START_SYMBOL", "STOP_SYMBOL", "TRUNCATE_SYMBOL", "UNICODE_SYMBOL", 
		"UNINSTALL_SYMBOL", "UPGRADE_SYMBOL", "WRAPPER_SYMBOL", "XA_SYMBOL", "SHUTDOWN_SYMBOL", 
		"ACTION_SYMBOL", "ADDDATE_SYMBOL", "AFTER_SYMBOL", "AGAINST_SYMBOL", "AGGREGATE_SYMBOL", 
		"ALGORITHM_SYMBOL", "ANALYZE_SYMBOL", "ANY_SYMBOL", "AT_SYMBOL", "AUTHORS_SYMBOL", 
		"AUTO_INCREMENT_SYMBOL", "AUTOEXTEND_SIZE_SYMBOL", "AVG_ROW_LENGTH_SYMBOL", 
		"AVG_SYMBOL", "BINLOG_SYMBOL", "BIT_SYMBOL", "BLOCK_SYMBOL", "BOOL_SYMBOL", 
		"BOOLEAN_SYMBOL", "BTREE_SYMBOL", "CASCADED_SYMBOL", "CATALOG_NAME_SYMBOL", 
		"CHAIN_SYMBOL", "CHANGED_SYMBOL", "CHANNEL_SYMBOL", "CIPHER_SYMBOL", "CLIENT_SYMBOL", 
		"CLASS_ORIGIN_SYMBOL", "COALESCE_SYMBOL", "CODE_SYMBOL", "COLLATION_SYMBOL", 
		"COLUMN_NAME_SYMBOL", "COLUMN_FORMAT_SYMBOL", "COLUMNS_SYMBOL", "COMMITTED_SYMBOL", 
		"COMPACT_SYMBOL", "COMPLETION_SYMBOL", "COMPRESSED_SYMBOL", "COMPRESSION_SYMBOL", 
		"ENCRYPTION_SYMBOL", "CONCURRENT_SYMBOL", "CONNECTION_SYMBOL", "CONSISTENT_SYMBOL", 
		"CONSTRAINT_CATALOG_SYMBOL", "CONSTRAINT_SCHEMA_SYMBOL", "CONSTRAINT_NAME_SYMBOL", 
		"CONTEXT_SYMBOL", "CONTRIBUTORS_SYMBOL", "CPU_SYMBOL", "CUBE_SYMBOL", 
		"CURRENT_SYMBOL", "CURSOR_NAME_SYMBOL", "DATA_SYMBOL", "DATAFILE_SYMBOL", 
		"DATETIME_SYMBOL", "DATE_SYMBOL", "DAY_SYMBOL", "DEFAULT_AUTH_SYMBOL", 
		"DEFINER_SYMBOL", "DELAY_KEY_WRITE_SYMBOL", "DES_KEY_FILE_SYMBOL", "DIAGNOSTICS_SYMBOL", 
		"DIRECTORY_SYMBOL", "DISABLE_SYMBOL", "DISCARD_SYMBOL", "DISK_SYMBOL", 
		"DUMPFILE_SYMBOL", "DUPLICATE_SYMBOL", "DYNAMIC_SYMBOL", "ENDS_SYMBOL", 
		"ENUM_SYMBOL", "ENGINE_SYMBOL", "ENGINES_SYMBOL", "ERROR_SYMBOL", "ERRORS_SYMBOL", 
		"ESCAPE_SYMBOL", "EVENT_SYMBOL", "EVENTS_SYMBOL", "EVERY_SYMBOL", "EXPANSION_SYMBOL", 
		"EXPORT_SYMBOL", "EXTENDED_SYMBOL", "EXTENT_SIZE_SYMBOL", "FAULTS_SYMBOL", 
		"FAST_SYMBOL", "FOUND_SYMBOL", "ENABLE_SYMBOL", "FULL_SYMBOL", "FILE_SYMBOL", 
		"FILE_BLOCK_SIZE_SYMBOL", "FILTER_SYMBOL", "FIRST_SYMBOL", "FIXED_SYMBOL", 
		"GENERAL_SYMBOL", "GEOMETRY_SYMBOL", "GEOMETRYCOLLECTION_SYMBOL", "GET_FORMAT_SYMBOL", 
		"GRANTS_SYMBOL", "GLOBAL_SYMBOL", "HASH_SYMBOL", "HOSTS_SYMBOL", "HOUR_SYMBOL", 
		"IDENTIFIED_SYMBOL", "IGNORE_SERVER_IDS_SYMBOL", "INVOKER_SYMBOL", "IMPORT_SYMBOL", 
		"INDEXES_SYMBOL", "INITIAL_SIZE_SYMBOL", "INSTANCE_SYMBOL", "INNODB_SYMBOL", 
		"IO_SYMBOL", "IPC_SYMBOL", "ISOLATION_SYMBOL", "ISSUER_SYMBOL", "INSERT_METHOD_SYMBOL", 
		"JSON_SYMBOL", "KEY_BLOCK_SIZE_SYMBOL", "LAST_SYMBOL", "LEAVES_SYMBOL", 
		"LESS_SYMBOL", "LEVEL_SYMBOL", "LINESTRING_SYMBOL", "LIST_SYMBOL", "LOCAL_SYMBOL", 
		"LOCKS_SYMBOL", "LOGFILE_SYMBOL", "LOGS_SYMBOL", "MAX_ROWS_SYMBOL", "MASTER_SYMBOL", 
		"MASTER_HEARTBEAT_PERIOD_SYMBOL", "MASTER_HOST_SYMBOL", "MASTER_PORT_SYMBOL", 
		"MASTER_LOG_FILE_SYMBOL", "MASTER_LOG_POS_SYMBOL", "MASTER_USER_SYMBOL", 
		"MASTER_PASSWORD_SYMBOL", "MASTER_SERVER_ID_SYMBOL", "MASTER_CONNECT_RETRY_SYMBOL", 
		"MASTER_RETRY_COUNT_SYMBOL", "MASTER_DELAY_SYMBOL", "MASTER_SSL_SYMBOL", 
		"MASTER_SSL_CA_SYMBOL", "MASTER_SSL_CAPATH_SYMBOL", "MASTER_TLS_VERSION_SYMBOL", 
		"MASTER_SSL_CERT_SYMBOL", "MASTER_SSL_CIPHER_SYMBOL", "MASTER_SSL_CRL_SYMBOL", 
		"MASTER_SSL_CRLPATH_SYMBOL", "MASTER_SSL_KEY_SYMBOL", "MASTER_AUTO_POSITION_SYMBOL", 
		"MAX_CONNECTIONS_PER_HOUR_SYMBOL", "MAX_QUERIES_PER_HOUR_SYMBOL", "MAX_STATEMENT_TIME_SYMBOL", 
		"MAX_SIZE_SYMBOL", "MAX_UPDATES_PER_HOUR_SYMBOL", "MAX_USER_CONNECTIONS_SYMBOL", 
		"MEDIUM_SYMBOL", "MEMORY_SYMBOL", "MERGE_SYMBOL", "MESSAGE_TEXT_SYMBOL", 
		"MICROSECOND_SYMBOL", "MIGRATE_SYMBOL", "MINUTE_SYMBOL", "MIN_ROWS_SYMBOL", 
		"MODIFY_SYMBOL", "MODE_SYMBOL", "MONTH_SYMBOL", "MULTILINESTRING_SYMBOL", 
		"MULTIPOINT_SYMBOL", "MULTIPOLYGON_SYMBOL", "MUTEX_SYMBOL", "MYSQL_ERRNO_SYMBOL", 
		"NAME_SYMBOL", "NAMES_SYMBOL", "NATIONAL_SYMBOL", "NCHAR_SYMBOL", "NDBCLUSTER_SYMBOL", 
		"NEVER_SYMBOL", "NEXT_SYMBOL", "NEW_SYMBOL", "NO_WAIT_SYMBOL", "NODEGROUP_SYMBOL", 
		"NONE_SYMBOL", "NUMBER_SYMBOL", "NVARCHAR_SYMBOL", "OFFSET_SYMBOL", "OLD_PASSWORD_SYMBOL", 
		"ONE_SHOT_SYMBOL", "ONE_SYMBOL", "PACK_KEYS_SYMBOL", "PAGE_SYMBOL", "PARTIAL_SYMBOL", 
		"PARTITIONING_SYMBOL", "PARTITIONS_SYMBOL", "PASSWORD_SYMBOL", "PHASE_SYMBOL", 
		"PLUGIN_DIR_SYMBOL", "PLUGIN_SYMBOL", "PLUGINS_SYMBOL", "POINT_SYMBOL", 
		"POLYGON_SYMBOL", "PRESERVE_SYMBOL", "PREV_SYMBOL", "PRIVILEGES_SYMBOL", 
		"PROCESS_SYMBOL", "PROCESSLIST_SYMBOL", "PROFILE_SYMBOL", "PROFILES_SYMBOL", 
		"PROXY_SYMBOL", "QUARTER_SYMBOL", "QUERY_SYMBOL", "QUICK_SYMBOL", "READ_ONLY_SYMBOL", 
		"REBUILD_SYMBOL", "RECOVER_SYMBOL", "REDO_BUFFER_SIZE_SYMBOL", "REDOFILE_SYMBOL", 
		"REDUNDANT_SYMBOL", "RELAY_SYMBOL", "RELAYLOG_SYMBOL", "RELAY_LOG_FILE_SYMBOL", 
		"RELAY_LOG_POS_SYMBOL", "RELAY_THREAD_SYMBOL", "RELOAD_SYMBOL", "REORGANIZE_SYMBOL", 
		"REPEATABLE_SYMBOL", "REPLICATION_SYMBOL", "REPLICATE_DO_DB_SYMBOL", "REPLICATE_IGNORE_DB_SYMBOL", 
		"REPLICATE_DO_TABLE_SYMBOL", "REPLICATE_IGNORE_TABLE_SYMBOL", "REPLICATE_WILD_DO_TABLE_SYMBOL", 
		"REPLICATE_WILD_IGNORE_TABLE_SYMBOL", "REPLICATE_REWRITE_DB_SYMBOL", "RESUME_SYMBOL", 
		"RETURNED_SQLSTATE_SYMBOL", "RETURNS_SYMBOL", "REVERSE_SYMBOL", "ROLLUP_SYMBOL", 
		"ROTATE_SYMBOL", "ROUTINE_SYMBOL", "ROWS_SYMBOL", "ROW_COUNT_SYMBOL", 
		"ROW_FORMAT_SYMBOL", "ROW_SYMBOL", "RTREE_SYMBOL", "SCHEDULE_SYMBOL", 
		"SCHEMA_NAME_SYMBOL", "SECOND_SYMBOL", "SERIAL_SYMBOL", "SERIALIZABLE_SYMBOL", 
		"SESSION_SYMBOL", "SIMPLE_SYMBOL", "SHARE_SYMBOL", "SLOW_SYMBOL", "SNAPSHOT_SYMBOL", 
		"SOUNDS_SYMBOL", "SOURCE_SYMBOL", "SQL_AFTER_GTIDS_SYMBOL", "SQL_AFTER_MTS_GAPS_SYMBOL", 
		"SQL_BEFORE_GTIDS_SYMBOL", "SQL_CACHE_SYMBOL", "SQL_BUFFER_RESULT_SYMBOL", 
		"SQL_NO_CACHE_SYMBOL", "SQL_THREAD_SYMBOL", "STACKED_SYMBOL", "STARTS_SYMBOL", 
		"STATS_AUTO_RECALC_SYMBOL", "STATS_PERSISTENT_SYMBOL", "STATS_SAMPLE_PAGES_SYMBOL", 
		"STATUS_SYMBOL", "STORAGE_SYMBOL", "STRING_SYMBOL", "SUBCLASS_ORIGIN_SYMBOL", 
		"SUBDATE_SYMBOL", "SUBJECT_SYMBOL", "SUBPARTITION_SYMBOL", "SUBPARTITIONS_SYMBOL", 
		"SUPER_SYMBOL", "SUSPEND_SYMBOL", "SWAPS_SYMBOL", "SWITCHES_SYMBOL", "TABLE_NAME_SYMBOL", 
		"TABLES_SYMBOL", "TABLE_CHECKSUM_SYMBOL", "TABLESPACE_SYMBOL", "TEMPORARY_SYMBOL", 
		"TEMPTABLE_SYMBOL", "TEXT_SYMBOL", "THAN_SYMBOL", "TRANSACTION_SYMBOL", 
		"TRIGGERS_SYMBOL", "TIMESTAMP_SYMBOL", "TIMESTAMP_ADD_SYMBOL", "TIMESTAMP_DIFF_SYMBOL", 
		"TIME_SYMBOL", "TYPES_SYMBOL", "TYPE_SYMBOL", "UDF_RETURNS_SYMBOL", "FUNCTION_SYMBOL", 
		"UNCOMMITTED_SYMBOL", "UNDEFINED_SYMBOL", "UNDO_BUFFER_SIZE_SYMBOL", "UNDOFILE_SYMBOL", 
		"UNKNOWN_SYMBOL", "UNTIL_SYMBOL", "USER_RESOURCES_SYMBOL", "USER_SYMBOL", 
		"USE_FRM_SYMBOL", "VARIABLES_SYMBOL", "VIEW_SYMBOL", "VALUE_SYMBOL", "WARNINGS_SYMBOL", 
		"WAIT_SYMBOL", "WEEK_SYMBOL", "WORK_SYMBOL", "WEIGHT_STRING_SYMBOL", "X509_SYMBOL", 
		"XID_SYMBOL", "XML_SYMBOL", "YEAR_SYMBOL", "NOT2_SYMBOL", "CONCAT_PIPES_SYMBOL", 
		"INT_NUMBER", "LONG_NUMBER", "ULONGLONG_NUMBER", "EQUAL_OPERATOR", "ASSIGN_OPERATOR", 
		"NULL_SAFE_EQUAL_OPERATOR", "GREATER_OR_EQUAL_OPERATOR", "GREATER_THAN_OPERATOR", 
		"LESS_OR_EQUAL_OPERATOR", "LESS_THAN_OPERATOR", "NOT_EQUAL_OPERATOR", 
		"PLUS_OPERATOR", "MINUS_OPERATOR", "MULT_OPERATOR", "DIV_OPERATOR", "MOD_OPERATOR", 
		"LOGICAL_NOT_OPERATOR", "BITWISE_NOT_OPERATOR", "SHIFT_LEFT_OPERATOR", 
		"SHIFT_RIGHT_OPERATOR", "LOGICAL_AND_OPERATOR", "BITWISE_AND_OPERATOR", 
		"BITWISE_XOR_OPERATOR", "LOGICAL_OR_OPERATOR", "BITWISE_OR_OPERATOR", 
		"DOT_SYMBOL", "COMMA_SYMBOL", "SEMICOLON_SYMBOL", "COLON_SYMBOL", "OPEN_PAR_SYMBOL", 
		"CLOSE_PAR_SYMBOL", "OPEN_CURLY_SYMBOL", "CLOSE_CURLY_SYMBOL", "UNDERLINE_SYMBOL", 
		"JSON_SEPARATOR_SYMBOL", "JSON_UNQUOTED_SEPARATOR_SYMBOL", "AT_SIGN_SYMBOL", 
		"AT_TEXT_SUFFIX", "AT_AT_SIGN_SYMBOL", "NULL2_SYMBOL", "PARAM_MARKER", 
		"HEX_NUMBER", "BIN_NUMBER", "DECIMAL_NUMBER", "FLOAT_NUMBER", "ACCESSIBLE_SYMBOL", 
		"ADD_SYMBOL", "ALL_SYMBOL", "ALTER_SYMBOL", "ANALYSE_SYMBOL", "AND_SYMBOL", 
		"AS_SYMBOL", "ASC_SYMBOL", "ASENSITIVE_SYMBOL", "BEFORE_SYMBOL", "BETWEEN_SYMBOL", 
		"BIGINT_SYMBOL", "BINARY_SYMBOL", "BIN_NUM_SYMBOL", "BIT_AND_SYMBOL", 
		"BIT_OR_SYMBOL", "BIT_XOR_SYMBOL", "BLOB_SYMBOL", "BOTH_SYMBOL", "BY_SYMBOL", 
		"CALL_SYMBOL", "CASCADE_SYMBOL", "CASE_SYMBOL", "CAST_SYMBOL", "CHANGE_SYMBOL", 
		"CHAR_SYMBOL", "CHECK_SYMBOL", "COLLATE_SYMBOL", "COLUMN_SYMBOL", "CONDITION_SYMBOL", 
		"CONSTRAINT_SYMBOL", "CONTINUE_SYMBOL", "CONVERT_SYMBOL", "COUNT_SYMBOL", 
		"CREATE_SYMBOL", "CROSS_SYMBOL", "CURDATE_SYMBOL", "CURRENT_DATE_SYMBOL", 
		"CURRENT_TIME_SYMBOL", "CURRENT_USER_SYMBOL", "CURSOR_SYMBOL", "CURTIME_SYMBOL", 
		"DATABASE_SYMBOL", "DATABASES_SYMBOL", "DATE_ADD_SYMBOL", "DATE_SUB_SYMBOL", 
		"DAY_HOUR_SYMBOL", "DAY_MICROSECOND_SYMBOL", "DAY_MINUTE_SYMBOL", "DAY_SECOND_SYMBOL", 
		"DECIMAL_NUM_SYMBOL", "DECIMAL_SYMBOL", "DECLARE_SYMBOL", "DEFAULT_SYMBOL", 
		"DELAYED_SYMBOL", "DELETE_SYMBOL", "DESC_SYMBOL", "DESCRIBE_SYMBOL", "DETERMINISTIC_SYMBOL", 
		"DISTINCT_SYMBOL", "DIV_SYMBOL", "DOUBLE_SYMBOL", "DROP_SYMBOL", "DUAL_SYMBOL", 
		"EACH_SYMBOL", "ELSE_SYMBOL", "ELSEIF_SYMBOL", "ENCLOSED_SYMBOL", "END_OF_INPUT_SYMBOL", 
		"ESCAPED_SYMBOL", "EXCHANGE_SYMBOL", "EXISTS_SYMBOL", "EXIT_SYMBOL", "EXPIRE_SYMBOL", 
		"EXPLAIN_SYMBOL", "EXTRACT_SYMBOL", "FALSE_SYMBOL", "FETCH_SYMBOL", "FLOAT_SYMBOL", 
		"FORCE_SYMBOL", "FOREIGN_SYMBOL", "FOR_SYMBOL", "FROM_SYMBOL", "FULLTEXT_SYMBOL", 
		"GET_SYMBOL", "GENERATED_SYMBOL", "GRANT_SYMBOL", "GROUP_SYMBOL", "GROUP_CONCAT_SYMBOL", 
		"HAVING_SYMBOL", "HIGH_PRIORITY_SYMBOL", "HOUR_MICROSECOND_SYMBOL", "HOUR_MINUTE_SYMBOL", 
		"HOUR_SECOND_SYMBOL", "IF_SYMBOL", "IGNORE_SYMBOL", "INDEX_SYMBOL", "INFILE_SYMBOL", 
		"INNER_SYMBOL", "INOUT_SYMBOL", "INSENSITIVE_SYMBOL", "INSERT_SYMBOL", 
		"INTERVAL_SYMBOL", "INTO_SYMBOL", "INT_SYMBOL", "IN_SYMBOL", "IO_AFTER_GTIDS_SYMBOL", 
		"IO_BEFORE_GTIDS_SYMBOL", "IS_SYMBOL", "ITERATE_SYMBOL", "JOIN_SYMBOL", 
		"KEYS_SYMBOL", "KEY_SYMBOL", "KILL_SYMBOL", "LEADING_SYMBOL", "LEAVE_SYMBOL", 
		"LEFT_SYMBOL", "LIKE_SYMBOL", "LIMIT_SYMBOL", "LINEAR_SYMBOL", "LINES_SYMBOL", 
		"LOAD_SYMBOL", "LOCATOR_SYMBOL", "LOCK_SYMBOL", "LONGBLOB_SYMBOL", "LONGTEXT_SYMBOL", 
		"LONG_NUM_SYMBOL", "LONG_SYMBOL", "LOOP_SYMBOL", "LOW_PRIORITY_SYMBOL", 
		"MASTER_BIND_SYMBOL", "MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL", "MATCH_SYMBOL", 
		"MAX_SYMBOL", "MAXVALUE_SYMBOL", "MEDIUMBLOB_SYMBOL", "MEDIUMINT_SYMBOL", 
		"MEDIUMTEXT_SYMBOL", "MID_SYMBOL", "MINUTE_MICROSECOND_SYMBOL", "MINUTE_SECOND_SYMBOL", 
		"MIN_SYMBOL", "MODIFIES_SYMBOL", "MOD_SYMBOL", "NATURAL_SYMBOL", "NCHAR_STRING_SYMBOL", 
		"NEG_SYMBOL", "NONBLOCKING_SYMBOL", "NOT_SYMBOL", "NOW_SYMBOL", "NO_WRITE_TO_BINLOG_SYMBOL", 
		"NULL_SYMBOL", "NUMERIC_SYMBOL", "OFFLINE_SYMBOL", "ON_SYMBOL", "ONLINE_SYMBOL", 
		"ONLY_SYMBOL", "OPTIMIZE_SYMBOL", "OPTIMIZER_COSTS_SYMBOL", "OPTION_SYMBOL", 
		"OPTIONALLY_SYMBOL", "ORDER_SYMBOL", "OR_SYMBOL", "OUTER_SYMBOL", "OUTFILE_SYMBOL", 
		"OUT_SYMBOL", "POSITION_SYMBOL", "PRECISION_SYMBOL", "PRIMARY_SYMBOL", 
		"PROCEDURE_SYMBOL", "PURGE_SYMBOL", "RANGE_SYMBOL", "READS_SYMBOL", "READ_SYMBOL", 
		"READ_WRITE_SYMBOL", "REAL_SYMBOL", "REFERENCES_SYMBOL", "REGEXP_SYMBOL", 
		"RELEASE_SYMBOL", "RENAME_SYMBOL", "REPEAT_SYMBOL", "REPLACE_SYMBOL", 
		"REQUIRE_SYMBOL", "RESIGNAL_SYMBOL", "RESTRICT_SYMBOL", "RETURN_SYMBOL", 
		"REVOKE_SYMBOL", "RIGHT_SYMBOL", "SECOND_MICROSECOND_SYMBOL", "SELECT_SYMBOL", 
		"SENSITIVE_SYMBOL", "SEPARATOR_SYMBOL", "SERVER_OPTIONS_SYMBOL", "SESSION_USER_SYMBOL", 
		"SET_SYMBOL", "SET_VAR_SYMBOL", "SHOW_SYMBOL", "SIGNAL_SYMBOL", "SMALLINT_SYMBOL", 
		"SPATIAL_SYMBOL", "SPECIFIC_SYMBOL", "SQLEXCEPTION_SYMBOL", "SQLSTATE_SYMBOL", 
		"SQLWARNING_SYMBOL", "SQL_BIG_RESULT_SYMBOL", "SQL_CALC_FOUND_ROWS_SYMBOL", 
		"SQL_SMALL_RESULT_SYMBOL", "SQL_SYMBOL", "SSL_SYMBOL", "STARTING_SYMBOL", 
		"STDDEV_SAMP_SYMBOL", "STDDEV_SYMBOL", "STDDEV_POP_SYMBOL", "STD_SYMBOL", 
		"STORED_SYMBOL", "STRAIGHT_JOIN_SYMBOL", "SUBSTR_SYMBOL", "SUBSTRING_SYMBOL", 
		"SUM_SYMBOL", "SYSDATE_SYMBOL", "SYSTEM_USER_SYMBOL", "TABLE_REF_PRIORITY_SYMBOL", 
		"TABLE_SYMBOL", "TERMINATED_SYMBOL", "THEN_SYMBOL", "TINYBLOB_SYMBOL", 
		"TINYINT_SYMBOL", "TINYTEXT_SYMBOL", "TO_SYMBOL", "TRAILING_SYMBOL", "TRIGGER_SYMBOL", 
		"TRIM_SYMBOL", "TRUE_SYMBOL", "UNDO_SYMBOL", "UNION_SYMBOL", "UNIQUE_SYMBOL", 
		"UNLOCK_SYMBOL", "UNSIGNED_SYMBOL", "UPDATE_SYMBOL", "USAGE_SYMBOL", "USE_SYMBOL", 
		"USING_SYMBOL", "UTC_DATE_SYMBOL", "UTC_TIMESTAMP_SYMBOL", "UTC_TIME_SYMBOL", 
		"VALIDATION_SYMBOL", "VALUES_SYMBOL", "VARBINARY_SYMBOL", "VARCHAR_SYMBOL", 
		"VARIANCE_SYMBOL", "VARYING_SYMBOL", "VAR_POP_SYMBOL", "VAR_SAMP_SYMBOL", 
		"VIRTUAL_SYMBOL", "WHEN_SYMBOL", "WHERE_SYMBOL", "WHILE_SYMBOL", "WITH_SYMBOL", 
		"WITHOUT_SYMBOL", "WRITE_SYMBOL", "XOR_SYMBOL", "YEAR_MONTH_SYMBOL", "ZEROFILL_SYMBOL", 
		"PERSIST_SYMBOL", "ROLE_SYMBOL", "ADMIN_SYMBOL", "INVISIBLE_SYMBOL", "VISIBLE_SYMBOL", 
		"EXCEPT_SYMBOL", "COMPONENT_SYMBOL", "RECURSIVE_SYMBOL", "JSON_OBJECTAGG_SYMBOL", 
		"JSON_ARRAYAGG_SYMBOL", "OF_SYMBOL", "SKIP_SYMBOL", "LOCKED_SYMBOL", "NOWAIT_SYMBOL", 
		"GROUPING_SYMBOL", "PERSIST_ONLY_SYMBOL", "HISTOGRAM_SYMBOL", "BUCKETS_SYMBOL", 
		"REMOTE_SYMBOL", "CLONE_SYMBOL", "CUME_DIST_SYMBOL", "DENSE_RANK_SYMBOL", 
		"EXCLUDE_SYMBOL", "FIRST_VALUE_SYMBOL", "FOLLOWING_SYMBOL", "GROUPS_SYMBOL", 
		"LAG_SYMBOL", "LAST_VALUE_SYMBOL", "LEAD_SYMBOL", "NTH_VALUE_SYMBOL", 
		"NTILE_SYMBOL", "NULLS_SYMBOL", "OTHERS_SYMBOL", "OVER_SYMBOL", "PERCENT_RANK_SYMBOL", 
		"PRECEDING_SYMBOL", "RANK_SYMBOL", "RESPECT_SYMBOL", "ROW_NUMBER_SYMBOL", 
		"TIES_SYMBOL", "UNBOUNDED_SYMBOL", "WINDOW_SYMBOL", "EMPTY_SYMBOL", "JSON_TABLE_SYMBOL", 
		"NESTED_SYMBOL", "ORDINALITY_SYMBOL", "PATH_SYMBOL", "HISTORY_SYMBOL", 
		"REUSE_SYMBOL", "SRID_SYMBOL", "THREAD_PRIORITY_SYMBOL", "RESOURCE_SYMBOL", 
		"SYSTEM_SYMBOL", "VCPU_SYMBOL", "MASTER_PUBLIC_KEY_PATH_SYMBOL", "GET_MASTER_PUBLIC_KEY_SYMBOL", 
		"RESTART_SYMBOL", "DEFINITION_SYMBOL", "DESCRIPTION_SYMBOL", "ORGANIZATION_SYMBOL", 
		"REFERENCE_SYMBOL", "OPTIONAL_SYMBOL", "SECONDARY_SYMBOL", "SECONDARY_ENGINE_SYMBOL", 
		"SECONDARY_LOAD_SYMBOL", "SECONDARY_UNLOAD_SYMBOL", "ACTIVE_SYMBOL", "INACTIVE_SYMBOL", 
		"LATERAL_SYMBOL", "RETAIN_SYMBOL", "OLD_SYMBOL", "NETWORK_NAMESPACE_SYMBOL", 
		"ENFORCED_SYMBOL", "ARRAY_SYMBOL", "OJ_SYMBOL", "MEMBER_SYMBOL", "RANDOM_SYMBOL", 
		"MASTER_COMPRESSION_ALGORITHM_SYMBOL", "MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL", 
		"PRIVILEGE_CHECKS_USER_SYMBOL", "MASTER_TLS_CIPHERSUITES_SYMBOL", "WHITESPACE", 
		"INVALID_INPUT", "UNDERSCORE_CHARSET", "IDENTIFIER", "NCHAR_TEXT", "BACK_TICK_QUOTED_ID", 
		"DOUBLE_QUOTED_TEXT", "SINGLE_QUOTED_TEXT", "VERSION_COMMENT_START", "MYSQL_COMMENT_START", 
		"VERSION_COMMENT_END", "BLOCK_COMMENT", "POUND_COMMENT", "DASHDASH_COMMENT", 
		"NOT_EQUAL2_OPERATOR"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "MySQLParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public MySQLParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class QueryContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(MySQLParser.EOF, 0); }
		public SimpleStatementContext simpleStatement() {
			return getRuleContext(SimpleStatementContext.class,0);
		}
		public BeginWorkContext beginWork() {
			return getRuleContext(BeginWorkContext.class,0);
		}
		public TerminalNode SEMICOLON_SYMBOL() { return getToken(MySQLParser.SEMICOLON_SYMBOL, 0); }
		public QueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query; }
	}

	public final QueryContext query() throws RecognitionException {
		QueryContext _localctx = new QueryContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_query);
		try {
			setState(1222);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1210);
				match(EOF);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1213);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,0,_ctx) ) {
				case 1:
					{
					setState(1211);
					simpleStatement();
					}
					break;
				case 2:
					{
					setState(1212);
					beginWork();
					}
					break;
				}
				setState(1220);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SEMICOLON_SYMBOL:
					{
					setState(1215);
					match(SEMICOLON_SYMBOL);
					setState(1217);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1,_ctx) ) {
					case 1:
						{
						setState(1216);
						match(EOF);
						}
						break;
					}
					}
					break;
				case EOF:
					{
					setState(1219);
					match(EOF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleStatementContext extends ParserRuleContext {
		public AlterStatementContext alterStatement() {
			return getRuleContext(AlterStatementContext.class,0);
		}
		public CreateStatementContext createStatement() {
			return getRuleContext(CreateStatementContext.class,0);
		}
		public DropStatementContext dropStatement() {
			return getRuleContext(DropStatementContext.class,0);
		}
		public RenameTableStatementContext renameTableStatement() {
			return getRuleContext(RenameTableStatementContext.class,0);
		}
		public TruncateTableStatementContext truncateTableStatement() {
			return getRuleContext(TruncateTableStatementContext.class,0);
		}
		public ImportStatementContext importStatement() {
			return getRuleContext(ImportStatementContext.class,0);
		}
		public CallStatementContext callStatement() {
			return getRuleContext(CallStatementContext.class,0);
		}
		public DeleteStatementContext deleteStatement() {
			return getRuleContext(DeleteStatementContext.class,0);
		}
		public DoStatementContext doStatement() {
			return getRuleContext(DoStatementContext.class,0);
		}
		public HandlerStatementContext handlerStatement() {
			return getRuleContext(HandlerStatementContext.class,0);
		}
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public LoadStatementContext loadStatement() {
			return getRuleContext(LoadStatementContext.class,0);
		}
		public ReplaceStatementContext replaceStatement() {
			return getRuleContext(ReplaceStatementContext.class,0);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public UpdateStatementContext updateStatement() {
			return getRuleContext(UpdateStatementContext.class,0);
		}
		public TransactionOrLockingStatementContext transactionOrLockingStatement() {
			return getRuleContext(TransactionOrLockingStatementContext.class,0);
		}
		public ReplicationStatementContext replicationStatement() {
			return getRuleContext(ReplicationStatementContext.class,0);
		}
		public PreparedStatementContext preparedStatement() {
			return getRuleContext(PreparedStatementContext.class,0);
		}
		public CloneStatementContext cloneStatement() {
			return getRuleContext(CloneStatementContext.class,0);
		}
		public AccountManagementStatementContext accountManagementStatement() {
			return getRuleContext(AccountManagementStatementContext.class,0);
		}
		public TableAdministrationStatementContext tableAdministrationStatement() {
			return getRuleContext(TableAdministrationStatementContext.class,0);
		}
		public InstallUninstallStatmentContext installUninstallStatment() {
			return getRuleContext(InstallUninstallStatmentContext.class,0);
		}
		public SetStatementContext setStatement() {
			return getRuleContext(SetStatementContext.class,0);
		}
		public ShowStatementContext showStatement() {
			return getRuleContext(ShowStatementContext.class,0);
		}
		public ResourceGroupManagementContext resourceGroupManagement() {
			return getRuleContext(ResourceGroupManagementContext.class,0);
		}
		public OtherAdministrativeStatementContext otherAdministrativeStatement() {
			return getRuleContext(OtherAdministrativeStatementContext.class,0);
		}
		public UtilityStatementContext utilityStatement() {
			return getRuleContext(UtilityStatementContext.class,0);
		}
		public GetDiagnosticsContext getDiagnostics() {
			return getRuleContext(GetDiagnosticsContext.class,0);
		}
		public SignalStatementContext signalStatement() {
			return getRuleContext(SignalStatementContext.class,0);
		}
		public ResignalStatementContext resignalStatement() {
			return getRuleContext(ResignalStatementContext.class,0);
		}
		public SimpleStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleStatement; }
	}

	public final SimpleStatementContext simpleStatement() throws RecognitionException {
		SimpleStatementContext _localctx = new SimpleStatementContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_simpleStatement);
		try {
			setState(1258);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,4,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1224);
				alterStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1225);
				createStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1226);
				dropStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1227);
				renameTableStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1228);
				truncateTableStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1229);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(1230);
				importStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1231);
				callStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1232);
				deleteStatement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1233);
				doStatement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1234);
				handlerStatement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1235);
				insertStatement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1236);
				loadStatement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1237);
				replaceStatement();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1238);
				selectStatement();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1239);
				updateStatement();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1240);
				transactionOrLockingStatement();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1241);
				replicationStatement();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1242);
				preparedStatement();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1243);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(1244);
				cloneStatement();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1245);
				accountManagementStatement();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1246);
				tableAdministrationStatement();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(1247);
				installUninstallStatment();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(1248);
				setStatement();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(1249);
				showStatement();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(1250);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(1251);
				resourceGroupManagement();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(1252);
				otherAdministrativeStatement();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(1253);
				utilityStatement();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(1254);
				if (!(serverVersion >= 50604)) throw new FailedPredicateException(this, "serverVersion >= 50604");
				setState(1255);
				getDiagnostics();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(1256);
				signalStatement();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(1257);
				resignalStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterStatementContext extends ParserRuleContext {
		public TerminalNode ALTER_SYMBOL() { return getToken(MySQLParser.ALTER_SYMBOL, 0); }
		public AlterTableContext alterTable() {
			return getRuleContext(AlterTableContext.class,0);
		}
		public AlterDatabaseContext alterDatabase() {
			return getRuleContext(AlterDatabaseContext.class,0);
		}
		public TerminalNode PROCEDURE_SYMBOL() { return getToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
		public ProcedureRefContext procedureRef() {
			return getRuleContext(ProcedureRefContext.class,0);
		}
		public TerminalNode FUNCTION_SYMBOL() { return getToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		public FunctionRefContext functionRef() {
			return getRuleContext(FunctionRefContext.class,0);
		}
		public AlterViewContext alterView() {
			return getRuleContext(AlterViewContext.class,0);
		}
		public AlterEventContext alterEvent() {
			return getRuleContext(AlterEventContext.class,0);
		}
		public AlterTablespaceContext alterTablespace() {
			return getRuleContext(AlterTablespaceContext.class,0);
		}
		public AlterUndoTablespaceContext alterUndoTablespace() {
			return getRuleContext(AlterUndoTablespaceContext.class,0);
		}
		public AlterLogfileGroupContext alterLogfileGroup() {
			return getRuleContext(AlterLogfileGroupContext.class,0);
		}
		public AlterServerContext alterServer() {
			return getRuleContext(AlterServerContext.class,0);
		}
		public TerminalNode INSTANCE_SYMBOL() { return getToken(MySQLParser.INSTANCE_SYMBOL, 0); }
		public TerminalNode ROTATE_SYMBOL() { return getToken(MySQLParser.ROTATE_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public TerminalNode MASTER_SYMBOL() { return getToken(MySQLParser.MASTER_SYMBOL, 0); }
		public TerminalNode KEY_SYMBOL() { return getToken(MySQLParser.KEY_SYMBOL, 0); }
		public RoutineAlterOptionsContext routineAlterOptions() {
			return getRuleContext(RoutineAlterOptionsContext.class,0);
		}
		public AlterStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStatement; }
	}

	public final AlterStatementContext alterStatement() throws RecognitionException {
		AlterStatementContext _localctx = new AlterStatementContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_alterStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1260);
			match(ALTER_SYMBOL);
			setState(1287);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,7,_ctx) ) {
			case 1:
				{
				setState(1261);
				alterTable();
				}
				break;
			case 2:
				{
				setState(1262);
				alterDatabase();
				}
				break;
			case 3:
				{
				setState(1263);
				match(PROCEDURE_SYMBOL);
				setState(1264);
				procedureRef();
				setState(1266);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COMMENT_SYMBOL) | (1L << CONTAINS_SYMBOL) | (1L << LANGUAGE_SYMBOL) | (1L << NO_SYMBOL))) != 0) || _la==DETERMINISTIC_SYMBOL || ((((_la - 567)) & ~0x3f) == 0 && ((1L << (_la - 567)) & ((1L << (MODIFIES_SYMBOL - 567)) | (1L << (NOT_SYMBOL - 567)) | (1L << (READS_SYMBOL - 567)))) != 0) || _la==SQL_SYMBOL) {
					{
					setState(1265);
					routineAlterOptions();
					}
				}

				}
				break;
			case 4:
				{
				setState(1268);
				match(FUNCTION_SYMBOL);
				setState(1269);
				functionRef();
				setState(1271);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COMMENT_SYMBOL) | (1L << CONTAINS_SYMBOL) | (1L << LANGUAGE_SYMBOL) | (1L << NO_SYMBOL))) != 0) || _la==DETERMINISTIC_SYMBOL || ((((_la - 567)) & ~0x3f) == 0 && ((1L << (_la - 567)) & ((1L << (MODIFIES_SYMBOL - 567)) | (1L << (NOT_SYMBOL - 567)) | (1L << (READS_SYMBOL - 567)))) != 0) || _la==SQL_SYMBOL) {
					{
					setState(1270);
					routineAlterOptions();
					}
				}

				}
				break;
			case 5:
				{
				setState(1273);
				alterView();
				}
				break;
			case 6:
				{
				setState(1274);
				alterEvent();
				}
				break;
			case 7:
				{
				setState(1275);
				alterTablespace();
				}
				break;
			case 8:
				{
				setState(1276);
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				setState(1277);
				alterUndoTablespace();
				}
				break;
			case 9:
				{
				setState(1278);
				alterLogfileGroup();
				}
				break;
			case 10:
				{
				setState(1279);
				alterServer();
				}
				break;
			case 11:
				{
				setState(1280);
				if (!(serverVersion >= 50713)) throw new FailedPredicateException(this, "serverVersion >= 50713");
				setState(1281);
				match(INSTANCE_SYMBOL);
				setState(1282);
				match(ROTATE_SYMBOL);
				setState(1283);
				textOrIdentifier();
				setState(1284);
				match(MASTER_SYMBOL);
				setState(1285);
				match(KEY_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDatabaseContext extends ParserRuleContext {
		public TerminalNode DATABASE_SYMBOL() { return getToken(MySQLParser.DATABASE_SYMBOL, 0); }
		public SchemaRefContext schemaRef() {
			return getRuleContext(SchemaRefContext.class,0);
		}
		public TerminalNode UPGRADE_SYMBOL() { return getToken(MySQLParser.UPGRADE_SYMBOL, 0); }
		public TerminalNode DATA_SYMBOL() { return getToken(MySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode DIRECTORY_SYMBOL() { return getToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
		public TerminalNode NAME_SYMBOL() { return getToken(MySQLParser.NAME_SYMBOL, 0); }
		public List<CreateDatabaseOptionContext> createDatabaseOption() {
			return getRuleContexts(CreateDatabaseOptionContext.class);
		}
		public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return getRuleContext(CreateDatabaseOptionContext.class,i);
		}
		public AlterDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDatabase; }
	}

	public final AlterDatabaseContext alterDatabase() throws RecognitionException {
		AlterDatabaseContext _localctx = new AlterDatabaseContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_alterDatabase);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1289);
			match(DATABASE_SYMBOL);
			setState(1290);
			schemaRef();
			setState(1301);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
			case 1:
				{
				setState(1292); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(1291);
						createDatabaseOption();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1294); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,8,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				{
				setState(1296);
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				setState(1297);
				match(UPGRADE_SYMBOL);
				setState(1298);
				match(DATA_SYMBOL);
				setState(1299);
				match(DIRECTORY_SYMBOL);
				setState(1300);
				match(NAME_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterEventContext extends ParserRuleContext {
		public TerminalNode EVENT_SYMBOL() { return getToken(MySQLParser.EVENT_SYMBOL, 0); }
		public EventRefContext eventRef() {
			return getRuleContext(EventRefContext.class,0);
		}
		public DefinerClauseContext definerClause() {
			return getRuleContext(DefinerClauseContext.class,0);
		}
		public List<TerminalNode> ON_SYMBOL() { return getTokens(MySQLParser.ON_SYMBOL); }
		public TerminalNode ON_SYMBOL(int i) {
			return getToken(MySQLParser.ON_SYMBOL, i);
		}
		public TerminalNode SCHEDULE_SYMBOL() { return getToken(MySQLParser.SCHEDULE_SYMBOL, 0); }
		public ScheduleContext schedule() {
			return getRuleContext(ScheduleContext.class,0);
		}
		public TerminalNode COMPLETION_SYMBOL() { return getToken(MySQLParser.COMPLETION_SYMBOL, 0); }
		public TerminalNode PRESERVE_SYMBOL() { return getToken(MySQLParser.PRESERVE_SYMBOL, 0); }
		public TerminalNode RENAME_SYMBOL() { return getToken(MySQLParser.RENAME_SYMBOL, 0); }
		public TerminalNode TO_SYMBOL() { return getToken(MySQLParser.TO_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode ENABLE_SYMBOL() { return getToken(MySQLParser.ENABLE_SYMBOL, 0); }
		public TerminalNode DISABLE_SYMBOL() { return getToken(MySQLParser.DISABLE_SYMBOL, 0); }
		public TerminalNode COMMENT_SYMBOL() { return getToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode DO_SYMBOL() { return getToken(MySQLParser.DO_SYMBOL, 0); }
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public TerminalNode NOT_SYMBOL() { return getToken(MySQLParser.NOT_SYMBOL, 0); }
		public TerminalNode SLAVE_SYMBOL() { return getToken(MySQLParser.SLAVE_SYMBOL, 0); }
		public AlterEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterEvent; }
	}

	public final AlterEventContext alterEvent() throws RecognitionException {
		AlterEventContext _localctx = new AlterEventContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_alterEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1304);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				setState(1303);
				definerClause();
				}
			}

			setState(1306);
			match(EVENT_SYMBOL);
			setState(1307);
			eventRef();
			setState(1311);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
			case 1:
				{
				setState(1308);
				match(ON_SYMBOL);
				setState(1309);
				match(SCHEDULE_SYMBOL);
				setState(1310);
				schedule();
				}
				break;
			}
			setState(1319);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON_SYMBOL) {
				{
				setState(1313);
				match(ON_SYMBOL);
				setState(1314);
				match(COMPLETION_SYMBOL);
				setState(1316);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT_SYMBOL) {
					{
					setState(1315);
					match(NOT_SYMBOL);
					}
				}

				setState(1318);
				match(PRESERVE_SYMBOL);
				}
			}

			setState(1324);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RENAME_SYMBOL) {
				{
				setState(1321);
				match(RENAME_SYMBOL);
				setState(1322);
				match(TO_SYMBOL);
				setState(1323);
				identifier();
				}
			}

			setState(1332);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENABLE_SYMBOL:
				{
				setState(1326);
				match(ENABLE_SYMBOL);
				}
				break;
			case DISABLE_SYMBOL:
				{
				setState(1327);
				match(DISABLE_SYMBOL);
				setState(1330);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON_SYMBOL) {
					{
					setState(1328);
					match(ON_SYMBOL);
					setState(1329);
					match(SLAVE_SYMBOL);
					}
				}

				}
				break;
			case EOF:
			case COMMENT_SYMBOL:
			case DO_SYMBOL:
			case SEMICOLON_SYMBOL:
				break;
			default:
				break;
			}
			setState(1336);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT_SYMBOL) {
				{
				setState(1334);
				match(COMMENT_SYMBOL);
				setState(1335);
				textLiteral();
				}
			}

			setState(1340);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DO_SYMBOL) {
				{
				setState(1338);
				match(DO_SYMBOL);
				setState(1339);
				compoundStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterLogfileGroupContext extends ParserRuleContext {
		public TerminalNode LOGFILE_SYMBOL() { return getToken(MySQLParser.LOGFILE_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MySQLParser.GROUP_SYMBOL, 0); }
		public LogfileGroupRefContext logfileGroupRef() {
			return getRuleContext(LogfileGroupRefContext.class,0);
		}
		public TerminalNode ADD_SYMBOL() { return getToken(MySQLParser.ADD_SYMBOL, 0); }
		public TerminalNode UNDOFILE_SYMBOL() { return getToken(MySQLParser.UNDOFILE_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public AlterLogfileGroupOptionsContext alterLogfileGroupOptions() {
			return getRuleContext(AlterLogfileGroupOptionsContext.class,0);
		}
		public AlterLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterLogfileGroup; }
	}

	public final AlterLogfileGroupContext alterLogfileGroup() throws RecognitionException {
		AlterLogfileGroupContext _localctx = new AlterLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_alterLogfileGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1342);
			match(LOGFILE_SYMBOL);
			setState(1343);
			match(GROUP_SYMBOL);
			setState(1344);
			logfileGroupRef();
			setState(1345);
			match(ADD_SYMBOL);
			setState(1346);
			match(UNDOFILE_SYMBOL);
			setState(1347);
			textLiteral();
			setState(1349);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL) {
				{
				setState(1348);
				alterLogfileGroupOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterLogfileGroupOptionsContext extends ParserRuleContext {
		public List<AlterLogfileGroupOptionContext> alterLogfileGroupOption() {
			return getRuleContexts(AlterLogfileGroupOptionContext.class);
		}
		public AlterLogfileGroupOptionContext alterLogfileGroupOption(int i) {
			return getRuleContext(AlterLogfileGroupOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public AlterLogfileGroupOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterLogfileGroupOptions; }
	}

	public final AlterLogfileGroupOptionsContext alterLogfileGroupOptions() throws RecognitionException {
		AlterLogfileGroupOptionsContext _localctx = new AlterLogfileGroupOptionsContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_alterLogfileGroupOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1351);
			alterLogfileGroupOption();
			setState(1358);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ENGINE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL || _la==COMMA_SYMBOL) {
				{
				{
				setState(1353);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(1352);
					match(COMMA_SYMBOL);
					}
				}

				setState(1355);
				alterLogfileGroupOption();
				}
				}
				setState(1360);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterLogfileGroupOptionContext extends ParserRuleContext {
		public TsOptionInitialSizeContext tsOptionInitialSize() {
			return getRuleContext(TsOptionInitialSizeContext.class,0);
		}
		public TsOptionEngineContext tsOptionEngine() {
			return getRuleContext(TsOptionEngineContext.class,0);
		}
		public TsOptionWaitContext tsOptionWait() {
			return getRuleContext(TsOptionWaitContext.class,0);
		}
		public AlterLogfileGroupOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterLogfileGroupOption; }
	}

	public final AlterLogfileGroupOptionContext alterLogfileGroupOption() throws RecognitionException {
		AlterLogfileGroupOptionContext _localctx = new AlterLogfileGroupOptionContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_alterLogfileGroupOption);
		try {
			setState(1364);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INITIAL_SIZE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1361);
				tsOptionInitialSize();
				}
				break;
			case ENGINE_SYMBOL:
			case STORAGE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1362);
				tsOptionEngine();
				}
				break;
			case NO_WAIT_SYMBOL:
			case WAIT_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(1363);
				tsOptionWait();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterServerContext extends ParserRuleContext {
		public TerminalNode SERVER_SYMBOL() { return getToken(MySQLParser.SERVER_SYMBOL, 0); }
		public ServerRefContext serverRef() {
			return getRuleContext(ServerRefContext.class,0);
		}
		public ServerOptionsContext serverOptions() {
			return getRuleContext(ServerOptionsContext.class,0);
		}
		public AlterServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterServer; }
	}

	public final AlterServerContext alterServer() throws RecognitionException {
		AlterServerContext _localctx = new AlterServerContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_alterServer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1366);
			match(SERVER_SYMBOL);
			setState(1367);
			serverRef();
			setState(1368);
			serverOptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableContext extends ParserRuleContext {
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public OnlineOptionContext onlineOption() {
			return getRuleContext(OnlineOptionContext.class,0);
		}
		public TerminalNode IGNORE_SYMBOL() { return getToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public AlterTableActionsContext alterTableActions() {
			return getRuleContext(AlterTableActionsContext.class,0);
		}
		public AlterTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTable; }
	}

	public final AlterTableContext alterTable() throws RecognitionException {
		AlterTableContext _localctx = new AlterTableContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_alterTable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1371);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,23,_ctx) ) {
			case 1:
				{
				setState(1370);
				onlineOption();
				}
				break;
			}
			setState(1375);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,24,_ctx) ) {
			case 1:
				{
				setState(1373);
				if (!(serverVersion < 50700)) throw new FailedPredicateException(this, "serverVersion < 50700");
				setState(1374);
				match(IGNORE_SYMBOL);
				}
				break;
			}
			setState(1377);
			match(TABLE_SYMBOL);
			setState(1378);
			tableRef();
			setState(1380);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,25,_ctx) ) {
			case 1:
				{
				setState(1379);
				alterTableActions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableActionsContext extends ParserRuleContext {
		public AlterCommandListContext alterCommandList() {
			return getRuleContext(AlterCommandListContext.class,0);
		}
		public PartitionClauseContext partitionClause() {
			return getRuleContext(PartitionClauseContext.class,0);
		}
		public RemovePartitioningContext removePartitioning() {
			return getRuleContext(RemovePartitioningContext.class,0);
		}
		public StandaloneAlterCommandsContext standaloneAlterCommands() {
			return getRuleContext(StandaloneAlterCommandsContext.class,0);
		}
		public AlterCommandsModifierListContext alterCommandsModifierList() {
			return getRuleContext(AlterCommandsModifierListContext.class,0);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public AlterTableActionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableActions; }
	}

	public final AlterTableActionsContext alterTableActions() throws RecognitionException {
		AlterTableActionsContext _localctx = new AlterTableActionsContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_alterTableActions);
		try {
			setState(1395);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,28,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1382);
				alterCommandList();
				setState(1385);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PARTITION_SYMBOL:
					{
					setState(1383);
					partitionClause();
					}
					break;
				case REMOVE_SYMBOL:
					{
					setState(1384);
					removePartitioning();
					}
					break;
				case EOF:
				case SEMICOLON_SYMBOL:
					break;
				default:
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1387);
				partitionClause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1388);
				removePartitioning();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1392);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,27,_ctx) ) {
				case 1:
					{
					setState(1389);
					alterCommandsModifierList();
					setState(1390);
					match(COMMA_SYMBOL);
					}
					break;
				}
				setState(1394);
				standaloneAlterCommands();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterCommandListContext extends ParserRuleContext {
		public AlterCommandsModifierListContext alterCommandsModifierList() {
			return getRuleContext(AlterCommandsModifierListContext.class,0);
		}
		public AlterListContext alterList() {
			return getRuleContext(AlterListContext.class,0);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public AlterCommandListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterCommandList; }
	}

	public final AlterCommandListContext alterCommandList() throws RecognitionException {
		AlterCommandListContext _localctx = new AlterCommandListContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_alterCommandList);
		try {
			setState(1404);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,30,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1397);
				alterCommandsModifierList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1401);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,29,_ctx) ) {
				case 1:
					{
					setState(1398);
					alterCommandsModifierList();
					setState(1399);
					match(COMMA_SYMBOL);
					}
					break;
				}
				setState(1403);
				alterList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterCommandsModifierListContext extends ParserRuleContext {
		public List<AlterCommandsModifierContext> alterCommandsModifier() {
			return getRuleContexts(AlterCommandsModifierContext.class);
		}
		public AlterCommandsModifierContext alterCommandsModifier(int i) {
			return getRuleContext(AlterCommandsModifierContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public AlterCommandsModifierListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterCommandsModifierList; }
	}

	public final AlterCommandsModifierListContext alterCommandsModifierList() throws RecognitionException {
		AlterCommandsModifierListContext _localctx = new AlterCommandsModifierListContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_alterCommandsModifierList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1406);
			alterCommandsModifier();
			setState(1411);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,31,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1407);
					match(COMMA_SYMBOL);
					setState(1408);
					alterCommandsModifier();
					}
					} 
				}
				setState(1413);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,31,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StandaloneAlterCommandsContext extends ParserRuleContext {
		public TerminalNode DISCARD_SYMBOL() { return getToken(MySQLParser.DISCARD_SYMBOL, 0); }
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TerminalNode IMPORT_SYMBOL() { return getToken(MySQLParser.IMPORT_SYMBOL, 0); }
		public AlterPartitionContext alterPartition() {
			return getRuleContext(AlterPartitionContext.class,0);
		}
		public TerminalNode SECONDARY_LOAD_SYMBOL() { return getToken(MySQLParser.SECONDARY_LOAD_SYMBOL, 0); }
		public TerminalNode SECONDARY_UNLOAD_SYMBOL() { return getToken(MySQLParser.SECONDARY_UNLOAD_SYMBOL, 0); }
		public StandaloneAlterCommandsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standaloneAlterCommands; }
	}

	public final StandaloneAlterCommandsContext standaloneAlterCommands() throws RecognitionException {
		StandaloneAlterCommandsContext _localctx = new StandaloneAlterCommandsContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_standaloneAlterCommands);
		int _la;
		try {
			setState(1421);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,32,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1414);
				match(DISCARD_SYMBOL);
				setState(1415);
				match(TABLESPACE_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1416);
				match(IMPORT_SYMBOL);
				setState(1417);
				match(TABLESPACE_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1418);
				alterPartition();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1419);
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				setState(1420);
				_la = _input.LA(1);
				if ( !(_la==SECONDARY_LOAD_SYMBOL || _la==SECONDARY_UNLOAD_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterPartitionContext extends ParserRuleContext {
		public TerminalNode ADD_SYMBOL() { return getToken(MySQLParser.ADD_SYMBOL, 0); }
		public TerminalNode PARTITION_SYMBOL() { return getToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public TerminalNode PARTITIONS_SYMBOL() { return getToken(MySQLParser.PARTITIONS_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public List<NoWriteToBinLogContext> noWriteToBinLog() {
			return getRuleContexts(NoWriteToBinLogContext.class);
		}
		public NoWriteToBinLogContext noWriteToBinLog(int i) {
			return getRuleContext(NoWriteToBinLogContext.class,i);
		}
		public TerminalNode DROP_SYMBOL() { return getToken(MySQLParser.DROP_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode REBUILD_SYMBOL() { return getToken(MySQLParser.REBUILD_SYMBOL, 0); }
		public AllOrPartitionNameListContext allOrPartitionNameList() {
			return getRuleContext(AllOrPartitionNameListContext.class,0);
		}
		public TerminalNode OPTIMIZE_SYMBOL() { return getToken(MySQLParser.OPTIMIZE_SYMBOL, 0); }
		public TerminalNode ANALYZE_SYMBOL() { return getToken(MySQLParser.ANALYZE_SYMBOL, 0); }
		public TerminalNode CHECK_SYMBOL() { return getToken(MySQLParser.CHECK_SYMBOL, 0); }
		public List<CheckOptionContext> checkOption() {
			return getRuleContexts(CheckOptionContext.class);
		}
		public CheckOptionContext checkOption(int i) {
			return getRuleContext(CheckOptionContext.class,i);
		}
		public TerminalNode REPAIR_SYMBOL() { return getToken(MySQLParser.REPAIR_SYMBOL, 0); }
		public List<RepairTypeContext> repairType() {
			return getRuleContexts(RepairTypeContext.class);
		}
		public RepairTypeContext repairType(int i) {
			return getRuleContext(RepairTypeContext.class,i);
		}
		public TerminalNode COALESCE_SYMBOL() { return getToken(MySQLParser.COALESCE_SYMBOL, 0); }
		public TerminalNode TRUNCATE_SYMBOL() { return getToken(MySQLParser.TRUNCATE_SYMBOL, 0); }
		public ReorgPartitionRuleContext reorgPartitionRule() {
			return getRuleContext(ReorgPartitionRuleContext.class,0);
		}
		public TerminalNode REORGANIZE_SYMBOL() { return getToken(MySQLParser.REORGANIZE_SYMBOL, 0); }
		public TerminalNode INTO_SYMBOL() { return getToken(MySQLParser.INTO_SYMBOL, 0); }
		public TerminalNode EXCHANGE_SYMBOL() { return getToken(MySQLParser.EXCHANGE_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public WithValidationContext withValidation() {
			return getRuleContext(WithValidationContext.class,0);
		}
		public TerminalNode DISCARD_SYMBOL() { return getToken(MySQLParser.DISCARD_SYMBOL, 0); }
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TerminalNode IMPORT_SYMBOL() { return getToken(MySQLParser.IMPORT_SYMBOL, 0); }
		public AlterPartitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterPartition; }
	}

	public final AlterPartitionContext alterPartition() throws RecognitionException {
		AlterPartitionContext _localctx = new AlterPartitionContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_alterPartition);
		int _la;
		try {
			setState(1520);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,46,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1423);
				match(ADD_SYMBOL);
				setState(1424);
				match(PARTITION_SYMBOL);
				setState(1426);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					setState(1425);
					noWriteToBinLog();
					}
				}

				setState(1431);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPEN_PAR_SYMBOL:
					{
					setState(1428);
					partitionDefinitions();
					}
					break;
				case PARTITIONS_SYMBOL:
					{
					setState(1429);
					match(PARTITIONS_SYMBOL);
					setState(1430);
					real_ulong_number();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1433);
				match(DROP_SYMBOL);
				setState(1434);
				match(PARTITION_SYMBOL);
				setState(1435);
				identifierList();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1436);
				match(REBUILD_SYMBOL);
				setState(1437);
				match(PARTITION_SYMBOL);
				setState(1439);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,35,_ctx) ) {
				case 1:
					{
					setState(1438);
					noWriteToBinLog();
					}
					break;
				}
				setState(1441);
				allOrPartitionNameList();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1442);
				match(OPTIMIZE_SYMBOL);
				setState(1443);
				match(PARTITION_SYMBOL);
				setState(1445);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,36,_ctx) ) {
				case 1:
					{
					setState(1444);
					noWriteToBinLog();
					}
					break;
				}
				setState(1447);
				allOrPartitionNameList();
				setState(1449);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					setState(1448);
					noWriteToBinLog();
					}
				}

				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1451);
				match(ANALYZE_SYMBOL);
				setState(1452);
				match(PARTITION_SYMBOL);
				setState(1454);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {
				case 1:
					{
					setState(1453);
					noWriteToBinLog();
					}
					break;
				}
				setState(1456);
				allOrPartitionNameList();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1457);
				match(CHECK_SYMBOL);
				setState(1458);
				match(PARTITION_SYMBOL);
				setState(1459);
				allOrPartitionNameList();
				setState(1463);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & ((1L << (CHANGED_SYMBOL - 80)) | (1L << (EXTENDED_SYMBOL - 80)) | (1L << (FAST_SYMBOL - 80)))) != 0) || _la==MEDIUM_SYMBOL || _la==QUICK_SYMBOL || _la==FOR_SYMBOL) {
					{
					{
					setState(1460);
					checkOption();
					}
					}
					setState(1465);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1466);
				match(REPAIR_SYMBOL);
				setState(1467);
				match(PARTITION_SYMBOL);
				setState(1469);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,40,_ctx) ) {
				case 1:
					{
					setState(1468);
					noWriteToBinLog();
					}
					break;
				}
				setState(1471);
				allOrPartitionNameList();
				setState(1475);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==EXTENDED_SYMBOL || _la==QUICK_SYMBOL || _la==USE_FRM_SYMBOL) {
					{
					{
					setState(1472);
					repairType();
					}
					}
					setState(1477);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1478);
				match(COALESCE_SYMBOL);
				setState(1479);
				match(PARTITION_SYMBOL);
				setState(1481);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					setState(1480);
					noWriteToBinLog();
					}
				}

				setState(1483);
				real_ulong_number();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1484);
				match(TRUNCATE_SYMBOL);
				setState(1485);
				match(PARTITION_SYMBOL);
				setState(1486);
				allOrPartitionNameList();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1487);
				reorgPartitionRule();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1488);
				match(REORGANIZE_SYMBOL);
				setState(1489);
				match(PARTITION_SYMBOL);
				setState(1491);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,43,_ctx) ) {
				case 1:
					{
					setState(1490);
					noWriteToBinLog();
					}
					break;
				}
				setState(1497);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,44,_ctx) ) {
				case 1:
					{
					setState(1493);
					identifierList();
					setState(1494);
					match(INTO_SYMBOL);
					setState(1495);
					partitionDefinitions();
					}
					break;
				}
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1499);
				match(EXCHANGE_SYMBOL);
				setState(1500);
				match(PARTITION_SYMBOL);
				setState(1501);
				identifier();
				setState(1502);
				match(WITH_SYMBOL);
				setState(1503);
				match(TABLE_SYMBOL);
				setState(1504);
				tableRef();
				setState(1506);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,45,_ctx) ) {
				case 1:
					{
					setState(1505);
					withValidation();
					}
					break;
				}
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1508);
				if (!(serverVersion >= 50704)) throw new FailedPredicateException(this, "serverVersion >= 50704");
				setState(1509);
				match(DISCARD_SYMBOL);
				setState(1510);
				match(PARTITION_SYMBOL);
				setState(1511);
				allOrPartitionNameList();
				setState(1512);
				match(TABLESPACE_SYMBOL);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1514);
				if (!(serverVersion >= 50704)) throw new FailedPredicateException(this, "serverVersion >= 50704");
				setState(1515);
				match(IMPORT_SYMBOL);
				setState(1516);
				match(PARTITION_SYMBOL);
				setState(1517);
				allOrPartitionNameList();
				setState(1518);
				match(TABLESPACE_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterListContext extends ParserRuleContext {
		public List<AlterListItemContext> alterListItem() {
			return getRuleContexts(AlterListItemContext.class);
		}
		public AlterListItemContext alterListItem(int i) {
			return getRuleContext(AlterListItemContext.class,i);
		}
		public List<CreateTableOptionsSpaceSeparatedContext> createTableOptionsSpaceSeparated() {
			return getRuleContexts(CreateTableOptionsSpaceSeparatedContext.class);
		}
		public CreateTableOptionsSpaceSeparatedContext createTableOptionsSpaceSeparated(int i) {
			return getRuleContext(CreateTableOptionsSpaceSeparatedContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public List<AlterCommandsModifierContext> alterCommandsModifier() {
			return getRuleContexts(AlterCommandsModifierContext.class);
		}
		public AlterCommandsModifierContext alterCommandsModifier(int i) {
			return getRuleContext(AlterCommandsModifierContext.class,i);
		}
		public AlterListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterList; }
	}

	public final AlterListContext alterList() throws RecognitionException {
		AlterListContext _localctx = new AlterListContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_alterList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1524);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,47,_ctx) ) {
			case 1:
				{
				setState(1522);
				alterListItem();
				}
				break;
			case 2:
				{
				setState(1523);
				createTableOptionsSpaceSeparated();
				}
				break;
			}
			setState(1534);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(1526);
				match(COMMA_SYMBOL);
				setState(1530);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,48,_ctx) ) {
				case 1:
					{
					setState(1527);
					alterListItem();
					}
					break;
				case 2:
					{
					setState(1528);
					alterCommandsModifier();
					}
					break;
				case 3:
					{
					setState(1529);
					createTableOptionsSpaceSeparated();
					}
					break;
				}
				}
				}
				setState(1536);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterCommandsModifierContext extends ParserRuleContext {
		public AlterAlgorithmOptionContext alterAlgorithmOption() {
			return getRuleContext(AlterAlgorithmOptionContext.class,0);
		}
		public AlterLockOptionContext alterLockOption() {
			return getRuleContext(AlterLockOptionContext.class,0);
		}
		public WithValidationContext withValidation() {
			return getRuleContext(WithValidationContext.class,0);
		}
		public AlterCommandsModifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterCommandsModifier; }
	}

	public final AlterCommandsModifierContext alterCommandsModifier() throws RecognitionException {
		AlterCommandsModifierContext _localctx = new AlterCommandsModifierContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_alterCommandsModifier);
		try {
			setState(1540);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,50,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1537);
				alterAlgorithmOption();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1538);
				alterLockOption();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1539);
				withValidation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterListItemContext extends ParserRuleContext {
		public TerminalNode ADD_SYMBOL() { return getToken(MySQLParser.ADD_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public FieldDefinitionContext fieldDefinition() {
			return getRuleContext(FieldDefinitionContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TableElementListContext tableElementList() {
			return getRuleContext(TableElementListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode COLUMN_SYMBOL() { return getToken(MySQLParser.COLUMN_SYMBOL, 0); }
		public CheckOrReferencesContext checkOrReferences() {
			return getRuleContext(CheckOrReferencesContext.class,0);
		}
		public PlaceContext place() {
			return getRuleContext(PlaceContext.class,0);
		}
		public TableConstraintDefContext tableConstraintDef() {
			return getRuleContext(TableConstraintDefContext.class,0);
		}
		public TerminalNode CHANGE_SYMBOL() { return getToken(MySQLParser.CHANGE_SYMBOL, 0); }
		public ColumnInternalRefContext columnInternalRef() {
			return getRuleContext(ColumnInternalRefContext.class,0);
		}
		public TerminalNode MODIFY_SYMBOL() { return getToken(MySQLParser.MODIFY_SYMBOL, 0); }
		public TerminalNode DROP_SYMBOL() { return getToken(MySQLParser.DROP_SYMBOL, 0); }
		public TerminalNode FOREIGN_SYMBOL() { return getToken(MySQLParser.FOREIGN_SYMBOL, 0); }
		public TerminalNode KEY_SYMBOL() { return getToken(MySQLParser.KEY_SYMBOL, 0); }
		public TerminalNode PRIMARY_SYMBOL() { return getToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		public KeyOrIndexContext keyOrIndex() {
			return getRuleContext(KeyOrIndexContext.class,0);
		}
		public IndexRefContext indexRef() {
			return getRuleContext(IndexRefContext.class,0);
		}
		public RestrictContext restrict() {
			return getRuleContext(RestrictContext.class,0);
		}
		public TerminalNode DISABLE_SYMBOL() { return getToken(MySQLParser.DISABLE_SYMBOL, 0); }
		public TerminalNode KEYS_SYMBOL() { return getToken(MySQLParser.KEYS_SYMBOL, 0); }
		public TerminalNode ENABLE_SYMBOL() { return getToken(MySQLParser.ENABLE_SYMBOL, 0); }
		public TerminalNode ALTER_SYMBOL() { return getToken(MySQLParser.ALTER_SYMBOL, 0); }
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public ExprWithParenthesesContext exprWithParentheses() {
			return getRuleContext(ExprWithParenthesesContext.class,0);
		}
		public SignedLiteralContext signedLiteral() {
			return getRuleContext(SignedLiteralContext.class,0);
		}
		public TerminalNode INDEX_SYMBOL() { return getToken(MySQLParser.INDEX_SYMBOL, 0); }
		public VisibilityContext visibility() {
			return getRuleContext(VisibilityContext.class,0);
		}
		public TerminalNode CHECK_SYMBOL() { return getToken(MySQLParser.CHECK_SYMBOL, 0); }
		public ConstraintEnforcementContext constraintEnforcement() {
			return getRuleContext(ConstraintEnforcementContext.class,0);
		}
		public TerminalNode RENAME_SYMBOL() { return getToken(MySQLParser.RENAME_SYMBOL, 0); }
		public TerminalNode TO_SYMBOL() { return getToken(MySQLParser.TO_SYMBOL, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public TerminalNode CONVERT_SYMBOL() { return getToken(MySQLParser.CONVERT_SYMBOL, 0); }
		public CharsetContext charset() {
			return getRuleContext(CharsetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public CollateContext collate() {
			return getRuleContext(CollateContext.class,0);
		}
		public TerminalNode FORCE_SYMBOL() { return getToken(MySQLParser.FORCE_SYMBOL, 0); }
		public TerminalNode ORDER_SYMBOL() { return getToken(MySQLParser.ORDER_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public AlterOrderListContext alterOrderList() {
			return getRuleContext(AlterOrderListContext.class,0);
		}
		public TerminalNode UPGRADE_SYMBOL() { return getToken(MySQLParser.UPGRADE_SYMBOL, 0); }
		public TerminalNode PARTITIONING_SYMBOL() { return getToken(MySQLParser.PARTITIONING_SYMBOL, 0); }
		public AlterListItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterListItem; }
	}

	public final AlterListItemContext alterListItem() throws RecognitionException {
		AlterListItemContext _localctx = new AlterListItemContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_alterListItem);
		int _la;
		try {
			setState(1675);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,70,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1542);
				match(ADD_SYMBOL);
				setState(1544);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,51,_ctx) ) {
				case 1:
					{
					setState(1543);
					match(COLUMN_SYMBOL);
					}
					break;
				}
				setState(1558);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,54,_ctx) ) {
				case 1:
					{
					setState(1546);
					identifier();
					setState(1547);
					fieldDefinition();
					setState(1549);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,52,_ctx) ) {
					case 1:
						{
						setState(1548);
						checkOrReferences();
						}
						break;
					}
					setState(1552);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AFTER_SYMBOL || _la==FIRST_SYMBOL) {
						{
						setState(1551);
						place();
						}
					}

					}
					break;
				case 2:
					{
					setState(1554);
					match(OPEN_PAR_SYMBOL);
					setState(1555);
					tableElementList();
					setState(1556);
					match(CLOSE_PAR_SYMBOL);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1560);
				match(ADD_SYMBOL);
				setState(1561);
				tableConstraintDef();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1562);
				match(CHANGE_SYMBOL);
				setState(1564);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,55,_ctx) ) {
				case 1:
					{
					setState(1563);
					match(COLUMN_SYMBOL);
					}
					break;
				}
				setState(1566);
				columnInternalRef();
				setState(1567);
				identifier();
				setState(1568);
				fieldDefinition();
				setState(1570);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AFTER_SYMBOL || _la==FIRST_SYMBOL) {
					{
					setState(1569);
					place();
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1572);
				match(MODIFY_SYMBOL);
				setState(1574);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,57,_ctx) ) {
				case 1:
					{
					setState(1573);
					match(COLUMN_SYMBOL);
					}
					break;
				}
				setState(1576);
				columnInternalRef();
				setState(1577);
				fieldDefinition();
				setState(1579);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AFTER_SYMBOL || _la==FIRST_SYMBOL) {
					{
					setState(1578);
					place();
					}
				}

				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1581);
				match(DROP_SYMBOL);
				setState(1604);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,63,_ctx) ) {
				case 1:
					{
					setState(1583);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,59,_ctx) ) {
					case 1:
						{
						setState(1582);
						match(COLUMN_SYMBOL);
						}
						break;
					}
					setState(1585);
					columnInternalRef();
					setState(1587);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) {
						{
						setState(1586);
						restrict();
						}
					}

					}
					break;
				case 2:
					{
					setState(1589);
					match(FOREIGN_SYMBOL);
					setState(1590);
					match(KEY_SYMBOL);
					setState(1597);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,62,_ctx) ) {
					case 1:
						{
						setState(1591);
						if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
						setState(1592);
						columnInternalRef();
						}
						break;
					case 2:
						{
						setState(1593);
						if (!(serverVersion < 50700)) throw new FailedPredicateException(this, "serverVersion < 50700");
						setState(1595);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,61,_ctx) ) {
						case 1:
							{
							setState(1594);
							columnInternalRef();
							}
							break;
						}
						}
						break;
					}
					}
					break;
				case 3:
					{
					setState(1599);
					match(PRIMARY_SYMBOL);
					setState(1600);
					match(KEY_SYMBOL);
					}
					break;
				case 4:
					{
					setState(1601);
					keyOrIndex();
					setState(1602);
					indexRef();
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1606);
				match(DISABLE_SYMBOL);
				setState(1607);
				match(KEYS_SYMBOL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1608);
				match(ENABLE_SYMBOL);
				setState(1609);
				match(KEYS_SYMBOL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1610);
				match(ALTER_SYMBOL);
				setState(1612);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,64,_ctx) ) {
				case 1:
					{
					setState(1611);
					match(COLUMN_SYMBOL);
					}
					break;
				}
				setState(1614);
				columnInternalRef();
				setState(1624);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SET_SYMBOL:
					{
					setState(1615);
					match(SET_SYMBOL);
					setState(1616);
					match(DEFAULT_SYMBOL);
					setState(1620);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,65,_ctx) ) {
					case 1:
						{
						setState(1617);
						if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
						setState(1618);
						exprWithParentheses();
						}
						break;
					case 2:
						{
						setState(1619);
						signedLiteral();
						}
						break;
					}
					}
					break;
				case DROP_SYMBOL:
					{
					setState(1622);
					match(DROP_SYMBOL);
					setState(1623);
					match(DEFAULT_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1626);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(1627);
				match(ALTER_SYMBOL);
				setState(1628);
				match(INDEX_SYMBOL);
				setState(1629);
				indexRef();
				setState(1630);
				visibility();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1632);
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				setState(1633);
				match(ALTER_SYMBOL);
				setState(1634);
				match(CHECK_SYMBOL);
				setState(1635);
				identifier();
				setState(1636);
				constraintEnforcement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1638);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(1639);
				match(RENAME_SYMBOL);
				setState(1640);
				match(COLUMN_SYMBOL);
				setState(1641);
				columnInternalRef();
				setState(1642);
				match(TO_SYMBOL);
				setState(1643);
				identifier();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1645);
				match(RENAME_SYMBOL);
				setState(1647);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,67,_ctx) ) {
				case 1:
					{
					setState(1646);
					_la = _input.LA(1);
					if ( !(_la==AS_SYMBOL || _la==TO_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(1649);
				tableName();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1650);
				if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
				setState(1651);
				match(RENAME_SYMBOL);
				setState(1652);
				keyOrIndex();
				setState(1653);
				indexRef();
				setState(1654);
				match(TO_SYMBOL);
				setState(1655);
				indexName();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1657);
				match(CONVERT_SYMBOL);
				setState(1658);
				match(TO_SYMBOL);
				setState(1659);
				charset();
				setState(1663);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,68,_ctx) ) {
				case 1:
					{
					setState(1660);
					if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
					setState(1661);
					match(DEFAULT_SYMBOL);
					}
					break;
				case 2:
					{
					setState(1662);
					charsetName();
					}
					break;
				}
				setState(1666);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE_SYMBOL) {
					{
					setState(1665);
					collate();
					}
				}

				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1668);
				match(FORCE_SYMBOL);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1669);
				match(ORDER_SYMBOL);
				setState(1670);
				match(BY_SYMBOL);
				setState(1671);
				alterOrderList();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1672);
				if (!(serverVersion >= 50708 && serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion >= 50708 && serverVersion < 80000");
				setState(1673);
				match(UPGRADE_SYMBOL);
				setState(1674);
				match(PARTITIONING_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PlaceContext extends ParserRuleContext {
		public TerminalNode AFTER_SYMBOL() { return getToken(MySQLParser.AFTER_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode FIRST_SYMBOL() { return getToken(MySQLParser.FIRST_SYMBOL, 0); }
		public PlaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_place; }
	}

	public final PlaceContext place() throws RecognitionException {
		PlaceContext _localctx = new PlaceContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_place);
		try {
			setState(1680);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AFTER_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1677);
				match(AFTER_SYMBOL);
				setState(1678);
				identifier();
				}
				break;
			case FIRST_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1679);
				match(FIRST_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RestrictContext extends ParserRuleContext {
		public TerminalNode RESTRICT_SYMBOL() { return getToken(MySQLParser.RESTRICT_SYMBOL, 0); }
		public TerminalNode CASCADE_SYMBOL() { return getToken(MySQLParser.CASCADE_SYMBOL, 0); }
		public RestrictContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_restrict; }
	}

	public final RestrictContext restrict() throws RecognitionException {
		RestrictContext _localctx = new RestrictContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_restrict);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1682);
			_la = _input.LA(1);
			if ( !(_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterOrderListContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<DirectionContext> direction() {
			return getRuleContexts(DirectionContext.class);
		}
		public DirectionContext direction(int i) {
			return getRuleContext(DirectionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public AlterOrderListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOrderList; }
	}

	public final AlterOrderListContext alterOrderList() throws RecognitionException {
		AlterOrderListContext _localctx = new AlterOrderListContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_alterOrderList);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1684);
			identifier();
			setState(1686);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC_SYMBOL || _la==DESC_SYMBOL) {
				{
				setState(1685);
				direction();
				}
			}

			setState(1695);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,74,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1688);
					match(COMMA_SYMBOL);
					setState(1689);
					identifier();
					setState(1691);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ASC_SYMBOL || _la==DESC_SYMBOL) {
						{
						setState(1690);
						direction();
						}
					}

					}
					} 
				}
				setState(1697);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,74,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterAlgorithmOptionContext extends ParserRuleContext {
		public TerminalNode ALGORITHM_SYMBOL() { return getToken(MySQLParser.ALGORITHM_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public AlterAlgorithmOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterAlgorithmOption; }
	}

	public final AlterAlgorithmOptionContext alterAlgorithmOption() throws RecognitionException {
		AlterAlgorithmOptionContext _localctx = new AlterAlgorithmOptionContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_alterAlgorithmOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1698);
			match(ALGORITHM_SYMBOL);
			setState(1700);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,75,_ctx) ) {
			case 1:
				{
				setState(1699);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(1704);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,76,_ctx) ) {
			case 1:
				{
				setState(1702);
				match(DEFAULT_SYMBOL);
				}
				break;
			case 2:
				{
				setState(1703);
				identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterLockOptionContext extends ParserRuleContext {
		public TerminalNode LOCK_SYMBOL() { return getToken(MySQLParser.LOCK_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public AlterLockOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterLockOption; }
	}

	public final AlterLockOptionContext alterLockOption() throws RecognitionException {
		AlterLockOptionContext _localctx = new AlterLockOptionContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_alterLockOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1706);
			match(LOCK_SYMBOL);
			setState(1708);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,77,_ctx) ) {
			case 1:
				{
				setState(1707);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(1712);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,78,_ctx) ) {
			case 1:
				{
				setState(1710);
				match(DEFAULT_SYMBOL);
				}
				break;
			case 2:
				{
				setState(1711);
				identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexLockAndAlgorithmContext extends ParserRuleContext {
		public AlterAlgorithmOptionContext alterAlgorithmOption() {
			return getRuleContext(AlterAlgorithmOptionContext.class,0);
		}
		public AlterLockOptionContext alterLockOption() {
			return getRuleContext(AlterLockOptionContext.class,0);
		}
		public IndexLockAndAlgorithmContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexLockAndAlgorithm; }
	}

	public final IndexLockAndAlgorithmContext indexLockAndAlgorithm() throws RecognitionException {
		IndexLockAndAlgorithmContext _localctx = new IndexLockAndAlgorithmContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_indexLockAndAlgorithm);
		int _la;
		try {
			setState(1722);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALGORITHM_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1714);
				alterAlgorithmOption();
				setState(1716);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCK_SYMBOL) {
					{
					setState(1715);
					alterLockOption();
					}
				}

				}
				break;
			case LOCK_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1718);
				alterLockOption();
				setState(1720);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALGORITHM_SYMBOL) {
					{
					setState(1719);
					alterAlgorithmOption();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithValidationContext extends ParserRuleContext {
		public TerminalNode VALIDATION_SYMBOL() { return getToken(MySQLParser.VALIDATION_SYMBOL, 0); }
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode WITHOUT_SYMBOL() { return getToken(MySQLParser.WITHOUT_SYMBOL, 0); }
		public WithValidationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withValidation; }
	}

	public final WithValidationContext withValidation() throws RecognitionException {
		WithValidationContext _localctx = new WithValidationContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_withValidation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1724);
			if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
			setState(1725);
			_la = _input.LA(1);
			if ( !(_la==WITH_SYMBOL || _la==WITHOUT_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1726);
			match(VALIDATION_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RemovePartitioningContext extends ParserRuleContext {
		public TerminalNode REMOVE_SYMBOL() { return getToken(MySQLParser.REMOVE_SYMBOL, 0); }
		public TerminalNode PARTITIONING_SYMBOL() { return getToken(MySQLParser.PARTITIONING_SYMBOL, 0); }
		public RemovePartitioningContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_removePartitioning; }
	}

	public final RemovePartitioningContext removePartitioning() throws RecognitionException {
		RemovePartitioningContext _localctx = new RemovePartitioningContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_removePartitioning);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1728);
			match(REMOVE_SYMBOL);
			setState(1729);
			match(PARTITIONING_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AllOrPartitionNameListContext extends ParserRuleContext {
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public AllOrPartitionNameListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_allOrPartitionNameList; }
	}

	public final AllOrPartitionNameListContext allOrPartitionNameList() throws RecognitionException {
		AllOrPartitionNameListContext _localctx = new AllOrPartitionNameListContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_allOrPartitionNameList);
		try {
			setState(1733);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,82,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1731);
				match(ALL_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1732);
				identifierList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReorgPartitionRuleContext extends ParserRuleContext {
		public TerminalNode REORGANIZE_SYMBOL() { return getToken(MySQLParser.REORGANIZE_SYMBOL, 0); }
		public TerminalNode PARTITION_SYMBOL() { return getToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public NoWriteToBinLogContext noWriteToBinLog() {
			return getRuleContext(NoWriteToBinLogContext.class,0);
		}
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode INTO_SYMBOL() { return getToken(MySQLParser.INTO_SYMBOL, 0); }
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public ReorgPartitionRuleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reorgPartitionRule; }
	}

	public final ReorgPartitionRuleContext reorgPartitionRule() throws RecognitionException {
		ReorgPartitionRuleContext _localctx = new ReorgPartitionRuleContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_reorgPartitionRule);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1735);
			match(REORGANIZE_SYMBOL);
			setState(1736);
			match(PARTITION_SYMBOL);
			setState(1738);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,83,_ctx) ) {
			case 1:
				{
				setState(1737);
				noWriteToBinLog();
				}
				break;
			}
			setState(1744);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,84,_ctx) ) {
			case 1:
				{
				setState(1740);
				identifierList();
				setState(1741);
				match(INTO_SYMBOL);
				setState(1742);
				partitionDefinitions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTablespaceContext extends ParserRuleContext {
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TablespaceRefContext tablespaceRef() {
			return getRuleContext(TablespaceRefContext.class,0);
		}
		public TerminalNode DATAFILE_SYMBOL() { return getToken(MySQLParser.DATAFILE_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode RENAME_SYMBOL() { return getToken(MySQLParser.RENAME_SYMBOL, 0); }
		public TerminalNode TO_SYMBOL() { return getToken(MySQLParser.TO_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public AlterTablespaceOptionsContext alterTablespaceOptions() {
			return getRuleContext(AlterTablespaceOptionsContext.class,0);
		}
		public TerminalNode ADD_SYMBOL() { return getToken(MySQLParser.ADD_SYMBOL, 0); }
		public TerminalNode DROP_SYMBOL() { return getToken(MySQLParser.DROP_SYMBOL, 0); }
		public TerminalNode CHANGE_SYMBOL() { return getToken(MySQLParser.CHANGE_SYMBOL, 0); }
		public TerminalNode NOT_SYMBOL() { return getToken(MySQLParser.NOT_SYMBOL, 0); }
		public TerminalNode ACCESSIBLE_SYMBOL() { return getToken(MySQLParser.ACCESSIBLE_SYMBOL, 0); }
		public TerminalNode READ_ONLY_SYMBOL() { return getToken(MySQLParser.READ_ONLY_SYMBOL, 0); }
		public TerminalNode READ_WRITE_SYMBOL() { return getToken(MySQLParser.READ_WRITE_SYMBOL, 0); }
		public List<ChangeTablespaceOptionContext> changeTablespaceOption() {
			return getRuleContexts(ChangeTablespaceOptionContext.class);
		}
		public ChangeTablespaceOptionContext changeTablespaceOption(int i) {
			return getRuleContext(ChangeTablespaceOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public AlterTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTablespace; }
	}

	public final AlterTablespaceContext alterTablespace() throws RecognitionException {
		AlterTablespaceContext _localctx = new AlterTablespaceContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_alterTablespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1746);
			match(TABLESPACE_SYMBOL);
			setState(1747);
			tablespaceRef();
			setState(1781);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,90,_ctx) ) {
			case 1:
				{
				setState(1748);
				_la = _input.LA(1);
				if ( !(_la==ADD_SYMBOL || _la==DROP_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1749);
				match(DATAFILE_SYMBOL);
				setState(1750);
				textLiteral();
				setState(1752);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (AUTOEXTEND_SIZE_SYMBOL - 68)) | (1L << (ENCRYPTION_SYMBOL - 68)) | (1L << (ENGINE_SYMBOL - 68)))) != 0) || _la==INITIAL_SIZE_SYMBOL || _la==MAX_SIZE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL) {
					{
					setState(1751);
					alterTablespaceOptions();
					}
				}

				}
				break;
			case 2:
				{
				setState(1754);
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				setState(1774);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case EOF:
				case SEMICOLON_SYMBOL:
					{
					}
					break;
				case CHANGE_SYMBOL:
					{
					setState(1756);
					match(CHANGE_SYMBOL);
					setState(1757);
					match(DATAFILE_SYMBOL);
					setState(1758);
					textLiteral();
					setState(1769);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AUTOEXTEND_SIZE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==MAX_SIZE_SYMBOL) {
						{
						setState(1759);
						changeTablespaceOption();
						setState(1766);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==AUTOEXTEND_SIZE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==MAX_SIZE_SYMBOL || _la==COMMA_SYMBOL) {
							{
							{
							setState(1761);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA_SYMBOL) {
								{
								setState(1760);
								match(COMMA_SYMBOL);
								}
							}

							setState(1763);
							changeTablespaceOption();
							}
							}
							setState(1768);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
					}

					}
					break;
				case READ_ONLY_SYMBOL:
				case READ_WRITE_SYMBOL:
					{
					setState(1771);
					_la = _input.LA(1);
					if ( !(_la==READ_ONLY_SYMBOL || _la==READ_WRITE_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case NOT_SYMBOL:
					{
					setState(1772);
					match(NOT_SYMBOL);
					setState(1773);
					match(ACCESSIBLE_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				{
				setState(1776);
				match(RENAME_SYMBOL);
				setState(1777);
				match(TO_SYMBOL);
				setState(1778);
				identifier();
				}
				break;
			case 4:
				{
				setState(1779);
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				setState(1780);
				alterTablespaceOptions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUndoTablespaceContext extends ParserRuleContext {
		public TerminalNode UNDO_SYMBOL() { return getToken(MySQLParser.UNDO_SYMBOL, 0); }
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TablespaceRefContext tablespaceRef() {
			return getRuleContext(TablespaceRefContext.class,0);
		}
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public TerminalNode ACTIVE_SYMBOL() { return getToken(MySQLParser.ACTIVE_SYMBOL, 0); }
		public TerminalNode INACTIVE_SYMBOL() { return getToken(MySQLParser.INACTIVE_SYMBOL, 0); }
		public UndoTableSpaceOptionsContext undoTableSpaceOptions() {
			return getRuleContext(UndoTableSpaceOptionsContext.class,0);
		}
		public AlterUndoTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUndoTablespace; }
	}

	public final AlterUndoTablespaceContext alterUndoTablespace() throws RecognitionException {
		AlterUndoTablespaceContext _localctx = new AlterUndoTablespaceContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_alterUndoTablespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1783);
			match(UNDO_SYMBOL);
			setState(1784);
			match(TABLESPACE_SYMBOL);
			setState(1785);
			tablespaceRef();
			setState(1786);
			match(SET_SYMBOL);
			setState(1787);
			_la = _input.LA(1);
			if ( !(_la==ACTIVE_SYMBOL || _la==INACTIVE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1789);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE_SYMBOL || _la==STORAGE_SYMBOL) {
				{
				setState(1788);
				undoTableSpaceOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UndoTableSpaceOptionsContext extends ParserRuleContext {
		public List<UndoTableSpaceOptionContext> undoTableSpaceOption() {
			return getRuleContexts(UndoTableSpaceOptionContext.class);
		}
		public UndoTableSpaceOptionContext undoTableSpaceOption(int i) {
			return getRuleContext(UndoTableSpaceOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public UndoTableSpaceOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_undoTableSpaceOptions; }
	}

	public final UndoTableSpaceOptionsContext undoTableSpaceOptions() throws RecognitionException {
		UndoTableSpaceOptionsContext _localctx = new UndoTableSpaceOptionsContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_undoTableSpaceOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1791);
			undoTableSpaceOption();
			setState(1798);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ENGINE_SYMBOL || _la==STORAGE_SYMBOL || _la==COMMA_SYMBOL) {
				{
				{
				setState(1793);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(1792);
					match(COMMA_SYMBOL);
					}
				}

				setState(1795);
				undoTableSpaceOption();
				}
				}
				setState(1800);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UndoTableSpaceOptionContext extends ParserRuleContext {
		public TsOptionEngineContext tsOptionEngine() {
			return getRuleContext(TsOptionEngineContext.class,0);
		}
		public UndoTableSpaceOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_undoTableSpaceOption; }
	}

	public final UndoTableSpaceOptionContext undoTableSpaceOption() throws RecognitionException {
		UndoTableSpaceOptionContext _localctx = new UndoTableSpaceOptionContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_undoTableSpaceOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1801);
			tsOptionEngine();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTablespaceOptionsContext extends ParserRuleContext {
		public List<AlterTablespaceOptionContext> alterTablespaceOption() {
			return getRuleContexts(AlterTablespaceOptionContext.class);
		}
		public AlterTablespaceOptionContext alterTablespaceOption(int i) {
			return getRuleContext(AlterTablespaceOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public AlterTablespaceOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTablespaceOptions; }
	}

	public final AlterTablespaceOptionsContext alterTablespaceOptions() throws RecognitionException {
		AlterTablespaceOptionsContext _localctx = new AlterTablespaceOptionsContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_alterTablespaceOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1803);
			alterTablespaceOption();
			setState(1810);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (AUTOEXTEND_SIZE_SYMBOL - 68)) | (1L << (ENCRYPTION_SYMBOL - 68)) | (1L << (ENGINE_SYMBOL - 68)))) != 0) || _la==INITIAL_SIZE_SYMBOL || _la==MAX_SIZE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL || _la==COMMA_SYMBOL) {
				{
				{
				setState(1805);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(1804);
					match(COMMA_SYMBOL);
					}
				}

				setState(1807);
				alterTablespaceOption();
				}
				}
				setState(1812);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTablespaceOptionContext extends ParserRuleContext {
		public TerminalNode INITIAL_SIZE_SYMBOL() { return getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0); }
		public SizeNumberContext sizeNumber() {
			return getRuleContext(SizeNumberContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionAutoextendSizeContext tsOptionAutoextendSize() {
			return getRuleContext(TsOptionAutoextendSizeContext.class,0);
		}
		public TsOptionMaxSizeContext tsOptionMaxSize() {
			return getRuleContext(TsOptionMaxSizeContext.class,0);
		}
		public TsOptionEngineContext tsOptionEngine() {
			return getRuleContext(TsOptionEngineContext.class,0);
		}
		public TsOptionWaitContext tsOptionWait() {
			return getRuleContext(TsOptionWaitContext.class,0);
		}
		public TsOptionEncryptionContext tsOptionEncryption() {
			return getRuleContext(TsOptionEncryptionContext.class,0);
		}
		public AlterTablespaceOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTablespaceOption; }
	}

	public final AlterTablespaceOptionContext alterTablespaceOption() throws RecognitionException {
		AlterTablespaceOptionContext _localctx = new AlterTablespaceOptionContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_alterTablespaceOption);
		try {
			setState(1823);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INITIAL_SIZE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1813);
				match(INITIAL_SIZE_SYMBOL);
				setState(1815);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,96,_ctx) ) {
				case 1:
					{
					setState(1814);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(1817);
				sizeNumber();
				}
				break;
			case AUTOEXTEND_SIZE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1818);
				tsOptionAutoextendSize();
				}
				break;
			case MAX_SIZE_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(1819);
				tsOptionMaxSize();
				}
				break;
			case ENGINE_SYMBOL:
			case STORAGE_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(1820);
				tsOptionEngine();
				}
				break;
			case NO_WAIT_SYMBOL:
			case WAIT_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(1821);
				tsOptionWait();
				}
				break;
			case ENCRYPTION_SYMBOL:
				enterOuterAlt(_localctx, 6);
				{
				setState(1822);
				tsOptionEncryption();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChangeTablespaceOptionContext extends ParserRuleContext {
		public TerminalNode INITIAL_SIZE_SYMBOL() { return getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0); }
		public SizeNumberContext sizeNumber() {
			return getRuleContext(SizeNumberContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionAutoextendSizeContext tsOptionAutoextendSize() {
			return getRuleContext(TsOptionAutoextendSizeContext.class,0);
		}
		public TsOptionMaxSizeContext tsOptionMaxSize() {
			return getRuleContext(TsOptionMaxSizeContext.class,0);
		}
		public ChangeTablespaceOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeTablespaceOption; }
	}

	public final ChangeTablespaceOptionContext changeTablespaceOption() throws RecognitionException {
		ChangeTablespaceOptionContext _localctx = new ChangeTablespaceOptionContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_changeTablespaceOption);
		try {
			setState(1832);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INITIAL_SIZE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1825);
				match(INITIAL_SIZE_SYMBOL);
				setState(1827);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,98,_ctx) ) {
				case 1:
					{
					setState(1826);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(1829);
				sizeNumber();
				}
				break;
			case AUTOEXTEND_SIZE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1830);
				tsOptionAutoextendSize();
				}
				break;
			case MAX_SIZE_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(1831);
				tsOptionMaxSize();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterViewContext extends ParserRuleContext {
		public TerminalNode VIEW_SYMBOL() { return getToken(MySQLParser.VIEW_SYMBOL, 0); }
		public ViewRefContext viewRef() {
			return getRuleContext(ViewRefContext.class,0);
		}
		public ViewTailContext viewTail() {
			return getRuleContext(ViewTailContext.class,0);
		}
		public ViewAlgorithmContext viewAlgorithm() {
			return getRuleContext(ViewAlgorithmContext.class,0);
		}
		public DefinerClauseContext definerClause() {
			return getRuleContext(DefinerClauseContext.class,0);
		}
		public ViewSuidContext viewSuid() {
			return getRuleContext(ViewSuidContext.class,0);
		}
		public AlterViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterView; }
	}

	public final AlterViewContext alterView() throws RecognitionException {
		AlterViewContext _localctx = new AlterViewContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_alterView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1835);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALGORITHM_SYMBOL) {
				{
				setState(1834);
				viewAlgorithm();
				}
			}

			setState(1838);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				setState(1837);
				definerClause();
				}
			}

			setState(1841);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL_SYMBOL) {
				{
				setState(1840);
				viewSuid();
				}
			}

			setState(1843);
			match(VIEW_SYMBOL);
			setState(1844);
			viewRef();
			setState(1845);
			viewTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewTailContext extends ParserRuleContext {
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public ViewSelectContext viewSelect() {
			return getRuleContext(ViewSelectContext.class,0);
		}
		public ColumnInternalRefListContext columnInternalRefList() {
			return getRuleContext(ColumnInternalRefListContext.class,0);
		}
		public ViewTailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewTail; }
	}

	public final ViewTailContext viewTail() throws RecognitionException {
		ViewTailContext _localctx = new ViewTailContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_viewTail);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1848);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				setState(1847);
				columnInternalRefList();
				}
			}

			setState(1850);
			match(AS_SYMBOL);
			setState(1851);
			viewSelect();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewSelectContext extends ParserRuleContext {
		public QueryExpressionOrParensContext queryExpressionOrParens() {
			return getRuleContext(QueryExpressionOrParensContext.class,0);
		}
		public ViewCheckOptionContext viewCheckOption() {
			return getRuleContext(ViewCheckOptionContext.class,0);
		}
		public ViewSelectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewSelect; }
	}

	public final ViewSelectContext viewSelect() throws RecognitionException {
		ViewSelectContext _localctx = new ViewSelectContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_viewSelect);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1853);
			queryExpressionOrParens();
			setState(1855);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH_SYMBOL) {
				{
				setState(1854);
				viewCheckOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewCheckOptionContext extends ParserRuleContext {
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode CHECK_SYMBOL() { return getToken(MySQLParser.CHECK_SYMBOL, 0); }
		public TerminalNode OPTION_SYMBOL() { return getToken(MySQLParser.OPTION_SYMBOL, 0); }
		public TerminalNode CASCADED_SYMBOL() { return getToken(MySQLParser.CASCADED_SYMBOL, 0); }
		public TerminalNode LOCAL_SYMBOL() { return getToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public ViewCheckOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewCheckOption; }
	}

	public final ViewCheckOptionContext viewCheckOption() throws RecognitionException {
		ViewCheckOptionContext _localctx = new ViewCheckOptionContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_viewCheckOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1857);
			match(WITH_SYMBOL);
			setState(1859);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADED_SYMBOL || _la==LOCAL_SYMBOL) {
				{
				setState(1858);
				_la = _input.LA(1);
				if ( !(_la==CASCADED_SYMBOL || _la==LOCAL_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1861);
			match(CHECK_SYMBOL);
			setState(1862);
			match(OPTION_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateStatementContext extends ParserRuleContext {
		public TerminalNode CREATE_SYMBOL() { return getToken(MySQLParser.CREATE_SYMBOL, 0); }
		public CreateDatabaseContext createDatabase() {
			return getRuleContext(CreateDatabaseContext.class,0);
		}
		public CreateTableContext createTable() {
			return getRuleContext(CreateTableContext.class,0);
		}
		public CreateFunctionContext createFunction() {
			return getRuleContext(CreateFunctionContext.class,0);
		}
		public CreateProcedureContext createProcedure() {
			return getRuleContext(CreateProcedureContext.class,0);
		}
		public CreateUdfContext createUdf() {
			return getRuleContext(CreateUdfContext.class,0);
		}
		public CreateLogfileGroupContext createLogfileGroup() {
			return getRuleContext(CreateLogfileGroupContext.class,0);
		}
		public CreateViewContext createView() {
			return getRuleContext(CreateViewContext.class,0);
		}
		public CreateTriggerContext createTrigger() {
			return getRuleContext(CreateTriggerContext.class,0);
		}
		public CreateIndexContext createIndex() {
			return getRuleContext(CreateIndexContext.class,0);
		}
		public CreateServerContext createServer() {
			return getRuleContext(CreateServerContext.class,0);
		}
		public CreateTablespaceContext createTablespace() {
			return getRuleContext(CreateTablespaceContext.class,0);
		}
		public CreateEventContext createEvent() {
			return getRuleContext(CreateEventContext.class,0);
		}
		public CreateRoleContext createRole() {
			return getRuleContext(CreateRoleContext.class,0);
		}
		public CreateSpatialReferenceContext createSpatialReference() {
			return getRuleContext(CreateSpatialReferenceContext.class,0);
		}
		public CreateUndoTablespaceContext createUndoTablespace() {
			return getRuleContext(CreateUndoTablespaceContext.class,0);
		}
		public CreateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createStatement; }
	}

	public final CreateStatementContext createStatement() throws RecognitionException {
		CreateStatementContext _localctx = new CreateStatementContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_createStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1864);
			match(CREATE_SYMBOL);
			setState(1883);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,106,_ctx) ) {
			case 1:
				{
				setState(1865);
				createDatabase();
				}
				break;
			case 2:
				{
				setState(1866);
				createTable();
				}
				break;
			case 3:
				{
				setState(1867);
				createFunction();
				}
				break;
			case 4:
				{
				setState(1868);
				createProcedure();
				}
				break;
			case 5:
				{
				setState(1869);
				createUdf();
				}
				break;
			case 6:
				{
				setState(1870);
				createLogfileGroup();
				}
				break;
			case 7:
				{
				setState(1871);
				createView();
				}
				break;
			case 8:
				{
				setState(1872);
				createTrigger();
				}
				break;
			case 9:
				{
				setState(1873);
				createIndex();
				}
				break;
			case 10:
				{
				setState(1874);
				createServer();
				}
				break;
			case 11:
				{
				setState(1875);
				createTablespace();
				}
				break;
			case 12:
				{
				setState(1876);
				createEvent();
				}
				break;
			case 13:
				{
				setState(1877);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(1878);
				createRole();
				}
				break;
			case 14:
				{
				setState(1879);
				if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
				setState(1880);
				createSpatialReference();
				}
				break;
			case 15:
				{
				setState(1881);
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				setState(1882);
				createUndoTablespace();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDatabaseContext extends ParserRuleContext {
		public TerminalNode DATABASE_SYMBOL() { return getToken(MySQLParser.DATABASE_SYMBOL, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<CreateDatabaseOptionContext> createDatabaseOption() {
			return getRuleContexts(CreateDatabaseOptionContext.class);
		}
		public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return getRuleContext(CreateDatabaseOptionContext.class,i);
		}
		public CreateDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabase; }
	}

	public final CreateDatabaseContext createDatabase() throws RecognitionException {
		CreateDatabaseContext _localctx = new CreateDatabaseContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_createDatabase);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1885);
			match(DATABASE_SYMBOL);
			setState(1887);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,107,_ctx) ) {
			case 1:
				{
				setState(1886);
				ifNotExists();
				}
				break;
			}
			setState(1889);
			schemaName();
			setState(1893);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,108,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1890);
					createDatabaseOption();
					}
					} 
				}
				setState(1895);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,108,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDatabaseOptionContext extends ParserRuleContext {
		public DefaultCharsetContext defaultCharset() {
			return getRuleContext(DefaultCharsetContext.class,0);
		}
		public DefaultCollationContext defaultCollation() {
			return getRuleContext(DefaultCollationContext.class,0);
		}
		public DefaultEncryptionContext defaultEncryption() {
			return getRuleContext(DefaultEncryptionContext.class,0);
		}
		public CreateDatabaseOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabaseOption; }
	}

	public final CreateDatabaseOptionContext createDatabaseOption() throws RecognitionException {
		CreateDatabaseOptionContext _localctx = new CreateDatabaseOptionContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_createDatabaseOption);
		try {
			setState(1900);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,109,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1896);
				defaultCharset();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1897);
				defaultCollation();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1898);
				if (!(serverVersion >= 80016)) throw new FailedPredicateException(this, "serverVersion >= 80016");
				setState(1899);
				defaultEncryption();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableContext extends ParserRuleContext {
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode LIKE_SYMBOL() { return getToken(MySQLParser.LIKE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode TEMPORARY_SYMBOL() { return getToken(MySQLParser.TEMPORARY_SYMBOL, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public TableElementListContext tableElementList() {
			return getRuleContext(TableElementListContext.class,0);
		}
		public CreateTableOptionsContext createTableOptions() {
			return getRuleContext(CreateTableOptionsContext.class,0);
		}
		public PartitionClauseContext partitionClause() {
			return getRuleContext(PartitionClauseContext.class,0);
		}
		public DuplicateAsQueryExpressionContext duplicateAsQueryExpression() {
			return getRuleContext(DuplicateAsQueryExpressionContext.class,0);
		}
		public CreateTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTable; }
	}

	public final CreateTableContext createTable() throws RecognitionException {
		CreateTableContext _localctx = new CreateTableContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_createTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1903);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMPORARY_SYMBOL) {
				{
				setState(1902);
				match(TEMPORARY_SYMBOL);
				}
			}

			setState(1905);
			match(TABLE_SYMBOL);
			setState(1907);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,111,_ctx) ) {
			case 1:
				{
				setState(1906);
				ifNotExists();
				}
				break;
			}
			setState(1909);
			tableName();
			setState(1932);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,116,_ctx) ) {
			case 1:
				{
				setState(1914);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,112,_ctx) ) {
				case 1:
					{
					setState(1910);
					match(OPEN_PAR_SYMBOL);
					setState(1911);
					tableElementList();
					setState(1912);
					match(CLOSE_PAR_SYMBOL);
					}
					break;
				}
				setState(1917);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,113,_ctx) ) {
				case 1:
					{
					setState(1916);
					createTableOptions();
					}
					break;
				}
				setState(1920);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,114,_ctx) ) {
				case 1:
					{
					setState(1919);
					partitionClause();
					}
					break;
				}
				setState(1923);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,115,_ctx) ) {
				case 1:
					{
					setState(1922);
					duplicateAsQueryExpression();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(1925);
				match(LIKE_SYMBOL);
				setState(1926);
				tableRef();
				}
				break;
			case 3:
				{
				setState(1927);
				match(OPEN_PAR_SYMBOL);
				setState(1928);
				match(LIKE_SYMBOL);
				setState(1929);
				tableRef();
				setState(1930);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableElementListContext extends ParserRuleContext {
		public List<TableElementContext> tableElement() {
			return getRuleContexts(TableElementContext.class);
		}
		public TableElementContext tableElement(int i) {
			return getRuleContext(TableElementContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TableElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableElementList; }
	}

	public final TableElementListContext tableElementList() throws RecognitionException {
		TableElementListContext _localctx = new TableElementListContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_tableElementList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1934);
			tableElement();
			setState(1939);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(1935);
				match(COMMA_SYMBOL);
				setState(1936);
				tableElement();
				}
				}
				setState(1941);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableElementContext extends ParserRuleContext {
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public TableConstraintDefContext tableConstraintDef() {
			return getRuleContext(TableConstraintDefContext.class,0);
		}
		public TableElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableElement; }
	}

	public final TableElementContext tableElement() throws RecognitionException {
		TableElementContext _localctx = new TableElementContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_tableElement);
		try {
			setState(1944);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,118,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1942);
				columnDefinition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1943);
				tableConstraintDef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DuplicateAsQueryExpressionContext extends ParserRuleContext {
		public QueryExpressionOrParensContext queryExpressionOrParens() {
			return getRuleContext(QueryExpressionOrParensContext.class,0);
		}
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public TerminalNode REPLACE_SYMBOL() { return getToken(MySQLParser.REPLACE_SYMBOL, 0); }
		public TerminalNode IGNORE_SYMBOL() { return getToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public DuplicateAsQueryExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_duplicateAsQueryExpression; }
	}

	public final DuplicateAsQueryExpressionContext duplicateAsQueryExpression() throws RecognitionException {
		DuplicateAsQueryExpressionContext _localctx = new DuplicateAsQueryExpressionContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_duplicateAsQueryExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1947);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,119,_ctx) ) {
			case 1:
				{
				setState(1946);
				_la = _input.LA(1);
				if ( !(_la==IGNORE_SYMBOL || _la==REPLACE_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(1950);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,120,_ctx) ) {
			case 1:
				{
				setState(1949);
				match(AS_SYMBOL);
				}
				break;
			}
			setState(1952);
			queryExpressionOrParens();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryExpressionOrParensContext extends ParserRuleContext {
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public QueryExpressionParensContext queryExpressionParens() {
			return getRuleContext(QueryExpressionParensContext.class,0);
		}
		public QueryExpressionOrParensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpressionOrParens; }
	}

	public final QueryExpressionOrParensContext queryExpressionOrParens() throws RecognitionException {
		QueryExpressionOrParensContext _localctx = new QueryExpressionOrParensContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_queryExpressionOrParens);
		try {
			setState(1956);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,121,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1954);
				queryExpression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1955);
				queryExpressionParens();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateRoutineContext extends ParserRuleContext {
		public TerminalNode CREATE_SYMBOL() { return getToken(MySQLParser.CREATE_SYMBOL, 0); }
		public TerminalNode EOF() { return getToken(MySQLParser.EOF, 0); }
		public CreateProcedureContext createProcedure() {
			return getRuleContext(CreateProcedureContext.class,0);
		}
		public CreateFunctionContext createFunction() {
			return getRuleContext(CreateFunctionContext.class,0);
		}
		public CreateUdfContext createUdf() {
			return getRuleContext(CreateUdfContext.class,0);
		}
		public TerminalNode SEMICOLON_SYMBOL() { return getToken(MySQLParser.SEMICOLON_SYMBOL, 0); }
		public CreateRoutineContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createRoutine; }
	}

	public final CreateRoutineContext createRoutine() throws RecognitionException {
		CreateRoutineContext _localctx = new CreateRoutineContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_createRoutine);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1958);
			match(CREATE_SYMBOL);
			setState(1962);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,122,_ctx) ) {
			case 1:
				{
				setState(1959);
				createProcedure();
				}
				break;
			case 2:
				{
				setState(1960);
				createFunction();
				}
				break;
			case 3:
				{
				setState(1961);
				createUdf();
				}
				break;
			}
			setState(1965);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEMICOLON_SYMBOL) {
				{
				setState(1964);
				match(SEMICOLON_SYMBOL);
				}
			}

			setState(1967);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateProcedureContext extends ParserRuleContext {
		public TerminalNode PROCEDURE_SYMBOL() { return getToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
		public ProcedureNameContext procedureName() {
			return getRuleContext(ProcedureNameContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public DefinerClauseContext definerClause() {
			return getRuleContext(DefinerClauseContext.class,0);
		}
		public List<ProcedureParameterContext> procedureParameter() {
			return getRuleContexts(ProcedureParameterContext.class);
		}
		public ProcedureParameterContext procedureParameter(int i) {
			return getRuleContext(ProcedureParameterContext.class,i);
		}
		public List<RoutineCreateOptionContext> routineCreateOption() {
			return getRuleContexts(RoutineCreateOptionContext.class);
		}
		public RoutineCreateOptionContext routineCreateOption(int i) {
			return getRuleContext(RoutineCreateOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public CreateProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createProcedure; }
	}

	public final CreateProcedureContext createProcedure() throws RecognitionException {
		CreateProcedureContext _localctx = new CreateProcedureContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_createProcedure);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1970);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				setState(1969);
				definerClause();
				}
			}

			setState(1972);
			match(PROCEDURE_SYMBOL);
			setState(1973);
			procedureName();
			setState(1974);
			match(OPEN_PAR_SYMBOL);
			setState(1983);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,126,_ctx) ) {
			case 1:
				{
				setState(1975);
				procedureParameter();
				setState(1980);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(1976);
					match(COMMA_SYMBOL);
					setState(1977);
					procedureParameter();
					}
					}
					setState(1982);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(1985);
			match(CLOSE_PAR_SYMBOL);
			setState(1989);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,127,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1986);
					routineCreateOption();
					}
					} 
				}
				setState(1991);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,127,_ctx);
			}
			setState(1992);
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionContext extends ParserRuleContext {
		public TerminalNode FUNCTION_SYMBOL() { return getToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode RETURNS_SYMBOL() { return getToken(MySQLParser.RETURNS_SYMBOL, 0); }
		public TypeWithOptCollateContext typeWithOptCollate() {
			return getRuleContext(TypeWithOptCollateContext.class,0);
		}
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public DefinerClauseContext definerClause() {
			return getRuleContext(DefinerClauseContext.class,0);
		}
		public List<FunctionParameterContext> functionParameter() {
			return getRuleContexts(FunctionParameterContext.class);
		}
		public FunctionParameterContext functionParameter(int i) {
			return getRuleContext(FunctionParameterContext.class,i);
		}
		public List<RoutineCreateOptionContext> routineCreateOption() {
			return getRuleContexts(RoutineCreateOptionContext.class);
		}
		public RoutineCreateOptionContext routineCreateOption(int i) {
			return getRuleContext(RoutineCreateOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public CreateFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunction; }
	}

	public final CreateFunctionContext createFunction() throws RecognitionException {
		CreateFunctionContext _localctx = new CreateFunctionContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_createFunction);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1995);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				setState(1994);
				definerClause();
				}
			}

			setState(1997);
			match(FUNCTION_SYMBOL);
			setState(1998);
			functionName();
			setState(1999);
			match(OPEN_PAR_SYMBOL);
			setState(2008);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,130,_ctx) ) {
			case 1:
				{
				setState(2000);
				functionParameter();
				setState(2005);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(2001);
					match(COMMA_SYMBOL);
					setState(2002);
					functionParameter();
					}
					}
					setState(2007);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(2010);
			match(CLOSE_PAR_SYMBOL);
			setState(2011);
			match(RETURNS_SYMBOL);
			setState(2012);
			typeWithOptCollate();
			setState(2016);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,131,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2013);
					routineCreateOption();
					}
					} 
				}
				setState(2018);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,131,_ctx);
			}
			setState(2019);
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUdfContext extends ParserRuleContext {
		public Token type;
		public TerminalNode FUNCTION_SYMBOL() { return getToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		public UdfNameContext udfName() {
			return getRuleContext(UdfNameContext.class,0);
		}
		public TerminalNode RETURNS_SYMBOL() { return getToken(MySQLParser.RETURNS_SYMBOL, 0); }
		public TerminalNode SONAME_SYMBOL() { return getToken(MySQLParser.SONAME_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode STRING_SYMBOL() { return getToken(MySQLParser.STRING_SYMBOL, 0); }
		public TerminalNode INT_SYMBOL() { return getToken(MySQLParser.INT_SYMBOL, 0); }
		public TerminalNode REAL_SYMBOL() { return getToken(MySQLParser.REAL_SYMBOL, 0); }
		public TerminalNode DECIMAL_SYMBOL() { return getToken(MySQLParser.DECIMAL_SYMBOL, 0); }
		public TerminalNode AGGREGATE_SYMBOL() { return getToken(MySQLParser.AGGREGATE_SYMBOL, 0); }
		public CreateUdfContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUdf; }
	}

	public final CreateUdfContext createUdf() throws RecognitionException {
		CreateUdfContext _localctx = new CreateUdfContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_createUdf);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2022);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AGGREGATE_SYMBOL) {
				{
				setState(2021);
				match(AGGREGATE_SYMBOL);
				}
			}

			setState(2024);
			match(FUNCTION_SYMBOL);
			setState(2025);
			udfName();
			setState(2026);
			match(RETURNS_SYMBOL);
			setState(2027);
			((CreateUdfContext)_localctx).type = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==STRING_SYMBOL || _la==DECIMAL_SYMBOL || _la==INT_SYMBOL || _la==REAL_SYMBOL) ) {
				((CreateUdfContext)_localctx).type = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2028);
			match(SONAME_SYMBOL);
			setState(2029);
			textLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoutineCreateOptionContext extends ParserRuleContext {
		public RoutineOptionContext routineOption() {
			return getRuleContext(RoutineOptionContext.class,0);
		}
		public TerminalNode DETERMINISTIC_SYMBOL() { return getToken(MySQLParser.DETERMINISTIC_SYMBOL, 0); }
		public TerminalNode NOT_SYMBOL() { return getToken(MySQLParser.NOT_SYMBOL, 0); }
		public RoutineCreateOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineCreateOption; }
	}

	public final RoutineCreateOptionContext routineCreateOption() throws RecognitionException {
		RoutineCreateOptionContext _localctx = new RoutineCreateOptionContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_routineCreateOption);
		int _la;
		try {
			setState(2036);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMMENT_SYMBOL:
			case CONTAINS_SYMBOL:
			case LANGUAGE_SYMBOL:
			case NO_SYMBOL:
			case MODIFIES_SYMBOL:
			case READS_SYMBOL:
			case SQL_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2031);
				routineOption();
				}
				break;
			case DETERMINISTIC_SYMBOL:
			case NOT_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2033);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT_SYMBOL) {
					{
					setState(2032);
					match(NOT_SYMBOL);
					}
				}

				setState(2035);
				match(DETERMINISTIC_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoutineAlterOptionsContext extends ParserRuleContext {
		public List<RoutineCreateOptionContext> routineCreateOption() {
			return getRuleContexts(RoutineCreateOptionContext.class);
		}
		public RoutineCreateOptionContext routineCreateOption(int i) {
			return getRuleContext(RoutineCreateOptionContext.class,i);
		}
		public RoutineAlterOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineAlterOptions; }
	}

	public final RoutineAlterOptionsContext routineAlterOptions() throws RecognitionException {
		RoutineAlterOptionsContext _localctx = new RoutineAlterOptionsContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_routineAlterOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2039); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2038);
				routineCreateOption();
				}
				}
				setState(2041); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COMMENT_SYMBOL) | (1L << CONTAINS_SYMBOL) | (1L << LANGUAGE_SYMBOL) | (1L << NO_SYMBOL))) != 0) || _la==DETERMINISTIC_SYMBOL || ((((_la - 567)) & ~0x3f) == 0 && ((1L << (_la - 567)) & ((1L << (MODIFIES_SYMBOL - 567)) | (1L << (NOT_SYMBOL - 567)) | (1L << (READS_SYMBOL - 567)))) != 0) || _la==SQL_SYMBOL );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoutineOptionContext extends ParserRuleContext {
		public Token option;
		public Token security;
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode COMMENT_SYMBOL() { return getToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public TerminalNode SQL_SYMBOL() { return getToken(MySQLParser.SQL_SYMBOL, 0); }
		public TerminalNode LANGUAGE_SYMBOL() { return getToken(MySQLParser.LANGUAGE_SYMBOL, 0); }
		public TerminalNode NO_SYMBOL() { return getToken(MySQLParser.NO_SYMBOL, 0); }
		public TerminalNode CONTAINS_SYMBOL() { return getToken(MySQLParser.CONTAINS_SYMBOL, 0); }
		public TerminalNode DATA_SYMBOL() { return getToken(MySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode READS_SYMBOL() { return getToken(MySQLParser.READS_SYMBOL, 0); }
		public TerminalNode MODIFIES_SYMBOL() { return getToken(MySQLParser.MODIFIES_SYMBOL, 0); }
		public TerminalNode SECURITY_SYMBOL() { return getToken(MySQLParser.SECURITY_SYMBOL, 0); }
		public TerminalNode DEFINER_SYMBOL() { return getToken(MySQLParser.DEFINER_SYMBOL, 0); }
		public TerminalNode INVOKER_SYMBOL() { return getToken(MySQLParser.INVOKER_SYMBOL, 0); }
		public RoutineOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineOption; }
	}

	public final RoutineOptionContext routineOption() throws RecognitionException {
		RoutineOptionContext _localctx = new RoutineOptionContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_routineOption);
		int _la;
		try {
			setState(2060);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMMENT_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2043);
				((RoutineOptionContext)_localctx).option = match(COMMENT_SYMBOL);
				setState(2044);
				textLiteral();
				}
				break;
			case LANGUAGE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2045);
				((RoutineOptionContext)_localctx).option = match(LANGUAGE_SYMBOL);
				setState(2046);
				match(SQL_SYMBOL);
				}
				break;
			case NO_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(2047);
				((RoutineOptionContext)_localctx).option = match(NO_SYMBOL);
				setState(2048);
				match(SQL_SYMBOL);
				}
				break;
			case CONTAINS_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(2049);
				((RoutineOptionContext)_localctx).option = match(CONTAINS_SYMBOL);
				setState(2050);
				match(SQL_SYMBOL);
				}
				break;
			case READS_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(2051);
				((RoutineOptionContext)_localctx).option = match(READS_SYMBOL);
				setState(2052);
				match(SQL_SYMBOL);
				setState(2053);
				match(DATA_SYMBOL);
				}
				break;
			case MODIFIES_SYMBOL:
				enterOuterAlt(_localctx, 6);
				{
				setState(2054);
				((RoutineOptionContext)_localctx).option = match(MODIFIES_SYMBOL);
				setState(2055);
				match(SQL_SYMBOL);
				setState(2056);
				match(DATA_SYMBOL);
				}
				break;
			case SQL_SYMBOL:
				enterOuterAlt(_localctx, 7);
				{
				setState(2057);
				((RoutineOptionContext)_localctx).option = match(SQL_SYMBOL);
				setState(2058);
				match(SECURITY_SYMBOL);
				setState(2059);
				((RoutineOptionContext)_localctx).security = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFINER_SYMBOL || _la==INVOKER_SYMBOL) ) {
					((RoutineOptionContext)_localctx).security = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateIndexContext extends ParserRuleContext {
		public Token type;
		public CreateIndexTargetContext createIndexTarget() {
			return getRuleContext(CreateIndexTargetContext.class,0);
		}
		public TerminalNode INDEX_SYMBOL() { return getToken(MySQLParser.INDEX_SYMBOL, 0); }
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public OnlineOptionContext onlineOption() {
			return getRuleContext(OnlineOptionContext.class,0);
		}
		public TerminalNode FULLTEXT_SYMBOL() { return getToken(MySQLParser.FULLTEXT_SYMBOL, 0); }
		public TerminalNode SPATIAL_SYMBOL() { return getToken(MySQLParser.SPATIAL_SYMBOL, 0); }
		public IndexLockAndAlgorithmContext indexLockAndAlgorithm() {
			return getRuleContext(IndexLockAndAlgorithmContext.class,0);
		}
		public TerminalNode UNIQUE_SYMBOL() { return getToken(MySQLParser.UNIQUE_SYMBOL, 0); }
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<FulltextIndexOptionContext> fulltextIndexOption() {
			return getRuleContexts(FulltextIndexOptionContext.class);
		}
		public FulltextIndexOptionContext fulltextIndexOption(int i) {
			return getRuleContext(FulltextIndexOptionContext.class,i);
		}
		public List<SpatialIndexOptionContext> spatialIndexOption() {
			return getRuleContexts(SpatialIndexOptionContext.class);
		}
		public SpatialIndexOptionContext spatialIndexOption(int i) {
			return getRuleContext(SpatialIndexOptionContext.class,i);
		}
		public IndexTypeClauseContext indexTypeClause() {
			return getRuleContext(IndexTypeClauseContext.class,0);
		}
		public IndexNameAndTypeContext indexNameAndType() {
			return getRuleContext(IndexNameAndTypeContext.class,0);
		}
		public CreateIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createIndex; }
	}

	public final CreateIndexContext createIndex() throws RecognitionException {
		CreateIndexContext _localctx = new CreateIndexContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_createIndex);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2063);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFLINE_SYMBOL || _la==ONLINE_SYMBOL) {
				{
				setState(2062);
				onlineOption();
				}
			}

			setState(2106);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INDEX_SYMBOL:
			case UNIQUE_SYMBOL:
				{
				setState(2066);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNIQUE_SYMBOL) {
					{
					setState(2065);
					match(UNIQUE_SYMBOL);
					}
				}

				setState(2068);
				((CreateIndexContext)_localctx).type = match(INDEX_SYMBOL);
				setState(2077);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,141,_ctx) ) {
				case 1:
					{
					setState(2069);
					if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
					setState(2070);
					indexName();
					setState(2072);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==TYPE_SYMBOL || _la==USING_SYMBOL) {
						{
						setState(2071);
						indexTypeClause();
						}
					}

					}
					break;
				case 2:
					{
					setState(2075);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,140,_ctx) ) {
					case 1:
						{
						setState(2074);
						indexNameAndType();
						}
						break;
					}
					}
					break;
				}
				setState(2079);
				createIndexTarget();
				setState(2083);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,142,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2080);
						indexOption();
						}
						} 
					}
					setState(2085);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,142,_ctx);
				}
				}
				break;
			case FULLTEXT_SYMBOL:
				{
				setState(2086);
				((CreateIndexContext)_localctx).type = match(FULLTEXT_SYMBOL);
				setState(2087);
				match(INDEX_SYMBOL);
				setState(2088);
				indexName();
				setState(2089);
				createIndexTarget();
				setState(2093);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,143,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2090);
						fulltextIndexOption();
						}
						} 
					}
					setState(2095);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,143,_ctx);
				}
				}
				break;
			case SPATIAL_SYMBOL:
				{
				setState(2096);
				((CreateIndexContext)_localctx).type = match(SPATIAL_SYMBOL);
				setState(2097);
				match(INDEX_SYMBOL);
				setState(2098);
				indexName();
				setState(2099);
				createIndexTarget();
				setState(2103);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,144,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2100);
						spatialIndexOption();
						}
						} 
					}
					setState(2105);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,144,_ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2109);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALGORITHM_SYMBOL || _la==LOCK_SYMBOL) {
				{
				setState(2108);
				indexLockAndAlgorithm();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexNameAndTypeContext extends ParserRuleContext {
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public TerminalNode USING_SYMBOL() { return getToken(MySQLParser.USING_SYMBOL, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public TerminalNode TYPE_SYMBOL() { return getToken(MySQLParser.TYPE_SYMBOL, 0); }
		public IndexNameAndTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexNameAndType; }
	}

	public final IndexNameAndTypeContext indexNameAndType() throws RecognitionException {
		IndexNameAndTypeContext _localctx = new IndexNameAndTypeContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_indexNameAndType);
		try {
			setState(2120);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,148,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2111);
				indexName();
				setState(2114);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,147,_ctx) ) {
				case 1:
					{
					setState(2112);
					match(USING_SYMBOL);
					setState(2113);
					indexType();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2116);
				indexName();
				setState(2117);
				match(TYPE_SYMBOL);
				setState(2118);
				indexType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateIndexTargetContext extends ParserRuleContext {
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public KeyListVariantsContext keyListVariants() {
			return getRuleContext(KeyListVariantsContext.class,0);
		}
		public CreateIndexTargetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createIndexTarget; }
	}

	public final CreateIndexTargetContext createIndexTarget() throws RecognitionException {
		CreateIndexTargetContext _localctx = new CreateIndexTargetContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_createIndexTarget);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2122);
			match(ON_SYMBOL);
			setState(2123);
			tableRef();
			setState(2124);
			keyListVariants();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateLogfileGroupContext extends ParserRuleContext {
		public TerminalNode LOGFILE_SYMBOL() { return getToken(MySQLParser.LOGFILE_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MySQLParser.GROUP_SYMBOL, 0); }
		public LogfileGroupNameContext logfileGroupName() {
			return getRuleContext(LogfileGroupNameContext.class,0);
		}
		public TerminalNode ADD_SYMBOL() { return getToken(MySQLParser.ADD_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode UNDOFILE_SYMBOL() { return getToken(MySQLParser.UNDOFILE_SYMBOL, 0); }
		public TerminalNode REDOFILE_SYMBOL() { return getToken(MySQLParser.REDOFILE_SYMBOL, 0); }
		public LogfileGroupOptionsContext logfileGroupOptions() {
			return getRuleContext(LogfileGroupOptionsContext.class,0);
		}
		public CreateLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createLogfileGroup; }
	}

	public final CreateLogfileGroupContext createLogfileGroup() throws RecognitionException {
		CreateLogfileGroupContext _localctx = new CreateLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_createLogfileGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2126);
			match(LOGFILE_SYMBOL);
			setState(2127);
			match(GROUP_SYMBOL);
			setState(2128);
			logfileGroupName();
			setState(2129);
			match(ADD_SYMBOL);
			setState(2130);
			_la = _input.LA(1);
			if ( !(_la==REDOFILE_SYMBOL || _la==UNDOFILE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2131);
			textLiteral();
			setState(2133);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT_SYMBOL || _la==ENGINE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || ((((_la - 237)) & ~0x3f) == 0 && ((1L << (_la - 237)) & ((1L << (NO_WAIT_SYMBOL - 237)) | (1L << (NODEGROUP_SYMBOL - 237)) | (1L << (REDO_BUFFER_SIZE_SYMBOL - 237)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (STORAGE_SYMBOL - 328)) | (1L << (UNDO_BUFFER_SIZE_SYMBOL - 328)) | (1L << (WAIT_SYMBOL - 328)))) != 0)) {
				{
				setState(2132);
				logfileGroupOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LogfileGroupOptionsContext extends ParserRuleContext {
		public List<LogfileGroupOptionContext> logfileGroupOption() {
			return getRuleContexts(LogfileGroupOptionContext.class);
		}
		public LogfileGroupOptionContext logfileGroupOption(int i) {
			return getRuleContext(LogfileGroupOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public LogfileGroupOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logfileGroupOptions; }
	}

	public final LogfileGroupOptionsContext logfileGroupOptions() throws RecognitionException {
		LogfileGroupOptionsContext _localctx = new LogfileGroupOptionsContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_logfileGroupOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2135);
			logfileGroupOption();
			setState(2142);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMENT_SYMBOL || _la==ENGINE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || ((((_la - 237)) & ~0x3f) == 0 && ((1L << (_la - 237)) & ((1L << (NO_WAIT_SYMBOL - 237)) | (1L << (NODEGROUP_SYMBOL - 237)) | (1L << (REDO_BUFFER_SIZE_SYMBOL - 237)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (STORAGE_SYMBOL - 328)) | (1L << (UNDO_BUFFER_SIZE_SYMBOL - 328)) | (1L << (WAIT_SYMBOL - 328)))) != 0) || _la==COMMA_SYMBOL) {
				{
				{
				setState(2137);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(2136);
					match(COMMA_SYMBOL);
					}
				}

				setState(2139);
				logfileGroupOption();
				}
				}
				setState(2144);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LogfileGroupOptionContext extends ParserRuleContext {
		public TsOptionInitialSizeContext tsOptionInitialSize() {
			return getRuleContext(TsOptionInitialSizeContext.class,0);
		}
		public TsOptionUndoRedoBufferSizeContext tsOptionUndoRedoBufferSize() {
			return getRuleContext(TsOptionUndoRedoBufferSizeContext.class,0);
		}
		public TsOptionNodegroupContext tsOptionNodegroup() {
			return getRuleContext(TsOptionNodegroupContext.class,0);
		}
		public TsOptionEngineContext tsOptionEngine() {
			return getRuleContext(TsOptionEngineContext.class,0);
		}
		public TsOptionWaitContext tsOptionWait() {
			return getRuleContext(TsOptionWaitContext.class,0);
		}
		public TsOptionCommentContext tsOptionComment() {
			return getRuleContext(TsOptionCommentContext.class,0);
		}
		public LogfileGroupOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logfileGroupOption; }
	}

	public final LogfileGroupOptionContext logfileGroupOption() throws RecognitionException {
		LogfileGroupOptionContext _localctx = new LogfileGroupOptionContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_logfileGroupOption);
		try {
			setState(2151);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INITIAL_SIZE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2145);
				tsOptionInitialSize();
				}
				break;
			case REDO_BUFFER_SIZE_SYMBOL:
			case UNDO_BUFFER_SIZE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2146);
				tsOptionUndoRedoBufferSize();
				}
				break;
			case NODEGROUP_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(2147);
				tsOptionNodegroup();
				}
				break;
			case ENGINE_SYMBOL:
			case STORAGE_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(2148);
				tsOptionEngine();
				}
				break;
			case NO_WAIT_SYMBOL:
			case WAIT_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(2149);
				tsOptionWait();
				}
				break;
			case COMMENT_SYMBOL:
				enterOuterAlt(_localctx, 6);
				{
				setState(2150);
				tsOptionComment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateServerContext extends ParserRuleContext {
		public TerminalNode SERVER_SYMBOL() { return getToken(MySQLParser.SERVER_SYMBOL, 0); }
		public ServerNameContext serverName() {
			return getRuleContext(ServerNameContext.class,0);
		}
		public TerminalNode FOREIGN_SYMBOL() { return getToken(MySQLParser.FOREIGN_SYMBOL, 0); }
		public TerminalNode DATA_SYMBOL() { return getToken(MySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode WRAPPER_SYMBOL() { return getToken(MySQLParser.WRAPPER_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public ServerOptionsContext serverOptions() {
			return getRuleContext(ServerOptionsContext.class,0);
		}
		public CreateServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createServer; }
	}

	public final CreateServerContext createServer() throws RecognitionException {
		CreateServerContext _localctx = new CreateServerContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_createServer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2153);
			match(SERVER_SYMBOL);
			setState(2154);
			serverName();
			setState(2155);
			match(FOREIGN_SYMBOL);
			setState(2156);
			match(DATA_SYMBOL);
			setState(2157);
			match(WRAPPER_SYMBOL);
			setState(2158);
			textOrIdentifier();
			setState(2159);
			serverOptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ServerOptionsContext extends ParserRuleContext {
		public TerminalNode OPTIONS_SYMBOL() { return getToken(MySQLParser.OPTIONS_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<ServerOptionContext> serverOption() {
			return getRuleContexts(ServerOptionContext.class);
		}
		public ServerOptionContext serverOption(int i) {
			return getRuleContext(ServerOptionContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ServerOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serverOptions; }
	}

	public final ServerOptionsContext serverOptions() throws RecognitionException {
		ServerOptionsContext _localctx = new ServerOptionsContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_serverOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2161);
			match(OPTIONS_SYMBOL);
			setState(2162);
			match(OPEN_PAR_SYMBOL);
			setState(2163);
			serverOption();
			setState(2168);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(2164);
				match(COMMA_SYMBOL);
				setState(2165);
				serverOption();
				}
				}
				setState(2170);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2171);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ServerOptionContext extends ParserRuleContext {
		public Token option;
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode HOST_SYMBOL() { return getToken(MySQLParser.HOST_SYMBOL, 0); }
		public TerminalNode DATABASE_SYMBOL() { return getToken(MySQLParser.DATABASE_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public TerminalNode SOCKET_SYMBOL() { return getToken(MySQLParser.SOCKET_SYMBOL, 0); }
		public TerminalNode OWNER_SYMBOL() { return getToken(MySQLParser.OWNER_SYMBOL, 0); }
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public TerminalNode PORT_SYMBOL() { return getToken(MySQLParser.PORT_SYMBOL, 0); }
		public ServerOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serverOption; }
	}

	public final ServerOptionContext serverOption() throws RecognitionException {
		ServerOptionContext _localctx = new ServerOptionContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_serverOption);
		try {
			setState(2187);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case HOST_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2173);
				((ServerOptionContext)_localctx).option = match(HOST_SYMBOL);
				setState(2174);
				textLiteral();
				}
				break;
			case DATABASE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2175);
				((ServerOptionContext)_localctx).option = match(DATABASE_SYMBOL);
				setState(2176);
				textLiteral();
				}
				break;
			case USER_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(2177);
				((ServerOptionContext)_localctx).option = match(USER_SYMBOL);
				setState(2178);
				textLiteral();
				}
				break;
			case PASSWORD_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(2179);
				((ServerOptionContext)_localctx).option = match(PASSWORD_SYMBOL);
				setState(2180);
				textLiteral();
				}
				break;
			case SOCKET_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(2181);
				((ServerOptionContext)_localctx).option = match(SOCKET_SYMBOL);
				setState(2182);
				textLiteral();
				}
				break;
			case OWNER_SYMBOL:
				enterOuterAlt(_localctx, 6);
				{
				setState(2183);
				((ServerOptionContext)_localctx).option = match(OWNER_SYMBOL);
				setState(2184);
				textLiteral();
				}
				break;
			case PORT_SYMBOL:
				enterOuterAlt(_localctx, 7);
				{
				setState(2185);
				((ServerOptionContext)_localctx).option = match(PORT_SYMBOL);
				setState(2186);
				ulong_number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTablespaceContext extends ParserRuleContext {
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TablespaceNameContext tablespaceName() {
			return getRuleContext(TablespaceNameContext.class,0);
		}
		public TsDataFileNameContext tsDataFileName() {
			return getRuleContext(TsDataFileNameContext.class,0);
		}
		public TerminalNode USE_SYMBOL() { return getToken(MySQLParser.USE_SYMBOL, 0); }
		public TerminalNode LOGFILE_SYMBOL() { return getToken(MySQLParser.LOGFILE_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MySQLParser.GROUP_SYMBOL, 0); }
		public LogfileGroupRefContext logfileGroupRef() {
			return getRuleContext(LogfileGroupRefContext.class,0);
		}
		public TablespaceOptionsContext tablespaceOptions() {
			return getRuleContext(TablespaceOptionsContext.class,0);
		}
		public CreateTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTablespace; }
	}

	public final CreateTablespaceContext createTablespace() throws RecognitionException {
		CreateTablespaceContext _localctx = new CreateTablespaceContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_createTablespace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2189);
			match(TABLESPACE_SYMBOL);
			setState(2190);
			tablespaceName();
			setState(2191);
			tsDataFileName();
			setState(2196);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,155,_ctx) ) {
			case 1:
				{
				setState(2192);
				match(USE_SYMBOL);
				setState(2193);
				match(LOGFILE_SYMBOL);
				setState(2194);
				match(GROUP_SYMBOL);
				setState(2195);
				logfileGroupRef();
				}
				break;
			}
			setState(2199);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,156,_ctx) ) {
			case 1:
				{
				setState(2198);
				tablespaceOptions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUndoTablespaceContext extends ParserRuleContext {
		public TerminalNode UNDO_SYMBOL() { return getToken(MySQLParser.UNDO_SYMBOL, 0); }
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TablespaceNameContext tablespaceName() {
			return getRuleContext(TablespaceNameContext.class,0);
		}
		public TerminalNode ADD_SYMBOL() { return getToken(MySQLParser.ADD_SYMBOL, 0); }
		public TsDataFileContext tsDataFile() {
			return getRuleContext(TsDataFileContext.class,0);
		}
		public UndoTableSpaceOptionsContext undoTableSpaceOptions() {
			return getRuleContext(UndoTableSpaceOptionsContext.class,0);
		}
		public CreateUndoTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUndoTablespace; }
	}

	public final CreateUndoTablespaceContext createUndoTablespace() throws RecognitionException {
		CreateUndoTablespaceContext _localctx = new CreateUndoTablespaceContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_createUndoTablespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2201);
			match(UNDO_SYMBOL);
			setState(2202);
			match(TABLESPACE_SYMBOL);
			setState(2203);
			tablespaceName();
			setState(2204);
			match(ADD_SYMBOL);
			setState(2205);
			tsDataFile();
			setState(2207);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE_SYMBOL || _la==STORAGE_SYMBOL) {
				{
				setState(2206);
				undoTableSpaceOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TsDataFileNameContext extends ParserRuleContext {
		public TerminalNode ADD_SYMBOL() { return getToken(MySQLParser.ADD_SYMBOL, 0); }
		public TsDataFileContext tsDataFile() {
			return getRuleContext(TsDataFileContext.class,0);
		}
		public TsDataFileNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsDataFileName; }
	}

	public final TsDataFileNameContext tsDataFileName() throws RecognitionException {
		TsDataFileNameContext _localctx = new TsDataFileNameContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_tsDataFileName);
		try {
			setState(2216);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,159,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2209);
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				setState(2212);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,158,_ctx) ) {
				case 1:
					{
					setState(2210);
					match(ADD_SYMBOL);
					setState(2211);
					tsDataFile();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2214);
				match(ADD_SYMBOL);
				setState(2215);
				tsDataFile();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TsDataFileContext extends ParserRuleContext {
		public TerminalNode DATAFILE_SYMBOL() { return getToken(MySQLParser.DATAFILE_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TsDataFileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsDataFile; }
	}

	public final TsDataFileContext tsDataFile() throws RecognitionException {
		TsDataFileContext _localctx = new TsDataFileContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_tsDataFile);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2218);
			match(DATAFILE_SYMBOL);
			setState(2219);
			textLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablespaceOptionsContext extends ParserRuleContext {
		public List<TablespaceOptionContext> tablespaceOption() {
			return getRuleContexts(TablespaceOptionContext.class);
		}
		public TablespaceOptionContext tablespaceOption(int i) {
			return getRuleContext(TablespaceOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TablespaceOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespaceOptions; }
	}

	public final TablespaceOptionsContext tablespaceOptions() throws RecognitionException {
		TablespaceOptionsContext _localctx = new TablespaceOptionsContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_tablespaceOptions);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2221);
			tablespaceOption();
			setState(2228);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,161,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2223);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,160,_ctx) ) {
					case 1:
						{
						setState(2222);
						match(COMMA_SYMBOL);
						}
						break;
					}
					setState(2225);
					tablespaceOption();
					}
					} 
				}
				setState(2230);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,161,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablespaceOptionContext extends ParserRuleContext {
		public TsOptionInitialSizeContext tsOptionInitialSize() {
			return getRuleContext(TsOptionInitialSizeContext.class,0);
		}
		public TsOptionAutoextendSizeContext tsOptionAutoextendSize() {
			return getRuleContext(TsOptionAutoextendSizeContext.class,0);
		}
		public TsOptionMaxSizeContext tsOptionMaxSize() {
			return getRuleContext(TsOptionMaxSizeContext.class,0);
		}
		public TsOptionExtentSizeContext tsOptionExtentSize() {
			return getRuleContext(TsOptionExtentSizeContext.class,0);
		}
		public TsOptionNodegroupContext tsOptionNodegroup() {
			return getRuleContext(TsOptionNodegroupContext.class,0);
		}
		public TsOptionEngineContext tsOptionEngine() {
			return getRuleContext(TsOptionEngineContext.class,0);
		}
		public TsOptionWaitContext tsOptionWait() {
			return getRuleContext(TsOptionWaitContext.class,0);
		}
		public TsOptionCommentContext tsOptionComment() {
			return getRuleContext(TsOptionCommentContext.class,0);
		}
		public TsOptionFileblockSizeContext tsOptionFileblockSize() {
			return getRuleContext(TsOptionFileblockSizeContext.class,0);
		}
		public TsOptionEncryptionContext tsOptionEncryption() {
			return getRuleContext(TsOptionEncryptionContext.class,0);
		}
		public TablespaceOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespaceOption; }
	}

	public final TablespaceOptionContext tablespaceOption() throws RecognitionException {
		TablespaceOptionContext _localctx = new TablespaceOptionContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_tablespaceOption);
		try {
			setState(2243);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,162,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2231);
				tsOptionInitialSize();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2232);
				tsOptionAutoextendSize();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2233);
				tsOptionMaxSize();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2234);
				tsOptionExtentSize();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2235);
				tsOptionNodegroup();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2236);
				tsOptionEngine();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2237);
				tsOptionWait();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2238);
				tsOptionComment();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2239);
				if (!(serverVersion >= 50707)) throw new FailedPredicateException(this, "serverVersion >= 50707");
				setState(2240);
				tsOptionFileblockSize();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2241);
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				setState(2242);
				tsOptionEncryption();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TsOptionInitialSizeContext extends ParserRuleContext {
		public TerminalNode INITIAL_SIZE_SYMBOL() { return getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0); }
		public SizeNumberContext sizeNumber() {
			return getRuleContext(SizeNumberContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionInitialSizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsOptionInitialSize; }
	}

	public final TsOptionInitialSizeContext tsOptionInitialSize() throws RecognitionException {
		TsOptionInitialSizeContext _localctx = new TsOptionInitialSizeContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_tsOptionInitialSize);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2245);
			match(INITIAL_SIZE_SYMBOL);
			setState(2247);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,163,_ctx) ) {
			case 1:
				{
				setState(2246);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(2249);
			sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TsOptionUndoRedoBufferSizeContext extends ParserRuleContext {
		public SizeNumberContext sizeNumber() {
			return getRuleContext(SizeNumberContext.class,0);
		}
		public TerminalNode UNDO_BUFFER_SIZE_SYMBOL() { return getToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0); }
		public TerminalNode REDO_BUFFER_SIZE_SYMBOL() { return getToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionUndoRedoBufferSizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsOptionUndoRedoBufferSize; }
	}

	public final TsOptionUndoRedoBufferSizeContext tsOptionUndoRedoBufferSize() throws RecognitionException {
		TsOptionUndoRedoBufferSizeContext _localctx = new TsOptionUndoRedoBufferSizeContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_tsOptionUndoRedoBufferSize);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2251);
			_la = _input.LA(1);
			if ( !(_la==REDO_BUFFER_SIZE_SYMBOL || _la==UNDO_BUFFER_SIZE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2253);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,164,_ctx) ) {
			case 1:
				{
				setState(2252);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(2255);
			sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TsOptionAutoextendSizeContext extends ParserRuleContext {
		public TerminalNode AUTOEXTEND_SIZE_SYMBOL() { return getToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0); }
		public SizeNumberContext sizeNumber() {
			return getRuleContext(SizeNumberContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionAutoextendSizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsOptionAutoextendSize; }
	}

	public final TsOptionAutoextendSizeContext tsOptionAutoextendSize() throws RecognitionException {
		TsOptionAutoextendSizeContext _localctx = new TsOptionAutoextendSizeContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_tsOptionAutoextendSize);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2257);
			match(AUTOEXTEND_SIZE_SYMBOL);
			setState(2259);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,165,_ctx) ) {
			case 1:
				{
				setState(2258);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(2261);
			sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TsOptionMaxSizeContext extends ParserRuleContext {
		public TerminalNode MAX_SIZE_SYMBOL() { return getToken(MySQLParser.MAX_SIZE_SYMBOL, 0); }
		public SizeNumberContext sizeNumber() {
			return getRuleContext(SizeNumberContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionMaxSizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsOptionMaxSize; }
	}

	public final TsOptionMaxSizeContext tsOptionMaxSize() throws RecognitionException {
		TsOptionMaxSizeContext _localctx = new TsOptionMaxSizeContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_tsOptionMaxSize);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2263);
			match(MAX_SIZE_SYMBOL);
			setState(2265);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,166,_ctx) ) {
			case 1:
				{
				setState(2264);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(2267);
			sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TsOptionExtentSizeContext extends ParserRuleContext {
		public TerminalNode EXTENT_SIZE_SYMBOL() { return getToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0); }
		public SizeNumberContext sizeNumber() {
			return getRuleContext(SizeNumberContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionExtentSizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsOptionExtentSize; }
	}

	public final TsOptionExtentSizeContext tsOptionExtentSize() throws RecognitionException {
		TsOptionExtentSizeContext _localctx = new TsOptionExtentSizeContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_tsOptionExtentSize);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2269);
			match(EXTENT_SIZE_SYMBOL);
			setState(2271);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,167,_ctx) ) {
			case 1:
				{
				setState(2270);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(2273);
			sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TsOptionNodegroupContext extends ParserRuleContext {
		public TerminalNode NODEGROUP_SYMBOL() { return getToken(MySQLParser.NODEGROUP_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionNodegroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsOptionNodegroup; }
	}

	public final TsOptionNodegroupContext tsOptionNodegroup() throws RecognitionException {
		TsOptionNodegroupContext _localctx = new TsOptionNodegroupContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_tsOptionNodegroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2275);
			match(NODEGROUP_SYMBOL);
			setState(2277);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_OPERATOR) {
				{
				setState(2276);
				match(EQUAL_OPERATOR);
				}
			}

			setState(2279);
			real_ulong_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TsOptionEngineContext extends ParserRuleContext {
		public TerminalNode ENGINE_SYMBOL() { return getToken(MySQLParser.ENGINE_SYMBOL, 0); }
		public EngineRefContext engineRef() {
			return getRuleContext(EngineRefContext.class,0);
		}
		public TerminalNode STORAGE_SYMBOL() { return getToken(MySQLParser.STORAGE_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionEngineContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsOptionEngine; }
	}

	public final TsOptionEngineContext tsOptionEngine() throws RecognitionException {
		TsOptionEngineContext _localctx = new TsOptionEngineContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_tsOptionEngine);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2282);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STORAGE_SYMBOL) {
				{
				setState(2281);
				match(STORAGE_SYMBOL);
				}
			}

			setState(2284);
			match(ENGINE_SYMBOL);
			setState(2286);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,170,_ctx) ) {
			case 1:
				{
				setState(2285);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(2288);
			engineRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TsOptionWaitContext extends ParserRuleContext {
		public TerminalNode WAIT_SYMBOL() { return getToken(MySQLParser.WAIT_SYMBOL, 0); }
		public TerminalNode NO_WAIT_SYMBOL() { return getToken(MySQLParser.NO_WAIT_SYMBOL, 0); }
		public TsOptionWaitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsOptionWait; }
	}

	public final TsOptionWaitContext tsOptionWait() throws RecognitionException {
		TsOptionWaitContext _localctx = new TsOptionWaitContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_tsOptionWait);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2290);
			_la = _input.LA(1);
			if ( !(_la==NO_WAIT_SYMBOL || _la==WAIT_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TsOptionCommentContext extends ParserRuleContext {
		public TerminalNode COMMENT_SYMBOL() { return getToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionCommentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsOptionComment; }
	}

	public final TsOptionCommentContext tsOptionComment() throws RecognitionException {
		TsOptionCommentContext _localctx = new TsOptionCommentContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_tsOptionComment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2292);
			match(COMMENT_SYMBOL);
			setState(2294);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,171,_ctx) ) {
			case 1:
				{
				setState(2293);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(2296);
			textLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TsOptionFileblockSizeContext extends ParserRuleContext {
		public TerminalNode FILE_BLOCK_SIZE_SYMBOL() { return getToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0); }
		public SizeNumberContext sizeNumber() {
			return getRuleContext(SizeNumberContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionFileblockSizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsOptionFileblockSize; }
	}

	public final TsOptionFileblockSizeContext tsOptionFileblockSize() throws RecognitionException {
		TsOptionFileblockSizeContext _localctx = new TsOptionFileblockSizeContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_tsOptionFileblockSize);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2298);
			match(FILE_BLOCK_SIZE_SYMBOL);
			setState(2300);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,172,_ctx) ) {
			case 1:
				{
				setState(2299);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(2302);
			sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TsOptionEncryptionContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION_SYMBOL() { return getToken(MySQLParser.ENCRYPTION_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionEncryptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsOptionEncryption; }
	}

	public final TsOptionEncryptionContext tsOptionEncryption() throws RecognitionException {
		TsOptionEncryptionContext _localctx = new TsOptionEncryptionContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_tsOptionEncryption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2304);
			match(ENCRYPTION_SYMBOL);
			setState(2306);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,173,_ctx) ) {
			case 1:
				{
				setState(2305);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(2308);
			textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateViewContext extends ParserRuleContext {
		public TerminalNode VIEW_SYMBOL() { return getToken(MySQLParser.VIEW_SYMBOL, 0); }
		public ViewNameContext viewName() {
			return getRuleContext(ViewNameContext.class,0);
		}
		public ViewTailContext viewTail() {
			return getRuleContext(ViewTailContext.class,0);
		}
		public ViewReplaceOrAlgorithmContext viewReplaceOrAlgorithm() {
			return getRuleContext(ViewReplaceOrAlgorithmContext.class,0);
		}
		public DefinerClauseContext definerClause() {
			return getRuleContext(DefinerClauseContext.class,0);
		}
		public ViewSuidContext viewSuid() {
			return getRuleContext(ViewSuidContext.class,0);
		}
		public CreateViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createView; }
	}

	public final CreateViewContext createView() throws RecognitionException {
		CreateViewContext _localctx = new CreateViewContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_createView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2311);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALGORITHM_SYMBOL || _la==OR_SYMBOL) {
				{
				setState(2310);
				viewReplaceOrAlgorithm();
				}
			}

			setState(2314);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				setState(2313);
				definerClause();
				}
			}

			setState(2317);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL_SYMBOL) {
				{
				setState(2316);
				viewSuid();
				}
			}

			setState(2319);
			match(VIEW_SYMBOL);
			setState(2320);
			viewName();
			setState(2321);
			viewTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewReplaceOrAlgorithmContext extends ParserRuleContext {
		public TerminalNode OR_SYMBOL() { return getToken(MySQLParser.OR_SYMBOL, 0); }
		public TerminalNode REPLACE_SYMBOL() { return getToken(MySQLParser.REPLACE_SYMBOL, 0); }
		public ViewAlgorithmContext viewAlgorithm() {
			return getRuleContext(ViewAlgorithmContext.class,0);
		}
		public ViewReplaceOrAlgorithmContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewReplaceOrAlgorithm; }
	}

	public final ViewReplaceOrAlgorithmContext viewReplaceOrAlgorithm() throws RecognitionException {
		ViewReplaceOrAlgorithmContext _localctx = new ViewReplaceOrAlgorithmContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_viewReplaceOrAlgorithm);
		int _la;
		try {
			setState(2329);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OR_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2323);
				match(OR_SYMBOL);
				setState(2324);
				match(REPLACE_SYMBOL);
				setState(2326);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALGORITHM_SYMBOL) {
					{
					setState(2325);
					viewAlgorithm();
					}
				}

				}
				break;
			case ALGORITHM_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2328);
				viewAlgorithm();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewAlgorithmContext extends ParserRuleContext {
		public Token algorithm;
		public TerminalNode ALGORITHM_SYMBOL() { return getToken(MySQLParser.ALGORITHM_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TerminalNode UNDEFINED_SYMBOL() { return getToken(MySQLParser.UNDEFINED_SYMBOL, 0); }
		public TerminalNode MERGE_SYMBOL() { return getToken(MySQLParser.MERGE_SYMBOL, 0); }
		public TerminalNode TEMPTABLE_SYMBOL() { return getToken(MySQLParser.TEMPTABLE_SYMBOL, 0); }
		public ViewAlgorithmContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewAlgorithm; }
	}

	public final ViewAlgorithmContext viewAlgorithm() throws RecognitionException {
		ViewAlgorithmContext _localctx = new ViewAlgorithmContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_viewAlgorithm);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2331);
			match(ALGORITHM_SYMBOL);
			setState(2332);
			match(EQUAL_OPERATOR);
			setState(2333);
			((ViewAlgorithmContext)_localctx).algorithm = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==MERGE_SYMBOL || _la==TEMPTABLE_SYMBOL || _la==UNDEFINED_SYMBOL) ) {
				((ViewAlgorithmContext)_localctx).algorithm = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewSuidContext extends ParserRuleContext {
		public TerminalNode SQL_SYMBOL() { return getToken(MySQLParser.SQL_SYMBOL, 0); }
		public TerminalNode SECURITY_SYMBOL() { return getToken(MySQLParser.SECURITY_SYMBOL, 0); }
		public TerminalNode DEFINER_SYMBOL() { return getToken(MySQLParser.DEFINER_SYMBOL, 0); }
		public TerminalNode INVOKER_SYMBOL() { return getToken(MySQLParser.INVOKER_SYMBOL, 0); }
		public ViewSuidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewSuid; }
	}

	public final ViewSuidContext viewSuid() throws RecognitionException {
		ViewSuidContext _localctx = new ViewSuidContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_viewSuid);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2335);
			match(SQL_SYMBOL);
			setState(2336);
			match(SECURITY_SYMBOL);
			setState(2337);
			_la = _input.LA(1);
			if ( !(_la==DEFINER_SYMBOL || _la==INVOKER_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTriggerContext extends ParserRuleContext {
		public Token timing;
		public Token event;
		public TerminalNode TRIGGER_SYMBOL() { return getToken(MySQLParser.TRIGGER_SYMBOL, 0); }
		public TriggerNameContext triggerName() {
			return getRuleContext(TriggerNameContext.class,0);
		}
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode EACH_SYMBOL() { return getToken(MySQLParser.EACH_SYMBOL, 0); }
		public TerminalNode ROW_SYMBOL() { return getToken(MySQLParser.ROW_SYMBOL, 0); }
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public TerminalNode BEFORE_SYMBOL() { return getToken(MySQLParser.BEFORE_SYMBOL, 0); }
		public TerminalNode AFTER_SYMBOL() { return getToken(MySQLParser.AFTER_SYMBOL, 0); }
		public TerminalNode INSERT_SYMBOL() { return getToken(MySQLParser.INSERT_SYMBOL, 0); }
		public TerminalNode UPDATE_SYMBOL() { return getToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public TerminalNode DELETE_SYMBOL() { return getToken(MySQLParser.DELETE_SYMBOL, 0); }
		public DefinerClauseContext definerClause() {
			return getRuleContext(DefinerClauseContext.class,0);
		}
		public TriggerFollowsPrecedesClauseContext triggerFollowsPrecedesClause() {
			return getRuleContext(TriggerFollowsPrecedesClauseContext.class,0);
		}
		public CreateTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTrigger; }
	}

	public final CreateTriggerContext createTrigger() throws RecognitionException {
		CreateTriggerContext _localctx = new CreateTriggerContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_createTrigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2340);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				setState(2339);
				definerClause();
				}
			}

			setState(2342);
			match(TRIGGER_SYMBOL);
			setState(2343);
			triggerName();
			setState(2344);
			((CreateTriggerContext)_localctx).timing = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==AFTER_SYMBOL || _la==BEFORE_SYMBOL) ) {
				((CreateTriggerContext)_localctx).timing = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2345);
			((CreateTriggerContext)_localctx).event = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DELETE_SYMBOL || _la==INSERT_SYMBOL || _la==UPDATE_SYMBOL) ) {
				((CreateTriggerContext)_localctx).event = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2346);
			match(ON_SYMBOL);
			setState(2347);
			tableRef();
			setState(2348);
			match(FOR_SYMBOL);
			setState(2349);
			match(EACH_SYMBOL);
			setState(2350);
			match(ROW_SYMBOL);
			setState(2352);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,180,_ctx) ) {
			case 1:
				{
				setState(2351);
				triggerFollowsPrecedesClause();
				}
				break;
			}
			setState(2354);
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerFollowsPrecedesClauseContext extends ParserRuleContext {
		public Token ordering;
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public TerminalNode FOLLOWS_SYMBOL() { return getToken(MySQLParser.FOLLOWS_SYMBOL, 0); }
		public TerminalNode PRECEDES_SYMBOL() { return getToken(MySQLParser.PRECEDES_SYMBOL, 0); }
		public TriggerFollowsPrecedesClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerFollowsPrecedesClause; }
	}

	public final TriggerFollowsPrecedesClauseContext triggerFollowsPrecedesClause() throws RecognitionException {
		TriggerFollowsPrecedesClauseContext _localctx = new TriggerFollowsPrecedesClauseContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_triggerFollowsPrecedesClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2356);
			if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
			setState(2357);
			((TriggerFollowsPrecedesClauseContext)_localctx).ordering = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==FOLLOWS_SYMBOL || _la==PRECEDES_SYMBOL) ) {
				((TriggerFollowsPrecedesClauseContext)_localctx).ordering = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2358);
			textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateEventContext extends ParserRuleContext {
		public TerminalNode EVENT_SYMBOL() { return getToken(MySQLParser.EVENT_SYMBOL, 0); }
		public EventNameContext eventName() {
			return getRuleContext(EventNameContext.class,0);
		}
		public List<TerminalNode> ON_SYMBOL() { return getTokens(MySQLParser.ON_SYMBOL); }
		public TerminalNode ON_SYMBOL(int i) {
			return getToken(MySQLParser.ON_SYMBOL, i);
		}
		public TerminalNode SCHEDULE_SYMBOL() { return getToken(MySQLParser.SCHEDULE_SYMBOL, 0); }
		public ScheduleContext schedule() {
			return getRuleContext(ScheduleContext.class,0);
		}
		public TerminalNode DO_SYMBOL() { return getToken(MySQLParser.DO_SYMBOL, 0); }
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public DefinerClauseContext definerClause() {
			return getRuleContext(DefinerClauseContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public TerminalNode COMPLETION_SYMBOL() { return getToken(MySQLParser.COMPLETION_SYMBOL, 0); }
		public TerminalNode PRESERVE_SYMBOL() { return getToken(MySQLParser.PRESERVE_SYMBOL, 0); }
		public TerminalNode ENABLE_SYMBOL() { return getToken(MySQLParser.ENABLE_SYMBOL, 0); }
		public TerminalNode DISABLE_SYMBOL() { return getToken(MySQLParser.DISABLE_SYMBOL, 0); }
		public TerminalNode COMMENT_SYMBOL() { return getToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode NOT_SYMBOL() { return getToken(MySQLParser.NOT_SYMBOL, 0); }
		public TerminalNode SLAVE_SYMBOL() { return getToken(MySQLParser.SLAVE_SYMBOL, 0); }
		public CreateEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createEvent; }
	}

	public final CreateEventContext createEvent() throws RecognitionException {
		CreateEventContext _localctx = new CreateEventContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_createEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2361);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				setState(2360);
				definerClause();
				}
			}

			setState(2363);
			match(EVENT_SYMBOL);
			setState(2365);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,182,_ctx) ) {
			case 1:
				{
				setState(2364);
				ifNotExists();
				}
				break;
			}
			setState(2367);
			eventName();
			setState(2368);
			match(ON_SYMBOL);
			setState(2369);
			match(SCHEDULE_SYMBOL);
			setState(2370);
			schedule();
			setState(2377);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON_SYMBOL) {
				{
				setState(2371);
				match(ON_SYMBOL);
				setState(2372);
				match(COMPLETION_SYMBOL);
				setState(2374);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT_SYMBOL) {
					{
					setState(2373);
					match(NOT_SYMBOL);
					}
				}

				setState(2376);
				match(PRESERVE_SYMBOL);
				}
			}

			setState(2385);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENABLE_SYMBOL:
				{
				setState(2379);
				match(ENABLE_SYMBOL);
				}
				break;
			case DISABLE_SYMBOL:
				{
				setState(2380);
				match(DISABLE_SYMBOL);
				setState(2383);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON_SYMBOL) {
					{
					setState(2381);
					match(ON_SYMBOL);
					setState(2382);
					match(SLAVE_SYMBOL);
					}
				}

				}
				break;
			case COMMENT_SYMBOL:
			case DO_SYMBOL:
				break;
			default:
				break;
			}
			setState(2389);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT_SYMBOL) {
				{
				setState(2387);
				match(COMMENT_SYMBOL);
				setState(2388);
				textLiteral();
				}
			}

			setState(2391);
			match(DO_SYMBOL);
			setState(2392);
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateRoleContext extends ParserRuleContext {
		public TerminalNode ROLE_SYMBOL() { return getToken(MySQLParser.ROLE_SYMBOL, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CreateRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createRole; }
	}

	public final CreateRoleContext createRole() throws RecognitionException {
		CreateRoleContext _localctx = new CreateRoleContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_createRole);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2394);
			match(ROLE_SYMBOL);
			setState(2396);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,188,_ctx) ) {
			case 1:
				{
				setState(2395);
				ifNotExists();
				}
				break;
			}
			setState(2398);
			roleList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateSpatialReferenceContext extends ParserRuleContext {
		public TerminalNode OR_SYMBOL() { return getToken(MySQLParser.OR_SYMBOL, 0); }
		public TerminalNode REPLACE_SYMBOL() { return getToken(MySQLParser.REPLACE_SYMBOL, 0); }
		public TerminalNode SPATIAL_SYMBOL() { return getToken(MySQLParser.SPATIAL_SYMBOL, 0); }
		public TerminalNode REFERENCE_SYMBOL() { return getToken(MySQLParser.REFERENCE_SYMBOL, 0); }
		public TerminalNode SYSTEM_SYMBOL() { return getToken(MySQLParser.SYSTEM_SYMBOL, 0); }
		public Real_ulonglong_numberContext real_ulonglong_number() {
			return getRuleContext(Real_ulonglong_numberContext.class,0);
		}
		public List<SrsAttributeContext> srsAttribute() {
			return getRuleContexts(SrsAttributeContext.class);
		}
		public SrsAttributeContext srsAttribute(int i) {
			return getRuleContext(SrsAttributeContext.class,i);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CreateSpatialReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createSpatialReference; }
	}

	public final CreateSpatialReferenceContext createSpatialReference() throws RecognitionException {
		CreateSpatialReferenceContext _localctx = new CreateSpatialReferenceContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_createSpatialReference);
		int _la;
		try {
			setState(2425);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OR_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2400);
				match(OR_SYMBOL);
				setState(2401);
				match(REPLACE_SYMBOL);
				setState(2402);
				match(SPATIAL_SYMBOL);
				setState(2403);
				match(REFERENCE_SYMBOL);
				setState(2404);
				match(SYSTEM_SYMBOL);
				setState(2405);
				real_ulonglong_number();
				setState(2409);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==NAME_SYMBOL || ((((_la - 745)) & ~0x3f) == 0 && ((1L << (_la - 745)) & ((1L << (DEFINITION_SYMBOL - 745)) | (1L << (DESCRIPTION_SYMBOL - 745)) | (1L << (ORGANIZATION_SYMBOL - 745)))) != 0)) {
					{
					{
					setState(2406);
					srsAttribute();
					}
					}
					setState(2411);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case SPATIAL_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2412);
				match(SPATIAL_SYMBOL);
				setState(2413);
				match(REFERENCE_SYMBOL);
				setState(2414);
				match(SYSTEM_SYMBOL);
				setState(2416);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,190,_ctx) ) {
				case 1:
					{
					setState(2415);
					ifNotExists();
					}
					break;
				}
				setState(2418);
				real_ulonglong_number();
				setState(2422);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==NAME_SYMBOL || ((((_la - 745)) & ~0x3f) == 0 && ((1L << (_la - 745)) & ((1L << (DEFINITION_SYMBOL - 745)) | (1L << (DESCRIPTION_SYMBOL - 745)) | (1L << (ORGANIZATION_SYMBOL - 745)))) != 0)) {
					{
					{
					setState(2419);
					srsAttribute();
					}
					}
					setState(2424);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SrsAttributeContext extends ParserRuleContext {
		public TerminalNode NAME_SYMBOL() { return getToken(MySQLParser.NAME_SYMBOL, 0); }
		public TerminalNode TEXT_SYMBOL() { return getToken(MySQLParser.TEXT_SYMBOL, 0); }
		public TextStringNoLinebreakContext textStringNoLinebreak() {
			return getRuleContext(TextStringNoLinebreakContext.class,0);
		}
		public TerminalNode DEFINITION_SYMBOL() { return getToken(MySQLParser.DEFINITION_SYMBOL, 0); }
		public TerminalNode ORGANIZATION_SYMBOL() { return getToken(MySQLParser.ORGANIZATION_SYMBOL, 0); }
		public TerminalNode IDENTIFIED_SYMBOL() { return getToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public Real_ulonglong_numberContext real_ulonglong_number() {
			return getRuleContext(Real_ulonglong_numberContext.class,0);
		}
		public TerminalNode DESCRIPTION_SYMBOL() { return getToken(MySQLParser.DESCRIPTION_SYMBOL, 0); }
		public SrsAttributeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_srsAttribute; }
	}

	public final SrsAttributeContext srsAttribute() throws RecognitionException {
		SrsAttributeContext _localctx = new SrsAttributeContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_srsAttribute);
		try {
			setState(2442);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NAME_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2427);
				match(NAME_SYMBOL);
				setState(2428);
				match(TEXT_SYMBOL);
				setState(2429);
				textStringNoLinebreak();
				}
				break;
			case DEFINITION_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2430);
				match(DEFINITION_SYMBOL);
				setState(2431);
				match(TEXT_SYMBOL);
				setState(2432);
				textStringNoLinebreak();
				}
				break;
			case ORGANIZATION_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(2433);
				match(ORGANIZATION_SYMBOL);
				setState(2434);
				textStringNoLinebreak();
				setState(2435);
				match(IDENTIFIED_SYMBOL);
				setState(2436);
				match(BY_SYMBOL);
				setState(2437);
				real_ulonglong_number();
				}
				break;
			case DESCRIPTION_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(2439);
				match(DESCRIPTION_SYMBOL);
				setState(2440);
				match(TEXT_SYMBOL);
				setState(2441);
				textStringNoLinebreak();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropStatementContext extends ParserRuleContext {
		public TerminalNode DROP_SYMBOL() { return getToken(MySQLParser.DROP_SYMBOL, 0); }
		public DropDatabaseContext dropDatabase() {
			return getRuleContext(DropDatabaseContext.class,0);
		}
		public DropEventContext dropEvent() {
			return getRuleContext(DropEventContext.class,0);
		}
		public DropFunctionContext dropFunction() {
			return getRuleContext(DropFunctionContext.class,0);
		}
		public DropProcedureContext dropProcedure() {
			return getRuleContext(DropProcedureContext.class,0);
		}
		public DropIndexContext dropIndex() {
			return getRuleContext(DropIndexContext.class,0);
		}
		public DropLogfileGroupContext dropLogfileGroup() {
			return getRuleContext(DropLogfileGroupContext.class,0);
		}
		public DropServerContext dropServer() {
			return getRuleContext(DropServerContext.class,0);
		}
		public DropTableContext dropTable() {
			return getRuleContext(DropTableContext.class,0);
		}
		public DropTableSpaceContext dropTableSpace() {
			return getRuleContext(DropTableSpaceContext.class,0);
		}
		public DropTriggerContext dropTrigger() {
			return getRuleContext(DropTriggerContext.class,0);
		}
		public DropViewContext dropView() {
			return getRuleContext(DropViewContext.class,0);
		}
		public DropRoleContext dropRole() {
			return getRuleContext(DropRoleContext.class,0);
		}
		public DropSpatialReferenceContext dropSpatialReference() {
			return getRuleContext(DropSpatialReferenceContext.class,0);
		}
		public DropUndoTablespaceContext dropUndoTablespace() {
			return getRuleContext(DropUndoTablespaceContext.class,0);
		}
		public DropStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropStatement; }
	}

	public final DropStatementContext dropStatement() throws RecognitionException {
		DropStatementContext _localctx = new DropStatementContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_dropStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2444);
			match(DROP_SYMBOL);
			setState(2462);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,194,_ctx) ) {
			case 1:
				{
				setState(2445);
				dropDatabase();
				}
				break;
			case 2:
				{
				setState(2446);
				dropEvent();
				}
				break;
			case 3:
				{
				setState(2447);
				dropFunction();
				}
				break;
			case 4:
				{
				setState(2448);
				dropProcedure();
				}
				break;
			case 5:
				{
				setState(2449);
				dropIndex();
				}
				break;
			case 6:
				{
				setState(2450);
				dropLogfileGroup();
				}
				break;
			case 7:
				{
				setState(2451);
				dropServer();
				}
				break;
			case 8:
				{
				setState(2452);
				dropTable();
				}
				break;
			case 9:
				{
				setState(2453);
				dropTableSpace();
				}
				break;
			case 10:
				{
				setState(2454);
				dropTrigger();
				}
				break;
			case 11:
				{
				setState(2455);
				dropView();
				}
				break;
			case 12:
				{
				setState(2456);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(2457);
				dropRole();
				}
				break;
			case 13:
				{
				setState(2458);
				if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
				setState(2459);
				dropSpatialReference();
				}
				break;
			case 14:
				{
				setState(2460);
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				setState(2461);
				dropUndoTablespace();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropDatabaseContext extends ParserRuleContext {
		public TerminalNode DATABASE_SYMBOL() { return getToken(MySQLParser.DATABASE_SYMBOL, 0); }
		public SchemaRefContext schemaRef() {
			return getRuleContext(SchemaRefContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropDatabase; }
	}

	public final DropDatabaseContext dropDatabase() throws RecognitionException {
		DropDatabaseContext _localctx = new DropDatabaseContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_dropDatabase);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2464);
			match(DATABASE_SYMBOL);
			setState(2466);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,195,_ctx) ) {
			case 1:
				{
				setState(2465);
				ifExists();
				}
				break;
			}
			setState(2468);
			schemaRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropEventContext extends ParserRuleContext {
		public TerminalNode EVENT_SYMBOL() { return getToken(MySQLParser.EVENT_SYMBOL, 0); }
		public EventRefContext eventRef() {
			return getRuleContext(EventRefContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropEvent; }
	}

	public final DropEventContext dropEvent() throws RecognitionException {
		DropEventContext _localctx = new DropEventContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_dropEvent);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2470);
			match(EVENT_SYMBOL);
			setState(2472);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,196,_ctx) ) {
			case 1:
				{
				setState(2471);
				ifExists();
				}
				break;
			}
			setState(2474);
			eventRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropFunctionContext extends ParserRuleContext {
		public TerminalNode FUNCTION_SYMBOL() { return getToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		public FunctionRefContext functionRef() {
			return getRuleContext(FunctionRefContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropFunction; }
	}

	public final DropFunctionContext dropFunction() throws RecognitionException {
		DropFunctionContext _localctx = new DropFunctionContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_dropFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2476);
			match(FUNCTION_SYMBOL);
			setState(2478);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,197,_ctx) ) {
			case 1:
				{
				setState(2477);
				ifExists();
				}
				break;
			}
			setState(2480);
			functionRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropProcedureContext extends ParserRuleContext {
		public TerminalNode PROCEDURE_SYMBOL() { return getToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
		public ProcedureRefContext procedureRef() {
			return getRuleContext(ProcedureRefContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropProcedure; }
	}

	public final DropProcedureContext dropProcedure() throws RecognitionException {
		DropProcedureContext _localctx = new DropProcedureContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_dropProcedure);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2482);
			match(PROCEDURE_SYMBOL);
			setState(2484);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,198,_ctx) ) {
			case 1:
				{
				setState(2483);
				ifExists();
				}
				break;
			}
			setState(2486);
			procedureRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropIndexContext extends ParserRuleContext {
		public Token type;
		public IndexRefContext indexRef() {
			return getRuleContext(IndexRefContext.class,0);
		}
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public TerminalNode INDEX_SYMBOL() { return getToken(MySQLParser.INDEX_SYMBOL, 0); }
		public OnlineOptionContext onlineOption() {
			return getRuleContext(OnlineOptionContext.class,0);
		}
		public IndexLockAndAlgorithmContext indexLockAndAlgorithm() {
			return getRuleContext(IndexLockAndAlgorithmContext.class,0);
		}
		public DropIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropIndex; }
	}

	public final DropIndexContext dropIndex() throws RecognitionException {
		DropIndexContext _localctx = new DropIndexContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_dropIndex);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2489);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFLINE_SYMBOL || _la==ONLINE_SYMBOL) {
				{
				setState(2488);
				onlineOption();
				}
			}

			setState(2491);
			((DropIndexContext)_localctx).type = match(INDEX_SYMBOL);
			setState(2492);
			indexRef();
			setState(2493);
			match(ON_SYMBOL);
			setState(2494);
			tableRef();
			setState(2496);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALGORITHM_SYMBOL || _la==LOCK_SYMBOL) {
				{
				setState(2495);
				indexLockAndAlgorithm();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropLogfileGroupContext extends ParserRuleContext {
		public TerminalNode LOGFILE_SYMBOL() { return getToken(MySQLParser.LOGFILE_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MySQLParser.GROUP_SYMBOL, 0); }
		public LogfileGroupRefContext logfileGroupRef() {
			return getRuleContext(LogfileGroupRefContext.class,0);
		}
		public List<DropLogfileGroupOptionContext> dropLogfileGroupOption() {
			return getRuleContexts(DropLogfileGroupOptionContext.class);
		}
		public DropLogfileGroupOptionContext dropLogfileGroupOption(int i) {
			return getRuleContext(DropLogfileGroupOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public DropLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropLogfileGroup; }
	}

	public final DropLogfileGroupContext dropLogfileGroup() throws RecognitionException {
		DropLogfileGroupContext _localctx = new DropLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_dropLogfileGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2498);
			match(LOGFILE_SYMBOL);
			setState(2499);
			match(GROUP_SYMBOL);
			setState(2500);
			logfileGroupRef();
			setState(2511);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL) {
				{
				setState(2501);
				dropLogfileGroupOption();
				setState(2508);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ENGINE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL || _la==COMMA_SYMBOL) {
					{
					{
					setState(2503);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA_SYMBOL) {
						{
						setState(2502);
						match(COMMA_SYMBOL);
						}
					}

					setState(2505);
					dropLogfileGroupOption();
					}
					}
					setState(2510);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropLogfileGroupOptionContext extends ParserRuleContext {
		public TsOptionWaitContext tsOptionWait() {
			return getRuleContext(TsOptionWaitContext.class,0);
		}
		public TsOptionEngineContext tsOptionEngine() {
			return getRuleContext(TsOptionEngineContext.class,0);
		}
		public DropLogfileGroupOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropLogfileGroupOption; }
	}

	public final DropLogfileGroupOptionContext dropLogfileGroupOption() throws RecognitionException {
		DropLogfileGroupOptionContext _localctx = new DropLogfileGroupOptionContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_dropLogfileGroupOption);
		try {
			setState(2515);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO_WAIT_SYMBOL:
			case WAIT_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2513);
				tsOptionWait();
				}
				break;
			case ENGINE_SYMBOL:
			case STORAGE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2514);
				tsOptionEngine();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropServerContext extends ParserRuleContext {
		public TerminalNode SERVER_SYMBOL() { return getToken(MySQLParser.SERVER_SYMBOL, 0); }
		public ServerRefContext serverRef() {
			return getRuleContext(ServerRefContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropServer; }
	}

	public final DropServerContext dropServer() throws RecognitionException {
		DropServerContext _localctx = new DropServerContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_dropServer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2517);
			match(SERVER_SYMBOL);
			setState(2519);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,205,_ctx) ) {
			case 1:
				{
				setState(2518);
				ifExists();
				}
				break;
			}
			setState(2521);
			serverRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTableContext extends ParserRuleContext {
		public Token type;
		public TableRefListContext tableRefList() {
			return getRuleContext(TableRefListContext.class,0);
		}
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TerminalNode TABLES_SYMBOL() { return getToken(MySQLParser.TABLES_SYMBOL, 0); }
		public TerminalNode TEMPORARY_SYMBOL() { return getToken(MySQLParser.TEMPORARY_SYMBOL, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public TerminalNode RESTRICT_SYMBOL() { return getToken(MySQLParser.RESTRICT_SYMBOL, 0); }
		public TerminalNode CASCADE_SYMBOL() { return getToken(MySQLParser.CASCADE_SYMBOL, 0); }
		public DropTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTable; }
	}

	public final DropTableContext dropTable() throws RecognitionException {
		DropTableContext _localctx = new DropTableContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_dropTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2524);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMPORARY_SYMBOL) {
				{
				setState(2523);
				match(TEMPORARY_SYMBOL);
				}
			}

			setState(2526);
			((DropTableContext)_localctx).type = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==TABLES_SYMBOL || _la==TABLE_SYMBOL) ) {
				((DropTableContext)_localctx).type = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2528);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,207,_ctx) ) {
			case 1:
				{
				setState(2527);
				ifExists();
				}
				break;
			}
			setState(2530);
			tableRefList();
			setState(2532);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) {
				{
				setState(2531);
				_la = _input.LA(1);
				if ( !(_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTableSpaceContext extends ParserRuleContext {
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TablespaceRefContext tablespaceRef() {
			return getRuleContext(TablespaceRefContext.class,0);
		}
		public List<DropLogfileGroupOptionContext> dropLogfileGroupOption() {
			return getRuleContexts(DropLogfileGroupOptionContext.class);
		}
		public DropLogfileGroupOptionContext dropLogfileGroupOption(int i) {
			return getRuleContext(DropLogfileGroupOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public DropTableSpaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTableSpace; }
	}

	public final DropTableSpaceContext dropTableSpace() throws RecognitionException {
		DropTableSpaceContext _localctx = new DropTableSpaceContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_dropTableSpace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2534);
			match(TABLESPACE_SYMBOL);
			setState(2535);
			tablespaceRef();
			setState(2546);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL) {
				{
				setState(2536);
				dropLogfileGroupOption();
				setState(2543);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ENGINE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL || _la==COMMA_SYMBOL) {
					{
					{
					setState(2538);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA_SYMBOL) {
						{
						setState(2537);
						match(COMMA_SYMBOL);
						}
					}

					setState(2540);
					dropLogfileGroupOption();
					}
					}
					setState(2545);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTriggerContext extends ParserRuleContext {
		public TerminalNode TRIGGER_SYMBOL() { return getToken(MySQLParser.TRIGGER_SYMBOL, 0); }
		public TriggerRefContext triggerRef() {
			return getRuleContext(TriggerRefContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTrigger; }
	}

	public final DropTriggerContext dropTrigger() throws RecognitionException {
		DropTriggerContext _localctx = new DropTriggerContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_dropTrigger);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2548);
			match(TRIGGER_SYMBOL);
			setState(2550);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,212,_ctx) ) {
			case 1:
				{
				setState(2549);
				ifExists();
				}
				break;
			}
			setState(2552);
			triggerRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropViewContext extends ParserRuleContext {
		public TerminalNode VIEW_SYMBOL() { return getToken(MySQLParser.VIEW_SYMBOL, 0); }
		public ViewRefListContext viewRefList() {
			return getRuleContext(ViewRefListContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public TerminalNode RESTRICT_SYMBOL() { return getToken(MySQLParser.RESTRICT_SYMBOL, 0); }
		public TerminalNode CASCADE_SYMBOL() { return getToken(MySQLParser.CASCADE_SYMBOL, 0); }
		public DropViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropView; }
	}

	public final DropViewContext dropView() throws RecognitionException {
		DropViewContext _localctx = new DropViewContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_dropView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2554);
			match(VIEW_SYMBOL);
			setState(2556);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,213,_ctx) ) {
			case 1:
				{
				setState(2555);
				ifExists();
				}
				break;
			}
			setState(2558);
			viewRefList();
			setState(2560);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) {
				{
				setState(2559);
				_la = _input.LA(1);
				if ( !(_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropRoleContext extends ParserRuleContext {
		public TerminalNode ROLE_SYMBOL() { return getToken(MySQLParser.ROLE_SYMBOL, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropRole; }
	}

	public final DropRoleContext dropRole() throws RecognitionException {
		DropRoleContext _localctx = new DropRoleContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_dropRole);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2562);
			match(ROLE_SYMBOL);
			setState(2564);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,215,_ctx) ) {
			case 1:
				{
				setState(2563);
				ifExists();
				}
				break;
			}
			setState(2566);
			roleList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropSpatialReferenceContext extends ParserRuleContext {
		public TerminalNode SPATIAL_SYMBOL() { return getToken(MySQLParser.SPATIAL_SYMBOL, 0); }
		public TerminalNode REFERENCE_SYMBOL() { return getToken(MySQLParser.REFERENCE_SYMBOL, 0); }
		public TerminalNode SYSTEM_SYMBOL() { return getToken(MySQLParser.SYSTEM_SYMBOL, 0); }
		public Real_ulonglong_numberContext real_ulonglong_number() {
			return getRuleContext(Real_ulonglong_numberContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropSpatialReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropSpatialReference; }
	}

	public final DropSpatialReferenceContext dropSpatialReference() throws RecognitionException {
		DropSpatialReferenceContext _localctx = new DropSpatialReferenceContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_dropSpatialReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2568);
			match(SPATIAL_SYMBOL);
			setState(2569);
			match(REFERENCE_SYMBOL);
			setState(2570);
			match(SYSTEM_SYMBOL);
			setState(2572);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,216,_ctx) ) {
			case 1:
				{
				setState(2571);
				ifExists();
				}
				break;
			}
			setState(2574);
			real_ulonglong_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropUndoTablespaceContext extends ParserRuleContext {
		public TerminalNode UNDO_SYMBOL() { return getToken(MySQLParser.UNDO_SYMBOL, 0); }
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TablespaceRefContext tablespaceRef() {
			return getRuleContext(TablespaceRefContext.class,0);
		}
		public UndoTableSpaceOptionsContext undoTableSpaceOptions() {
			return getRuleContext(UndoTableSpaceOptionsContext.class,0);
		}
		public DropUndoTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropUndoTablespace; }
	}

	public final DropUndoTablespaceContext dropUndoTablespace() throws RecognitionException {
		DropUndoTablespaceContext _localctx = new DropUndoTablespaceContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_dropUndoTablespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2576);
			match(UNDO_SYMBOL);
			setState(2577);
			match(TABLESPACE_SYMBOL);
			setState(2578);
			tablespaceRef();
			setState(2580);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE_SYMBOL || _la==STORAGE_SYMBOL) {
				{
				setState(2579);
				undoTableSpaceOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameTableStatementContext extends ParserRuleContext {
		public TerminalNode RENAME_SYMBOL() { return getToken(MySQLParser.RENAME_SYMBOL, 0); }
		public List<RenamePairContext> renamePair() {
			return getRuleContexts(RenamePairContext.class);
		}
		public RenamePairContext renamePair(int i) {
			return getRuleContext(RenamePairContext.class,i);
		}
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TerminalNode TABLES_SYMBOL() { return getToken(MySQLParser.TABLES_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public RenameTableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameTableStatement; }
	}

	public final RenameTableStatementContext renameTableStatement() throws RecognitionException {
		RenameTableStatementContext _localctx = new RenameTableStatementContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_renameTableStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2582);
			match(RENAME_SYMBOL);
			setState(2583);
			_la = _input.LA(1);
			if ( !(_la==TABLES_SYMBOL || _la==TABLE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2584);
			renamePair();
			setState(2589);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(2585);
				match(COMMA_SYMBOL);
				setState(2586);
				renamePair();
				}
				}
				setState(2591);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenamePairContext extends ParserRuleContext {
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public TerminalNode TO_SYMBOL() { return getToken(MySQLParser.TO_SYMBOL, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public RenamePairContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renamePair; }
	}

	public final RenamePairContext renamePair() throws RecognitionException {
		RenamePairContext _localctx = new RenamePairContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_renamePair);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2592);
			tableRef();
			setState(2593);
			match(TO_SYMBOL);
			setState(2594);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TruncateTableStatementContext extends ParserRuleContext {
		public TerminalNode TRUNCATE_SYMBOL() { return getToken(MySQLParser.TRUNCATE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TruncateTableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncateTableStatement; }
	}

	public final TruncateTableStatementContext truncateTableStatement() throws RecognitionException {
		TruncateTableStatementContext _localctx = new TruncateTableStatementContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_truncateTableStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2596);
			match(TRUNCATE_SYMBOL);
			setState(2598);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,219,_ctx) ) {
			case 1:
				{
				setState(2597);
				match(TABLE_SYMBOL);
				}
				break;
			}
			setState(2600);
			tableRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ImportStatementContext extends ParserRuleContext {
		public TerminalNode IMPORT_SYMBOL() { return getToken(MySQLParser.IMPORT_SYMBOL, 0); }
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public TextStringLiteralListContext textStringLiteralList() {
			return getRuleContext(TextStringLiteralListContext.class,0);
		}
		public ImportStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_importStatement; }
	}

	public final ImportStatementContext importStatement() throws RecognitionException {
		ImportStatementContext _localctx = new ImportStatementContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_importStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2602);
			match(IMPORT_SYMBOL);
			setState(2603);
			match(TABLE_SYMBOL);
			setState(2604);
			match(FROM_SYMBOL);
			setState(2605);
			textStringLiteralList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CallStatementContext extends ParserRuleContext {
		public TerminalNode CALL_SYMBOL() { return getToken(MySQLParser.CALL_SYMBOL, 0); }
		public ProcedureRefContext procedureRef() {
			return getRuleContext(ProcedureRefContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public CallStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_callStatement; }
	}

	public final CallStatementContext callStatement() throws RecognitionException {
		CallStatementContext _localctx = new CallStatementContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_callStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2607);
			match(CALL_SYMBOL);
			setState(2608);
			procedureRef();
			setState(2614);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				setState(2609);
				match(OPEN_PAR_SYMBOL);
				setState(2611);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,220,_ctx) ) {
				case 1:
					{
					setState(2610);
					exprList();
					}
					break;
				}
				setState(2613);
				match(CLOSE_PAR_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteStatementContext extends ParserRuleContext {
		public TerminalNode DELETE_SYMBOL() { return getToken(MySQLParser.DELETE_SYMBOL, 0); }
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public TableAliasRefListContext tableAliasRefList() {
			return getRuleContext(TableAliasRefListContext.class,0);
		}
		public TableReferenceListContext tableReferenceList() {
			return getRuleContext(TableReferenceListContext.class,0);
		}
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public List<DeleteStatementOptionContext> deleteStatementOption() {
			return getRuleContexts(DeleteStatementOptionContext.class);
		}
		public DeleteStatementOptionContext deleteStatementOption(int i) {
			return getRuleContext(DeleteStatementOptionContext.class,i);
		}
		public TerminalNode USING_SYMBOL() { return getToken(MySQLParser.USING_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public PartitionDeleteContext partitionDelete() {
			return getRuleContext(PartitionDeleteContext.class,0);
		}
		public OrderClauseContext orderClause() {
			return getRuleContext(OrderClauseContext.class,0);
		}
		public SimpleLimitClauseContext simpleLimitClause() {
			return getRuleContext(SimpleLimitClauseContext.class,0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteStatement; }
	}

	public final DeleteStatementContext deleteStatement() throws RecognitionException {
		DeleteStatementContext _localctx = new DeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_deleteStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2618);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,222,_ctx) ) {
			case 1:
				{
				setState(2616);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(2617);
				withClause();
				}
				break;
			}
			setState(2620);
			match(DELETE_SYMBOL);
			setState(2624);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,223,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2621);
					deleteStatementOption();
					}
					} 
				}
				setState(2626);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,223,_ctx);
			}
			setState(2659);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,232,_ctx) ) {
			case 1:
				{
				setState(2627);
				match(FROM_SYMBOL);
				setState(2651);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,230,_ctx) ) {
				case 1:
					{
					setState(2628);
					tableAliasRefList();
					setState(2629);
					match(USING_SYMBOL);
					setState(2630);
					tableReferenceList();
					setState(2632);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WHERE_SYMBOL) {
						{
						setState(2631);
						whereClause();
						}
					}

					}
					break;
				case 2:
					{
					setState(2634);
					tableRef();
					setState(2637);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,225,_ctx) ) {
					case 1:
						{
						setState(2635);
						if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
						setState(2636);
						tableAlias();
						}
						break;
					}
					setState(2640);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,226,_ctx) ) {
					case 1:
						{
						setState(2639);
						partitionDelete();
						}
						break;
					}
					setState(2643);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WHERE_SYMBOL) {
						{
						setState(2642);
						whereClause();
						}
					}

					setState(2646);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ORDER_SYMBOL) {
						{
						setState(2645);
						orderClause();
						}
					}

					setState(2649);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LIMIT_SYMBOL) {
						{
						setState(2648);
						simpleLimitClause();
						}
					}

					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(2653);
				tableAliasRefList();
				setState(2654);
				match(FROM_SYMBOL);
				setState(2655);
				tableReferenceList();
				setState(2657);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE_SYMBOL) {
					{
					setState(2656);
					whereClause();
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDeleteContext extends ParserRuleContext {
		public TerminalNode PARTITION_SYMBOL() { return getToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public PartitionDeleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDelete; }
	}

	public final PartitionDeleteContext partitionDelete() throws RecognitionException {
		PartitionDeleteContext _localctx = new PartitionDeleteContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_partitionDelete);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2661);
			if (!(serverVersion >= 50602)) throw new FailedPredicateException(this, "serverVersion >= 50602");
			setState(2662);
			match(PARTITION_SYMBOL);
			setState(2663);
			match(OPEN_PAR_SYMBOL);
			setState(2664);
			identifierList();
			setState(2665);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteStatementOptionContext extends ParserRuleContext {
		public TerminalNode QUICK_SYMBOL() { return getToken(MySQLParser.QUICK_SYMBOL, 0); }
		public TerminalNode LOW_PRIORITY_SYMBOL() { return getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0); }
		public TerminalNode IGNORE_SYMBOL() { return getToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public DeleteStatementOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteStatementOption; }
	}

	public final DeleteStatementOptionContext deleteStatementOption() throws RecognitionException {
		DeleteStatementOptionContext _localctx = new DeleteStatementOptionContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_deleteStatementOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2667);
			_la = _input.LA(1);
			if ( !(_la==QUICK_SYMBOL || _la==IGNORE_SYMBOL || _la==LOW_PRIORITY_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DoStatementContext extends ParserRuleContext {
		public TerminalNode DO_SYMBOL() { return getToken(MySQLParser.DO_SYMBOL, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public SelectItemListContext selectItemList() {
			return getRuleContext(SelectItemListContext.class,0);
		}
		public DoStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_doStatement; }
	}

	public final DoStatementContext doStatement() throws RecognitionException {
		DoStatementContext _localctx = new DoStatementContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_doStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2669);
			match(DO_SYMBOL);
			setState(2674);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,233,_ctx) ) {
			case 1:
				{
				setState(2670);
				if (!(serverVersion < 50709)) throw new FailedPredicateException(this, "serverVersion < 50709");
				setState(2671);
				exprList();
				}
				break;
			case 2:
				{
				setState(2672);
				if (!(serverVersion >= 50709)) throw new FailedPredicateException(this, "serverVersion >= 50709");
				setState(2673);
				selectItemList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerStatementContext extends ParserRuleContext {
		public TerminalNode HANDLER_SYMBOL() { return getToken(MySQLParser.HANDLER_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public TerminalNode OPEN_SYMBOL() { return getToken(MySQLParser.OPEN_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode CLOSE_SYMBOL() { return getToken(MySQLParser.CLOSE_SYMBOL, 0); }
		public TerminalNode READ_SYMBOL() { return getToken(MySQLParser.READ_SYMBOL, 0); }
		public HandlerReadOrScanContext handlerReadOrScan() {
			return getRuleContext(HandlerReadOrScanContext.class,0);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public HandlerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerStatement; }
	}

	public final HandlerStatementContext handlerStatement() throws RecognitionException {
		HandlerStatementContext _localctx = new HandlerStatementContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_handlerStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2676);
			match(HANDLER_SYMBOL);
			setState(2694);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,238,_ctx) ) {
			case 1:
				{
				setState(2677);
				tableRef();
				setState(2678);
				match(OPEN_SYMBOL);
				setState(2680);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,234,_ctx) ) {
				case 1:
					{
					setState(2679);
					tableAlias();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(2682);
				identifier();
				setState(2692);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CLOSE_SYMBOL:
					{
					setState(2683);
					match(CLOSE_SYMBOL);
					}
					break;
				case READ_SYMBOL:
					{
					setState(2684);
					match(READ_SYMBOL);
					setState(2685);
					handlerReadOrScan();
					setState(2687);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WHERE_SYMBOL) {
						{
						setState(2686);
						whereClause();
						}
					}

					setState(2690);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LIMIT_SYMBOL) {
						{
						setState(2689);
						limitClause();
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerReadOrScanContext extends ParserRuleContext {
		public TerminalNode FIRST_SYMBOL() { return getToken(MySQLParser.FIRST_SYMBOL, 0); }
		public TerminalNode NEXT_SYMBOL() { return getToken(MySQLParser.NEXT_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ValuesContext values() {
			return getRuleContext(ValuesContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode PREV_SYMBOL() { return getToken(MySQLParser.PREV_SYMBOL, 0); }
		public TerminalNode LAST_SYMBOL() { return getToken(MySQLParser.LAST_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TerminalNode LESS_THAN_OPERATOR() { return getToken(MySQLParser.LESS_THAN_OPERATOR, 0); }
		public TerminalNode GREATER_THAN_OPERATOR() { return getToken(MySQLParser.GREATER_THAN_OPERATOR, 0); }
		public TerminalNode LESS_OR_EQUAL_OPERATOR() { return getToken(MySQLParser.LESS_OR_EQUAL_OPERATOR, 0); }
		public TerminalNode GREATER_OR_EQUAL_OPERATOR() { return getToken(MySQLParser.GREATER_OR_EQUAL_OPERATOR, 0); }
		public HandlerReadOrScanContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerReadOrScan; }
	}

	public final HandlerReadOrScanContext handlerReadOrScan() throws RecognitionException {
		HandlerReadOrScanContext _localctx = new HandlerReadOrScanContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_handlerReadOrScan);
		int _la;
		try {
			setState(2706);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,240,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2696);
				_la = _input.LA(1);
				if ( !(_la==FIRST_SYMBOL || _la==NEXT_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2697);
				identifier();
				setState(2704);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FIRST_SYMBOL:
				case LAST_SYMBOL:
				case NEXT_SYMBOL:
				case PREV_SYMBOL:
					{
					setState(2698);
					_la = _input.LA(1);
					if ( !(_la==FIRST_SYMBOL || _la==LAST_SYMBOL || _la==NEXT_SYMBOL || _la==PREV_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case EQUAL_OPERATOR:
				case GREATER_OR_EQUAL_OPERATOR:
				case GREATER_THAN_OPERATOR:
				case LESS_OR_EQUAL_OPERATOR:
				case LESS_THAN_OPERATOR:
					{
					setState(2699);
					_la = _input.LA(1);
					if ( !(((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (EQUAL_OPERATOR - 383)) | (1L << (GREATER_OR_EQUAL_OPERATOR - 383)) | (1L << (GREATER_THAN_OPERATOR - 383)) | (1L << (LESS_OR_EQUAL_OPERATOR - 383)) | (1L << (LESS_THAN_OPERATOR - 383)))) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2700);
					match(OPEN_PAR_SYMBOL);
					setState(2701);
					values();
					setState(2702);
					match(CLOSE_PAR_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertStatementContext extends ParserRuleContext {
		public TerminalNode INSERT_SYMBOL() { return getToken(MySQLParser.INSERT_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public InsertFromConstructorContext insertFromConstructor() {
			return getRuleContext(InsertFromConstructorContext.class,0);
		}
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public UpdateListContext updateList() {
			return getRuleContext(UpdateListContext.class,0);
		}
		public InsertQueryExpressionContext insertQueryExpression() {
			return getRuleContext(InsertQueryExpressionContext.class,0);
		}
		public InsertLockOptionContext insertLockOption() {
			return getRuleContext(InsertLockOptionContext.class,0);
		}
		public TerminalNode IGNORE_SYMBOL() { return getToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public TerminalNode INTO_SYMBOL() { return getToken(MySQLParser.INTO_SYMBOL, 0); }
		public UsePartitionContext usePartition() {
			return getRuleContext(UsePartitionContext.class,0);
		}
		public InsertUpdateListContext insertUpdateList() {
			return getRuleContext(InsertUpdateListContext.class,0);
		}
		public ValuesReferenceContext valuesReference() {
			return getRuleContext(ValuesReferenceContext.class,0);
		}
		public InsertStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertStatement; }
	}

	public final InsertStatementContext insertStatement() throws RecognitionException {
		InsertStatementContext _localctx = new InsertStatementContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_insertStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2708);
			match(INSERT_SYMBOL);
			setState(2710);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,241,_ctx) ) {
			case 1:
				{
				setState(2709);
				insertLockOption();
				}
				break;
			}
			setState(2713);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,242,_ctx) ) {
			case 1:
				{
				setState(2712);
				match(IGNORE_SYMBOL);
				}
				break;
			}
			setState(2716);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,243,_ctx) ) {
			case 1:
				{
				setState(2715);
				match(INTO_SYMBOL);
				}
				break;
			}
			setState(2718);
			tableRef();
			setState(2720);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,244,_ctx) ) {
			case 1:
				{
				setState(2719);
				usePartition();
				}
				break;
			}
			setState(2734);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,247,_ctx) ) {
			case 1:
				{
				setState(2722);
				insertFromConstructor();
				setState(2725);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,245,_ctx) ) {
				case 1:
					{
					setState(2723);
					if (!( serverVersion >= 80018)) throw new FailedPredicateException(this, " serverVersion >= 80018");
					setState(2724);
					valuesReference();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(2727);
				match(SET_SYMBOL);
				setState(2728);
				updateList();
				setState(2731);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,246,_ctx) ) {
				case 1:
					{
					setState(2729);
					if (!( serverVersion >= 80018)) throw new FailedPredicateException(this, " serverVersion >= 80018");
					setState(2730);
					valuesReference();
					}
					break;
				}
				}
				break;
			case 3:
				{
				setState(2733);
				insertQueryExpression();
				}
				break;
			}
			setState(2737);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON_SYMBOL) {
				{
				setState(2736);
				insertUpdateList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertLockOptionContext extends ParserRuleContext {
		public TerminalNode LOW_PRIORITY_SYMBOL() { return getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0); }
		public TerminalNode DELAYED_SYMBOL() { return getToken(MySQLParser.DELAYED_SYMBOL, 0); }
		public TerminalNode HIGH_PRIORITY_SYMBOL() { return getToken(MySQLParser.HIGH_PRIORITY_SYMBOL, 0); }
		public InsertLockOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertLockOption; }
	}

	public final InsertLockOptionContext insertLockOption() throws RecognitionException {
		InsertLockOptionContext _localctx = new InsertLockOptionContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_insertLockOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2739);
			_la = _input.LA(1);
			if ( !(_la==DELAYED_SYMBOL || _la==HIGH_PRIORITY_SYMBOL || _la==LOW_PRIORITY_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertFromConstructorContext extends ParserRuleContext {
		public InsertValuesContext insertValues() {
			return getRuleContext(InsertValuesContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public FieldsContext fields() {
			return getRuleContext(FieldsContext.class,0);
		}
		public InsertFromConstructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertFromConstructor; }
	}

	public final InsertFromConstructorContext insertFromConstructor() throws RecognitionException {
		InsertFromConstructorContext _localctx = new InsertFromConstructorContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_insertFromConstructor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2746);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				setState(2741);
				match(OPEN_PAR_SYMBOL);
				setState(2743);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,249,_ctx) ) {
				case 1:
					{
					setState(2742);
					fields();
					}
					break;
				}
				setState(2745);
				match(CLOSE_PAR_SYMBOL);
				}
			}

			setState(2748);
			insertValues();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FieldsContext extends ParserRuleContext {
		public List<InsertIdentifierContext> insertIdentifier() {
			return getRuleContexts(InsertIdentifierContext.class);
		}
		public InsertIdentifierContext insertIdentifier(int i) {
			return getRuleContext(InsertIdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public FieldsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fields; }
	}

	public final FieldsContext fields() throws RecognitionException {
		FieldsContext _localctx = new FieldsContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_fields);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2750);
			insertIdentifier();
			setState(2755);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(2751);
				match(COMMA_SYMBOL);
				setState(2752);
				insertIdentifier();
				}
				}
				setState(2757);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertValuesContext extends ParserRuleContext {
		public ValueListContext valueList() {
			return getRuleContext(ValueListContext.class,0);
		}
		public TerminalNode VALUES_SYMBOL() { return getToken(MySQLParser.VALUES_SYMBOL, 0); }
		public TerminalNode VALUE_SYMBOL() { return getToken(MySQLParser.VALUE_SYMBOL, 0); }
		public InsertValuesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertValues; }
	}

	public final InsertValuesContext insertValues() throws RecognitionException {
		InsertValuesContext _localctx = new InsertValuesContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_insertValues);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2758);
			_la = _input.LA(1);
			if ( !(_la==VALUE_SYMBOL || _la==VALUES_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2759);
			valueList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertQueryExpressionContext extends ParserRuleContext {
		public QueryExpressionOrParensContext queryExpressionOrParens() {
			return getRuleContext(QueryExpressionOrParensContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public FieldsContext fields() {
			return getRuleContext(FieldsContext.class,0);
		}
		public InsertQueryExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertQueryExpression; }
	}

	public final InsertQueryExpressionContext insertQueryExpression() throws RecognitionException {
		InsertQueryExpressionContext _localctx = new InsertQueryExpressionContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_insertQueryExpression);
		try {
			setState(2768);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,253,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2761);
				queryExpressionOrParens();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2762);
				match(OPEN_PAR_SYMBOL);
				setState(2764);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,252,_ctx) ) {
				case 1:
					{
					setState(2763);
					fields();
					}
					break;
				}
				setState(2766);
				match(CLOSE_PAR_SYMBOL);
				setState(2767);
				queryExpressionOrParens();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValueListContext extends ParserRuleContext {
		public List<TerminalNode> OPEN_PAR_SYMBOL() { return getTokens(MySQLParser.OPEN_PAR_SYMBOL); }
		public TerminalNode OPEN_PAR_SYMBOL(int i) {
			return getToken(MySQLParser.OPEN_PAR_SYMBOL, i);
		}
		public List<TerminalNode> CLOSE_PAR_SYMBOL() { return getTokens(MySQLParser.CLOSE_PAR_SYMBOL); }
		public TerminalNode CLOSE_PAR_SYMBOL(int i) {
			return getToken(MySQLParser.CLOSE_PAR_SYMBOL, i);
		}
		public List<ValuesContext> values() {
			return getRuleContexts(ValuesContext.class);
		}
		public ValuesContext values(int i) {
			return getRuleContext(ValuesContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ValueListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valueList; }
	}

	public final ValueListContext valueList() throws RecognitionException {
		ValueListContext _localctx = new ValueListContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_valueList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2770);
			match(OPEN_PAR_SYMBOL);
			setState(2772);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,254,_ctx) ) {
			case 1:
				{
				setState(2771);
				values();
				}
				break;
			}
			setState(2774);
			match(CLOSE_PAR_SYMBOL);
			setState(2783);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,256,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2775);
					match(COMMA_SYMBOL);
					setState(2776);
					match(OPEN_PAR_SYMBOL);
					setState(2778);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,255,_ctx) ) {
					case 1:
						{
						setState(2777);
						values();
						}
						break;
					}
					setState(2780);
					match(CLOSE_PAR_SYMBOL);
					}
					} 
				}
				setState(2785);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,256,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesContext extends ParserRuleContext {
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> DEFAULT_SYMBOL() { return getTokens(MySQLParser.DEFAULT_SYMBOL); }
		public TerminalNode DEFAULT_SYMBOL(int i) {
			return getToken(MySQLParser.DEFAULT_SYMBOL, i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ValuesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_values; }
	}

	public final ValuesContext values() throws RecognitionException {
		ValuesContext _localctx = new ValuesContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_values);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2788);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,257,_ctx) ) {
			case 1:
				{
				setState(2786);
				expr(0);
				}
				break;
			case 2:
				{
				setState(2787);
				match(DEFAULT_SYMBOL);
				}
				break;
			}
			setState(2797);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(2790);
				match(COMMA_SYMBOL);
				setState(2793);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,258,_ctx) ) {
				case 1:
					{
					setState(2791);
					expr(0);
					}
					break;
				case 2:
					{
					setState(2792);
					match(DEFAULT_SYMBOL);
					}
					break;
				}
				}
				}
				setState(2799);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesReferenceContext extends ParserRuleContext {
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ColumnInternalRefListContext columnInternalRefList() {
			return getRuleContext(ColumnInternalRefListContext.class,0);
		}
		public ValuesReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesReference; }
	}

	public final ValuesReferenceContext valuesReference() throws RecognitionException {
		ValuesReferenceContext _localctx = new ValuesReferenceContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_valuesReference);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2800);
			match(AS_SYMBOL);
			setState(2801);
			identifier();
			setState(2803);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				setState(2802);
				columnInternalRefList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertUpdateListContext extends ParserRuleContext {
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public TerminalNode DUPLICATE_SYMBOL() { return getToken(MySQLParser.DUPLICATE_SYMBOL, 0); }
		public TerminalNode KEY_SYMBOL() { return getToken(MySQLParser.KEY_SYMBOL, 0); }
		public TerminalNode UPDATE_SYMBOL() { return getToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public UpdateListContext updateList() {
			return getRuleContext(UpdateListContext.class,0);
		}
		public InsertUpdateListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertUpdateList; }
	}

	public final InsertUpdateListContext insertUpdateList() throws RecognitionException {
		InsertUpdateListContext _localctx = new InsertUpdateListContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_insertUpdateList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2805);
			match(ON_SYMBOL);
			setState(2806);
			match(DUPLICATE_SYMBOL);
			setState(2807);
			match(KEY_SYMBOL);
			setState(2808);
			match(UPDATE_SYMBOL);
			setState(2809);
			updateList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadStatementContext extends ParserRuleContext {
		public TerminalNode LOAD_SYMBOL() { return getToken(MySQLParser.LOAD_SYMBOL, 0); }
		public DataOrXmlContext dataOrXml() {
			return getRuleContext(DataOrXmlContext.class,0);
		}
		public TerminalNode INFILE_SYMBOL() { return getToken(MySQLParser.INFILE_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode INTO_SYMBOL() { return getToken(MySQLParser.INTO_SYMBOL, 0); }
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public LoadDataFileTailContext loadDataFileTail() {
			return getRuleContext(LoadDataFileTailContext.class,0);
		}
		public TerminalNode LOCAL_SYMBOL() { return getToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public UsePartitionContext usePartition() {
			return getRuleContext(UsePartitionContext.class,0);
		}
		public CharsetClauseContext charsetClause() {
			return getRuleContext(CharsetClauseContext.class,0);
		}
		public XmlRowsIdentifiedByContext xmlRowsIdentifiedBy() {
			return getRuleContext(XmlRowsIdentifiedByContext.class,0);
		}
		public FieldsClauseContext fieldsClause() {
			return getRuleContext(FieldsClauseContext.class,0);
		}
		public LinesClauseContext linesClause() {
			return getRuleContext(LinesClauseContext.class,0);
		}
		public TerminalNode LOW_PRIORITY_SYMBOL() { return getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0); }
		public TerminalNode CONCURRENT_SYMBOL() { return getToken(MySQLParser.CONCURRENT_SYMBOL, 0); }
		public TerminalNode REPLACE_SYMBOL() { return getToken(MySQLParser.REPLACE_SYMBOL, 0); }
		public TerminalNode IGNORE_SYMBOL() { return getToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public LoadStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadStatement; }
	}

	public final LoadStatementContext loadStatement() throws RecognitionException {
		LoadStatementContext _localctx = new LoadStatementContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_loadStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2811);
			match(LOAD_SYMBOL);
			setState(2812);
			dataOrXml();
			setState(2814);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONCURRENT_SYMBOL || _la==LOW_PRIORITY_SYMBOL) {
				{
				setState(2813);
				_la = _input.LA(1);
				if ( !(_la==CONCURRENT_SYMBOL || _la==LOW_PRIORITY_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2817);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL_SYMBOL) {
				{
				setState(2816);
				match(LOCAL_SYMBOL);
				}
			}

			setState(2819);
			match(INFILE_SYMBOL);
			setState(2820);
			textLiteral();
			setState(2822);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE_SYMBOL || _la==REPLACE_SYMBOL) {
				{
				setState(2821);
				_la = _input.LA(1);
				if ( !(_la==IGNORE_SYMBOL || _la==REPLACE_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2824);
			match(INTO_SYMBOL);
			setState(2825);
			match(TABLE_SYMBOL);
			setState(2826);
			tableRef();
			setState(2828);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,264,_ctx) ) {
			case 1:
				{
				setState(2827);
				usePartition();
				}
				break;
			}
			setState(2831);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHARSET_SYMBOL || _la==CHAR_SYMBOL) {
				{
				setState(2830);
				charsetClause();
				}
			}

			setState(2834);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ROWS_SYMBOL) {
				{
				setState(2833);
				xmlRowsIdentifiedBy();
				}
			}

			setState(2837);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMNS_SYMBOL) {
				{
				setState(2836);
				fieldsClause();
				}
			}

			setState(2840);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LINES_SYMBOL) {
				{
				setState(2839);
				linesClause();
				}
			}

			setState(2842);
			loadDataFileTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataOrXmlContext extends ParserRuleContext {
		public TerminalNode DATA_SYMBOL() { return getToken(MySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode XML_SYMBOL() { return getToken(MySQLParser.XML_SYMBOL, 0); }
		public DataOrXmlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataOrXml; }
	}

	public final DataOrXmlContext dataOrXml() throws RecognitionException {
		DataOrXmlContext _localctx = new DataOrXmlContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_dataOrXml);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2844);
			_la = _input.LA(1);
			if ( !(_la==DATA_SYMBOL || _la==XML_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlRowsIdentifiedByContext extends ParserRuleContext {
		public TerminalNode ROWS_SYMBOL() { return getToken(MySQLParser.ROWS_SYMBOL, 0); }
		public TerminalNode IDENTIFIED_SYMBOL() { return getToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public XmlRowsIdentifiedByContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlRowsIdentifiedBy; }
	}

	public final XmlRowsIdentifiedByContext xmlRowsIdentifiedBy() throws RecognitionException {
		XmlRowsIdentifiedByContext _localctx = new XmlRowsIdentifiedByContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_xmlRowsIdentifiedBy);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2846);
			match(ROWS_SYMBOL);
			setState(2847);
			match(IDENTIFIED_SYMBOL);
			setState(2848);
			match(BY_SYMBOL);
			setState(2849);
			textString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadDataFileTailContext extends ParserRuleContext {
		public TerminalNode IGNORE_SYMBOL() { return getToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public LoadDataFileTargetListContext loadDataFileTargetList() {
			return getRuleContext(LoadDataFileTargetListContext.class,0);
		}
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public UpdateListContext updateList() {
			return getRuleContext(UpdateListContext.class,0);
		}
		public TerminalNode LINES_SYMBOL() { return getToken(MySQLParser.LINES_SYMBOL, 0); }
		public TerminalNode ROWS_SYMBOL() { return getToken(MySQLParser.ROWS_SYMBOL, 0); }
		public LoadDataFileTailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadDataFileTail; }
	}

	public final LoadDataFileTailContext loadDataFileTail() throws RecognitionException {
		LoadDataFileTailContext _localctx = new LoadDataFileTailContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_loadDataFileTail);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2854);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE_SYMBOL) {
				{
				setState(2851);
				match(IGNORE_SYMBOL);
				setState(2852);
				match(INT_NUMBER);
				setState(2853);
				_la = _input.LA(1);
				if ( !(_la==ROWS_SYMBOL || _la==LINES_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2857);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				setState(2856);
				loadDataFileTargetList();
				}
			}

			setState(2861);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET_SYMBOL) {
				{
				setState(2859);
				match(SET_SYMBOL);
				setState(2860);
				updateList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadDataFileTargetListContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public FieldOrVariableListContext fieldOrVariableList() {
			return getRuleContext(FieldOrVariableListContext.class,0);
		}
		public LoadDataFileTargetListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadDataFileTargetList; }
	}

	public final LoadDataFileTargetListContext loadDataFileTargetList() throws RecognitionException {
		LoadDataFileTargetListContext _localctx = new LoadDataFileTargetListContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_loadDataFileTargetList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2863);
			match(OPEN_PAR_SYMBOL);
			setState(2865);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,272,_ctx) ) {
			case 1:
				{
				setState(2864);
				fieldOrVariableList();
				}
				break;
			}
			setState(2867);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FieldOrVariableListContext extends ParserRuleContext {
		public List<ColumnRefContext> columnRef() {
			return getRuleContexts(ColumnRefContext.class);
		}
		public ColumnRefContext columnRef(int i) {
			return getRuleContext(ColumnRefContext.class,i);
		}
		public List<UserVariableContext> userVariable() {
			return getRuleContexts(UserVariableContext.class);
		}
		public UserVariableContext userVariable(int i) {
			return getRuleContext(UserVariableContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public FieldOrVariableListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldOrVariableList; }
	}

	public final FieldOrVariableListContext fieldOrVariableList() throws RecognitionException {
		FieldOrVariableListContext _localctx = new FieldOrVariableListContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_fieldOrVariableList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2871);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,273,_ctx) ) {
			case 1:
				{
				setState(2869);
				columnRef();
				}
				break;
			case 2:
				{
				setState(2870);
				userVariable();
				}
				break;
			}
			setState(2880);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(2873);
				match(COMMA_SYMBOL);
				setState(2876);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,274,_ctx) ) {
				case 1:
					{
					setState(2874);
					columnRef();
					}
					break;
				case 2:
					{
					setState(2875);
					userVariable();
					}
					break;
				}
				}
				}
				setState(2882);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplaceStatementContext extends ParserRuleContext {
		public TerminalNode REPLACE_SYMBOL() { return getToken(MySQLParser.REPLACE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public InsertFromConstructorContext insertFromConstructor() {
			return getRuleContext(InsertFromConstructorContext.class,0);
		}
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public UpdateListContext updateList() {
			return getRuleContext(UpdateListContext.class,0);
		}
		public InsertQueryExpressionContext insertQueryExpression() {
			return getRuleContext(InsertQueryExpressionContext.class,0);
		}
		public TerminalNode INTO_SYMBOL() { return getToken(MySQLParser.INTO_SYMBOL, 0); }
		public UsePartitionContext usePartition() {
			return getRuleContext(UsePartitionContext.class,0);
		}
		public TerminalNode LOW_PRIORITY_SYMBOL() { return getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0); }
		public TerminalNode DELAYED_SYMBOL() { return getToken(MySQLParser.DELAYED_SYMBOL, 0); }
		public ReplaceStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replaceStatement; }
	}

	public final ReplaceStatementContext replaceStatement() throws RecognitionException {
		ReplaceStatementContext _localctx = new ReplaceStatementContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_replaceStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2883);
			match(REPLACE_SYMBOL);
			setState(2885);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,276,_ctx) ) {
			case 1:
				{
				setState(2884);
				_la = _input.LA(1);
				if ( !(_la==DELAYED_SYMBOL || _la==LOW_PRIORITY_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(2888);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,277,_ctx) ) {
			case 1:
				{
				setState(2887);
				match(INTO_SYMBOL);
				}
				break;
			}
			setState(2890);
			tableRef();
			setState(2892);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,278,_ctx) ) {
			case 1:
				{
				setState(2891);
				usePartition();
				}
				break;
			}
			setState(2898);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,279,_ctx) ) {
			case 1:
				{
				setState(2894);
				insertFromConstructor();
				}
				break;
			case 2:
				{
				setState(2895);
				match(SET_SYMBOL);
				setState(2896);
				updateList();
				}
				break;
			case 3:
				{
				setState(2897);
				insertQueryExpression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectStatementContext extends ParserRuleContext {
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public QueryExpressionParensContext queryExpressionParens() {
			return getRuleContext(QueryExpressionParensContext.class,0);
		}
		public SelectStatementWithIntoContext selectStatementWithInto() {
			return getRuleContext(SelectStatementWithIntoContext.class,0);
		}
		public SelectStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectStatement; }
	}

	public final SelectStatementContext selectStatement() throws RecognitionException {
		SelectStatementContext _localctx = new SelectStatementContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_selectStatement);
		try {
			setState(2903);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,280,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2900);
				queryExpression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2901);
				queryExpressionParens();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2902);
				selectStatementWithInto();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectStatementWithIntoContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public SelectStatementWithIntoContext selectStatementWithInto() {
			return getRuleContext(SelectStatementWithIntoContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public IntoClauseContext intoClause() {
			return getRuleContext(IntoClauseContext.class,0);
		}
		public SelectStatementWithIntoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectStatementWithInto; }
	}

	public final SelectStatementWithIntoContext selectStatementWithInto() throws RecognitionException {
		SelectStatementWithIntoContext _localctx = new SelectStatementWithIntoContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_selectStatementWithInto);
		try {
			setState(2912);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,281,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2905);
				match(OPEN_PAR_SYMBOL);
				setState(2906);
				selectStatementWithInto();
				setState(2907);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2909);
				queryExpression();
				setState(2910);
				intoClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryExpressionContext extends ParserRuleContext {
		public QueryExpressionBodyContext queryExpressionBody() {
			return getRuleContext(QueryExpressionBodyContext.class,0);
		}
		public QueryExpressionParensContext queryExpressionParens() {
			return getRuleContext(QueryExpressionParensContext.class,0);
		}
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public ProcedureAnalyseClauseContext procedureAnalyseClause() {
			return getRuleContext(ProcedureAnalyseClauseContext.class,0);
		}
		public LockingClauseContext lockingClause() {
			return getRuleContext(LockingClauseContext.class,0);
		}
		public OrderClauseContext orderClause() {
			return getRuleContext(OrderClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public QueryExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpression; }
	}

	public final QueryExpressionContext queryExpression() throws RecognitionException {
		QueryExpressionContext _localctx = new QueryExpressionContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_queryExpression);
		int _la;
		try {
			setState(2948);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,291,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2916);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,282,_ctx) ) {
				case 1:
					{
					setState(2914);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(2915);
					withClause();
					}
					break;
				}
				setState(2933);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,287,_ctx) ) {
				case 1:
					{
					setState(2918);
					queryExpressionBody(0);
					setState(2920);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,283,_ctx) ) {
					case 1:
						{
						setState(2919);
						orderClause();
						}
						break;
					}
					setState(2923);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,284,_ctx) ) {
					case 1:
						{
						setState(2922);
						limitClause();
						}
						break;
					}
					}
					break;
				case 2:
					{
					setState(2925);
					queryExpressionParens();
					setState(2931);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ORDER_SYMBOL:
						{
						setState(2926);
						orderClause();
						setState(2928);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,285,_ctx) ) {
						case 1:
							{
							setState(2927);
							limitClause();
							}
							break;
						}
						}
						break;
					case LIMIT_SYMBOL:
						{
						setState(2930);
						limitClause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				setState(2937);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,288,_ctx) ) {
				case 1:
					{
					setState(2935);
					if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
					setState(2936);
					procedureAnalyseClause();
					}
					break;
				}
				setState(2940);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR_SYMBOL || _la==LOCK_SYMBOL) {
					{
					setState(2939);
					lockingClause();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2942);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(2943);
				withClause();
				setState(2944);
				queryExpressionParens();
				setState(2946);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR_SYMBOL || _la==LOCK_SYMBOL) {
					{
					setState(2945);
					lockingClause();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryExpressionBodyContext extends ParserRuleContext {
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public List<QueryExpressionParensContext> queryExpressionParens() {
			return getRuleContexts(QueryExpressionParensContext.class);
		}
		public QueryExpressionParensContext queryExpressionParens(int i) {
			return getRuleContext(QueryExpressionParensContext.class,i);
		}
		public TerminalNode UNION_SYMBOL() { return getToken(MySQLParser.UNION_SYMBOL, 0); }
		public UnionOptionContext unionOption() {
			return getRuleContext(UnionOptionContext.class,0);
		}
		public QueryExpressionBodyContext queryExpressionBody() {
			return getRuleContext(QueryExpressionBodyContext.class,0);
		}
		public QueryExpressionBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpressionBody; }
	}

	public final QueryExpressionBodyContext queryExpressionBody() throws RecognitionException {
		return queryExpressionBody(0);
	}

	private QueryExpressionBodyContext queryExpressionBody(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		QueryExpressionBodyContext _localctx = new QueryExpressionBodyContext(_ctx, _parentState);
		QueryExpressionBodyContext _prevctx = _localctx;
		int _startState = 274;
		enterRecursionRule(_localctx, 274, RULE_queryExpressionBody, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2961);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT_SYMBOL:
				{
				setState(2951);
				querySpecification();
				}
				break;
			case OPEN_PAR_SYMBOL:
				{
				setState(2952);
				queryExpressionParens();
				setState(2953);
				match(UNION_SYMBOL);
				setState(2955);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL_SYMBOL || _la==DISTINCT_SYMBOL) {
					{
					setState(2954);
					unionOption();
					}
				}

				setState(2959);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SELECT_SYMBOL:
					{
					setState(2957);
					querySpecification();
					}
					break;
				case OPEN_PAR_SYMBOL:
					{
					setState(2958);
					queryExpressionParens();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(2974);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,297,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new QueryExpressionBodyContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_queryExpressionBody);
					setState(2963);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2964);
					match(UNION_SYMBOL);
					setState(2966);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL_SYMBOL || _la==DISTINCT_SYMBOL) {
						{
						setState(2965);
						unionOption();
						}
					}

					setState(2970);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case SELECT_SYMBOL:
						{
						setState(2968);
						querySpecification();
						}
						break;
					case OPEN_PAR_SYMBOL:
						{
						setState(2969);
						queryExpressionParens();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				setState(2976);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,297,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class QueryExpressionParensContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public QueryExpressionParensContext queryExpressionParens() {
			return getRuleContext(QueryExpressionParensContext.class,0);
		}
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public QueryExpressionParensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpressionParens; }
	}

	public final QueryExpressionParensContext queryExpressionParens() throws RecognitionException {
		QueryExpressionParensContext _localctx = new QueryExpressionParensContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_queryExpressionParens);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2977);
			match(OPEN_PAR_SYMBOL);
			setState(2980);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,298,_ctx) ) {
			case 1:
				{
				setState(2978);
				queryExpressionParens();
				}
				break;
			case 2:
				{
				setState(2979);
				queryExpression();
				}
				break;
			}
			setState(2982);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuerySpecificationContext extends ParserRuleContext {
		public TerminalNode SELECT_SYMBOL() { return getToken(MySQLParser.SELECT_SYMBOL, 0); }
		public SelectItemListContext selectItemList() {
			return getRuleContext(SelectItemListContext.class,0);
		}
		public List<SelectOptionContext> selectOption() {
			return getRuleContexts(SelectOptionContext.class);
		}
		public SelectOptionContext selectOption(int i) {
			return getRuleContext(SelectOptionContext.class,i);
		}
		public IntoClauseContext intoClause() {
			return getRuleContext(IntoClauseContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public GroupByClauseContext groupByClause() {
			return getRuleContext(GroupByClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public WindowClauseContext windowClause() {
			return getRuleContext(WindowClauseContext.class,0);
		}
		public QuerySpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querySpecification; }
	}

	public final QuerySpecificationContext querySpecification() throws RecognitionException {
		QuerySpecificationContext _localctx = new QuerySpecificationContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_querySpecification);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2984);
			match(SELECT_SYMBOL);
			setState(2988);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,299,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2985);
					selectOption();
					}
					} 
				}
				setState(2990);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,299,_ctx);
			}
			setState(2991);
			selectItemList();
			setState(2993);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,300,_ctx) ) {
			case 1:
				{
				setState(2992);
				intoClause();
				}
				break;
			}
			setState(2996);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,301,_ctx) ) {
			case 1:
				{
				setState(2995);
				fromClause();
				}
				break;
			}
			setState(2999);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,302,_ctx) ) {
			case 1:
				{
				setState(2998);
				whereClause();
				}
				break;
			}
			setState(3002);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,303,_ctx) ) {
			case 1:
				{
				setState(3001);
				groupByClause();
				}
				break;
			}
			setState(3005);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,304,_ctx) ) {
			case 1:
				{
				setState(3004);
				havingClause();
				}
				break;
			}
			setState(3009);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,305,_ctx) ) {
			case 1:
				{
				setState(3007);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(3008);
				windowClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubqueryContext extends ParserRuleContext {
		public QueryExpressionParensContext queryExpressionParens() {
			return getRuleContext(QueryExpressionParensContext.class,0);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery; }
	}

	public final SubqueryContext subquery() throws RecognitionException {
		SubqueryContext _localctx = new SubqueryContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_subquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3011);
			queryExpressionParens();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuerySpecOptionContext extends ParserRuleContext {
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode DISTINCT_SYMBOL() { return getToken(MySQLParser.DISTINCT_SYMBOL, 0); }
		public TerminalNode STRAIGHT_JOIN_SYMBOL() { return getToken(MySQLParser.STRAIGHT_JOIN_SYMBOL, 0); }
		public TerminalNode HIGH_PRIORITY_SYMBOL() { return getToken(MySQLParser.HIGH_PRIORITY_SYMBOL, 0); }
		public TerminalNode SQL_SMALL_RESULT_SYMBOL() { return getToken(MySQLParser.SQL_SMALL_RESULT_SYMBOL, 0); }
		public TerminalNode SQL_BIG_RESULT_SYMBOL() { return getToken(MySQLParser.SQL_BIG_RESULT_SYMBOL, 0); }
		public TerminalNode SQL_BUFFER_RESULT_SYMBOL() { return getToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0); }
		public TerminalNode SQL_CALC_FOUND_ROWS_SYMBOL() { return getToken(MySQLParser.SQL_CALC_FOUND_ROWS_SYMBOL, 0); }
		public QuerySpecOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querySpecOption; }
	}

	public final QuerySpecOptionContext querySpecOption() throws RecognitionException {
		QuerySpecOptionContext _localctx = new QuerySpecOptionContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_querySpecOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3013);
			_la = _input.LA(1);
			if ( !(_la==SQL_BUFFER_RESULT_SYMBOL || _la==ALL_SYMBOL || _la==DISTINCT_SYMBOL || _la==HIGH_PRIORITY_SYMBOL || ((((_la - 629)) & ~0x3f) == 0 && ((1L << (_la - 629)) & ((1L << (SQL_BIG_RESULT_SYMBOL - 629)) | (1L << (SQL_CALC_FOUND_ROWS_SYMBOL - 629)) | (1L << (SQL_SMALL_RESULT_SYMBOL - 629)) | (1L << (STRAIGHT_JOIN_SYMBOL - 629)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitClauseContext extends ParserRuleContext {
		public TerminalNode LIMIT_SYMBOL() { return getToken(MySQLParser.LIMIT_SYMBOL, 0); }
		public LimitOptionsContext limitOptions() {
			return getRuleContext(LimitOptionsContext.class,0);
		}
		public LimitClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClause; }
	}

	public final LimitClauseContext limitClause() throws RecognitionException {
		LimitClauseContext _localctx = new LimitClauseContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_limitClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3015);
			match(LIMIT_SYMBOL);
			setState(3016);
			limitOptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleLimitClauseContext extends ParserRuleContext {
		public TerminalNode LIMIT_SYMBOL() { return getToken(MySQLParser.LIMIT_SYMBOL, 0); }
		public LimitOptionContext limitOption() {
			return getRuleContext(LimitOptionContext.class,0);
		}
		public SimpleLimitClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleLimitClause; }
	}

	public final SimpleLimitClauseContext simpleLimitClause() throws RecognitionException {
		SimpleLimitClauseContext _localctx = new SimpleLimitClauseContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_simpleLimitClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3018);
			match(LIMIT_SYMBOL);
			setState(3019);
			limitOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitOptionsContext extends ParserRuleContext {
		public List<LimitOptionContext> limitOption() {
			return getRuleContexts(LimitOptionContext.class);
		}
		public LimitOptionContext limitOption(int i) {
			return getRuleContext(LimitOptionContext.class,i);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public TerminalNode OFFSET_SYMBOL() { return getToken(MySQLParser.OFFSET_SYMBOL, 0); }
		public LimitOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitOptions; }
	}

	public final LimitOptionsContext limitOptions() throws RecognitionException {
		LimitOptionsContext _localctx = new LimitOptionsContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_limitOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3021);
			limitOption();
			setState(3024);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,306,_ctx) ) {
			case 1:
				{
				setState(3022);
				_la = _input.LA(1);
				if ( !(_la==OFFSET_SYMBOL || _la==COMMA_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3023);
				limitOption();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitOptionContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode PARAM_MARKER() { return getToken(MySQLParser.PARAM_MARKER, 0); }
		public TerminalNode ULONGLONG_NUMBER() { return getToken(MySQLParser.ULONGLONG_NUMBER, 0); }
		public TerminalNode LONG_NUMBER() { return getToken(MySQLParser.LONG_NUMBER, 0); }
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public LimitOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitOption; }
	}

	public final LimitOptionContext limitOption() throws RecognitionException {
		LimitOptionContext _localctx = new LimitOptionContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_limitOption);
		int _la;
		try {
			setState(3028);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,307,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3026);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3027);
				_la = _input.LA(1);
				if ( !(((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (INT_NUMBER - 380)) | (1L << (LONG_NUMBER - 380)) | (1L << (ULONGLONG_NUMBER - 380)) | (1L << (PARAM_MARKER - 380)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntoClauseContext extends ParserRuleContext {
		public TerminalNode INTO_SYMBOL() { return getToken(MySQLParser.INTO_SYMBOL, 0); }
		public TerminalNode OUTFILE_SYMBOL() { return getToken(MySQLParser.OUTFILE_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode DUMPFILE_SYMBOL() { return getToken(MySQLParser.DUMPFILE_SYMBOL, 0); }
		public List<TextOrIdentifierContext> textOrIdentifier() {
			return getRuleContexts(TextOrIdentifierContext.class);
		}
		public TextOrIdentifierContext textOrIdentifier(int i) {
			return getRuleContext(TextOrIdentifierContext.class,i);
		}
		public List<UserVariableContext> userVariable() {
			return getRuleContexts(UserVariableContext.class);
		}
		public UserVariableContext userVariable(int i) {
			return getRuleContext(UserVariableContext.class,i);
		}
		public CharsetClauseContext charsetClause() {
			return getRuleContext(CharsetClauseContext.class,0);
		}
		public FieldsClauseContext fieldsClause() {
			return getRuleContext(FieldsClauseContext.class,0);
		}
		public LinesClauseContext linesClause() {
			return getRuleContext(LinesClauseContext.class,0);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public IntoClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intoClause; }
	}

	public final IntoClauseContext intoClause() throws RecognitionException {
		IntoClauseContext _localctx = new IntoClauseContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_intoClause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3030);
			match(INTO_SYMBOL);
			setState(3058);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,314,_ctx) ) {
			case 1:
				{
				setState(3031);
				match(OUTFILE_SYMBOL);
				setState(3032);
				textStringLiteral();
				setState(3034);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,308,_ctx) ) {
				case 1:
					{
					setState(3033);
					charsetClause();
					}
					break;
				}
				setState(3037);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,309,_ctx) ) {
				case 1:
					{
					setState(3036);
					fieldsClause();
					}
					break;
				}
				setState(3040);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,310,_ctx) ) {
				case 1:
					{
					setState(3039);
					linesClause();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(3042);
				match(DUMPFILE_SYMBOL);
				setState(3043);
				textStringLiteral();
				}
				break;
			case 3:
				{
				setState(3046);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,311,_ctx) ) {
				case 1:
					{
					setState(3044);
					textOrIdentifier();
					}
					break;
				case 2:
					{
					setState(3045);
					userVariable();
					}
					break;
				}
				setState(3055);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,313,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3048);
						match(COMMA_SYMBOL);
						setState(3051);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,312,_ctx) ) {
						case 1:
							{
							setState(3049);
							textOrIdentifier();
							}
							break;
						case 2:
							{
							setState(3050);
							userVariable();
							}
							break;
						}
						}
						} 
					}
					setState(3057);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,313,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureAnalyseClauseContext extends ParserRuleContext {
		public TerminalNode PROCEDURE_SYMBOL() { return getToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
		public TerminalNode ANALYSE_SYMBOL() { return getToken(MySQLParser.ANALYSE_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> INT_NUMBER() { return getTokens(MySQLParser.INT_NUMBER); }
		public TerminalNode INT_NUMBER(int i) {
			return getToken(MySQLParser.INT_NUMBER, i);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public ProcedureAnalyseClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureAnalyseClause; }
	}

	public final ProcedureAnalyseClauseContext procedureAnalyseClause() throws RecognitionException {
		ProcedureAnalyseClauseContext _localctx = new ProcedureAnalyseClauseContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_procedureAnalyseClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3060);
			match(PROCEDURE_SYMBOL);
			setState(3061);
			match(ANALYSE_SYMBOL);
			setState(3062);
			match(OPEN_PAR_SYMBOL);
			setState(3068);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INT_NUMBER) {
				{
				setState(3063);
				match(INT_NUMBER);
				setState(3066);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(3064);
					match(COMMA_SYMBOL);
					setState(3065);
					match(INT_NUMBER);
					}
				}

				}
			}

			setState(3070);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HavingClauseContext extends ParserRuleContext {
		public TerminalNode HAVING_SYMBOL() { return getToken(MySQLParser.HAVING_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_havingClause; }
	}

	public final HavingClauseContext havingClause() throws RecognitionException {
		HavingClauseContext _localctx = new HavingClauseContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_havingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3072);
			match(HAVING_SYMBOL);
			setState(3073);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowClauseContext extends ParserRuleContext {
		public TerminalNode WINDOW_SYMBOL() { return getToken(MySQLParser.WINDOW_SYMBOL, 0); }
		public List<WindowDefinitionContext> windowDefinition() {
			return getRuleContexts(WindowDefinitionContext.class);
		}
		public WindowDefinitionContext windowDefinition(int i) {
			return getRuleContext(WindowDefinitionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public WindowClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowClause; }
	}

	public final WindowClauseContext windowClause() throws RecognitionException {
		WindowClauseContext _localctx = new WindowClauseContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_windowClause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3075);
			match(WINDOW_SYMBOL);
			setState(3076);
			windowDefinition();
			setState(3081);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,317,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3077);
					match(COMMA_SYMBOL);
					setState(3078);
					windowDefinition();
					}
					} 
				}
				setState(3083);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,317,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowDefinitionContext extends ParserRuleContext {
		public WindowNameContext windowName() {
			return getRuleContext(WindowNameContext.class,0);
		}
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public WindowSpecContext windowSpec() {
			return getRuleContext(WindowSpecContext.class,0);
		}
		public WindowDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowDefinition; }
	}

	public final WindowDefinitionContext windowDefinition() throws RecognitionException {
		WindowDefinitionContext _localctx = new WindowDefinitionContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_windowDefinition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3084);
			windowName();
			setState(3085);
			match(AS_SYMBOL);
			setState(3086);
			windowSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowSpecContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public WindowSpecDetailsContext windowSpecDetails() {
			return getRuleContext(WindowSpecDetailsContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public WindowSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowSpec; }
	}

	public final WindowSpecContext windowSpec() throws RecognitionException {
		WindowSpecContext _localctx = new WindowSpecContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_windowSpec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3088);
			match(OPEN_PAR_SYMBOL);
			setState(3089);
			windowSpecDetails();
			setState(3090);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowSpecDetailsContext extends ParserRuleContext {
		public WindowNameContext windowName() {
			return getRuleContext(WindowNameContext.class,0);
		}
		public TerminalNode PARTITION_SYMBOL() { return getToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public OrderListContext orderList() {
			return getRuleContext(OrderListContext.class,0);
		}
		public OrderClauseContext orderClause() {
			return getRuleContext(OrderClauseContext.class,0);
		}
		public WindowFrameClauseContext windowFrameClause() {
			return getRuleContext(WindowFrameClauseContext.class,0);
		}
		public WindowSpecDetailsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowSpecDetails; }
	}

	public final WindowSpecDetailsContext windowSpecDetails() throws RecognitionException {
		WindowSpecDetailsContext _localctx = new WindowSpecDetailsContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_windowSpecDetails);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3093);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,318,_ctx) ) {
			case 1:
				{
				setState(3092);
				windowName();
				}
				break;
			}
			setState(3098);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION_SYMBOL) {
				{
				setState(3095);
				match(PARTITION_SYMBOL);
				setState(3096);
				match(BY_SYMBOL);
				setState(3097);
				orderList();
				}
			}

			setState(3101);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER_SYMBOL) {
				{
				setState(3100);
				orderClause();
				}
			}

			setState(3104);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ROWS_SYMBOL || _la==RANGE_SYMBOL || _la==GROUPS_SYMBOL) {
				{
				setState(3103);
				windowFrameClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFrameClauseContext extends ParserRuleContext {
		public WindowFrameUnitsContext windowFrameUnits() {
			return getRuleContext(WindowFrameUnitsContext.class,0);
		}
		public WindowFrameExtentContext windowFrameExtent() {
			return getRuleContext(WindowFrameExtentContext.class,0);
		}
		public WindowFrameExclusionContext windowFrameExclusion() {
			return getRuleContext(WindowFrameExclusionContext.class,0);
		}
		public WindowFrameClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrameClause; }
	}

	public final WindowFrameClauseContext windowFrameClause() throws RecognitionException {
		WindowFrameClauseContext _localctx = new WindowFrameClauseContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_windowFrameClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3106);
			windowFrameUnits();
			setState(3107);
			windowFrameExtent();
			setState(3109);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCLUDE_SYMBOL) {
				{
				setState(3108);
				windowFrameExclusion();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFrameUnitsContext extends ParserRuleContext {
		public TerminalNode ROWS_SYMBOL() { return getToken(MySQLParser.ROWS_SYMBOL, 0); }
		public TerminalNode RANGE_SYMBOL() { return getToken(MySQLParser.RANGE_SYMBOL, 0); }
		public TerminalNode GROUPS_SYMBOL() { return getToken(MySQLParser.GROUPS_SYMBOL, 0); }
		public WindowFrameUnitsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrameUnits; }
	}

	public final WindowFrameUnitsContext windowFrameUnits() throws RecognitionException {
		WindowFrameUnitsContext _localctx = new WindowFrameUnitsContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_windowFrameUnits);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3111);
			_la = _input.LA(1);
			if ( !(_la==ROWS_SYMBOL || _la==RANGE_SYMBOL || _la==GROUPS_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFrameExtentContext extends ParserRuleContext {
		public WindowFrameStartContext windowFrameStart() {
			return getRuleContext(WindowFrameStartContext.class,0);
		}
		public WindowFrameBetweenContext windowFrameBetween() {
			return getRuleContext(WindowFrameBetweenContext.class,0);
		}
		public WindowFrameExtentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrameExtent; }
	}

	public final WindowFrameExtentContext windowFrameExtent() throws RecognitionException {
		WindowFrameExtentContext _localctx = new WindowFrameExtentContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_windowFrameExtent);
		try {
			setState(3115);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT_SYMBOL:
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case PARAM_MARKER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
			case INTERVAL_SYMBOL:
			case UNBOUNDED_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3113);
				windowFrameStart();
				}
				break;
			case BETWEEN_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3114);
				windowFrameBetween();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFrameStartContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED_SYMBOL() { return getToken(MySQLParser.UNBOUNDED_SYMBOL, 0); }
		public TerminalNode PRECEDING_SYMBOL() { return getToken(MySQLParser.PRECEDING_SYMBOL, 0); }
		public Ulonglong_numberContext ulonglong_number() {
			return getRuleContext(Ulonglong_numberContext.class,0);
		}
		public TerminalNode PARAM_MARKER() { return getToken(MySQLParser.PARAM_MARKER, 0); }
		public TerminalNode INTERVAL_SYMBOL() { return getToken(MySQLParser.INTERVAL_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public IntervalContext interval() {
			return getRuleContext(IntervalContext.class,0);
		}
		public TerminalNode CURRENT_SYMBOL() { return getToken(MySQLParser.CURRENT_SYMBOL, 0); }
		public TerminalNode ROW_SYMBOL() { return getToken(MySQLParser.ROW_SYMBOL, 0); }
		public WindowFrameStartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrameStart; }
	}

	public final WindowFrameStartContext windowFrameStart() throws RecognitionException {
		WindowFrameStartContext _localctx = new WindowFrameStartContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_windowFrameStart);
		try {
			setState(3131);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNBOUNDED_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3117);
				match(UNBOUNDED_SYMBOL);
				setState(3118);
				match(PRECEDING_SYMBOL);
				}
				break;
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3119);
				ulonglong_number();
				setState(3120);
				match(PRECEDING_SYMBOL);
				}
				break;
			case PARAM_MARKER:
				enterOuterAlt(_localctx, 3);
				{
				setState(3122);
				match(PARAM_MARKER);
				setState(3123);
				match(PRECEDING_SYMBOL);
				}
				break;
			case INTERVAL_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(3124);
				match(INTERVAL_SYMBOL);
				setState(3125);
				expr(0);
				setState(3126);
				interval();
				setState(3127);
				match(PRECEDING_SYMBOL);
				}
				break;
			case CURRENT_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(3129);
				match(CURRENT_SYMBOL);
				setState(3130);
				match(ROW_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFrameBetweenContext extends ParserRuleContext {
		public TerminalNode BETWEEN_SYMBOL() { return getToken(MySQLParser.BETWEEN_SYMBOL, 0); }
		public List<WindowFrameBoundContext> windowFrameBound() {
			return getRuleContexts(WindowFrameBoundContext.class);
		}
		public WindowFrameBoundContext windowFrameBound(int i) {
			return getRuleContext(WindowFrameBoundContext.class,i);
		}
		public TerminalNode AND_SYMBOL() { return getToken(MySQLParser.AND_SYMBOL, 0); }
		public WindowFrameBetweenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrameBetween; }
	}

	public final WindowFrameBetweenContext windowFrameBetween() throws RecognitionException {
		WindowFrameBetweenContext _localctx = new WindowFrameBetweenContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_windowFrameBetween);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3133);
			match(BETWEEN_SYMBOL);
			setState(3134);
			windowFrameBound();
			setState(3135);
			match(AND_SYMBOL);
			setState(3136);
			windowFrameBound();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFrameBoundContext extends ParserRuleContext {
		public WindowFrameStartContext windowFrameStart() {
			return getRuleContext(WindowFrameStartContext.class,0);
		}
		public TerminalNode UNBOUNDED_SYMBOL() { return getToken(MySQLParser.UNBOUNDED_SYMBOL, 0); }
		public TerminalNode FOLLOWING_SYMBOL() { return getToken(MySQLParser.FOLLOWING_SYMBOL, 0); }
		public Ulonglong_numberContext ulonglong_number() {
			return getRuleContext(Ulonglong_numberContext.class,0);
		}
		public TerminalNode PARAM_MARKER() { return getToken(MySQLParser.PARAM_MARKER, 0); }
		public TerminalNode INTERVAL_SYMBOL() { return getToken(MySQLParser.INTERVAL_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public IntervalContext interval() {
			return getRuleContext(IntervalContext.class,0);
		}
		public WindowFrameBoundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrameBound; }
	}

	public final WindowFrameBoundContext windowFrameBound() throws RecognitionException {
		WindowFrameBoundContext _localctx = new WindowFrameBoundContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_windowFrameBound);
		try {
			setState(3151);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,325,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3138);
				windowFrameStart();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3139);
				match(UNBOUNDED_SYMBOL);
				setState(3140);
				match(FOLLOWING_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3141);
				ulonglong_number();
				setState(3142);
				match(FOLLOWING_SYMBOL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3144);
				match(PARAM_MARKER);
				setState(3145);
				match(FOLLOWING_SYMBOL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3146);
				match(INTERVAL_SYMBOL);
				setState(3147);
				expr(0);
				setState(3148);
				interval();
				setState(3149);
				match(FOLLOWING_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFrameExclusionContext extends ParserRuleContext {
		public TerminalNode EXCLUDE_SYMBOL() { return getToken(MySQLParser.EXCLUDE_SYMBOL, 0); }
		public TerminalNode CURRENT_SYMBOL() { return getToken(MySQLParser.CURRENT_SYMBOL, 0); }
		public TerminalNode ROW_SYMBOL() { return getToken(MySQLParser.ROW_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MySQLParser.GROUP_SYMBOL, 0); }
		public TerminalNode TIES_SYMBOL() { return getToken(MySQLParser.TIES_SYMBOL, 0); }
		public TerminalNode NO_SYMBOL() { return getToken(MySQLParser.NO_SYMBOL, 0); }
		public TerminalNode OTHERS_SYMBOL() { return getToken(MySQLParser.OTHERS_SYMBOL, 0); }
		public WindowFrameExclusionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrameExclusion; }
	}

	public final WindowFrameExclusionContext windowFrameExclusion() throws RecognitionException {
		WindowFrameExclusionContext _localctx = new WindowFrameExclusionContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_windowFrameExclusion);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3153);
			match(EXCLUDE_SYMBOL);
			setState(3160);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT_SYMBOL:
				{
				setState(3154);
				match(CURRENT_SYMBOL);
				setState(3155);
				match(ROW_SYMBOL);
				}
				break;
			case GROUP_SYMBOL:
				{
				setState(3156);
				match(GROUP_SYMBOL);
				}
				break;
			case TIES_SYMBOL:
				{
				setState(3157);
				match(TIES_SYMBOL);
				}
				break;
			case NO_SYMBOL:
				{
				setState(3158);
				match(NO_SYMBOL);
				setState(3159);
				match(OTHERS_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithClauseContext extends ParserRuleContext {
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public List<CommonTableExpressionContext> commonTableExpression() {
			return getRuleContexts(CommonTableExpressionContext.class);
		}
		public CommonTableExpressionContext commonTableExpression(int i) {
			return getRuleContext(CommonTableExpressionContext.class,i);
		}
		public TerminalNode RECURSIVE_SYMBOL() { return getToken(MySQLParser.RECURSIVE_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public WithClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withClause; }
	}

	public final WithClauseContext withClause() throws RecognitionException {
		WithClauseContext _localctx = new WithClauseContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_withClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3162);
			match(WITH_SYMBOL);
			setState(3164);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,327,_ctx) ) {
			case 1:
				{
				setState(3163);
				match(RECURSIVE_SYMBOL);
				}
				break;
			}
			setState(3166);
			commonTableExpression();
			setState(3171);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(3167);
				match(COMMA_SYMBOL);
				setState(3168);
				commonTableExpression();
				}
				}
				setState(3173);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommonTableExpressionContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public ColumnInternalRefListContext columnInternalRefList() {
			return getRuleContext(ColumnInternalRefListContext.class,0);
		}
		public CommonTableExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commonTableExpression; }
	}

	public final CommonTableExpressionContext commonTableExpression() throws RecognitionException {
		CommonTableExpressionContext _localctx = new CommonTableExpressionContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_commonTableExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3174);
			identifier();
			setState(3176);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				setState(3175);
				columnInternalRefList();
				}
			}

			setState(3178);
			match(AS_SYMBOL);
			setState(3179);
			subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByClauseContext extends ParserRuleContext {
		public TerminalNode GROUP_SYMBOL() { return getToken(MySQLParser.GROUP_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public OrderListContext orderList() {
			return getRuleContext(OrderListContext.class,0);
		}
		public OlapOptionContext olapOption() {
			return getRuleContext(OlapOptionContext.class,0);
		}
		public GroupByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByClause; }
	}

	public final GroupByClauseContext groupByClause() throws RecognitionException {
		GroupByClauseContext _localctx = new GroupByClauseContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_groupByClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3181);
			match(GROUP_SYMBOL);
			setState(3182);
			match(BY_SYMBOL);
			setState(3183);
			orderList();
			setState(3185);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,330,_ctx) ) {
			case 1:
				{
				setState(3184);
				olapOption();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OlapOptionContext extends ParserRuleContext {
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode ROLLUP_SYMBOL() { return getToken(MySQLParser.ROLLUP_SYMBOL, 0); }
		public TerminalNode CUBE_SYMBOL() { return getToken(MySQLParser.CUBE_SYMBOL, 0); }
		public OlapOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_olapOption; }
	}

	public final OlapOptionContext olapOption() throws RecognitionException {
		OlapOptionContext _localctx = new OlapOptionContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_olapOption);
		try {
			setState(3192);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,331,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3187);
				match(WITH_SYMBOL);
				setState(3188);
				match(ROLLUP_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3189);
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				setState(3190);
				match(WITH_SYMBOL);
				setState(3191);
				match(CUBE_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderClauseContext extends ParserRuleContext {
		public TerminalNode ORDER_SYMBOL() { return getToken(MySQLParser.ORDER_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public OrderListContext orderList() {
			return getRuleContext(OrderListContext.class,0);
		}
		public OrderClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderClause; }
	}

	public final OrderClauseContext orderClause() throws RecognitionException {
		OrderClauseContext _localctx = new OrderClauseContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_orderClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3194);
			match(ORDER_SYMBOL);
			setState(3195);
			match(BY_SYMBOL);
			setState(3196);
			orderList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DirectionContext extends ParserRuleContext {
		public TerminalNode ASC_SYMBOL() { return getToken(MySQLParser.ASC_SYMBOL, 0); }
		public TerminalNode DESC_SYMBOL() { return getToken(MySQLParser.DESC_SYMBOL, 0); }
		public DirectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_direction; }
	}

	public final DirectionContext direction() throws RecognitionException {
		DirectionContext _localctx = new DirectionContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_direction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3198);
			_la = _input.LA(1);
			if ( !(_la==ASC_SYMBOL || _la==DESC_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromClauseContext extends ParserRuleContext {
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode DUAL_SYMBOL() { return getToken(MySQLParser.DUAL_SYMBOL, 0); }
		public TableReferenceListContext tableReferenceList() {
			return getRuleContext(TableReferenceListContext.class,0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromClause; }
	}

	public final FromClauseContext fromClause() throws RecognitionException {
		FromClauseContext _localctx = new FromClauseContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_fromClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3200);
			match(FROM_SYMBOL);
			setState(3203);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,332,_ctx) ) {
			case 1:
				{
				setState(3201);
				match(DUAL_SYMBOL);
				}
				break;
			case 2:
				{
				setState(3202);
				tableReferenceList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableReferenceListContext extends ParserRuleContext {
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TableReferenceListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableReferenceList; }
	}

	public final TableReferenceListContext tableReferenceList() throws RecognitionException {
		TableReferenceListContext _localctx = new TableReferenceListContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_tableReferenceList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3205);
			tableReference();
			setState(3210);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,333,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3206);
					match(COMMA_SYMBOL);
					setState(3207);
					tableReference();
					}
					} 
				}
				setState(3212);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,333,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectOptionContext extends ParserRuleContext {
		public QuerySpecOptionContext querySpecOption() {
			return getRuleContext(QuerySpecOptionContext.class,0);
		}
		public TerminalNode SQL_NO_CACHE_SYMBOL() { return getToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0); }
		public TerminalNode SQL_CACHE_SYMBOL() { return getToken(MySQLParser.SQL_CACHE_SYMBOL, 0); }
		public TerminalNode MAX_STATEMENT_TIME_SYMBOL() { return getToken(MySQLParser.MAX_STATEMENT_TIME_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public SelectOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectOption; }
	}

	public final SelectOptionContext selectOption() throws RecognitionException {
		SelectOptionContext _localctx = new SelectOptionContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_selectOption);
		try {
			setState(3221);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,334,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3213);
				querySpecOption();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3214);
				match(SQL_NO_CACHE_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3215);
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				setState(3216);
				match(SQL_CACHE_SYMBOL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3217);
				if (!(serverVersion >= 50704 && serverVersion < 50708)) throw new FailedPredicateException(this, "serverVersion >= 50704 && serverVersion < 50708");
				setState(3218);
				match(MAX_STATEMENT_TIME_SYMBOL);
				setState(3219);
				match(EQUAL_OPERATOR);
				setState(3220);
				real_ulong_number();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockingClauseContext extends ParserRuleContext {
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public LockStrenghContext lockStrengh() {
			return getRuleContext(LockStrenghContext.class,0);
		}
		public TerminalNode OF_SYMBOL() { return getToken(MySQLParser.OF_SYMBOL, 0); }
		public TableAliasRefListContext tableAliasRefList() {
			return getRuleContext(TableAliasRefListContext.class,0);
		}
		public LockedRowActionContext lockedRowAction() {
			return getRuleContext(LockedRowActionContext.class,0);
		}
		public TerminalNode LOCK_SYMBOL() { return getToken(MySQLParser.LOCK_SYMBOL, 0); }
		public TerminalNode IN_SYMBOL() { return getToken(MySQLParser.IN_SYMBOL, 0); }
		public TerminalNode SHARE_SYMBOL() { return getToken(MySQLParser.SHARE_SYMBOL, 0); }
		public TerminalNode MODE_SYMBOL() { return getToken(MySQLParser.MODE_SYMBOL, 0); }
		public LockingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockingClause; }
	}

	public final LockingClauseContext lockingClause() throws RecognitionException {
		LockingClauseContext _localctx = new LockingClauseContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_lockingClause);
		try {
			setState(3238);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3223);
				match(FOR_SYMBOL);
				setState(3224);
				lockStrengh();
				setState(3228);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,335,_ctx) ) {
				case 1:
					{
					setState(3225);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(3226);
					match(OF_SYMBOL);
					setState(3227);
					tableAliasRefList();
					}
					break;
				}
				setState(3232);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,336,_ctx) ) {
				case 1:
					{
					setState(3230);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(3231);
					lockedRowAction();
					}
					break;
				}
				}
				break;
			case LOCK_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3234);
				match(LOCK_SYMBOL);
				setState(3235);
				match(IN_SYMBOL);
				setState(3236);
				match(SHARE_SYMBOL);
				setState(3237);
				match(MODE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockStrenghContext extends ParserRuleContext {
		public TerminalNode UPDATE_SYMBOL() { return getToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public TerminalNode SHARE_SYMBOL() { return getToken(MySQLParser.SHARE_SYMBOL, 0); }
		public LockStrenghContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockStrengh; }
	}

	public final LockStrenghContext lockStrengh() throws RecognitionException {
		LockStrenghContext _localctx = new LockStrenghContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_lockStrengh);
		try {
			setState(3243);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,338,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3240);
				match(UPDATE_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3241);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(3242);
				match(SHARE_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockedRowActionContext extends ParserRuleContext {
		public TerminalNode SKIP_SYMBOL() { return getToken(MySQLParser.SKIP_SYMBOL, 0); }
		public TerminalNode LOCKED_SYMBOL() { return getToken(MySQLParser.LOCKED_SYMBOL, 0); }
		public TerminalNode NOWAIT_SYMBOL() { return getToken(MySQLParser.NOWAIT_SYMBOL, 0); }
		public LockedRowActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockedRowAction; }
	}

	public final LockedRowActionContext lockedRowAction() throws RecognitionException {
		LockedRowActionContext _localctx = new LockedRowActionContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_lockedRowAction);
		try {
			setState(3248);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SKIP_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3245);
				match(SKIP_SYMBOL);
				setState(3246);
				match(LOCKED_SYMBOL);
				}
				break;
			case NOWAIT_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3247);
				match(NOWAIT_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectItemListContext extends ParserRuleContext {
		public List<SelectItemContext> selectItem() {
			return getRuleContexts(SelectItemContext.class);
		}
		public SelectItemContext selectItem(int i) {
			return getRuleContext(SelectItemContext.class,i);
		}
		public TerminalNode MULT_OPERATOR() { return getToken(MySQLParser.MULT_OPERATOR, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public SelectItemListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectItemList; }
	}

	public final SelectItemListContext selectItemList() throws RecognitionException {
		SelectItemListContext _localctx = new SelectItemListContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_selectItemList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3252);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,340,_ctx) ) {
			case 1:
				{
				setState(3250);
				selectItem();
				}
				break;
			case 2:
				{
				setState(3251);
				match(MULT_OPERATOR);
				}
				break;
			}
			setState(3258);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,341,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3254);
					match(COMMA_SYMBOL);
					setState(3255);
					selectItem();
					}
					} 
				}
				setState(3260);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,341,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectItemContext extends ParserRuleContext {
		public TableWildContext tableWild() {
			return getRuleContext(TableWildContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public SelectAliasContext selectAlias() {
			return getRuleContext(SelectAliasContext.class,0);
		}
		public SelectItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectItem; }
	}

	public final SelectItemContext selectItem() throws RecognitionException {
		SelectItemContext _localctx = new SelectItemContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_selectItem);
		try {
			setState(3266);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,343,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3261);
				tableWild();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3262);
				expr(0);
				setState(3264);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,342,_ctx) ) {
				case 1:
					{
					setState(3263);
					selectAlias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectAliasContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public SelectAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectAlias; }
	}

	public final SelectAliasContext selectAlias() throws RecognitionException {
		SelectAliasContext _localctx = new SelectAliasContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_selectAlias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3269);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,344,_ctx) ) {
			case 1:
				{
				setState(3268);
				match(AS_SYMBOL);
				}
				break;
			}
			setState(3273);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,345,_ctx) ) {
			case 1:
				{
				setState(3271);
				identifier();
				}
				break;
			case 2:
				{
				setState(3272);
				textStringLiteral();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhereClauseContext extends ParserRuleContext {
		public TerminalNode WHERE_SYMBOL() { return getToken(MySQLParser.WHERE_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whereClause; }
	}

	public final WhereClauseContext whereClause() throws RecognitionException {
		WhereClauseContext _localctx = new WhereClauseContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_whereClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3275);
			match(WHERE_SYMBOL);
			setState(3276);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableReferenceContext extends ParserRuleContext {
		public TableFactorContext tableFactor() {
			return getRuleContext(TableFactorContext.class,0);
		}
		public TerminalNode OPEN_CURLY_SYMBOL() { return getToken(MySQLParser.OPEN_CURLY_SYMBOL, 0); }
		public EscapedTableReferenceContext escapedTableReference() {
			return getRuleContext(EscapedTableReferenceContext.class,0);
		}
		public TerminalNode CLOSE_CURLY_SYMBOL() { return getToken(MySQLParser.CLOSE_CURLY_SYMBOL, 0); }
		public List<JoinedTableContext> joinedTable() {
			return getRuleContexts(JoinedTableContext.class);
		}
		public JoinedTableContext joinedTable(int i) {
			return getRuleContext(JoinedTableContext.class,i);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode OJ_SYMBOL() { return getToken(MySQLParser.OJ_SYMBOL, 0); }
		public TableReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableReference; }
	}

	public final TableReferenceContext tableReference() throws RecognitionException {
		TableReferenceContext _localctx = new TableReferenceContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_tableReference);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3288);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,347,_ctx) ) {
			case 1:
				{
				setState(3278);
				tableFactor();
				}
				break;
			case 2:
				{
				setState(3279);
				match(OPEN_CURLY_SYMBOL);
				setState(3283);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,346,_ctx) ) {
				case 1:
					{
					setState(3280);
					if (!(serverVersion < 80017)) throw new FailedPredicateException(this, "serverVersion < 80017");
					setState(3281);
					identifier();
					}
					break;
				case 2:
					{
					setState(3282);
					match(OJ_SYMBOL);
					}
					break;
				}
				setState(3285);
				escapedTableReference();
				setState(3286);
				match(CLOSE_CURLY_SYMBOL);
				}
				break;
			}
			setState(3293);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,348,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3290);
					joinedTable();
					}
					} 
				}
				setState(3295);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,348,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EscapedTableReferenceContext extends ParserRuleContext {
		public TableFactorContext tableFactor() {
			return getRuleContext(TableFactorContext.class,0);
		}
		public List<JoinedTableContext> joinedTable() {
			return getRuleContexts(JoinedTableContext.class);
		}
		public JoinedTableContext joinedTable(int i) {
			return getRuleContext(JoinedTableContext.class,i);
		}
		public EscapedTableReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_escapedTableReference; }
	}

	public final EscapedTableReferenceContext escapedTableReference() throws RecognitionException {
		EscapedTableReferenceContext _localctx = new EscapedTableReferenceContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_escapedTableReference);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3296);
			tableFactor();
			setState(3300);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CROSS_SYMBOL || _la==INNER_SYMBOL || ((((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & ((1L << (JOIN_SYMBOL - 535)) | (1L << (LEFT_SYMBOL - 535)) | (1L << (NATURAL_SYMBOL - 535)))) != 0) || _la==RIGHT_SYMBOL || _la==STRAIGHT_JOIN_SYMBOL) {
				{
				{
				setState(3297);
				joinedTable();
				}
				}
				setState(3302);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinedTableContext extends ParserRuleContext {
		public InnerJoinTypeContext innerJoinType() {
			return getRuleContext(InnerJoinTypeContext.class,0);
		}
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode USING_SYMBOL() { return getToken(MySQLParser.USING_SYMBOL, 0); }
		public IdentifierListWithParenthesesContext identifierListWithParentheses() {
			return getRuleContext(IdentifierListWithParenthesesContext.class,0);
		}
		public OuterJoinTypeContext outerJoinType() {
			return getRuleContext(OuterJoinTypeContext.class,0);
		}
		public NaturalJoinTypeContext naturalJoinType() {
			return getRuleContext(NaturalJoinTypeContext.class,0);
		}
		public TableFactorContext tableFactor() {
			return getRuleContext(TableFactorContext.class,0);
		}
		public JoinedTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinedTable; }
	}

	public final JoinedTableContext joinedTable() throws RecognitionException {
		JoinedTableContext _localctx = new JoinedTableContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_joinedTable);
		try {
			setState(3322);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CROSS_SYMBOL:
			case INNER_SYMBOL:
			case JOIN_SYMBOL:
			case STRAIGHT_JOIN_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3303);
				innerJoinType();
				setState(3304);
				tableReference();
				setState(3309);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,350,_ctx) ) {
				case 1:
					{
					setState(3305);
					match(ON_SYMBOL);
					setState(3306);
					expr(0);
					}
					break;
				case 2:
					{
					setState(3307);
					match(USING_SYMBOL);
					setState(3308);
					identifierListWithParentheses();
					}
					break;
				}
				}
				break;
			case LEFT_SYMBOL:
			case RIGHT_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3311);
				outerJoinType();
				setState(3312);
				tableReference();
				setState(3317);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ON_SYMBOL:
					{
					setState(3313);
					match(ON_SYMBOL);
					setState(3314);
					expr(0);
					}
					break;
				case USING_SYMBOL:
					{
					setState(3315);
					match(USING_SYMBOL);
					setState(3316);
					identifierListWithParentheses();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NATURAL_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(3319);
				naturalJoinType();
				setState(3320);
				tableFactor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NaturalJoinTypeContext extends ParserRuleContext {
		public TerminalNode NATURAL_SYMBOL() { return getToken(MySQLParser.NATURAL_SYMBOL, 0); }
		public TerminalNode JOIN_SYMBOL() { return getToken(MySQLParser.JOIN_SYMBOL, 0); }
		public TerminalNode INNER_SYMBOL() { return getToken(MySQLParser.INNER_SYMBOL, 0); }
		public TerminalNode LEFT_SYMBOL() { return getToken(MySQLParser.LEFT_SYMBOL, 0); }
		public TerminalNode RIGHT_SYMBOL() { return getToken(MySQLParser.RIGHT_SYMBOL, 0); }
		public TerminalNode OUTER_SYMBOL() { return getToken(MySQLParser.OUTER_SYMBOL, 0); }
		public NaturalJoinTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_naturalJoinType; }
	}

	public final NaturalJoinTypeContext naturalJoinType() throws RecognitionException {
		NaturalJoinTypeContext _localctx = new NaturalJoinTypeContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_naturalJoinType);
		int _la;
		try {
			setState(3335);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,355,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3324);
				match(NATURAL_SYMBOL);
				setState(3326);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INNER_SYMBOL) {
					{
					setState(3325);
					match(INNER_SYMBOL);
					}
				}

				setState(3328);
				match(JOIN_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3329);
				match(NATURAL_SYMBOL);
				setState(3330);
				_la = _input.LA(1);
				if ( !(_la==LEFT_SYMBOL || _la==RIGHT_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3332);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER_SYMBOL) {
					{
					setState(3331);
					match(OUTER_SYMBOL);
					}
				}

				setState(3334);
				match(JOIN_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InnerJoinTypeContext extends ParserRuleContext {
		public Token type;
		public TerminalNode JOIN_SYMBOL() { return getToken(MySQLParser.JOIN_SYMBOL, 0); }
		public TerminalNode INNER_SYMBOL() { return getToken(MySQLParser.INNER_SYMBOL, 0); }
		public TerminalNode CROSS_SYMBOL() { return getToken(MySQLParser.CROSS_SYMBOL, 0); }
		public TerminalNode STRAIGHT_JOIN_SYMBOL() { return getToken(MySQLParser.STRAIGHT_JOIN_SYMBOL, 0); }
		public InnerJoinTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_innerJoinType; }
	}

	public final InnerJoinTypeContext innerJoinType() throws RecognitionException {
		InnerJoinTypeContext _localctx = new InnerJoinTypeContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_innerJoinType);
		int _la;
		try {
			setState(3342);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CROSS_SYMBOL:
			case INNER_SYMBOL:
			case JOIN_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3338);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CROSS_SYMBOL || _la==INNER_SYMBOL) {
					{
					setState(3337);
					((InnerJoinTypeContext)_localctx).type = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==CROSS_SYMBOL || _la==INNER_SYMBOL) ) {
						((InnerJoinTypeContext)_localctx).type = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3340);
				match(JOIN_SYMBOL);
				}
				break;
			case STRAIGHT_JOIN_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3341);
				((InnerJoinTypeContext)_localctx).type = match(STRAIGHT_JOIN_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OuterJoinTypeContext extends ParserRuleContext {
		public Token type;
		public TerminalNode JOIN_SYMBOL() { return getToken(MySQLParser.JOIN_SYMBOL, 0); }
		public TerminalNode LEFT_SYMBOL() { return getToken(MySQLParser.LEFT_SYMBOL, 0); }
		public TerminalNode RIGHT_SYMBOL() { return getToken(MySQLParser.RIGHT_SYMBOL, 0); }
		public TerminalNode OUTER_SYMBOL() { return getToken(MySQLParser.OUTER_SYMBOL, 0); }
		public OuterJoinTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outerJoinType; }
	}

	public final OuterJoinTypeContext outerJoinType() throws RecognitionException {
		OuterJoinTypeContext _localctx = new OuterJoinTypeContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_outerJoinType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3344);
			((OuterJoinTypeContext)_localctx).type = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==LEFT_SYMBOL || _la==RIGHT_SYMBOL) ) {
				((OuterJoinTypeContext)_localctx).type = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3346);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUTER_SYMBOL) {
				{
				setState(3345);
				match(OUTER_SYMBOL);
				}
			}

			setState(3348);
			match(JOIN_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableFactorContext extends ParserRuleContext {
		public SingleTableContext singleTable() {
			return getRuleContext(SingleTableContext.class,0);
		}
		public SingleTableParensContext singleTableParens() {
			return getRuleContext(SingleTableParensContext.class,0);
		}
		public DerivedTableContext derivedTable() {
			return getRuleContext(DerivedTableContext.class,0);
		}
		public TableReferenceListParensContext tableReferenceListParens() {
			return getRuleContext(TableReferenceListParensContext.class,0);
		}
		public TableFunctionContext tableFunction() {
			return getRuleContext(TableFunctionContext.class,0);
		}
		public TableFactorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFactor; }
	}

	public final TableFactorContext tableFactor() throws RecognitionException {
		TableFactorContext _localctx = new TableFactorContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_tableFactor);
		try {
			setState(3356);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,359,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3350);
				singleTable();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3351);
				singleTableParens();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3352);
				derivedTable();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3353);
				tableReferenceListParens();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3354);
				if (!(serverVersion >= 80004)) throw new FailedPredicateException(this, "serverVersion >= 80004");
				setState(3355);
				tableFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleTableContext extends ParserRuleContext {
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public UsePartitionContext usePartition() {
			return getRuleContext(UsePartitionContext.class,0);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public IndexHintListContext indexHintList() {
			return getRuleContext(IndexHintListContext.class,0);
		}
		public SingleTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleTable; }
	}

	public final SingleTableContext singleTable() throws RecognitionException {
		SingleTableContext _localctx = new SingleTableContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_singleTable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3358);
			tableRef();
			setState(3360);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,360,_ctx) ) {
			case 1:
				{
				setState(3359);
				usePartition();
				}
				break;
			}
			setState(3363);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,361,_ctx) ) {
			case 1:
				{
				setState(3362);
				tableAlias();
				}
				break;
			}
			setState(3366);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,362,_ctx) ) {
			case 1:
				{
				setState(3365);
				indexHintList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleTableParensContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SingleTableContext singleTable() {
			return getRuleContext(SingleTableContext.class,0);
		}
		public SingleTableParensContext singleTableParens() {
			return getRuleContext(SingleTableParensContext.class,0);
		}
		public SingleTableParensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleTableParens; }
	}

	public final SingleTableParensContext singleTableParens() throws RecognitionException {
		SingleTableParensContext _localctx = new SingleTableParensContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_singleTableParens);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3368);
			match(OPEN_PAR_SYMBOL);
			setState(3371);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,363,_ctx) ) {
			case 1:
				{
				setState(3369);
				singleTable();
				}
				break;
			case 2:
				{
				setState(3370);
				singleTableParens();
				}
				break;
			}
			setState(3373);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DerivedTableContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public ColumnInternalRefListContext columnInternalRefList() {
			return getRuleContext(ColumnInternalRefListContext.class,0);
		}
		public TerminalNode LATERAL_SYMBOL() { return getToken(MySQLParser.LATERAL_SYMBOL, 0); }
		public DerivedTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_derivedTable; }
	}

	public final DerivedTableContext derivedTable() throws RecognitionException {
		DerivedTableContext _localctx = new DerivedTableContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_derivedTable);
		try {
			setState(3392);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,368,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3375);
				subquery();
				setState(3377);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,364,_ctx) ) {
				case 1:
					{
					setState(3376);
					tableAlias();
					}
					break;
				}
				setState(3381);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,365,_ctx) ) {
				case 1:
					{
					setState(3379);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(3380);
					columnInternalRefList();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3383);
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				setState(3384);
				match(LATERAL_SYMBOL);
				setState(3385);
				subquery();
				setState(3387);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,366,_ctx) ) {
				case 1:
					{
					setState(3386);
					tableAlias();
					}
					break;
				}
				setState(3390);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,367,_ctx) ) {
				case 1:
					{
					setState(3389);
					columnInternalRefList();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableReferenceListParensContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TableReferenceListContext tableReferenceList() {
			return getRuleContext(TableReferenceListContext.class,0);
		}
		public TableReferenceListParensContext tableReferenceListParens() {
			return getRuleContext(TableReferenceListParensContext.class,0);
		}
		public TableReferenceListParensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableReferenceListParens; }
	}

	public final TableReferenceListParensContext tableReferenceListParens() throws RecognitionException {
		TableReferenceListParensContext _localctx = new TableReferenceListParensContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_tableReferenceListParens);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3394);
			match(OPEN_PAR_SYMBOL);
			setState(3397);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,369,_ctx) ) {
			case 1:
				{
				setState(3395);
				tableReferenceList();
				}
				break;
			case 2:
				{
				setState(3396);
				tableReferenceListParens();
				}
				break;
			}
			setState(3399);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableFunctionContext extends ParserRuleContext {
		public TerminalNode JSON_TABLE_SYMBOL() { return getToken(MySQLParser.JSON_TABLE_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public ColumnsClauseContext columnsClause() {
			return getRuleContext(ColumnsClauseContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public TableFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFunction; }
	}

	public final TableFunctionContext tableFunction() throws RecognitionException {
		TableFunctionContext _localctx = new TableFunctionContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_tableFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3401);
			match(JSON_TABLE_SYMBOL);
			setState(3402);
			match(OPEN_PAR_SYMBOL);
			setState(3403);
			expr(0);
			setState(3404);
			match(COMMA_SYMBOL);
			setState(3405);
			textStringLiteral();
			setState(3406);
			columnsClause();
			setState(3407);
			match(CLOSE_PAR_SYMBOL);
			setState(3409);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,370,_ctx) ) {
			case 1:
				{
				setState(3408);
				tableAlias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnsClauseContext extends ParserRuleContext {
		public TerminalNode COLUMNS_SYMBOL() { return getToken(MySQLParser.COLUMNS_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<JtColumnContext> jtColumn() {
			return getRuleContexts(JtColumnContext.class);
		}
		public JtColumnContext jtColumn(int i) {
			return getRuleContext(JtColumnContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ColumnsClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnsClause; }
	}

	public final ColumnsClauseContext columnsClause() throws RecognitionException {
		ColumnsClauseContext _localctx = new ColumnsClauseContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_columnsClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3411);
			match(COLUMNS_SYMBOL);
			setState(3412);
			match(OPEN_PAR_SYMBOL);
			setState(3413);
			jtColumn();
			setState(3418);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(3414);
				match(COMMA_SYMBOL);
				setState(3415);
				jtColumn();
				}
				}
				setState(3420);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3421);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JtColumnContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode ORDINALITY_SYMBOL() { return getToken(MySQLParser.ORDINALITY_SYMBOL, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode PATH_SYMBOL() { return getToken(MySQLParser.PATH_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public CollateContext collate() {
			return getRuleContext(CollateContext.class,0);
		}
		public TerminalNode EXISTS_SYMBOL() { return getToken(MySQLParser.EXISTS_SYMBOL, 0); }
		public OnEmptyOrErrorContext onEmptyOrError() {
			return getRuleContext(OnEmptyOrErrorContext.class,0);
		}
		public TerminalNode NESTED_SYMBOL() { return getToken(MySQLParser.NESTED_SYMBOL, 0); }
		public ColumnsClauseContext columnsClause() {
			return getRuleContext(ColumnsClauseContext.class,0);
		}
		public JtColumnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jtColumn; }
	}

	public final JtColumnContext jtColumn() throws RecognitionException {
		JtColumnContext _localctx = new JtColumnContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_jtColumn);
		int _la;
		try {
			setState(3446);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,375,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3423);
				identifier();
				setState(3424);
				match(FOR_SYMBOL);
				setState(3425);
				match(ORDINALITY_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3427);
				identifier();
				setState(3428);
				dataType();
				setState(3431);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,372,_ctx) ) {
				case 1:
					{
					setState(3429);
					if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
					setState(3430);
					collate();
					}
					break;
				}
				setState(3434);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXISTS_SYMBOL) {
					{
					setState(3433);
					match(EXISTS_SYMBOL);
					}
				}

				setState(3436);
				match(PATH_SYMBOL);
				setState(3437);
				textStringLiteral();
				setState(3439);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ERROR_SYMBOL || _la==DEFAULT_SYMBOL || _la==NULL_SYMBOL) {
					{
					setState(3438);
					onEmptyOrError();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3441);
				match(NESTED_SYMBOL);
				setState(3442);
				match(PATH_SYMBOL);
				setState(3443);
				textStringLiteral();
				setState(3444);
				columnsClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OnEmptyOrErrorContext extends ParserRuleContext {
		public OnEmptyContext onEmpty() {
			return getRuleContext(OnEmptyContext.class,0);
		}
		public OnErrorContext onError() {
			return getRuleContext(OnErrorContext.class,0);
		}
		public OnEmptyOrErrorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onEmptyOrError; }
	}

	public final OnEmptyOrErrorContext onEmptyOrError() throws RecognitionException {
		OnEmptyOrErrorContext _localctx = new OnEmptyOrErrorContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_onEmptyOrError);
		int _la;
		try {
			setState(3456);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,378,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3448);
				onEmpty();
				setState(3450);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ERROR_SYMBOL || _la==DEFAULT_SYMBOL || _la==NULL_SYMBOL) {
					{
					setState(3449);
					onError();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3452);
				onError();
				setState(3454);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ERROR_SYMBOL || _la==DEFAULT_SYMBOL || _la==NULL_SYMBOL) {
					{
					setState(3453);
					onEmpty();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OnEmptyContext extends ParserRuleContext {
		public JtOnResponseContext jtOnResponse() {
			return getRuleContext(JtOnResponseContext.class,0);
		}
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public TerminalNode EMPTY_SYMBOL() { return getToken(MySQLParser.EMPTY_SYMBOL, 0); }
		public OnEmptyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onEmpty; }
	}

	public final OnEmptyContext onEmpty() throws RecognitionException {
		OnEmptyContext _localctx = new OnEmptyContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_onEmpty);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3458);
			jtOnResponse();
			setState(3459);
			match(ON_SYMBOL);
			setState(3460);
			match(EMPTY_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OnErrorContext extends ParserRuleContext {
		public JtOnResponseContext jtOnResponse() {
			return getRuleContext(JtOnResponseContext.class,0);
		}
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public TerminalNode ERROR_SYMBOL() { return getToken(MySQLParser.ERROR_SYMBOL, 0); }
		public OnErrorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onError; }
	}

	public final OnErrorContext onError() throws RecognitionException {
		OnErrorContext _localctx = new OnErrorContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_onError);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3462);
			jtOnResponse();
			setState(3463);
			match(ON_SYMBOL);
			setState(3464);
			match(ERROR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JtOnResponseContext extends ParserRuleContext {
		public TerminalNode ERROR_SYMBOL() { return getToken(MySQLParser.ERROR_SYMBOL, 0); }
		public TerminalNode NULL_SYMBOL() { return getToken(MySQLParser.NULL_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public JtOnResponseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jtOnResponse; }
	}

	public final JtOnResponseContext jtOnResponse() throws RecognitionException {
		JtOnResponseContext _localctx = new JtOnResponseContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_jtOnResponse);
		try {
			setState(3470);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ERROR_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3466);
				match(ERROR_SYMBOL);
				}
				break;
			case NULL_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3467);
				match(NULL_SYMBOL);
				}
				break;
			case DEFAULT_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(3468);
				match(DEFAULT_SYMBOL);
				setState(3469);
				textStringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnionOptionContext extends ParserRuleContext {
		public TerminalNode DISTINCT_SYMBOL() { return getToken(MySQLParser.DISTINCT_SYMBOL, 0); }
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public UnionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unionOption; }
	}

	public final UnionOptionContext unionOption() throws RecognitionException {
		UnionOptionContext _localctx = new UnionOptionContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_unionOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3472);
			_la = _input.LA(1);
			if ( !(_la==ALL_SYMBOL || _la==DISTINCT_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableAliasContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TableAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableAlias; }
	}

	public final TableAliasContext tableAlias() throws RecognitionException {
		TableAliasContext _localctx = new TableAliasContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_tableAlias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3477);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,380,_ctx) ) {
			case 1:
				{
				setState(3474);
				match(AS_SYMBOL);
				}
				break;
			case 2:
				{
				setState(3475);
				if (!(serverVersion < 80017)) throw new FailedPredicateException(this, "serverVersion < 80017");
				setState(3476);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(3479);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintListContext extends ParserRuleContext {
		public List<IndexHintContext> indexHint() {
			return getRuleContexts(IndexHintContext.class);
		}
		public IndexHintContext indexHint(int i) {
			return getRuleContext(IndexHintContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public IndexHintListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHintList; }
	}

	public final IndexHintListContext indexHintList() throws RecognitionException {
		IndexHintListContext _localctx = new IndexHintListContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_indexHintList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3481);
			indexHint();
			setState(3486);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,381,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3482);
					match(COMMA_SYMBOL);
					setState(3483);
					indexHint();
					}
					} 
				}
				setState(3488);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,381,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintContext extends ParserRuleContext {
		public IndexHintTypeContext indexHintType() {
			return getRuleContext(IndexHintTypeContext.class,0);
		}
		public KeyOrIndexContext keyOrIndex() {
			return getRuleContext(KeyOrIndexContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public IndexListContext indexList() {
			return getRuleContext(IndexListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public IndexHintClauseContext indexHintClause() {
			return getRuleContext(IndexHintClauseContext.class,0);
		}
		public TerminalNode USE_SYMBOL() { return getToken(MySQLParser.USE_SYMBOL, 0); }
		public IndexHintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHint; }
	}

	public final IndexHintContext indexHint() throws RecognitionException {
		IndexHintContext _localctx = new IndexHintContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_indexHint);
		int _la;
		try {
			setState(3509);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FORCE_SYMBOL:
			case IGNORE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3489);
				indexHintType();
				setState(3490);
				keyOrIndex();
				setState(3492);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					setState(3491);
					indexHintClause();
					}
				}

				setState(3494);
				match(OPEN_PAR_SYMBOL);
				setState(3495);
				indexList();
				setState(3496);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case USE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3498);
				match(USE_SYMBOL);
				setState(3499);
				keyOrIndex();
				setState(3501);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					setState(3500);
					indexHintClause();
					}
				}

				setState(3503);
				match(OPEN_PAR_SYMBOL);
				setState(3505);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,384,_ctx) ) {
				case 1:
					{
					setState(3504);
					indexList();
					}
					break;
				}
				setState(3507);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintTypeContext extends ParserRuleContext {
		public TerminalNode FORCE_SYMBOL() { return getToken(MySQLParser.FORCE_SYMBOL, 0); }
		public TerminalNode IGNORE_SYMBOL() { return getToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public IndexHintTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHintType; }
	}

	public final IndexHintTypeContext indexHintType() throws RecognitionException {
		IndexHintTypeContext _localctx = new IndexHintTypeContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_indexHintType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3511);
			_la = _input.LA(1);
			if ( !(_la==FORCE_SYMBOL || _la==IGNORE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyOrIndexContext extends ParserRuleContext {
		public TerminalNode KEY_SYMBOL() { return getToken(MySQLParser.KEY_SYMBOL, 0); }
		public TerminalNode INDEX_SYMBOL() { return getToken(MySQLParser.INDEX_SYMBOL, 0); }
		public KeyOrIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyOrIndex; }
	}

	public final KeyOrIndexContext keyOrIndex() throws RecognitionException {
		KeyOrIndexContext _localctx = new KeyOrIndexContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_keyOrIndex);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3513);
			_la = _input.LA(1);
			if ( !(_la==INDEX_SYMBOL || _la==KEY_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintKeyTypeContext extends ParserRuleContext {
		public TerminalNode PRIMARY_SYMBOL() { return getToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		public TerminalNode KEY_SYMBOL() { return getToken(MySQLParser.KEY_SYMBOL, 0); }
		public TerminalNode UNIQUE_SYMBOL() { return getToken(MySQLParser.UNIQUE_SYMBOL, 0); }
		public KeyOrIndexContext keyOrIndex() {
			return getRuleContext(KeyOrIndexContext.class,0);
		}
		public ConstraintKeyTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintKeyType; }
	}

	public final ConstraintKeyTypeContext constraintKeyType() throws RecognitionException {
		ConstraintKeyTypeContext _localctx = new ConstraintKeyTypeContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_constraintKeyType);
		int _la;
		try {
			setState(3521);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRIMARY_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3515);
				match(PRIMARY_SYMBOL);
				setState(3516);
				match(KEY_SYMBOL);
				}
				break;
			case UNIQUE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3517);
				match(UNIQUE_SYMBOL);
				setState(3519);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX_SYMBOL || _la==KEY_SYMBOL) {
					{
					setState(3518);
					keyOrIndex();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintClauseContext extends ParserRuleContext {
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode JOIN_SYMBOL() { return getToken(MySQLParser.JOIN_SYMBOL, 0); }
		public TerminalNode ORDER_SYMBOL() { return getToken(MySQLParser.ORDER_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MySQLParser.GROUP_SYMBOL, 0); }
		public IndexHintClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHintClause; }
	}

	public final IndexHintClauseContext indexHintClause() throws RecognitionException {
		IndexHintClauseContext _localctx = new IndexHintClauseContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_indexHintClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3523);
			match(FOR_SYMBOL);
			setState(3529);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JOIN_SYMBOL:
				{
				setState(3524);
				match(JOIN_SYMBOL);
				}
				break;
			case ORDER_SYMBOL:
				{
				setState(3525);
				match(ORDER_SYMBOL);
				setState(3526);
				match(BY_SYMBOL);
				}
				break;
			case GROUP_SYMBOL:
				{
				setState(3527);
				match(GROUP_SYMBOL);
				setState(3528);
				match(BY_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexListContext extends ParserRuleContext {
		public List<IndexListElementContext> indexListElement() {
			return getRuleContexts(IndexListElementContext.class);
		}
		public IndexListElementContext indexListElement(int i) {
			return getRuleContext(IndexListElementContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public IndexListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexList; }
	}

	public final IndexListContext indexList() throws RecognitionException {
		IndexListContext _localctx = new IndexListContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_indexList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3531);
			indexListElement();
			setState(3536);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(3532);
				match(COMMA_SYMBOL);
				setState(3533);
				indexListElement();
				}
				}
				setState(3538);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexListElementContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode PRIMARY_SYMBOL() { return getToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		public IndexListElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexListElement; }
	}

	public final IndexListElementContext indexListElement() throws RecognitionException {
		IndexListElementContext _localctx = new IndexListElementContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_indexListElement);
		try {
			setState(3541);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,390,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3539);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3540);
				match(PRIMARY_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateStatementContext extends ParserRuleContext {
		public TerminalNode UPDATE_SYMBOL() { return getToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public TableReferenceListContext tableReferenceList() {
			return getRuleContext(TableReferenceListContext.class,0);
		}
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public UpdateListContext updateList() {
			return getRuleContext(UpdateListContext.class,0);
		}
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public TerminalNode LOW_PRIORITY_SYMBOL() { return getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0); }
		public TerminalNode IGNORE_SYMBOL() { return getToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public OrderClauseContext orderClause() {
			return getRuleContext(OrderClauseContext.class,0);
		}
		public SimpleLimitClauseContext simpleLimitClause() {
			return getRuleContext(SimpleLimitClauseContext.class,0);
		}
		public UpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateStatement; }
	}

	public final UpdateStatementContext updateStatement() throws RecognitionException {
		UpdateStatementContext _localctx = new UpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_updateStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3545);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,391,_ctx) ) {
			case 1:
				{
				setState(3543);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(3544);
				withClause();
				}
				break;
			}
			setState(3547);
			match(UPDATE_SYMBOL);
			setState(3549);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,392,_ctx) ) {
			case 1:
				{
				setState(3548);
				match(LOW_PRIORITY_SYMBOL);
				}
				break;
			}
			setState(3552);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,393,_ctx) ) {
			case 1:
				{
				setState(3551);
				match(IGNORE_SYMBOL);
				}
				break;
			}
			setState(3554);
			tableReferenceList();
			setState(3555);
			match(SET_SYMBOL);
			setState(3556);
			updateList();
			setState(3558);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE_SYMBOL) {
				{
				setState(3557);
				whereClause();
				}
			}

			setState(3561);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER_SYMBOL) {
				{
				setState(3560);
				orderClause();
				}
			}

			setState(3564);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT_SYMBOL) {
				{
				setState(3563);
				simpleLimitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionOrLockingStatementContext extends ParserRuleContext {
		public TransactionStatementContext transactionStatement() {
			return getRuleContext(TransactionStatementContext.class,0);
		}
		public SavepointStatementContext savepointStatement() {
			return getRuleContext(SavepointStatementContext.class,0);
		}
		public LockStatementContext lockStatement() {
			return getRuleContext(LockStatementContext.class,0);
		}
		public XaStatementContext xaStatement() {
			return getRuleContext(XaStatementContext.class,0);
		}
		public TransactionOrLockingStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionOrLockingStatement; }
	}

	public final TransactionOrLockingStatementContext transactionOrLockingStatement() throws RecognitionException {
		TransactionOrLockingStatementContext _localctx = new TransactionOrLockingStatementContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_transactionOrLockingStatement);
		try {
			setState(3570);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,397,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3566);
				transactionStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3567);
				savepointStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3568);
				lockStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3569);
				xaStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionStatementContext extends ParserRuleContext {
		public TerminalNode START_SYMBOL() { return getToken(MySQLParser.START_SYMBOL, 0); }
		public TerminalNode TRANSACTION_SYMBOL() { return getToken(MySQLParser.TRANSACTION_SYMBOL, 0); }
		public List<TransactionCharacteristicContext> transactionCharacteristic() {
			return getRuleContexts(TransactionCharacteristicContext.class);
		}
		public TransactionCharacteristicContext transactionCharacteristic(int i) {
			return getRuleContext(TransactionCharacteristicContext.class,i);
		}
		public TerminalNode COMMIT_SYMBOL() { return getToken(MySQLParser.COMMIT_SYMBOL, 0); }
		public TerminalNode WORK_SYMBOL() { return getToken(MySQLParser.WORK_SYMBOL, 0); }
		public TerminalNode AND_SYMBOL() { return getToken(MySQLParser.AND_SYMBOL, 0); }
		public TerminalNode CHAIN_SYMBOL() { return getToken(MySQLParser.CHAIN_SYMBOL, 0); }
		public TerminalNode RELEASE_SYMBOL() { return getToken(MySQLParser.RELEASE_SYMBOL, 0); }
		public List<TerminalNode> NO_SYMBOL() { return getTokens(MySQLParser.NO_SYMBOL); }
		public TerminalNode NO_SYMBOL(int i) {
			return getToken(MySQLParser.NO_SYMBOL, i);
		}
		public TransactionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionStatement; }
	}

	public final TransactionStatementContext transactionStatement() throws RecognitionException {
		TransactionStatementContext _localctx = new TransactionStatementContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_transactionStatement);
		int _la;
		try {
			int _alt;
			setState(3597);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case START_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3572);
				match(START_SYMBOL);
				setState(3573);
				match(TRANSACTION_SYMBOL);
				setState(3577);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,398,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3574);
						transactionCharacteristic();
						}
						} 
					}
					setState(3579);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,398,_ctx);
				}
				}
				break;
			case COMMIT_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3580);
				match(COMMIT_SYMBOL);
				setState(3582);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WORK_SYMBOL) {
					{
					setState(3581);
					match(WORK_SYMBOL);
					}
				}

				setState(3589);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AND_SYMBOL) {
					{
					setState(3584);
					match(AND_SYMBOL);
					setState(3586);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NO_SYMBOL) {
						{
						setState(3585);
						match(NO_SYMBOL);
						}
					}

					setState(3588);
					match(CHAIN_SYMBOL);
					}
				}

				setState(3595);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO_SYMBOL || _la==RELEASE_SYMBOL) {
					{
					setState(3592);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NO_SYMBOL) {
						{
						setState(3591);
						match(NO_SYMBOL);
						}
					}

					setState(3594);
					match(RELEASE_SYMBOL);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BeginWorkContext extends ParserRuleContext {
		public TerminalNode BEGIN_SYMBOL() { return getToken(MySQLParser.BEGIN_SYMBOL, 0); }
		public TerminalNode WORK_SYMBOL() { return getToken(MySQLParser.WORK_SYMBOL, 0); }
		public BeginWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_beginWork; }
	}

	public final BeginWorkContext beginWork() throws RecognitionException {
		BeginWorkContext _localctx = new BeginWorkContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_beginWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3599);
			match(BEGIN_SYMBOL);
			setState(3601);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK_SYMBOL) {
				{
				setState(3600);
				match(WORK_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionCharacteristicContext extends ParserRuleContext {
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode CONSISTENT_SYMBOL() { return getToken(MySQLParser.CONSISTENT_SYMBOL, 0); }
		public TerminalNode SNAPSHOT_SYMBOL() { return getToken(MySQLParser.SNAPSHOT_SYMBOL, 0); }
		public TerminalNode READ_SYMBOL() { return getToken(MySQLParser.READ_SYMBOL, 0); }
		public TerminalNode WRITE_SYMBOL() { return getToken(MySQLParser.WRITE_SYMBOL, 0); }
		public TerminalNode ONLY_SYMBOL() { return getToken(MySQLParser.ONLY_SYMBOL, 0); }
		public TransactionCharacteristicContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionCharacteristic; }
	}

	public final TransactionCharacteristicContext transactionCharacteristic() throws RecognitionException {
		TransactionCharacteristicContext _localctx = new TransactionCharacteristicContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_transactionCharacteristic);
		int _la;
		try {
			setState(3609);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,406,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3603);
				match(WITH_SYMBOL);
				setState(3604);
				match(CONSISTENT_SYMBOL);
				setState(3605);
				match(SNAPSHOT_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3606);
				if (!(serverVersion >= 50605)) throw new FailedPredicateException(this, "serverVersion >= 50605");
				setState(3607);
				match(READ_SYMBOL);
				setState(3608);
				_la = _input.LA(1);
				if ( !(_la==ONLY_SYMBOL || _la==WRITE_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SavepointStatementContext extends ParserRuleContext {
		public TerminalNode SAVEPOINT_SYMBOL() { return getToken(MySQLParser.SAVEPOINT_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode ROLLBACK_SYMBOL() { return getToken(MySQLParser.ROLLBACK_SYMBOL, 0); }
		public TerminalNode TO_SYMBOL() { return getToken(MySQLParser.TO_SYMBOL, 0); }
		public TerminalNode WORK_SYMBOL() { return getToken(MySQLParser.WORK_SYMBOL, 0); }
		public TerminalNode AND_SYMBOL() { return getToken(MySQLParser.AND_SYMBOL, 0); }
		public TerminalNode CHAIN_SYMBOL() { return getToken(MySQLParser.CHAIN_SYMBOL, 0); }
		public TerminalNode RELEASE_SYMBOL() { return getToken(MySQLParser.RELEASE_SYMBOL, 0); }
		public List<TerminalNode> NO_SYMBOL() { return getTokens(MySQLParser.NO_SYMBOL); }
		public TerminalNode NO_SYMBOL(int i) {
			return getToken(MySQLParser.NO_SYMBOL, i);
		}
		public SavepointStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepointStatement; }
	}

	public final SavepointStatementContext savepointStatement() throws RecognitionException {
		SavepointStatementContext _localctx = new SavepointStatementContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_savepointStatement);
		int _la;
		try {
			setState(3640);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SAVEPOINT_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3611);
				match(SAVEPOINT_SYMBOL);
				setState(3612);
				identifier();
				}
				break;
			case ROLLBACK_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3613);
				match(ROLLBACK_SYMBOL);
				setState(3615);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WORK_SYMBOL) {
					{
					setState(3614);
					match(WORK_SYMBOL);
					}
				}

				setState(3635);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case TO_SYMBOL:
					{
					setState(3617);
					match(TO_SYMBOL);
					setState(3619);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,408,_ctx) ) {
					case 1:
						{
						setState(3618);
						match(SAVEPOINT_SYMBOL);
						}
						break;
					}
					setState(3621);
					identifier();
					}
					break;
				case EOF:
				case NO_SYMBOL:
				case SEMICOLON_SYMBOL:
				case AND_SYMBOL:
				case RELEASE_SYMBOL:
					{
					setState(3627);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AND_SYMBOL) {
						{
						setState(3622);
						match(AND_SYMBOL);
						setState(3624);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NO_SYMBOL) {
							{
							setState(3623);
							match(NO_SYMBOL);
							}
						}

						setState(3626);
						match(CHAIN_SYMBOL);
						}
					}

					setState(3633);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NO_SYMBOL || _la==RELEASE_SYMBOL) {
						{
						setState(3630);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NO_SYMBOL) {
							{
							setState(3629);
							match(NO_SYMBOL);
							}
						}

						setState(3632);
						match(RELEASE_SYMBOL);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case RELEASE_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(3637);
				match(RELEASE_SYMBOL);
				setState(3638);
				match(SAVEPOINT_SYMBOL);
				setState(3639);
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockStatementContext extends ParserRuleContext {
		public TerminalNode LOCK_SYMBOL() { return getToken(MySQLParser.LOCK_SYMBOL, 0); }
		public List<LockItemContext> lockItem() {
			return getRuleContexts(LockItemContext.class);
		}
		public LockItemContext lockItem(int i) {
			return getRuleContext(LockItemContext.class,i);
		}
		public TerminalNode TABLES_SYMBOL() { return getToken(MySQLParser.TABLES_SYMBOL, 0); }
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TerminalNode INSTANCE_SYMBOL() { return getToken(MySQLParser.INSTANCE_SYMBOL, 0); }
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode BACKUP_SYMBOL() { return getToken(MySQLParser.BACKUP_SYMBOL, 0); }
		public TerminalNode UNLOCK_SYMBOL() { return getToken(MySQLParser.UNLOCK_SYMBOL, 0); }
		public LockStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockStatement; }
	}

	public final LockStatementContext lockStatement() throws RecognitionException {
		LockStatementContext _localctx = new LockStatementContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_lockStatement);
		int _la;
		try {
			setState(3664);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,417,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3642);
				match(LOCK_SYMBOL);
				setState(3643);
				_la = _input.LA(1);
				if ( !(_la==TABLES_SYMBOL || _la==TABLE_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3644);
				lockItem();
				setState(3649);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(3645);
					match(COMMA_SYMBOL);
					setState(3646);
					lockItem();
					}
					}
					setState(3651);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3652);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(3653);
				match(LOCK_SYMBOL);
				setState(3654);
				match(INSTANCE_SYMBOL);
				setState(3655);
				match(FOR_SYMBOL);
				setState(3656);
				match(BACKUP_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3657);
				match(UNLOCK_SYMBOL);
				setState(3662);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,416,_ctx) ) {
				case 1:
					{
					setState(3658);
					match(TABLES_SYMBOL);
					}
					break;
				case 2:
					{
					setState(3659);
					match(TABLE_SYMBOL);
					}
					break;
				case 3:
					{
					setState(3660);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(3661);
					match(INSTANCE_SYMBOL);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockItemContext extends ParserRuleContext {
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public LockOptionContext lockOption() {
			return getRuleContext(LockOptionContext.class,0);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public LockItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockItem; }
	}

	public final LockItemContext lockItem() throws RecognitionException {
		LockItemContext _localctx = new LockItemContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_lockItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3666);
			tableRef();
			setState(3668);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,418,_ctx) ) {
			case 1:
				{
				setState(3667);
				tableAlias();
				}
				break;
			}
			setState(3670);
			lockOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockOptionContext extends ParserRuleContext {
		public TerminalNode READ_SYMBOL() { return getToken(MySQLParser.READ_SYMBOL, 0); }
		public TerminalNode LOCAL_SYMBOL() { return getToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public TerminalNode WRITE_SYMBOL() { return getToken(MySQLParser.WRITE_SYMBOL, 0); }
		public TerminalNode LOW_PRIORITY_SYMBOL() { return getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0); }
		public LockOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockOption; }
	}

	public final LockOptionContext lockOption() throws RecognitionException {
		LockOptionContext _localctx = new LockOptionContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_lockOption);
		int _la;
		try {
			setState(3680);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READ_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3672);
				match(READ_SYMBOL);
				setState(3674);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL_SYMBOL) {
					{
					setState(3673);
					match(LOCAL_SYMBOL);
					}
				}

				}
				break;
			case LOW_PRIORITY_SYMBOL:
			case WRITE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3677);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOW_PRIORITY_SYMBOL) {
					{
					setState(3676);
					match(LOW_PRIORITY_SYMBOL);
					}
				}

				setState(3679);
				match(WRITE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaStatementContext extends ParserRuleContext {
		public TerminalNode XA_SYMBOL() { return getToken(MySQLParser.XA_SYMBOL, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode END_SYMBOL() { return getToken(MySQLParser.END_SYMBOL, 0); }
		public TerminalNode PREPARE_SYMBOL() { return getToken(MySQLParser.PREPARE_SYMBOL, 0); }
		public TerminalNode COMMIT_SYMBOL() { return getToken(MySQLParser.COMMIT_SYMBOL, 0); }
		public TerminalNode ROLLBACK_SYMBOL() { return getToken(MySQLParser.ROLLBACK_SYMBOL, 0); }
		public TerminalNode RECOVER_SYMBOL() { return getToken(MySQLParser.RECOVER_SYMBOL, 0); }
		public XaConvertContext xaConvert() {
			return getRuleContext(XaConvertContext.class,0);
		}
		public TerminalNode START_SYMBOL() { return getToken(MySQLParser.START_SYMBOL, 0); }
		public TerminalNode BEGIN_SYMBOL() { return getToken(MySQLParser.BEGIN_SYMBOL, 0); }
		public TerminalNode SUSPEND_SYMBOL() { return getToken(MySQLParser.SUSPEND_SYMBOL, 0); }
		public TerminalNode ONE_SYMBOL() { return getToken(MySQLParser.ONE_SYMBOL, 0); }
		public TerminalNode PHASE_SYMBOL() { return getToken(MySQLParser.PHASE_SYMBOL, 0); }
		public TerminalNode JOIN_SYMBOL() { return getToken(MySQLParser.JOIN_SYMBOL, 0); }
		public TerminalNode RESUME_SYMBOL() { return getToken(MySQLParser.RESUME_SYMBOL, 0); }
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode MIGRATE_SYMBOL() { return getToken(MySQLParser.MIGRATE_SYMBOL, 0); }
		public XaStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaStatement; }
	}

	public final XaStatementContext xaStatement() throws RecognitionException {
		XaStatementContext _localctx = new XaStatementContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_xaStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3682);
			match(XA_SYMBOL);
			setState(3709);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BEGIN_SYMBOL:
			case START_SYMBOL:
				{
				setState(3683);
				_la = _input.LA(1);
				if ( !(_la==BEGIN_SYMBOL || _la==START_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3684);
				xid();
				setState(3686);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RESUME_SYMBOL || _la==JOIN_SYMBOL) {
					{
					setState(3685);
					_la = _input.LA(1);
					if ( !(_la==RESUME_SYMBOL || _la==JOIN_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case END_SYMBOL:
				{
				setState(3688);
				match(END_SYMBOL);
				setState(3689);
				xid();
				setState(3695);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUSPEND_SYMBOL) {
					{
					setState(3690);
					match(SUSPEND_SYMBOL);
					setState(3693);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==FOR_SYMBOL) {
						{
						setState(3691);
						match(FOR_SYMBOL);
						setState(3692);
						match(MIGRATE_SYMBOL);
						}
					}

					}
				}

				}
				break;
			case PREPARE_SYMBOL:
				{
				setState(3697);
				match(PREPARE_SYMBOL);
				setState(3698);
				xid();
				}
				break;
			case COMMIT_SYMBOL:
				{
				setState(3699);
				match(COMMIT_SYMBOL);
				setState(3700);
				xid();
				setState(3703);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ONE_SYMBOL) {
					{
					setState(3701);
					match(ONE_SYMBOL);
					setState(3702);
					match(PHASE_SYMBOL);
					}
				}

				}
				break;
			case ROLLBACK_SYMBOL:
				{
				setState(3705);
				match(ROLLBACK_SYMBOL);
				setState(3706);
				xid();
				}
				break;
			case RECOVER_SYMBOL:
				{
				setState(3707);
				match(RECOVER_SYMBOL);
				setState(3708);
				xaConvert();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaConvertContext extends ParserRuleContext {
		public TerminalNode CONVERT_SYMBOL() { return getToken(MySQLParser.CONVERT_SYMBOL, 0); }
		public TerminalNode XID_SYMBOL() { return getToken(MySQLParser.XID_SYMBOL, 0); }
		public XaConvertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaConvert; }
	}

	public final XaConvertContext xaConvert() throws RecognitionException {
		XaConvertContext _localctx = new XaConvertContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_xaConvert);
		int _la;
		try {
			setState(3717);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,428,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3711);
				if (!(serverVersion >= 50704)) throw new FailedPredicateException(this, "serverVersion >= 50704");
				setState(3714);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONVERT_SYMBOL) {
					{
					setState(3712);
					match(CONVERT_SYMBOL);
					setState(3713);
					match(XID_SYMBOL);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XidContext extends ParserRuleContext {
		public List<TextStringContext> textString() {
			return getRuleContexts(TextStringContext.class);
		}
		public TextStringContext textString(int i) {
			return getRuleContext(TextStringContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public XidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xid; }
	}

	public final XidContext xid() throws RecognitionException {
		XidContext _localctx = new XidContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_xid);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3719);
			textString();
			setState(3726);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA_SYMBOL) {
				{
				setState(3720);
				match(COMMA_SYMBOL);
				setState(3721);
				textString();
				setState(3724);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(3722);
					match(COMMA_SYMBOL);
					setState(3723);
					ulong_number();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplicationStatementContext extends ParserRuleContext {
		public TerminalNode PURGE_SYMBOL() { return getToken(MySQLParser.PURGE_SYMBOL, 0); }
		public TerminalNode LOGS_SYMBOL() { return getToken(MySQLParser.LOGS_SYMBOL, 0); }
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public TerminalNode MASTER_SYMBOL() { return getToken(MySQLParser.MASTER_SYMBOL, 0); }
		public TerminalNode TO_SYMBOL() { return getToken(MySQLParser.TO_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode BEFORE_SYMBOL() { return getToken(MySQLParser.BEFORE_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ChangeMasterContext changeMaster() {
			return getRuleContext(ChangeMasterContext.class,0);
		}
		public TerminalNode RESET_SYMBOL() { return getToken(MySQLParser.RESET_SYMBOL, 0); }
		public List<ResetOptionContext> resetOption() {
			return getRuleContexts(ResetOptionContext.class);
		}
		public ResetOptionContext resetOption(int i) {
			return getRuleContext(ResetOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TerminalNode PERSIST_SYMBOL() { return getToken(MySQLParser.PERSIST_SYMBOL, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SlaveContext slave() {
			return getRuleContext(SlaveContext.class,0);
		}
		public ChangeReplicationContext changeReplication() {
			return getRuleContext(ChangeReplicationContext.class,0);
		}
		public ReplicationLoadContext replicationLoad() {
			return getRuleContext(ReplicationLoadContext.class,0);
		}
		public GroupReplicationContext groupReplication() {
			return getRuleContext(GroupReplicationContext.class,0);
		}
		public ReplicationStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replicationStatement; }
	}

	public final ReplicationStatementContext replicationStatement() throws RecognitionException {
		ReplicationStatementContext _localctx = new ReplicationStatementContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_replicationStatement);
		int _la;
		try {
			setState(3761);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,434,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3728);
				match(PURGE_SYMBOL);
				setState(3729);
				_la = _input.LA(1);
				if ( !(_la==MASTER_SYMBOL || _la==BINARY_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3730);
				match(LOGS_SYMBOL);
				setState(3735);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case TO_SYMBOL:
					{
					setState(3731);
					match(TO_SYMBOL);
					setState(3732);
					textLiteral();
					}
					break;
				case BEFORE_SYMBOL:
					{
					setState(3733);
					match(BEFORE_SYMBOL);
					setState(3734);
					expr(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3737);
				changeMaster();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3738);
				match(RESET_SYMBOL);
				setState(3739);
				resetOption();
				setState(3744);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(3740);
					match(COMMA_SYMBOL);
					setState(3741);
					resetOption();
					}
					}
					setState(3746);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3747);
				if (!(serverVersion > 80000)) throw new FailedPredicateException(this, "serverVersion > 80000");
				setState(3748);
				match(RESET_SYMBOL);
				setState(3749);
				match(PERSIST_SYMBOL);
				setState(3753);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF_SYMBOL) {
					{
					setState(3750);
					ifExists();
					setState(3751);
					identifier();
					}
				}

				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3755);
				slave();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3756);
				if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
				setState(3757);
				changeReplication();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3758);
				replicationLoad();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3759);
				if (!(serverVersion > 50706)) throw new FailedPredicateException(this, "serverVersion > 50706");
				setState(3760);
				groupReplication();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetOptionContext extends ParserRuleContext {
		public Token option;
		public TerminalNode MASTER_SYMBOL() { return getToken(MySQLParser.MASTER_SYMBOL, 0); }
		public MasterResetOptionsContext masterResetOptions() {
			return getRuleContext(MasterResetOptionsContext.class,0);
		}
		public TerminalNode CACHE_SYMBOL() { return getToken(MySQLParser.CACHE_SYMBOL, 0); }
		public TerminalNode QUERY_SYMBOL() { return getToken(MySQLParser.QUERY_SYMBOL, 0); }
		public TerminalNode SLAVE_SYMBOL() { return getToken(MySQLParser.SLAVE_SYMBOL, 0); }
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public ChannelContext channel() {
			return getRuleContext(ChannelContext.class,0);
		}
		public ResetOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetOption; }
	}

	public final ResetOptionContext resetOption() throws RecognitionException {
		ResetOptionContext _localctx = new ResetOptionContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_resetOption);
		try {
			setState(3777);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,438,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3763);
				((ResetOptionContext)_localctx).option = match(MASTER_SYMBOL);
				setState(3765);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,435,_ctx) ) {
				case 1:
					{
					setState(3764);
					masterResetOptions();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3767);
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				setState(3768);
				((ResetOptionContext)_localctx).option = match(QUERY_SYMBOL);
				setState(3769);
				match(CACHE_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3770);
				((ResetOptionContext)_localctx).option = match(SLAVE_SYMBOL);
				setState(3772);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,436,_ctx) ) {
				case 1:
					{
					setState(3771);
					match(ALL_SYMBOL);
					}
					break;
				}
				setState(3775);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,437,_ctx) ) {
				case 1:
					{
					setState(3774);
					channel();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MasterResetOptionsContext extends ParserRuleContext {
		public TerminalNode TO_SYMBOL() { return getToken(MySQLParser.TO_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public Real_ulonglong_numberContext real_ulonglong_number() {
			return getRuleContext(Real_ulonglong_numberContext.class,0);
		}
		public MasterResetOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_masterResetOptions; }
	}

	public final MasterResetOptionsContext masterResetOptions() throws RecognitionException {
		MasterResetOptionsContext _localctx = new MasterResetOptionsContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_masterResetOptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3779);
			if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
			setState(3780);
			match(TO_SYMBOL);
			setState(3785);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,439,_ctx) ) {
			case 1:
				{
				setState(3781);
				if (!(serverVersion < 80017)) throw new FailedPredicateException(this, "serverVersion < 80017");
				setState(3782);
				real_ulong_number();
				}
				break;
			case 2:
				{
				setState(3783);
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				setState(3784);
				real_ulonglong_number();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplicationLoadContext extends ParserRuleContext {
		public TerminalNode LOAD_SYMBOL() { return getToken(MySQLParser.LOAD_SYMBOL, 0); }
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode MASTER_SYMBOL() { return getToken(MySQLParser.MASTER_SYMBOL, 0); }
		public TerminalNode DATA_SYMBOL() { return getToken(MySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public ReplicationLoadContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replicationLoad; }
	}

	public final ReplicationLoadContext replicationLoad() throws RecognitionException {
		ReplicationLoadContext _localctx = new ReplicationLoadContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_replicationLoad);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3787);
			match(LOAD_SYMBOL);
			setState(3791);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATA_SYMBOL:
				{
				setState(3788);
				match(DATA_SYMBOL);
				}
				break;
			case TABLE_SYMBOL:
				{
				setState(3789);
				match(TABLE_SYMBOL);
				setState(3790);
				tableRef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3793);
			match(FROM_SYMBOL);
			setState(3794);
			match(MASTER_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChangeMasterContext extends ParserRuleContext {
		public TerminalNode CHANGE_SYMBOL() { return getToken(MySQLParser.CHANGE_SYMBOL, 0); }
		public TerminalNode MASTER_SYMBOL() { return getToken(MySQLParser.MASTER_SYMBOL, 0); }
		public TerminalNode TO_SYMBOL() { return getToken(MySQLParser.TO_SYMBOL, 0); }
		public ChangeMasterOptionsContext changeMasterOptions() {
			return getRuleContext(ChangeMasterOptionsContext.class,0);
		}
		public ChannelContext channel() {
			return getRuleContext(ChannelContext.class,0);
		}
		public ChangeMasterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeMaster; }
	}

	public final ChangeMasterContext changeMaster() throws RecognitionException {
		ChangeMasterContext _localctx = new ChangeMasterContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_changeMaster);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3796);
			match(CHANGE_SYMBOL);
			setState(3797);
			match(MASTER_SYMBOL);
			setState(3798);
			match(TO_SYMBOL);
			setState(3799);
			changeMasterOptions();
			setState(3801);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,441,_ctx) ) {
			case 1:
				{
				setState(3800);
				channel();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChangeMasterOptionsContext extends ParserRuleContext {
		public List<MasterOptionContext> masterOption() {
			return getRuleContexts(MasterOptionContext.class);
		}
		public MasterOptionContext masterOption(int i) {
			return getRuleContext(MasterOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ChangeMasterOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeMasterOptions; }
	}

	public final ChangeMasterOptionsContext changeMasterOptions() throws RecognitionException {
		ChangeMasterOptionsContext _localctx = new ChangeMasterOptionsContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_changeMasterOptions);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3803);
			masterOption();
			setState(3808);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,442,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3804);
					match(COMMA_SYMBOL);
					setState(3805);
					masterOption();
					}
					} 
				}
				setState(3810);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,442,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MasterOptionContext extends ParserRuleContext {
		public TerminalNode MASTER_HOST_SYMBOL() { return getToken(MySQLParser.MASTER_HOST_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TextStringNoLinebreakContext textStringNoLinebreak() {
			return getRuleContext(TextStringNoLinebreakContext.class,0);
		}
		public TerminalNode NETWORK_NAMESPACE_SYMBOL() { return getToken(MySQLParser.NETWORK_NAMESPACE_SYMBOL, 0); }
		public TerminalNode MASTER_BIND_SYMBOL() { return getToken(MySQLParser.MASTER_BIND_SYMBOL, 0); }
		public TerminalNode MASTER_USER_SYMBOL() { return getToken(MySQLParser.MASTER_USER_SYMBOL, 0); }
		public TerminalNode MASTER_PASSWORD_SYMBOL() { return getToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0); }
		public TerminalNode MASTER_PORT_SYMBOL() { return getToken(MySQLParser.MASTER_PORT_SYMBOL, 0); }
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public TerminalNode MASTER_CONNECT_RETRY_SYMBOL() { return getToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0); }
		public TerminalNode MASTER_RETRY_COUNT_SYMBOL() { return getToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0); }
		public TerminalNode MASTER_DELAY_SYMBOL() { return getToken(MySQLParser.MASTER_DELAY_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CA_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CAPATH_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0); }
		public TerminalNode MASTER_TLS_VERSION_SYMBOL() { return getToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CERT_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0); }
		public TerminalNode MASTER_TLS_CIPHERSUITES_SYMBOL() { return getToken(MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL, 0); }
		public MasterTlsCiphersuitesDefContext masterTlsCiphersuitesDef() {
			return getRuleContext(MasterTlsCiphersuitesDefContext.class,0);
		}
		public TerminalNode MASTER_SSL_CIPHER_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_KEY_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CRL_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode MASTER_SSL_CRLPATH_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0); }
		public TerminalNode MASTER_PUBLIC_KEY_PATH_SYMBOL() { return getToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0); }
		public TerminalNode GET_MASTER_PUBLIC_KEY_SYMBOL() { return getToken(MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL, 0); }
		public TerminalNode MASTER_HEARTBEAT_PERIOD_SYMBOL() { return getToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0); }
		public TerminalNode IGNORE_SERVER_IDS_SYMBOL() { return getToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0); }
		public ServerIdListContext serverIdList() {
			return getRuleContext(ServerIdListContext.class,0);
		}
		public TerminalNode MASTER_COMPRESSION_ALGORITHM_SYMBOL() { return getToken(MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL() { return getToken(MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0); }
		public TerminalNode MASTER_AUTO_POSITION_SYMBOL() { return getToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0); }
		public TerminalNode PRIVILEGE_CHECKS_USER_SYMBOL() { return getToken(MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL, 0); }
		public PrivilegeCheckDefContext privilegeCheckDef() {
			return getRuleContext(PrivilegeCheckDefContext.class,0);
		}
		public MasterFileDefContext masterFileDef() {
			return getRuleContext(MasterFileDefContext.class,0);
		}
		public MasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_masterOption; }
	}

	public final MasterOptionContext masterOption() throws RecognitionException {
		MasterOptionContext _localctx = new MasterOptionContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_masterOption);
		try {
			setState(3896);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MASTER_HOST_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3811);
				match(MASTER_HOST_SYMBOL);
				setState(3812);
				match(EQUAL_OPERATOR);
				setState(3813);
				textStringNoLinebreak();
				}
				break;
			case NETWORK_NAMESPACE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3814);
				match(NETWORK_NAMESPACE_SYMBOL);
				setState(3815);
				match(EQUAL_OPERATOR);
				setState(3816);
				textStringNoLinebreak();
				}
				break;
			case MASTER_BIND_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(3817);
				match(MASTER_BIND_SYMBOL);
				setState(3818);
				match(EQUAL_OPERATOR);
				setState(3819);
				textStringNoLinebreak();
				}
				break;
			case MASTER_USER_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(3820);
				match(MASTER_USER_SYMBOL);
				setState(3821);
				match(EQUAL_OPERATOR);
				setState(3822);
				textStringNoLinebreak();
				}
				break;
			case MASTER_PASSWORD_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(3823);
				match(MASTER_PASSWORD_SYMBOL);
				setState(3824);
				match(EQUAL_OPERATOR);
				setState(3825);
				textStringNoLinebreak();
				}
				break;
			case MASTER_PORT_SYMBOL:
				enterOuterAlt(_localctx, 6);
				{
				setState(3826);
				match(MASTER_PORT_SYMBOL);
				setState(3827);
				match(EQUAL_OPERATOR);
				setState(3828);
				ulong_number();
				}
				break;
			case MASTER_CONNECT_RETRY_SYMBOL:
				enterOuterAlt(_localctx, 7);
				{
				setState(3829);
				match(MASTER_CONNECT_RETRY_SYMBOL);
				setState(3830);
				match(EQUAL_OPERATOR);
				setState(3831);
				ulong_number();
				}
				break;
			case MASTER_RETRY_COUNT_SYMBOL:
				enterOuterAlt(_localctx, 8);
				{
				setState(3832);
				match(MASTER_RETRY_COUNT_SYMBOL);
				setState(3833);
				match(EQUAL_OPERATOR);
				setState(3834);
				ulong_number();
				}
				break;
			case MASTER_DELAY_SYMBOL:
				enterOuterAlt(_localctx, 9);
				{
				setState(3835);
				match(MASTER_DELAY_SYMBOL);
				setState(3836);
				match(EQUAL_OPERATOR);
				setState(3837);
				ulong_number();
				}
				break;
			case MASTER_SSL_SYMBOL:
				enterOuterAlt(_localctx, 10);
				{
				setState(3838);
				match(MASTER_SSL_SYMBOL);
				setState(3839);
				match(EQUAL_OPERATOR);
				setState(3840);
				ulong_number();
				}
				break;
			case MASTER_SSL_CA_SYMBOL:
				enterOuterAlt(_localctx, 11);
				{
				setState(3841);
				match(MASTER_SSL_CA_SYMBOL);
				setState(3842);
				match(EQUAL_OPERATOR);
				setState(3843);
				textStringNoLinebreak();
				}
				break;
			case MASTER_SSL_CAPATH_SYMBOL:
				enterOuterAlt(_localctx, 12);
				{
				setState(3844);
				match(MASTER_SSL_CAPATH_SYMBOL);
				setState(3845);
				match(EQUAL_OPERATOR);
				setState(3846);
				textStringNoLinebreak();
				}
				break;
			case MASTER_TLS_VERSION_SYMBOL:
				enterOuterAlt(_localctx, 13);
				{
				setState(3847);
				match(MASTER_TLS_VERSION_SYMBOL);
				setState(3848);
				match(EQUAL_OPERATOR);
				setState(3849);
				textStringNoLinebreak();
				}
				break;
			case MASTER_SSL_CERT_SYMBOL:
				enterOuterAlt(_localctx, 14);
				{
				setState(3850);
				match(MASTER_SSL_CERT_SYMBOL);
				setState(3851);
				match(EQUAL_OPERATOR);
				setState(3852);
				textStringNoLinebreak();
				}
				break;
			case MASTER_TLS_CIPHERSUITES_SYMBOL:
				enterOuterAlt(_localctx, 15);
				{
				setState(3853);
				match(MASTER_TLS_CIPHERSUITES_SYMBOL);
				setState(3854);
				match(EQUAL_OPERATOR);
				setState(3855);
				masterTlsCiphersuitesDef();
				}
				break;
			case MASTER_SSL_CIPHER_SYMBOL:
				enterOuterAlt(_localctx, 16);
				{
				setState(3856);
				match(MASTER_SSL_CIPHER_SYMBOL);
				setState(3857);
				match(EQUAL_OPERATOR);
				setState(3858);
				textStringNoLinebreak();
				}
				break;
			case MASTER_SSL_KEY_SYMBOL:
				enterOuterAlt(_localctx, 17);
				{
				setState(3859);
				match(MASTER_SSL_KEY_SYMBOL);
				setState(3860);
				match(EQUAL_OPERATOR);
				setState(3861);
				textStringNoLinebreak();
				}
				break;
			case MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL:
				enterOuterAlt(_localctx, 18);
				{
				setState(3862);
				match(MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL);
				setState(3863);
				match(EQUAL_OPERATOR);
				setState(3864);
				ulong_number();
				}
				break;
			case MASTER_SSL_CRL_SYMBOL:
				enterOuterAlt(_localctx, 19);
				{
				setState(3865);
				match(MASTER_SSL_CRL_SYMBOL);
				setState(3866);
				match(EQUAL_OPERATOR);
				setState(3867);
				textLiteral();
				}
				break;
			case MASTER_SSL_CRLPATH_SYMBOL:
				enterOuterAlt(_localctx, 20);
				{
				setState(3868);
				match(MASTER_SSL_CRLPATH_SYMBOL);
				setState(3869);
				match(EQUAL_OPERATOR);
				setState(3870);
				textStringNoLinebreak();
				}
				break;
			case MASTER_PUBLIC_KEY_PATH_SYMBOL:
				enterOuterAlt(_localctx, 21);
				{
				setState(3871);
				match(MASTER_PUBLIC_KEY_PATH_SYMBOL);
				setState(3872);
				match(EQUAL_OPERATOR);
				setState(3873);
				textStringNoLinebreak();
				}
				break;
			case GET_MASTER_PUBLIC_KEY_SYMBOL:
				enterOuterAlt(_localctx, 22);
				{
				setState(3874);
				match(GET_MASTER_PUBLIC_KEY_SYMBOL);
				setState(3875);
				match(EQUAL_OPERATOR);
				setState(3876);
				ulong_number();
				}
				break;
			case MASTER_HEARTBEAT_PERIOD_SYMBOL:
				enterOuterAlt(_localctx, 23);
				{
				setState(3877);
				match(MASTER_HEARTBEAT_PERIOD_SYMBOL);
				setState(3878);
				match(EQUAL_OPERATOR);
				setState(3879);
				ulong_number();
				}
				break;
			case IGNORE_SERVER_IDS_SYMBOL:
				enterOuterAlt(_localctx, 24);
				{
				setState(3880);
				match(IGNORE_SERVER_IDS_SYMBOL);
				setState(3881);
				match(EQUAL_OPERATOR);
				setState(3882);
				serverIdList();
				}
				break;
			case MASTER_COMPRESSION_ALGORITHM_SYMBOL:
				enterOuterAlt(_localctx, 25);
				{
				setState(3883);
				match(MASTER_COMPRESSION_ALGORITHM_SYMBOL);
				setState(3884);
				match(EQUAL_OPERATOR);
				setState(3885);
				textStringLiteral();
				}
				break;
			case MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL:
				enterOuterAlt(_localctx, 26);
				{
				setState(3886);
				match(MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL);
				setState(3887);
				match(EQUAL_OPERATOR);
				setState(3888);
				ulong_number();
				}
				break;
			case MASTER_AUTO_POSITION_SYMBOL:
				enterOuterAlt(_localctx, 27);
				{
				setState(3889);
				match(MASTER_AUTO_POSITION_SYMBOL);
				setState(3890);
				match(EQUAL_OPERATOR);
				setState(3891);
				ulong_number();
				}
				break;
			case PRIVILEGE_CHECKS_USER_SYMBOL:
				enterOuterAlt(_localctx, 28);
				{
				setState(3892);
				match(PRIVILEGE_CHECKS_USER_SYMBOL);
				setState(3893);
				match(EQUAL_OPERATOR);
				setState(3894);
				privilegeCheckDef();
				}
				break;
			case MASTER_LOG_FILE_SYMBOL:
			case MASTER_LOG_POS_SYMBOL:
			case RELAY_LOG_FILE_SYMBOL:
			case RELAY_LOG_POS_SYMBOL:
				enterOuterAlt(_localctx, 29);
				{
				setState(3895);
				masterFileDef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeCheckDefContext extends ParserRuleContext {
		public UserIdentifierOrTextContext userIdentifierOrText() {
			return getRuleContext(UserIdentifierOrTextContext.class,0);
		}
		public TerminalNode NULL_SYMBOL() { return getToken(MySQLParser.NULL_SYMBOL, 0); }
		public PrivilegeCheckDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegeCheckDef; }
	}

	public final PrivilegeCheckDefContext privilegeCheckDef() throws RecognitionException {
		PrivilegeCheckDefContext _localctx = new PrivilegeCheckDefContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_privilegeCheckDef);
		try {
			setState(3900);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,444,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3898);
				userIdentifierOrText();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3899);
				match(NULL_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MasterTlsCiphersuitesDefContext extends ParserRuleContext {
		public TextStringNoLinebreakContext textStringNoLinebreak() {
			return getRuleContext(TextStringNoLinebreakContext.class,0);
		}
		public TerminalNode NULL_SYMBOL() { return getToken(MySQLParser.NULL_SYMBOL, 0); }
		public MasterTlsCiphersuitesDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_masterTlsCiphersuitesDef; }
	}

	public final MasterTlsCiphersuitesDefContext masterTlsCiphersuitesDef() throws RecognitionException {
		MasterTlsCiphersuitesDefContext _localctx = new MasterTlsCiphersuitesDefContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_masterTlsCiphersuitesDef);
		try {
			setState(3904);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,445,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3902);
				textStringNoLinebreak();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3903);
				match(NULL_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MasterFileDefContext extends ParserRuleContext {
		public TerminalNode MASTER_LOG_FILE_SYMBOL() { return getToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TextStringNoLinebreakContext textStringNoLinebreak() {
			return getRuleContext(TextStringNoLinebreakContext.class,0);
		}
		public TerminalNode MASTER_LOG_POS_SYMBOL() { return getToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0); }
		public Ulonglong_numberContext ulonglong_number() {
			return getRuleContext(Ulonglong_numberContext.class,0);
		}
		public TerminalNode RELAY_LOG_FILE_SYMBOL() { return getToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0); }
		public TerminalNode RELAY_LOG_POS_SYMBOL() { return getToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0); }
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public MasterFileDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_masterFileDef; }
	}

	public final MasterFileDefContext masterFileDef() throws RecognitionException {
		MasterFileDefContext _localctx = new MasterFileDefContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_masterFileDef);
		try {
			setState(3918);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MASTER_LOG_FILE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3906);
				match(MASTER_LOG_FILE_SYMBOL);
				setState(3907);
				match(EQUAL_OPERATOR);
				setState(3908);
				textStringNoLinebreak();
				}
				break;
			case MASTER_LOG_POS_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3909);
				match(MASTER_LOG_POS_SYMBOL);
				setState(3910);
				match(EQUAL_OPERATOR);
				setState(3911);
				ulonglong_number();
				}
				break;
			case RELAY_LOG_FILE_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(3912);
				match(RELAY_LOG_FILE_SYMBOL);
				setState(3913);
				match(EQUAL_OPERATOR);
				setState(3914);
				textStringNoLinebreak();
				}
				break;
			case RELAY_LOG_POS_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(3915);
				match(RELAY_LOG_POS_SYMBOL);
				setState(3916);
				match(EQUAL_OPERATOR);
				setState(3917);
				ulong_number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ServerIdListContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<Ulong_numberContext> ulong_number() {
			return getRuleContexts(Ulong_numberContext.class);
		}
		public Ulong_numberContext ulong_number(int i) {
			return getRuleContext(Ulong_numberContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ServerIdListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serverIdList; }
	}

	public final ServerIdListContext serverIdList() throws RecognitionException {
		ServerIdListContext _localctx = new ServerIdListContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_serverIdList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3920);
			match(OPEN_PAR_SYMBOL);
			setState(3929);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (INT_NUMBER - 380)) | (1L << (LONG_NUMBER - 380)) | (1L << (ULONGLONG_NUMBER - 380)) | (1L << (HEX_NUMBER - 380)) | (1L << (DECIMAL_NUMBER - 380)) | (1L << (FLOAT_NUMBER - 380)))) != 0)) {
				{
				setState(3921);
				ulong_number();
				setState(3926);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(3922);
					match(COMMA_SYMBOL);
					setState(3923);
					ulong_number();
					}
					}
					setState(3928);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(3931);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChangeReplicationContext extends ParserRuleContext {
		public TerminalNode CHANGE_SYMBOL() { return getToken(MySQLParser.CHANGE_SYMBOL, 0); }
		public TerminalNode REPLICATION_SYMBOL() { return getToken(MySQLParser.REPLICATION_SYMBOL, 0); }
		public TerminalNode FILTER_SYMBOL() { return getToken(MySQLParser.FILTER_SYMBOL, 0); }
		public List<FilterDefinitionContext> filterDefinition() {
			return getRuleContexts(FilterDefinitionContext.class);
		}
		public FilterDefinitionContext filterDefinition(int i) {
			return getRuleContext(FilterDefinitionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ChannelContext channel() {
			return getRuleContext(ChannelContext.class,0);
		}
		public ChangeReplicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeReplication; }
	}

	public final ChangeReplicationContext changeReplication() throws RecognitionException {
		ChangeReplicationContext _localctx = new ChangeReplicationContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_changeReplication);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3933);
			match(CHANGE_SYMBOL);
			setState(3934);
			match(REPLICATION_SYMBOL);
			setState(3935);
			match(FILTER_SYMBOL);
			setState(3936);
			filterDefinition();
			setState(3941);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,449,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3937);
					match(COMMA_SYMBOL);
					setState(3938);
					filterDefinition();
					}
					} 
				}
				setState(3943);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,449,_ctx);
			}
			setState(3946);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,450,_ctx) ) {
			case 1:
				{
				setState(3944);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(3945);
				channel();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FilterDefinitionContext extends ParserRuleContext {
		public TerminalNode REPLICATE_DO_DB_SYMBOL() { return getToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public FilterDbListContext filterDbList() {
			return getRuleContext(FilterDbListContext.class,0);
		}
		public TerminalNode REPLICATE_IGNORE_DB_SYMBOL() { return getToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0); }
		public TerminalNode REPLICATE_DO_TABLE_SYMBOL() { return getToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0); }
		public FilterTableListContext filterTableList() {
			return getRuleContext(FilterTableListContext.class,0);
		}
		public TerminalNode REPLICATE_IGNORE_TABLE_SYMBOL() { return getToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_WILD_DO_TABLE_SYMBOL() { return getToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0); }
		public FilterStringListContext filterStringList() {
			return getRuleContext(FilterStringListContext.class,0);
		}
		public TerminalNode REPLICATE_WILD_IGNORE_TABLE_SYMBOL() { return getToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_REWRITE_DB_SYMBOL() { return getToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0); }
		public FilterDbPairListContext filterDbPairList() {
			return getRuleContext(FilterDbPairListContext.class,0);
		}
		public FilterDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filterDefinition; }
	}

	public final FilterDefinitionContext filterDefinition() throws RecognitionException {
		FilterDefinitionContext _localctx = new FilterDefinitionContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_filterDefinition);
		int _la;
		try {
			setState(3997);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REPLICATE_DO_DB_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3948);
				match(REPLICATE_DO_DB_SYMBOL);
				setState(3949);
				match(EQUAL_OPERATOR);
				setState(3950);
				match(OPEN_PAR_SYMBOL);
				setState(3952);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,451,_ctx) ) {
				case 1:
					{
					setState(3951);
					filterDbList();
					}
					break;
				}
				setState(3954);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_IGNORE_DB_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3955);
				match(REPLICATE_IGNORE_DB_SYMBOL);
				setState(3956);
				match(EQUAL_OPERATOR);
				setState(3957);
				match(OPEN_PAR_SYMBOL);
				setState(3959);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,452,_ctx) ) {
				case 1:
					{
					setState(3958);
					filterDbList();
					}
					break;
				}
				setState(3961);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_DO_TABLE_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(3962);
				match(REPLICATE_DO_TABLE_SYMBOL);
				setState(3963);
				match(EQUAL_OPERATOR);
				setState(3964);
				match(OPEN_PAR_SYMBOL);
				setState(3966);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,453,_ctx) ) {
				case 1:
					{
					setState(3965);
					filterTableList();
					}
					break;
				}
				setState(3968);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_IGNORE_TABLE_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(3969);
				match(REPLICATE_IGNORE_TABLE_SYMBOL);
				setState(3970);
				match(EQUAL_OPERATOR);
				setState(3971);
				match(OPEN_PAR_SYMBOL);
				setState(3973);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,454,_ctx) ) {
				case 1:
					{
					setState(3972);
					filterTableList();
					}
					break;
				}
				setState(3975);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_WILD_DO_TABLE_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(3976);
				match(REPLICATE_WILD_DO_TABLE_SYMBOL);
				setState(3977);
				match(EQUAL_OPERATOR);
				setState(3978);
				match(OPEN_PAR_SYMBOL);
				setState(3980);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,455,_ctx) ) {
				case 1:
					{
					setState(3979);
					filterStringList();
					}
					break;
				}
				setState(3982);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_WILD_IGNORE_TABLE_SYMBOL:
				enterOuterAlt(_localctx, 6);
				{
				setState(3983);
				match(REPLICATE_WILD_IGNORE_TABLE_SYMBOL);
				setState(3984);
				match(EQUAL_OPERATOR);
				setState(3985);
				match(OPEN_PAR_SYMBOL);
				setState(3987);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,456,_ctx) ) {
				case 1:
					{
					setState(3986);
					filterStringList();
					}
					break;
				}
				setState(3989);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_REWRITE_DB_SYMBOL:
				enterOuterAlt(_localctx, 7);
				{
				setState(3990);
				match(REPLICATE_REWRITE_DB_SYMBOL);
				setState(3991);
				match(EQUAL_OPERATOR);
				setState(3992);
				match(OPEN_PAR_SYMBOL);
				setState(3994);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAR_SYMBOL) {
					{
					setState(3993);
					filterDbPairList();
					}
				}

				setState(3996);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FilterDbListContext extends ParserRuleContext {
		public List<SchemaRefContext> schemaRef() {
			return getRuleContexts(SchemaRefContext.class);
		}
		public SchemaRefContext schemaRef(int i) {
			return getRuleContext(SchemaRefContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public FilterDbListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filterDbList; }
	}

	public final FilterDbListContext filterDbList() throws RecognitionException {
		FilterDbListContext _localctx = new FilterDbListContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_filterDbList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3999);
			schemaRef();
			setState(4004);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(4000);
				match(COMMA_SYMBOL);
				setState(4001);
				schemaRef();
				}
				}
				setState(4006);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FilterTableListContext extends ParserRuleContext {
		public List<FilterTableRefContext> filterTableRef() {
			return getRuleContexts(FilterTableRefContext.class);
		}
		public FilterTableRefContext filterTableRef(int i) {
			return getRuleContext(FilterTableRefContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public FilterTableListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filterTableList; }
	}

	public final FilterTableListContext filterTableList() throws RecognitionException {
		FilterTableListContext _localctx = new FilterTableListContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_filterTableList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4007);
			filterTableRef();
			setState(4012);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(4008);
				match(COMMA_SYMBOL);
				setState(4009);
				filterTableRef();
				}
				}
				setState(4014);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FilterStringListContext extends ParserRuleContext {
		public List<FilterWildDbTableStringContext> filterWildDbTableString() {
			return getRuleContexts(FilterWildDbTableStringContext.class);
		}
		public FilterWildDbTableStringContext filterWildDbTableString(int i) {
			return getRuleContext(FilterWildDbTableStringContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public FilterStringListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filterStringList; }
	}

	public final FilterStringListContext filterStringList() throws RecognitionException {
		FilterStringListContext _localctx = new FilterStringListContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_filterStringList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4015);
			filterWildDbTableString();
			setState(4020);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(4016);
				match(COMMA_SYMBOL);
				setState(4017);
				filterWildDbTableString();
				}
				}
				setState(4022);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FilterWildDbTableStringContext extends ParserRuleContext {
		public TextStringNoLinebreakContext textStringNoLinebreak() {
			return getRuleContext(TextStringNoLinebreakContext.class,0);
		}
		public FilterWildDbTableStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filterWildDbTableString; }
	}

	public final FilterWildDbTableStringContext filterWildDbTableString() throws RecognitionException {
		FilterWildDbTableStringContext _localctx = new FilterWildDbTableStringContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_filterWildDbTableString);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4023);
			textStringNoLinebreak();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FilterDbPairListContext extends ParserRuleContext {
		public List<SchemaIdentifierPairContext> schemaIdentifierPair() {
			return getRuleContexts(SchemaIdentifierPairContext.class);
		}
		public SchemaIdentifierPairContext schemaIdentifierPair(int i) {
			return getRuleContext(SchemaIdentifierPairContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public FilterDbPairListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filterDbPairList; }
	}

	public final FilterDbPairListContext filterDbPairList() throws RecognitionException {
		FilterDbPairListContext _localctx = new FilterDbPairListContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_filterDbPairList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4025);
			schemaIdentifierPair();
			setState(4030);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(4026);
				match(COMMA_SYMBOL);
				setState(4027);
				schemaIdentifierPair();
				}
				}
				setState(4032);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SlaveContext extends ParserRuleContext {
		public TerminalNode START_SYMBOL() { return getToken(MySQLParser.START_SYMBOL, 0); }
		public TerminalNode SLAVE_SYMBOL() { return getToken(MySQLParser.SLAVE_SYMBOL, 0); }
		public SlaveConnectionOptionsContext slaveConnectionOptions() {
			return getRuleContext(SlaveConnectionOptionsContext.class,0);
		}
		public SlaveThreadOptionsContext slaveThreadOptions() {
			return getRuleContext(SlaveThreadOptionsContext.class,0);
		}
		public TerminalNode UNTIL_SYMBOL() { return getToken(MySQLParser.UNTIL_SYMBOL, 0); }
		public SlaveUntilOptionsContext slaveUntilOptions() {
			return getRuleContext(SlaveUntilOptionsContext.class,0);
		}
		public ChannelContext channel() {
			return getRuleContext(ChannelContext.class,0);
		}
		public TerminalNode STOP_SYMBOL() { return getToken(MySQLParser.STOP_SYMBOL, 0); }
		public SlaveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_slave; }
	}

	public final SlaveContext slave() throws RecognitionException {
		SlaveContext _localctx = new SlaveContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_slave);
		try {
			setState(4054);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case START_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4033);
				match(START_SYMBOL);
				setState(4034);
				match(SLAVE_SYMBOL);
				setState(4036);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,463,_ctx) ) {
				case 1:
					{
					setState(4035);
					slaveThreadOptions();
					}
					break;
				}
				setState(4040);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,464,_ctx) ) {
				case 1:
					{
					setState(4038);
					match(UNTIL_SYMBOL);
					setState(4039);
					slaveUntilOptions();
					}
					break;
				}
				setState(4042);
				slaveConnectionOptions();
				setState(4044);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,465,_ctx) ) {
				case 1:
					{
					setState(4043);
					channel();
					}
					break;
				}
				}
				break;
			case STOP_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4046);
				match(STOP_SYMBOL);
				setState(4047);
				match(SLAVE_SYMBOL);
				setState(4049);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,466,_ctx) ) {
				case 1:
					{
					setState(4048);
					slaveThreadOptions();
					}
					break;
				}
				setState(4052);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,467,_ctx) ) {
				case 1:
					{
					setState(4051);
					channel();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SlaveUntilOptionsContext extends ParserRuleContext {
		public List<MasterFileDefContext> masterFileDef() {
			return getRuleContexts(MasterFileDefContext.class);
		}
		public MasterFileDefContext masterFileDef(int i) {
			return getRuleContext(MasterFileDefContext.class,i);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public TerminalNode SQL_AFTER_MTS_GAPS_SYMBOL() { return getToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0); }
		public TerminalNode SQL_BEFORE_GTIDS_SYMBOL() { return getToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0); }
		public TerminalNode SQL_AFTER_GTIDS_SYMBOL() { return getToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public SlaveUntilOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_slaveUntilOptions; }
	}

	public final SlaveUntilOptionsContext slaveUntilOptions() throws RecognitionException {
		SlaveUntilOptionsContext _localctx = new SlaveUntilOptionsContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_slaveUntilOptions);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4063);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,469,_ctx) ) {
			case 1:
				{
				setState(4056);
				masterFileDef();
				}
				break;
			case 2:
				{
				setState(4057);
				if (!(serverVersion >= 50606)) throw new FailedPredicateException(this, "serverVersion >= 50606");
				setState(4058);
				_la = _input.LA(1);
				if ( !(_la==SQL_AFTER_GTIDS_SYMBOL || _la==SQL_BEFORE_GTIDS_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4059);
				match(EQUAL_OPERATOR);
				setState(4060);
				textString();
				}
				break;
			case 3:
				{
				setState(4061);
				if (!(serverVersion >= 50606)) throw new FailedPredicateException(this, "serverVersion >= 50606");
				setState(4062);
				match(SQL_AFTER_MTS_GAPS_SYMBOL);
				}
				break;
			}
			setState(4069);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,470,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4065);
					match(COMMA_SYMBOL);
					setState(4066);
					masterFileDef();
					}
					} 
				}
				setState(4071);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,470,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SlaveConnectionOptionsContext extends ParserRuleContext {
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public List<TerminalNode> EQUAL_OPERATOR() { return getTokens(MySQLParser.EQUAL_OPERATOR); }
		public TerminalNode EQUAL_OPERATOR(int i) {
			return getToken(MySQLParser.EQUAL_OPERATOR, i);
		}
		public List<TextStringContext> textString() {
			return getRuleContexts(TextStringContext.class);
		}
		public TextStringContext textString(int i) {
			return getRuleContext(TextStringContext.class,i);
		}
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public TerminalNode DEFAULT_AUTH_SYMBOL() { return getToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0); }
		public TerminalNode PLUGIN_DIR_SYMBOL() { return getToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0); }
		public SlaveConnectionOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_slaveConnectionOptions; }
	}

	public final SlaveConnectionOptionsContext slaveConnectionOptions() throws RecognitionException {
		SlaveConnectionOptionsContext _localctx = new SlaveConnectionOptionsContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_slaveConnectionOptions);
		try {
			setState(4094);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,475,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4072);
				if (!(serverVersion >= 50604)) throw new FailedPredicateException(this, "serverVersion >= 50604");
				setState(4076);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,471,_ctx) ) {
				case 1:
					{
					setState(4073);
					match(USER_SYMBOL);
					setState(4074);
					match(EQUAL_OPERATOR);
					setState(4075);
					textString();
					}
					break;
				}
				setState(4081);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,472,_ctx) ) {
				case 1:
					{
					setState(4078);
					match(PASSWORD_SYMBOL);
					setState(4079);
					match(EQUAL_OPERATOR);
					setState(4080);
					textString();
					}
					break;
				}
				setState(4086);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,473,_ctx) ) {
				case 1:
					{
					setState(4083);
					match(DEFAULT_AUTH_SYMBOL);
					setState(4084);
					match(EQUAL_OPERATOR);
					setState(4085);
					textString();
					}
					break;
				}
				setState(4091);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,474,_ctx) ) {
				case 1:
					{
					setState(4088);
					match(PLUGIN_DIR_SYMBOL);
					setState(4089);
					match(EQUAL_OPERATOR);
					setState(4090);
					textString();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SlaveThreadOptionsContext extends ParserRuleContext {
		public List<SlaveThreadOptionContext> slaveThreadOption() {
			return getRuleContexts(SlaveThreadOptionContext.class);
		}
		public SlaveThreadOptionContext slaveThreadOption(int i) {
			return getRuleContext(SlaveThreadOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public SlaveThreadOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_slaveThreadOptions; }
	}

	public final SlaveThreadOptionsContext slaveThreadOptions() throws RecognitionException {
		SlaveThreadOptionsContext _localctx = new SlaveThreadOptionsContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_slaveThreadOptions);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4096);
			slaveThreadOption();
			setState(4101);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,476,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4097);
					match(COMMA_SYMBOL);
					setState(4098);
					slaveThreadOption();
					}
					} 
				}
				setState(4103);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,476,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SlaveThreadOptionContext extends ParserRuleContext {
		public TerminalNode RELAY_THREAD_SYMBOL() { return getToken(MySQLParser.RELAY_THREAD_SYMBOL, 0); }
		public TerminalNode SQL_THREAD_SYMBOL() { return getToken(MySQLParser.SQL_THREAD_SYMBOL, 0); }
		public SlaveThreadOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_slaveThreadOption; }
	}

	public final SlaveThreadOptionContext slaveThreadOption() throws RecognitionException {
		SlaveThreadOptionContext _localctx = new SlaveThreadOptionContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_slaveThreadOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4104);
			_la = _input.LA(1);
			if ( !(_la==RELAY_THREAD_SYMBOL || _la==SQL_THREAD_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupReplicationContext extends ParserRuleContext {
		public TerminalNode GROUP_REPLICATION_SYMBOL() { return getToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0); }
		public TerminalNode START_SYMBOL() { return getToken(MySQLParser.START_SYMBOL, 0); }
		public TerminalNode STOP_SYMBOL() { return getToken(MySQLParser.STOP_SYMBOL, 0); }
		public GroupReplicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupReplication; }
	}

	public final GroupReplicationContext groupReplication() throws RecognitionException {
		GroupReplicationContext _localctx = new GroupReplicationContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_groupReplication);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4106);
			_la = _input.LA(1);
			if ( !(_la==START_SYMBOL || _la==STOP_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4107);
			match(GROUP_REPLICATION_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PreparedStatementContext extends ParserRuleContext {
		public Token type;
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode PREPARE_SYMBOL() { return getToken(MySQLParser.PREPARE_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public UserVariableContext userVariable() {
			return getRuleContext(UserVariableContext.class,0);
		}
		public ExecuteStatementContext executeStatement() {
			return getRuleContext(ExecuteStatementContext.class,0);
		}
		public TerminalNode DEALLOCATE_SYMBOL() { return getToken(MySQLParser.DEALLOCATE_SYMBOL, 0); }
		public TerminalNode DROP_SYMBOL() { return getToken(MySQLParser.DROP_SYMBOL, 0); }
		public PreparedStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preparedStatement; }
	}

	public final PreparedStatementContext preparedStatement() throws RecognitionException {
		PreparedStatementContext _localctx = new PreparedStatementContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_preparedStatement);
		int _la;
		try {
			setState(4120);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PREPARE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4109);
				((PreparedStatementContext)_localctx).type = match(PREPARE_SYMBOL);
				setState(4110);
				identifier();
				setState(4111);
				match(FROM_SYMBOL);
				setState(4114);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,477,_ctx) ) {
				case 1:
					{
					setState(4112);
					textLiteral();
					}
					break;
				case 2:
					{
					setState(4113);
					userVariable();
					}
					break;
				}
				}
				break;
			case EXECUTE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4116);
				executeStatement();
				}
				break;
			case DEALLOCATE_SYMBOL:
			case DROP_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(4117);
				((PreparedStatementContext)_localctx).type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEALLOCATE_SYMBOL || _la==DROP_SYMBOL) ) {
					((PreparedStatementContext)_localctx).type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4118);
				match(PREPARE_SYMBOL);
				setState(4119);
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExecuteStatementContext extends ParserRuleContext {
		public TerminalNode EXECUTE_SYMBOL() { return getToken(MySQLParser.EXECUTE_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode USING_SYMBOL() { return getToken(MySQLParser.USING_SYMBOL, 0); }
		public ExecuteVarListContext executeVarList() {
			return getRuleContext(ExecuteVarListContext.class,0);
		}
		public ExecuteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executeStatement; }
	}

	public final ExecuteStatementContext executeStatement() throws RecognitionException {
		ExecuteStatementContext _localctx = new ExecuteStatementContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_executeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4122);
			match(EXECUTE_SYMBOL);
			setState(4123);
			identifier();
			setState(4126);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING_SYMBOL) {
				{
				setState(4124);
				match(USING_SYMBOL);
				setState(4125);
				executeVarList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExecuteVarListContext extends ParserRuleContext {
		public List<UserVariableContext> userVariable() {
			return getRuleContexts(UserVariableContext.class);
		}
		public UserVariableContext userVariable(int i) {
			return getRuleContext(UserVariableContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ExecuteVarListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executeVarList; }
	}

	public final ExecuteVarListContext executeVarList() throws RecognitionException {
		ExecuteVarListContext _localctx = new ExecuteVarListContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_executeVarList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4128);
			userVariable();
			setState(4133);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(4129);
				match(COMMA_SYMBOL);
				setState(4130);
				userVariable();
				}
				}
				setState(4135);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CloneStatementContext extends ParserRuleContext {
		public TerminalNode CLONE_SYMBOL() { return getToken(MySQLParser.CLONE_SYMBOL, 0); }
		public TerminalNode LOCAL_SYMBOL() { return getToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public TerminalNode DATA_SYMBOL() { return getToken(MySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode DIRECTORY_SYMBOL() { return getToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode REMOTE_SYMBOL() { return getToken(MySQLParser.REMOTE_SYMBOL, 0); }
		public TerminalNode INSTANCE_SYMBOL() { return getToken(MySQLParser.INSTANCE_SYMBOL, 0); }
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public TerminalNode COLON_SYMBOL() { return getToken(MySQLParser.COLON_SYMBOL, 0); }
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public TerminalNode IDENTIFIED_SYMBOL() { return getToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode REPLICATION_SYMBOL() { return getToken(MySQLParser.REPLICATION_SYMBOL, 0); }
		public DataDirSSLContext dataDirSSL() {
			return getRuleContext(DataDirSSLContext.class,0);
		}
		public CloneStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cloneStatement; }
	}

	public final CloneStatementContext cloneStatement() throws RecognitionException {
		CloneStatementContext _localctx = new CloneStatementContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_cloneStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4136);
			match(CLONE_SYMBOL);
			setState(4161);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,484,_ctx) ) {
			case 1:
				{
				setState(4137);
				match(LOCAL_SYMBOL);
				setState(4138);
				match(DATA_SYMBOL);
				setState(4139);
				match(DIRECTORY_SYMBOL);
				setState(4141);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,481,_ctx) ) {
				case 1:
					{
					setState(4140);
					equal();
					}
					break;
				}
				setState(4143);
				textStringLiteral();
				}
				break;
			case 2:
				{
				setState(4144);
				match(REMOTE_SYMBOL);
				setState(4147);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					setState(4145);
					match(FOR_SYMBOL);
					setState(4146);
					match(REPLICATION_SYMBOL);
					}
				}

				}
				break;
			case 3:
				{
				setState(4149);
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				setState(4150);
				match(INSTANCE_SYMBOL);
				setState(4151);
				match(FROM_SYMBOL);
				setState(4152);
				user();
				setState(4153);
				match(COLON_SYMBOL);
				setState(4154);
				ulong_number();
				setState(4155);
				match(IDENTIFIED_SYMBOL);
				setState(4156);
				match(BY_SYMBOL);
				setState(4157);
				textStringLiteral();
				setState(4159);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DATA_SYMBOL || _la==REQUIRE_SYMBOL) {
					{
					setState(4158);
					dataDirSSL();
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataDirSSLContext extends ParserRuleContext {
		public SslContext ssl() {
			return getRuleContext(SslContext.class,0);
		}
		public TerminalNode DATA_SYMBOL() { return getToken(MySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode DIRECTORY_SYMBOL() { return getToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public DataDirSSLContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataDirSSL; }
	}

	public final DataDirSSLContext dataDirSSL() throws RecognitionException {
		DataDirSSLContext _localctx = new DataDirSSLContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_dataDirSSL);
		int _la;
		try {
			setState(4173);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REQUIRE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4163);
				ssl();
				}
				break;
			case DATA_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4164);
				match(DATA_SYMBOL);
				setState(4165);
				match(DIRECTORY_SYMBOL);
				setState(4167);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,485,_ctx) ) {
				case 1:
					{
					setState(4166);
					equal();
					}
					break;
				}
				setState(4169);
				textStringLiteral();
				setState(4171);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REQUIRE_SYMBOL) {
					{
					setState(4170);
					ssl();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SslContext extends ParserRuleContext {
		public TerminalNode REQUIRE_SYMBOL() { return getToken(MySQLParser.REQUIRE_SYMBOL, 0); }
		public TerminalNode SSL_SYMBOL() { return getToken(MySQLParser.SSL_SYMBOL, 0); }
		public TerminalNode NO_SYMBOL() { return getToken(MySQLParser.NO_SYMBOL, 0); }
		public SslContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ssl; }
	}

	public final SslContext ssl() throws RecognitionException {
		SslContext _localctx = new SslContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_ssl);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4175);
			match(REQUIRE_SYMBOL);
			setState(4177);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_SYMBOL) {
				{
				setState(4176);
				match(NO_SYMBOL);
				}
			}

			setState(4179);
			match(SSL_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AccountManagementStatementContext extends ParserRuleContext {
		public AlterUserContext alterUser() {
			return getRuleContext(AlterUserContext.class,0);
		}
		public CreateUserContext createUser() {
			return getRuleContext(CreateUserContext.class,0);
		}
		public DropUserContext dropUser() {
			return getRuleContext(DropUserContext.class,0);
		}
		public GrantContext grant() {
			return getRuleContext(GrantContext.class,0);
		}
		public RenameUserContext renameUser() {
			return getRuleContext(RenameUserContext.class,0);
		}
		public RevokeContext revoke() {
			return getRuleContext(RevokeContext.class,0);
		}
		public SetRoleContext setRole() {
			return getRuleContext(SetRoleContext.class,0);
		}
		public AccountManagementStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accountManagementStatement; }
	}

	public final AccountManagementStatementContext accountManagementStatement() throws RecognitionException {
		AccountManagementStatementContext _localctx = new AccountManagementStatementContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_accountManagementStatement);
		try {
			setState(4190);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,489,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4181);
				if (!(serverVersion >= 50606)) throw new FailedPredicateException(this, "serverVersion >= 50606");
				setState(4182);
				alterUser();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4183);
				createUser();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4184);
				dropUser();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4185);
				grant();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4186);
				renameUser();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4187);
				revoke();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4188);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(4189);
				setRole();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUserContext extends ParserRuleContext {
		public TerminalNode ALTER_SYMBOL() { return getToken(MySQLParser.ALTER_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public AlterUserTailContext alterUserTail() {
			return getRuleContext(AlterUserTailContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public AlterUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUser; }
	}

	public final AlterUserContext alterUser() throws RecognitionException {
		AlterUserContext _localctx = new AlterUserContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_alterUser);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4192);
			match(ALTER_SYMBOL);
			setState(4193);
			match(USER_SYMBOL);
			setState(4196);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,490,_ctx) ) {
			case 1:
				{
				setState(4194);
				if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
				setState(4195);
				ifExists();
				}
				break;
			}
			setState(4198);
			alterUserTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUserTailContext extends ParserRuleContext {
		public CreateUserTailContext createUserTail() {
			return getRuleContext(CreateUserTailContext.class,0);
		}
		public CreateUserListContext createUserList() {
			return getRuleContext(CreateUserListContext.class,0);
		}
		public AlterUserListContext alterUserList() {
			return getRuleContext(AlterUserListContext.class,0);
		}
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public TerminalNode IDENTIFIED_SYMBOL() { return getToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public ReplacePasswordContext replacePassword() {
			return getRuleContext(ReplacePasswordContext.class,0);
		}
		public RetainCurrentPasswordContext retainCurrentPassword() {
			return getRuleContext(RetainCurrentPasswordContext.class,0);
		}
		public DiscardOldPasswordContext discardOldPassword() {
			return getRuleContext(DiscardOldPasswordContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode ROLE_SYMBOL() { return getToken(MySQLParser.ROLE_SYMBOL, 0); }
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode NONE_SYMBOL() { return getToken(MySQLParser.NONE_SYMBOL, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public TerminalNode RANDOM_SYMBOL() { return getToken(MySQLParser.RANDOM_SYMBOL, 0); }
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public AlterUserTailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUserTail; }
	}

	public final AlterUserTailContext alterUserTail() throws RecognitionException {
		AlterUserTailContext _localctx = new AlterUserTailContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_alterUserTail);
		int _la;
		try {
			setState(4247);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,497,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4204);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,491,_ctx) ) {
				case 1:
					{
					setState(4200);
					if (!(serverVersion < 80014)) throw new FailedPredicateException(this, "serverVersion < 80014");
					setState(4201);
					createUserList();
					}
					break;
				case 2:
					{
					setState(4202);
					if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
					setState(4203);
					alterUserList();
					}
					break;
				}
				setState(4206);
				createUserTail();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4208);
				if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
				setState(4209);
				user();
				setState(4210);
				match(IDENTIFIED_SYMBOL);
				setState(4211);
				match(BY_SYMBOL);
				setState(4212);
				textString();
				setState(4215);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,492,_ctx) ) {
				case 1:
					{
					setState(4213);
					if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
					setState(4214);
					replacePassword();
					}
					break;
				}
				setState(4219);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,493,_ctx) ) {
				case 1:
					{
					setState(4217);
					if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
					setState(4218);
					retainCurrentPassword();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4221);
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				setState(4222);
				user();
				setState(4223);
				discardOldPassword();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4225);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(4226);
				user();
				setState(4227);
				match(DEFAULT_SYMBOL);
				setState(4228);
				match(ROLE_SYMBOL);
				setState(4232);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,494,_ctx) ) {
				case 1:
					{
					setState(4229);
					match(ALL_SYMBOL);
					}
					break;
				case 2:
					{
					setState(4230);
					match(NONE_SYMBOL);
					}
					break;
				case 3:
					{
					setState(4231);
					roleList();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4234);
				if (!(serverVersion >= 80018)) throw new FailedPredicateException(this, "serverVersion >= 80018");
				setState(4235);
				user();
				setState(4236);
				match(IDENTIFIED_SYMBOL);
				setState(4239);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH_SYMBOL) {
					{
					setState(4237);
					match(WITH_SYMBOL);
					setState(4238);
					textOrIdentifier();
					}
				}

				setState(4241);
				match(BY_SYMBOL);
				setState(4242);
				match(RANDOM_SYMBOL);
				setState(4243);
				match(PASSWORD_SYMBOL);
				setState(4245);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RETAIN_SYMBOL) {
					{
					setState(4244);
					retainCurrentPassword();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserFunctionContext extends ParserRuleContext {
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public ParenthesesContext parentheses() {
			return getRuleContext(ParenthesesContext.class,0);
		}
		public UserFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userFunction; }
	}

	public final UserFunctionContext userFunction() throws RecognitionException {
		UserFunctionContext _localctx = new UserFunctionContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_userFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4249);
			match(USER_SYMBOL);
			setState(4250);
			parentheses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUserContext extends ParserRuleContext {
		public TerminalNode CREATE_SYMBOL() { return getToken(MySQLParser.CREATE_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public CreateUserListContext createUserList() {
			return getRuleContext(CreateUserListContext.class,0);
		}
		public DefaultRoleClauseContext defaultRoleClause() {
			return getRuleContext(DefaultRoleClauseContext.class,0);
		}
		public CreateUserTailContext createUserTail() {
			return getRuleContext(CreateUserTailContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CreateUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUser; }
	}

	public final CreateUserContext createUser() throws RecognitionException {
		CreateUserContext _localctx = new CreateUserContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_createUser);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4252);
			match(CREATE_SYMBOL);
			setState(4253);
			match(USER_SYMBOL);
			setState(4257);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,498,_ctx) ) {
			case 1:
				{
				setState(4254);
				if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
				setState(4255);
				ifNotExists();
				}
				break;
			case 2:
				{
				}
				break;
			}
			setState(4259);
			createUserList();
			setState(4260);
			defaultRoleClause();
			setState(4261);
			createUserTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUserTailContext extends ParserRuleContext {
		public RequireClauseContext requireClause() {
			return getRuleContext(RequireClauseContext.class,0);
		}
		public ConnectOptionsContext connectOptions() {
			return getRuleContext(ConnectOptionsContext.class,0);
		}
		public List<AccountLockPasswordExpireOptionsContext> accountLockPasswordExpireOptions() {
			return getRuleContexts(AccountLockPasswordExpireOptionsContext.class);
		}
		public AccountLockPasswordExpireOptionsContext accountLockPasswordExpireOptions(int i) {
			return getRuleContext(AccountLockPasswordExpireOptionsContext.class,i);
		}
		public CreateUserTailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUserTail; }
	}

	public final CreateUserTailContext createUserTail() throws RecognitionException {
		CreateUserTailContext _localctx = new CreateUserTailContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_createUserTail);
		int _la;
		try {
			setState(4277);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,502,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4263);
				if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
				setState(4265);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REQUIRE_SYMBOL) {
					{
					setState(4264);
					requireClause();
					}
				}

				setState(4268);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH_SYMBOL) {
					{
					setState(4267);
					connectOptions();
					}
				}

				setState(4273);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ACCOUNT_SYMBOL || _la==PASSWORD_SYMBOL) {
					{
					{
					setState(4270);
					accountLockPasswordExpireOptions();
					}
					}
					setState(4275);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultRoleClauseContext extends ParserRuleContext {
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode ROLE_SYMBOL() { return getToken(MySQLParser.ROLE_SYMBOL, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public DefaultRoleClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultRoleClause; }
	}

	public final DefaultRoleClauseContext defaultRoleClause() throws RecognitionException {
		DefaultRoleClauseContext _localctx = new DefaultRoleClauseContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_defaultRoleClause);
		try {
			setState(4286);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,504,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4279);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(4283);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,503,_ctx) ) {
				case 1:
					{
					setState(4280);
					match(DEFAULT_SYMBOL);
					setState(4281);
					match(ROLE_SYMBOL);
					setState(4282);
					roleList();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RequireClauseContext extends ParserRuleContext {
		public Token option;
		public TerminalNode REQUIRE_SYMBOL() { return getToken(MySQLParser.REQUIRE_SYMBOL, 0); }
		public RequireListContext requireList() {
			return getRuleContext(RequireListContext.class,0);
		}
		public TerminalNode SSL_SYMBOL() { return getToken(MySQLParser.SSL_SYMBOL, 0); }
		public TerminalNode X509_SYMBOL() { return getToken(MySQLParser.X509_SYMBOL, 0); }
		public TerminalNode NONE_SYMBOL() { return getToken(MySQLParser.NONE_SYMBOL, 0); }
		public RequireClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_requireClause; }
	}

	public final RequireClauseContext requireClause() throws RecognitionException {
		RequireClauseContext _localctx = new RequireClauseContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_requireClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4288);
			match(REQUIRE_SYMBOL);
			setState(4291);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CIPHER_SYMBOL:
			case ISSUER_SYMBOL:
			case SUBJECT_SYMBOL:
				{
				setState(4289);
				requireList();
				}
				break;
			case NONE_SYMBOL:
			case X509_SYMBOL:
			case SSL_SYMBOL:
				{
				setState(4290);
				((RequireClauseContext)_localctx).option = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NONE_SYMBOL || _la==X509_SYMBOL || _la==SSL_SYMBOL) ) {
					((RequireClauseContext)_localctx).option = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConnectOptionsContext extends ParserRuleContext {
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public List<TerminalNode> MAX_QUERIES_PER_HOUR_SYMBOL() { return getTokens(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL); }
		public TerminalNode MAX_QUERIES_PER_HOUR_SYMBOL(int i) {
			return getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, i);
		}
		public List<Ulong_numberContext> ulong_number() {
			return getRuleContexts(Ulong_numberContext.class);
		}
		public Ulong_numberContext ulong_number(int i) {
			return getRuleContext(Ulong_numberContext.class,i);
		}
		public List<TerminalNode> MAX_UPDATES_PER_HOUR_SYMBOL() { return getTokens(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL); }
		public TerminalNode MAX_UPDATES_PER_HOUR_SYMBOL(int i) {
			return getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, i);
		}
		public List<TerminalNode> MAX_CONNECTIONS_PER_HOUR_SYMBOL() { return getTokens(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR_SYMBOL(int i) {
			return getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, i);
		}
		public List<TerminalNode> MAX_USER_CONNECTIONS_SYMBOL() { return getTokens(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL); }
		public TerminalNode MAX_USER_CONNECTIONS_SYMBOL(int i) {
			return getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, i);
		}
		public ConnectOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_connectOptions; }
	}

	public final ConnectOptionsContext connectOptions() throws RecognitionException {
		ConnectOptionsContext _localctx = new ConnectOptionsContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_connectOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4293);
			match(WITH_SYMBOL);
			setState(4302); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(4302);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case MAX_QUERIES_PER_HOUR_SYMBOL:
					{
					setState(4294);
					match(MAX_QUERIES_PER_HOUR_SYMBOL);
					setState(4295);
					ulong_number();
					}
					break;
				case MAX_UPDATES_PER_HOUR_SYMBOL:
					{
					setState(4296);
					match(MAX_UPDATES_PER_HOUR_SYMBOL);
					setState(4297);
					ulong_number();
					}
					break;
				case MAX_CONNECTIONS_PER_HOUR_SYMBOL:
					{
					setState(4298);
					match(MAX_CONNECTIONS_PER_HOUR_SYMBOL);
					setState(4299);
					ulong_number();
					}
					break;
				case MAX_USER_CONNECTIONS_SYMBOL:
					{
					setState(4300);
					match(MAX_USER_CONNECTIONS_SYMBOL);
					setState(4301);
					ulong_number();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(4304); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (MAX_CONNECTIONS_PER_HOUR_SYMBOL - 207)) | (1L << (MAX_QUERIES_PER_HOUR_SYMBOL - 207)) | (1L << (MAX_UPDATES_PER_HOUR_SYMBOL - 207)) | (1L << (MAX_USER_CONNECTIONS_SYMBOL - 207)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AccountLockPasswordExpireOptionsContext extends ParserRuleContext {
		public TerminalNode ACCOUNT_SYMBOL() { return getToken(MySQLParser.ACCOUNT_SYMBOL, 0); }
		public TerminalNode LOCK_SYMBOL() { return getToken(MySQLParser.LOCK_SYMBOL, 0); }
		public TerminalNode UNLOCK_SYMBOL() { return getToken(MySQLParser.UNLOCK_SYMBOL, 0); }
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public TerminalNode EXPIRE_SYMBOL() { return getToken(MySQLParser.EXPIRE_SYMBOL, 0); }
		public TerminalNode HISTORY_SYMBOL() { return getToken(MySQLParser.HISTORY_SYMBOL, 0); }
		public TerminalNode REUSE_SYMBOL() { return getToken(MySQLParser.REUSE_SYMBOL, 0); }
		public TerminalNode INTERVAL_SYMBOL() { return getToken(MySQLParser.INTERVAL_SYMBOL, 0); }
		public TerminalNode REQUIRE_SYMBOL() { return getToken(MySQLParser.REQUIRE_SYMBOL, 0); }
		public TerminalNode CURRENT_SYMBOL() { return getToken(MySQLParser.CURRENT_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode DAY_SYMBOL() { return getToken(MySQLParser.DAY_SYMBOL, 0); }
		public TerminalNode NEVER_SYMBOL() { return getToken(MySQLParser.NEVER_SYMBOL, 0); }
		public TerminalNode OPTIONAL_SYMBOL() { return getToken(MySQLParser.OPTIONAL_SYMBOL, 0); }
		public AccountLockPasswordExpireOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accountLockPasswordExpireOptions; }
	}

	public final AccountLockPasswordExpireOptionsContext accountLockPasswordExpireOptions() throws RecognitionException {
		AccountLockPasswordExpireOptionsContext _localctx = new AccountLockPasswordExpireOptionsContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_accountLockPasswordExpireOptions);
		int _la;
		try {
			setState(4339);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ACCOUNT_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4306);
				match(ACCOUNT_SYMBOL);
				setState(4307);
				_la = _input.LA(1);
				if ( !(_la==LOCK_SYMBOL || _la==UNLOCK_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case PASSWORD_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4308);
				match(PASSWORD_SYMBOL);
				setState(4337);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,512,_ctx) ) {
				case 1:
					{
					setState(4309);
					match(EXPIRE_SYMBOL);
					setState(4316);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case INTERVAL_SYMBOL:
						{
						setState(4310);
						match(INTERVAL_SYMBOL);
						setState(4311);
						real_ulong_number();
						setState(4312);
						match(DAY_SYMBOL);
						}
						break;
					case NEVER_SYMBOL:
						{
						setState(4314);
						match(NEVER_SYMBOL);
						}
						break;
					case DEFAULT_SYMBOL:
						{
						setState(4315);
						match(DEFAULT_SYMBOL);
						}
						break;
					case EOF:
					case ACCOUNT_SYMBOL:
					case PASSWORD_SYMBOL:
					case SEMICOLON_SYMBOL:
						break;
					default:
						break;
					}
					}
					break;
				case 2:
					{
					setState(4318);
					match(HISTORY_SYMBOL);
					setState(4321);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case INT_NUMBER:
					case LONG_NUMBER:
					case ULONGLONG_NUMBER:
					case HEX_NUMBER:
						{
						setState(4319);
						real_ulong_number();
						}
						break;
					case DEFAULT_SYMBOL:
						{
						setState(4320);
						match(DEFAULT_SYMBOL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case 3:
					{
					setState(4323);
					match(REUSE_SYMBOL);
					setState(4324);
					match(INTERVAL_SYMBOL);
					setState(4329);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case INT_NUMBER:
					case LONG_NUMBER:
					case ULONGLONG_NUMBER:
					case HEX_NUMBER:
						{
						setState(4325);
						real_ulong_number();
						setState(4326);
						match(DAY_SYMBOL);
						}
						break;
					case DEFAULT_SYMBOL:
						{
						setState(4328);
						match(DEFAULT_SYMBOL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case 4:
					{
					setState(4331);
					if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
					setState(4332);
					match(REQUIRE_SYMBOL);
					setState(4333);
					match(CURRENT_SYMBOL);
					setState(4335);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DEFAULT_SYMBOL || _la==OPTIONAL_SYMBOL) {
						{
						setState(4334);
						_la = _input.LA(1);
						if ( !(_la==DEFAULT_SYMBOL || _la==OPTIONAL_SYMBOL) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropUserContext extends ParserRuleContext {
		public TerminalNode DROP_SYMBOL() { return getToken(MySQLParser.DROP_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public UserListContext userList() {
			return getRuleContext(UserListContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropUser; }
	}

	public final DropUserContext dropUser() throws RecognitionException {
		DropUserContext _localctx = new DropUserContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_dropUser);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4341);
			match(DROP_SYMBOL);
			setState(4342);
			match(USER_SYMBOL);
			setState(4345);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,514,_ctx) ) {
			case 1:
				{
				setState(4343);
				if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
				setState(4344);
				ifExists();
				}
				break;
			}
			setState(4347);
			userList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantContext extends ParserRuleContext {
		public List<TerminalNode> GRANT_SYMBOL() { return getTokens(MySQLParser.GRANT_SYMBOL); }
		public TerminalNode GRANT_SYMBOL(int i) {
			return getToken(MySQLParser.GRANT_SYMBOL, i);
		}
		public RoleOrPrivilegesListContext roleOrPrivilegesList() {
			return getRuleContext(RoleOrPrivilegesListContext.class,0);
		}
		public TerminalNode TO_SYMBOL() { return getToken(MySQLParser.TO_SYMBOL, 0); }
		public UserListContext userList() {
			return getRuleContext(UserListContext.class,0);
		}
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public GrantIdentifierContext grantIdentifier() {
			return getRuleContext(GrantIdentifierContext.class,0);
		}
		public GrantTargetListContext grantTargetList() {
			return getRuleContext(GrantTargetListContext.class,0);
		}
		public TerminalNode PROXY_SYMBOL() { return getToken(MySQLParser.PROXY_SYMBOL, 0); }
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode ADMIN_SYMBOL() { return getToken(MySQLParser.ADMIN_SYMBOL, 0); }
		public TerminalNode OPTION_SYMBOL() { return getToken(MySQLParser.OPTION_SYMBOL, 0); }
		public AclTypeContext aclType() {
			return getRuleContext(AclTypeContext.class,0);
		}
		public VersionedRequireClauseContext versionedRequireClause() {
			return getRuleContext(VersionedRequireClauseContext.class,0);
		}
		public GrantOptionsContext grantOptions() {
			return getRuleContext(GrantOptionsContext.class,0);
		}
		public GrantAsContext grantAs() {
			return getRuleContext(GrantAsContext.class,0);
		}
		public TerminalNode PRIVILEGES_SYMBOL() { return getToken(MySQLParser.PRIVILEGES_SYMBOL, 0); }
		public GrantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant; }
	}

	public final GrantContext grant() throws RecognitionException {
		GrantContext _localctx = new GrantContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_grant);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4349);
			match(GRANT_SYMBOL);
			setState(4392);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,523,_ctx) ) {
			case 1:
				{
				setState(4350);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(4351);
				roleOrPrivilegesList();
				setState(4352);
				match(TO_SYMBOL);
				setState(4353);
				userList();
				setState(4357);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH_SYMBOL) {
					{
					setState(4354);
					match(WITH_SYMBOL);
					setState(4355);
					match(ADMIN_SYMBOL);
					setState(4356);
					match(OPTION_SYMBOL);
					}
				}

				}
				break;
			case 2:
				{
				setState(4364);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,517,_ctx) ) {
				case 1:
					{
					setState(4359);
					roleOrPrivilegesList();
					}
					break;
				case 2:
					{
					setState(4360);
					match(ALL_SYMBOL);
					setState(4362);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PRIVILEGES_SYMBOL) {
						{
						setState(4361);
						match(PRIVILEGES_SYMBOL);
						}
					}

					}
					break;
				}
				setState(4366);
				match(ON_SYMBOL);
				setState(4368);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,518,_ctx) ) {
				case 1:
					{
					setState(4367);
					aclType();
					}
					break;
				}
				setState(4370);
				grantIdentifier();
				setState(4371);
				match(TO_SYMBOL);
				setState(4372);
				grantTargetList();
				setState(4374);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,519,_ctx) ) {
				case 1:
					{
					setState(4373);
					versionedRequireClause();
					}
					break;
				}
				setState(4377);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,520,_ctx) ) {
				case 1:
					{
					setState(4376);
					grantOptions();
					}
					break;
				}
				setState(4380);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS_SYMBOL) {
					{
					setState(4379);
					grantAs();
					}
				}

				}
				break;
			case 3:
				{
				setState(4382);
				match(PROXY_SYMBOL);
				setState(4383);
				match(ON_SYMBOL);
				setState(4384);
				user();
				setState(4385);
				match(TO_SYMBOL);
				setState(4386);
				grantTargetList();
				setState(4390);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH_SYMBOL) {
					{
					setState(4387);
					match(WITH_SYMBOL);
					setState(4388);
					match(GRANT_SYMBOL);
					setState(4389);
					match(OPTION_SYMBOL);
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantTargetListContext extends ParserRuleContext {
		public CreateUserListContext createUserList() {
			return getRuleContext(CreateUserListContext.class,0);
		}
		public UserListContext userList() {
			return getRuleContext(UserListContext.class,0);
		}
		public GrantTargetListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantTargetList; }
	}

	public final GrantTargetListContext grantTargetList() throws RecognitionException {
		GrantTargetListContext _localctx = new GrantTargetListContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_grantTargetList);
		try {
			setState(4398);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,524,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4394);
				if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
				setState(4395);
				createUserList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4396);
				if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
				setState(4397);
				userList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantOptionsContext extends ParserRuleContext {
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public List<GrantOptionContext> grantOption() {
			return getRuleContexts(GrantOptionContext.class);
		}
		public GrantOptionContext grantOption(int i) {
			return getRuleContext(GrantOptionContext.class,i);
		}
		public TerminalNode GRANT_SYMBOL() { return getToken(MySQLParser.GRANT_SYMBOL, 0); }
		public TerminalNode OPTION_SYMBOL() { return getToken(MySQLParser.OPTION_SYMBOL, 0); }
		public GrantOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantOptions; }
	}

	public final GrantOptionsContext grantOptions() throws RecognitionException {
		GrantOptionsContext _localctx = new GrantOptionsContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_grantOptions);
		int _la;
		try {
			setState(4411);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,526,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4400);
				if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
				setState(4401);
				match(WITH_SYMBOL);
				setState(4403); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4402);
					grantOption();
					}
					}
					setState(4405); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (MAX_CONNECTIONS_PER_HOUR_SYMBOL - 207)) | (1L << (MAX_QUERIES_PER_HOUR_SYMBOL - 207)) | (1L << (MAX_UPDATES_PER_HOUR_SYMBOL - 207)) | (1L << (MAX_USER_CONNECTIONS_SYMBOL - 207)))) != 0) || _la==GRANT_SYMBOL );
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4407);
				if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
				setState(4408);
				match(WITH_SYMBOL);
				setState(4409);
				match(GRANT_SYMBOL);
				setState(4410);
				match(OPTION_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExceptRoleListContext extends ParserRuleContext {
		public TerminalNode EXCEPT_SYMBOL() { return getToken(MySQLParser.EXCEPT_SYMBOL, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public ExceptRoleListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exceptRoleList; }
	}

	public final ExceptRoleListContext exceptRoleList() throws RecognitionException {
		ExceptRoleListContext _localctx = new ExceptRoleListContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_exceptRoleList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4413);
			match(EXCEPT_SYMBOL);
			setState(4414);
			roleList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithRolesContext extends ParserRuleContext {
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode ROLE_SYMBOL() { return getToken(MySQLParser.ROLE_SYMBOL, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode NONE_SYMBOL() { return getToken(MySQLParser.NONE_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public ExceptRoleListContext exceptRoleList() {
			return getRuleContext(ExceptRoleListContext.class,0);
		}
		public WithRolesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withRoles; }
	}

	public final WithRolesContext withRoles() throws RecognitionException {
		WithRolesContext _localctx = new WithRolesContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_withRoles);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4416);
			match(WITH_SYMBOL);
			setState(4417);
			match(ROLE_SYMBOL);
			setState(4425);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,528,_ctx) ) {
			case 1:
				{
				setState(4418);
				roleList();
				}
				break;
			case 2:
				{
				setState(4419);
				match(ALL_SYMBOL);
				setState(4421);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXCEPT_SYMBOL) {
					{
					setState(4420);
					exceptRoleList();
					}
				}

				}
				break;
			case 3:
				{
				setState(4423);
				match(NONE_SYMBOL);
				}
				break;
			case 4:
				{
				setState(4424);
				match(DEFAULT_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantAsContext extends ParserRuleContext {
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public WithRolesContext withRoles() {
			return getRuleContext(WithRolesContext.class,0);
		}
		public GrantAsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantAs; }
	}

	public final GrantAsContext grantAs() throws RecognitionException {
		GrantAsContext _localctx = new GrantAsContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_grantAs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4427);
			match(AS_SYMBOL);
			setState(4428);
			match(USER_SYMBOL);
			setState(4430);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH_SYMBOL) {
				{
				setState(4429);
				withRoles();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VersionedRequireClauseContext extends ParserRuleContext {
		public RequireClauseContext requireClause() {
			return getRuleContext(RequireClauseContext.class,0);
		}
		public VersionedRequireClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_versionedRequireClause; }
	}

	public final VersionedRequireClauseContext versionedRequireClause() throws RecognitionException {
		VersionedRequireClauseContext _localctx = new VersionedRequireClauseContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_versionedRequireClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4432);
			if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
			setState(4433);
			requireClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameUserContext extends ParserRuleContext {
		public TerminalNode RENAME_SYMBOL() { return getToken(MySQLParser.RENAME_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public List<UserContext> user() {
			return getRuleContexts(UserContext.class);
		}
		public UserContext user(int i) {
			return getRuleContext(UserContext.class,i);
		}
		public List<TerminalNode> TO_SYMBOL() { return getTokens(MySQLParser.TO_SYMBOL); }
		public TerminalNode TO_SYMBOL(int i) {
			return getToken(MySQLParser.TO_SYMBOL, i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public RenameUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameUser; }
	}

	public final RenameUserContext renameUser() throws RecognitionException {
		RenameUserContext _localctx = new RenameUserContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_renameUser);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4435);
			match(RENAME_SYMBOL);
			setState(4436);
			match(USER_SYMBOL);
			setState(4437);
			user();
			setState(4438);
			match(TO_SYMBOL);
			setState(4439);
			user();
			setState(4447);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(4440);
				match(COMMA_SYMBOL);
				setState(4441);
				user();
				setState(4442);
				match(TO_SYMBOL);
				setState(4443);
				user();
				}
				}
				setState(4449);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokeContext extends ParserRuleContext {
		public TerminalNode REVOKE_SYMBOL() { return getToken(MySQLParser.REVOKE_SYMBOL, 0); }
		public RoleOrPrivilegesListContext roleOrPrivilegesList() {
			return getRuleContext(RoleOrPrivilegesListContext.class,0);
		}
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public UserListContext userList() {
			return getRuleContext(UserListContext.class,0);
		}
		public OnTypeToContext onTypeTo() {
			return getRuleContext(OnTypeToContext.class,0);
		}
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode PROXY_SYMBOL() { return getToken(MySQLParser.PROXY_SYMBOL, 0); }
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public GrantIdentifierContext grantIdentifier() {
			return getRuleContext(GrantIdentifierContext.class,0);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public TerminalNode GRANT_SYMBOL() { return getToken(MySQLParser.GRANT_SYMBOL, 0); }
		public TerminalNode OPTION_SYMBOL() { return getToken(MySQLParser.OPTION_SYMBOL, 0); }
		public TerminalNode PRIVILEGES_SYMBOL() { return getToken(MySQLParser.PRIVILEGES_SYMBOL, 0); }
		public AclTypeContext aclType() {
			return getRuleContext(AclTypeContext.class,0);
		}
		public RevokeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke; }
	}

	public final RevokeContext revoke() throws RecognitionException {
		RevokeContext _localctx = new RevokeContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_revoke);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4450);
			match(REVOKE_SYMBOL);
			setState(4484);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,534,_ctx) ) {
			case 1:
				{
				setState(4451);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(4452);
				roleOrPrivilegesList();
				setState(4453);
				match(FROM_SYMBOL);
				setState(4454);
				userList();
				}
				break;
			case 2:
				{
				setState(4456);
				roleOrPrivilegesList();
				setState(4457);
				onTypeTo();
				setState(4458);
				match(FROM_SYMBOL);
				setState(4459);
				userList();
				}
				break;
			case 3:
				{
				setState(4461);
				match(ALL_SYMBOL);
				setState(4463);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,531,_ctx) ) {
				case 1:
					{
					setState(4462);
					match(PRIVILEGES_SYMBOL);
					}
					break;
				}
				setState(4476);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,533,_ctx) ) {
				case 1:
					{
					setState(4465);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(4466);
					match(ON_SYMBOL);
					setState(4468);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,532,_ctx) ) {
					case 1:
						{
						setState(4467);
						aclType();
						}
						break;
					}
					setState(4470);
					grantIdentifier();
					}
					break;
				case 2:
					{
					setState(4471);
					match(COMMA_SYMBOL);
					setState(4472);
					match(GRANT_SYMBOL);
					setState(4473);
					match(OPTION_SYMBOL);
					setState(4474);
					match(FROM_SYMBOL);
					setState(4475);
					userList();
					}
					break;
				}
				}
				break;
			case 4:
				{
				setState(4478);
				match(PROXY_SYMBOL);
				setState(4479);
				match(ON_SYMBOL);
				setState(4480);
				user();
				setState(4481);
				match(FROM_SYMBOL);
				setState(4482);
				userList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OnTypeToContext extends ParserRuleContext {
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public GrantIdentifierContext grantIdentifier() {
			return getRuleContext(GrantIdentifierContext.class,0);
		}
		public AclTypeContext aclType() {
			return getRuleContext(AclTypeContext.class,0);
		}
		public OnTypeToContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onTypeTo; }
	}

	public final OnTypeToContext onTypeTo() throws RecognitionException {
		OnTypeToContext _localctx = new OnTypeToContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_onTypeTo);
		int _la;
		try {
			setState(4500);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,538,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4486);
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				setState(4487);
				match(ON_SYMBOL);
				setState(4489);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,535,_ctx) ) {
				case 1:
					{
					setState(4488);
					aclType();
					}
					break;
				}
				setState(4491);
				grantIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4492);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(4498);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON_SYMBOL) {
					{
					setState(4493);
					match(ON_SYMBOL);
					setState(4495);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,536,_ctx) ) {
					case 1:
						{
						setState(4494);
						aclType();
						}
						break;
					}
					setState(4497);
					grantIdentifier();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AclTypeContext extends ParserRuleContext {
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TerminalNode FUNCTION_SYMBOL() { return getToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		public TerminalNode PROCEDURE_SYMBOL() { return getToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
		public AclTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aclType; }
	}

	public final AclTypeContext aclType() throws RecognitionException {
		AclTypeContext _localctx = new AclTypeContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_aclType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4502);
			_la = _input.LA(1);
			if ( !(_la==FUNCTION_SYMBOL || _la==PROCEDURE_SYMBOL || _la==TABLE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleOrPrivilegesListContext extends ParserRuleContext {
		public List<RoleOrPrivilegeContext> roleOrPrivilege() {
			return getRuleContexts(RoleOrPrivilegeContext.class);
		}
		public RoleOrPrivilegeContext roleOrPrivilege(int i) {
			return getRuleContext(RoleOrPrivilegeContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public RoleOrPrivilegesListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleOrPrivilegesList; }
	}

	public final RoleOrPrivilegesListContext roleOrPrivilegesList() throws RecognitionException {
		RoleOrPrivilegesListContext _localctx = new RoleOrPrivilegesListContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_roleOrPrivilegesList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4504);
			roleOrPrivilege();
			setState(4509);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,539,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4505);
					match(COMMA_SYMBOL);
					setState(4506);
					roleOrPrivilege();
					}
					} 
				}
				setState(4511);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,539,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleOrPrivilegeContext extends ParserRuleContext {
		public Token object;
		public RoleIdentifierOrTextContext roleIdentifierOrText() {
			return getRuleContext(RoleIdentifierOrTextContext.class,0);
		}
		public TerminalNode AT_TEXT_SUFFIX() { return getToken(MySQLParser.AT_TEXT_SUFFIX, 0); }
		public TerminalNode AT_SIGN_SYMBOL() { return getToken(MySQLParser.AT_SIGN_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public ColumnInternalRefListContext columnInternalRefList() {
			return getRuleContext(ColumnInternalRefListContext.class,0);
		}
		public TerminalNode SELECT_SYMBOL() { return getToken(MySQLParser.SELECT_SYMBOL, 0); }
		public TerminalNode INSERT_SYMBOL() { return getToken(MySQLParser.INSERT_SYMBOL, 0); }
		public TerminalNode UPDATE_SYMBOL() { return getToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public TerminalNode REFERENCES_SYMBOL() { return getToken(MySQLParser.REFERENCES_SYMBOL, 0); }
		public TerminalNode DELETE_SYMBOL() { return getToken(MySQLParser.DELETE_SYMBOL, 0); }
		public TerminalNode USAGE_SYMBOL() { return getToken(MySQLParser.USAGE_SYMBOL, 0); }
		public TerminalNode INDEX_SYMBOL() { return getToken(MySQLParser.INDEX_SYMBOL, 0); }
		public TerminalNode DROP_SYMBOL() { return getToken(MySQLParser.DROP_SYMBOL, 0); }
		public TerminalNode EXECUTE_SYMBOL() { return getToken(MySQLParser.EXECUTE_SYMBOL, 0); }
		public TerminalNode RELOAD_SYMBOL() { return getToken(MySQLParser.RELOAD_SYMBOL, 0); }
		public TerminalNode SHUTDOWN_SYMBOL() { return getToken(MySQLParser.SHUTDOWN_SYMBOL, 0); }
		public TerminalNode PROCESS_SYMBOL() { return getToken(MySQLParser.PROCESS_SYMBOL, 0); }
		public TerminalNode FILE_SYMBOL() { return getToken(MySQLParser.FILE_SYMBOL, 0); }
		public TerminalNode PROXY_SYMBOL() { return getToken(MySQLParser.PROXY_SYMBOL, 0); }
		public TerminalNode SUPER_SYMBOL() { return getToken(MySQLParser.SUPER_SYMBOL, 0); }
		public TerminalNode EVENT_SYMBOL() { return getToken(MySQLParser.EVENT_SYMBOL, 0); }
		public TerminalNode TRIGGER_SYMBOL() { return getToken(MySQLParser.TRIGGER_SYMBOL, 0); }
		public TerminalNode GRANT_SYMBOL() { return getToken(MySQLParser.GRANT_SYMBOL, 0); }
		public TerminalNode OPTION_SYMBOL() { return getToken(MySQLParser.OPTION_SYMBOL, 0); }
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode DATABASES_SYMBOL() { return getToken(MySQLParser.DATABASES_SYMBOL, 0); }
		public TerminalNode CREATE_SYMBOL() { return getToken(MySQLParser.CREATE_SYMBOL, 0); }
		public TerminalNode TEMPORARY_SYMBOL() { return getToken(MySQLParser.TEMPORARY_SYMBOL, 0); }
		public TerminalNode TABLES_SYMBOL() { return getToken(MySQLParser.TABLES_SYMBOL, 0); }
		public TerminalNode ROUTINE_SYMBOL() { return getToken(MySQLParser.ROUTINE_SYMBOL, 0); }
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public TerminalNode VIEW_SYMBOL() { return getToken(MySQLParser.VIEW_SYMBOL, 0); }
		public TerminalNode LOCK_SYMBOL() { return getToken(MySQLParser.LOCK_SYMBOL, 0); }
		public TerminalNode REPLICATION_SYMBOL() { return getToken(MySQLParser.REPLICATION_SYMBOL, 0); }
		public TerminalNode CLIENT_SYMBOL() { return getToken(MySQLParser.CLIENT_SYMBOL, 0); }
		public TerminalNode SLAVE_SYMBOL() { return getToken(MySQLParser.SLAVE_SYMBOL, 0); }
		public TerminalNode ALTER_SYMBOL() { return getToken(MySQLParser.ALTER_SYMBOL, 0); }
		public TerminalNode ROLE_SYMBOL() { return getToken(MySQLParser.ROLE_SYMBOL, 0); }
		public RoleOrPrivilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleOrPrivilege; }
	}

	public final RoleOrPrivilegeContext roleOrPrivilege() throws RecognitionException {
		RoleOrPrivilegeContext _localctx = new RoleOrPrivilegeContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_roleOrPrivilege);
		int _la;
		try {
			setState(4553);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,546,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4512);
				if (!(serverVersion > 80000)) throw new FailedPredicateException(this, "serverVersion > 80000");
				setState(4523);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,542,_ctx) ) {
				case 1:
					{
					setState(4513);
					roleIdentifierOrText();
					setState(4515);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,540,_ctx) ) {
					case 1:
						{
						setState(4514);
						columnInternalRefList();
						}
						break;
					}
					}
					break;
				case 2:
					{
					setState(4517);
					roleIdentifierOrText();
					setState(4521);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case AT_TEXT_SUFFIX:
						{
						setState(4518);
						match(AT_TEXT_SUFFIX);
						}
						break;
					case AT_SIGN_SYMBOL:
						{
						setState(4519);
						match(AT_SIGN_SYMBOL);
						setState(4520);
						textOrIdentifier();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4525);
				_la = _input.LA(1);
				if ( !(_la==INSERT_SYMBOL || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (REFERENCES_SYMBOL - 601)) | (1L << (SELECT_SYMBOL - 601)) | (1L << (UPDATE_SYMBOL - 601)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4527);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,543,_ctx) ) {
				case 1:
					{
					setState(4526);
					columnInternalRefList();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4529);
				_la = _input.LA(1);
				if ( !(_la==EXECUTE_SYMBOL || _la==SHUTDOWN_SYMBOL || _la==EVENT_SYMBOL || _la==FILE_SYMBOL || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (PROCESS_SYMBOL - 261)) | (1L << (PROXY_SYMBOL - 261)) | (1L << (RELOAD_SYMBOL - 261)))) != 0) || _la==SUPER_SYMBOL || ((((_la - 480)) & ~0x3f) == 0 && ((1L << (_la - 480)) & ((1L << (DELETE_SYMBOL - 480)) | (1L << (DROP_SYMBOL - 480)) | (1L << (INDEX_SYMBOL - 480)))) != 0) || _la==TRIGGER_SYMBOL || _la==USAGE_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4530);
				match(GRANT_SYMBOL);
				setState(4531);
				match(OPTION_SYMBOL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4532);
				match(SHOW_SYMBOL);
				setState(4533);
				match(DATABASES_SYMBOL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4534);
				match(CREATE_SYMBOL);
				setState(4538);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,544,_ctx) ) {
				case 1:
					{
					setState(4535);
					match(TEMPORARY_SYMBOL);
					setState(4536);
					((RoleOrPrivilegeContext)_localctx).object = match(TABLES_SYMBOL);
					}
					break;
				case 2:
					{
					setState(4537);
					((RoleOrPrivilegeContext)_localctx).object = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ROUTINE_SYMBOL || _la==TABLESPACE_SYMBOL || _la==USER_SYMBOL || _la==VIEW_SYMBOL) ) {
						((RoleOrPrivilegeContext)_localctx).object = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4540);
				match(LOCK_SYMBOL);
				setState(4541);
				match(TABLES_SYMBOL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4542);
				match(REPLICATION_SYMBOL);
				setState(4543);
				((RoleOrPrivilegeContext)_localctx).object = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==SLAVE_SYMBOL || _la==CLIENT_SYMBOL) ) {
					((RoleOrPrivilegeContext)_localctx).object = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4544);
				match(SHOW_SYMBOL);
				setState(4545);
				match(VIEW_SYMBOL);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4546);
				match(ALTER_SYMBOL);
				setState(4548);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,545,_ctx) ) {
				case 1:
					{
					setState(4547);
					match(ROUTINE_SYMBOL);
					}
					break;
				}
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4550);
				if (!(serverVersion > 80000)) throw new FailedPredicateException(this, "serverVersion > 80000");
				setState(4551);
				_la = _input.LA(1);
				if ( !(_la==CREATE_SYMBOL || _la==DROP_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4552);
				match(ROLE_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantIdentifierContext extends ParserRuleContext {
		public List<TerminalNode> MULT_OPERATOR() { return getTokens(MySQLParser.MULT_OPERATOR); }
		public TerminalNode MULT_OPERATOR(int i) {
			return getToken(MySQLParser.MULT_OPERATOR, i);
		}
		public TerminalNode DOT_SYMBOL() { return getToken(MySQLParser.DOT_SYMBOL, 0); }
		public SchemaRefContext schemaRef() {
			return getRuleContext(SchemaRefContext.class,0);
		}
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public GrantIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantIdentifier; }
	}

	public final GrantIdentifierContext grantIdentifier() throws RecognitionException {
		GrantIdentifierContext _localctx = new GrantIdentifierContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_grantIdentifier);
		int _la;
		try {
			setState(4571);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,549,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4555);
				match(MULT_OPERATOR);
				setState(4558);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT_SYMBOL) {
					{
					setState(4556);
					match(DOT_SYMBOL);
					setState(4557);
					match(MULT_OPERATOR);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4560);
				schemaRef();
				setState(4563);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT_SYMBOL) {
					{
					setState(4561);
					match(DOT_SYMBOL);
					setState(4562);
					match(MULT_OPERATOR);
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4565);
				tableRef();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4566);
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				setState(4567);
				schemaRef();
				setState(4568);
				match(DOT_SYMBOL);
				setState(4569);
				tableRef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RequireListContext extends ParserRuleContext {
		public List<RequireListElementContext> requireListElement() {
			return getRuleContexts(RequireListElementContext.class);
		}
		public RequireListElementContext requireListElement(int i) {
			return getRuleContext(RequireListElementContext.class,i);
		}
		public List<TerminalNode> AND_SYMBOL() { return getTokens(MySQLParser.AND_SYMBOL); }
		public TerminalNode AND_SYMBOL(int i) {
			return getToken(MySQLParser.AND_SYMBOL, i);
		}
		public RequireListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_requireList; }
	}

	public final RequireListContext requireList() throws RecognitionException {
		RequireListContext _localctx = new RequireListContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_requireList);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4573);
			requireListElement();
			setState(4580);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,551,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4575);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AND_SYMBOL) {
						{
						setState(4574);
						match(AND_SYMBOL);
						}
					}

					setState(4577);
					requireListElement();
					}
					} 
				}
				setState(4582);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,551,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RequireListElementContext extends ParserRuleContext {
		public Token element;
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public TerminalNode CIPHER_SYMBOL() { return getToken(MySQLParser.CIPHER_SYMBOL, 0); }
		public TerminalNode ISSUER_SYMBOL() { return getToken(MySQLParser.ISSUER_SYMBOL, 0); }
		public TerminalNode SUBJECT_SYMBOL() { return getToken(MySQLParser.SUBJECT_SYMBOL, 0); }
		public RequireListElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_requireListElement; }
	}

	public final RequireListElementContext requireListElement() throws RecognitionException {
		RequireListElementContext _localctx = new RequireListElementContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_requireListElement);
		try {
			setState(4589);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CIPHER_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4583);
				((RequireListElementContext)_localctx).element = match(CIPHER_SYMBOL);
				setState(4584);
				textString();
				}
				break;
			case ISSUER_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4585);
				((RequireListElementContext)_localctx).element = match(ISSUER_SYMBOL);
				setState(4586);
				textString();
				}
				break;
			case SUBJECT_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(4587);
				((RequireListElementContext)_localctx).element = match(SUBJECT_SYMBOL);
				setState(4588);
				textString();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantOptionContext extends ParserRuleContext {
		public Token option;
		public TerminalNode OPTION_SYMBOL() { return getToken(MySQLParser.OPTION_SYMBOL, 0); }
		public TerminalNode GRANT_SYMBOL() { return getToken(MySQLParser.GRANT_SYMBOL, 0); }
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public TerminalNode MAX_QUERIES_PER_HOUR_SYMBOL() { return getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0); }
		public TerminalNode MAX_UPDATES_PER_HOUR_SYMBOL() { return getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR_SYMBOL() { return getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0); }
		public TerminalNode MAX_USER_CONNECTIONS_SYMBOL() { return getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0); }
		public GrantOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantOption; }
	}

	public final GrantOptionContext grantOption() throws RecognitionException {
		GrantOptionContext _localctx = new GrantOptionContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_grantOption);
		try {
			setState(4601);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GRANT_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4591);
				((GrantOptionContext)_localctx).option = match(GRANT_SYMBOL);
				setState(4592);
				match(OPTION_SYMBOL);
				}
				break;
			case MAX_QUERIES_PER_HOUR_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4593);
				((GrantOptionContext)_localctx).option = match(MAX_QUERIES_PER_HOUR_SYMBOL);
				setState(4594);
				ulong_number();
				}
				break;
			case MAX_UPDATES_PER_HOUR_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(4595);
				((GrantOptionContext)_localctx).option = match(MAX_UPDATES_PER_HOUR_SYMBOL);
				setState(4596);
				ulong_number();
				}
				break;
			case MAX_CONNECTIONS_PER_HOUR_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(4597);
				((GrantOptionContext)_localctx).option = match(MAX_CONNECTIONS_PER_HOUR_SYMBOL);
				setState(4598);
				ulong_number();
				}
				break;
			case MAX_USER_CONNECTIONS_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(4599);
				((GrantOptionContext)_localctx).option = match(MAX_USER_CONNECTIONS_SYMBOL);
				setState(4600);
				ulong_number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetRoleContext extends ParserRuleContext {
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public TerminalNode ROLE_SYMBOL() { return getToken(MySQLParser.ROLE_SYMBOL, 0); }
		public List<RoleListContext> roleList() {
			return getRuleContexts(RoleListContext.class);
		}
		public RoleListContext roleList(int i) {
			return getRuleContext(RoleListContext.class,i);
		}
		public TerminalNode NONE_SYMBOL() { return getToken(MySQLParser.NONE_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode TO_SYMBOL() { return getToken(MySQLParser.TO_SYMBOL, 0); }
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode EXCEPT_SYMBOL() { return getToken(MySQLParser.EXCEPT_SYMBOL, 0); }
		public SetRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setRole; }
	}

	public final SetRoleContext setRole() throws RecognitionException {
		SetRoleContext _localctx = new SetRoleContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_setRole);
		int _la;
		try {
			setState(4626);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,556,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4603);
				match(SET_SYMBOL);
				setState(4604);
				match(ROLE_SYMBOL);
				setState(4605);
				roleList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4606);
				match(SET_SYMBOL);
				setState(4607);
				match(ROLE_SYMBOL);
				setState(4608);
				_la = _input.LA(1);
				if ( !(_la==NONE_SYMBOL || _la==DEFAULT_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4609);
				match(SET_SYMBOL);
				setState(4610);
				match(DEFAULT_SYMBOL);
				setState(4611);
				match(ROLE_SYMBOL);
				setState(4615);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,554,_ctx) ) {
				case 1:
					{
					setState(4612);
					roleList();
					}
					break;
				case 2:
					{
					setState(4613);
					match(NONE_SYMBOL);
					}
					break;
				case 3:
					{
					setState(4614);
					match(ALL_SYMBOL);
					}
					break;
				}
				setState(4617);
				match(TO_SYMBOL);
				setState(4618);
				roleList();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4619);
				match(SET_SYMBOL);
				setState(4620);
				match(ROLE_SYMBOL);
				setState(4621);
				match(ALL_SYMBOL);
				setState(4624);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXCEPT_SYMBOL) {
					{
					setState(4622);
					match(EXCEPT_SYMBOL);
					setState(4623);
					roleList();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleListContext extends ParserRuleContext {
		public List<RoleContext> role() {
			return getRuleContexts(RoleContext.class);
		}
		public RoleContext role(int i) {
			return getRuleContext(RoleContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public RoleListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleList; }
	}

	public final RoleListContext roleList() throws RecognitionException {
		RoleListContext _localctx = new RoleListContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_roleList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4628);
			role();
			setState(4633);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,557,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4629);
					match(COMMA_SYMBOL);
					setState(4630);
					role();
					}
					} 
				}
				setState(4635);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,557,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleContext extends ParserRuleContext {
		public RoleIdentifierOrTextContext roleIdentifierOrText() {
			return getRuleContext(RoleIdentifierOrTextContext.class,0);
		}
		public TerminalNode AT_SIGN_SYMBOL() { return getToken(MySQLParser.AT_SIGN_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public TerminalNode AT_TEXT_SUFFIX() { return getToken(MySQLParser.AT_TEXT_SUFFIX, 0); }
		public RoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_role; }
	}

	public final RoleContext role() throws RecognitionException {
		RoleContext _localctx = new RoleContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_role);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4636);
			roleIdentifierOrText();
			setState(4640);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,558,_ctx) ) {
			case 1:
				{
				setState(4637);
				match(AT_SIGN_SYMBOL);
				setState(4638);
				textOrIdentifier();
				}
				break;
			case 2:
				{
				setState(4639);
				match(AT_TEXT_SUFFIX);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableAdministrationStatementContext extends ParserRuleContext {
		public Token type;
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TableRefListContext tableRefList() {
			return getRuleContext(TableRefListContext.class,0);
		}
		public TerminalNode ANALYZE_SYMBOL() { return getToken(MySQLParser.ANALYZE_SYMBOL, 0); }
		public NoWriteToBinLogContext noWriteToBinLog() {
			return getRuleContext(NoWriteToBinLogContext.class,0);
		}
		public HistogramContext histogram() {
			return getRuleContext(HistogramContext.class,0);
		}
		public TerminalNode CHECK_SYMBOL() { return getToken(MySQLParser.CHECK_SYMBOL, 0); }
		public List<CheckOptionContext> checkOption() {
			return getRuleContexts(CheckOptionContext.class);
		}
		public CheckOptionContext checkOption(int i) {
			return getRuleContext(CheckOptionContext.class,i);
		}
		public TerminalNode CHECKSUM_SYMBOL() { return getToken(MySQLParser.CHECKSUM_SYMBOL, 0); }
		public TerminalNode QUICK_SYMBOL() { return getToken(MySQLParser.QUICK_SYMBOL, 0); }
		public TerminalNode EXTENDED_SYMBOL() { return getToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		public TerminalNode OPTIMIZE_SYMBOL() { return getToken(MySQLParser.OPTIMIZE_SYMBOL, 0); }
		public TerminalNode REPAIR_SYMBOL() { return getToken(MySQLParser.REPAIR_SYMBOL, 0); }
		public List<RepairTypeContext> repairType() {
			return getRuleContexts(RepairTypeContext.class);
		}
		public RepairTypeContext repairType(int i) {
			return getRuleContext(RepairTypeContext.class,i);
		}
		public TableAdministrationStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableAdministrationStatement; }
	}

	public final TableAdministrationStatementContext tableAdministrationStatement() throws RecognitionException {
		TableAdministrationStatementContext _localctx = new TableAdministrationStatementContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_tableAdministrationStatement);
		int _la;
		try {
			setState(4685);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ANALYZE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4642);
				((TableAdministrationStatementContext)_localctx).type = match(ANALYZE_SYMBOL);
				setState(4644);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					setState(4643);
					noWriteToBinLog();
					}
				}

				setState(4646);
				match(TABLE_SYMBOL);
				setState(4647);
				tableRefList();
				setState(4650);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,560,_ctx) ) {
				case 1:
					{
					setState(4648);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(4649);
					histogram();
					}
					break;
				}
				}
				break;
			case CHECK_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4652);
				((TableAdministrationStatementContext)_localctx).type = match(CHECK_SYMBOL);
				setState(4653);
				match(TABLE_SYMBOL);
				setState(4654);
				tableRefList();
				setState(4658);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & ((1L << (CHANGED_SYMBOL - 80)) | (1L << (EXTENDED_SYMBOL - 80)) | (1L << (FAST_SYMBOL - 80)))) != 0) || _la==MEDIUM_SYMBOL || _la==QUICK_SYMBOL || _la==FOR_SYMBOL) {
					{
					{
					setState(4655);
					checkOption();
					}
					}
					setState(4660);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case CHECKSUM_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(4661);
				((TableAdministrationStatementContext)_localctx).type = match(CHECKSUM_SYMBOL);
				setState(4662);
				match(TABLE_SYMBOL);
				setState(4663);
				tableRefList();
				setState(4665);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXTENDED_SYMBOL || _la==QUICK_SYMBOL) {
					{
					setState(4664);
					_la = _input.LA(1);
					if ( !(_la==EXTENDED_SYMBOL || _la==QUICK_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case OPTIMIZE_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(4667);
				((TableAdministrationStatementContext)_localctx).type = match(OPTIMIZE_SYMBOL);
				setState(4669);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					setState(4668);
					noWriteToBinLog();
					}
				}

				setState(4671);
				match(TABLE_SYMBOL);
				setState(4672);
				tableRefList();
				}
				break;
			case REPAIR_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(4673);
				((TableAdministrationStatementContext)_localctx).type = match(REPAIR_SYMBOL);
				setState(4675);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					setState(4674);
					noWriteToBinLog();
					}
				}

				setState(4677);
				match(TABLE_SYMBOL);
				setState(4678);
				tableRefList();
				setState(4682);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==EXTENDED_SYMBOL || _la==QUICK_SYMBOL || _la==USE_FRM_SYMBOL) {
					{
					{
					setState(4679);
					repairType();
					}
					}
					setState(4684);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HistogramContext extends ParserRuleContext {
		public TerminalNode UPDATE_SYMBOL() { return getToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public TerminalNode HISTOGRAM_SYMBOL() { return getToken(MySQLParser.HISTOGRAM_SYMBOL, 0); }
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public TerminalNode BUCKETS_SYMBOL() { return getToken(MySQLParser.BUCKETS_SYMBOL, 0); }
		public TerminalNode DROP_SYMBOL() { return getToken(MySQLParser.DROP_SYMBOL, 0); }
		public HistogramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_histogram; }
	}

	public final HistogramContext histogram() throws RecognitionException {
		HistogramContext _localctx = new HistogramContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_histogram);
		int _la;
		try {
			setState(4700);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UPDATE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4687);
				match(UPDATE_SYMBOL);
				setState(4688);
				match(HISTOGRAM_SYMBOL);
				setState(4689);
				match(ON_SYMBOL);
				setState(4690);
				identifierList();
				setState(4694);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH_SYMBOL) {
					{
					setState(4691);
					match(WITH_SYMBOL);
					setState(4692);
					match(INT_NUMBER);
					setState(4693);
					match(BUCKETS_SYMBOL);
					}
				}

				}
				break;
			case DROP_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4696);
				match(DROP_SYMBOL);
				setState(4697);
				match(HISTOGRAM_SYMBOL);
				setState(4698);
				match(ON_SYMBOL);
				setState(4699);
				identifierList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckOptionContext extends ParserRuleContext {
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode UPGRADE_SYMBOL() { return getToken(MySQLParser.UPGRADE_SYMBOL, 0); }
		public TerminalNode QUICK_SYMBOL() { return getToken(MySQLParser.QUICK_SYMBOL, 0); }
		public TerminalNode FAST_SYMBOL() { return getToken(MySQLParser.FAST_SYMBOL, 0); }
		public TerminalNode MEDIUM_SYMBOL() { return getToken(MySQLParser.MEDIUM_SYMBOL, 0); }
		public TerminalNode EXTENDED_SYMBOL() { return getToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		public TerminalNode CHANGED_SYMBOL() { return getToken(MySQLParser.CHANGED_SYMBOL, 0); }
		public CheckOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkOption; }
	}

	public final CheckOptionContext checkOption() throws RecognitionException {
		CheckOptionContext _localctx = new CheckOptionContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_checkOption);
		int _la;
		try {
			setState(4705);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4702);
				match(FOR_SYMBOL);
				setState(4703);
				match(UPGRADE_SYMBOL);
				}
				break;
			case CHANGED_SYMBOL:
			case EXTENDED_SYMBOL:
			case FAST_SYMBOL:
			case MEDIUM_SYMBOL:
			case QUICK_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4704);
				_la = _input.LA(1);
				if ( !(((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & ((1L << (CHANGED_SYMBOL - 80)) | (1L << (EXTENDED_SYMBOL - 80)) | (1L << (FAST_SYMBOL - 80)))) != 0) || _la==MEDIUM_SYMBOL || _la==QUICK_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RepairTypeContext extends ParserRuleContext {
		public TerminalNode QUICK_SYMBOL() { return getToken(MySQLParser.QUICK_SYMBOL, 0); }
		public TerminalNode EXTENDED_SYMBOL() { return getToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		public TerminalNode USE_FRM_SYMBOL() { return getToken(MySQLParser.USE_FRM_SYMBOL, 0); }
		public RepairTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repairType; }
	}

	public final RepairTypeContext repairType() throws RecognitionException {
		RepairTypeContext _localctx = new RepairTypeContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_repairType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4707);
			_la = _input.LA(1);
			if ( !(_la==EXTENDED_SYMBOL || _la==QUICK_SYMBOL || _la==USE_FRM_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InstallUninstallStatmentContext extends ParserRuleContext {
		public Token action;
		public Token type;
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode SONAME_SYMBOL() { return getToken(MySQLParser.SONAME_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode INSTALL_SYMBOL() { return getToken(MySQLParser.INSTALL_SYMBOL, 0); }
		public TerminalNode PLUGIN_SYMBOL() { return getToken(MySQLParser.PLUGIN_SYMBOL, 0); }
		public TextStringLiteralListContext textStringLiteralList() {
			return getRuleContext(TextStringLiteralListContext.class,0);
		}
		public TerminalNode COMPONENT_SYMBOL() { return getToken(MySQLParser.COMPONENT_SYMBOL, 0); }
		public PluginRefContext pluginRef() {
			return getRuleContext(PluginRefContext.class,0);
		}
		public TerminalNode UNINSTALL_SYMBOL() { return getToken(MySQLParser.UNINSTALL_SYMBOL, 0); }
		public List<ComponentRefContext> componentRef() {
			return getRuleContexts(ComponentRefContext.class);
		}
		public ComponentRefContext componentRef(int i) {
			return getRuleContext(ComponentRefContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public InstallUninstallStatmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_installUninstallStatment; }
	}

	public final InstallUninstallStatmentContext installUninstallStatment() throws RecognitionException {
		InstallUninstallStatmentContext _localctx = new InstallUninstallStatmentContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_installUninstallStatment);
		int _la;
		try {
			setState(4731);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,571,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4709);
				((InstallUninstallStatmentContext)_localctx).action = match(INSTALL_SYMBOL);
				setState(4710);
				((InstallUninstallStatmentContext)_localctx).type = match(PLUGIN_SYMBOL);
				setState(4711);
				identifier();
				setState(4712);
				match(SONAME_SYMBOL);
				setState(4713);
				textStringLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4715);
				((InstallUninstallStatmentContext)_localctx).action = match(INSTALL_SYMBOL);
				setState(4716);
				((InstallUninstallStatmentContext)_localctx).type = match(COMPONENT_SYMBOL);
				setState(4717);
				textStringLiteralList();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4718);
				((InstallUninstallStatmentContext)_localctx).action = match(UNINSTALL_SYMBOL);
				setState(4719);
				((InstallUninstallStatmentContext)_localctx).type = match(PLUGIN_SYMBOL);
				setState(4720);
				pluginRef();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4721);
				((InstallUninstallStatmentContext)_localctx).action = match(UNINSTALL_SYMBOL);
				setState(4722);
				((InstallUninstallStatmentContext)_localctx).type = match(COMPONENT_SYMBOL);
				setState(4723);
				componentRef();
				setState(4728);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(4724);
					match(COMMA_SYMBOL);
					setState(4725);
					componentRef();
					}
					}
					setState(4730);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetStatementContext extends ParserRuleContext {
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public StartOptionValueListContext startOptionValueList() {
			return getRuleContext(StartOptionValueListContext.class,0);
		}
		public SetStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setStatement; }
	}

	public final SetStatementContext setStatement() throws RecognitionException {
		SetStatementContext _localctx = new SetStatementContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_setStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4733);
			match(SET_SYMBOL);
			setState(4734);
			startOptionValueList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StartOptionValueListContext extends ParserRuleContext {
		public OptionValueNoOptionTypeContext optionValueNoOptionType() {
			return getRuleContext(OptionValueNoOptionTypeContext.class,0);
		}
		public OptionValueListContinuedContext optionValueListContinued() {
			return getRuleContext(OptionValueListContinuedContext.class,0);
		}
		public TerminalNode TRANSACTION_SYMBOL() { return getToken(MySQLParser.TRANSACTION_SYMBOL, 0); }
		public TransactionCharacteristicsContext transactionCharacteristics() {
			return getRuleContext(TransactionCharacteristicsContext.class,0);
		}
		public OptionTypeContext optionType() {
			return getRuleContext(OptionTypeContext.class,0);
		}
		public StartOptionValueListFollowingOptionTypeContext startOptionValueListFollowingOptionType() {
			return getRuleContext(StartOptionValueListFollowingOptionTypeContext.class,0);
		}
		public List<TerminalNode> PASSWORD_SYMBOL() { return getTokens(MySQLParser.PASSWORD_SYMBOL); }
		public TerminalNode PASSWORD_SYMBOL(int i) {
			return getToken(MySQLParser.PASSWORD_SYMBOL, i);
		}
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public TerminalNode OLD_PASSWORD_SYMBOL() { return getToken(MySQLParser.OLD_PASSWORD_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public ReplacePasswordContext replacePassword() {
			return getRuleContext(ReplacePasswordContext.class,0);
		}
		public RetainCurrentPasswordContext retainCurrentPassword() {
			return getRuleContext(RetainCurrentPasswordContext.class,0);
		}
		public TerminalNode TO_SYMBOL() { return getToken(MySQLParser.TO_SYMBOL, 0); }
		public TerminalNode RANDOM_SYMBOL() { return getToken(MySQLParser.RANDOM_SYMBOL, 0); }
		public StartOptionValueListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startOptionValueList; }
	}

	public final StartOptionValueListContext startOptionValueList() throws RecognitionException {
		StartOptionValueListContext _localctx = new StartOptionValueListContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_startOptionValueList);
		int _la;
		try {
			setState(4792);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,581,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4736);
				optionValueNoOptionType();
				setState(4737);
				optionValueListContinued();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4739);
				match(TRANSACTION_SYMBOL);
				setState(4740);
				transactionCharacteristics();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4741);
				optionType();
				setState(4742);
				startOptionValueListFollowingOptionType();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4744);
				match(PASSWORD_SYMBOL);
				setState(4747);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					setState(4745);
					match(FOR_SYMBOL);
					setState(4746);
					user();
					}
				}

				setState(4749);
				equal();
				setState(4776);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,577,_ctx) ) {
				case 1:
					{
					setState(4750);
					textString();
					setState(4752);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==REPLACE_SYMBOL) {
						{
						setState(4751);
						replacePassword();
						}
					}

					setState(4755);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==RETAIN_SYMBOL) {
						{
						setState(4754);
						retainCurrentPassword();
						}
					}

					}
					break;
				case 2:
					{
					setState(4757);
					textString();
					setState(4759);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==REPLACE_SYMBOL) {
						{
						setState(4758);
						replacePassword();
						}
					}

					setState(4762);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==RETAIN_SYMBOL) {
						{
						setState(4761);
						retainCurrentPassword();
						}
					}

					}
					break;
				case 3:
					{
					setState(4764);
					if (!(serverVersion < 50706)) throw new FailedPredicateException(this, "serverVersion < 50706");
					setState(4765);
					match(OLD_PASSWORD_SYMBOL);
					setState(4766);
					match(OPEN_PAR_SYMBOL);
					setState(4767);
					textString();
					setState(4768);
					match(CLOSE_PAR_SYMBOL);
					}
					break;
				case 4:
					{
					setState(4770);
					if (!(serverVersion < 80014)) throw new FailedPredicateException(this, "serverVersion < 80014");
					setState(4771);
					match(PASSWORD_SYMBOL);
					setState(4772);
					match(OPEN_PAR_SYMBOL);
					setState(4773);
					textString();
					setState(4774);
					match(CLOSE_PAR_SYMBOL);
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4778);
				if (!(serverVersion >= 80018)) throw new FailedPredicateException(this, "serverVersion >= 80018");
				setState(4779);
				match(PASSWORD_SYMBOL);
				setState(4782);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					setState(4780);
					match(FOR_SYMBOL);
					setState(4781);
					user();
					}
				}

				setState(4784);
				match(TO_SYMBOL);
				setState(4785);
				match(RANDOM_SYMBOL);
				setState(4787);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REPLACE_SYMBOL) {
					{
					setState(4786);
					replacePassword();
					}
				}

				setState(4790);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RETAIN_SYMBOL) {
					{
					setState(4789);
					retainCurrentPassword();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionCharacteristicsContext extends ParserRuleContext {
		public TransactionAccessModeContext transactionAccessMode() {
			return getRuleContext(TransactionAccessModeContext.class,0);
		}
		public IsolationLevelContext isolationLevel() {
			return getRuleContext(IsolationLevelContext.class,0);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public TransactionCharacteristicsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionCharacteristics; }
	}

	public final TransactionCharacteristicsContext transactionCharacteristics() throws RecognitionException {
		TransactionCharacteristicsContext _localctx = new TransactionCharacteristicsContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_transactionCharacteristics);
		int _la;
		try {
			setState(4803);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READ_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4794);
				transactionAccessMode();
				setState(4796);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ISOLATION_SYMBOL) {
					{
					setState(4795);
					isolationLevel();
					}
				}

				}
				break;
			case ISOLATION_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4798);
				isolationLevel();
				setState(4801);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(4799);
					match(COMMA_SYMBOL);
					setState(4800);
					transactionAccessMode();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionAccessModeContext extends ParserRuleContext {
		public TerminalNode READ_SYMBOL() { return getToken(MySQLParser.READ_SYMBOL, 0); }
		public TerminalNode WRITE_SYMBOL() { return getToken(MySQLParser.WRITE_SYMBOL, 0); }
		public TerminalNode ONLY_SYMBOL() { return getToken(MySQLParser.ONLY_SYMBOL, 0); }
		public TransactionAccessModeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionAccessMode; }
	}

	public final TransactionAccessModeContext transactionAccessMode() throws RecognitionException {
		TransactionAccessModeContext _localctx = new TransactionAccessModeContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_transactionAccessMode);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4805);
			match(READ_SYMBOL);
			setState(4806);
			_la = _input.LA(1);
			if ( !(_la==ONLY_SYMBOL || _la==WRITE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IsolationLevelContext extends ParserRuleContext {
		public TerminalNode ISOLATION_SYMBOL() { return getToken(MySQLParser.ISOLATION_SYMBOL, 0); }
		public TerminalNode LEVEL_SYMBOL() { return getToken(MySQLParser.LEVEL_SYMBOL, 0); }
		public TerminalNode REPEATABLE_SYMBOL() { return getToken(MySQLParser.REPEATABLE_SYMBOL, 0); }
		public TerminalNode READ_SYMBOL() { return getToken(MySQLParser.READ_SYMBOL, 0); }
		public TerminalNode SERIALIZABLE_SYMBOL() { return getToken(MySQLParser.SERIALIZABLE_SYMBOL, 0); }
		public TerminalNode COMMITTED_SYMBOL() { return getToken(MySQLParser.COMMITTED_SYMBOL, 0); }
		public TerminalNode UNCOMMITTED_SYMBOL() { return getToken(MySQLParser.UNCOMMITTED_SYMBOL, 0); }
		public IsolationLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_isolationLevel; }
	}

	public final IsolationLevelContext isolationLevel() throws RecognitionException {
		IsolationLevelContext _localctx = new IsolationLevelContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_isolationLevel);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4808);
			match(ISOLATION_SYMBOL);
			setState(4809);
			match(LEVEL_SYMBOL);
			setState(4815);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REPEATABLE_SYMBOL:
				{
				setState(4810);
				match(REPEATABLE_SYMBOL);
				setState(4811);
				match(READ_SYMBOL);
				}
				break;
			case READ_SYMBOL:
				{
				setState(4812);
				match(READ_SYMBOL);
				setState(4813);
				_la = _input.LA(1);
				if ( !(_la==COMMITTED_SYMBOL || _la==UNCOMMITTED_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SERIALIZABLE_SYMBOL:
				{
				setState(4814);
				match(SERIALIZABLE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptionValueListContinuedContext extends ParserRuleContext {
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public List<OptionValueContext> optionValue() {
			return getRuleContexts(OptionValueContext.class);
		}
		public OptionValueContext optionValue(int i) {
			return getRuleContext(OptionValueContext.class,i);
		}
		public OptionValueListContinuedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optionValueListContinued; }
	}

	public final OptionValueListContinuedContext optionValueListContinued() throws RecognitionException {
		OptionValueListContinuedContext _localctx = new OptionValueListContinuedContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_optionValueListContinued);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4821);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(4817);
				match(COMMA_SYMBOL);
				setState(4818);
				optionValue();
				}
				}
				setState(4823);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptionValueNoOptionTypeContext extends ParserRuleContext {
		public InternalVariableNameContext internalVariableName() {
			return getRuleContext(InternalVariableNameContext.class,0);
		}
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public SetExprOrDefaultContext setExprOrDefault() {
			return getRuleContext(SetExprOrDefaultContext.class,0);
		}
		public CharsetClauseContext charsetClause() {
			return getRuleContext(CharsetClauseContext.class,0);
		}
		public UserVariableContext userVariable() {
			return getRuleContext(UserVariableContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public SetSystemVariableContext setSystemVariable() {
			return getRuleContext(SetSystemVariableContext.class,0);
		}
		public TerminalNode NAMES_SYMBOL() { return getToken(MySQLParser.NAMES_SYMBOL, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public CollateContext collate() {
			return getRuleContext(CollateContext.class,0);
		}
		public OptionValueNoOptionTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optionValueNoOptionType; }
	}

	public final OptionValueNoOptionTypeContext optionValueNoOptionType() throws RecognitionException {
		OptionValueNoOptionTypeContext _localctx = new OptionValueNoOptionTypeContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_optionValueNoOptionType);
		int _la;
		try {
			setState(4849);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,589,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4824);
				internalVariableName();
				setState(4825);
				equal();
				setState(4826);
				setExprOrDefault();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4828);
				charsetClause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4829);
				userVariable();
				setState(4830);
				equal();
				setState(4831);
				expr(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4833);
				setSystemVariable();
				setState(4834);
				equal();
				setState(4835);
				setExprOrDefault();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4837);
				match(NAMES_SYMBOL);
				setState(4847);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,588,_ctx) ) {
				case 1:
					{
					setState(4838);
					equal();
					setState(4839);
					expr(0);
					}
					break;
				case 2:
					{
					setState(4841);
					charsetName();
					setState(4843);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COLLATE_SYMBOL) {
						{
						setState(4842);
						collate();
						}
					}

					}
					break;
				case 3:
					{
					setState(4845);
					if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
					setState(4846);
					match(DEFAULT_SYMBOL);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptionValueContext extends ParserRuleContext {
		public OptionTypeContext optionType() {
			return getRuleContext(OptionTypeContext.class,0);
		}
		public InternalVariableNameContext internalVariableName() {
			return getRuleContext(InternalVariableNameContext.class,0);
		}
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public SetExprOrDefaultContext setExprOrDefault() {
			return getRuleContext(SetExprOrDefaultContext.class,0);
		}
		public OptionValueNoOptionTypeContext optionValueNoOptionType() {
			return getRuleContext(OptionValueNoOptionTypeContext.class,0);
		}
		public OptionValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optionValue; }
	}

	public final OptionValueContext optionValue() throws RecognitionException {
		OptionValueContext _localctx = new OptionValueContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_optionValue);
		try {
			setState(4857);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,590,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4851);
				optionType();
				setState(4852);
				internalVariableName();
				setState(4853);
				equal();
				setState(4854);
				setExprOrDefault();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4856);
				optionValueNoOptionType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetSystemVariableContext extends ParserRuleContext {
		public TerminalNode AT_AT_SIGN_SYMBOL() { return getToken(MySQLParser.AT_AT_SIGN_SYMBOL, 0); }
		public InternalVariableNameContext internalVariableName() {
			return getRuleContext(InternalVariableNameContext.class,0);
		}
		public SetVarIdentTypeContext setVarIdentType() {
			return getRuleContext(SetVarIdentTypeContext.class,0);
		}
		public SetSystemVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setSystemVariable; }
	}

	public final SetSystemVariableContext setSystemVariable() throws RecognitionException {
		SetSystemVariableContext _localctx = new SetSystemVariableContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_setSystemVariable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4859);
			match(AT_AT_SIGN_SYMBOL);
			setState(4861);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,591,_ctx) ) {
			case 1:
				{
				setState(4860);
				setVarIdentType();
				}
				break;
			}
			setState(4863);
			internalVariableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StartOptionValueListFollowingOptionTypeContext extends ParserRuleContext {
		public OptionValueFollowingOptionTypeContext optionValueFollowingOptionType() {
			return getRuleContext(OptionValueFollowingOptionTypeContext.class,0);
		}
		public OptionValueListContinuedContext optionValueListContinued() {
			return getRuleContext(OptionValueListContinuedContext.class,0);
		}
		public TerminalNode TRANSACTION_SYMBOL() { return getToken(MySQLParser.TRANSACTION_SYMBOL, 0); }
		public TransactionCharacteristicsContext transactionCharacteristics() {
			return getRuleContext(TransactionCharacteristicsContext.class,0);
		}
		public StartOptionValueListFollowingOptionTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startOptionValueListFollowingOptionType; }
	}

	public final StartOptionValueListFollowingOptionTypeContext startOptionValueListFollowingOptionType() throws RecognitionException {
		StartOptionValueListFollowingOptionTypeContext _localctx = new StartOptionValueListFollowingOptionTypeContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_startOptionValueListFollowingOptionType);
		try {
			setState(4870);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,592,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4865);
				optionValueFollowingOptionType();
				setState(4866);
				optionValueListContinued();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4868);
				match(TRANSACTION_SYMBOL);
				setState(4869);
				transactionCharacteristics();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptionValueFollowingOptionTypeContext extends ParserRuleContext {
		public InternalVariableNameContext internalVariableName() {
			return getRuleContext(InternalVariableNameContext.class,0);
		}
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public SetExprOrDefaultContext setExprOrDefault() {
			return getRuleContext(SetExprOrDefaultContext.class,0);
		}
		public OptionValueFollowingOptionTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optionValueFollowingOptionType; }
	}

	public final OptionValueFollowingOptionTypeContext optionValueFollowingOptionType() throws RecognitionException {
		OptionValueFollowingOptionTypeContext _localctx = new OptionValueFollowingOptionTypeContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_optionValueFollowingOptionType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4872);
			internalVariableName();
			setState(4873);
			equal();
			setState(4874);
			setExprOrDefault();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetExprOrDefaultContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public TerminalNode ROW_SYMBOL() { return getToken(MySQLParser.ROW_SYMBOL, 0); }
		public TerminalNode SYSTEM_SYMBOL() { return getToken(MySQLParser.SYSTEM_SYMBOL, 0); }
		public SetExprOrDefaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setExprOrDefault; }
	}

	public final SetExprOrDefaultContext setExprOrDefault() throws RecognitionException {
		SetExprOrDefaultContext _localctx = new SetExprOrDefaultContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_setExprOrDefault);
		int _la;
		try {
			setState(4880);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,593,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4876);
				expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4877);
				_la = _input.LA(1);
				if ( !(((((_la - 427)) & ~0x3f) == 0 && ((1L << (_la - 427)) & ((1L << (ALL_SYMBOL - 427)) | (1L << (BINARY_SYMBOL - 427)) | (1L << (DEFAULT_SYMBOL - 427)))) != 0) || _la==ON_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4878);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(4879);
				_la = _input.LA(1);
				if ( !(_la==ROW_SYMBOL || _la==SYSTEM_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowStatementContext extends ParserRuleContext {
		public Token value;
		public Token object;
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode STATUS_SYMBOL() { return getToken(MySQLParser.STATUS_SYMBOL, 0); }
		public TerminalNode TABLES_SYMBOL() { return getToken(MySQLParser.TABLES_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public TerminalNode EVENTS_SYMBOL() { return getToken(MySQLParser.EVENTS_SYMBOL, 0); }
		public FromOrInContext fromOrIn() {
			return getRuleContext(FromOrInContext.class,0);
		}
		public TerminalNode COUNT_SYMBOL() { return getToken(MySQLParser.COUNT_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode MULT_OPERATOR() { return getToken(MySQLParser.MULT_OPERATOR, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public CharsetContext charset() {
			return getRuleContext(CharsetContext.class,0);
		}
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public TerminalNode USING_SYMBOL() { return getToken(MySQLParser.USING_SYMBOL, 0); }
		public UserListContext userList() {
			return getRuleContext(UserListContext.class,0);
		}
		public TerminalNode CODE_SYMBOL() { return getToken(MySQLParser.CODE_SYMBOL, 0); }
		public ProcedureRefContext procedureRef() {
			return getRuleContext(ProcedureRefContext.class,0);
		}
		public FunctionRefContext functionRef() {
			return getRuleContext(FunctionRefContext.class,0);
		}
		public TerminalNode AUTHORS_SYMBOL() { return getToken(MySQLParser.AUTHORS_SYMBOL, 0); }
		public TerminalNode DATABASES_SYMBOL() { return getToken(MySQLParser.DATABASES_SYMBOL, 0); }
		public TerminalNode TRIGGERS_SYMBOL() { return getToken(MySQLParser.TRIGGERS_SYMBOL, 0); }
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TerminalNode OPEN_SYMBOL() { return getToken(MySQLParser.OPEN_SYMBOL, 0); }
		public TerminalNode PLUGINS_SYMBOL() { return getToken(MySQLParser.PLUGINS_SYMBOL, 0); }
		public TerminalNode ENGINE_SYMBOL() { return getToken(MySQLParser.ENGINE_SYMBOL, 0); }
		public TerminalNode MUTEX_SYMBOL() { return getToken(MySQLParser.MUTEX_SYMBOL, 0); }
		public TerminalNode LOGS_SYMBOL() { return getToken(MySQLParser.LOGS_SYMBOL, 0); }
		public TerminalNode COLUMNS_SYMBOL() { return getToken(MySQLParser.COLUMNS_SYMBOL, 0); }
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode IN_SYMBOL() { return getToken(MySQLParser.IN_SYMBOL, 0); }
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public TerminalNode MASTER_SYMBOL() { return getToken(MySQLParser.MASTER_SYMBOL, 0); }
		public TerminalNode SLAVE_SYMBOL() { return getToken(MySQLParser.SLAVE_SYMBOL, 0); }
		public TerminalNode ENGINES_SYMBOL() { return getToken(MySQLParser.ENGINES_SYMBOL, 0); }
		public TerminalNode WARNINGS_SYMBOL() { return getToken(MySQLParser.WARNINGS_SYMBOL, 0); }
		public TerminalNode ERRORS_SYMBOL() { return getToken(MySQLParser.ERRORS_SYMBOL, 0); }
		public TerminalNode PROFILES_SYMBOL() { return getToken(MySQLParser.PROFILES_SYMBOL, 0); }
		public TerminalNode PROFILE_SYMBOL() { return getToken(MySQLParser.PROFILE_SYMBOL, 0); }
		public TerminalNode PROCESSLIST_SYMBOL() { return getToken(MySQLParser.PROCESSLIST_SYMBOL, 0); }
		public TerminalNode COLLATION_SYMBOL() { return getToken(MySQLParser.COLLATION_SYMBOL, 0); }
		public TerminalNode CONTRIBUTORS_SYMBOL() { return getToken(MySQLParser.CONTRIBUTORS_SYMBOL, 0); }
		public TerminalNode PRIVILEGES_SYMBOL() { return getToken(MySQLParser.PRIVILEGES_SYMBOL, 0); }
		public TerminalNode GRANTS_SYMBOL() { return getToken(MySQLParser.GRANTS_SYMBOL, 0); }
		public TerminalNode CREATE_SYMBOL() { return getToken(MySQLParser.CREATE_SYMBOL, 0); }
		public TerminalNode PROCEDURE_SYMBOL() { return getToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
		public TerminalNode FUNCTION_SYMBOL() { return getToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		public EngineRefContext engineRef() {
			return getRuleContext(EngineRefContext.class,0);
		}
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode HOSTS_SYMBOL() { return getToken(MySQLParser.HOSTS_SYMBOL, 0); }
		public NonBlockingContext nonBlocking() {
			return getRuleContext(NonBlockingContext.class,0);
		}
		public TerminalNode BINLOG_SYMBOL() { return getToken(MySQLParser.BINLOG_SYMBOL, 0); }
		public TerminalNode RELAYLOG_SYMBOL() { return getToken(MySQLParser.RELAYLOG_SYMBOL, 0); }
		public TerminalNode INDEX_SYMBOL() { return getToken(MySQLParser.INDEX_SYMBOL, 0); }
		public TerminalNode INDEXES_SYMBOL() { return getToken(MySQLParser.INDEXES_SYMBOL, 0); }
		public TerminalNode KEYS_SYMBOL() { return getToken(MySQLParser.KEYS_SYMBOL, 0); }
		public TerminalNode VARIABLES_SYMBOL() { return getToken(MySQLParser.VARIABLES_SYMBOL, 0); }
		public SchemaRefContext schemaRef() {
			return getRuleContext(SchemaRefContext.class,0);
		}
		public EventRefContext eventRef() {
			return getRuleContext(EventRefContext.class,0);
		}
		public TriggerRefContext triggerRef() {
			return getRuleContext(TriggerRefContext.class,0);
		}
		public ViewRefContext viewRef() {
			return getRuleContext(ViewRefContext.class,0);
		}
		public LikeOrWhereContext likeOrWhere() {
			return getRuleContext(LikeOrWhereContext.class,0);
		}
		public ShowCommandTypeContext showCommandType() {
			return getRuleContext(ShowCommandTypeContext.class,0);
		}
		public InDbContext inDb() {
			return getRuleContext(InDbContext.class,0);
		}
		public TerminalNode FULL_SYMBOL() { return getToken(MySQLParser.FULL_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public Ulonglong_numberContext ulonglong_number() {
			return getRuleContext(Ulonglong_numberContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public ChannelContext channel() {
			return getRuleContext(ChannelContext.class,0);
		}
		public TerminalNode EXTENDED_SYMBOL() { return getToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public TerminalNode STORAGE_SYMBOL() { return getToken(MySQLParser.STORAGE_SYMBOL, 0); }
		public List<ProfileTypeContext> profileType() {
			return getRuleContexts(ProfileTypeContext.class);
		}
		public ProfileTypeContext profileType(int i) {
			return getRuleContext(ProfileTypeContext.class,i);
		}
		public TerminalNode QUERY_SYMBOL() { return getToken(MySQLParser.QUERY_SYMBOL, 0); }
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public OptionTypeContext optionType() {
			return getRuleContext(OptionTypeContext.class,0);
		}
		public TerminalNode DATABASE_SYMBOL() { return getToken(MySQLParser.DATABASE_SYMBOL, 0); }
		public TerminalNode EVENT_SYMBOL() { return getToken(MySQLParser.EVENT_SYMBOL, 0); }
		public TerminalNode TRIGGER_SYMBOL() { return getToken(MySQLParser.TRIGGER_SYMBOL, 0); }
		public TerminalNode VIEW_SYMBOL() { return getToken(MySQLParser.VIEW_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ShowStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showStatement; }
	}

	public final ShowStatementContext showStatement() throws RecognitionException {
		ShowStatementContext _localctx = new ShowStatementContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_showStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4882);
			match(SHOW_SYMBOL);
			setState(5102);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,637,_ctx) ) {
			case 1:
				{
				setState(4883);
				if (!(serverVersion < 50700)) throw new FailedPredicateException(this, "serverVersion < 50700");
				setState(4884);
				((ShowStatementContext)_localctx).value = match(AUTHORS_SYMBOL);
				}
				break;
			case 2:
				{
				setState(4885);
				((ShowStatementContext)_localctx).value = match(DATABASES_SYMBOL);
				setState(4887);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					setState(4886);
					likeOrWhere();
					}
				}

				}
				break;
			case 3:
				{
				setState(4890);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,595,_ctx) ) {
				case 1:
					{
					setState(4889);
					showCommandType();
					}
					break;
				}
				setState(4892);
				((ShowStatementContext)_localctx).value = match(TABLES_SYMBOL);
				setState(4894);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
					{
					setState(4893);
					inDb();
					}
				}

				setState(4897);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					setState(4896);
					likeOrWhere();
					}
				}

				}
				break;
			case 4:
				{
				setState(4900);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL_SYMBOL) {
					{
					setState(4899);
					match(FULL_SYMBOL);
					}
				}

				setState(4902);
				((ShowStatementContext)_localctx).value = match(TRIGGERS_SYMBOL);
				setState(4904);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
					{
					setState(4903);
					inDb();
					}
				}

				setState(4907);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					setState(4906);
					likeOrWhere();
					}
				}

				}
				break;
			case 5:
				{
				setState(4909);
				((ShowStatementContext)_localctx).value = match(EVENTS_SYMBOL);
				setState(4911);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
					{
					setState(4910);
					inDb();
					}
				}

				setState(4914);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					setState(4913);
					likeOrWhere();
					}
				}

				}
				break;
			case 6:
				{
				setState(4916);
				((ShowStatementContext)_localctx).value = match(TABLE_SYMBOL);
				setState(4917);
				match(STATUS_SYMBOL);
				setState(4919);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
					{
					setState(4918);
					inDb();
					}
				}

				setState(4922);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					setState(4921);
					likeOrWhere();
					}
				}

				}
				break;
			case 7:
				{
				setState(4924);
				((ShowStatementContext)_localctx).value = match(OPEN_SYMBOL);
				setState(4925);
				match(TABLES_SYMBOL);
				setState(4927);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
					{
					setState(4926);
					inDb();
					}
				}

				setState(4930);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					setState(4929);
					likeOrWhere();
					}
				}

				}
				break;
			case 8:
				{
				setState(4932);
				((ShowStatementContext)_localctx).value = match(PLUGINS_SYMBOL);
				}
				break;
			case 9:
				{
				setState(4933);
				((ShowStatementContext)_localctx).value = match(ENGINE_SYMBOL);
				setState(4936);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,607,_ctx) ) {
				case 1:
					{
					setState(4934);
					engineRef();
					}
					break;
				case 2:
					{
					setState(4935);
					match(ALL_SYMBOL);
					}
					break;
				}
				setState(4938);
				_la = _input.LA(1);
				if ( !(_la==LOGS_SYMBOL || _la==MUTEX_SYMBOL || _la==STATUS_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 10:
				{
				setState(4940);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,608,_ctx) ) {
				case 1:
					{
					setState(4939);
					showCommandType();
					}
					break;
				}
				setState(4942);
				((ShowStatementContext)_localctx).value = match(COLUMNS_SYMBOL);
				setState(4943);
				_la = _input.LA(1);
				if ( !(_la==FROM_SYMBOL || _la==IN_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4944);
				tableRef();
				setState(4946);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
					{
					setState(4945);
					inDb();
					}
				}

				setState(4949);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					setState(4948);
					likeOrWhere();
					}
				}

				}
				break;
			case 11:
				{
				setState(4951);
				_la = _input.LA(1);
				if ( !(_la==MASTER_SYMBOL || _la==BINARY_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4952);
				((ShowStatementContext)_localctx).value = match(LOGS_SYMBOL);
				}
				break;
			case 12:
				{
				setState(4953);
				((ShowStatementContext)_localctx).value = match(SLAVE_SYMBOL);
				setState(4960);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case HOSTS_SYMBOL:
					{
					setState(4954);
					match(HOSTS_SYMBOL);
					}
					break;
				case STATUS_SYMBOL:
					{
					setState(4955);
					match(STATUS_SYMBOL);
					setState(4956);
					nonBlocking();
					setState(4958);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,611,_ctx) ) {
					case 1:
						{
						setState(4957);
						channel();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 13:
				{
				setState(4962);
				((ShowStatementContext)_localctx).value = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINLOG_SYMBOL || _la==RELAYLOG_SYMBOL) ) {
					((ShowStatementContext)_localctx).value = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4963);
				match(EVENTS_SYMBOL);
				setState(4966);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,613,_ctx) ) {
				case 1:
					{
					setState(4964);
					match(IN_SYMBOL);
					setState(4965);
					textString();
					}
					break;
				}
				setState(4970);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,614,_ctx) ) {
				case 1:
					{
					setState(4968);
					match(FROM_SYMBOL);
					setState(4969);
					ulonglong_number();
					}
					break;
				}
				setState(4973);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,615,_ctx) ) {
				case 1:
					{
					setState(4972);
					limitClause();
					}
					break;
				}
				setState(4976);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,616,_ctx) ) {
				case 1:
					{
					setState(4975);
					channel();
					}
					break;
				}
				}
				break;
			case 14:
				{
				setState(4980);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,617,_ctx) ) {
				case 1:
					{
					setState(4978);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(4979);
					match(EXTENDED_SYMBOL);
					}
					break;
				}
				setState(4982);
				((ShowStatementContext)_localctx).value = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEXES_SYMBOL || _la==INDEX_SYMBOL || _la==KEYS_SYMBOL) ) {
					((ShowStatementContext)_localctx).value = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4983);
				fromOrIn();
				setState(4984);
				tableRef();
				setState(4986);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
					{
					setState(4985);
					inDb();
					}
				}

				setState(4989);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE_SYMBOL) {
					{
					setState(4988);
					whereClause();
					}
				}

				}
				break;
			case 15:
				{
				setState(4992);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE_SYMBOL) {
					{
					setState(4991);
					match(STORAGE_SYMBOL);
					}
				}

				setState(4994);
				((ShowStatementContext)_localctx).value = match(ENGINES_SYMBOL);
				}
				break;
			case 16:
				{
				setState(4995);
				match(COUNT_SYMBOL);
				setState(4996);
				match(OPEN_PAR_SYMBOL);
				setState(4997);
				match(MULT_OPERATOR);
				setState(4998);
				match(CLOSE_PAR_SYMBOL);
				setState(4999);
				((ShowStatementContext)_localctx).value = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ERRORS_SYMBOL || _la==WARNINGS_SYMBOL) ) {
					((ShowStatementContext)_localctx).value = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 17:
				{
				setState(5000);
				((ShowStatementContext)_localctx).value = match(WARNINGS_SYMBOL);
				setState(5002);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT_SYMBOL) {
					{
					setState(5001);
					limitClause();
					}
				}

				}
				break;
			case 18:
				{
				setState(5004);
				((ShowStatementContext)_localctx).value = match(ERRORS_SYMBOL);
				setState(5006);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT_SYMBOL) {
					{
					setState(5005);
					limitClause();
					}
				}

				}
				break;
			case 19:
				{
				setState(5008);
				((ShowStatementContext)_localctx).value = match(PROFILES_SYMBOL);
				}
				break;
			case 20:
				{
				setState(5009);
				((ShowStatementContext)_localctx).value = match(PROFILE_SYMBOL);
				setState(5018);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (BLOCK_SYMBOL - 73)) | (1L << (CONTEXT_SYMBOL - 73)) | (1L << (CPU_SYMBOL - 73)))) != 0) || _la==IPC_SYMBOL || _la==MEMORY_SYMBOL || _la==PAGE_SYMBOL || _la==SOURCE_SYMBOL || _la==SWAPS_SYMBOL || _la==ALL_SYMBOL) {
					{
					setState(5010);
					profileType();
					setState(5015);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA_SYMBOL) {
						{
						{
						setState(5011);
						match(COMMA_SYMBOL);
						setState(5012);
						profileType();
						}
						}
						setState(5017);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(5023);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					setState(5020);
					match(FOR_SYMBOL);
					setState(5021);
					match(QUERY_SYMBOL);
					setState(5022);
					match(INT_NUMBER);
					}
				}

				setState(5026);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT_SYMBOL) {
					{
					setState(5025);
					limitClause();
					}
				}

				}
				break;
			case 21:
				{
				setState(5029);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GLOBAL_SYMBOL || _la==LOCAL_SYMBOL || _la==SESSION_SYMBOL || _la==PERSIST_SYMBOL || _la==PERSIST_ONLY_SYMBOL) {
					{
					setState(5028);
					optionType();
					}
				}

				setState(5031);
				((ShowStatementContext)_localctx).value = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==STATUS_SYMBOL || _la==VARIABLES_SYMBOL) ) {
					((ShowStatementContext)_localctx).value = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5033);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					setState(5032);
					likeOrWhere();
					}
				}

				}
				break;
			case 22:
				{
				setState(5036);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL_SYMBOL) {
					{
					setState(5035);
					match(FULL_SYMBOL);
					}
				}

				setState(5038);
				((ShowStatementContext)_localctx).value = match(PROCESSLIST_SYMBOL);
				}
				break;
			case 23:
				{
				setState(5039);
				charset();
				setState(5041);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					setState(5040);
					likeOrWhere();
					}
				}

				}
				break;
			case 24:
				{
				setState(5043);
				((ShowStatementContext)_localctx).value = match(COLLATION_SYMBOL);
				setState(5045);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					setState(5044);
					likeOrWhere();
					}
				}

				}
				break;
			case 25:
				{
				setState(5047);
				if (!(serverVersion < 50700)) throw new FailedPredicateException(this, "serverVersion < 50700");
				setState(5048);
				((ShowStatementContext)_localctx).value = match(CONTRIBUTORS_SYMBOL);
				}
				break;
			case 26:
				{
				setState(5049);
				((ShowStatementContext)_localctx).value = match(PRIVILEGES_SYMBOL);
				}
				break;
			case 27:
				{
				setState(5050);
				((ShowStatementContext)_localctx).value = match(GRANTS_SYMBOL);
				setState(5053);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					setState(5051);
					match(FOR_SYMBOL);
					setState(5052);
					user();
					}
				}

				}
				break;
			case 28:
				{
				setState(5055);
				((ShowStatementContext)_localctx).value = match(GRANTS_SYMBOL);
				setState(5056);
				match(FOR_SYMBOL);
				setState(5057);
				user();
				setState(5058);
				match(USING_SYMBOL);
				setState(5059);
				userList();
				}
				break;
			case 29:
				{
				setState(5061);
				((ShowStatementContext)_localctx).value = match(MASTER_SYMBOL);
				setState(5062);
				match(STATUS_SYMBOL);
				}
				break;
			case 30:
				{
				setState(5063);
				((ShowStatementContext)_localctx).value = match(CREATE_SYMBOL);
				setState(5084);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,634,_ctx) ) {
				case 1:
					{
					setState(5064);
					((ShowStatementContext)_localctx).object = match(DATABASE_SYMBOL);
					setState(5066);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,633,_ctx) ) {
					case 1:
						{
						setState(5065);
						ifNotExists();
						}
						break;
					}
					setState(5068);
					schemaRef();
					}
					break;
				case 2:
					{
					setState(5069);
					((ShowStatementContext)_localctx).object = match(EVENT_SYMBOL);
					setState(5070);
					eventRef();
					}
					break;
				case 3:
					{
					setState(5071);
					((ShowStatementContext)_localctx).object = match(FUNCTION_SYMBOL);
					setState(5072);
					functionRef();
					}
					break;
				case 4:
					{
					setState(5073);
					((ShowStatementContext)_localctx).object = match(PROCEDURE_SYMBOL);
					setState(5074);
					procedureRef();
					}
					break;
				case 5:
					{
					setState(5075);
					((ShowStatementContext)_localctx).object = match(TABLE_SYMBOL);
					setState(5076);
					tableRef();
					}
					break;
				case 6:
					{
					setState(5077);
					((ShowStatementContext)_localctx).object = match(TRIGGER_SYMBOL);
					setState(5078);
					triggerRef();
					}
					break;
				case 7:
					{
					setState(5079);
					((ShowStatementContext)_localctx).object = match(VIEW_SYMBOL);
					setState(5080);
					viewRef();
					}
					break;
				case 8:
					{
					setState(5081);
					if (!(serverVersion >= 50704)) throw new FailedPredicateException(this, "serverVersion >= 50704");
					setState(5082);
					((ShowStatementContext)_localctx).object = match(USER_SYMBOL);
					setState(5083);
					user();
					}
					break;
				}
				}
				break;
			case 31:
				{
				setState(5086);
				((ShowStatementContext)_localctx).value = match(PROCEDURE_SYMBOL);
				setState(5087);
				match(STATUS_SYMBOL);
				setState(5089);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					setState(5088);
					likeOrWhere();
					}
				}

				}
				break;
			case 32:
				{
				setState(5091);
				((ShowStatementContext)_localctx).value = match(FUNCTION_SYMBOL);
				setState(5092);
				match(STATUS_SYMBOL);
				setState(5094);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					setState(5093);
					likeOrWhere();
					}
				}

				}
				break;
			case 33:
				{
				setState(5096);
				((ShowStatementContext)_localctx).value = match(PROCEDURE_SYMBOL);
				setState(5097);
				match(CODE_SYMBOL);
				setState(5098);
				procedureRef();
				}
				break;
			case 34:
				{
				setState(5099);
				((ShowStatementContext)_localctx).value = match(FUNCTION_SYMBOL);
				setState(5100);
				match(CODE_SYMBOL);
				setState(5101);
				functionRef();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowCommandTypeContext extends ParserRuleContext {
		public TerminalNode FULL_SYMBOL() { return getToken(MySQLParser.FULL_SYMBOL, 0); }
		public TerminalNode EXTENDED_SYMBOL() { return getToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		public ShowCommandTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCommandType; }
	}

	public final ShowCommandTypeContext showCommandType() throws RecognitionException {
		ShowCommandTypeContext _localctx = new ShowCommandTypeContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_showCommandType);
		int _la;
		try {
			setState(5110);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,639,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5104);
				match(FULL_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5105);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(5106);
				match(EXTENDED_SYMBOL);
				setState(5108);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL_SYMBOL) {
					{
					setState(5107);
					match(FULL_SYMBOL);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NonBlockingContext extends ParserRuleContext {
		public TerminalNode NONBLOCKING_SYMBOL() { return getToken(MySQLParser.NONBLOCKING_SYMBOL, 0); }
		public NonBlockingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonBlocking; }
	}

	public final NonBlockingContext nonBlocking() throws RecognitionException {
		NonBlockingContext _localctx = new NonBlockingContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_nonBlocking);
		try {
			setState(5117);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,641,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5112);
				if (!(serverVersion >= 50700 && serverVersion < 50706)) throw new FailedPredicateException(this, "serverVersion >= 50700 && serverVersion < 50706");
				setState(5114);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,640,_ctx) ) {
				case 1:
					{
					setState(5113);
					match(NONBLOCKING_SYMBOL);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromOrInContext extends ParserRuleContext {
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode IN_SYMBOL() { return getToken(MySQLParser.IN_SYMBOL, 0); }
		public FromOrInContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromOrIn; }
	}

	public final FromOrInContext fromOrIn() throws RecognitionException {
		FromOrInContext _localctx = new FromOrInContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_fromOrIn);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5119);
			_la = _input.LA(1);
			if ( !(_la==FROM_SYMBOL || _la==IN_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InDbContext extends ParserRuleContext {
		public FromOrInContext fromOrIn() {
			return getRuleContext(FromOrInContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public InDbContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inDb; }
	}

	public final InDbContext inDb() throws RecognitionException {
		InDbContext _localctx = new InDbContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_inDb);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5121);
			fromOrIn();
			setState(5122);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProfileTypeContext extends ParserRuleContext {
		public TerminalNode BLOCK_SYMBOL() { return getToken(MySQLParser.BLOCK_SYMBOL, 0); }
		public TerminalNode IO_SYMBOL() { return getToken(MySQLParser.IO_SYMBOL, 0); }
		public TerminalNode CONTEXT_SYMBOL() { return getToken(MySQLParser.CONTEXT_SYMBOL, 0); }
		public TerminalNode SWITCHES_SYMBOL() { return getToken(MySQLParser.SWITCHES_SYMBOL, 0); }
		public TerminalNode PAGE_SYMBOL() { return getToken(MySQLParser.PAGE_SYMBOL, 0); }
		public TerminalNode FAULTS_SYMBOL() { return getToken(MySQLParser.FAULTS_SYMBOL, 0); }
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode CPU_SYMBOL() { return getToken(MySQLParser.CPU_SYMBOL, 0); }
		public TerminalNode IPC_SYMBOL() { return getToken(MySQLParser.IPC_SYMBOL, 0); }
		public TerminalNode MEMORY_SYMBOL() { return getToken(MySQLParser.MEMORY_SYMBOL, 0); }
		public TerminalNode SOURCE_SYMBOL() { return getToken(MySQLParser.SOURCE_SYMBOL, 0); }
		public TerminalNode SWAPS_SYMBOL() { return getToken(MySQLParser.SWAPS_SYMBOL, 0); }
		public ProfileTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_profileType; }
	}

	public final ProfileTypeContext profileType() throws RecognitionException {
		ProfileTypeContext _localctx = new ProfileTypeContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_profileType);
		int _la;
		try {
			setState(5131);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BLOCK_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5124);
				match(BLOCK_SYMBOL);
				setState(5125);
				match(IO_SYMBOL);
				}
				break;
			case CONTEXT_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5126);
				match(CONTEXT_SYMBOL);
				setState(5127);
				match(SWITCHES_SYMBOL);
				}
				break;
			case PAGE_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5128);
				match(PAGE_SYMBOL);
				setState(5129);
				match(FAULTS_SYMBOL);
				}
				break;
			case CPU_SYMBOL:
			case IPC_SYMBOL:
			case MEMORY_SYMBOL:
			case SOURCE_SYMBOL:
			case SWAPS_SYMBOL:
			case ALL_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(5130);
				_la = _input.LA(1);
				if ( !(_la==CPU_SYMBOL || _la==IPC_SYMBOL || _la==MEMORY_SYMBOL || _la==SOURCE_SYMBOL || _la==SWAPS_SYMBOL || _la==ALL_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OtherAdministrativeStatementContext extends ParserRuleContext {
		public Token type;
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode BINLOG_SYMBOL() { return getToken(MySQLParser.BINLOG_SYMBOL, 0); }
		public TerminalNode INDEX_SYMBOL() { return getToken(MySQLParser.INDEX_SYMBOL, 0); }
		public KeyCacheListOrPartsContext keyCacheListOrParts() {
			return getRuleContext(KeyCacheListOrPartsContext.class,0);
		}
		public TerminalNode IN_SYMBOL() { return getToken(MySQLParser.IN_SYMBOL, 0); }
		public TerminalNode CACHE_SYMBOL() { return getToken(MySQLParser.CACHE_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode FLUSH_SYMBOL() { return getToken(MySQLParser.FLUSH_SYMBOL, 0); }
		public FlushTablesContext flushTables() {
			return getRuleContext(FlushTablesContext.class,0);
		}
		public List<FlushOptionContext> flushOption() {
			return getRuleContexts(FlushOptionContext.class);
		}
		public FlushOptionContext flushOption(int i) {
			return getRuleContext(FlushOptionContext.class,i);
		}
		public NoWriteToBinLogContext noWriteToBinLog() {
			return getRuleContext(NoWriteToBinLogContext.class,0);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode KILL_SYMBOL() { return getToken(MySQLParser.KILL_SYMBOL, 0); }
		public TerminalNode CONNECTION_SYMBOL() { return getToken(MySQLParser.CONNECTION_SYMBOL, 0); }
		public TerminalNode QUERY_SYMBOL() { return getToken(MySQLParser.QUERY_SYMBOL, 0); }
		public TerminalNode INTO_SYMBOL() { return getToken(MySQLParser.INTO_SYMBOL, 0); }
		public PreloadTailContext preloadTail() {
			return getRuleContext(PreloadTailContext.class,0);
		}
		public TerminalNode LOAD_SYMBOL() { return getToken(MySQLParser.LOAD_SYMBOL, 0); }
		public TerminalNode SHUTDOWN_SYMBOL() { return getToken(MySQLParser.SHUTDOWN_SYMBOL, 0); }
		public OtherAdministrativeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_otherAdministrativeStatement; }
	}

	public final OtherAdministrativeStatementContext otherAdministrativeStatement() throws RecognitionException {
		OtherAdministrativeStatementContext _localctx = new OtherAdministrativeStatementContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_otherAdministrativeStatement);
		int _la;
		try {
			setState(5170);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,648,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5133);
				((OtherAdministrativeStatementContext)_localctx).type = match(BINLOG_SYMBOL);
				setState(5134);
				textLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5135);
				((OtherAdministrativeStatementContext)_localctx).type = match(CACHE_SYMBOL);
				setState(5136);
				match(INDEX_SYMBOL);
				setState(5137);
				keyCacheListOrParts();
				setState(5138);
				match(IN_SYMBOL);
				setState(5141);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,643,_ctx) ) {
				case 1:
					{
					setState(5139);
					identifier();
					}
					break;
				case 2:
					{
					setState(5140);
					match(DEFAULT_SYMBOL);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5143);
				((OtherAdministrativeStatementContext)_localctx).type = match(FLUSH_SYMBOL);
				setState(5145);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,644,_ctx) ) {
				case 1:
					{
					setState(5144);
					noWriteToBinLog();
					}
					break;
				}
				setState(5156);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,646,_ctx) ) {
				case 1:
					{
					setState(5147);
					flushTables();
					}
					break;
				case 2:
					{
					setState(5148);
					flushOption();
					setState(5153);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA_SYMBOL) {
						{
						{
						setState(5149);
						match(COMMA_SYMBOL);
						setState(5150);
						flushOption();
						}
						}
						setState(5155);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5158);
				((OtherAdministrativeStatementContext)_localctx).type = match(KILL_SYMBOL);
				setState(5160);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,647,_ctx) ) {
				case 1:
					{
					setState(5159);
					_la = _input.LA(1);
					if ( !(_la==CONNECTION_SYMBOL || _la==QUERY_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5162);
				expr(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5163);
				((OtherAdministrativeStatementContext)_localctx).type = match(LOAD_SYMBOL);
				setState(5164);
				match(INDEX_SYMBOL);
				setState(5165);
				match(INTO_SYMBOL);
				setState(5166);
				match(CACHE_SYMBOL);
				setState(5167);
				preloadTail();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5168);
				if (!(serverVersion >= 50709)) throw new FailedPredicateException(this, "serverVersion >= 50709");
				setState(5169);
				((OtherAdministrativeStatementContext)_localctx).type = match(SHUTDOWN_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyCacheListOrPartsContext extends ParserRuleContext {
		public KeyCacheListContext keyCacheList() {
			return getRuleContext(KeyCacheListContext.class,0);
		}
		public AssignToKeycachePartitionContext assignToKeycachePartition() {
			return getRuleContext(AssignToKeycachePartitionContext.class,0);
		}
		public KeyCacheListOrPartsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyCacheListOrParts; }
	}

	public final KeyCacheListOrPartsContext keyCacheListOrParts() throws RecognitionException {
		KeyCacheListOrPartsContext _localctx = new KeyCacheListOrPartsContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_keyCacheListOrParts);
		try {
			setState(5174);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,649,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5172);
				keyCacheList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5173);
				assignToKeycachePartition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyCacheListContext extends ParserRuleContext {
		public List<AssignToKeycacheContext> assignToKeycache() {
			return getRuleContexts(AssignToKeycacheContext.class);
		}
		public AssignToKeycacheContext assignToKeycache(int i) {
			return getRuleContext(AssignToKeycacheContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public KeyCacheListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyCacheList; }
	}

	public final KeyCacheListContext keyCacheList() throws RecognitionException {
		KeyCacheListContext _localctx = new KeyCacheListContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_keyCacheList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5176);
			assignToKeycache();
			setState(5181);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(5177);
				match(COMMA_SYMBOL);
				setState(5178);
				assignToKeycache();
				}
				}
				setState(5183);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssignToKeycacheContext extends ParserRuleContext {
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public CacheKeyListContext cacheKeyList() {
			return getRuleContext(CacheKeyListContext.class,0);
		}
		public AssignToKeycacheContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignToKeycache; }
	}

	public final AssignToKeycacheContext assignToKeycache() throws RecognitionException {
		AssignToKeycacheContext _localctx = new AssignToKeycacheContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_assignToKeycache);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5184);
			tableRef();
			setState(5186);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INDEX_SYMBOL || _la==KEY_SYMBOL) {
				{
				setState(5185);
				cacheKeyList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssignToKeycachePartitionContext extends ParserRuleContext {
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public TerminalNode PARTITION_SYMBOL() { return getToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public AllOrPartitionNameListContext allOrPartitionNameList() {
			return getRuleContext(AllOrPartitionNameListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public CacheKeyListContext cacheKeyList() {
			return getRuleContext(CacheKeyListContext.class,0);
		}
		public AssignToKeycachePartitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignToKeycachePartition; }
	}

	public final AssignToKeycachePartitionContext assignToKeycachePartition() throws RecognitionException {
		AssignToKeycachePartitionContext _localctx = new AssignToKeycachePartitionContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_assignToKeycachePartition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5188);
			tableRef();
			setState(5189);
			match(PARTITION_SYMBOL);
			setState(5190);
			match(OPEN_PAR_SYMBOL);
			setState(5191);
			allOrPartitionNameList();
			setState(5192);
			match(CLOSE_PAR_SYMBOL);
			setState(5194);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INDEX_SYMBOL || _la==KEY_SYMBOL) {
				{
				setState(5193);
				cacheKeyList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CacheKeyListContext extends ParserRuleContext {
		public KeyOrIndexContext keyOrIndex() {
			return getRuleContext(KeyOrIndexContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public KeyUsageListContext keyUsageList() {
			return getRuleContext(KeyUsageListContext.class,0);
		}
		public CacheKeyListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cacheKeyList; }
	}

	public final CacheKeyListContext cacheKeyList() throws RecognitionException {
		CacheKeyListContext _localctx = new CacheKeyListContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_cacheKeyList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5196);
			keyOrIndex();
			setState(5197);
			match(OPEN_PAR_SYMBOL);
			setState(5199);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,653,_ctx) ) {
			case 1:
				{
				setState(5198);
				keyUsageList();
				}
				break;
			}
			setState(5201);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyUsageElementContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode PRIMARY_SYMBOL() { return getToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		public KeyUsageElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyUsageElement; }
	}

	public final KeyUsageElementContext keyUsageElement() throws RecognitionException {
		KeyUsageElementContext _localctx = new KeyUsageElementContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_keyUsageElement);
		try {
			setState(5205);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,654,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5203);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5204);
				match(PRIMARY_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyUsageListContext extends ParserRuleContext {
		public List<KeyUsageElementContext> keyUsageElement() {
			return getRuleContexts(KeyUsageElementContext.class);
		}
		public KeyUsageElementContext keyUsageElement(int i) {
			return getRuleContext(KeyUsageElementContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public KeyUsageListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyUsageList; }
	}

	public final KeyUsageListContext keyUsageList() throws RecognitionException {
		KeyUsageListContext _localctx = new KeyUsageListContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_keyUsageList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5207);
			keyUsageElement();
			setState(5212);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(5208);
				match(COMMA_SYMBOL);
				setState(5209);
				keyUsageElement();
				}
				}
				setState(5214);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushOptionContext extends ParserRuleContext {
		public Token option;
		public TerminalNode DES_KEY_FILE_SYMBOL() { return getToken(MySQLParser.DES_KEY_FILE_SYMBOL, 0); }
		public TerminalNode HOSTS_SYMBOL() { return getToken(MySQLParser.HOSTS_SYMBOL, 0); }
		public TerminalNode PRIVILEGES_SYMBOL() { return getToken(MySQLParser.PRIVILEGES_SYMBOL, 0); }
		public TerminalNode STATUS_SYMBOL() { return getToken(MySQLParser.STATUS_SYMBOL, 0); }
		public TerminalNode USER_RESOURCES_SYMBOL() { return getToken(MySQLParser.USER_RESOURCES_SYMBOL, 0); }
		public TerminalNode LOGS_SYMBOL() { return getToken(MySQLParser.LOGS_SYMBOL, 0); }
		public LogTypeContext logType() {
			return getRuleContext(LogTypeContext.class,0);
		}
		public TerminalNode RELAY_SYMBOL() { return getToken(MySQLParser.RELAY_SYMBOL, 0); }
		public ChannelContext channel() {
			return getRuleContext(ChannelContext.class,0);
		}
		public TerminalNode CACHE_SYMBOL() { return getToken(MySQLParser.CACHE_SYMBOL, 0); }
		public TerminalNode QUERY_SYMBOL() { return getToken(MySQLParser.QUERY_SYMBOL, 0); }
		public TerminalNode OPTIMIZER_COSTS_SYMBOL() { return getToken(MySQLParser.OPTIMIZER_COSTS_SYMBOL, 0); }
		public FlushOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushOption; }
	}

	public final FlushOptionContext flushOption() throws RecognitionException {
		FlushOptionContext _localctx = new FlushOptionContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_flushOption);
		int _la;
		try {
			setState(5230);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,658,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5215);
				((FlushOptionContext)_localctx).option = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DES_KEY_FILE_SYMBOL || _la==HOSTS_SYMBOL || _la==PRIVILEGES_SYMBOL || _la==STATUS_SYMBOL || _la==USER_RESOURCES_SYMBOL) ) {
					((FlushOptionContext)_localctx).option = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5217);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENGINE_SYMBOL - 128)) | (1L << (ERROR_SYMBOL - 128)) | (1L << (GENERAL_SYMBOL - 128)))) != 0) || _la==SLOW_SYMBOL || _la==BINARY_SYMBOL) {
					{
					setState(5216);
					logType();
					}
				}

				setState(5219);
				((FlushOptionContext)_localctx).option = match(LOGS_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5220);
				((FlushOptionContext)_localctx).option = match(RELAY_SYMBOL);
				setState(5221);
				match(LOGS_SYMBOL);
				setState(5223);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,657,_ctx) ) {
				case 1:
					{
					setState(5222);
					channel();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5225);
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				setState(5226);
				((FlushOptionContext)_localctx).option = match(QUERY_SYMBOL);
				setState(5227);
				match(CACHE_SYMBOL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5228);
				if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
				setState(5229);
				((FlushOptionContext)_localctx).option = match(OPTIMIZER_COSTS_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LogTypeContext extends ParserRuleContext {
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public TerminalNode ENGINE_SYMBOL() { return getToken(MySQLParser.ENGINE_SYMBOL, 0); }
		public TerminalNode ERROR_SYMBOL() { return getToken(MySQLParser.ERROR_SYMBOL, 0); }
		public TerminalNode GENERAL_SYMBOL() { return getToken(MySQLParser.GENERAL_SYMBOL, 0); }
		public TerminalNode SLOW_SYMBOL() { return getToken(MySQLParser.SLOW_SYMBOL, 0); }
		public LogTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logType; }
	}

	public final LogTypeContext logType() throws RecognitionException {
		LogTypeContext _localctx = new LogTypeContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_logType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5232);
			_la = _input.LA(1);
			if ( !(((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENGINE_SYMBOL - 128)) | (1L << (ERROR_SYMBOL - 128)) | (1L << (GENERAL_SYMBOL - 128)))) != 0) || _la==SLOW_SYMBOL || _la==BINARY_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushTablesContext extends ParserRuleContext {
		public TerminalNode TABLES_SYMBOL() { return getToken(MySQLParser.TABLES_SYMBOL, 0); }
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode READ_SYMBOL() { return getToken(MySQLParser.READ_SYMBOL, 0); }
		public TerminalNode LOCK_SYMBOL() { return getToken(MySQLParser.LOCK_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public FlushTablesOptionsContext flushTablesOptions() {
			return getRuleContext(FlushTablesOptionsContext.class,0);
		}
		public FlushTablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushTables; }
	}

	public final FlushTablesContext flushTables() throws RecognitionException {
		FlushTablesContext _localctx = new FlushTablesContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_flushTables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5234);
			_la = _input.LA(1);
			if ( !(_la==TABLES_SYMBOL || _la==TABLE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5242);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,660,_ctx) ) {
			case 1:
				{
				setState(5235);
				match(WITH_SYMBOL);
				setState(5236);
				match(READ_SYMBOL);
				setState(5237);
				match(LOCK_SYMBOL);
				}
				break;
			case 2:
				{
				setState(5238);
				identifierList();
				setState(5240);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,659,_ctx) ) {
				case 1:
					{
					setState(5239);
					flushTablesOptions();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushTablesOptionsContext extends ParserRuleContext {
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode EXPORT_SYMBOL() { return getToken(MySQLParser.EXPORT_SYMBOL, 0); }
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode READ_SYMBOL() { return getToken(MySQLParser.READ_SYMBOL, 0); }
		public TerminalNode LOCK_SYMBOL() { return getToken(MySQLParser.LOCK_SYMBOL, 0); }
		public FlushTablesOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushTablesOptions; }
	}

	public final FlushTablesOptionsContext flushTablesOptions() throws RecognitionException {
		FlushTablesOptionsContext _localctx = new FlushTablesOptionsContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_flushTablesOptions);
		try {
			setState(5250);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,661,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5244);
				if (!(serverVersion >= 50606)) throw new FailedPredicateException(this, "serverVersion >= 50606");
				setState(5245);
				match(FOR_SYMBOL);
				setState(5246);
				match(EXPORT_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5247);
				match(WITH_SYMBOL);
				setState(5248);
				match(READ_SYMBOL);
				setState(5249);
				match(LOCK_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PreloadTailContext extends ParserRuleContext {
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public AdminPartitionContext adminPartition() {
			return getRuleContext(AdminPartitionContext.class,0);
		}
		public CacheKeyListContext cacheKeyList() {
			return getRuleContext(CacheKeyListContext.class,0);
		}
		public TerminalNode IGNORE_SYMBOL() { return getToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public TerminalNode LEAVES_SYMBOL() { return getToken(MySQLParser.LEAVES_SYMBOL, 0); }
		public PreloadListContext preloadList() {
			return getRuleContext(PreloadListContext.class,0);
		}
		public PreloadTailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preloadTail; }
	}

	public final PreloadTailContext preloadTail() throws RecognitionException {
		PreloadTailContext _localctx = new PreloadTailContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_preloadTail);
		int _la;
		try {
			setState(5262);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,664,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5252);
				tableRef();
				setState(5253);
				adminPartition();
				setState(5255);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX_SYMBOL || _la==KEY_SYMBOL) {
					{
					setState(5254);
					cacheKeyList();
					}
				}

				setState(5259);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE_SYMBOL) {
					{
					setState(5257);
					match(IGNORE_SYMBOL);
					setState(5258);
					match(LEAVES_SYMBOL);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5261);
				preloadList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PreloadListContext extends ParserRuleContext {
		public List<PreloadKeysContext> preloadKeys() {
			return getRuleContexts(PreloadKeysContext.class);
		}
		public PreloadKeysContext preloadKeys(int i) {
			return getRuleContext(PreloadKeysContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public PreloadListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preloadList; }
	}

	public final PreloadListContext preloadList() throws RecognitionException {
		PreloadListContext _localctx = new PreloadListContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_preloadList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5264);
			preloadKeys();
			setState(5269);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(5265);
				match(COMMA_SYMBOL);
				setState(5266);
				preloadKeys();
				}
				}
				setState(5271);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PreloadKeysContext extends ParserRuleContext {
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public CacheKeyListContext cacheKeyList() {
			return getRuleContext(CacheKeyListContext.class,0);
		}
		public TerminalNode IGNORE_SYMBOL() { return getToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public TerminalNode LEAVES_SYMBOL() { return getToken(MySQLParser.LEAVES_SYMBOL, 0); }
		public PreloadKeysContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preloadKeys; }
	}

	public final PreloadKeysContext preloadKeys() throws RecognitionException {
		PreloadKeysContext _localctx = new PreloadKeysContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_preloadKeys);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5272);
			tableRef();
			setState(5274);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INDEX_SYMBOL || _la==KEY_SYMBOL) {
				{
				setState(5273);
				cacheKeyList();
				}
			}

			setState(5278);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE_SYMBOL) {
				{
				setState(5276);
				match(IGNORE_SYMBOL);
				setState(5277);
				match(LEAVES_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AdminPartitionContext extends ParserRuleContext {
		public TerminalNode PARTITION_SYMBOL() { return getToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public AllOrPartitionNameListContext allOrPartitionNameList() {
			return getRuleContext(AllOrPartitionNameListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public AdminPartitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_adminPartition; }
	}

	public final AdminPartitionContext adminPartition() throws RecognitionException {
		AdminPartitionContext _localctx = new AdminPartitionContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_adminPartition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5280);
			match(PARTITION_SYMBOL);
			setState(5281);
			match(OPEN_PAR_SYMBOL);
			setState(5282);
			allOrPartitionNameList();
			setState(5283);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResourceGroupManagementContext extends ParserRuleContext {
		public CreateResourceGroupContext createResourceGroup() {
			return getRuleContext(CreateResourceGroupContext.class,0);
		}
		public AlterResourceGroupContext alterResourceGroup() {
			return getRuleContext(AlterResourceGroupContext.class,0);
		}
		public SetResourceGroupContext setResourceGroup() {
			return getRuleContext(SetResourceGroupContext.class,0);
		}
		public DropResourceGroupContext dropResourceGroup() {
			return getRuleContext(DropResourceGroupContext.class,0);
		}
		public ResourceGroupManagementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resourceGroupManagement; }
	}

	public final ResourceGroupManagementContext resourceGroupManagement() throws RecognitionException {
		ResourceGroupManagementContext _localctx = new ResourceGroupManagementContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_resourceGroupManagement);
		try {
			setState(5289);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CREATE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5285);
				createResourceGroup();
				}
				break;
			case ALTER_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5286);
				alterResourceGroup();
				}
				break;
			case SET_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5287);
				setResourceGroup();
				}
				break;
			case DROP_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(5288);
				dropResourceGroup();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateResourceGroupContext extends ParserRuleContext {
		public TerminalNode CREATE_SYMBOL() { return getToken(MySQLParser.CREATE_SYMBOL, 0); }
		public TerminalNode RESOURCE_SYMBOL() { return getToken(MySQLParser.RESOURCE_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MySQLParser.GROUP_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode TYPE_SYMBOL() { return getToken(MySQLParser.TYPE_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public TerminalNode SYSTEM_SYMBOL() { return getToken(MySQLParser.SYSTEM_SYMBOL, 0); }
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public ResourceGroupVcpuListContext resourceGroupVcpuList() {
			return getRuleContext(ResourceGroupVcpuListContext.class,0);
		}
		public ResourceGroupPriorityContext resourceGroupPriority() {
			return getRuleContext(ResourceGroupPriorityContext.class,0);
		}
		public ResourceGroupEnableDisableContext resourceGroupEnableDisable() {
			return getRuleContext(ResourceGroupEnableDisableContext.class,0);
		}
		public CreateResourceGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createResourceGroup; }
	}

	public final CreateResourceGroupContext createResourceGroup() throws RecognitionException {
		CreateResourceGroupContext _localctx = new CreateResourceGroupContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_createResourceGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5291);
			match(CREATE_SYMBOL);
			setState(5292);
			match(RESOURCE_SYMBOL);
			setState(5293);
			match(GROUP_SYMBOL);
			setState(5294);
			identifier();
			setState(5295);
			match(TYPE_SYMBOL);
			setState(5297);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_OPERATOR || _la==ASSIGN_OPERATOR) {
				{
				setState(5296);
				equal();
				}
			}

			setState(5299);
			_la = _input.LA(1);
			if ( !(_la==USER_SYMBOL || _la==SYSTEM_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5301);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VCPU_SYMBOL) {
				{
				setState(5300);
				resourceGroupVcpuList();
				}
			}

			setState(5304);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==THREAD_PRIORITY_SYMBOL) {
				{
				setState(5303);
				resourceGroupPriority();
				}
			}

			setState(5307);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE_SYMBOL || _la==ENABLE_SYMBOL) {
				{
				setState(5306);
				resourceGroupEnableDisable();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResourceGroupVcpuListContext extends ParserRuleContext {
		public TerminalNode VCPU_SYMBOL() { return getToken(MySQLParser.VCPU_SYMBOL, 0); }
		public List<VcpuNumOrRangeContext> vcpuNumOrRange() {
			return getRuleContexts(VcpuNumOrRangeContext.class);
		}
		public VcpuNumOrRangeContext vcpuNumOrRange(int i) {
			return getRuleContext(VcpuNumOrRangeContext.class,i);
		}
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ResourceGroupVcpuListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resourceGroupVcpuList; }
	}

	public final ResourceGroupVcpuListContext resourceGroupVcpuList() throws RecognitionException {
		ResourceGroupVcpuListContext _localctx = new ResourceGroupVcpuListContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_resourceGroupVcpuList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5309);
			match(VCPU_SYMBOL);
			setState(5311);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_OPERATOR || _la==ASSIGN_OPERATOR) {
				{
				setState(5310);
				equal();
				}
			}

			setState(5313);
			vcpuNumOrRange();
			setState(5320);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==INT_NUMBER || _la==COMMA_SYMBOL) {
				{
				{
				setState(5315);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(5314);
					match(COMMA_SYMBOL);
					}
				}

				setState(5317);
				vcpuNumOrRange();
				}
				}
				setState(5322);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VcpuNumOrRangeContext extends ParserRuleContext {
		public List<TerminalNode> INT_NUMBER() { return getTokens(MySQLParser.INT_NUMBER); }
		public TerminalNode INT_NUMBER(int i) {
			return getToken(MySQLParser.INT_NUMBER, i);
		}
		public TerminalNode MINUS_OPERATOR() { return getToken(MySQLParser.MINUS_OPERATOR, 0); }
		public VcpuNumOrRangeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vcpuNumOrRange; }
	}

	public final VcpuNumOrRangeContext vcpuNumOrRange() throws RecognitionException {
		VcpuNumOrRangeContext _localctx = new VcpuNumOrRangeContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_vcpuNumOrRange);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5323);
			match(INT_NUMBER);
			setState(5326);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MINUS_OPERATOR) {
				{
				setState(5324);
				match(MINUS_OPERATOR);
				setState(5325);
				match(INT_NUMBER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResourceGroupPriorityContext extends ParserRuleContext {
		public TerminalNode THREAD_PRIORITY_SYMBOL() { return getToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0); }
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public ResourceGroupPriorityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resourceGroupPriority; }
	}

	public final ResourceGroupPriorityContext resourceGroupPriority() throws RecognitionException {
		ResourceGroupPriorityContext _localctx = new ResourceGroupPriorityContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_resourceGroupPriority);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5328);
			match(THREAD_PRIORITY_SYMBOL);
			setState(5330);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_OPERATOR || _la==ASSIGN_OPERATOR) {
				{
				setState(5329);
				equal();
				}
			}

			setState(5332);
			match(INT_NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResourceGroupEnableDisableContext extends ParserRuleContext {
		public TerminalNode ENABLE_SYMBOL() { return getToken(MySQLParser.ENABLE_SYMBOL, 0); }
		public TerminalNode DISABLE_SYMBOL() { return getToken(MySQLParser.DISABLE_SYMBOL, 0); }
		public ResourceGroupEnableDisableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resourceGroupEnableDisable; }
	}

	public final ResourceGroupEnableDisableContext resourceGroupEnableDisable() throws RecognitionException {
		ResourceGroupEnableDisableContext _localctx = new ResourceGroupEnableDisableContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_resourceGroupEnableDisable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5334);
			_la = _input.LA(1);
			if ( !(_la==DISABLE_SYMBOL || _la==ENABLE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterResourceGroupContext extends ParserRuleContext {
		public TerminalNode ALTER_SYMBOL() { return getToken(MySQLParser.ALTER_SYMBOL, 0); }
		public TerminalNode RESOURCE_SYMBOL() { return getToken(MySQLParser.RESOURCE_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MySQLParser.GROUP_SYMBOL, 0); }
		public ResourceGroupRefContext resourceGroupRef() {
			return getRuleContext(ResourceGroupRefContext.class,0);
		}
		public ResourceGroupVcpuListContext resourceGroupVcpuList() {
			return getRuleContext(ResourceGroupVcpuListContext.class,0);
		}
		public ResourceGroupPriorityContext resourceGroupPriority() {
			return getRuleContext(ResourceGroupPriorityContext.class,0);
		}
		public ResourceGroupEnableDisableContext resourceGroupEnableDisable() {
			return getRuleContext(ResourceGroupEnableDisableContext.class,0);
		}
		public TerminalNode FORCE_SYMBOL() { return getToken(MySQLParser.FORCE_SYMBOL, 0); }
		public AlterResourceGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterResourceGroup; }
	}

	public final AlterResourceGroupContext alterResourceGroup() throws RecognitionException {
		AlterResourceGroupContext _localctx = new AlterResourceGroupContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_alterResourceGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5336);
			match(ALTER_SYMBOL);
			setState(5337);
			match(RESOURCE_SYMBOL);
			setState(5338);
			match(GROUP_SYMBOL);
			setState(5339);
			resourceGroupRef();
			setState(5341);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VCPU_SYMBOL) {
				{
				setState(5340);
				resourceGroupVcpuList();
				}
			}

			setState(5344);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==THREAD_PRIORITY_SYMBOL) {
				{
				setState(5343);
				resourceGroupPriority();
				}
			}

			setState(5347);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE_SYMBOL || _la==ENABLE_SYMBOL) {
				{
				setState(5346);
				resourceGroupEnableDisable();
				}
			}

			setState(5350);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FORCE_SYMBOL) {
				{
				setState(5349);
				match(FORCE_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetResourceGroupContext extends ParserRuleContext {
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public TerminalNode RESOURCE_SYMBOL() { return getToken(MySQLParser.RESOURCE_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MySQLParser.GROUP_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public ThreadIdListContext threadIdList() {
			return getRuleContext(ThreadIdListContext.class,0);
		}
		public SetResourceGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setResourceGroup; }
	}

	public final SetResourceGroupContext setResourceGroup() throws RecognitionException {
		SetResourceGroupContext _localctx = new SetResourceGroupContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_setResourceGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5352);
			match(SET_SYMBOL);
			setState(5353);
			match(RESOURCE_SYMBOL);
			setState(5354);
			match(GROUP_SYMBOL);
			setState(5355);
			identifier();
			setState(5358);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR_SYMBOL) {
				{
				setState(5356);
				match(FOR_SYMBOL);
				setState(5357);
				threadIdList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ThreadIdListContext extends ParserRuleContext {
		public List<Real_ulong_numberContext> real_ulong_number() {
			return getRuleContexts(Real_ulong_numberContext.class);
		}
		public Real_ulong_numberContext real_ulong_number(int i) {
			return getRuleContext(Real_ulong_numberContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ThreadIdListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_threadIdList; }
	}

	public final ThreadIdListContext threadIdList() throws RecognitionException {
		ThreadIdListContext _localctx = new ThreadIdListContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_threadIdList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5360);
			real_ulong_number();
			setState(5367);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (INT_NUMBER - 380)) | (1L << (LONG_NUMBER - 380)) | (1L << (ULONGLONG_NUMBER - 380)) | (1L << (COMMA_SYMBOL - 380)) | (1L << (HEX_NUMBER - 380)))) != 0)) {
				{
				{
				setState(5362);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(5361);
					match(COMMA_SYMBOL);
					}
				}

				setState(5364);
				real_ulong_number();
				}
				}
				setState(5369);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropResourceGroupContext extends ParserRuleContext {
		public TerminalNode DROP_SYMBOL() { return getToken(MySQLParser.DROP_SYMBOL, 0); }
		public TerminalNode RESOURCE_SYMBOL() { return getToken(MySQLParser.RESOURCE_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MySQLParser.GROUP_SYMBOL, 0); }
		public ResourceGroupRefContext resourceGroupRef() {
			return getRuleContext(ResourceGroupRefContext.class,0);
		}
		public TerminalNode FORCE_SYMBOL() { return getToken(MySQLParser.FORCE_SYMBOL, 0); }
		public DropResourceGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropResourceGroup; }
	}

	public final DropResourceGroupContext dropResourceGroup() throws RecognitionException {
		DropResourceGroupContext _localctx = new DropResourceGroupContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_dropResourceGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5370);
			match(DROP_SYMBOL);
			setState(5371);
			match(RESOURCE_SYMBOL);
			setState(5372);
			match(GROUP_SYMBOL);
			setState(5373);
			resourceGroupRef();
			setState(5375);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FORCE_SYMBOL) {
				{
				setState(5374);
				match(FORCE_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UtilityStatementContext extends ParserRuleContext {
		public DescribeCommandContext describeCommand() {
			return getRuleContext(DescribeCommandContext.class,0);
		}
		public ExplainCommandContext explainCommand() {
			return getRuleContext(ExplainCommandContext.class,0);
		}
		public HelpCommandContext helpCommand() {
			return getRuleContext(HelpCommandContext.class,0);
		}
		public UseCommandContext useCommand() {
			return getRuleContext(UseCommandContext.class,0);
		}
		public RestartServerContext restartServer() {
			return getRuleContext(RestartServerContext.class,0);
		}
		public UtilityStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_utilityStatement; }
	}

	public final UtilityStatementContext utilityStatement() throws RecognitionException {
		UtilityStatementContext _localctx = new UtilityStatementContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_utilityStatement);
		try {
			setState(5383);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,686,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5377);
				describeCommand();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5378);
				explainCommand();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5379);
				helpCommand();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5380);
				useCommand();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5381);
				if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
				setState(5382);
				restartServer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DescribeCommandContext extends ParserRuleContext {
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public TerminalNode EXPLAIN_SYMBOL() { return getToken(MySQLParser.EXPLAIN_SYMBOL, 0); }
		public TerminalNode DESCRIBE_SYMBOL() { return getToken(MySQLParser.DESCRIBE_SYMBOL, 0); }
		public TerminalNode DESC_SYMBOL() { return getToken(MySQLParser.DESC_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public ColumnRefContext columnRef() {
			return getRuleContext(ColumnRefContext.class,0);
		}
		public DescribeCommandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describeCommand; }
	}

	public final DescribeCommandContext describeCommand() throws RecognitionException {
		DescribeCommandContext _localctx = new DescribeCommandContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_describeCommand);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5385);
			_la = _input.LA(1);
			if ( !(((((_la - 481)) & ~0x3f) == 0 && ((1L << (_la - 481)) & ((1L << (DESC_SYMBOL - 481)) | (1L << (DESCRIBE_SYMBOL - 481)) | (1L << (EXPLAIN_SYMBOL - 481)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5386);
			tableRef();
			setState(5389);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,687,_ctx) ) {
			case 1:
				{
				setState(5387);
				textString();
				}
				break;
			case 2:
				{
				setState(5388);
				columnRef();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExplainCommandContext extends ParserRuleContext {
		public ExplainableStatementContext explainableStatement() {
			return getRuleContext(ExplainableStatementContext.class,0);
		}
		public TerminalNode EXPLAIN_SYMBOL() { return getToken(MySQLParser.EXPLAIN_SYMBOL, 0); }
		public TerminalNode DESCRIBE_SYMBOL() { return getToken(MySQLParser.DESCRIBE_SYMBOL, 0); }
		public TerminalNode DESC_SYMBOL() { return getToken(MySQLParser.DESC_SYMBOL, 0); }
		public TerminalNode EXTENDED_SYMBOL() { return getToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		public TerminalNode PARTITIONS_SYMBOL() { return getToken(MySQLParser.PARTITIONS_SYMBOL, 0); }
		public TerminalNode FORMAT_SYMBOL() { return getToken(MySQLParser.FORMAT_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public TerminalNode ANALYZE_SYMBOL() { return getToken(MySQLParser.ANALYZE_SYMBOL, 0); }
		public ExplainCommandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainCommand; }
	}

	public final ExplainCommandContext explainCommand() throws RecognitionException {
		ExplainCommandContext _localctx = new ExplainCommandContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_explainCommand);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5391);
			_la = _input.LA(1);
			if ( !(((((_la - 481)) & ~0x3f) == 0 && ((1L << (_la - 481)) & ((1L << (DESC_SYMBOL - 481)) | (1L << (DESCRIBE_SYMBOL - 481)) | (1L << (EXPLAIN_SYMBOL - 481)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5402);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,688,_ctx) ) {
			case 1:
				{
				setState(5392);
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				setState(5393);
				match(EXTENDED_SYMBOL);
				}
				break;
			case 2:
				{
				setState(5394);
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				setState(5395);
				match(PARTITIONS_SYMBOL);
				}
				break;
			case 3:
				{
				setState(5396);
				if (!(serverVersion >= 50605)) throw new FailedPredicateException(this, "serverVersion >= 50605");
				setState(5397);
				match(FORMAT_SYMBOL);
				setState(5398);
				match(EQUAL_OPERATOR);
				setState(5399);
				textOrIdentifier();
				}
				break;
			case 4:
				{
				setState(5400);
				if (!(serverVersion >= 80018)) throw new FailedPredicateException(this, "serverVersion >= 80018");
				setState(5401);
				match(ANALYZE_SYMBOL);
				}
				break;
			}
			setState(5404);
			explainableStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExplainableStatementContext extends ParserRuleContext {
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public DeleteStatementContext deleteStatement() {
			return getRuleContext(DeleteStatementContext.class,0);
		}
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public ReplaceStatementContext replaceStatement() {
			return getRuleContext(ReplaceStatementContext.class,0);
		}
		public UpdateStatementContext updateStatement() {
			return getRuleContext(UpdateStatementContext.class,0);
		}
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode CONNECTION_SYMBOL() { return getToken(MySQLParser.CONNECTION_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public ExplainableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainableStatement; }
	}

	public final ExplainableStatementContext explainableStatement() throws RecognitionException {
		ExplainableStatementContext _localctx = new ExplainableStatementContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_explainableStatement);
		try {
			setState(5418);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,690,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5406);
				selectStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5407);
				if (!(serverVersion >= 50603)) throw new FailedPredicateException(this, "serverVersion >= 50603");
				setState(5412);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,689,_ctx) ) {
				case 1:
					{
					setState(5408);
					deleteStatement();
					}
					break;
				case 2:
					{
					setState(5409);
					insertStatement();
					}
					break;
				case 3:
					{
					setState(5410);
					replaceStatement();
					}
					break;
				case 4:
					{
					setState(5411);
					updateStatement();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5414);
				if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
				setState(5415);
				match(FOR_SYMBOL);
				setState(5416);
				match(CONNECTION_SYMBOL);
				setState(5417);
				real_ulong_number();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HelpCommandContext extends ParserRuleContext {
		public TerminalNode HELP_SYMBOL() { return getToken(MySQLParser.HELP_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public HelpCommandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_helpCommand; }
	}

	public final HelpCommandContext helpCommand() throws RecognitionException {
		HelpCommandContext _localctx = new HelpCommandContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_helpCommand);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5420);
			match(HELP_SYMBOL);
			setState(5421);
			textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UseCommandContext extends ParserRuleContext {
		public TerminalNode USE_SYMBOL() { return getToken(MySQLParser.USE_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public UseCommandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_useCommand; }
	}

	public final UseCommandContext useCommand() throws RecognitionException {
		UseCommandContext _localctx = new UseCommandContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_useCommand);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5423);
			match(USE_SYMBOL);
			setState(5424);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RestartServerContext extends ParserRuleContext {
		public TerminalNode RESTART_SYMBOL() { return getToken(MySQLParser.RESTART_SYMBOL, 0); }
		public RestartServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_restartServer; }
	}

	public final RestartServerContext restartServer() throws RecognitionException {
		RestartServerContext _localctx = new RestartServerContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_restartServer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5426);
			match(RESTART_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExprContext extends ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr; }
	 
		public ExprContext() { }
		public void copyFrom(ExprContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ExprOrContext extends ExprContext {
		public Token op;
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode OR_SYMBOL() { return getToken(MySQLParser.OR_SYMBOL, 0); }
		public TerminalNode LOGICAL_OR_OPERATOR() { return getToken(MySQLParser.LOGICAL_OR_OPERATOR, 0); }
		public ExprOrContext(ExprContext ctx) { copyFrom(ctx); }
	}
	public static class ExprNotContext extends ExprContext {
		public TerminalNode NOT_SYMBOL() { return getToken(MySQLParser.NOT_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ExprNotContext(ExprContext ctx) { copyFrom(ctx); }
	}
	public static class ExprIsContext extends ExprContext {
		public Token type;
		public BoolPriContext boolPri() {
			return getRuleContext(BoolPriContext.class,0);
		}
		public TerminalNode IS_SYMBOL() { return getToken(MySQLParser.IS_SYMBOL, 0); }
		public TerminalNode TRUE_SYMBOL() { return getToken(MySQLParser.TRUE_SYMBOL, 0); }
		public TerminalNode FALSE_SYMBOL() { return getToken(MySQLParser.FALSE_SYMBOL, 0); }
		public TerminalNode UNKNOWN_SYMBOL() { return getToken(MySQLParser.UNKNOWN_SYMBOL, 0); }
		public NotRuleContext notRule() {
			return getRuleContext(NotRuleContext.class,0);
		}
		public ExprIsContext(ExprContext ctx) { copyFrom(ctx); }
	}
	public static class ExprAndContext extends ExprContext {
		public Token op;
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode AND_SYMBOL() { return getToken(MySQLParser.AND_SYMBOL, 0); }
		public TerminalNode LOGICAL_AND_OPERATOR() { return getToken(MySQLParser.LOGICAL_AND_OPERATOR, 0); }
		public ExprAndContext(ExprContext ctx) { copyFrom(ctx); }
	}
	public static class ExprXorContext extends ExprContext {
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode XOR_SYMBOL() { return getToken(MySQLParser.XOR_SYMBOL, 0); }
		public ExprXorContext(ExprContext ctx) { copyFrom(ctx); }
	}

	public final ExprContext expr() throws RecognitionException {
		return expr(0);
	}

	private ExprContext expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 666;
		enterRecursionRule(_localctx, 666, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5439);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,693,_ctx) ) {
			case 1:
				{
				_localctx = new ExprIsContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(5429);
				boolPri(0);
				setState(5435);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,692,_ctx) ) {
				case 1:
					{
					setState(5430);
					match(IS_SYMBOL);
					setState(5432);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NOT2_SYMBOL || _la==NOT_SYMBOL) {
						{
						setState(5431);
						notRule();
						}
					}

					setState(5434);
					((ExprIsContext)_localctx).type = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==UNKNOWN_SYMBOL || _la==FALSE_SYMBOL || _la==TRUE_SYMBOL) ) {
						((ExprIsContext)_localctx).type = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case 2:
				{
				_localctx = new ExprNotContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5437);
				match(NOT_SYMBOL);
				setState(5438);
				expr(4);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(5452);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,695,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(5450);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,694,_ctx) ) {
					case 1:
						{
						_localctx = new ExprAndContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(5441);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(5442);
						((ExprAndContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==LOGICAL_AND_OPERATOR || _la==AND_SYMBOL) ) {
							((ExprAndContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5443);
						expr(4);
						}
						break;
					case 2:
						{
						_localctx = new ExprXorContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(5444);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(5445);
						match(XOR_SYMBOL);
						setState(5446);
						expr(3);
						}
						break;
					case 3:
						{
						_localctx = new ExprOrContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(5447);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(5448);
						((ExprOrContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==LOGICAL_OR_OPERATOR || _la==OR_SYMBOL) ) {
							((ExprOrContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5449);
						expr(2);
						}
						break;
					}
					} 
				}
				setState(5454);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,695,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class BoolPriContext extends ParserRuleContext {
		public BoolPriContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolPri; }
	 
		public BoolPriContext() { }
		public void copyFrom(BoolPriContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PrimaryExprPredicateContext extends BoolPriContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public PrimaryExprPredicateContext(BoolPriContext ctx) { copyFrom(ctx); }
	}
	public static class PrimaryExprCompareContext extends BoolPriContext {
		public BoolPriContext boolPri() {
			return getRuleContext(BoolPriContext.class,0);
		}
		public CompOpContext compOp() {
			return getRuleContext(CompOpContext.class,0);
		}
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public PrimaryExprCompareContext(BoolPriContext ctx) { copyFrom(ctx); }
	}
	public static class PrimaryExprAllAnyContext extends BoolPriContext {
		public BoolPriContext boolPri() {
			return getRuleContext(BoolPriContext.class,0);
		}
		public CompOpContext compOp() {
			return getRuleContext(CompOpContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode ANY_SYMBOL() { return getToken(MySQLParser.ANY_SYMBOL, 0); }
		public PrimaryExprAllAnyContext(BoolPriContext ctx) { copyFrom(ctx); }
	}
	public static class PrimaryExprIsNullContext extends BoolPriContext {
		public BoolPriContext boolPri() {
			return getRuleContext(BoolPriContext.class,0);
		}
		public TerminalNode IS_SYMBOL() { return getToken(MySQLParser.IS_SYMBOL, 0); }
		public TerminalNode NULL_SYMBOL() { return getToken(MySQLParser.NULL_SYMBOL, 0); }
		public NotRuleContext notRule() {
			return getRuleContext(NotRuleContext.class,0);
		}
		public PrimaryExprIsNullContext(BoolPriContext ctx) { copyFrom(ctx); }
	}

	public final BoolPriContext boolPri() throws RecognitionException {
		return boolPri(0);
	}

	private BoolPriContext boolPri(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		BoolPriContext _localctx = new BoolPriContext(_ctx, _parentState);
		BoolPriContext _prevctx = _localctx;
		int _startState = 668;
		enterRecursionRule(_localctx, 668, RULE_boolPri, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PrimaryExprPredicateContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			setState(5456);
			predicate();
			}
			_ctx.stop = _input.LT(-1);
			setState(5475);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,698,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(5473);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,697,_ctx) ) {
					case 1:
						{
						_localctx = new PrimaryExprIsNullContext(new BoolPriContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_boolPri);
						setState(5458);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(5459);
						match(IS_SYMBOL);
						setState(5461);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT2_SYMBOL || _la==NOT_SYMBOL) {
							{
							setState(5460);
							notRule();
							}
						}

						setState(5463);
						match(NULL_SYMBOL);
						}
						break;
					case 2:
						{
						_localctx = new PrimaryExprCompareContext(new BoolPriContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_boolPri);
						setState(5464);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(5465);
						compOp();
						setState(5466);
						predicate();
						}
						break;
					case 3:
						{
						_localctx = new PrimaryExprAllAnyContext(new BoolPriContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_boolPri);
						setState(5468);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(5469);
						compOp();
						setState(5470);
						_la = _input.LA(1);
						if ( !(_la==ANY_SYMBOL || _la==ALL_SYMBOL) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5471);
						subquery();
						}
						break;
					}
					} 
				}
				setState(5477);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,698,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class CompOpContext extends ParserRuleContext {
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TerminalNode NULL_SAFE_EQUAL_OPERATOR() { return getToken(MySQLParser.NULL_SAFE_EQUAL_OPERATOR, 0); }
		public TerminalNode GREATER_OR_EQUAL_OPERATOR() { return getToken(MySQLParser.GREATER_OR_EQUAL_OPERATOR, 0); }
		public TerminalNode GREATER_THAN_OPERATOR() { return getToken(MySQLParser.GREATER_THAN_OPERATOR, 0); }
		public TerminalNode LESS_OR_EQUAL_OPERATOR() { return getToken(MySQLParser.LESS_OR_EQUAL_OPERATOR, 0); }
		public TerminalNode LESS_THAN_OPERATOR() { return getToken(MySQLParser.LESS_THAN_OPERATOR, 0); }
		public TerminalNode NOT_EQUAL_OPERATOR() { return getToken(MySQLParser.NOT_EQUAL_OPERATOR, 0); }
		public CompOpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compOp; }
	}

	public final CompOpContext compOp() throws RecognitionException {
		CompOpContext _localctx = new CompOpContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_compOp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5478);
			_la = _input.LA(1);
			if ( !(((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (EQUAL_OPERATOR - 383)) | (1L << (NULL_SAFE_EQUAL_OPERATOR - 383)) | (1L << (GREATER_OR_EQUAL_OPERATOR - 383)) | (1L << (GREATER_THAN_OPERATOR - 383)) | (1L << (LESS_OR_EQUAL_OPERATOR - 383)) | (1L << (LESS_THAN_OPERATOR - 383)) | (1L << (NOT_EQUAL_OPERATOR - 383)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public List<BitExprContext> bitExpr() {
			return getRuleContexts(BitExprContext.class);
		}
		public BitExprContext bitExpr(int i) {
			return getRuleContext(BitExprContext.class,i);
		}
		public PredicateOperationsContext predicateOperations() {
			return getRuleContext(PredicateOperationsContext.class,0);
		}
		public TerminalNode MEMBER_SYMBOL() { return getToken(MySQLParser.MEMBER_SYMBOL, 0); }
		public SimpleExprWithParenthesesContext simpleExprWithParentheses() {
			return getRuleContext(SimpleExprWithParenthesesContext.class,0);
		}
		public TerminalNode SOUNDS_SYMBOL() { return getToken(MySQLParser.SOUNDS_SYMBOL, 0); }
		public TerminalNode LIKE_SYMBOL() { return getToken(MySQLParser.LIKE_SYMBOL, 0); }
		public NotRuleContext notRule() {
			return getRuleContext(NotRuleContext.class,0);
		}
		public TerminalNode OF_SYMBOL() { return getToken(MySQLParser.OF_SYMBOL, 0); }
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
	}

	public final PredicateContext predicate() throws RecognitionException {
		PredicateContext _localctx = new PredicateContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_predicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5480);
			bitExpr(0);
			setState(5494);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,701,_ctx) ) {
			case 1:
				{
				setState(5482);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT2_SYMBOL || _la==NOT_SYMBOL) {
					{
					setState(5481);
					notRule();
					}
				}

				setState(5484);
				predicateOperations();
				}
				break;
			case 2:
				{
				setState(5485);
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				setState(5486);
				match(MEMBER_SYMBOL);
				setState(5488);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OF_SYMBOL) {
					{
					setState(5487);
					match(OF_SYMBOL);
					}
				}

				setState(5490);
				simpleExprWithParentheses();
				}
				break;
			case 3:
				{
				setState(5491);
				match(SOUNDS_SYMBOL);
				setState(5492);
				match(LIKE_SYMBOL);
				setState(5493);
				bitExpr(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PredicateOperationsContext extends ParserRuleContext {
		public PredicateOperationsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicateOperations; }
	 
		public PredicateOperationsContext() { }
		public void copyFrom(PredicateOperationsContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PredicateExprRegexContext extends PredicateOperationsContext {
		public TerminalNode REGEXP_SYMBOL() { return getToken(MySQLParser.REGEXP_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return getRuleContext(BitExprContext.class,0);
		}
		public PredicateExprRegexContext(PredicateOperationsContext ctx) { copyFrom(ctx); }
	}
	public static class PredicateExprBetweenContext extends PredicateOperationsContext {
		public TerminalNode BETWEEN_SYMBOL() { return getToken(MySQLParser.BETWEEN_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return getRuleContext(BitExprContext.class,0);
		}
		public TerminalNode AND_SYMBOL() { return getToken(MySQLParser.AND_SYMBOL, 0); }
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public PredicateExprBetweenContext(PredicateOperationsContext ctx) { copyFrom(ctx); }
	}
	public static class PredicateExprInContext extends PredicateOperationsContext {
		public TerminalNode IN_SYMBOL() { return getToken(MySQLParser.IN_SYMBOL, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public PredicateExprInContext(PredicateOperationsContext ctx) { copyFrom(ctx); }
	}
	public static class PredicateExprLikeContext extends PredicateOperationsContext {
		public TerminalNode LIKE_SYMBOL() { return getToken(MySQLParser.LIKE_SYMBOL, 0); }
		public List<SimpleExprContext> simpleExpr() {
			return getRuleContexts(SimpleExprContext.class);
		}
		public SimpleExprContext simpleExpr(int i) {
			return getRuleContext(SimpleExprContext.class,i);
		}
		public TerminalNode ESCAPE_SYMBOL() { return getToken(MySQLParser.ESCAPE_SYMBOL, 0); }
		public PredicateExprLikeContext(PredicateOperationsContext ctx) { copyFrom(ctx); }
	}

	public final PredicateOperationsContext predicateOperations() throws RecognitionException {
		PredicateOperationsContext _localctx = new PredicateOperationsContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_predicateOperations);
		try {
			setState(5517);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IN_SYMBOL:
				_localctx = new PredicateExprInContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5496);
				match(IN_SYMBOL);
				setState(5502);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,702,_ctx) ) {
				case 1:
					{
					setState(5497);
					subquery();
					}
					break;
				case 2:
					{
					setState(5498);
					match(OPEN_PAR_SYMBOL);
					setState(5499);
					exprList();
					setState(5500);
					match(CLOSE_PAR_SYMBOL);
					}
					break;
				}
				}
				break;
			case BETWEEN_SYMBOL:
				_localctx = new PredicateExprBetweenContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5504);
				match(BETWEEN_SYMBOL);
				setState(5505);
				bitExpr(0);
				setState(5506);
				match(AND_SYMBOL);
				setState(5507);
				predicate();
				}
				break;
			case LIKE_SYMBOL:
				_localctx = new PredicateExprLikeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5509);
				match(LIKE_SYMBOL);
				setState(5510);
				simpleExpr(0);
				setState(5513);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,703,_ctx) ) {
				case 1:
					{
					setState(5511);
					match(ESCAPE_SYMBOL);
					setState(5512);
					simpleExpr(0);
					}
					break;
				}
				}
				break;
			case REGEXP_SYMBOL:
				_localctx = new PredicateExprRegexContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5515);
				match(REGEXP_SYMBOL);
				setState(5516);
				bitExpr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitExprContext extends ParserRuleContext {
		public Token op;
		public SimpleExprContext simpleExpr() {
			return getRuleContext(SimpleExprContext.class,0);
		}
		public List<BitExprContext> bitExpr() {
			return getRuleContexts(BitExprContext.class);
		}
		public BitExprContext bitExpr(int i) {
			return getRuleContext(BitExprContext.class,i);
		}
		public TerminalNode BITWISE_XOR_OPERATOR() { return getToken(MySQLParser.BITWISE_XOR_OPERATOR, 0); }
		public TerminalNode MULT_OPERATOR() { return getToken(MySQLParser.MULT_OPERATOR, 0); }
		public TerminalNode DIV_OPERATOR() { return getToken(MySQLParser.DIV_OPERATOR, 0); }
		public TerminalNode MOD_OPERATOR() { return getToken(MySQLParser.MOD_OPERATOR, 0); }
		public TerminalNode DIV_SYMBOL() { return getToken(MySQLParser.DIV_SYMBOL, 0); }
		public TerminalNode MOD_SYMBOL() { return getToken(MySQLParser.MOD_SYMBOL, 0); }
		public TerminalNode PLUS_OPERATOR() { return getToken(MySQLParser.PLUS_OPERATOR, 0); }
		public TerminalNode MINUS_OPERATOR() { return getToken(MySQLParser.MINUS_OPERATOR, 0); }
		public TerminalNode SHIFT_LEFT_OPERATOR() { return getToken(MySQLParser.SHIFT_LEFT_OPERATOR, 0); }
		public TerminalNode SHIFT_RIGHT_OPERATOR() { return getToken(MySQLParser.SHIFT_RIGHT_OPERATOR, 0); }
		public TerminalNode BITWISE_AND_OPERATOR() { return getToken(MySQLParser.BITWISE_AND_OPERATOR, 0); }
		public TerminalNode BITWISE_OR_OPERATOR() { return getToken(MySQLParser.BITWISE_OR_OPERATOR, 0); }
		public TerminalNode INTERVAL_SYMBOL() { return getToken(MySQLParser.INTERVAL_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public IntervalContext interval() {
			return getRuleContext(IntervalContext.class,0);
		}
		public BitExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitExpr; }
	}

	public final BitExprContext bitExpr() throws RecognitionException {
		return bitExpr(0);
	}

	private BitExprContext bitExpr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		BitExprContext _localctx = new BitExprContext(_ctx, _parentState);
		BitExprContext _prevctx = _localctx;
		int _startState = 676;
		enterRecursionRule(_localctx, 676, RULE_bitExpr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5520);
			simpleExpr(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(5548);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,706,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(5546);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,705,_ctx) ) {
					case 1:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(5522);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(5523);
						((BitExprContext)_localctx).op = match(BITWISE_XOR_OPERATOR);
						setState(5524);
						bitExpr(8);
						}
						break;
					case 2:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(5525);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(5526);
						((BitExprContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (MULT_OPERATOR - 393)) | (1L << (DIV_OPERATOR - 393)) | (1L << (MOD_OPERATOR - 393)))) != 0) || _la==DIV_SYMBOL || _la==MOD_SYMBOL) ) {
							((BitExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5527);
						bitExpr(7);
						}
						break;
					case 3:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(5528);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(5529);
						((BitExprContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==PLUS_OPERATOR || _la==MINUS_OPERATOR) ) {
							((BitExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5530);
						bitExpr(6);
						}
						break;
					case 4:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(5531);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(5532);
						((BitExprContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==SHIFT_LEFT_OPERATOR || _la==SHIFT_RIGHT_OPERATOR) ) {
							((BitExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5533);
						bitExpr(4);
						}
						break;
					case 5:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(5534);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(5535);
						((BitExprContext)_localctx).op = match(BITWISE_AND_OPERATOR);
						setState(5536);
						bitExpr(3);
						}
						break;
					case 6:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(5537);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(5538);
						((BitExprContext)_localctx).op = match(BITWISE_OR_OPERATOR);
						setState(5539);
						bitExpr(2);
						}
						break;
					case 7:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(5540);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(5541);
						((BitExprContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==PLUS_OPERATOR || _la==MINUS_OPERATOR) ) {
							((BitExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5542);
						match(INTERVAL_SYMBOL);
						setState(5543);
						expr(0);
						setState(5544);
						interval();
						}
						break;
					}
					} 
				}
				setState(5550);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,706,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class SimpleExprContext extends ParserRuleContext {
		public SimpleExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleExpr; }
	 
		public SimpleExprContext() { }
		public void copyFrom(SimpleExprContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SimpleExprConvertContext extends SimpleExprContext {
		public TerminalNode CONVERT_SYMBOL() { return getToken(MySQLParser.CONVERT_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public CastTypeContext castType() {
			return getRuleContext(CastTypeContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprConvertContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleExprVariableContext extends SimpleExprContext {
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public SimpleExprVariableContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleExprCastContext extends SimpleExprContext {
		public TerminalNode CAST_SYMBOL() { return getToken(MySQLParser.CAST_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public CastTypeContext castType() {
			return getRuleContext(CastTypeContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ArrayCastContext arrayCast() {
			return getRuleContext(ArrayCastContext.class,0);
		}
		public SimpleExprCastContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleExprUnaryContext extends SimpleExprContext {
		public Token op;
		public SimpleExprContext simpleExpr() {
			return getRuleContext(SimpleExprContext.class,0);
		}
		public TerminalNode PLUS_OPERATOR() { return getToken(MySQLParser.PLUS_OPERATOR, 0); }
		public TerminalNode MINUS_OPERATOR() { return getToken(MySQLParser.MINUS_OPERATOR, 0); }
		public TerminalNode BITWISE_NOT_OPERATOR() { return getToken(MySQLParser.BITWISE_NOT_OPERATOR, 0); }
		public SimpleExprUnaryContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleExprOdbcContext extends SimpleExprContext {
		public TerminalNode OPEN_CURLY_SYMBOL() { return getToken(MySQLParser.OPEN_CURLY_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode CLOSE_CURLY_SYMBOL() { return getToken(MySQLParser.CLOSE_CURLY_SYMBOL, 0); }
		public SimpleExprOdbcContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleExprRuntimeFunctionContext extends SimpleExprContext {
		public RuntimeFunctionCallContext runtimeFunctionCall() {
			return getRuleContext(RuntimeFunctionCallContext.class,0);
		}
		public SimpleExprRuntimeFunctionContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleExprFunctionContext extends SimpleExprContext {
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public SimpleExprFunctionContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleExprCollateContext extends SimpleExprContext {
		public SimpleExprContext simpleExpr() {
			return getRuleContext(SimpleExprContext.class,0);
		}
		public TerminalNode COLLATE_SYMBOL() { return getToken(MySQLParser.COLLATE_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public SimpleExprCollateContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleExprMatchContext extends SimpleExprContext {
		public TerminalNode MATCH_SYMBOL() { return getToken(MySQLParser.MATCH_SYMBOL, 0); }
		public IdentListArgContext identListArg() {
			return getRuleContext(IdentListArgContext.class,0);
		}
		public TerminalNode AGAINST_SYMBOL() { return getToken(MySQLParser.AGAINST_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return getRuleContext(BitExprContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public FulltextOptionsContext fulltextOptions() {
			return getRuleContext(FulltextOptionsContext.class,0);
		}
		public SimpleExprMatchContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleExprWindowingFunctionContext extends SimpleExprContext {
		public WindowFunctionCallContext windowFunctionCall() {
			return getRuleContext(WindowFunctionCallContext.class,0);
		}
		public SimpleExprWindowingFunctionContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleExprBinaryContext extends SimpleExprContext {
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public SimpleExprContext simpleExpr() {
			return getRuleContext(SimpleExprContext.class,0);
		}
		public SimpleExprBinaryContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleExprColumnRefContext extends SimpleExprContext {
		public ColumnRefContext columnRef() {
			return getRuleContext(ColumnRefContext.class,0);
		}
		public JsonOperatorContext jsonOperator() {
			return getRuleContext(JsonOperatorContext.class,0);
		}
		public SimpleExprColumnRefContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleExprParamMarkerContext extends SimpleExprContext {
		public TerminalNode PARAM_MARKER() { return getToken(MySQLParser.PARAM_MARKER, 0); }
		public SimpleExprParamMarkerContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleExprSumContext extends SimpleExprContext {
		public SumExprContext sumExpr() {
			return getRuleContext(SumExprContext.class,0);
		}
		public SimpleExprSumContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleExprConvertUsingContext extends SimpleExprContext {
		public TerminalNode CONVERT_SYMBOL() { return getToken(MySQLParser.CONVERT_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode USING_SYMBOL() { return getToken(MySQLParser.USING_SYMBOL, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprConvertUsingContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleExprSubQueryContext extends SimpleExprContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode EXISTS_SYMBOL() { return getToken(MySQLParser.EXISTS_SYMBOL, 0); }
		public SimpleExprSubQueryContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleExprGroupingOperationContext extends SimpleExprContext {
		public GroupingOperationContext groupingOperation() {
			return getRuleContext(GroupingOperationContext.class,0);
		}
		public SimpleExprGroupingOperationContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleExprNotContext extends SimpleExprContext {
		public Not2RuleContext not2Rule() {
			return getRuleContext(Not2RuleContext.class,0);
		}
		public SimpleExprContext simpleExpr() {
			return getRuleContext(SimpleExprContext.class,0);
		}
		public SimpleExprNotContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleExprValuesContext extends SimpleExprContext {
		public TerminalNode VALUES_SYMBOL() { return getToken(MySQLParser.VALUES_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public SimpleIdentifierContext simpleIdentifier() {
			return getRuleContext(SimpleIdentifierContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprValuesContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleExprDefaultContext extends SimpleExprContext {
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public SimpleIdentifierContext simpleIdentifier() {
			return getRuleContext(SimpleIdentifierContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprDefaultContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleExprListContext extends SimpleExprContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode ROW_SYMBOL() { return getToken(MySQLParser.ROW_SYMBOL, 0); }
		public SimpleExprListContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleExprIntervalContext extends SimpleExprContext {
		public TerminalNode INTERVAL_SYMBOL() { return getToken(MySQLParser.INTERVAL_SYMBOL, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public IntervalContext interval() {
			return getRuleContext(IntervalContext.class,0);
		}
		public TerminalNode PLUS_OPERATOR() { return getToken(MySQLParser.PLUS_OPERATOR, 0); }
		public SimpleExprIntervalContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleExprCaseContext extends SimpleExprContext {
		public TerminalNode CASE_SYMBOL() { return getToken(MySQLParser.CASE_SYMBOL, 0); }
		public TerminalNode END_SYMBOL() { return getToken(MySQLParser.END_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public List<WhenExpressionContext> whenExpression() {
			return getRuleContexts(WhenExpressionContext.class);
		}
		public WhenExpressionContext whenExpression(int i) {
			return getRuleContext(WhenExpressionContext.class,i);
		}
		public List<ThenExpressionContext> thenExpression() {
			return getRuleContexts(ThenExpressionContext.class);
		}
		public ThenExpressionContext thenExpression(int i) {
			return getRuleContext(ThenExpressionContext.class,i);
		}
		public ElseExpressionContext elseExpression() {
			return getRuleContext(ElseExpressionContext.class,0);
		}
		public SimpleExprCaseContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleExprConcatContext extends SimpleExprContext {
		public List<SimpleExprContext> simpleExpr() {
			return getRuleContexts(SimpleExprContext.class);
		}
		public SimpleExprContext simpleExpr(int i) {
			return getRuleContext(SimpleExprContext.class,i);
		}
		public TerminalNode CONCAT_PIPES_SYMBOL() { return getToken(MySQLParser.CONCAT_PIPES_SYMBOL, 0); }
		public SimpleExprConcatContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleExprLiteralContext extends SimpleExprContext {
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public SimpleExprLiteralContext(SimpleExprContext ctx) { copyFrom(ctx); }
	}

	public final SimpleExprContext simpleExpr() throws RecognitionException {
		return simpleExpr(0);
	}

	private SimpleExprContext simpleExpr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		SimpleExprContext _localctx = new SimpleExprContext(_ctx, _parentState);
		SimpleExprContext _prevctx = _localctx;
		int _startState = 678;
		enterRecursionRule(_localctx, 678, RULE_simpleExpr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5655);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,715,_ctx) ) {
			case 1:
				{
				_localctx = new SimpleExprVariableContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(5552);
				variable();
				}
				break;
			case 2:
				{
				_localctx = new SimpleExprColumnRefContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5553);
				columnRef();
				setState(5555);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,707,_ctx) ) {
				case 1:
					{
					setState(5554);
					jsonOperator();
					}
					break;
				}
				}
				break;
			case 3:
				{
				_localctx = new SimpleExprRuntimeFunctionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5557);
				runtimeFunctionCall();
				}
				break;
			case 4:
				{
				_localctx = new SimpleExprFunctionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5558);
				functionCall();
				}
				break;
			case 5:
				{
				_localctx = new SimpleExprLiteralContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5559);
				literal();
				}
				break;
			case 6:
				{
				_localctx = new SimpleExprParamMarkerContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5560);
				match(PARAM_MARKER);
				}
				break;
			case 7:
				{
				_localctx = new SimpleExprSumContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5561);
				sumExpr();
				}
				break;
			case 8:
				{
				_localctx = new SimpleExprGroupingOperationContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5562);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(5563);
				groupingOperation();
				}
				break;
			case 9:
				{
				_localctx = new SimpleExprWindowingFunctionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5564);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(5565);
				windowFunctionCall();
				}
				break;
			case 10:
				{
				_localctx = new SimpleExprUnaryContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5566);
				((SimpleExprUnaryContext)_localctx).op = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 391)) & ~0x3f) == 0 && ((1L << (_la - 391)) & ((1L << (PLUS_OPERATOR - 391)) | (1L << (MINUS_OPERATOR - 391)) | (1L << (BITWISE_NOT_OPERATOR - 391)))) != 0)) ) {
					((SimpleExprUnaryContext)_localctx).op = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5567);
				simpleExpr(14);
				}
				break;
			case 11:
				{
				_localctx = new SimpleExprNotContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5568);
				not2Rule();
				setState(5569);
				simpleExpr(13);
				}
				break;
			case 12:
				{
				_localctx = new SimpleExprListContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5572);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROW_SYMBOL) {
					{
					setState(5571);
					match(ROW_SYMBOL);
					}
				}

				setState(5574);
				match(OPEN_PAR_SYMBOL);
				setState(5575);
				exprList();
				setState(5576);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 13:
				{
				_localctx = new SimpleExprSubQueryContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5579);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXISTS_SYMBOL) {
					{
					setState(5578);
					match(EXISTS_SYMBOL);
					}
				}

				setState(5581);
				subquery();
				}
				break;
			case 14:
				{
				_localctx = new SimpleExprOdbcContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5582);
				match(OPEN_CURLY_SYMBOL);
				setState(5583);
				identifier();
				setState(5584);
				expr(0);
				setState(5585);
				match(CLOSE_CURLY_SYMBOL);
				}
				break;
			case 15:
				{
				_localctx = new SimpleExprMatchContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5587);
				match(MATCH_SYMBOL);
				setState(5588);
				identListArg();
				setState(5589);
				match(AGAINST_SYMBOL);
				setState(5590);
				match(OPEN_PAR_SYMBOL);
				setState(5591);
				bitExpr(0);
				setState(5593);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN_SYMBOL || _la==WITH_SYMBOL) {
					{
					setState(5592);
					fulltextOptions();
					}
				}

				setState(5595);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 16:
				{
				_localctx = new SimpleExprBinaryContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5597);
				match(BINARY_SYMBOL);
				setState(5598);
				simpleExpr(8);
				}
				break;
			case 17:
				{
				_localctx = new SimpleExprCastContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5599);
				match(CAST_SYMBOL);
				setState(5600);
				match(OPEN_PAR_SYMBOL);
				setState(5601);
				expr(0);
				setState(5602);
				match(AS_SYMBOL);
				setState(5603);
				castType();
				setState(5605);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,711,_ctx) ) {
				case 1:
					{
					setState(5604);
					arrayCast();
					}
					break;
				}
				setState(5607);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 18:
				{
				_localctx = new SimpleExprCaseContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5609);
				match(CASE_SYMBOL);
				setState(5611);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,712,_ctx) ) {
				case 1:
					{
					setState(5610);
					expr(0);
					}
					break;
				}
				setState(5616); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5613);
					whenExpression();
					setState(5614);
					thenExpression();
					}
					}
					setState(5618); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN_SYMBOL );
				setState(5621);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE_SYMBOL) {
					{
					setState(5620);
					elseExpression();
					}
				}

				setState(5623);
				match(END_SYMBOL);
				}
				break;
			case 19:
				{
				_localctx = new SimpleExprConvertContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5625);
				match(CONVERT_SYMBOL);
				setState(5626);
				match(OPEN_PAR_SYMBOL);
				setState(5627);
				expr(0);
				setState(5628);
				match(COMMA_SYMBOL);
				setState(5629);
				castType();
				setState(5630);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 20:
				{
				_localctx = new SimpleExprConvertUsingContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5632);
				match(CONVERT_SYMBOL);
				setState(5633);
				match(OPEN_PAR_SYMBOL);
				setState(5634);
				expr(0);
				setState(5635);
				match(USING_SYMBOL);
				setState(5636);
				charsetName();
				setState(5637);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 21:
				{
				_localctx = new SimpleExprDefaultContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5639);
				match(DEFAULT_SYMBOL);
				setState(5640);
				match(OPEN_PAR_SYMBOL);
				setState(5641);
				simpleIdentifier();
				setState(5642);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 22:
				{
				_localctx = new SimpleExprValuesContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5644);
				match(VALUES_SYMBOL);
				setState(5645);
				match(OPEN_PAR_SYMBOL);
				setState(5646);
				simpleIdentifier();
				setState(5647);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 23:
				{
				_localctx = new SimpleExprIntervalContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5649);
				match(INTERVAL_SYMBOL);
				setState(5650);
				expr(0);
				setState(5651);
				interval();
				setState(5652);
				match(PLUS_OPERATOR);
				setState(5653);
				expr(0);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(5665);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,717,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(5663);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,716,_ctx) ) {
					case 1:
						{
						_localctx = new SimpleExprConcatContext(new SimpleExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_simpleExpr);
						setState(5657);
						if (!(precpred(_ctx, 15))) throw new FailedPredicateException(this, "precpred(_ctx, 15)");
						setState(5658);
						match(CONCAT_PIPES_SYMBOL);
						setState(5659);
						simpleExpr(16);
						}
						break;
					case 2:
						{
						_localctx = new SimpleExprCollateContext(new SimpleExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_simpleExpr);
						setState(5660);
						if (!(precpred(_ctx, 21))) throw new FailedPredicateException(this, "precpred(_ctx, 21)");
						setState(5661);
						match(COLLATE_SYMBOL);
						setState(5662);
						textOrIdentifier();
						}
						break;
					}
					} 
				}
				setState(5667);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,717,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ArrayCastContext extends ParserRuleContext {
		public TerminalNode ARRAY_SYMBOL() { return getToken(MySQLParser.ARRAY_SYMBOL, 0); }
		public ArrayCastContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arrayCast; }
	}

	public final ArrayCastContext arrayCast() throws RecognitionException {
		ArrayCastContext _localctx = new ArrayCastContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_arrayCast);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5668);
			if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
			setState(5669);
			match(ARRAY_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonOperatorContext extends ParserRuleContext {
		public TerminalNode JSON_SEPARATOR_SYMBOL() { return getToken(MySQLParser.JSON_SEPARATOR_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode JSON_UNQUOTED_SEPARATOR_SYMBOL() { return getToken(MySQLParser.JSON_UNQUOTED_SEPARATOR_SYMBOL, 0); }
		public JsonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonOperator; }
	}

	public final JsonOperatorContext jsonOperator() throws RecognitionException {
		JsonOperatorContext _localctx = new JsonOperatorContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_jsonOperator);
		try {
			setState(5677);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,718,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5671);
				if (!(serverVersion >= 50708)) throw new FailedPredicateException(this, "serverVersion >= 50708");
				setState(5672);
				match(JSON_SEPARATOR_SYMBOL);
				setState(5673);
				textStringLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5674);
				if (!(serverVersion >= 50713)) throw new FailedPredicateException(this, "serverVersion >= 50713");
				setState(5675);
				match(JSON_UNQUOTED_SEPARATOR_SYMBOL);
				setState(5676);
				textStringLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SumExprContext extends ParserRuleContext {
		public Token name;
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public InSumExprContext inSumExpr() {
			return getRuleContext(InSumExprContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode AVG_SYMBOL() { return getToken(MySQLParser.AVG_SYMBOL, 0); }
		public TerminalNode DISTINCT_SYMBOL() { return getToken(MySQLParser.DISTINCT_SYMBOL, 0); }
		public WindowingClauseContext windowingClause() {
			return getRuleContext(WindowingClauseContext.class,0);
		}
		public TerminalNode BIT_AND_SYMBOL() { return getToken(MySQLParser.BIT_AND_SYMBOL, 0); }
		public TerminalNode BIT_OR_SYMBOL() { return getToken(MySQLParser.BIT_OR_SYMBOL, 0); }
		public TerminalNode BIT_XOR_SYMBOL() { return getToken(MySQLParser.BIT_XOR_SYMBOL, 0); }
		public JsonFunctionContext jsonFunction() {
			return getRuleContext(JsonFunctionContext.class,0);
		}
		public TerminalNode MULT_OPERATOR() { return getToken(MySQLParser.MULT_OPERATOR, 0); }
		public TerminalNode COUNT_SYMBOL() { return getToken(MySQLParser.COUNT_SYMBOL, 0); }
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode MIN_SYMBOL() { return getToken(MySQLParser.MIN_SYMBOL, 0); }
		public TerminalNode MAX_SYMBOL() { return getToken(MySQLParser.MAX_SYMBOL, 0); }
		public TerminalNode STD_SYMBOL() { return getToken(MySQLParser.STD_SYMBOL, 0); }
		public TerminalNode VARIANCE_SYMBOL() { return getToken(MySQLParser.VARIANCE_SYMBOL, 0); }
		public TerminalNode STDDEV_SAMP_SYMBOL() { return getToken(MySQLParser.STDDEV_SAMP_SYMBOL, 0); }
		public TerminalNode VAR_SAMP_SYMBOL() { return getToken(MySQLParser.VAR_SAMP_SYMBOL, 0); }
		public TerminalNode SUM_SYMBOL() { return getToken(MySQLParser.SUM_SYMBOL, 0); }
		public TerminalNode GROUP_CONCAT_SYMBOL() { return getToken(MySQLParser.GROUP_CONCAT_SYMBOL, 0); }
		public OrderClauseContext orderClause() {
			return getRuleContext(OrderClauseContext.class,0);
		}
		public TerminalNode SEPARATOR_SYMBOL() { return getToken(MySQLParser.SEPARATOR_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public SumExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sumExpr; }
	}

	public final SumExprContext sumExpr() throws RecognitionException {
		SumExprContext _localctx = new SumExprContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_sumExpr);
		int _la;
		try {
			setState(5810);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,741,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5679);
				((SumExprContext)_localctx).name = match(AVG_SYMBOL);
				setState(5680);
				match(OPEN_PAR_SYMBOL);
				setState(5682);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,719,_ctx) ) {
				case 1:
					{
					setState(5681);
					match(DISTINCT_SYMBOL);
					}
					break;
				}
				setState(5684);
				inSumExpr();
				setState(5685);
				match(CLOSE_PAR_SYMBOL);
				setState(5688);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,720,_ctx) ) {
				case 1:
					{
					setState(5686);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5687);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5690);
				((SumExprContext)_localctx).name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 439)) & ~0x3f) == 0 && ((1L << (_la - 439)) & ((1L << (BIT_AND_SYMBOL - 439)) | (1L << (BIT_OR_SYMBOL - 439)) | (1L << (BIT_XOR_SYMBOL - 439)))) != 0)) ) {
					((SumExprContext)_localctx).name = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5691);
				match(OPEN_PAR_SYMBOL);
				setState(5692);
				inSumExpr();
				setState(5693);
				match(CLOSE_PAR_SYMBOL);
				setState(5696);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,721,_ctx) ) {
				case 1:
					{
					setState(5694);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5695);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5698);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(5699);
				jsonFunction();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5700);
				((SumExprContext)_localctx).name = match(COUNT_SYMBOL);
				setState(5701);
				match(OPEN_PAR_SYMBOL);
				setState(5703);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL_SYMBOL) {
					{
					setState(5702);
					match(ALL_SYMBOL);
					}
				}

				setState(5705);
				match(MULT_OPERATOR);
				setState(5706);
				match(CLOSE_PAR_SYMBOL);
				setState(5709);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,723,_ctx) ) {
				case 1:
					{
					setState(5707);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5708);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5711);
				((SumExprContext)_localctx).name = match(COUNT_SYMBOL);
				setState(5712);
				match(OPEN_PAR_SYMBOL);
				setState(5720);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,725,_ctx) ) {
				case 1:
					{
					setState(5714);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL_SYMBOL) {
						{
						setState(5713);
						match(ALL_SYMBOL);
						}
					}

					setState(5716);
					match(MULT_OPERATOR);
					}
					break;
				case 2:
					{
					setState(5717);
					inSumExpr();
					}
					break;
				case 3:
					{
					setState(5718);
					match(DISTINCT_SYMBOL);
					setState(5719);
					exprList();
					}
					break;
				}
				setState(5722);
				match(CLOSE_PAR_SYMBOL);
				setState(5725);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,726,_ctx) ) {
				case 1:
					{
					setState(5723);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5724);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5727);
				((SumExprContext)_localctx).name = match(MIN_SYMBOL);
				setState(5728);
				match(OPEN_PAR_SYMBOL);
				setState(5730);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,727,_ctx) ) {
				case 1:
					{
					setState(5729);
					match(DISTINCT_SYMBOL);
					}
					break;
				}
				setState(5732);
				inSumExpr();
				setState(5733);
				match(CLOSE_PAR_SYMBOL);
				setState(5736);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,728,_ctx) ) {
				case 1:
					{
					setState(5734);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5735);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5738);
				((SumExprContext)_localctx).name = match(MAX_SYMBOL);
				setState(5739);
				match(OPEN_PAR_SYMBOL);
				setState(5741);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,729,_ctx) ) {
				case 1:
					{
					setState(5740);
					match(DISTINCT_SYMBOL);
					}
					break;
				}
				setState(5743);
				inSumExpr();
				setState(5744);
				match(CLOSE_PAR_SYMBOL);
				setState(5747);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,730,_ctx) ) {
				case 1:
					{
					setState(5745);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5746);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5749);
				((SumExprContext)_localctx).name = match(STD_SYMBOL);
				setState(5750);
				match(OPEN_PAR_SYMBOL);
				setState(5751);
				inSumExpr();
				setState(5752);
				match(CLOSE_PAR_SYMBOL);
				setState(5755);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,731,_ctx) ) {
				case 1:
					{
					setState(5753);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5754);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5757);
				((SumExprContext)_localctx).name = match(VARIANCE_SYMBOL);
				setState(5758);
				match(OPEN_PAR_SYMBOL);
				setState(5759);
				inSumExpr();
				setState(5760);
				match(CLOSE_PAR_SYMBOL);
				setState(5763);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,732,_ctx) ) {
				case 1:
					{
					setState(5761);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5762);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5765);
				((SumExprContext)_localctx).name = match(STDDEV_SAMP_SYMBOL);
				setState(5766);
				match(OPEN_PAR_SYMBOL);
				setState(5767);
				inSumExpr();
				setState(5768);
				match(CLOSE_PAR_SYMBOL);
				setState(5771);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,733,_ctx) ) {
				case 1:
					{
					setState(5769);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5770);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5773);
				((SumExprContext)_localctx).name = match(VAR_SAMP_SYMBOL);
				setState(5774);
				match(OPEN_PAR_SYMBOL);
				setState(5775);
				inSumExpr();
				setState(5776);
				match(CLOSE_PAR_SYMBOL);
				setState(5779);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,734,_ctx) ) {
				case 1:
					{
					setState(5777);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5778);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5781);
				((SumExprContext)_localctx).name = match(SUM_SYMBOL);
				setState(5782);
				match(OPEN_PAR_SYMBOL);
				setState(5784);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,735,_ctx) ) {
				case 1:
					{
					setState(5783);
					match(DISTINCT_SYMBOL);
					}
					break;
				}
				setState(5786);
				inSumExpr();
				setState(5787);
				match(CLOSE_PAR_SYMBOL);
				setState(5790);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,736,_ctx) ) {
				case 1:
					{
					setState(5788);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5789);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5792);
				((SumExprContext)_localctx).name = match(GROUP_CONCAT_SYMBOL);
				setState(5793);
				match(OPEN_PAR_SYMBOL);
				setState(5795);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,737,_ctx) ) {
				case 1:
					{
					setState(5794);
					match(DISTINCT_SYMBOL);
					}
					break;
				}
				setState(5797);
				exprList();
				setState(5799);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER_SYMBOL) {
					{
					setState(5798);
					orderClause();
					}
				}

				setState(5803);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEPARATOR_SYMBOL) {
					{
					setState(5801);
					match(SEPARATOR_SYMBOL);
					setState(5802);
					textString();
					}
				}

				setState(5805);
				match(CLOSE_PAR_SYMBOL);
				setState(5808);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,740,_ctx) ) {
				case 1:
					{
					setState(5806);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5807);
					windowingClause();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupingOperationContext extends ParserRuleContext {
		public TerminalNode GROUPING_SYMBOL() { return getToken(MySQLParser.GROUPING_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public GroupingOperationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingOperation; }
	}

	public final GroupingOperationContext groupingOperation() throws RecognitionException {
		GroupingOperationContext _localctx = new GroupingOperationContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_groupingOperation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5812);
			match(GROUPING_SYMBOL);
			setState(5813);
			match(OPEN_PAR_SYMBOL);
			setState(5814);
			exprList();
			setState(5815);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFunctionCallContext extends ParserRuleContext {
		public ParenthesesContext parentheses() {
			return getRuleContext(ParenthesesContext.class,0);
		}
		public WindowingClauseContext windowingClause() {
			return getRuleContext(WindowingClauseContext.class,0);
		}
		public TerminalNode ROW_NUMBER_SYMBOL() { return getToken(MySQLParser.ROW_NUMBER_SYMBOL, 0); }
		public TerminalNode RANK_SYMBOL() { return getToken(MySQLParser.RANK_SYMBOL, 0); }
		public TerminalNode DENSE_RANK_SYMBOL() { return getToken(MySQLParser.DENSE_RANK_SYMBOL, 0); }
		public TerminalNode CUME_DIST_SYMBOL() { return getToken(MySQLParser.CUME_DIST_SYMBOL, 0); }
		public TerminalNode PERCENT_RANK_SYMBOL() { return getToken(MySQLParser.PERCENT_RANK_SYMBOL, 0); }
		public TerminalNode NTILE_SYMBOL() { return getToken(MySQLParser.NTILE_SYMBOL, 0); }
		public SimpleExprWithParenthesesContext simpleExprWithParentheses() {
			return getRuleContext(SimpleExprWithParenthesesContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode LEAD_SYMBOL() { return getToken(MySQLParser.LEAD_SYMBOL, 0); }
		public TerminalNode LAG_SYMBOL() { return getToken(MySQLParser.LAG_SYMBOL, 0); }
		public LeadLagInfoContext leadLagInfo() {
			return getRuleContext(LeadLagInfoContext.class,0);
		}
		public NullTreatmentContext nullTreatment() {
			return getRuleContext(NullTreatmentContext.class,0);
		}
		public ExprWithParenthesesContext exprWithParentheses() {
			return getRuleContext(ExprWithParenthesesContext.class,0);
		}
		public TerminalNode FIRST_VALUE_SYMBOL() { return getToken(MySQLParser.FIRST_VALUE_SYMBOL, 0); }
		public TerminalNode LAST_VALUE_SYMBOL() { return getToken(MySQLParser.LAST_VALUE_SYMBOL, 0); }
		public TerminalNode NTH_VALUE_SYMBOL() { return getToken(MySQLParser.NTH_VALUE_SYMBOL, 0); }
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public SimpleExprContext simpleExpr() {
			return getRuleContext(SimpleExprContext.class,0);
		}
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode FIRST_SYMBOL() { return getToken(MySQLParser.FIRST_SYMBOL, 0); }
		public TerminalNode LAST_SYMBOL() { return getToken(MySQLParser.LAST_SYMBOL, 0); }
		public WindowFunctionCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFunctionCall; }
	}

	public final WindowFunctionCallContext windowFunctionCall() throws RecognitionException {
		WindowFunctionCallContext _localctx = new WindowFunctionCallContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_windowFunctionCall);
		int _la;
		try {
			setState(5859);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CUME_DIST_SYMBOL:
			case DENSE_RANK_SYMBOL:
			case PERCENT_RANK_SYMBOL:
			case RANK_SYMBOL:
			case ROW_NUMBER_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5817);
				_la = _input.LA(1);
				if ( !(((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CUME_DIST_SYMBOL - 708)) | (1L << (DENSE_RANK_SYMBOL - 708)) | (1L << (PERCENT_RANK_SYMBOL - 708)) | (1L << (RANK_SYMBOL - 708)) | (1L << (ROW_NUMBER_SYMBOL - 708)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5818);
				parentheses();
				setState(5819);
				windowingClause();
				}
				break;
			case NTILE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5821);
				match(NTILE_SYMBOL);
				setState(5822);
				simpleExprWithParentheses();
				setState(5823);
				windowingClause();
				}
				break;
			case LAG_SYMBOL:
			case LEAD_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5825);
				_la = _input.LA(1);
				if ( !(_la==LAG_SYMBOL || _la==LEAD_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5826);
				match(OPEN_PAR_SYMBOL);
				setState(5827);
				expr(0);
				setState(5829);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(5828);
					leadLagInfo();
					}
				}

				setState(5831);
				match(CLOSE_PAR_SYMBOL);
				setState(5833);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE_SYMBOL || _la==RESPECT_SYMBOL) {
					{
					setState(5832);
					nullTreatment();
					}
				}

				setState(5835);
				windowingClause();
				}
				break;
			case FIRST_VALUE_SYMBOL:
			case LAST_VALUE_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(5837);
				_la = _input.LA(1);
				if ( !(_la==FIRST_VALUE_SYMBOL || _la==LAST_VALUE_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5838);
				exprWithParentheses();
				setState(5840);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE_SYMBOL || _la==RESPECT_SYMBOL) {
					{
					setState(5839);
					nullTreatment();
					}
				}

				setState(5842);
				windowingClause();
				}
				break;
			case NTH_VALUE_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(5844);
				match(NTH_VALUE_SYMBOL);
				setState(5845);
				match(OPEN_PAR_SYMBOL);
				setState(5846);
				expr(0);
				setState(5847);
				match(COMMA_SYMBOL);
				setState(5848);
				simpleExpr(0);
				setState(5849);
				match(CLOSE_PAR_SYMBOL);
				setState(5852);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM_SYMBOL) {
					{
					setState(5850);
					match(FROM_SYMBOL);
					setState(5851);
					_la = _input.LA(1);
					if ( !(_la==FIRST_SYMBOL || _la==LAST_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5855);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE_SYMBOL || _la==RESPECT_SYMBOL) {
					{
					setState(5854);
					nullTreatment();
					}
				}

				setState(5857);
				windowingClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowingClauseContext extends ParserRuleContext {
		public TerminalNode OVER_SYMBOL() { return getToken(MySQLParser.OVER_SYMBOL, 0); }
		public WindowNameContext windowName() {
			return getRuleContext(WindowNameContext.class,0);
		}
		public WindowSpecContext windowSpec() {
			return getRuleContext(WindowSpecContext.class,0);
		}
		public WindowingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowingClause; }
	}

	public final WindowingClauseContext windowingClause() throws RecognitionException {
		WindowingClauseContext _localctx = new WindowingClauseContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_windowingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5861);
			match(OVER_SYMBOL);
			setState(5864);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,748,_ctx) ) {
			case 1:
				{
				setState(5862);
				windowName();
				}
				break;
			case 2:
				{
				setState(5863);
				windowSpec();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LeadLagInfoContext extends ParserRuleContext {
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public Ulonglong_numberContext ulonglong_number() {
			return getRuleContext(Ulonglong_numberContext.class,0);
		}
		public TerminalNode PARAM_MARKER() { return getToken(MySQLParser.PARAM_MARKER, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public LeadLagInfoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_leadLagInfo; }
	}

	public final LeadLagInfoContext leadLagInfo() throws RecognitionException {
		LeadLagInfoContext _localctx = new LeadLagInfoContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_leadLagInfo);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5866);
			match(COMMA_SYMBOL);
			setState(5869);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
				{
				setState(5867);
				ulonglong_number();
				}
				break;
			case PARAM_MARKER:
				{
				setState(5868);
				match(PARAM_MARKER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5873);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA_SYMBOL) {
				{
				setState(5871);
				match(COMMA_SYMBOL);
				setState(5872);
				expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullTreatmentContext extends ParserRuleContext {
		public TerminalNode NULLS_SYMBOL() { return getToken(MySQLParser.NULLS_SYMBOL, 0); }
		public TerminalNode RESPECT_SYMBOL() { return getToken(MySQLParser.RESPECT_SYMBOL, 0); }
		public TerminalNode IGNORE_SYMBOL() { return getToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public NullTreatmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullTreatment; }
	}

	public final NullTreatmentContext nullTreatment() throws RecognitionException {
		NullTreatmentContext _localctx = new NullTreatmentContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_nullTreatment);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5875);
			_la = _input.LA(1);
			if ( !(_la==IGNORE_SYMBOL || _la==RESPECT_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5876);
			match(NULLS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonFunctionContext extends ParserRuleContext {
		public TerminalNode JSON_ARRAYAGG_SYMBOL() { return getToken(MySQLParser.JSON_ARRAYAGG_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<InSumExprContext> inSumExpr() {
			return getRuleContexts(InSumExprContext.class);
		}
		public InSumExprContext inSumExpr(int i) {
			return getRuleContext(InSumExprContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public WindowingClauseContext windowingClause() {
			return getRuleContext(WindowingClauseContext.class,0);
		}
		public TerminalNode JSON_OBJECTAGG_SYMBOL() { return getToken(MySQLParser.JSON_OBJECTAGG_SYMBOL, 0); }
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public JsonFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonFunction; }
	}

	public final JsonFunctionContext jsonFunction() throws RecognitionException {
		JsonFunctionContext _localctx = new JsonFunctionContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_jsonFunction);
		try {
			setState(5894);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JSON_ARRAYAGG_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5878);
				match(JSON_ARRAYAGG_SYMBOL);
				setState(5879);
				match(OPEN_PAR_SYMBOL);
				setState(5880);
				inSumExpr();
				setState(5881);
				match(CLOSE_PAR_SYMBOL);
				setState(5883);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,751,_ctx) ) {
				case 1:
					{
					setState(5882);
					windowingClause();
					}
					break;
				}
				}
				break;
			case JSON_OBJECTAGG_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5885);
				match(JSON_OBJECTAGG_SYMBOL);
				setState(5886);
				match(OPEN_PAR_SYMBOL);
				setState(5887);
				inSumExpr();
				setState(5888);
				match(COMMA_SYMBOL);
				setState(5889);
				inSumExpr();
				setState(5890);
				match(CLOSE_PAR_SYMBOL);
				setState(5892);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,752,_ctx) ) {
				case 1:
					{
					setState(5891);
					windowingClause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InSumExprContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public InSumExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inSumExpr; }
	}

	public final InSumExprContext inSumExpr() throws RecognitionException {
		InSumExprContext _localctx = new InSumExprContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_inSumExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5897);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,754,_ctx) ) {
			case 1:
				{
				setState(5896);
				match(ALL_SYMBOL);
				}
				break;
			}
			setState(5899);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentListArgContext extends ParserRuleContext {
		public IdentListContext identList() {
			return getRuleContext(IdentListContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public IdentListArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identListArg; }
	}

	public final IdentListArgContext identListArg() throws RecognitionException {
		IdentListArgContext _localctx = new IdentListArgContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_identListArg);
		try {
			setState(5906);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,755,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5901);
				identList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5902);
				match(OPEN_PAR_SYMBOL);
				setState(5903);
				identList();
				setState(5904);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentListContext extends ParserRuleContext {
		public List<SimpleIdentifierContext> simpleIdentifier() {
			return getRuleContexts(SimpleIdentifierContext.class);
		}
		public SimpleIdentifierContext simpleIdentifier(int i) {
			return getRuleContext(SimpleIdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public IdentListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identList; }
	}

	public final IdentListContext identList() throws RecognitionException {
		IdentListContext _localctx = new IdentListContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_identList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5908);
			simpleIdentifier();
			setState(5913);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(5909);
				match(COMMA_SYMBOL);
				setState(5910);
				simpleIdentifier();
				}
				}
				setState(5915);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FulltextOptionsContext extends ParserRuleContext {
		public TerminalNode IN_SYMBOL() { return getToken(MySQLParser.IN_SYMBOL, 0); }
		public TerminalNode BOOLEAN_SYMBOL() { return getToken(MySQLParser.BOOLEAN_SYMBOL, 0); }
		public TerminalNode MODE_SYMBOL() { return getToken(MySQLParser.MODE_SYMBOL, 0); }
		public TerminalNode NATURAL_SYMBOL() { return getToken(MySQLParser.NATURAL_SYMBOL, 0); }
		public TerminalNode LANGUAGE_SYMBOL() { return getToken(MySQLParser.LANGUAGE_SYMBOL, 0); }
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode QUERY_SYMBOL() { return getToken(MySQLParser.QUERY_SYMBOL, 0); }
		public TerminalNode EXPANSION_SYMBOL() { return getToken(MySQLParser.EXPANSION_SYMBOL, 0); }
		public FulltextOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fulltextOptions; }
	}

	public final FulltextOptionsContext fulltextOptions() throws RecognitionException {
		FulltextOptionsContext _localctx = new FulltextOptionsContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_fulltextOptions);
		int _la;
		try {
			setState(5931);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,758,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5916);
				match(IN_SYMBOL);
				setState(5917);
				match(BOOLEAN_SYMBOL);
				setState(5918);
				match(MODE_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5919);
				match(IN_SYMBOL);
				setState(5920);
				match(NATURAL_SYMBOL);
				setState(5921);
				match(LANGUAGE_SYMBOL);
				setState(5922);
				match(MODE_SYMBOL);
				setState(5926);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH_SYMBOL) {
					{
					setState(5923);
					match(WITH_SYMBOL);
					setState(5924);
					match(QUERY_SYMBOL);
					setState(5925);
					match(EXPANSION_SYMBOL);
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5928);
				match(WITH_SYMBOL);
				setState(5929);
				match(QUERY_SYMBOL);
				setState(5930);
				match(EXPANSION_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RuntimeFunctionCallContext extends ParserRuleContext {
		public Token name;
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode CHAR_SYMBOL() { return getToken(MySQLParser.CHAR_SYMBOL, 0); }
		public TerminalNode USING_SYMBOL() { return getToken(MySQLParser.USING_SYMBOL, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode CURRENT_USER_SYMBOL() { return getToken(MySQLParser.CURRENT_USER_SYMBOL, 0); }
		public ParenthesesContext parentheses() {
			return getRuleContext(ParenthesesContext.class,0);
		}
		public ExprWithParenthesesContext exprWithParentheses() {
			return getRuleContext(ExprWithParenthesesContext.class,0);
		}
		public TerminalNode DATE_SYMBOL() { return getToken(MySQLParser.DATE_SYMBOL, 0); }
		public TerminalNode DAY_SYMBOL() { return getToken(MySQLParser.DAY_SYMBOL, 0); }
		public TerminalNode HOUR_SYMBOL() { return getToken(MySQLParser.HOUR_SYMBOL, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TerminalNode INSERT_SYMBOL() { return getToken(MySQLParser.INSERT_SYMBOL, 0); }
		public TerminalNode INTERVAL_SYMBOL() { return getToken(MySQLParser.INTERVAL_SYMBOL, 0); }
		public TerminalNode LEFT_SYMBOL() { return getToken(MySQLParser.LEFT_SYMBOL, 0); }
		public TerminalNode MINUTE_SYMBOL() { return getToken(MySQLParser.MINUTE_SYMBOL, 0); }
		public TerminalNode MONTH_SYMBOL() { return getToken(MySQLParser.MONTH_SYMBOL, 0); }
		public TerminalNode RIGHT_SYMBOL() { return getToken(MySQLParser.RIGHT_SYMBOL, 0); }
		public TerminalNode SECOND_SYMBOL() { return getToken(MySQLParser.SECOND_SYMBOL, 0); }
		public TerminalNode TIME_SYMBOL() { return getToken(MySQLParser.TIME_SYMBOL, 0); }
		public TerminalNode TIMESTAMP_SYMBOL() { return getToken(MySQLParser.TIMESTAMP_SYMBOL, 0); }
		public TrimFunctionContext trimFunction() {
			return getRuleContext(TrimFunctionContext.class,0);
		}
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public TerminalNode VALUES_SYMBOL() { return getToken(MySQLParser.VALUES_SYMBOL, 0); }
		public TerminalNode YEAR_SYMBOL() { return getToken(MySQLParser.YEAR_SYMBOL, 0); }
		public TerminalNode ADDDATE_SYMBOL() { return getToken(MySQLParser.ADDDATE_SYMBOL, 0); }
		public TerminalNode SUBDATE_SYMBOL() { return getToken(MySQLParser.SUBDATE_SYMBOL, 0); }
		public IntervalContext interval() {
			return getRuleContext(IntervalContext.class,0);
		}
		public TerminalNode CURDATE_SYMBOL() { return getToken(MySQLParser.CURDATE_SYMBOL, 0); }
		public TerminalNode CURTIME_SYMBOL() { return getToken(MySQLParser.CURTIME_SYMBOL, 0); }
		public TimeFunctionParametersContext timeFunctionParameters() {
			return getRuleContext(TimeFunctionParametersContext.class,0);
		}
		public TerminalNode DATE_ADD_SYMBOL() { return getToken(MySQLParser.DATE_ADD_SYMBOL, 0); }
		public TerminalNode DATE_SUB_SYMBOL() { return getToken(MySQLParser.DATE_SUB_SYMBOL, 0); }
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode EXTRACT_SYMBOL() { return getToken(MySQLParser.EXTRACT_SYMBOL, 0); }
		public DateTimeTtypeContext dateTimeTtype() {
			return getRuleContext(DateTimeTtypeContext.class,0);
		}
		public TerminalNode GET_FORMAT_SYMBOL() { return getToken(MySQLParser.GET_FORMAT_SYMBOL, 0); }
		public TerminalNode NOW_SYMBOL() { return getToken(MySQLParser.NOW_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return getRuleContext(BitExprContext.class,0);
		}
		public TerminalNode IN_SYMBOL() { return getToken(MySQLParser.IN_SYMBOL, 0); }
		public TerminalNode POSITION_SYMBOL() { return getToken(MySQLParser.POSITION_SYMBOL, 0); }
		public SubstringFunctionContext substringFunction() {
			return getRuleContext(SubstringFunctionContext.class,0);
		}
		public TerminalNode SYSDATE_SYMBOL() { return getToken(MySQLParser.SYSDATE_SYMBOL, 0); }
		public IntervalTimeStampContext intervalTimeStamp() {
			return getRuleContext(IntervalTimeStampContext.class,0);
		}
		public TerminalNode TIMESTAMP_ADD_SYMBOL() { return getToken(MySQLParser.TIMESTAMP_ADD_SYMBOL, 0); }
		public TerminalNode TIMESTAMP_DIFF_SYMBOL() { return getToken(MySQLParser.TIMESTAMP_DIFF_SYMBOL, 0); }
		public TerminalNode UTC_DATE_SYMBOL() { return getToken(MySQLParser.UTC_DATE_SYMBOL, 0); }
		public TerminalNode UTC_TIME_SYMBOL() { return getToken(MySQLParser.UTC_TIME_SYMBOL, 0); }
		public TerminalNode UTC_TIMESTAMP_SYMBOL() { return getToken(MySQLParser.UTC_TIMESTAMP_SYMBOL, 0); }
		public TerminalNode ASCII_SYMBOL() { return getToken(MySQLParser.ASCII_SYMBOL, 0); }
		public TerminalNode CHARSET_SYMBOL() { return getToken(MySQLParser.CHARSET_SYMBOL, 0); }
		public ExprListWithParenthesesContext exprListWithParentheses() {
			return getRuleContext(ExprListWithParenthesesContext.class,0);
		}
		public TerminalNode COALESCE_SYMBOL() { return getToken(MySQLParser.COALESCE_SYMBOL, 0); }
		public TerminalNode COLLATION_SYMBOL() { return getToken(MySQLParser.COLLATION_SYMBOL, 0); }
		public TerminalNode DATABASE_SYMBOL() { return getToken(MySQLParser.DATABASE_SYMBOL, 0); }
		public TerminalNode IF_SYMBOL() { return getToken(MySQLParser.IF_SYMBOL, 0); }
		public TerminalNode FORMAT_SYMBOL() { return getToken(MySQLParser.FORMAT_SYMBOL, 0); }
		public TerminalNode MICROSECOND_SYMBOL() { return getToken(MySQLParser.MICROSECOND_SYMBOL, 0); }
		public TerminalNode MOD_SYMBOL() { return getToken(MySQLParser.MOD_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode OLD_PASSWORD_SYMBOL() { return getToken(MySQLParser.OLD_PASSWORD_SYMBOL, 0); }
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public TerminalNode QUARTER_SYMBOL() { return getToken(MySQLParser.QUARTER_SYMBOL, 0); }
		public TerminalNode REPEAT_SYMBOL() { return getToken(MySQLParser.REPEAT_SYMBOL, 0); }
		public TerminalNode REPLACE_SYMBOL() { return getToken(MySQLParser.REPLACE_SYMBOL, 0); }
		public TerminalNode REVERSE_SYMBOL() { return getToken(MySQLParser.REVERSE_SYMBOL, 0); }
		public TerminalNode ROW_COUNT_SYMBOL() { return getToken(MySQLParser.ROW_COUNT_SYMBOL, 0); }
		public TerminalNode TRUNCATE_SYMBOL() { return getToken(MySQLParser.TRUNCATE_SYMBOL, 0); }
		public TerminalNode WEEK_SYMBOL() { return getToken(MySQLParser.WEEK_SYMBOL, 0); }
		public TerminalNode WEIGHT_STRING_SYMBOL() { return getToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0); }
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public WsNumCodepointsContext wsNumCodepoints() {
			return getRuleContext(WsNumCodepointsContext.class,0);
		}
		public List<Ulong_numberContext> ulong_number() {
			return getRuleContexts(Ulong_numberContext.class);
		}
		public Ulong_numberContext ulong_number(int i) {
			return getRuleContext(Ulong_numberContext.class,i);
		}
		public WeightStringLevelsContext weightStringLevels() {
			return getRuleContext(WeightStringLevelsContext.class,0);
		}
		public GeometryFunctionContext geometryFunction() {
			return getRuleContext(GeometryFunctionContext.class,0);
		}
		public RuntimeFunctionCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_runtimeFunctionCall; }
	}

	public final RuntimeFunctionCallContext runtimeFunctionCall() throws RecognitionException {
		RuntimeFunctionCallContext _localctx = new RuntimeFunctionCallContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_runtimeFunctionCall);
		int _la;
		try {
			setState(6206);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,776,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5933);
				((RuntimeFunctionCallContext)_localctx).name = match(CHAR_SYMBOL);
				setState(5934);
				match(OPEN_PAR_SYMBOL);
				setState(5935);
				exprList();
				setState(5938);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING_SYMBOL) {
					{
					setState(5936);
					match(USING_SYMBOL);
					setState(5937);
					charsetName();
					}
				}

				setState(5940);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5942);
				((RuntimeFunctionCallContext)_localctx).name = match(CURRENT_USER_SYMBOL);
				setState(5944);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,760,_ctx) ) {
				case 1:
					{
					setState(5943);
					parentheses();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5946);
				((RuntimeFunctionCallContext)_localctx).name = match(DATE_SYMBOL);
				setState(5947);
				exprWithParentheses();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5948);
				((RuntimeFunctionCallContext)_localctx).name = match(DAY_SYMBOL);
				setState(5949);
				exprWithParentheses();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5950);
				((RuntimeFunctionCallContext)_localctx).name = match(HOUR_SYMBOL);
				setState(5951);
				exprWithParentheses();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5952);
				((RuntimeFunctionCallContext)_localctx).name = match(INSERT_SYMBOL);
				setState(5953);
				match(OPEN_PAR_SYMBOL);
				setState(5954);
				expr(0);
				setState(5955);
				match(COMMA_SYMBOL);
				setState(5956);
				expr(0);
				setState(5957);
				match(COMMA_SYMBOL);
				setState(5958);
				expr(0);
				setState(5959);
				match(COMMA_SYMBOL);
				setState(5960);
				expr(0);
				setState(5961);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5963);
				((RuntimeFunctionCallContext)_localctx).name = match(INTERVAL_SYMBOL);
				setState(5964);
				match(OPEN_PAR_SYMBOL);
				setState(5965);
				expr(0);
				setState(5968); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5966);
					match(COMMA_SYMBOL);
					setState(5967);
					expr(0);
					}
					}
					setState(5970); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA_SYMBOL );
				setState(5972);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5974);
				((RuntimeFunctionCallContext)_localctx).name = match(LEFT_SYMBOL);
				setState(5975);
				match(OPEN_PAR_SYMBOL);
				setState(5976);
				expr(0);
				setState(5977);
				match(COMMA_SYMBOL);
				setState(5978);
				expr(0);
				setState(5979);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5981);
				((RuntimeFunctionCallContext)_localctx).name = match(MINUTE_SYMBOL);
				setState(5982);
				exprWithParentheses();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5983);
				((RuntimeFunctionCallContext)_localctx).name = match(MONTH_SYMBOL);
				setState(5984);
				exprWithParentheses();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5985);
				((RuntimeFunctionCallContext)_localctx).name = match(RIGHT_SYMBOL);
				setState(5986);
				match(OPEN_PAR_SYMBOL);
				setState(5987);
				expr(0);
				setState(5988);
				match(COMMA_SYMBOL);
				setState(5989);
				expr(0);
				setState(5990);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5992);
				((RuntimeFunctionCallContext)_localctx).name = match(SECOND_SYMBOL);
				setState(5993);
				exprWithParentheses();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5994);
				((RuntimeFunctionCallContext)_localctx).name = match(TIME_SYMBOL);
				setState(5995);
				exprWithParentheses();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5996);
				((RuntimeFunctionCallContext)_localctx).name = match(TIMESTAMP_SYMBOL);
				setState(5997);
				match(OPEN_PAR_SYMBOL);
				setState(5998);
				expr(0);
				setState(6001);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(5999);
					match(COMMA_SYMBOL);
					setState(6000);
					expr(0);
					}
				}

				setState(6003);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(6005);
				trimFunction();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(6006);
				((RuntimeFunctionCallContext)_localctx).name = match(USER_SYMBOL);
				setState(6007);
				parentheses();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(6008);
				((RuntimeFunctionCallContext)_localctx).name = match(VALUES_SYMBOL);
				setState(6009);
				exprWithParentheses();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(6010);
				((RuntimeFunctionCallContext)_localctx).name = match(YEAR_SYMBOL);
				setState(6011);
				exprWithParentheses();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(6012);
				((RuntimeFunctionCallContext)_localctx).name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ADDDATE_SYMBOL || _la==SUBDATE_SYMBOL) ) {
					((RuntimeFunctionCallContext)_localctx).name = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6013);
				match(OPEN_PAR_SYMBOL);
				setState(6014);
				expr(0);
				setState(6015);
				match(COMMA_SYMBOL);
				setState(6021);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,763,_ctx) ) {
				case 1:
					{
					setState(6016);
					expr(0);
					}
					break;
				case 2:
					{
					setState(6017);
					match(INTERVAL_SYMBOL);
					setState(6018);
					expr(0);
					setState(6019);
					interval();
					}
					break;
				}
				setState(6023);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(6025);
				((RuntimeFunctionCallContext)_localctx).name = match(CURDATE_SYMBOL);
				setState(6027);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,764,_ctx) ) {
				case 1:
					{
					setState(6026);
					parentheses();
					}
					break;
				}
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(6029);
				((RuntimeFunctionCallContext)_localctx).name = match(CURTIME_SYMBOL);
				setState(6031);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,765,_ctx) ) {
				case 1:
					{
					setState(6030);
					timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(6033);
				((RuntimeFunctionCallContext)_localctx).name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATE_ADD_SYMBOL || _la==DATE_SUB_SYMBOL) ) {
					((RuntimeFunctionCallContext)_localctx).name = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6034);
				match(OPEN_PAR_SYMBOL);
				setState(6035);
				expr(0);
				setState(6036);
				match(COMMA_SYMBOL);
				setState(6037);
				match(INTERVAL_SYMBOL);
				setState(6038);
				expr(0);
				setState(6039);
				interval();
				setState(6040);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(6042);
				((RuntimeFunctionCallContext)_localctx).name = match(EXTRACT_SYMBOL);
				setState(6043);
				match(OPEN_PAR_SYMBOL);
				setState(6044);
				interval();
				setState(6045);
				match(FROM_SYMBOL);
				setState(6046);
				expr(0);
				setState(6047);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(6049);
				((RuntimeFunctionCallContext)_localctx).name = match(GET_FORMAT_SYMBOL);
				setState(6050);
				match(OPEN_PAR_SYMBOL);
				setState(6051);
				dateTimeTtype();
				setState(6052);
				match(COMMA_SYMBOL);
				setState(6053);
				expr(0);
				setState(6054);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(6056);
				((RuntimeFunctionCallContext)_localctx).name = match(NOW_SYMBOL);
				setState(6058);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,766,_ctx) ) {
				case 1:
					{
					setState(6057);
					timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(6060);
				((RuntimeFunctionCallContext)_localctx).name = match(POSITION_SYMBOL);
				setState(6061);
				match(OPEN_PAR_SYMBOL);
				setState(6062);
				bitExpr(0);
				setState(6063);
				match(IN_SYMBOL);
				setState(6064);
				expr(0);
				setState(6065);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(6067);
				substringFunction();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(6068);
				((RuntimeFunctionCallContext)_localctx).name = match(SYSDATE_SYMBOL);
				setState(6070);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,767,_ctx) ) {
				case 1:
					{
					setState(6069);
					timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(6072);
				((RuntimeFunctionCallContext)_localctx).name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==TIMESTAMP_ADD_SYMBOL || _la==TIMESTAMP_DIFF_SYMBOL) ) {
					((RuntimeFunctionCallContext)_localctx).name = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6073);
				match(OPEN_PAR_SYMBOL);
				setState(6074);
				intervalTimeStamp();
				setState(6075);
				match(COMMA_SYMBOL);
				setState(6076);
				expr(0);
				setState(6077);
				match(COMMA_SYMBOL);
				setState(6078);
				expr(0);
				setState(6079);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(6081);
				((RuntimeFunctionCallContext)_localctx).name = match(UTC_DATE_SYMBOL);
				setState(6083);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,768,_ctx) ) {
				case 1:
					{
					setState(6082);
					parentheses();
					}
					break;
				}
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(6085);
				((RuntimeFunctionCallContext)_localctx).name = match(UTC_TIME_SYMBOL);
				setState(6087);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,769,_ctx) ) {
				case 1:
					{
					setState(6086);
					timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(6089);
				((RuntimeFunctionCallContext)_localctx).name = match(UTC_TIMESTAMP_SYMBOL);
				setState(6091);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,770,_ctx) ) {
				case 1:
					{
					setState(6090);
					timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(6093);
				((RuntimeFunctionCallContext)_localctx).name = match(ASCII_SYMBOL);
				setState(6094);
				exprWithParentheses();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(6095);
				((RuntimeFunctionCallContext)_localctx).name = match(CHARSET_SYMBOL);
				setState(6096);
				exprWithParentheses();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(6097);
				((RuntimeFunctionCallContext)_localctx).name = match(COALESCE_SYMBOL);
				setState(6098);
				exprListWithParentheses();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(6099);
				((RuntimeFunctionCallContext)_localctx).name = match(COLLATION_SYMBOL);
				setState(6100);
				exprWithParentheses();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(6101);
				((RuntimeFunctionCallContext)_localctx).name = match(DATABASE_SYMBOL);
				setState(6102);
				parentheses();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(6103);
				((RuntimeFunctionCallContext)_localctx).name = match(IF_SYMBOL);
				setState(6104);
				match(OPEN_PAR_SYMBOL);
				setState(6105);
				expr(0);
				setState(6106);
				match(COMMA_SYMBOL);
				setState(6107);
				expr(0);
				setState(6108);
				match(COMMA_SYMBOL);
				setState(6109);
				expr(0);
				setState(6110);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(6112);
				((RuntimeFunctionCallContext)_localctx).name = match(FORMAT_SYMBOL);
				setState(6113);
				match(OPEN_PAR_SYMBOL);
				setState(6114);
				expr(0);
				setState(6115);
				match(COMMA_SYMBOL);
				setState(6116);
				expr(0);
				setState(6119);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(6117);
					match(COMMA_SYMBOL);
					setState(6118);
					expr(0);
					}
				}

				setState(6121);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(6123);
				((RuntimeFunctionCallContext)_localctx).name = match(MICROSECOND_SYMBOL);
				setState(6124);
				exprWithParentheses();
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(6125);
				((RuntimeFunctionCallContext)_localctx).name = match(MOD_SYMBOL);
				setState(6126);
				match(OPEN_PAR_SYMBOL);
				setState(6127);
				expr(0);
				setState(6128);
				match(COMMA_SYMBOL);
				setState(6129);
				expr(0);
				setState(6130);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(6132);
				if (!(serverVersion < 50607)) throw new FailedPredicateException(this, "serverVersion < 50607");
				setState(6133);
				((RuntimeFunctionCallContext)_localctx).name = match(OLD_PASSWORD_SYMBOL);
				setState(6134);
				match(OPEN_PAR_SYMBOL);
				setState(6135);
				textLiteral();
				setState(6136);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(6138);
				if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
				setState(6139);
				((RuntimeFunctionCallContext)_localctx).name = match(PASSWORD_SYMBOL);
				setState(6140);
				exprWithParentheses();
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(6141);
				((RuntimeFunctionCallContext)_localctx).name = match(QUARTER_SYMBOL);
				setState(6142);
				exprWithParentheses();
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(6143);
				((RuntimeFunctionCallContext)_localctx).name = match(REPEAT_SYMBOL);
				setState(6144);
				match(OPEN_PAR_SYMBOL);
				setState(6145);
				expr(0);
				setState(6146);
				match(COMMA_SYMBOL);
				setState(6147);
				expr(0);
				setState(6148);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(6150);
				((RuntimeFunctionCallContext)_localctx).name = match(REPLACE_SYMBOL);
				setState(6151);
				match(OPEN_PAR_SYMBOL);
				setState(6152);
				expr(0);
				setState(6153);
				match(COMMA_SYMBOL);
				setState(6154);
				expr(0);
				setState(6155);
				match(COMMA_SYMBOL);
				setState(6156);
				expr(0);
				setState(6157);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(6159);
				((RuntimeFunctionCallContext)_localctx).name = match(REVERSE_SYMBOL);
				setState(6160);
				exprWithParentheses();
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(6161);
				((RuntimeFunctionCallContext)_localctx).name = match(ROW_COUNT_SYMBOL);
				setState(6162);
				parentheses();
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(6163);
				((RuntimeFunctionCallContext)_localctx).name = match(TRUNCATE_SYMBOL);
				setState(6164);
				match(OPEN_PAR_SYMBOL);
				setState(6165);
				expr(0);
				setState(6166);
				match(COMMA_SYMBOL);
				setState(6167);
				expr(0);
				setState(6168);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(6170);
				((RuntimeFunctionCallContext)_localctx).name = match(WEEK_SYMBOL);
				setState(6171);
				match(OPEN_PAR_SYMBOL);
				setState(6172);
				expr(0);
				setState(6175);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(6173);
					match(COMMA_SYMBOL);
					setState(6174);
					expr(0);
					}
				}

				setState(6177);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(6179);
				((RuntimeFunctionCallContext)_localctx).name = match(WEIGHT_STRING_SYMBOL);
				setState(6180);
				match(OPEN_PAR_SYMBOL);
				setState(6181);
				expr(0);
				setState(6201);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,775,_ctx) ) {
				case 1:
					{
					setState(6185);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,773,_ctx) ) {
					case 1:
						{
						setState(6182);
						match(AS_SYMBOL);
						setState(6183);
						match(CHAR_SYMBOL);
						setState(6184);
						wsNumCodepoints();
						}
						break;
					}
					setState(6189);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,774,_ctx) ) {
					case 1:
						{
						setState(6187);
						if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
						setState(6188);
						weightStringLevels();
						}
						break;
					}
					}
					break;
				case 2:
					{
					setState(6191);
					match(AS_SYMBOL);
					setState(6192);
					match(BINARY_SYMBOL);
					setState(6193);
					wsNumCodepoints();
					}
					break;
				case 3:
					{
					setState(6194);
					match(COMMA_SYMBOL);
					setState(6195);
					ulong_number();
					setState(6196);
					match(COMMA_SYMBOL);
					setState(6197);
					ulong_number();
					setState(6198);
					match(COMMA_SYMBOL);
					setState(6199);
					ulong_number();
					}
					break;
				}
				setState(6203);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(6205);
				geometryFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GeometryFunctionContext extends ParserRuleContext {
		public Token name;
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode CONTAINS_SYMBOL() { return getToken(MySQLParser.CONTAINS_SYMBOL, 0); }
		public TerminalNode GEOMETRYCOLLECTION_SYMBOL() { return getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public ExprListWithParenthesesContext exprListWithParentheses() {
			return getRuleContext(ExprListWithParenthesesContext.class,0);
		}
		public TerminalNode LINESTRING_SYMBOL() { return getToken(MySQLParser.LINESTRING_SYMBOL, 0); }
		public TerminalNode MULTILINESTRING_SYMBOL() { return getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0); }
		public TerminalNode MULTIPOINT_SYMBOL() { return getToken(MySQLParser.MULTIPOINT_SYMBOL, 0); }
		public TerminalNode MULTIPOLYGON_SYMBOL() { return getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0); }
		public TerminalNode POINT_SYMBOL() { return getToken(MySQLParser.POINT_SYMBOL, 0); }
		public TerminalNode POLYGON_SYMBOL() { return getToken(MySQLParser.POLYGON_SYMBOL, 0); }
		public GeometryFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_geometryFunction; }
	}

	public final GeometryFunctionContext geometryFunction() throws RecognitionException {
		GeometryFunctionContext _localctx = new GeometryFunctionContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_geometryFunction);
		try {
			setState(6239);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,778,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6208);
				if (!(serverVersion < 50706)) throw new FailedPredicateException(this, "serverVersion < 50706");
				setState(6209);
				((GeometryFunctionContext)_localctx).name = match(CONTAINS_SYMBOL);
				setState(6210);
				match(OPEN_PAR_SYMBOL);
				setState(6211);
				expr(0);
				setState(6212);
				match(COMMA_SYMBOL);
				setState(6213);
				expr(0);
				setState(6214);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6216);
				((GeometryFunctionContext)_localctx).name = match(GEOMETRYCOLLECTION_SYMBOL);
				setState(6217);
				match(OPEN_PAR_SYMBOL);
				setState(6219);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,777,_ctx) ) {
				case 1:
					{
					setState(6218);
					exprList();
					}
					break;
				}
				setState(6221);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6222);
				((GeometryFunctionContext)_localctx).name = match(LINESTRING_SYMBOL);
				setState(6223);
				exprListWithParentheses();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6224);
				((GeometryFunctionContext)_localctx).name = match(MULTILINESTRING_SYMBOL);
				setState(6225);
				exprListWithParentheses();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6226);
				((GeometryFunctionContext)_localctx).name = match(MULTIPOINT_SYMBOL);
				setState(6227);
				exprListWithParentheses();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6228);
				((GeometryFunctionContext)_localctx).name = match(MULTIPOLYGON_SYMBOL);
				setState(6229);
				exprListWithParentheses();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6230);
				((GeometryFunctionContext)_localctx).name = match(POINT_SYMBOL);
				setState(6231);
				match(OPEN_PAR_SYMBOL);
				setState(6232);
				expr(0);
				setState(6233);
				match(COMMA_SYMBOL);
				setState(6234);
				expr(0);
				setState(6235);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6237);
				((GeometryFunctionContext)_localctx).name = match(POLYGON_SYMBOL);
				setState(6238);
				exprListWithParentheses();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TimeFunctionParametersContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public FractionalPrecisionContext fractionalPrecision() {
			return getRuleContext(FractionalPrecisionContext.class,0);
		}
		public TimeFunctionParametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timeFunctionParameters; }
	}

	public final TimeFunctionParametersContext timeFunctionParameters() throws RecognitionException {
		TimeFunctionParametersContext _localctx = new TimeFunctionParametersContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_timeFunctionParameters);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6241);
			match(OPEN_PAR_SYMBOL);
			setState(6243);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,779,_ctx) ) {
			case 1:
				{
				setState(6242);
				fractionalPrecision();
				}
				break;
			}
			setState(6245);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FractionalPrecisionContext extends ParserRuleContext {
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public FractionalPrecisionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fractionalPrecision; }
	}

	public final FractionalPrecisionContext fractionalPrecision() throws RecognitionException {
		FractionalPrecisionContext _localctx = new FractionalPrecisionContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_fractionalPrecision);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6247);
			if (!(serverVersion >= 50604)) throw new FailedPredicateException(this, "serverVersion >= 50604");
			setState(6248);
			match(INT_NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WeightStringLevelsContext extends ParserRuleContext {
		public TerminalNode LEVEL_SYMBOL() { return getToken(MySQLParser.LEVEL_SYMBOL, 0); }
		public List<Real_ulong_numberContext> real_ulong_number() {
			return getRuleContexts(Real_ulong_numberContext.class);
		}
		public Real_ulong_numberContext real_ulong_number(int i) {
			return getRuleContext(Real_ulong_numberContext.class,i);
		}
		public TerminalNode MINUS_OPERATOR() { return getToken(MySQLParser.MINUS_OPERATOR, 0); }
		public List<WeightStringLevelListItemContext> weightStringLevelListItem() {
			return getRuleContexts(WeightStringLevelListItemContext.class);
		}
		public WeightStringLevelListItemContext weightStringLevelListItem(int i) {
			return getRuleContext(WeightStringLevelListItemContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public WeightStringLevelsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_weightStringLevels; }
	}

	public final WeightStringLevelsContext weightStringLevels() throws RecognitionException {
		WeightStringLevelsContext _localctx = new WeightStringLevelsContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_weightStringLevels);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6250);
			match(LEVEL_SYMBOL);
			setState(6263);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,781,_ctx) ) {
			case 1:
				{
				setState(6251);
				real_ulong_number();
				setState(6252);
				match(MINUS_OPERATOR);
				setState(6253);
				real_ulong_number();
				}
				break;
			case 2:
				{
				setState(6255);
				weightStringLevelListItem();
				setState(6260);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(6256);
					match(COMMA_SYMBOL);
					setState(6257);
					weightStringLevelListItem();
					}
					}
					setState(6262);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WeightStringLevelListItemContext extends ParserRuleContext {
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public TerminalNode REVERSE_SYMBOL() { return getToken(MySQLParser.REVERSE_SYMBOL, 0); }
		public TerminalNode ASC_SYMBOL() { return getToken(MySQLParser.ASC_SYMBOL, 0); }
		public TerminalNode DESC_SYMBOL() { return getToken(MySQLParser.DESC_SYMBOL, 0); }
		public WeightStringLevelListItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_weightStringLevelListItem; }
	}

	public final WeightStringLevelListItemContext weightStringLevelListItem() throws RecognitionException {
		WeightStringLevelListItemContext _localctx = new WeightStringLevelListItemContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_weightStringLevelListItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6265);
			real_ulong_number();
			setState(6271);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASC_SYMBOL:
			case DESC_SYMBOL:
				{
				setState(6266);
				_la = _input.LA(1);
				if ( !(_la==ASC_SYMBOL || _la==DESC_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6268);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REVERSE_SYMBOL) {
					{
					setState(6267);
					match(REVERSE_SYMBOL);
					}
				}

				}
				break;
			case REVERSE_SYMBOL:
				{
				setState(6270);
				match(REVERSE_SYMBOL);
				}
				break;
			case COMMA_SYMBOL:
			case CLOSE_PAR_SYMBOL:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DateTimeTtypeContext extends ParserRuleContext {
		public TerminalNode DATE_SYMBOL() { return getToken(MySQLParser.DATE_SYMBOL, 0); }
		public TerminalNode TIME_SYMBOL() { return getToken(MySQLParser.TIME_SYMBOL, 0); }
		public TerminalNode DATETIME_SYMBOL() { return getToken(MySQLParser.DATETIME_SYMBOL, 0); }
		public TerminalNode TIMESTAMP_SYMBOL() { return getToken(MySQLParser.TIMESTAMP_SYMBOL, 0); }
		public DateTimeTtypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dateTimeTtype; }
	}

	public final DateTimeTtypeContext dateTimeTtype() throws RecognitionException {
		DateTimeTtypeContext _localctx = new DateTimeTtypeContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_dateTimeTtype);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6273);
			_la = _input.LA(1);
			if ( !(_la==DATETIME_SYMBOL || _la==DATE_SYMBOL || _la==TIMESTAMP_SYMBOL || _la==TIME_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TrimFunctionContext extends ParserRuleContext {
		public TerminalNode TRIM_SYMBOL() { return getToken(MySQLParser.TRIM_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode LEADING_SYMBOL() { return getToken(MySQLParser.LEADING_SYMBOL, 0); }
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode TRAILING_SYMBOL() { return getToken(MySQLParser.TRAILING_SYMBOL, 0); }
		public TerminalNode BOTH_SYMBOL() { return getToken(MySQLParser.BOTH_SYMBOL, 0); }
		public TrimFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trimFunction; }
	}

	public final TrimFunctionContext trimFunction() throws RecognitionException {
		TrimFunctionContext _localctx = new TrimFunctionContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_trimFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6275);
			match(TRIM_SYMBOL);
			setState(6276);
			match(OPEN_PAR_SYMBOL);
			setState(6300);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,788,_ctx) ) {
			case 1:
				{
				setState(6277);
				expr(0);
				setState(6280);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM_SYMBOL) {
					{
					setState(6278);
					match(FROM_SYMBOL);
					setState(6279);
					expr(0);
					}
				}

				}
				break;
			case 2:
				{
				setState(6282);
				match(LEADING_SYMBOL);
				setState(6284);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,785,_ctx) ) {
				case 1:
					{
					setState(6283);
					expr(0);
					}
					break;
				}
				setState(6286);
				match(FROM_SYMBOL);
				setState(6287);
				expr(0);
				}
				break;
			case 3:
				{
				setState(6288);
				match(TRAILING_SYMBOL);
				setState(6290);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,786,_ctx) ) {
				case 1:
					{
					setState(6289);
					expr(0);
					}
					break;
				}
				setState(6292);
				match(FROM_SYMBOL);
				setState(6293);
				expr(0);
				}
				break;
			case 4:
				{
				setState(6294);
				match(BOTH_SYMBOL);
				setState(6296);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,787,_ctx) ) {
				case 1:
					{
					setState(6295);
					expr(0);
					}
					break;
				}
				setState(6298);
				match(FROM_SYMBOL);
				setState(6299);
				expr(0);
				}
				break;
			}
			setState(6302);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubstringFunctionContext extends ParserRuleContext {
		public TerminalNode SUBSTRING_SYMBOL() { return getToken(MySQLParser.SUBSTRING_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public SubstringFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_substringFunction; }
	}

	public final SubstringFunctionContext substringFunction() throws RecognitionException {
		SubstringFunctionContext _localctx = new SubstringFunctionContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_substringFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6304);
			match(SUBSTRING_SYMBOL);
			setState(6305);
			match(OPEN_PAR_SYMBOL);
			setState(6306);
			expr(0);
			setState(6319);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMMA_SYMBOL:
				{
				setState(6307);
				match(COMMA_SYMBOL);
				setState(6308);
				expr(0);
				setState(6311);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(6309);
					match(COMMA_SYMBOL);
					setState(6310);
					expr(0);
					}
				}

				}
				break;
			case FROM_SYMBOL:
				{
				setState(6313);
				match(FROM_SYMBOL);
				setState(6314);
				expr(0);
				setState(6317);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					setState(6315);
					match(FOR_SYMBOL);
					setState(6316);
					expr(0);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6321);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionCallContext extends ParserRuleContext {
		public PureIdentifierContext pureIdentifier() {
			return getRuleContext(PureIdentifierContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public UdfExprListContext udfExprList() {
			return getRuleContext(UdfExprListContext.class,0);
		}
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionCall; }
	}

	public final FunctionCallContext functionCall() throws RecognitionException {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_functionCall);
		try {
			setState(6337);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,794,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6323);
				pureIdentifier();
				setState(6324);
				match(OPEN_PAR_SYMBOL);
				setState(6326);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,792,_ctx) ) {
				case 1:
					{
					setState(6325);
					udfExprList();
					}
					break;
				}
				setState(6328);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6330);
				qualifiedIdentifier();
				setState(6331);
				match(OPEN_PAR_SYMBOL);
				setState(6333);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,793,_ctx) ) {
				case 1:
					{
					setState(6332);
					exprList();
					}
					break;
				}
				setState(6335);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UdfExprListContext extends ParserRuleContext {
		public List<UdfExprContext> udfExpr() {
			return getRuleContexts(UdfExprContext.class);
		}
		public UdfExprContext udfExpr(int i) {
			return getRuleContext(UdfExprContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public UdfExprListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_udfExprList; }
	}

	public final UdfExprListContext udfExprList() throws RecognitionException {
		UdfExprListContext _localctx = new UdfExprListContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_udfExprList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6339);
			udfExpr();
			setState(6344);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(6340);
				match(COMMA_SYMBOL);
				setState(6341);
				udfExpr();
				}
				}
				setState(6346);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UdfExprContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public SelectAliasContext selectAlias() {
			return getRuleContext(SelectAliasContext.class,0);
		}
		public UdfExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_udfExpr; }
	}

	public final UdfExprContext udfExpr() throws RecognitionException {
		UdfExprContext _localctx = new UdfExprContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_udfExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6347);
			expr(0);
			setState(6349);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,796,_ctx) ) {
			case 1:
				{
				setState(6348);
				selectAlias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableContext extends ParserRuleContext {
		public UserVariableContext userVariable() {
			return getRuleContext(UserVariableContext.class,0);
		}
		public TerminalNode ASSIGN_OPERATOR() { return getToken(MySQLParser.ASSIGN_OPERATOR, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public SystemVariableContext systemVariable() {
			return getRuleContext(SystemVariableContext.class,0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable; }
	}

	public final VariableContext variable() throws RecognitionException {
		VariableContext _localctx = new VariableContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_variable);
		try {
			setState(6357);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AT_SIGN_SYMBOL:
			case AT_TEXT_SUFFIX:
				enterOuterAlt(_localctx, 1);
				{
				setState(6351);
				userVariable();
				setState(6354);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,797,_ctx) ) {
				case 1:
					{
					setState(6352);
					match(ASSIGN_OPERATOR);
					setState(6353);
					expr(0);
					}
					break;
				}
				}
				break;
			case AT_AT_SIGN_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6356);
				systemVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserVariableContext extends ParserRuleContext {
		public TerminalNode AT_SIGN_SYMBOL() { return getToken(MySQLParser.AT_SIGN_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public TerminalNode AT_TEXT_SUFFIX() { return getToken(MySQLParser.AT_TEXT_SUFFIX, 0); }
		public UserVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userVariable; }
	}

	public final UserVariableContext userVariable() throws RecognitionException {
		UserVariableContext _localctx = new UserVariableContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_userVariable);
		try {
			setState(6362);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AT_SIGN_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6359);
				match(AT_SIGN_SYMBOL);
				setState(6360);
				textOrIdentifier();
				}
				break;
			case AT_TEXT_SUFFIX:
				enterOuterAlt(_localctx, 2);
				{
				setState(6361);
				match(AT_TEXT_SUFFIX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SystemVariableContext extends ParserRuleContext {
		public TerminalNode AT_AT_SIGN_SYMBOL() { return getToken(MySQLParser.AT_AT_SIGN_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public VarIdentTypeContext varIdentType() {
			return getRuleContext(VarIdentTypeContext.class,0);
		}
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public SystemVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_systemVariable; }
	}

	public final SystemVariableContext systemVariable() throws RecognitionException {
		SystemVariableContext _localctx = new SystemVariableContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_systemVariable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6364);
			match(AT_AT_SIGN_SYMBOL);
			setState(6366);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,800,_ctx) ) {
			case 1:
				{
				setState(6365);
				varIdentType();
				}
				break;
			}
			setState(6368);
			textOrIdentifier();
			setState(6370);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,801,_ctx) ) {
			case 1:
				{
				setState(6369);
				dotIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InternalVariableNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public LValueIdentifierContext lValueIdentifier() {
			return getRuleContext(LValueIdentifierContext.class,0);
		}
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public InternalVariableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_internalVariableName; }
	}

	public final InternalVariableNameContext internalVariableName() throws RecognitionException {
		InternalVariableNameContext _localctx = new InternalVariableNameContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_internalVariableName);
		int _la;
		try {
			setState(6386);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,805,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6382);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,804,_ctx) ) {
				case 1:
					{
					setState(6372);
					if (!(serverVersion < 80017)) throw new FailedPredicateException(this, "serverVersion < 80017");
					setState(6373);
					identifier();
					setState(6375);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT_SYMBOL) {
						{
						setState(6374);
						dotIdentifier();
						}
					}

					}
					break;
				case 2:
					{
					setState(6377);
					if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
					setState(6378);
					lValueIdentifier();
					setState(6380);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT_SYMBOL) {
						{
						setState(6379);
						dotIdentifier();
						}
					}

					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6384);
				match(DEFAULT_SYMBOL);
				setState(6385);
				dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhenExpressionContext extends ParserRuleContext {
		public TerminalNode WHEN_SYMBOL() { return getToken(MySQLParser.WHEN_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public WhenExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whenExpression; }
	}

	public final WhenExpressionContext whenExpression() throws RecognitionException {
		WhenExpressionContext _localctx = new WhenExpressionContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_whenExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6388);
			match(WHEN_SYMBOL);
			setState(6389);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ThenExpressionContext extends ParserRuleContext {
		public TerminalNode THEN_SYMBOL() { return getToken(MySQLParser.THEN_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ThenExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_thenExpression; }
	}

	public final ThenExpressionContext thenExpression() throws RecognitionException {
		ThenExpressionContext _localctx = new ThenExpressionContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_thenExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6391);
			match(THEN_SYMBOL);
			setState(6392);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ElseExpressionContext extends ParserRuleContext {
		public TerminalNode ELSE_SYMBOL() { return getToken(MySQLParser.ELSE_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ElseExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elseExpression; }
	}

	public final ElseExpressionContext elseExpression() throws RecognitionException {
		ElseExpressionContext _localctx = new ElseExpressionContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_elseExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6394);
			match(ELSE_SYMBOL);
			setState(6395);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CastTypeContext extends ParserRuleContext {
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public FieldLengthContext fieldLength() {
			return getRuleContext(FieldLengthContext.class,0);
		}
		public TerminalNode CHAR_SYMBOL() { return getToken(MySQLParser.CHAR_SYMBOL, 0); }
		public CharsetWithOptBinaryContext charsetWithOptBinary() {
			return getRuleContext(CharsetWithOptBinaryContext.class,0);
		}
		public NcharContext nchar() {
			return getRuleContext(NcharContext.class,0);
		}
		public TerminalNode SIGNED_SYMBOL() { return getToken(MySQLParser.SIGNED_SYMBOL, 0); }
		public TerminalNode INT_SYMBOL() { return getToken(MySQLParser.INT_SYMBOL, 0); }
		public TerminalNode UNSIGNED_SYMBOL() { return getToken(MySQLParser.UNSIGNED_SYMBOL, 0); }
		public TerminalNode DATE_SYMBOL() { return getToken(MySQLParser.DATE_SYMBOL, 0); }
		public TerminalNode TIME_SYMBOL() { return getToken(MySQLParser.TIME_SYMBOL, 0); }
		public TypeDatetimePrecisionContext typeDatetimePrecision() {
			return getRuleContext(TypeDatetimePrecisionContext.class,0);
		}
		public TerminalNode DATETIME_SYMBOL() { return getToken(MySQLParser.DATETIME_SYMBOL, 0); }
		public TerminalNode DECIMAL_SYMBOL() { return getToken(MySQLParser.DECIMAL_SYMBOL, 0); }
		public FloatOptionsContext floatOptions() {
			return getRuleContext(FloatOptionsContext.class,0);
		}
		public TerminalNode JSON_SYMBOL() { return getToken(MySQLParser.JSON_SYMBOL, 0); }
		public RealTypeContext realType() {
			return getRuleContext(RealTypeContext.class,0);
		}
		public TerminalNode FLOAT_SYMBOL() { return getToken(MySQLParser.FLOAT_SYMBOL, 0); }
		public StandardFloatOptionsContext standardFloatOptions() {
			return getRuleContext(StandardFloatOptionsContext.class,0);
		}
		public CastTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_castType; }
	}

	public final CastTypeContext castType() throws RecognitionException {
		CastTypeContext _localctx = new CastTypeContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_castType);
		try {
			setState(6442);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,816,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6397);
				match(BINARY_SYMBOL);
				setState(6399);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,806,_ctx) ) {
				case 1:
					{
					setState(6398);
					fieldLength();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6401);
				match(CHAR_SYMBOL);
				setState(6403);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,807,_ctx) ) {
				case 1:
					{
					setState(6402);
					fieldLength();
					}
					break;
				}
				setState(6406);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,808,_ctx) ) {
				case 1:
					{
					setState(6405);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6408);
				nchar();
				setState(6410);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,809,_ctx) ) {
				case 1:
					{
					setState(6409);
					fieldLength();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6412);
				match(SIGNED_SYMBOL);
				setState(6414);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,810,_ctx) ) {
				case 1:
					{
					setState(6413);
					match(INT_SYMBOL);
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6416);
				match(UNSIGNED_SYMBOL);
				setState(6418);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,811,_ctx) ) {
				case 1:
					{
					setState(6417);
					match(INT_SYMBOL);
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6420);
				match(DATE_SYMBOL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6421);
				match(TIME_SYMBOL);
				setState(6423);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,812,_ctx) ) {
				case 1:
					{
					setState(6422);
					typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6425);
				match(DATETIME_SYMBOL);
				setState(6427);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,813,_ctx) ) {
				case 1:
					{
					setState(6426);
					typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6429);
				match(DECIMAL_SYMBOL);
				setState(6431);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,814,_ctx) ) {
				case 1:
					{
					setState(6430);
					floatOptions();
					}
					break;
				}
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6433);
				if (!(serverVersion >= 50708)) throw new FailedPredicateException(this, "serverVersion >= 50708");
				setState(6434);
				match(JSON_SYMBOL);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6435);
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				setState(6436);
				realType();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6437);
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				setState(6438);
				match(FLOAT_SYMBOL);
				setState(6440);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,815,_ctx) ) {
				case 1:
					{
					setState(6439);
					standardFloatOptions();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExprListContext extends ParserRuleContext {
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ExprListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exprList; }
	}

	public final ExprListContext exprList() throws RecognitionException {
		ExprListContext _localctx = new ExprListContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_exprList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6444);
			expr(0);
			setState(6449);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(6445);
				match(COMMA_SYMBOL);
				setState(6446);
				expr(0);
				}
				}
				setState(6451);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetContext extends ParserRuleContext {
		public TerminalNode CHAR_SYMBOL() { return getToken(MySQLParser.CHAR_SYMBOL, 0); }
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public TerminalNode CHARSET_SYMBOL() { return getToken(MySQLParser.CHARSET_SYMBOL, 0); }
		public CharsetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charset; }
	}

	public final CharsetContext charset() throws RecognitionException {
		CharsetContext _localctx = new CharsetContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_charset);
		try {
			setState(6455);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHAR_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6452);
				match(CHAR_SYMBOL);
				setState(6453);
				match(SET_SYMBOL);
				}
				break;
			case CHARSET_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6454);
				match(CHARSET_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NotRuleContext extends ParserRuleContext {
		public TerminalNode NOT_SYMBOL() { return getToken(MySQLParser.NOT_SYMBOL, 0); }
		public TerminalNode NOT2_SYMBOL() { return getToken(MySQLParser.NOT2_SYMBOL, 0); }
		public NotRuleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notRule; }
	}

	public final NotRuleContext notRule() throws RecognitionException {
		NotRuleContext _localctx = new NotRuleContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_notRule);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6457);
			_la = _input.LA(1);
			if ( !(_la==NOT2_SYMBOL || _la==NOT_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Not2RuleContext extends ParserRuleContext {
		public TerminalNode LOGICAL_NOT_OPERATOR() { return getToken(MySQLParser.LOGICAL_NOT_OPERATOR, 0); }
		public TerminalNode NOT2_SYMBOL() { return getToken(MySQLParser.NOT2_SYMBOL, 0); }
		public Not2RuleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_not2Rule; }
	}

	public final Not2RuleContext not2Rule() throws RecognitionException {
		Not2RuleContext _localctx = new Not2RuleContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_not2Rule);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6459);
			_la = _input.LA(1);
			if ( !(_la==NOT2_SYMBOL || _la==LOGICAL_NOT_OPERATOR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalContext extends ParserRuleContext {
		public IntervalTimeStampContext intervalTimeStamp() {
			return getRuleContext(IntervalTimeStampContext.class,0);
		}
		public TerminalNode SECOND_MICROSECOND_SYMBOL() { return getToken(MySQLParser.SECOND_MICROSECOND_SYMBOL, 0); }
		public TerminalNode MINUTE_MICROSECOND_SYMBOL() { return getToken(MySQLParser.MINUTE_MICROSECOND_SYMBOL, 0); }
		public TerminalNode MINUTE_SECOND_SYMBOL() { return getToken(MySQLParser.MINUTE_SECOND_SYMBOL, 0); }
		public TerminalNode HOUR_MICROSECOND_SYMBOL() { return getToken(MySQLParser.HOUR_MICROSECOND_SYMBOL, 0); }
		public TerminalNode HOUR_SECOND_SYMBOL() { return getToken(MySQLParser.HOUR_SECOND_SYMBOL, 0); }
		public TerminalNode HOUR_MINUTE_SYMBOL() { return getToken(MySQLParser.HOUR_MINUTE_SYMBOL, 0); }
		public TerminalNode DAY_MICROSECOND_SYMBOL() { return getToken(MySQLParser.DAY_MICROSECOND_SYMBOL, 0); }
		public TerminalNode DAY_SECOND_SYMBOL() { return getToken(MySQLParser.DAY_SECOND_SYMBOL, 0); }
		public TerminalNode DAY_MINUTE_SYMBOL() { return getToken(MySQLParser.DAY_MINUTE_SYMBOL, 0); }
		public TerminalNode DAY_HOUR_SYMBOL() { return getToken(MySQLParser.DAY_HOUR_SYMBOL, 0); }
		public TerminalNode YEAR_MONTH_SYMBOL() { return getToken(MySQLParser.YEAR_MONTH_SYMBOL, 0); }
		public IntervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval; }
	}

	public final IntervalContext interval() throws RecognitionException {
		IntervalContext _localctx = new IntervalContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_interval);
		int _la;
		try {
			setState(6463);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DAY_SYMBOL:
			case HOUR_SYMBOL:
			case MICROSECOND_SYMBOL:
			case MINUTE_SYMBOL:
			case MONTH_SYMBOL:
			case QUARTER_SYMBOL:
			case SECOND_SYMBOL:
			case WEEK_SYMBOL:
			case YEAR_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6461);
				intervalTimeStamp();
				}
				break;
			case DAY_HOUR_SYMBOL:
			case DAY_MICROSECOND_SYMBOL:
			case DAY_MINUTE_SYMBOL:
			case DAY_SECOND_SYMBOL:
			case HOUR_MICROSECOND_SYMBOL:
			case HOUR_MINUTE_SYMBOL:
			case HOUR_SECOND_SYMBOL:
			case MINUTE_MICROSECOND_SYMBOL:
			case MINUTE_SECOND_SYMBOL:
			case SECOND_MICROSECOND_SYMBOL:
			case YEAR_MONTH_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6462);
				_la = _input.LA(1);
				if ( !(((((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & ((1L << (DAY_HOUR_SYMBOL - 471)) | (1L << (DAY_MICROSECOND_SYMBOL - 471)) | (1L << (DAY_MINUTE_SYMBOL - 471)) | (1L << (DAY_SECOND_SYMBOL - 471)) | (1L << (HOUR_MICROSECOND_SYMBOL - 471)) | (1L << (HOUR_MINUTE_SYMBOL - 471)) | (1L << (HOUR_SECOND_SYMBOL - 471)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (MINUTE_MICROSECOND_SYMBOL - 564)) | (1L << (MINUTE_SECOND_SYMBOL - 564)) | (1L << (SECOND_MICROSECOND_SYMBOL - 564)))) != 0) || _la==YEAR_MONTH_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalTimeStampContext extends ParserRuleContext {
		public TerminalNode MICROSECOND_SYMBOL() { return getToken(MySQLParser.MICROSECOND_SYMBOL, 0); }
		public TerminalNode SECOND_SYMBOL() { return getToken(MySQLParser.SECOND_SYMBOL, 0); }
		public TerminalNode MINUTE_SYMBOL() { return getToken(MySQLParser.MINUTE_SYMBOL, 0); }
		public TerminalNode HOUR_SYMBOL() { return getToken(MySQLParser.HOUR_SYMBOL, 0); }
		public TerminalNode DAY_SYMBOL() { return getToken(MySQLParser.DAY_SYMBOL, 0); }
		public TerminalNode WEEK_SYMBOL() { return getToken(MySQLParser.WEEK_SYMBOL, 0); }
		public TerminalNode MONTH_SYMBOL() { return getToken(MySQLParser.MONTH_SYMBOL, 0); }
		public TerminalNode QUARTER_SYMBOL() { return getToken(MySQLParser.QUARTER_SYMBOL, 0); }
		public TerminalNode YEAR_SYMBOL() { return getToken(MySQLParser.YEAR_SYMBOL, 0); }
		public IntervalTimeStampContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalTimeStamp; }
	}

	public final IntervalTimeStampContext intervalTimeStamp() throws RecognitionException {
		IntervalTimeStampContext _localctx = new IntervalTimeStampContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_intervalTimeStamp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6465);
			_la = _input.LA(1);
			if ( !(_la==DAY_SYMBOL || _la==HOUR_SYMBOL || ((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (MICROSECOND_SYMBOL - 217)) | (1L << (MINUTE_SYMBOL - 217)) | (1L << (MONTH_SYMBOL - 217)) | (1L << (QUARTER_SYMBOL - 217)))) != 0) || _la==SECOND_SYMBOL || _la==WEEK_SYMBOL || _la==YEAR_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExprListWithParenthesesContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ExprListWithParenthesesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exprListWithParentheses; }
	}

	public final ExprListWithParenthesesContext exprListWithParentheses() throws RecognitionException {
		ExprListWithParenthesesContext _localctx = new ExprListWithParenthesesContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_exprListWithParentheses);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6467);
			match(OPEN_PAR_SYMBOL);
			setState(6468);
			exprList();
			setState(6469);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExprWithParenthesesContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ExprWithParenthesesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exprWithParentheses; }
	}

	public final ExprWithParenthesesContext exprWithParentheses() throws RecognitionException {
		ExprWithParenthesesContext _localctx = new ExprWithParenthesesContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_exprWithParentheses);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6471);
			match(OPEN_PAR_SYMBOL);
			setState(6472);
			expr(0);
			setState(6473);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleExprWithParenthesesContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public SimpleExprContext simpleExpr() {
			return getRuleContext(SimpleExprContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprWithParenthesesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleExprWithParentheses; }
	}

	public final SimpleExprWithParenthesesContext simpleExprWithParentheses() throws RecognitionException {
		SimpleExprWithParenthesesContext _localctx = new SimpleExprWithParenthesesContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_simpleExprWithParentheses);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6475);
			match(OPEN_PAR_SYMBOL);
			setState(6476);
			simpleExpr(0);
			setState(6477);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderListContext extends ParserRuleContext {
		public List<OrderExpressionContext> orderExpression() {
			return getRuleContexts(OrderExpressionContext.class);
		}
		public OrderExpressionContext orderExpression(int i) {
			return getRuleContext(OrderExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public OrderListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderList; }
	}

	public final OrderListContext orderList() throws RecognitionException {
		OrderListContext _localctx = new OrderListContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_orderList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6479);
			orderExpression();
			setState(6484);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,820,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6480);
					match(COMMA_SYMBOL);
					setState(6481);
					orderExpression();
					}
					} 
				}
				setState(6486);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,820,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderExpressionContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public DirectionContext direction() {
			return getRuleContext(DirectionContext.class,0);
		}
		public OrderExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderExpression; }
	}

	public final OrderExpressionContext orderExpression() throws RecognitionException {
		OrderExpressionContext _localctx = new OrderExpressionContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_orderExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6487);
			expr(0);
			setState(6489);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,821,_ctx) ) {
			case 1:
				{
				setState(6488);
				direction();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupListContext extends ParserRuleContext {
		public List<GroupingExpressionContext> groupingExpression() {
			return getRuleContexts(GroupingExpressionContext.class);
		}
		public GroupingExpressionContext groupingExpression(int i) {
			return getRuleContext(GroupingExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public GroupListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupList; }
	}

	public final GroupListContext groupList() throws RecognitionException {
		GroupListContext _localctx = new GroupListContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_groupList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6491);
			groupingExpression();
			setState(6496);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(6492);
				match(COMMA_SYMBOL);
				setState(6493);
				groupingExpression();
				}
				}
				setState(6498);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupingExpressionContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public GroupingExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingExpression; }
	}

	public final GroupingExpressionContext groupingExpression() throws RecognitionException {
		GroupingExpressionContext _localctx = new GroupingExpressionContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_groupingExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6499);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChannelContext extends ParserRuleContext {
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode CHANNEL_SYMBOL() { return getToken(MySQLParser.CHANNEL_SYMBOL, 0); }
		public TextStringNoLinebreakContext textStringNoLinebreak() {
			return getRuleContext(TextStringNoLinebreakContext.class,0);
		}
		public ChannelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_channel; }
	}

	public final ChannelContext channel() throws RecognitionException {
		ChannelContext _localctx = new ChannelContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_channel);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6501);
			if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
			setState(6502);
			match(FOR_SYMBOL);
			setState(6503);
			match(CHANNEL_SYMBOL);
			setState(6504);
			textStringNoLinebreak();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CompoundStatementContext extends ParserRuleContext {
		public SimpleStatementContext simpleStatement() {
			return getRuleContext(SimpleStatementContext.class,0);
		}
		public ReturnStatementContext returnStatement() {
			return getRuleContext(ReturnStatementContext.class,0);
		}
		public IfStatementContext ifStatement() {
			return getRuleContext(IfStatementContext.class,0);
		}
		public CaseStatementContext caseStatement() {
			return getRuleContext(CaseStatementContext.class,0);
		}
		public LabeledBlockContext labeledBlock() {
			return getRuleContext(LabeledBlockContext.class,0);
		}
		public UnlabeledBlockContext unlabeledBlock() {
			return getRuleContext(UnlabeledBlockContext.class,0);
		}
		public LabeledControlContext labeledControl() {
			return getRuleContext(LabeledControlContext.class,0);
		}
		public UnlabeledControlContext unlabeledControl() {
			return getRuleContext(UnlabeledControlContext.class,0);
		}
		public LeaveStatementContext leaveStatement() {
			return getRuleContext(LeaveStatementContext.class,0);
		}
		public IterateStatementContext iterateStatement() {
			return getRuleContext(IterateStatementContext.class,0);
		}
		public CursorOpenContext cursorOpen() {
			return getRuleContext(CursorOpenContext.class,0);
		}
		public CursorFetchContext cursorFetch() {
			return getRuleContext(CursorFetchContext.class,0);
		}
		public CursorCloseContext cursorClose() {
			return getRuleContext(CursorCloseContext.class,0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compoundStatement; }
	}

	public final CompoundStatementContext compoundStatement() throws RecognitionException {
		CompoundStatementContext _localctx = new CompoundStatementContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_compoundStatement);
		try {
			setState(6519);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,823,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6506);
				simpleStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6507);
				returnStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6508);
				ifStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6509);
				caseStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6510);
				labeledBlock();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6511);
				unlabeledBlock();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6512);
				labeledControl();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6513);
				unlabeledControl();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6514);
				leaveStatement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6515);
				iterateStatement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6516);
				cursorOpen();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6517);
				cursorFetch();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6518);
				cursorClose();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReturnStatementContext extends ParserRuleContext {
		public TerminalNode RETURN_SYMBOL() { return getToken(MySQLParser.RETURN_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returnStatement; }
	}

	public final ReturnStatementContext returnStatement() throws RecognitionException {
		ReturnStatementContext _localctx = new ReturnStatementContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_returnStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6521);
			match(RETURN_SYMBOL);
			setState(6522);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfStatementContext extends ParserRuleContext {
		public List<TerminalNode> IF_SYMBOL() { return getTokens(MySQLParser.IF_SYMBOL); }
		public TerminalNode IF_SYMBOL(int i) {
			return getToken(MySQLParser.IF_SYMBOL, i);
		}
		public IfBodyContext ifBody() {
			return getRuleContext(IfBodyContext.class,0);
		}
		public TerminalNode END_SYMBOL() { return getToken(MySQLParser.END_SYMBOL, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifStatement; }
	}

	public final IfStatementContext ifStatement() throws RecognitionException {
		IfStatementContext _localctx = new IfStatementContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_ifStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6524);
			match(IF_SYMBOL);
			setState(6525);
			ifBody();
			setState(6526);
			match(END_SYMBOL);
			setState(6527);
			match(IF_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfBodyContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ThenStatementContext thenStatement() {
			return getRuleContext(ThenStatementContext.class,0);
		}
		public TerminalNode ELSEIF_SYMBOL() { return getToken(MySQLParser.ELSEIF_SYMBOL, 0); }
		public IfBodyContext ifBody() {
			return getRuleContext(IfBodyContext.class,0);
		}
		public TerminalNode ELSE_SYMBOL() { return getToken(MySQLParser.ELSE_SYMBOL, 0); }
		public CompoundStatementListContext compoundStatementList() {
			return getRuleContext(CompoundStatementListContext.class,0);
		}
		public IfBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifBody; }
	}

	public final IfBodyContext ifBody() throws RecognitionException {
		IfBodyContext _localctx = new IfBodyContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_ifBody);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6529);
			expr(0);
			setState(6530);
			thenStatement();
			setState(6535);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ELSEIF_SYMBOL:
				{
				setState(6531);
				match(ELSEIF_SYMBOL);
				setState(6532);
				ifBody();
				}
				break;
			case ELSE_SYMBOL:
				{
				setState(6533);
				match(ELSE_SYMBOL);
				setState(6534);
				compoundStatementList();
				}
				break;
			case END_SYMBOL:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ThenStatementContext extends ParserRuleContext {
		public TerminalNode THEN_SYMBOL() { return getToken(MySQLParser.THEN_SYMBOL, 0); }
		public CompoundStatementListContext compoundStatementList() {
			return getRuleContext(CompoundStatementListContext.class,0);
		}
		public ThenStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_thenStatement; }
	}

	public final ThenStatementContext thenStatement() throws RecognitionException {
		ThenStatementContext _localctx = new ThenStatementContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_thenStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6537);
			match(THEN_SYMBOL);
			setState(6538);
			compoundStatementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CompoundStatementListContext extends ParserRuleContext {
		public List<CompoundStatementContext> compoundStatement() {
			return getRuleContexts(CompoundStatementContext.class);
		}
		public CompoundStatementContext compoundStatement(int i) {
			return getRuleContext(CompoundStatementContext.class,i);
		}
		public List<TerminalNode> SEMICOLON_SYMBOL() { return getTokens(MySQLParser.SEMICOLON_SYMBOL); }
		public TerminalNode SEMICOLON_SYMBOL(int i) {
			return getToken(MySQLParser.SEMICOLON_SYMBOL, i);
		}
		public CompoundStatementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compoundStatementList; }
	}

	public final CompoundStatementListContext compoundStatementList() throws RecognitionException {
		CompoundStatementListContext _localctx = new CompoundStatementListContext(_ctx, getState());
		enterRule(_localctx, 784, RULE_compoundStatementList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6543); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(6540);
					compoundStatement();
					setState(6541);
					match(SEMICOLON_SYMBOL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6545); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,825,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseStatementContext extends ParserRuleContext {
		public List<TerminalNode> CASE_SYMBOL() { return getTokens(MySQLParser.CASE_SYMBOL); }
		public TerminalNode CASE_SYMBOL(int i) {
			return getToken(MySQLParser.CASE_SYMBOL, i);
		}
		public TerminalNode END_SYMBOL() { return getToken(MySQLParser.END_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public List<WhenExpressionContext> whenExpression() {
			return getRuleContexts(WhenExpressionContext.class);
		}
		public WhenExpressionContext whenExpression(int i) {
			return getRuleContext(WhenExpressionContext.class,i);
		}
		public List<ThenStatementContext> thenStatement() {
			return getRuleContexts(ThenStatementContext.class);
		}
		public ThenStatementContext thenStatement(int i) {
			return getRuleContext(ThenStatementContext.class,i);
		}
		public ElseStatementContext elseStatement() {
			return getRuleContext(ElseStatementContext.class,0);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseStatement; }
	}

	public final CaseStatementContext caseStatement() throws RecognitionException {
		CaseStatementContext _localctx = new CaseStatementContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_caseStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6547);
			match(CASE_SYMBOL);
			setState(6549);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,826,_ctx) ) {
			case 1:
				{
				setState(6548);
				expr(0);
				}
				break;
			}
			setState(6554); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(6551);
				whenExpression();
				setState(6552);
				thenStatement();
				}
				}
				setState(6556); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN_SYMBOL );
			setState(6559);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE_SYMBOL) {
				{
				setState(6558);
				elseStatement();
				}
			}

			setState(6561);
			match(END_SYMBOL);
			setState(6562);
			match(CASE_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ElseStatementContext extends ParserRuleContext {
		public TerminalNode ELSE_SYMBOL() { return getToken(MySQLParser.ELSE_SYMBOL, 0); }
		public CompoundStatementListContext compoundStatementList() {
			return getRuleContext(CompoundStatementListContext.class,0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elseStatement; }
	}

	public final ElseStatementContext elseStatement() throws RecognitionException {
		ElseStatementContext _localctx = new ElseStatementContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_elseStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6564);
			match(ELSE_SYMBOL);
			setState(6565);
			compoundStatementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LabeledBlockContext extends ParserRuleContext {
		public LabelContext label() {
			return getRuleContext(LabelContext.class,0);
		}
		public BeginEndBlockContext beginEndBlock() {
			return getRuleContext(BeginEndBlockContext.class,0);
		}
		public LabelRefContext labelRef() {
			return getRuleContext(LabelRefContext.class,0);
		}
		public LabeledBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labeledBlock; }
	}

	public final LabeledBlockContext labeledBlock() throws RecognitionException {
		LabeledBlockContext _localctx = new LabeledBlockContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_labeledBlock);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6567);
			label();
			setState(6568);
			beginEndBlock();
			setState(6570);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,829,_ctx) ) {
			case 1:
				{
				setState(6569);
				labelRef();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnlabeledBlockContext extends ParserRuleContext {
		public BeginEndBlockContext beginEndBlock() {
			return getRuleContext(BeginEndBlockContext.class,0);
		}
		public UnlabeledBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unlabeledBlock; }
	}

	public final UnlabeledBlockContext unlabeledBlock() throws RecognitionException {
		UnlabeledBlockContext _localctx = new UnlabeledBlockContext(_ctx, getState());
		enterRule(_localctx, 792, RULE_unlabeledBlock);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6572);
			beginEndBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LabelContext extends ParserRuleContext {
		public LabelIdentifierContext labelIdentifier() {
			return getRuleContext(LabelIdentifierContext.class,0);
		}
		public TerminalNode COLON_SYMBOL() { return getToken(MySQLParser.COLON_SYMBOL, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_label; }
	}

	public final LabelContext label() throws RecognitionException {
		LabelContext _localctx = new LabelContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_label);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6574);
			labelIdentifier();
			setState(6575);
			match(COLON_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BeginEndBlockContext extends ParserRuleContext {
		public TerminalNode BEGIN_SYMBOL() { return getToken(MySQLParser.BEGIN_SYMBOL, 0); }
		public TerminalNode END_SYMBOL() { return getToken(MySQLParser.END_SYMBOL, 0); }
		public SpDeclarationsContext spDeclarations() {
			return getRuleContext(SpDeclarationsContext.class,0);
		}
		public CompoundStatementListContext compoundStatementList() {
			return getRuleContext(CompoundStatementListContext.class,0);
		}
		public BeginEndBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_beginEndBlock; }
	}

	public final BeginEndBlockContext beginEndBlock() throws RecognitionException {
		BeginEndBlockContext _localctx = new BeginEndBlockContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_beginEndBlock);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6577);
			match(BEGIN_SYMBOL);
			setState(6579);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,830,_ctx) ) {
			case 1:
				{
				setState(6578);
				spDeclarations();
				}
				break;
			}
			setState(6582);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,831,_ctx) ) {
			case 1:
				{
				setState(6581);
				compoundStatementList();
				}
				break;
			}
			setState(6584);
			match(END_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LabeledControlContext extends ParserRuleContext {
		public LabelContext label() {
			return getRuleContext(LabelContext.class,0);
		}
		public UnlabeledControlContext unlabeledControl() {
			return getRuleContext(UnlabeledControlContext.class,0);
		}
		public LabelRefContext labelRef() {
			return getRuleContext(LabelRefContext.class,0);
		}
		public LabeledControlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labeledControl; }
	}

	public final LabeledControlContext labeledControl() throws RecognitionException {
		LabeledControlContext _localctx = new LabeledControlContext(_ctx, getState());
		enterRule(_localctx, 798, RULE_labeledControl);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6586);
			label();
			setState(6587);
			unlabeledControl();
			setState(6589);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,832,_ctx) ) {
			case 1:
				{
				setState(6588);
				labelRef();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnlabeledControlContext extends ParserRuleContext {
		public LoopBlockContext loopBlock() {
			return getRuleContext(LoopBlockContext.class,0);
		}
		public WhileDoBlockContext whileDoBlock() {
			return getRuleContext(WhileDoBlockContext.class,0);
		}
		public RepeatUntilBlockContext repeatUntilBlock() {
			return getRuleContext(RepeatUntilBlockContext.class,0);
		}
		public UnlabeledControlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unlabeledControl; }
	}

	public final UnlabeledControlContext unlabeledControl() throws RecognitionException {
		UnlabeledControlContext _localctx = new UnlabeledControlContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_unlabeledControl);
		try {
			setState(6594);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOOP_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6591);
				loopBlock();
				}
				break;
			case WHILE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6592);
				whileDoBlock();
				}
				break;
			case REPEAT_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(6593);
				repeatUntilBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoopBlockContext extends ParserRuleContext {
		public List<TerminalNode> LOOP_SYMBOL() { return getTokens(MySQLParser.LOOP_SYMBOL); }
		public TerminalNode LOOP_SYMBOL(int i) {
			return getToken(MySQLParser.LOOP_SYMBOL, i);
		}
		public CompoundStatementListContext compoundStatementList() {
			return getRuleContext(CompoundStatementListContext.class,0);
		}
		public TerminalNode END_SYMBOL() { return getToken(MySQLParser.END_SYMBOL, 0); }
		public LoopBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loopBlock; }
	}

	public final LoopBlockContext loopBlock() throws RecognitionException {
		LoopBlockContext _localctx = new LoopBlockContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_loopBlock);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6596);
			match(LOOP_SYMBOL);
			setState(6597);
			compoundStatementList();
			setState(6598);
			match(END_SYMBOL);
			setState(6599);
			match(LOOP_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhileDoBlockContext extends ParserRuleContext {
		public List<TerminalNode> WHILE_SYMBOL() { return getTokens(MySQLParser.WHILE_SYMBOL); }
		public TerminalNode WHILE_SYMBOL(int i) {
			return getToken(MySQLParser.WHILE_SYMBOL, i);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode DO_SYMBOL() { return getToken(MySQLParser.DO_SYMBOL, 0); }
		public CompoundStatementListContext compoundStatementList() {
			return getRuleContext(CompoundStatementListContext.class,0);
		}
		public TerminalNode END_SYMBOL() { return getToken(MySQLParser.END_SYMBOL, 0); }
		public WhileDoBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whileDoBlock; }
	}

	public final WhileDoBlockContext whileDoBlock() throws RecognitionException {
		WhileDoBlockContext _localctx = new WhileDoBlockContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_whileDoBlock);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6601);
			match(WHILE_SYMBOL);
			setState(6602);
			expr(0);
			setState(6603);
			match(DO_SYMBOL);
			setState(6604);
			compoundStatementList();
			setState(6605);
			match(END_SYMBOL);
			setState(6606);
			match(WHILE_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RepeatUntilBlockContext extends ParserRuleContext {
		public List<TerminalNode> REPEAT_SYMBOL() { return getTokens(MySQLParser.REPEAT_SYMBOL); }
		public TerminalNode REPEAT_SYMBOL(int i) {
			return getToken(MySQLParser.REPEAT_SYMBOL, i);
		}
		public CompoundStatementListContext compoundStatementList() {
			return getRuleContext(CompoundStatementListContext.class,0);
		}
		public TerminalNode UNTIL_SYMBOL() { return getToken(MySQLParser.UNTIL_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode END_SYMBOL() { return getToken(MySQLParser.END_SYMBOL, 0); }
		public RepeatUntilBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repeatUntilBlock; }
	}

	public final RepeatUntilBlockContext repeatUntilBlock() throws RecognitionException {
		RepeatUntilBlockContext _localctx = new RepeatUntilBlockContext(_ctx, getState());
		enterRule(_localctx, 806, RULE_repeatUntilBlock);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6608);
			match(REPEAT_SYMBOL);
			setState(6609);
			compoundStatementList();
			setState(6610);
			match(UNTIL_SYMBOL);
			setState(6611);
			expr(0);
			setState(6612);
			match(END_SYMBOL);
			setState(6613);
			match(REPEAT_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpDeclarationsContext extends ParserRuleContext {
		public List<SpDeclarationContext> spDeclaration() {
			return getRuleContexts(SpDeclarationContext.class);
		}
		public SpDeclarationContext spDeclaration(int i) {
			return getRuleContext(SpDeclarationContext.class,i);
		}
		public List<TerminalNode> SEMICOLON_SYMBOL() { return getTokens(MySQLParser.SEMICOLON_SYMBOL); }
		public TerminalNode SEMICOLON_SYMBOL(int i) {
			return getToken(MySQLParser.SEMICOLON_SYMBOL, i);
		}
		public SpDeclarationsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_spDeclarations; }
	}

	public final SpDeclarationsContext spDeclarations() throws RecognitionException {
		SpDeclarationsContext _localctx = new SpDeclarationsContext(_ctx, getState());
		enterRule(_localctx, 808, RULE_spDeclarations);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6618); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(6615);
					spDeclaration();
					setState(6616);
					match(SEMICOLON_SYMBOL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6620); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,834,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpDeclarationContext extends ParserRuleContext {
		public VariableDeclarationContext variableDeclaration() {
			return getRuleContext(VariableDeclarationContext.class,0);
		}
		public ConditionDeclarationContext conditionDeclaration() {
			return getRuleContext(ConditionDeclarationContext.class,0);
		}
		public HandlerDeclarationContext handlerDeclaration() {
			return getRuleContext(HandlerDeclarationContext.class,0);
		}
		public CursorDeclarationContext cursorDeclaration() {
			return getRuleContext(CursorDeclarationContext.class,0);
		}
		public SpDeclarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_spDeclaration; }
	}

	public final SpDeclarationContext spDeclaration() throws RecognitionException {
		SpDeclarationContext _localctx = new SpDeclarationContext(_ctx, getState());
		enterRule(_localctx, 810, RULE_spDeclaration);
		try {
			setState(6626);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,835,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6622);
				variableDeclaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6623);
				conditionDeclaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6624);
				handlerDeclaration();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6625);
				cursorDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableDeclarationContext extends ParserRuleContext {
		public TerminalNode DECLARE_SYMBOL() { return getToken(MySQLParser.DECLARE_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public CollateContext collate() {
			return getRuleContext(CollateContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableDeclaration; }
	}

	public final VariableDeclarationContext variableDeclaration() throws RecognitionException {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_variableDeclaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6628);
			match(DECLARE_SYMBOL);
			setState(6629);
			identifierList();
			setState(6630);
			dataType();
			setState(6632);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLLATE_SYMBOL) {
				{
				setState(6631);
				collate();
				}
			}

			setState(6636);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT_SYMBOL) {
				{
				setState(6634);
				match(DEFAULT_SYMBOL);
				setState(6635);
				expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConditionDeclarationContext extends ParserRuleContext {
		public TerminalNode DECLARE_SYMBOL() { return getToken(MySQLParser.DECLARE_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode CONDITION_SYMBOL() { return getToken(MySQLParser.CONDITION_SYMBOL, 0); }
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public SpConditionContext spCondition() {
			return getRuleContext(SpConditionContext.class,0);
		}
		public ConditionDeclarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditionDeclaration; }
	}

	public final ConditionDeclarationContext conditionDeclaration() throws RecognitionException {
		ConditionDeclarationContext _localctx = new ConditionDeclarationContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_conditionDeclaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6638);
			match(DECLARE_SYMBOL);
			setState(6639);
			identifier();
			setState(6640);
			match(CONDITION_SYMBOL);
			setState(6641);
			match(FOR_SYMBOL);
			setState(6642);
			spCondition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpConditionContext extends ParserRuleContext {
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public SqlstateContext sqlstate() {
			return getRuleContext(SqlstateContext.class,0);
		}
		public SpConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_spCondition; }
	}

	public final SpConditionContext spCondition() throws RecognitionException {
		SpConditionContext _localctx = new SpConditionContext(_ctx, getState());
		enterRule(_localctx, 816, RULE_spCondition);
		try {
			setState(6646);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case HEX_NUMBER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
				enterOuterAlt(_localctx, 1);
				{
				setState(6644);
				ulong_number();
				}
				break;
			case SQLSTATE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6645);
				sqlstate();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlstateContext extends ParserRuleContext {
		public TerminalNode SQLSTATE_SYMBOL() { return getToken(MySQLParser.SQLSTATE_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode VALUE_SYMBOL() { return getToken(MySQLParser.VALUE_SYMBOL, 0); }
		public SqlstateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlstate; }
	}

	public final SqlstateContext sqlstate() throws RecognitionException {
		SqlstateContext _localctx = new SqlstateContext(_ctx, getState());
		enterRule(_localctx, 818, RULE_sqlstate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6648);
			match(SQLSTATE_SYMBOL);
			setState(6650);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,839,_ctx) ) {
			case 1:
				{
				setState(6649);
				match(VALUE_SYMBOL);
				}
				break;
			}
			setState(6652);
			textLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerDeclarationContext extends ParserRuleContext {
		public TerminalNode DECLARE_SYMBOL() { return getToken(MySQLParser.DECLARE_SYMBOL, 0); }
		public TerminalNode HANDLER_SYMBOL() { return getToken(MySQLParser.HANDLER_SYMBOL, 0); }
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public List<HandlerConditionContext> handlerCondition() {
			return getRuleContexts(HandlerConditionContext.class);
		}
		public HandlerConditionContext handlerCondition(int i) {
			return getRuleContext(HandlerConditionContext.class,i);
		}
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public TerminalNode CONTINUE_SYMBOL() { return getToken(MySQLParser.CONTINUE_SYMBOL, 0); }
		public TerminalNode EXIT_SYMBOL() { return getToken(MySQLParser.EXIT_SYMBOL, 0); }
		public TerminalNode UNDO_SYMBOL() { return getToken(MySQLParser.UNDO_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public HandlerDeclarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerDeclaration; }
	}

	public final HandlerDeclarationContext handlerDeclaration() throws RecognitionException {
		HandlerDeclarationContext _localctx = new HandlerDeclarationContext(_ctx, getState());
		enterRule(_localctx, 820, RULE_handlerDeclaration);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6654);
			match(DECLARE_SYMBOL);
			setState(6655);
			_la = _input.LA(1);
			if ( !(_la==CONTINUE_SYMBOL || _la==EXIT_SYMBOL || _la==UNDO_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6656);
			match(HANDLER_SYMBOL);
			setState(6657);
			match(FOR_SYMBOL);
			setState(6658);
			handlerCondition();
			setState(6663);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,840,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6659);
					match(COMMA_SYMBOL);
					setState(6660);
					handlerCondition();
					}
					} 
				}
				setState(6665);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,840,_ctx);
			}
			setState(6666);
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerConditionContext extends ParserRuleContext {
		public SpConditionContext spCondition() {
			return getRuleContext(SpConditionContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode SQLWARNING_SYMBOL() { return getToken(MySQLParser.SQLWARNING_SYMBOL, 0); }
		public NotRuleContext notRule() {
			return getRuleContext(NotRuleContext.class,0);
		}
		public TerminalNode FOUND_SYMBOL() { return getToken(MySQLParser.FOUND_SYMBOL, 0); }
		public TerminalNode SQLEXCEPTION_SYMBOL() { return getToken(MySQLParser.SQLEXCEPTION_SYMBOL, 0); }
		public HandlerConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerCondition; }
	}

	public final HandlerConditionContext handlerCondition() throws RecognitionException {
		HandlerConditionContext _localctx = new HandlerConditionContext(_ctx, getState());
		enterRule(_localctx, 822, RULE_handlerCondition);
		try {
			setState(6675);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,841,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6668);
				spCondition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6669);
				identifier();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6670);
				match(SQLWARNING_SYMBOL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6671);
				notRule();
				setState(6672);
				match(FOUND_SYMBOL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6674);
				match(SQLEXCEPTION_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CursorDeclarationContext extends ParserRuleContext {
		public TerminalNode DECLARE_SYMBOL() { return getToken(MySQLParser.DECLARE_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode CURSOR_SYMBOL() { return getToken(MySQLParser.CURSOR_SYMBOL, 0); }
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public CursorDeclarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorDeclaration; }
	}

	public final CursorDeclarationContext cursorDeclaration() throws RecognitionException {
		CursorDeclarationContext _localctx = new CursorDeclarationContext(_ctx, getState());
		enterRule(_localctx, 824, RULE_cursorDeclaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6677);
			match(DECLARE_SYMBOL);
			setState(6678);
			identifier();
			setState(6679);
			match(CURSOR_SYMBOL);
			setState(6680);
			match(FOR_SYMBOL);
			setState(6681);
			selectStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IterateStatementContext extends ParserRuleContext {
		public TerminalNode ITERATE_SYMBOL() { return getToken(MySQLParser.ITERATE_SYMBOL, 0); }
		public LabelRefContext labelRef() {
			return getRuleContext(LabelRefContext.class,0);
		}
		public IterateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iterateStatement; }
	}

	public final IterateStatementContext iterateStatement() throws RecognitionException {
		IterateStatementContext _localctx = new IterateStatementContext(_ctx, getState());
		enterRule(_localctx, 826, RULE_iterateStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6683);
			match(ITERATE_SYMBOL);
			setState(6684);
			labelRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LeaveStatementContext extends ParserRuleContext {
		public TerminalNode LEAVE_SYMBOL() { return getToken(MySQLParser.LEAVE_SYMBOL, 0); }
		public LabelRefContext labelRef() {
			return getRuleContext(LabelRefContext.class,0);
		}
		public LeaveStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_leaveStatement; }
	}

	public final LeaveStatementContext leaveStatement() throws RecognitionException {
		LeaveStatementContext _localctx = new LeaveStatementContext(_ctx, getState());
		enterRule(_localctx, 828, RULE_leaveStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6686);
			match(LEAVE_SYMBOL);
			setState(6687);
			labelRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GetDiagnosticsContext extends ParserRuleContext {
		public TerminalNode GET_SYMBOL() { return getToken(MySQLParser.GET_SYMBOL, 0); }
		public TerminalNode DIAGNOSTICS_SYMBOL() { return getToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0); }
		public List<StatementInformationItemContext> statementInformationItem() {
			return getRuleContexts(StatementInformationItemContext.class);
		}
		public StatementInformationItemContext statementInformationItem(int i) {
			return getRuleContext(StatementInformationItemContext.class,i);
		}
		public TerminalNode CONDITION_SYMBOL() { return getToken(MySQLParser.CONDITION_SYMBOL, 0); }
		public SignalAllowedExprContext signalAllowedExpr() {
			return getRuleContext(SignalAllowedExprContext.class,0);
		}
		public List<ConditionInformationItemContext> conditionInformationItem() {
			return getRuleContexts(ConditionInformationItemContext.class);
		}
		public ConditionInformationItemContext conditionInformationItem(int i) {
			return getRuleContext(ConditionInformationItemContext.class,i);
		}
		public TerminalNode CURRENT_SYMBOL() { return getToken(MySQLParser.CURRENT_SYMBOL, 0); }
		public TerminalNode STACKED_SYMBOL() { return getToken(MySQLParser.STACKED_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public GetDiagnosticsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_getDiagnostics; }
	}

	public final GetDiagnosticsContext getDiagnostics() throws RecognitionException {
		GetDiagnosticsContext _localctx = new GetDiagnosticsContext(_ctx, getState());
		enterRule(_localctx, 830, RULE_getDiagnostics);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6689);
			match(GET_SYMBOL);
			setState(6693);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,842,_ctx) ) {
			case 1:
				{
				setState(6690);
				match(CURRENT_SYMBOL);
				}
				break;
			case 2:
				{
				setState(6691);
				if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
				setState(6692);
				match(STACKED_SYMBOL);
				}
				break;
			}
			setState(6695);
			match(DIAGNOSTICS_SYMBOL);
			setState(6714);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,845,_ctx) ) {
			case 1:
				{
				setState(6696);
				statementInformationItem();
				setState(6701);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(6697);
					match(COMMA_SYMBOL);
					setState(6698);
					statementInformationItem();
					}
					}
					setState(6703);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				{
				setState(6704);
				match(CONDITION_SYMBOL);
				setState(6705);
				signalAllowedExpr();
				setState(6706);
				conditionInformationItem();
				setState(6711);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(6707);
					match(COMMA_SYMBOL);
					setState(6708);
					conditionInformationItem();
					}
					}
					setState(6713);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignalAllowedExprContext extends ParserRuleContext {
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public SignalAllowedExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signalAllowedExpr; }
	}

	public final SignalAllowedExprContext signalAllowedExpr() throws RecognitionException {
		SignalAllowedExprContext _localctx = new SignalAllowedExprContext(_ctx, getState());
		enterRule(_localctx, 832, RULE_signalAllowedExpr);
		try {
			setState(6719);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,846,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6716);
				literal();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6717);
				variable();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6718);
				qualifiedIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementInformationItemContext extends ParserRuleContext {
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TerminalNode NUMBER_SYMBOL() { return getToken(MySQLParser.NUMBER_SYMBOL, 0); }
		public TerminalNode ROW_COUNT_SYMBOL() { return getToken(MySQLParser.ROW_COUNT_SYMBOL, 0); }
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public StatementInformationItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statementInformationItem; }
	}

	public final StatementInformationItemContext statementInformationItem() throws RecognitionException {
		StatementInformationItemContext _localctx = new StatementInformationItemContext(_ctx, getState());
		enterRule(_localctx, 834, RULE_statementInformationItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6723);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,847,_ctx) ) {
			case 1:
				{
				setState(6721);
				variable();
				}
				break;
			case 2:
				{
				setState(6722);
				identifier();
				}
				break;
			}
			setState(6725);
			match(EQUAL_OPERATOR);
			setState(6726);
			_la = _input.LA(1);
			if ( !(_la==NUMBER_SYMBOL || _la==ROW_COUNT_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConditionInformationItemContext extends ParserRuleContext {
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SignalInformationItemNameContext signalInformationItemName() {
			return getRuleContext(SignalInformationItemNameContext.class,0);
		}
		public TerminalNode RETURNED_SQLSTATE_SYMBOL() { return getToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0); }
		public ConditionInformationItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditionInformationItem; }
	}

	public final ConditionInformationItemContext conditionInformationItem() throws RecognitionException {
		ConditionInformationItemContext _localctx = new ConditionInformationItemContext(_ctx, getState());
		enterRule(_localctx, 836, RULE_conditionInformationItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6730);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,848,_ctx) ) {
			case 1:
				{
				setState(6728);
				variable();
				}
				break;
			case 2:
				{
				setState(6729);
				identifier();
				}
				break;
			}
			setState(6732);
			match(EQUAL_OPERATOR);
			setState(6735);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CATALOG_NAME_SYMBOL:
			case CLASS_ORIGIN_SYMBOL:
			case COLUMN_NAME_SYMBOL:
			case CONSTRAINT_CATALOG_SYMBOL:
			case CONSTRAINT_SCHEMA_SYMBOL:
			case CONSTRAINT_NAME_SYMBOL:
			case CURSOR_NAME_SYMBOL:
			case MESSAGE_TEXT_SYMBOL:
			case MYSQL_ERRNO_SYMBOL:
			case SCHEMA_NAME_SYMBOL:
			case SUBCLASS_ORIGIN_SYMBOL:
			case TABLE_NAME_SYMBOL:
				{
				setState(6733);
				signalInformationItemName();
				}
				break;
			case RETURNED_SQLSTATE_SYMBOL:
				{
				setState(6734);
				match(RETURNED_SQLSTATE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignalInformationItemNameContext extends ParserRuleContext {
		public TerminalNode CLASS_ORIGIN_SYMBOL() { return getToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0); }
		public TerminalNode SUBCLASS_ORIGIN_SYMBOL() { return getToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0); }
		public TerminalNode CONSTRAINT_CATALOG_SYMBOL() { return getToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0); }
		public TerminalNode CONSTRAINT_SCHEMA_SYMBOL() { return getToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0); }
		public TerminalNode CONSTRAINT_NAME_SYMBOL() { return getToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0); }
		public TerminalNode CATALOG_NAME_SYMBOL() { return getToken(MySQLParser.CATALOG_NAME_SYMBOL, 0); }
		public TerminalNode SCHEMA_NAME_SYMBOL() { return getToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0); }
		public TerminalNode TABLE_NAME_SYMBOL() { return getToken(MySQLParser.TABLE_NAME_SYMBOL, 0); }
		public TerminalNode COLUMN_NAME_SYMBOL() { return getToken(MySQLParser.COLUMN_NAME_SYMBOL, 0); }
		public TerminalNode CURSOR_NAME_SYMBOL() { return getToken(MySQLParser.CURSOR_NAME_SYMBOL, 0); }
		public TerminalNode MESSAGE_TEXT_SYMBOL() { return getToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0); }
		public TerminalNode MYSQL_ERRNO_SYMBOL() { return getToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0); }
		public SignalInformationItemNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signalInformationItemName; }
	}

	public final SignalInformationItemNameContext signalInformationItemName() throws RecognitionException {
		SignalInformationItemNameContext _localctx = new SignalInformationItemNameContext(_ctx, getState());
		enterRule(_localctx, 838, RULE_signalInformationItemName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6737);
			_la = _input.LA(1);
			if ( !(((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (CATALOG_NAME_SYMBOL - 78)) | (1L << (CLASS_ORIGIN_SYMBOL - 78)) | (1L << (COLUMN_NAME_SYMBOL - 78)) | (1L << (CONSTRAINT_CATALOG_SYMBOL - 78)) | (1L << (CONSTRAINT_SCHEMA_SYMBOL - 78)) | (1L << (CONSTRAINT_NAME_SYMBOL - 78)) | (1L << (CURSOR_NAME_SYMBOL - 78)))) != 0) || _la==MESSAGE_TEXT_SYMBOL || _la==MYSQL_ERRNO_SYMBOL || ((((_la - 304)) & ~0x3f) == 0 && ((1L << (_la - 304)) & ((1L << (SCHEMA_NAME_SYMBOL - 304)) | (1L << (SUBCLASS_ORIGIN_SYMBOL - 304)) | (1L << (TABLE_NAME_SYMBOL - 304)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignalStatementContext extends ParserRuleContext {
		public TerminalNode SIGNAL_SYMBOL() { return getToken(MySQLParser.SIGNAL_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SqlstateContext sqlstate() {
			return getRuleContext(SqlstateContext.class,0);
		}
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public List<SignalInformationItemContext> signalInformationItem() {
			return getRuleContexts(SignalInformationItemContext.class);
		}
		public SignalInformationItemContext signalInformationItem(int i) {
			return getRuleContext(SignalInformationItemContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public SignalStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signalStatement; }
	}

	public final SignalStatementContext signalStatement() throws RecognitionException {
		SignalStatementContext _localctx = new SignalStatementContext(_ctx, getState());
		enterRule(_localctx, 840, RULE_signalStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6739);
			match(SIGNAL_SYMBOL);
			setState(6742);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,850,_ctx) ) {
			case 1:
				{
				setState(6740);
				identifier();
				}
				break;
			case 2:
				{
				setState(6741);
				sqlstate();
				}
				break;
			}
			setState(6753);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET_SYMBOL) {
				{
				setState(6744);
				match(SET_SYMBOL);
				setState(6745);
				signalInformationItem();
				setState(6750);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(6746);
					match(COMMA_SYMBOL);
					setState(6747);
					signalInformationItem();
					}
					}
					setState(6752);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResignalStatementContext extends ParserRuleContext {
		public TerminalNode RESIGNAL_SYMBOL() { return getToken(MySQLParser.RESIGNAL_SYMBOL, 0); }
		public TerminalNode SQLSTATE_SYMBOL() { return getToken(MySQLParser.SQLSTATE_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public List<SignalInformationItemContext> signalInformationItem() {
			return getRuleContexts(SignalInformationItemContext.class);
		}
		public SignalInformationItemContext signalInformationItem(int i) {
			return getRuleContext(SignalInformationItemContext.class,i);
		}
		public TerminalNode VALUE_SYMBOL() { return getToken(MySQLParser.VALUE_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ResignalStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resignalStatement; }
	}

	public final ResignalStatementContext resignalStatement() throws RecognitionException {
		ResignalStatementContext _localctx = new ResignalStatementContext(_ctx, getState());
		enterRule(_localctx, 842, RULE_resignalStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6755);
			match(RESIGNAL_SYMBOL);
			setState(6761);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQLSTATE_SYMBOL) {
				{
				setState(6756);
				match(SQLSTATE_SYMBOL);
				setState(6758);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,853,_ctx) ) {
				case 1:
					{
					setState(6757);
					match(VALUE_SYMBOL);
					}
					break;
				}
				setState(6760);
				textOrIdentifier();
				}
			}

			setState(6772);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET_SYMBOL) {
				{
				setState(6763);
				match(SET_SYMBOL);
				setState(6764);
				signalInformationItem();
				setState(6769);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(6765);
					match(COMMA_SYMBOL);
					setState(6766);
					signalInformationItem();
					}
					}
					setState(6771);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignalInformationItemContext extends ParserRuleContext {
		public SignalInformationItemNameContext signalInformationItemName() {
			return getRuleContext(SignalInformationItemNameContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public SignalAllowedExprContext signalAllowedExpr() {
			return getRuleContext(SignalAllowedExprContext.class,0);
		}
		public SignalInformationItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signalInformationItem; }
	}

	public final SignalInformationItemContext signalInformationItem() throws RecognitionException {
		SignalInformationItemContext _localctx = new SignalInformationItemContext(_ctx, getState());
		enterRule(_localctx, 844, RULE_signalInformationItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6774);
			signalInformationItemName();
			setState(6775);
			match(EQUAL_OPERATOR);
			setState(6776);
			signalAllowedExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CursorOpenContext extends ParserRuleContext {
		public TerminalNode OPEN_SYMBOL() { return getToken(MySQLParser.OPEN_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CursorOpenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorOpen; }
	}

	public final CursorOpenContext cursorOpen() throws RecognitionException {
		CursorOpenContext _localctx = new CursorOpenContext(_ctx, getState());
		enterRule(_localctx, 846, RULE_cursorOpen);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6778);
			match(OPEN_SYMBOL);
			setState(6779);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CursorCloseContext extends ParserRuleContext {
		public TerminalNode CLOSE_SYMBOL() { return getToken(MySQLParser.CLOSE_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CursorCloseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorClose; }
	}

	public final CursorCloseContext cursorClose() throws RecognitionException {
		CursorCloseContext _localctx = new CursorCloseContext(_ctx, getState());
		enterRule(_localctx, 848, RULE_cursorClose);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6781);
			match(CLOSE_SYMBOL);
			setState(6782);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CursorFetchContext extends ParserRuleContext {
		public TerminalNode FETCH_SYMBOL() { return getToken(MySQLParser.FETCH_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode INTO_SYMBOL() { return getToken(MySQLParser.INTO_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode NEXT_SYMBOL() { return getToken(MySQLParser.NEXT_SYMBOL, 0); }
		public CursorFetchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorFetch; }
	}

	public final CursorFetchContext cursorFetch() throws RecognitionException {
		CursorFetchContext _localctx = new CursorFetchContext(_ctx, getState());
		enterRule(_localctx, 850, RULE_cursorFetch);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6784);
			match(FETCH_SYMBOL);
			setState(6789);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,858,_ctx) ) {
			case 1:
				{
				setState(6786);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NEXT_SYMBOL) {
					{
					setState(6785);
					match(NEXT_SYMBOL);
					}
				}

				setState(6788);
				match(FROM_SYMBOL);
				}
				break;
			}
			setState(6791);
			identifier();
			setState(6792);
			match(INTO_SYMBOL);
			setState(6793);
			identifierList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScheduleContext extends ParserRuleContext {
		public TerminalNode AT_SYMBOL() { return getToken(MySQLParser.AT_SYMBOL, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode EVERY_SYMBOL() { return getToken(MySQLParser.EVERY_SYMBOL, 0); }
		public IntervalContext interval() {
			return getRuleContext(IntervalContext.class,0);
		}
		public TerminalNode STARTS_SYMBOL() { return getToken(MySQLParser.STARTS_SYMBOL, 0); }
		public TerminalNode ENDS_SYMBOL() { return getToken(MySQLParser.ENDS_SYMBOL, 0); }
		public ScheduleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schedule; }
	}

	public final ScheduleContext schedule() throws RecognitionException {
		ScheduleContext _localctx = new ScheduleContext(_ctx, getState());
		enterRule(_localctx, 852, RULE_schedule);
		int _la;
		try {
			setState(6808);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AT_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6795);
				match(AT_SYMBOL);
				setState(6796);
				expr(0);
				}
				break;
			case EVERY_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6797);
				match(EVERY_SYMBOL);
				setState(6798);
				expr(0);
				setState(6799);
				interval();
				setState(6802);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STARTS_SYMBOL) {
					{
					setState(6800);
					match(STARTS_SYMBOL);
					setState(6801);
					expr(0);
					}
				}

				setState(6806);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENDS_SYMBOL) {
					{
					setState(6804);
					match(ENDS_SYMBOL);
					setState(6805);
					expr(0);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefinitionContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public FieldDefinitionContext fieldDefinition() {
			return getRuleContext(FieldDefinitionContext.class,0);
		}
		public CheckOrReferencesContext checkOrReferences() {
			return getRuleContext(CheckOrReferencesContext.class,0);
		}
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDefinition; }
	}

	public final ColumnDefinitionContext columnDefinition() throws RecognitionException {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 854, RULE_columnDefinition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6810);
			columnName();
			setState(6811);
			fieldDefinition();
			setState(6813);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,862,_ctx) ) {
			case 1:
				{
				setState(6812);
				checkOrReferences();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckOrReferencesContext extends ParserRuleContext {
		public CheckConstraintContext checkConstraint() {
			return getRuleContext(CheckConstraintContext.class,0);
		}
		public ReferencesContext references() {
			return getRuleContext(ReferencesContext.class,0);
		}
		public CheckOrReferencesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkOrReferences; }
	}

	public final CheckOrReferencesContext checkOrReferences() throws RecognitionException {
		CheckOrReferencesContext _localctx = new CheckOrReferencesContext(_ctx, getState());
		enterRule(_localctx, 856, RULE_checkOrReferences);
		try {
			setState(6818);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,863,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6815);
				if (!(serverVersion < 80016)) throw new FailedPredicateException(this, "serverVersion < 80016");
				setState(6816);
				checkConstraint();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6817);
				references();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckConstraintContext extends ParserRuleContext {
		public TerminalNode CHECK_SYMBOL() { return getToken(MySQLParser.CHECK_SYMBOL, 0); }
		public ExprWithParenthesesContext exprWithParentheses() {
			return getRuleContext(ExprWithParenthesesContext.class,0);
		}
		public CheckConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkConstraint; }
	}

	public final CheckConstraintContext checkConstraint() throws RecognitionException {
		CheckConstraintContext _localctx = new CheckConstraintContext(_ctx, getState());
		enterRule(_localctx, 858, RULE_checkConstraint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6820);
			match(CHECK_SYMBOL);
			setState(6821);
			exprWithParentheses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintEnforcementContext extends ParserRuleContext {
		public TerminalNode ENFORCED_SYMBOL() { return getToken(MySQLParser.ENFORCED_SYMBOL, 0); }
		public TerminalNode NOT_SYMBOL() { return getToken(MySQLParser.NOT_SYMBOL, 0); }
		public ConstraintEnforcementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintEnforcement; }
	}

	public final ConstraintEnforcementContext constraintEnforcement() throws RecognitionException {
		ConstraintEnforcementContext _localctx = new ConstraintEnforcementContext(_ctx, getState());
		enterRule(_localctx, 860, RULE_constraintEnforcement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6824);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT_SYMBOL) {
				{
				setState(6823);
				match(NOT_SYMBOL);
				}
			}

			setState(6826);
			match(ENFORCED_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableConstraintDefContext extends ParserRuleContext {
		public Token type;
		public KeyListVariantsContext keyListVariants() {
			return getRuleContext(KeyListVariantsContext.class,0);
		}
		public TerminalNode KEY_SYMBOL() { return getToken(MySQLParser.KEY_SYMBOL, 0); }
		public TerminalNode INDEX_SYMBOL() { return getToken(MySQLParser.INDEX_SYMBOL, 0); }
		public IndexNameAndTypeContext indexNameAndType() {
			return getRuleContext(IndexNameAndTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public TerminalNode FULLTEXT_SYMBOL() { return getToken(MySQLParser.FULLTEXT_SYMBOL, 0); }
		public KeyOrIndexContext keyOrIndex() {
			return getRuleContext(KeyOrIndexContext.class,0);
		}
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public List<FulltextIndexOptionContext> fulltextIndexOption() {
			return getRuleContexts(FulltextIndexOptionContext.class);
		}
		public FulltextIndexOptionContext fulltextIndexOption(int i) {
			return getRuleContext(FulltextIndexOptionContext.class,i);
		}
		public TerminalNode SPATIAL_SYMBOL() { return getToken(MySQLParser.SPATIAL_SYMBOL, 0); }
		public List<SpatialIndexOptionContext> spatialIndexOption() {
			return getRuleContexts(SpatialIndexOptionContext.class);
		}
		public SpatialIndexOptionContext spatialIndexOption(int i) {
			return getRuleContext(SpatialIndexOptionContext.class,i);
		}
		public KeyListContext keyList() {
			return getRuleContext(KeyListContext.class,0);
		}
		public ReferencesContext references() {
			return getRuleContext(ReferencesContext.class,0);
		}
		public CheckConstraintContext checkConstraint() {
			return getRuleContext(CheckConstraintContext.class,0);
		}
		public ConstraintNameContext constraintName() {
			return getRuleContext(ConstraintNameContext.class,0);
		}
		public TerminalNode FOREIGN_SYMBOL() { return getToken(MySQLParser.FOREIGN_SYMBOL, 0); }
		public TerminalNode PRIMARY_SYMBOL() { return getToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		public TerminalNode UNIQUE_SYMBOL() { return getToken(MySQLParser.UNIQUE_SYMBOL, 0); }
		public ConstraintEnforcementContext constraintEnforcement() {
			return getRuleContext(ConstraintEnforcementContext.class,0);
		}
		public TableConstraintDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableConstraintDef; }
	}

	public final TableConstraintDefContext tableConstraintDef() throws RecognitionException {
		TableConstraintDefContext _localctx = new TableConstraintDefContext(_ctx, getState());
		enterRule(_localctx, 862, RULE_tableConstraintDef);
		int _la;
		try {
			int _alt;
			setState(6903);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INDEX_SYMBOL:
			case KEY_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6828);
				((TableConstraintDefContext)_localctx).type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX_SYMBOL || _la==KEY_SYMBOL) ) {
					((TableConstraintDefContext)_localctx).type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6830);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,865,_ctx) ) {
				case 1:
					{
					setState(6829);
					indexNameAndType();
					}
					break;
				}
				setState(6832);
				keyListVariants();
				setState(6836);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,866,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6833);
						indexOption();
						}
						} 
					}
					setState(6838);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,866,_ctx);
				}
				}
				break;
			case FULLTEXT_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6839);
				((TableConstraintDefContext)_localctx).type = match(FULLTEXT_SYMBOL);
				setState(6841);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,867,_ctx) ) {
				case 1:
					{
					setState(6840);
					keyOrIndex();
					}
					break;
				}
				setState(6844);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,868,_ctx) ) {
				case 1:
					{
					setState(6843);
					indexName();
					}
					break;
				}
				setState(6846);
				keyListVariants();
				setState(6850);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,869,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6847);
						fulltextIndexOption();
						}
						} 
					}
					setState(6852);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,869,_ctx);
				}
				}
				break;
			case SPATIAL_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(6853);
				((TableConstraintDefContext)_localctx).type = match(SPATIAL_SYMBOL);
				setState(6855);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,870,_ctx) ) {
				case 1:
					{
					setState(6854);
					keyOrIndex();
					}
					break;
				}
				setState(6858);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,871,_ctx) ) {
				case 1:
					{
					setState(6857);
					indexName();
					}
					break;
				}
				setState(6860);
				keyListVariants();
				setState(6864);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,872,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6861);
						spatialIndexOption();
						}
						} 
					}
					setState(6866);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,872,_ctx);
				}
				}
				break;
			case CHECK_SYMBOL:
			case CONSTRAINT_SYMBOL:
			case FOREIGN_SYMBOL:
			case PRIMARY_SYMBOL:
			case UNIQUE_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(6868);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT_SYMBOL) {
					{
					setState(6867);
					constraintName();
					}
				}

				setState(6901);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PRIMARY_SYMBOL:
				case UNIQUE_SYMBOL:
					{
					setState(6876);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case PRIMARY_SYMBOL:
						{
						setState(6870);
						((TableConstraintDefContext)_localctx).type = match(PRIMARY_SYMBOL);
						setState(6871);
						match(KEY_SYMBOL);
						}
						break;
					case UNIQUE_SYMBOL:
						{
						setState(6872);
						((TableConstraintDefContext)_localctx).type = match(UNIQUE_SYMBOL);
						setState(6874);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,874,_ctx) ) {
						case 1:
							{
							setState(6873);
							keyOrIndex();
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(6879);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,876,_ctx) ) {
					case 1:
						{
						setState(6878);
						indexNameAndType();
						}
						break;
					}
					setState(6881);
					keyListVariants();
					setState(6885);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,877,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(6882);
							indexOption();
							}
							} 
						}
						setState(6887);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,877,_ctx);
					}
					}
					break;
				case FOREIGN_SYMBOL:
					{
					setState(6888);
					((TableConstraintDefContext)_localctx).type = match(FOREIGN_SYMBOL);
					setState(6889);
					match(KEY_SYMBOL);
					setState(6891);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,878,_ctx) ) {
					case 1:
						{
						setState(6890);
						indexName();
						}
						break;
					}
					setState(6893);
					keyList();
					setState(6894);
					references();
					}
					break;
				case CHECK_SYMBOL:
					{
					setState(6896);
					checkConstraint();
					setState(6899);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,879,_ctx) ) {
					case 1:
						{
						setState(6897);
						if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
						setState(6898);
						constraintEnforcement();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintNameContext extends ParserRuleContext {
		public TerminalNode CONSTRAINT_SYMBOL() { return getToken(MySQLParser.CONSTRAINT_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ConstraintNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintName; }
	}

	public final ConstraintNameContext constraintName() throws RecognitionException {
		ConstraintNameContext _localctx = new ConstraintNameContext(_ctx, getState());
		enterRule(_localctx, 864, RULE_constraintName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6905);
			match(CONSTRAINT_SYMBOL);
			setState(6907);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,882,_ctx) ) {
			case 1:
				{
				setState(6906);
				identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FieldDefinitionContext extends ParserRuleContext {
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public ExprWithParenthesesContext exprWithParentheses() {
			return getRuleContext(ExprWithParenthesesContext.class,0);
		}
		public List<ColumnAttributeContext> columnAttribute() {
			return getRuleContexts(ColumnAttributeContext.class);
		}
		public ColumnAttributeContext columnAttribute(int i) {
			return getRuleContext(ColumnAttributeContext.class,i);
		}
		public CollateContext collate() {
			return getRuleContext(CollateContext.class,0);
		}
		public TerminalNode GENERATED_SYMBOL() { return getToken(MySQLParser.GENERATED_SYMBOL, 0); }
		public TerminalNode ALWAYS_SYMBOL() { return getToken(MySQLParser.ALWAYS_SYMBOL, 0); }
		public TerminalNode VIRTUAL_SYMBOL() { return getToken(MySQLParser.VIRTUAL_SYMBOL, 0); }
		public TerminalNode STORED_SYMBOL() { return getToken(MySQLParser.STORED_SYMBOL, 0); }
		public List<GcolAttributeContext> gcolAttribute() {
			return getRuleContexts(GcolAttributeContext.class);
		}
		public GcolAttributeContext gcolAttribute(int i) {
			return getRuleContext(GcolAttributeContext.class,i);
		}
		public FieldDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldDefinition; }
	}

	public final FieldDefinitionContext fieldDefinition() throws RecognitionException {
		FieldDefinitionContext _localctx = new FieldDefinitionContext(_ctx, getState());
		enterRule(_localctx, 866, RULE_fieldDefinition);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6909);
			dataType();
			setState(6945);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,890,_ctx) ) {
			case 1:
				{
				setState(6913);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,883,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6910);
						columnAttribute();
						}
						} 
					}
					setState(6915);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,883,_ctx);
				}
				}
				break;
			case 2:
				{
				setState(6916);
				if (!(serverVersion >= 50707)) throw new FailedPredicateException(this, "serverVersion >= 50707");
				setState(6918);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE_SYMBOL) {
					{
					setState(6917);
					collate();
					}
				}

				setState(6922);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GENERATED_SYMBOL) {
					{
					setState(6920);
					match(GENERATED_SYMBOL);
					setState(6921);
					match(ALWAYS_SYMBOL);
					}
				}

				setState(6924);
				match(AS_SYMBOL);
				setState(6925);
				exprWithParentheses();
				setState(6927);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,886,_ctx) ) {
				case 1:
					{
					setState(6926);
					_la = _input.LA(1);
					if ( !(_la==STORED_SYMBOL || _la==VIRTUAL_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(6943);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,889,_ctx) ) {
				case 1:
					{
					setState(6929);
					if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
					setState(6933);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,887,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(6930);
							gcolAttribute();
							}
							} 
						}
						setState(6935);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,887,_ctx);
					}
					}
					break;
				case 2:
					{
					setState(6936);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(6940);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,888,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(6937);
							columnAttribute();
							}
							} 
						}
						setState(6942);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,888,_ctx);
					}
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnAttributeContext extends ParserRuleContext {
		public Token value;
		public NullLiteralContext nullLiteral() {
			return getRuleContext(NullLiteralContext.class,0);
		}
		public TerminalNode NOT_SYMBOL() { return getToken(MySQLParser.NOT_SYMBOL, 0); }
		public TerminalNode SECONDARY_SYMBOL() { return getToken(MySQLParser.SECONDARY_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public SignedLiteralContext signedLiteral() {
			return getRuleContext(SignedLiteralContext.class,0);
		}
		public TerminalNode NOW_SYMBOL() { return getToken(MySQLParser.NOW_SYMBOL, 0); }
		public ExprWithParenthesesContext exprWithParentheses() {
			return getRuleContext(ExprWithParenthesesContext.class,0);
		}
		public TimeFunctionParametersContext timeFunctionParameters() {
			return getRuleContext(TimeFunctionParametersContext.class,0);
		}
		public TerminalNode UPDATE_SYMBOL() { return getToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public TerminalNode AUTO_INCREMENT_SYMBOL() { return getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0); }
		public TerminalNode VALUE_SYMBOL() { return getToken(MySQLParser.VALUE_SYMBOL, 0); }
		public TerminalNode SERIAL_SYMBOL() { return getToken(MySQLParser.SERIAL_SYMBOL, 0); }
		public TerminalNode KEY_SYMBOL() { return getToken(MySQLParser.KEY_SYMBOL, 0); }
		public TerminalNode PRIMARY_SYMBOL() { return getToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		public TerminalNode UNIQUE_SYMBOL() { return getToken(MySQLParser.UNIQUE_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode COMMENT_SYMBOL() { return getToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public CollateContext collate() {
			return getRuleContext(CollateContext.class,0);
		}
		public ColumnFormatContext columnFormat() {
			return getRuleContext(ColumnFormatContext.class,0);
		}
		public TerminalNode COLUMN_FORMAT_SYMBOL() { return getToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0); }
		public StorageMediaContext storageMedia() {
			return getRuleContext(StorageMediaContext.class,0);
		}
		public TerminalNode STORAGE_SYMBOL() { return getToken(MySQLParser.STORAGE_SYMBOL, 0); }
		public Real_ulonglong_numberContext real_ulonglong_number() {
			return getRuleContext(Real_ulonglong_numberContext.class,0);
		}
		public TerminalNode SRID_SYMBOL() { return getToken(MySQLParser.SRID_SYMBOL, 0); }
		public CheckConstraintContext checkConstraint() {
			return getRuleContext(CheckConstraintContext.class,0);
		}
		public ConstraintNameContext constraintName() {
			return getRuleContext(ConstraintNameContext.class,0);
		}
		public ConstraintEnforcementContext constraintEnforcement() {
			return getRuleContext(ConstraintEnforcementContext.class,0);
		}
		public ColumnAttributeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnAttribute; }
	}

	public final ColumnAttributeContext columnAttribute() throws RecognitionException {
		ColumnAttributeContext _localctx = new ColumnAttributeContext(_ctx, getState());
		enterRule(_localctx, 868, RULE_columnAttribute);
		int _la;
		try {
			setState(6999);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,898,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6948);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT_SYMBOL) {
					{
					setState(6947);
					match(NOT_SYMBOL);
					}
				}

				setState(6950);
				nullLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6951);
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				setState(6952);
				match(NOT_SYMBOL);
				setState(6953);
				match(SECONDARY_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6954);
				((ColumnAttributeContext)_localctx).value = match(DEFAULT_SYMBOL);
				setState(6962);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,893,_ctx) ) {
				case 1:
					{
					setState(6955);
					signedLiteral();
					}
					break;
				case 2:
					{
					setState(6956);
					match(NOW_SYMBOL);
					setState(6958);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,892,_ctx) ) {
					case 1:
						{
						setState(6957);
						timeFunctionParameters();
						}
						break;
					}
					}
					break;
				case 3:
					{
					setState(6960);
					if (!(serverVersion >= 80013)) throw new FailedPredicateException(this, "serverVersion >= 80013");
					setState(6961);
					exprWithParentheses();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6964);
				((ColumnAttributeContext)_localctx).value = match(ON_SYMBOL);
				setState(6965);
				match(UPDATE_SYMBOL);
				setState(6966);
				match(NOW_SYMBOL);
				setState(6968);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,894,_ctx) ) {
				case 1:
					{
					setState(6967);
					timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6970);
				((ColumnAttributeContext)_localctx).value = match(AUTO_INCREMENT_SYMBOL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6971);
				((ColumnAttributeContext)_localctx).value = match(SERIAL_SYMBOL);
				setState(6972);
				match(DEFAULT_SYMBOL);
				setState(6973);
				match(VALUE_SYMBOL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6975);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIMARY_SYMBOL) {
					{
					setState(6974);
					match(PRIMARY_SYMBOL);
					}
				}

				setState(6977);
				((ColumnAttributeContext)_localctx).value = match(KEY_SYMBOL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6978);
				((ColumnAttributeContext)_localctx).value = match(UNIQUE_SYMBOL);
				setState(6980);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,896,_ctx) ) {
				case 1:
					{
					setState(6979);
					match(KEY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6982);
				((ColumnAttributeContext)_localctx).value = match(COMMENT_SYMBOL);
				setState(6983);
				textLiteral();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6984);
				collate();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6985);
				((ColumnAttributeContext)_localctx).value = match(COLUMN_FORMAT_SYMBOL);
				setState(6986);
				columnFormat();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6987);
				((ColumnAttributeContext)_localctx).value = match(STORAGE_SYMBOL);
				setState(6988);
				storageMedia();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6989);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(6990);
				((ColumnAttributeContext)_localctx).value = match(SRID_SYMBOL);
				setState(6991);
				real_ulonglong_number();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(6992);
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				setState(6994);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT_SYMBOL) {
					{
					setState(6993);
					constraintName();
					}
				}

				setState(6996);
				checkConstraint();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(6997);
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				setState(6998);
				constraintEnforcement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnFormatContext extends ParserRuleContext {
		public TerminalNode FIXED_SYMBOL() { return getToken(MySQLParser.FIXED_SYMBOL, 0); }
		public TerminalNode DYNAMIC_SYMBOL() { return getToken(MySQLParser.DYNAMIC_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public ColumnFormatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnFormat; }
	}

	public final ColumnFormatContext columnFormat() throws RecognitionException {
		ColumnFormatContext _localctx = new ColumnFormatContext(_ctx, getState());
		enterRule(_localctx, 870, RULE_columnFormat);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7001);
			_la = _input.LA(1);
			if ( !(_la==DYNAMIC_SYMBOL || _la==FIXED_SYMBOL || _la==DEFAULT_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StorageMediaContext extends ParserRuleContext {
		public TerminalNode DISK_SYMBOL() { return getToken(MySQLParser.DISK_SYMBOL, 0); }
		public TerminalNode MEMORY_SYMBOL() { return getToken(MySQLParser.MEMORY_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public StorageMediaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_storageMedia; }
	}

	public final StorageMediaContext storageMedia() throws RecognitionException {
		StorageMediaContext _localctx = new StorageMediaContext(_ctx, getState());
		enterRule(_localctx, 872, RULE_storageMedia);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7003);
			_la = _input.LA(1);
			if ( !(_la==DISK_SYMBOL || _la==MEMORY_SYMBOL || _la==DEFAULT_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GcolAttributeContext extends ParserRuleContext {
		public TerminalNode UNIQUE_SYMBOL() { return getToken(MySQLParser.UNIQUE_SYMBOL, 0); }
		public TerminalNode KEY_SYMBOL() { return getToken(MySQLParser.KEY_SYMBOL, 0); }
		public TerminalNode COMMENT_SYMBOL() { return getToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public TerminalNode NULL_SYMBOL() { return getToken(MySQLParser.NULL_SYMBOL, 0); }
		public NotRuleContext notRule() {
			return getRuleContext(NotRuleContext.class,0);
		}
		public TerminalNode PRIMARY_SYMBOL() { return getToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		public GcolAttributeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_gcolAttribute; }
	}

	public final GcolAttributeContext gcolAttribute() throws RecognitionException {
		GcolAttributeContext _localctx = new GcolAttributeContext(_ctx, getState());
		enterRule(_localctx, 874, RULE_gcolAttribute);
		int _la;
		try {
			setState(7019);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNIQUE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7005);
				match(UNIQUE_SYMBOL);
				setState(7007);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,899,_ctx) ) {
				case 1:
					{
					setState(7006);
					match(KEY_SYMBOL);
					}
					break;
				}
				}
				break;
			case COMMENT_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7009);
				match(COMMENT_SYMBOL);
				setState(7010);
				textString();
				}
				break;
			case NOT2_SYMBOL:
			case NOT_SYMBOL:
			case NULL_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(7012);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT2_SYMBOL || _la==NOT_SYMBOL) {
					{
					setState(7011);
					notRule();
					}
				}

				setState(7014);
				match(NULL_SYMBOL);
				}
				break;
			case KEY_SYMBOL:
			case PRIMARY_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(7016);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIMARY_SYMBOL) {
					{
					setState(7015);
					match(PRIMARY_SYMBOL);
					}
				}

				setState(7018);
				match(KEY_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferencesContext extends ParserRuleContext {
		public Token match;
		public Token option;
		public TerminalNode REFERENCES_SYMBOL() { return getToken(MySQLParser.REFERENCES_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public IdentifierListWithParenthesesContext identifierListWithParentheses() {
			return getRuleContext(IdentifierListWithParenthesesContext.class,0);
		}
		public TerminalNode MATCH_SYMBOL() { return getToken(MySQLParser.MATCH_SYMBOL, 0); }
		public List<TerminalNode> ON_SYMBOL() { return getTokens(MySQLParser.ON_SYMBOL); }
		public TerminalNode ON_SYMBOL(int i) {
			return getToken(MySQLParser.ON_SYMBOL, i);
		}
		public List<DeleteOptionContext> deleteOption() {
			return getRuleContexts(DeleteOptionContext.class);
		}
		public DeleteOptionContext deleteOption(int i) {
			return getRuleContext(DeleteOptionContext.class,i);
		}
		public TerminalNode UPDATE_SYMBOL() { return getToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public TerminalNode DELETE_SYMBOL() { return getToken(MySQLParser.DELETE_SYMBOL, 0); }
		public TerminalNode FULL_SYMBOL() { return getToken(MySQLParser.FULL_SYMBOL, 0); }
		public TerminalNode PARTIAL_SYMBOL() { return getToken(MySQLParser.PARTIAL_SYMBOL, 0); }
		public TerminalNode SIMPLE_SYMBOL() { return getToken(MySQLParser.SIMPLE_SYMBOL, 0); }
		public ReferencesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_references; }
	}

	public final ReferencesContext references() throws RecognitionException {
		ReferencesContext _localctx = new ReferencesContext(_ctx, getState());
		enterRule(_localctx, 876, RULE_references);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7021);
			match(REFERENCES_SYMBOL);
			setState(7022);
			tableRef();
			setState(7024);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				setState(7023);
				identifierListWithParentheses();
				}
			}

			setState(7028);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MATCH_SYMBOL) {
				{
				setState(7026);
				match(MATCH_SYMBOL);
				setState(7027);
				((ReferencesContext)_localctx).match = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULL_SYMBOL || _la==PARTIAL_SYMBOL || _la==SIMPLE_SYMBOL) ) {
					((ReferencesContext)_localctx).match = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(7046);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,907,_ctx) ) {
			case 1:
				{
				setState(7030);
				match(ON_SYMBOL);
				setState(7031);
				((ReferencesContext)_localctx).option = match(UPDATE_SYMBOL);
				setState(7032);
				deleteOption();
				setState(7036);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON_SYMBOL) {
					{
					setState(7033);
					match(ON_SYMBOL);
					setState(7034);
					match(DELETE_SYMBOL);
					setState(7035);
					deleteOption();
					}
				}

				}
				break;
			case 2:
				{
				setState(7038);
				match(ON_SYMBOL);
				setState(7039);
				((ReferencesContext)_localctx).option = match(DELETE_SYMBOL);
				setState(7040);
				deleteOption();
				setState(7044);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON_SYMBOL) {
					{
					setState(7041);
					match(ON_SYMBOL);
					setState(7042);
					match(UPDATE_SYMBOL);
					setState(7043);
					deleteOption();
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteOptionContext extends ParserRuleContext {
		public TerminalNode RESTRICT_SYMBOL() { return getToken(MySQLParser.RESTRICT_SYMBOL, 0); }
		public TerminalNode CASCADE_SYMBOL() { return getToken(MySQLParser.CASCADE_SYMBOL, 0); }
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public NullLiteralContext nullLiteral() {
			return getRuleContext(NullLiteralContext.class,0);
		}
		public TerminalNode NO_SYMBOL() { return getToken(MySQLParser.NO_SYMBOL, 0); }
		public TerminalNode ACTION_SYMBOL() { return getToken(MySQLParser.ACTION_SYMBOL, 0); }
		public DeleteOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteOption; }
	}

	public final DeleteOptionContext deleteOption() throws RecognitionException {
		DeleteOptionContext _localctx = new DeleteOptionContext(_ctx, getState());
		enterRule(_localctx, 878, RULE_deleteOption);
		int _la;
		try {
			setState(7053);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CASCADE_SYMBOL:
			case RESTRICT_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7048);
				_la = _input.LA(1);
				if ( !(_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SET_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7049);
				match(SET_SYMBOL);
				setState(7050);
				nullLiteral();
				}
				break;
			case NO_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(7051);
				match(NO_SYMBOL);
				setState(7052);
				match(ACTION_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyListContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<KeyPartContext> keyPart() {
			return getRuleContexts(KeyPartContext.class);
		}
		public KeyPartContext keyPart(int i) {
			return getRuleContext(KeyPartContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public KeyListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyList; }
	}

	public final KeyListContext keyList() throws RecognitionException {
		KeyListContext _localctx = new KeyListContext(_ctx, getState());
		enterRule(_localctx, 880, RULE_keyList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7055);
			match(OPEN_PAR_SYMBOL);
			setState(7056);
			keyPart();
			setState(7061);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(7057);
				match(COMMA_SYMBOL);
				setState(7058);
				keyPart();
				}
				}
				setState(7063);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7064);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyPartContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public FieldLengthContext fieldLength() {
			return getRuleContext(FieldLengthContext.class,0);
		}
		public DirectionContext direction() {
			return getRuleContext(DirectionContext.class,0);
		}
		public KeyPartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyPart; }
	}

	public final KeyPartContext keyPart() throws RecognitionException {
		KeyPartContext _localctx = new KeyPartContext(_ctx, getState());
		enterRule(_localctx, 882, RULE_keyPart);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7066);
			identifier();
			setState(7068);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				setState(7067);
				fieldLength();
				}
			}

			setState(7071);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC_SYMBOL || _la==DESC_SYMBOL) {
				{
				setState(7070);
				direction();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyListWithExpressionContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<KeyPartOrExpressionContext> keyPartOrExpression() {
			return getRuleContexts(KeyPartOrExpressionContext.class);
		}
		public KeyPartOrExpressionContext keyPartOrExpression(int i) {
			return getRuleContext(KeyPartOrExpressionContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public KeyListWithExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyListWithExpression; }
	}

	public final KeyListWithExpressionContext keyListWithExpression() throws RecognitionException {
		KeyListWithExpressionContext _localctx = new KeyListWithExpressionContext(_ctx, getState());
		enterRule(_localctx, 884, RULE_keyListWithExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7073);
			match(OPEN_PAR_SYMBOL);
			setState(7074);
			keyPartOrExpression();
			setState(7079);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(7075);
				match(COMMA_SYMBOL);
				setState(7076);
				keyPartOrExpression();
				}
				}
				setState(7081);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7082);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyPartOrExpressionContext extends ParserRuleContext {
		public KeyPartContext keyPart() {
			return getRuleContext(KeyPartContext.class,0);
		}
		public ExprWithParenthesesContext exprWithParentheses() {
			return getRuleContext(ExprWithParenthesesContext.class,0);
		}
		public DirectionContext direction() {
			return getRuleContext(DirectionContext.class,0);
		}
		public KeyPartOrExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyPartOrExpression; }
	}

	public final KeyPartOrExpressionContext keyPartOrExpression() throws RecognitionException {
		KeyPartOrExpressionContext _localctx = new KeyPartOrExpressionContext(_ctx, getState());
		enterRule(_localctx, 886, RULE_keyPartOrExpression);
		int _la;
		try {
			setState(7089);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,914,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7084);
				keyPart();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7085);
				exprWithParentheses();
				setState(7087);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC_SYMBOL || _la==DESC_SYMBOL) {
					{
					setState(7086);
					direction();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyListVariantsContext extends ParserRuleContext {
		public KeyListWithExpressionContext keyListWithExpression() {
			return getRuleContext(KeyListWithExpressionContext.class,0);
		}
		public KeyListContext keyList() {
			return getRuleContext(KeyListContext.class,0);
		}
		public KeyListVariantsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyListVariants; }
	}

	public final KeyListVariantsContext keyListVariants() throws RecognitionException {
		KeyListVariantsContext _localctx = new KeyListVariantsContext(_ctx, getState());
		enterRule(_localctx, 888, RULE_keyListVariants);
		try {
			setState(7095);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,915,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7091);
				if (!(serverVersion >= 80013)) throw new FailedPredicateException(this, "serverVersion >= 80013");
				setState(7092);
				keyListWithExpression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7093);
				if (!(serverVersion < 80013)) throw new FailedPredicateException(this, "serverVersion < 80013");
				setState(7094);
				keyList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexTypeContext extends ParserRuleContext {
		public Token algorithm;
		public TerminalNode BTREE_SYMBOL() { return getToken(MySQLParser.BTREE_SYMBOL, 0); }
		public TerminalNode RTREE_SYMBOL() { return getToken(MySQLParser.RTREE_SYMBOL, 0); }
		public TerminalNode HASH_SYMBOL() { return getToken(MySQLParser.HASH_SYMBOL, 0); }
		public IndexTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexType; }
	}

	public final IndexTypeContext indexType() throws RecognitionException {
		IndexTypeContext _localctx = new IndexTypeContext(_ctx, getState());
		enterRule(_localctx, 890, RULE_indexType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7097);
			((IndexTypeContext)_localctx).algorithm = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==BTREE_SYMBOL || _la==HASH_SYMBOL || _la==RTREE_SYMBOL) ) {
				((IndexTypeContext)_localctx).algorithm = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexOptionContext extends ParserRuleContext {
		public CommonIndexOptionContext commonIndexOption() {
			return getRuleContext(CommonIndexOptionContext.class,0);
		}
		public IndexTypeClauseContext indexTypeClause() {
			return getRuleContext(IndexTypeClauseContext.class,0);
		}
		public IndexOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexOption; }
	}

	public final IndexOptionContext indexOption() throws RecognitionException {
		IndexOptionContext _localctx = new IndexOptionContext(_ctx, getState());
		enterRule(_localctx, 892, RULE_indexOption);
		try {
			setState(7101);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,916,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7099);
				commonIndexOption();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7100);
				indexTypeClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommonIndexOptionContext extends ParserRuleContext {
		public TerminalNode KEY_BLOCK_SIZE_SYMBOL() { return getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0); }
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TerminalNode COMMENT_SYMBOL() { return getToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public VisibilityContext visibility() {
			return getRuleContext(VisibilityContext.class,0);
		}
		public CommonIndexOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commonIndexOption; }
	}

	public final CommonIndexOptionContext commonIndexOption() throws RecognitionException {
		CommonIndexOptionContext _localctx = new CommonIndexOptionContext(_ctx, getState());
		enterRule(_localctx, 894, RULE_commonIndexOption);
		int _la;
		try {
			setState(7112);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,918,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7103);
				match(KEY_BLOCK_SIZE_SYMBOL);
				setState(7105);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7104);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7107);
				ulong_number();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7108);
				match(COMMENT_SYMBOL);
				setState(7109);
				textLiteral();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7110);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(7111);
				visibility();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VisibilityContext extends ParserRuleContext {
		public TerminalNode VISIBLE_SYMBOL() { return getToken(MySQLParser.VISIBLE_SYMBOL, 0); }
		public TerminalNode INVISIBLE_SYMBOL() { return getToken(MySQLParser.INVISIBLE_SYMBOL, 0); }
		public VisibilityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_visibility; }
	}

	public final VisibilityContext visibility() throws RecognitionException {
		VisibilityContext _localctx = new VisibilityContext(_ctx, getState());
		enterRule(_localctx, 896, RULE_visibility);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7114);
			_la = _input.LA(1);
			if ( !(_la==INVISIBLE_SYMBOL || _la==VISIBLE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexTypeClauseContext extends ParserRuleContext {
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public TerminalNode USING_SYMBOL() { return getToken(MySQLParser.USING_SYMBOL, 0); }
		public TerminalNode TYPE_SYMBOL() { return getToken(MySQLParser.TYPE_SYMBOL, 0); }
		public IndexTypeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexTypeClause; }
	}

	public final IndexTypeClauseContext indexTypeClause() throws RecognitionException {
		IndexTypeClauseContext _localctx = new IndexTypeClauseContext(_ctx, getState());
		enterRule(_localctx, 898, RULE_indexTypeClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7116);
			_la = _input.LA(1);
			if ( !(_la==TYPE_SYMBOL || _la==USING_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7117);
			indexType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FulltextIndexOptionContext extends ParserRuleContext {
		public CommonIndexOptionContext commonIndexOption() {
			return getRuleContext(CommonIndexOptionContext.class,0);
		}
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode PARSER_SYMBOL() { return getToken(MySQLParser.PARSER_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public FulltextIndexOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fulltextIndexOption; }
	}

	public final FulltextIndexOptionContext fulltextIndexOption() throws RecognitionException {
		FulltextIndexOptionContext _localctx = new FulltextIndexOptionContext(_ctx, getState());
		enterRule(_localctx, 900, RULE_fulltextIndexOption);
		try {
			setState(7123);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,919,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7119);
				commonIndexOption();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7120);
				match(WITH_SYMBOL);
				setState(7121);
				match(PARSER_SYMBOL);
				setState(7122);
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpatialIndexOptionContext extends ParserRuleContext {
		public CommonIndexOptionContext commonIndexOption() {
			return getRuleContext(CommonIndexOptionContext.class,0);
		}
		public SpatialIndexOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_spatialIndexOption; }
	}

	public final SpatialIndexOptionContext spatialIndexOption() throws RecognitionException {
		SpatialIndexOptionContext _localctx = new SpatialIndexOptionContext(_ctx, getState());
		enterRule(_localctx, 902, RULE_spatialIndexOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7125);
			commonIndexOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeDefinitionContext extends ParserRuleContext {
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode EOF() { return getToken(MySQLParser.EOF, 0); }
		public DataTypeDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataTypeDefinition; }
	}

	public final DataTypeDefinitionContext dataTypeDefinition() throws RecognitionException {
		DataTypeDefinitionContext _localctx = new DataTypeDefinitionContext(_ctx, getState());
		enterRule(_localctx, 904, RULE_dataTypeDefinition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7127);
			dataType();
			setState(7128);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeContext extends ParserRuleContext {
		public Token type;
		public TerminalNode INT_SYMBOL() { return getToken(MySQLParser.INT_SYMBOL, 0); }
		public TerminalNode TINYINT_SYMBOL() { return getToken(MySQLParser.TINYINT_SYMBOL, 0); }
		public TerminalNode SMALLINT_SYMBOL() { return getToken(MySQLParser.SMALLINT_SYMBOL, 0); }
		public TerminalNode MEDIUMINT_SYMBOL() { return getToken(MySQLParser.MEDIUMINT_SYMBOL, 0); }
		public TerminalNode BIGINT_SYMBOL() { return getToken(MySQLParser.BIGINT_SYMBOL, 0); }
		public FieldLengthContext fieldLength() {
			return getRuleContext(FieldLengthContext.class,0);
		}
		public FieldOptionsContext fieldOptions() {
			return getRuleContext(FieldOptionsContext.class,0);
		}
		public TerminalNode REAL_SYMBOL() { return getToken(MySQLParser.REAL_SYMBOL, 0); }
		public TerminalNode DOUBLE_SYMBOL() { return getToken(MySQLParser.DOUBLE_SYMBOL, 0); }
		public PrecisionContext precision() {
			return getRuleContext(PrecisionContext.class,0);
		}
		public TerminalNode PRECISION_SYMBOL() { return getToken(MySQLParser.PRECISION_SYMBOL, 0); }
		public TerminalNode FLOAT_SYMBOL() { return getToken(MySQLParser.FLOAT_SYMBOL, 0); }
		public TerminalNode DECIMAL_SYMBOL() { return getToken(MySQLParser.DECIMAL_SYMBOL, 0); }
		public TerminalNode NUMERIC_SYMBOL() { return getToken(MySQLParser.NUMERIC_SYMBOL, 0); }
		public TerminalNode FIXED_SYMBOL() { return getToken(MySQLParser.FIXED_SYMBOL, 0); }
		public FloatOptionsContext floatOptions() {
			return getRuleContext(FloatOptionsContext.class,0);
		}
		public TerminalNode BIT_SYMBOL() { return getToken(MySQLParser.BIT_SYMBOL, 0); }
		public TerminalNode BOOL_SYMBOL() { return getToken(MySQLParser.BOOL_SYMBOL, 0); }
		public TerminalNode BOOLEAN_SYMBOL() { return getToken(MySQLParser.BOOLEAN_SYMBOL, 0); }
		public TerminalNode CHAR_SYMBOL() { return getToken(MySQLParser.CHAR_SYMBOL, 0); }
		public CharsetWithOptBinaryContext charsetWithOptBinary() {
			return getRuleContext(CharsetWithOptBinaryContext.class,0);
		}
		public NcharContext nchar() {
			return getRuleContext(NcharContext.class,0);
		}
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public TerminalNode VARYING_SYMBOL() { return getToken(MySQLParser.VARYING_SYMBOL, 0); }
		public TerminalNode VARCHAR_SYMBOL() { return getToken(MySQLParser.VARCHAR_SYMBOL, 0); }
		public TerminalNode NATIONAL_SYMBOL() { return getToken(MySQLParser.NATIONAL_SYMBOL, 0); }
		public TerminalNode NVARCHAR_SYMBOL() { return getToken(MySQLParser.NVARCHAR_SYMBOL, 0); }
		public TerminalNode NCHAR_SYMBOL() { return getToken(MySQLParser.NCHAR_SYMBOL, 0); }
		public TerminalNode VARBINARY_SYMBOL() { return getToken(MySQLParser.VARBINARY_SYMBOL, 0); }
		public TerminalNode YEAR_SYMBOL() { return getToken(MySQLParser.YEAR_SYMBOL, 0); }
		public TerminalNode DATE_SYMBOL() { return getToken(MySQLParser.DATE_SYMBOL, 0); }
		public TerminalNode TIME_SYMBOL() { return getToken(MySQLParser.TIME_SYMBOL, 0); }
		public TypeDatetimePrecisionContext typeDatetimePrecision() {
			return getRuleContext(TypeDatetimePrecisionContext.class,0);
		}
		public TerminalNode TIMESTAMP_SYMBOL() { return getToken(MySQLParser.TIMESTAMP_SYMBOL, 0); }
		public TerminalNode DATETIME_SYMBOL() { return getToken(MySQLParser.DATETIME_SYMBOL, 0); }
		public TerminalNode TINYBLOB_SYMBOL() { return getToken(MySQLParser.TINYBLOB_SYMBOL, 0); }
		public TerminalNode BLOB_SYMBOL() { return getToken(MySQLParser.BLOB_SYMBOL, 0); }
		public TerminalNode MEDIUMBLOB_SYMBOL() { return getToken(MySQLParser.MEDIUMBLOB_SYMBOL, 0); }
		public TerminalNode LONGBLOB_SYMBOL() { return getToken(MySQLParser.LONGBLOB_SYMBOL, 0); }
		public TerminalNode LONG_SYMBOL() { return getToken(MySQLParser.LONG_SYMBOL, 0); }
		public TerminalNode TINYTEXT_SYMBOL() { return getToken(MySQLParser.TINYTEXT_SYMBOL, 0); }
		public TerminalNode TEXT_SYMBOL() { return getToken(MySQLParser.TEXT_SYMBOL, 0); }
		public TerminalNode MEDIUMTEXT_SYMBOL() { return getToken(MySQLParser.MEDIUMTEXT_SYMBOL, 0); }
		public TerminalNode LONGTEXT_SYMBOL() { return getToken(MySQLParser.LONGTEXT_SYMBOL, 0); }
		public StringListContext stringList() {
			return getRuleContext(StringListContext.class,0);
		}
		public TerminalNode ENUM_SYMBOL() { return getToken(MySQLParser.ENUM_SYMBOL, 0); }
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public TerminalNode SERIAL_SYMBOL() { return getToken(MySQLParser.SERIAL_SYMBOL, 0); }
		public TerminalNode JSON_SYMBOL() { return getToken(MySQLParser.JSON_SYMBOL, 0); }
		public TerminalNode GEOMETRY_SYMBOL() { return getToken(MySQLParser.GEOMETRY_SYMBOL, 0); }
		public TerminalNode GEOMETRYCOLLECTION_SYMBOL() { return getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
		public TerminalNode POINT_SYMBOL() { return getToken(MySQLParser.POINT_SYMBOL, 0); }
		public TerminalNode MULTIPOINT_SYMBOL() { return getToken(MySQLParser.MULTIPOINT_SYMBOL, 0); }
		public TerminalNode LINESTRING_SYMBOL() { return getToken(MySQLParser.LINESTRING_SYMBOL, 0); }
		public TerminalNode MULTILINESTRING_SYMBOL() { return getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0); }
		public TerminalNode POLYGON_SYMBOL() { return getToken(MySQLParser.POLYGON_SYMBOL, 0); }
		public TerminalNode MULTIPOLYGON_SYMBOL() { return getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0); }
		public DataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataType; }
	}

	public final DataTypeContext dataType() throws RecognitionException {
		DataTypeContext _localctx = new DataTypeContext(_ctx, getState());
		enterRule(_localctx, 906, RULE_dataType);
		int _la;
		try {
			setState(7277);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,953,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7130);
				((DataTypeContext)_localctx).type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BIGINT_SYMBOL || _la==INT_SYMBOL || _la==MEDIUMINT_SYMBOL || _la==SMALLINT_SYMBOL || _la==TINYINT_SYMBOL) ) {
					((DataTypeContext)_localctx).type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7132);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,920,_ctx) ) {
				case 1:
					{
					setState(7131);
					fieldLength();
					}
					break;
				}
				setState(7135);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,921,_ctx) ) {
				case 1:
					{
					setState(7134);
					fieldOptions();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7142);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case REAL_SYMBOL:
					{
					setState(7137);
					((DataTypeContext)_localctx).type = match(REAL_SYMBOL);
					}
					break;
				case DOUBLE_SYMBOL:
					{
					setState(7138);
					((DataTypeContext)_localctx).type = match(DOUBLE_SYMBOL);
					setState(7140);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,922,_ctx) ) {
					case 1:
						{
						setState(7139);
						match(PRECISION_SYMBOL);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7145);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,924,_ctx) ) {
				case 1:
					{
					setState(7144);
					precision();
					}
					break;
				}
				setState(7148);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,925,_ctx) ) {
				case 1:
					{
					setState(7147);
					fieldOptions();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7150);
				((DataTypeContext)_localctx).type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FIXED_SYMBOL || _la==DECIMAL_SYMBOL || _la==FLOAT_SYMBOL || _la==NUMERIC_SYMBOL) ) {
					((DataTypeContext)_localctx).type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7152);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,926,_ctx) ) {
				case 1:
					{
					setState(7151);
					floatOptions();
					}
					break;
				}
				setState(7155);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,927,_ctx) ) {
				case 1:
					{
					setState(7154);
					fieldOptions();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7157);
				((DataTypeContext)_localctx).type = match(BIT_SYMBOL);
				setState(7159);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,928,_ctx) ) {
				case 1:
					{
					setState(7158);
					fieldLength();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7161);
				((DataTypeContext)_localctx).type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BOOL_SYMBOL || _la==BOOLEAN_SYMBOL) ) {
					((DataTypeContext)_localctx).type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7162);
				((DataTypeContext)_localctx).type = match(CHAR_SYMBOL);
				setState(7164);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,929,_ctx) ) {
				case 1:
					{
					setState(7163);
					fieldLength();
					}
					break;
				}
				setState(7167);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,930,_ctx) ) {
				case 1:
					{
					setState(7166);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7169);
				nchar();
				setState(7171);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,931,_ctx) ) {
				case 1:
					{
					setState(7170);
					fieldLength();
					}
					break;
				}
				setState(7174);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,932,_ctx) ) {
				case 1:
					{
					setState(7173);
					match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7176);
				((DataTypeContext)_localctx).type = match(BINARY_SYMBOL);
				setState(7178);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,933,_ctx) ) {
				case 1:
					{
					setState(7177);
					fieldLength();
					}
					break;
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7183);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHAR_SYMBOL:
					{
					setState(7180);
					((DataTypeContext)_localctx).type = match(CHAR_SYMBOL);
					setState(7181);
					match(VARYING_SYMBOL);
					}
					break;
				case VARCHAR_SYMBOL:
					{
					setState(7182);
					((DataTypeContext)_localctx).type = match(VARCHAR_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7185);
				fieldLength();
				setState(7187);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,935,_ctx) ) {
				case 1:
					{
					setState(7186);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(7199);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,936,_ctx) ) {
				case 1:
					{
					setState(7189);
					((DataTypeContext)_localctx).type = match(NATIONAL_SYMBOL);
					setState(7190);
					match(VARCHAR_SYMBOL);
					}
					break;
				case 2:
					{
					setState(7191);
					((DataTypeContext)_localctx).type = match(NVARCHAR_SYMBOL);
					}
					break;
				case 3:
					{
					setState(7192);
					((DataTypeContext)_localctx).type = match(NCHAR_SYMBOL);
					setState(7193);
					match(VARCHAR_SYMBOL);
					}
					break;
				case 4:
					{
					setState(7194);
					((DataTypeContext)_localctx).type = match(NATIONAL_SYMBOL);
					setState(7195);
					match(CHAR_SYMBOL);
					setState(7196);
					match(VARYING_SYMBOL);
					}
					break;
				case 5:
					{
					setState(7197);
					((DataTypeContext)_localctx).type = match(NCHAR_SYMBOL);
					setState(7198);
					match(VARYING_SYMBOL);
					}
					break;
				}
				setState(7201);
				fieldLength();
				setState(7203);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,937,_ctx) ) {
				case 1:
					{
					setState(7202);
					match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(7205);
				((DataTypeContext)_localctx).type = match(VARBINARY_SYMBOL);
				setState(7206);
				fieldLength();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(7207);
				((DataTypeContext)_localctx).type = match(YEAR_SYMBOL);
				setState(7209);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,938,_ctx) ) {
				case 1:
					{
					setState(7208);
					fieldLength();
					}
					break;
				}
				setState(7212);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,939,_ctx) ) {
				case 1:
					{
					setState(7211);
					fieldOptions();
					}
					break;
				}
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(7214);
				((DataTypeContext)_localctx).type = match(DATE_SYMBOL);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(7215);
				((DataTypeContext)_localctx).type = match(TIME_SYMBOL);
				setState(7217);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,940,_ctx) ) {
				case 1:
					{
					setState(7216);
					typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(7219);
				((DataTypeContext)_localctx).type = match(TIMESTAMP_SYMBOL);
				setState(7221);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,941,_ctx) ) {
				case 1:
					{
					setState(7220);
					typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(7223);
				((DataTypeContext)_localctx).type = match(DATETIME_SYMBOL);
				setState(7225);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,942,_ctx) ) {
				case 1:
					{
					setState(7224);
					typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(7227);
				((DataTypeContext)_localctx).type = match(TINYBLOB_SYMBOL);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(7228);
				((DataTypeContext)_localctx).type = match(BLOB_SYMBOL);
				setState(7230);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,943,_ctx) ) {
				case 1:
					{
					setState(7229);
					fieldLength();
					}
					break;
				}
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(7232);
				((DataTypeContext)_localctx).type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LONGBLOB_SYMBOL || _la==MEDIUMBLOB_SYMBOL) ) {
					((DataTypeContext)_localctx).type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(7233);
				((DataTypeContext)_localctx).type = match(LONG_SYMBOL);
				setState(7234);
				match(VARBINARY_SYMBOL);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(7235);
				((DataTypeContext)_localctx).type = match(LONG_SYMBOL);
				setState(7239);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,944,_ctx) ) {
				case 1:
					{
					setState(7236);
					match(CHAR_SYMBOL);
					setState(7237);
					match(VARYING_SYMBOL);
					}
					break;
				case 2:
					{
					setState(7238);
					match(VARCHAR_SYMBOL);
					}
					break;
				}
				setState(7242);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,945,_ctx) ) {
				case 1:
					{
					setState(7241);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(7244);
				((DataTypeContext)_localctx).type = match(TINYTEXT_SYMBOL);
				setState(7246);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,946,_ctx) ) {
				case 1:
					{
					setState(7245);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(7248);
				((DataTypeContext)_localctx).type = match(TEXT_SYMBOL);
				setState(7250);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,947,_ctx) ) {
				case 1:
					{
					setState(7249);
					fieldLength();
					}
					break;
				}
				setState(7253);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,948,_ctx) ) {
				case 1:
					{
					setState(7252);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(7255);
				((DataTypeContext)_localctx).type = match(MEDIUMTEXT_SYMBOL);
				setState(7257);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,949,_ctx) ) {
				case 1:
					{
					setState(7256);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(7259);
				((DataTypeContext)_localctx).type = match(LONGTEXT_SYMBOL);
				setState(7261);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,950,_ctx) ) {
				case 1:
					{
					setState(7260);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(7263);
				((DataTypeContext)_localctx).type = match(ENUM_SYMBOL);
				setState(7264);
				stringList();
				setState(7266);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,951,_ctx) ) {
				case 1:
					{
					setState(7265);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(7268);
				((DataTypeContext)_localctx).type = match(SET_SYMBOL);
				setState(7269);
				stringList();
				setState(7271);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,952,_ctx) ) {
				case 1:
					{
					setState(7270);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(7273);
				((DataTypeContext)_localctx).type = match(SERIAL_SYMBOL);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(7274);
				if (!(serverVersion >= 50708)) throw new FailedPredicateException(this, "serverVersion >= 50708");
				setState(7275);
				((DataTypeContext)_localctx).type = match(JSON_SYMBOL);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(7276);
				((DataTypeContext)_localctx).type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 151)) & ~0x3f) == 0 && ((1L << (_la - 151)) & ((1L << (GEOMETRY_SYMBOL - 151)) | (1L << (GEOMETRYCOLLECTION_SYMBOL - 151)) | (1L << (LINESTRING_SYMBOL - 151)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (MULTILINESTRING_SYMBOL - 224)) | (1L << (MULTIPOINT_SYMBOL - 224)) | (1L << (MULTIPOLYGON_SYMBOL - 224)) | (1L << (POINT_SYMBOL - 224)) | (1L << (POLYGON_SYMBOL - 224)))) != 0)) ) {
					((DataTypeContext)_localctx).type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NcharContext extends ParserRuleContext {
		public Token type;
		public TerminalNode NCHAR_SYMBOL() { return getToken(MySQLParser.NCHAR_SYMBOL, 0); }
		public TerminalNode CHAR_SYMBOL() { return getToken(MySQLParser.CHAR_SYMBOL, 0); }
		public TerminalNode NATIONAL_SYMBOL() { return getToken(MySQLParser.NATIONAL_SYMBOL, 0); }
		public NcharContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nchar; }
	}

	public final NcharContext nchar() throws RecognitionException {
		NcharContext _localctx = new NcharContext(_ctx, getState());
		enterRule(_localctx, 908, RULE_nchar);
		try {
			setState(7282);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NCHAR_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7279);
				((NcharContext)_localctx).type = match(NCHAR_SYMBOL);
				}
				break;
			case NATIONAL_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7280);
				((NcharContext)_localctx).type = match(NATIONAL_SYMBOL);
				setState(7281);
				match(CHAR_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RealTypeContext extends ParserRuleContext {
		public Token type;
		public TerminalNode REAL_SYMBOL() { return getToken(MySQLParser.REAL_SYMBOL, 0); }
		public TerminalNode DOUBLE_SYMBOL() { return getToken(MySQLParser.DOUBLE_SYMBOL, 0); }
		public TerminalNode PRECISION_SYMBOL() { return getToken(MySQLParser.PRECISION_SYMBOL, 0); }
		public RealTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_realType; }
	}

	public final RealTypeContext realType() throws RecognitionException {
		RealTypeContext _localctx = new RealTypeContext(_ctx, getState());
		enterRule(_localctx, 910, RULE_realType);
		try {
			setState(7289);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REAL_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7284);
				((RealTypeContext)_localctx).type = match(REAL_SYMBOL);
				}
				break;
			case DOUBLE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7285);
				((RealTypeContext)_localctx).type = match(DOUBLE_SYMBOL);
				setState(7287);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,955,_ctx) ) {
				case 1:
					{
					setState(7286);
					match(PRECISION_SYMBOL);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FieldLengthContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public Real_ulonglong_numberContext real_ulonglong_number() {
			return getRuleContext(Real_ulonglong_numberContext.class,0);
		}
		public TerminalNode DECIMAL_NUMBER() { return getToken(MySQLParser.DECIMAL_NUMBER, 0); }
		public FieldLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldLength; }
	}

	public final FieldLengthContext fieldLength() throws RecognitionException {
		FieldLengthContext _localctx = new FieldLengthContext(_ctx, getState());
		enterRule(_localctx, 912, RULE_fieldLength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7291);
			match(OPEN_PAR_SYMBOL);
			setState(7294);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,957,_ctx) ) {
			case 1:
				{
				setState(7292);
				real_ulonglong_number();
				}
				break;
			case 2:
				{
				setState(7293);
				match(DECIMAL_NUMBER);
				}
				break;
			}
			setState(7296);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FieldOptionsContext extends ParserRuleContext {
		public List<TerminalNode> SIGNED_SYMBOL() { return getTokens(MySQLParser.SIGNED_SYMBOL); }
		public TerminalNode SIGNED_SYMBOL(int i) {
			return getToken(MySQLParser.SIGNED_SYMBOL, i);
		}
		public List<TerminalNode> UNSIGNED_SYMBOL() { return getTokens(MySQLParser.UNSIGNED_SYMBOL); }
		public TerminalNode UNSIGNED_SYMBOL(int i) {
			return getToken(MySQLParser.UNSIGNED_SYMBOL, i);
		}
		public List<TerminalNode> ZEROFILL_SYMBOL() { return getTokens(MySQLParser.ZEROFILL_SYMBOL); }
		public TerminalNode ZEROFILL_SYMBOL(int i) {
			return getToken(MySQLParser.ZEROFILL_SYMBOL, i);
		}
		public FieldOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldOptions; }
	}

	public final FieldOptionsContext fieldOptions() throws RecognitionException {
		FieldOptionsContext _localctx = new FieldOptionsContext(_ctx, getState());
		enterRule(_localctx, 914, RULE_fieldOptions);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7299); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(7298);
					_la = _input.LA(1);
					if ( !(_la==SIGNED_SYMBOL || _la==UNSIGNED_SYMBOL || _la==ZEROFILL_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7301); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,958,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetWithOptBinaryContext extends ParserRuleContext {
		public AsciiContext ascii() {
			return getRuleContext(AsciiContext.class,0);
		}
		public UnicodeContext unicode() {
			return getRuleContext(UnicodeContext.class,0);
		}
		public TerminalNode BYTE_SYMBOL() { return getToken(MySQLParser.BYTE_SYMBOL, 0); }
		public CharsetContext charset() {
			return getRuleContext(CharsetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public CharsetWithOptBinaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetWithOptBinary; }
	}

	public final CharsetWithOptBinaryContext charsetWithOptBinary() throws RecognitionException {
		CharsetWithOptBinaryContext _localctx = new CharsetWithOptBinaryContext(_ctx, getState());
		enterRule(_localctx, 916, RULE_charsetWithOptBinary);
		try {
			setState(7317);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,961,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7303);
				ascii();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7304);
				unicode();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7305);
				match(BYTE_SYMBOL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7306);
				charset();
				setState(7307);
				charsetName();
				setState(7309);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,959,_ctx) ) {
				case 1:
					{
					setState(7308);
					match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7311);
				match(BINARY_SYMBOL);
				setState(7315);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,960,_ctx) ) {
				case 1:
					{
					setState(7312);
					charset();
					setState(7313);
					charsetName();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AsciiContext extends ParserRuleContext {
		public TerminalNode ASCII_SYMBOL() { return getToken(MySQLParser.ASCII_SYMBOL, 0); }
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public AsciiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ascii; }
	}

	public final AsciiContext ascii() throws RecognitionException {
		AsciiContext _localctx = new AsciiContext(_ctx, getState());
		enterRule(_localctx, 918, RULE_ascii);
		try {
			setState(7325);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASCII_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7319);
				match(ASCII_SYMBOL);
				setState(7321);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,962,_ctx) ) {
				case 1:
					{
					setState(7320);
					match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case BINARY_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7323);
				match(BINARY_SYMBOL);
				setState(7324);
				match(ASCII_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnicodeContext extends ParserRuleContext {
		public TerminalNode UNICODE_SYMBOL() { return getToken(MySQLParser.UNICODE_SYMBOL, 0); }
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public UnicodeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unicode; }
	}

	public final UnicodeContext unicode() throws RecognitionException {
		UnicodeContext _localctx = new UnicodeContext(_ctx, getState());
		enterRule(_localctx, 920, RULE_unicode);
		try {
			setState(7333);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNICODE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7327);
				match(UNICODE_SYMBOL);
				setState(7329);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,964,_ctx) ) {
				case 1:
					{
					setState(7328);
					match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case BINARY_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7331);
				match(BINARY_SYMBOL);
				setState(7332);
				match(UNICODE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WsNumCodepointsContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public WsNumCodepointsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_wsNumCodepoints; }
	}

	public final WsNumCodepointsContext wsNumCodepoints() throws RecognitionException {
		WsNumCodepointsContext _localctx = new WsNumCodepointsContext(_ctx, getState());
		enterRule(_localctx, 922, RULE_wsNumCodepoints);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7335);
			match(OPEN_PAR_SYMBOL);
			setState(7336);
			real_ulong_number();
			setState(7337);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeDatetimePrecisionContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TypeDatetimePrecisionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeDatetimePrecision; }
	}

	public final TypeDatetimePrecisionContext typeDatetimePrecision() throws RecognitionException {
		TypeDatetimePrecisionContext _localctx = new TypeDatetimePrecisionContext(_ctx, getState());
		enterRule(_localctx, 924, RULE_typeDatetimePrecision);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7339);
			match(OPEN_PAR_SYMBOL);
			setState(7340);
			match(INT_NUMBER);
			setState(7341);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetNameContext extends ParserRuleContext {
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public CharsetNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetName; }
	}

	public final CharsetNameContext charsetName() throws RecognitionException {
		CharsetNameContext _localctx = new CharsetNameContext(_ctx, getState());
		enterRule(_localctx, 926, RULE_charsetName);
		try {
			setState(7347);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,966,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7343);
				textOrIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7344);
				match(BINARY_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7345);
				if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
				setState(7346);
				match(DEFAULT_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollationNameContext extends ParserRuleContext {
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public CollationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collationName; }
	}

	public final CollationNameContext collationName() throws RecognitionException {
		CollationNameContext _localctx = new CollationNameContext(_ctx, getState());
		enterRule(_localctx, 928, RULE_collationName);
		try {
			setState(7354);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,967,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7349);
				textOrIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7350);
				if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
				setState(7351);
				match(DEFAULT_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7352);
				if (!(serverVersion >= 80018)) throw new FailedPredicateException(this, "serverVersion >= 80018");
				setState(7353);
				match(BINARY_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableOptionsContext extends ParserRuleContext {
		public List<CreateTableOptionContext> createTableOption() {
			return getRuleContexts(CreateTableOptionContext.class);
		}
		public CreateTableOptionContext createTableOption(int i) {
			return getRuleContext(CreateTableOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public CreateTableOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTableOptions; }
	}

	public final CreateTableOptionsContext createTableOptions() throws RecognitionException {
		CreateTableOptionsContext _localctx = new CreateTableOptionsContext(_ctx, getState());
		enterRule(_localctx, 930, RULE_createTableOptions);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7356);
			createTableOption();
			setState(7363);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,969,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(7358);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,968,_ctx) ) {
					case 1:
						{
						setState(7357);
						match(COMMA_SYMBOL);
						}
						break;
					}
					setState(7360);
					createTableOption();
					}
					} 
				}
				setState(7365);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,969,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableOptionsSpaceSeparatedContext extends ParserRuleContext {
		public List<CreateTableOptionContext> createTableOption() {
			return getRuleContexts(CreateTableOptionContext.class);
		}
		public CreateTableOptionContext createTableOption(int i) {
			return getRuleContext(CreateTableOptionContext.class,i);
		}
		public CreateTableOptionsSpaceSeparatedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTableOptionsSpaceSeparated; }
	}

	public final CreateTableOptionsSpaceSeparatedContext createTableOptionsSpaceSeparated() throws RecognitionException {
		CreateTableOptionsSpaceSeparatedContext _localctx = new CreateTableOptionsSpaceSeparatedContext(_ctx, getState());
		enterRule(_localctx, 932, RULE_createTableOptionsSpaceSeparated);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7367); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(7366);
					createTableOption();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7369); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,970,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableOptionContext extends ParserRuleContext {
		public Token option;
		public Token format;
		public Token method;
		public EngineRefContext engineRef() {
			return getRuleContext(EngineRefContext.class,0);
		}
		public TerminalNode ENGINE_SYMBOL() { return getToken(MySQLParser.ENGINE_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TerminalNode SECONDARY_ENGINE_SYMBOL() { return getToken(MySQLParser.SECONDARY_ENGINE_SYMBOL, 0); }
		public TerminalNode NULL_SYMBOL() { return getToken(MySQLParser.NULL_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public Ulonglong_numberContext ulonglong_number() {
			return getRuleContext(Ulonglong_numberContext.class,0);
		}
		public TerminalNode MAX_ROWS_SYMBOL() { return getToken(MySQLParser.MAX_ROWS_SYMBOL, 0); }
		public TerminalNode MIN_ROWS_SYMBOL() { return getToken(MySQLParser.MIN_ROWS_SYMBOL, 0); }
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public TerminalNode AVG_ROW_LENGTH_SYMBOL() { return getToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public TerminalNode COMMENT_SYMBOL() { return getToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public TerminalNode COMPRESSION_SYMBOL() { return getToken(MySQLParser.COMPRESSION_SYMBOL, 0); }
		public TerminalNode ENCRYPTION_SYMBOL() { return getToken(MySQLParser.ENCRYPTION_SYMBOL, 0); }
		public TerminalNode AUTO_INCREMENT_SYMBOL() { return getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0); }
		public TernaryOptionContext ternaryOption() {
			return getRuleContext(TernaryOptionContext.class,0);
		}
		public TerminalNode PACK_KEYS_SYMBOL() { return getToken(MySQLParser.PACK_KEYS_SYMBOL, 0); }
		public TerminalNode STATS_AUTO_RECALC_SYMBOL() { return getToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0); }
		public TerminalNode STATS_PERSISTENT_SYMBOL() { return getToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0); }
		public TerminalNode STATS_SAMPLE_PAGES_SYMBOL() { return getToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0); }
		public TerminalNode CHECKSUM_SYMBOL() { return getToken(MySQLParser.CHECKSUM_SYMBOL, 0); }
		public TerminalNode TABLE_CHECKSUM_SYMBOL() { return getToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0); }
		public TerminalNode DELAY_KEY_WRITE_SYMBOL() { return getToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0); }
		public TerminalNode ROW_FORMAT_SYMBOL() { return getToken(MySQLParser.ROW_FORMAT_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode DYNAMIC_SYMBOL() { return getToken(MySQLParser.DYNAMIC_SYMBOL, 0); }
		public TerminalNode FIXED_SYMBOL() { return getToken(MySQLParser.FIXED_SYMBOL, 0); }
		public TerminalNode COMPRESSED_SYMBOL() { return getToken(MySQLParser.COMPRESSED_SYMBOL, 0); }
		public TerminalNode REDUNDANT_SYMBOL() { return getToken(MySQLParser.REDUNDANT_SYMBOL, 0); }
		public TerminalNode COMPACT_SYMBOL() { return getToken(MySQLParser.COMPACT_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TableRefListContext tableRefList() {
			return getRuleContext(TableRefListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode UNION_SYMBOL() { return getToken(MySQLParser.UNION_SYMBOL, 0); }
		public DefaultCharsetContext defaultCharset() {
			return getRuleContext(DefaultCharsetContext.class,0);
		}
		public DefaultCollationContext defaultCollation() {
			return getRuleContext(DefaultCollationContext.class,0);
		}
		public TerminalNode INSERT_METHOD_SYMBOL() { return getToken(MySQLParser.INSERT_METHOD_SYMBOL, 0); }
		public TerminalNode NO_SYMBOL() { return getToken(MySQLParser.NO_SYMBOL, 0); }
		public TerminalNode FIRST_SYMBOL() { return getToken(MySQLParser.FIRST_SYMBOL, 0); }
		public TerminalNode LAST_SYMBOL() { return getToken(MySQLParser.LAST_SYMBOL, 0); }
		public TerminalNode DIRECTORY_SYMBOL() { return getToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
		public TerminalNode DATA_SYMBOL() { return getToken(MySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode INDEX_SYMBOL() { return getToken(MySQLParser.INDEX_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TerminalNode STORAGE_SYMBOL() { return getToken(MySQLParser.STORAGE_SYMBOL, 0); }
		public TerminalNode DISK_SYMBOL() { return getToken(MySQLParser.DISK_SYMBOL, 0); }
		public TerminalNode MEMORY_SYMBOL() { return getToken(MySQLParser.MEMORY_SYMBOL, 0); }
		public TerminalNode CONNECTION_SYMBOL() { return getToken(MySQLParser.CONNECTION_SYMBOL, 0); }
		public TerminalNode KEY_BLOCK_SIZE_SYMBOL() { return getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0); }
		public CreateTableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTableOption; }
	}

	public final CreateTableOptionContext createTableOption() throws RecognitionException {
		CreateTableOptionContext _localctx = new CreateTableOptionContext(_ctx, getState());
		enterRule(_localctx, 934, RULE_createTableOption);
		int _la;
		try {
			setState(7500);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,995,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7371);
				((CreateTableOptionContext)_localctx).option = match(ENGINE_SYMBOL);
				setState(7373);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,971,_ctx) ) {
				case 1:
					{
					setState(7372);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7375);
				engineRef();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7376);
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				setState(7377);
				((CreateTableOptionContext)_localctx).option = match(SECONDARY_ENGINE_SYMBOL);
				setState(7379);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,972,_ctx) ) {
				case 1:
					{
					setState(7378);
					equal();
					}
					break;
				}
				setState(7383);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,973,_ctx) ) {
				case 1:
					{
					setState(7381);
					match(NULL_SYMBOL);
					}
					break;
				case 2:
					{
					setState(7382);
					textOrIdentifier();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7385);
				((CreateTableOptionContext)_localctx).option = match(MAX_ROWS_SYMBOL);
				setState(7387);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7386);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7389);
				ulonglong_number();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7390);
				((CreateTableOptionContext)_localctx).option = match(MIN_ROWS_SYMBOL);
				setState(7392);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7391);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7394);
				ulonglong_number();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7395);
				((CreateTableOptionContext)_localctx).option = match(AVG_ROW_LENGTH_SYMBOL);
				setState(7397);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7396);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7399);
				ulong_number();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7400);
				((CreateTableOptionContext)_localctx).option = match(PASSWORD_SYMBOL);
				setState(7402);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,977,_ctx) ) {
				case 1:
					{
					setState(7401);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7404);
				textStringLiteral();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7405);
				((CreateTableOptionContext)_localctx).option = match(COMMENT_SYMBOL);
				setState(7407);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,978,_ctx) ) {
				case 1:
					{
					setState(7406);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7409);
				textStringLiteral();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7410);
				if (!(serverVersion >= 50708)) throw new FailedPredicateException(this, "serverVersion >= 50708");
				setState(7411);
				((CreateTableOptionContext)_localctx).option = match(COMPRESSION_SYMBOL);
				setState(7413);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,979,_ctx) ) {
				case 1:
					{
					setState(7412);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7415);
				textString();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7416);
				if (!(serverVersion >= 50711)) throw new FailedPredicateException(this, "serverVersion >= 50711");
				setState(7417);
				((CreateTableOptionContext)_localctx).option = match(ENCRYPTION_SYMBOL);
				setState(7419);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,980,_ctx) ) {
				case 1:
					{
					setState(7418);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7421);
				textString();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(7422);
				((CreateTableOptionContext)_localctx).option = match(AUTO_INCREMENT_SYMBOL);
				setState(7424);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7423);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7426);
				ulonglong_number();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(7427);
				((CreateTableOptionContext)_localctx).option = match(PACK_KEYS_SYMBOL);
				setState(7429);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7428);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7431);
				ternaryOption();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(7432);
				((CreateTableOptionContext)_localctx).option = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 324)) & ~0x3f) == 0 && ((1L << (_la - 324)) & ((1L << (STATS_AUTO_RECALC_SYMBOL - 324)) | (1L << (STATS_PERSISTENT_SYMBOL - 324)) | (1L << (STATS_SAMPLE_PAGES_SYMBOL - 324)))) != 0)) ) {
					((CreateTableOptionContext)_localctx).option = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7434);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7433);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7436);
				ternaryOption();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(7437);
				((CreateTableOptionContext)_localctx).option = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CHECKSUM_SYMBOL || _la==TABLE_CHECKSUM_SYMBOL) ) {
					((CreateTableOptionContext)_localctx).option = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7439);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7438);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7441);
				ulong_number();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(7442);
				((CreateTableOptionContext)_localctx).option = match(DELAY_KEY_WRITE_SYMBOL);
				setState(7444);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7443);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7446);
				ulong_number();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(7447);
				((CreateTableOptionContext)_localctx).option = match(ROW_FORMAT_SYMBOL);
				setState(7449);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7448);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7451);
				((CreateTableOptionContext)_localctx).format = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & ((1L << (COMPACT_SYMBOL - 92)) | (1L << (COMPRESSED_SYMBOL - 92)) | (1L << (DYNAMIC_SYMBOL - 92)) | (1L << (FIXED_SYMBOL - 92)))) != 0) || _la==REDUNDANT_SYMBOL || _la==DEFAULT_SYMBOL) ) {
					((CreateTableOptionContext)_localctx).format = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(7452);
				((CreateTableOptionContext)_localctx).option = match(UNION_SYMBOL);
				setState(7454);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7453);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7456);
				match(OPEN_PAR_SYMBOL);
				setState(7457);
				tableRefList();
				setState(7458);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(7460);
				defaultCharset();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(7461);
				defaultCollation();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(7462);
				((CreateTableOptionContext)_localctx).option = match(INSERT_METHOD_SYMBOL);
				setState(7464);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7463);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7466);
				((CreateTableOptionContext)_localctx).method = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_SYMBOL || _la==FIRST_SYMBOL || _la==LAST_SYMBOL) ) {
					((CreateTableOptionContext)_localctx).method = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(7467);
				((CreateTableOptionContext)_localctx).option = match(DATA_SYMBOL);
				setState(7468);
				match(DIRECTORY_SYMBOL);
				setState(7470);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,989,_ctx) ) {
				case 1:
					{
					setState(7469);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7472);
				textString();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(7473);
				((CreateTableOptionContext)_localctx).option = match(INDEX_SYMBOL);
				setState(7474);
				match(DIRECTORY_SYMBOL);
				setState(7476);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,990,_ctx) ) {
				case 1:
					{
					setState(7475);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7478);
				textString();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(7479);
				((CreateTableOptionContext)_localctx).option = match(TABLESPACE_SYMBOL);
				setState(7485);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,992,_ctx) ) {
				case 1:
					{
					setState(7480);
					if (!(serverVersion >= 50707)) throw new FailedPredicateException(this, "serverVersion >= 50707");
					setState(7482);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,991,_ctx) ) {
					case 1:
						{
						setState(7481);
						match(EQUAL_OPERATOR);
						}
						break;
					}
					}
					break;
				case 2:
					{
					}
					break;
				}
				setState(7487);
				identifier();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(7488);
				((CreateTableOptionContext)_localctx).option = match(STORAGE_SYMBOL);
				setState(7489);
				_la = _input.LA(1);
				if ( !(_la==DISK_SYMBOL || _la==MEMORY_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(7490);
				((CreateTableOptionContext)_localctx).option = match(CONNECTION_SYMBOL);
				setState(7492);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,993,_ctx) ) {
				case 1:
					{
					setState(7491);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7494);
				textString();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(7495);
				((CreateTableOptionContext)_localctx).option = match(KEY_BLOCK_SIZE_SYMBOL);
				setState(7497);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7496);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7499);
				ulong_number();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TernaryOptionContext extends ParserRuleContext {
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TernaryOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ternaryOption; }
	}

	public final TernaryOptionContext ternaryOption() throws RecognitionException {
		TernaryOptionContext _localctx = new TernaryOptionContext(_ctx, getState());
		enterRule(_localctx, 936, RULE_ternaryOption);
		try {
			setState(7504);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case HEX_NUMBER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
				enterOuterAlt(_localctx, 1);
				{
				setState(7502);
				ulong_number();
				}
				break;
			case DEFAULT_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7503);
				match(DEFAULT_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultCollationContext extends ParserRuleContext {
		public TerminalNode COLLATE_SYMBOL() { return getToken(MySQLParser.COLLATE_SYMBOL, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public DefaultCollationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultCollation; }
	}

	public final DefaultCollationContext defaultCollation() throws RecognitionException {
		DefaultCollationContext _localctx = new DefaultCollationContext(_ctx, getState());
		enterRule(_localctx, 938, RULE_defaultCollation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7507);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT_SYMBOL) {
				{
				setState(7506);
				match(DEFAULT_SYMBOL);
				}
			}

			setState(7509);
			match(COLLATE_SYMBOL);
			setState(7511);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,998,_ctx) ) {
			case 1:
				{
				setState(7510);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(7513);
			collationName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultEncryptionContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION_SYMBOL() { return getToken(MySQLParser.ENCRYPTION_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public DefaultEncryptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultEncryption; }
	}

	public final DefaultEncryptionContext defaultEncryption() throws RecognitionException {
		DefaultEncryptionContext _localctx = new DefaultEncryptionContext(_ctx, getState());
		enterRule(_localctx, 940, RULE_defaultEncryption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7516);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT_SYMBOL) {
				{
				setState(7515);
				match(DEFAULT_SYMBOL);
				}
			}

			setState(7518);
			match(ENCRYPTION_SYMBOL);
			setState(7520);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1000,_ctx) ) {
			case 1:
				{
				setState(7519);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(7522);
			textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultCharsetContext extends ParserRuleContext {
		public CharsetContext charset() {
			return getRuleContext(CharsetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public DefaultCharsetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultCharset; }
	}

	public final DefaultCharsetContext defaultCharset() throws RecognitionException {
		DefaultCharsetContext _localctx = new DefaultCharsetContext(_ctx, getState());
		enterRule(_localctx, 942, RULE_defaultCharset);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7525);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT_SYMBOL) {
				{
				setState(7524);
				match(DEFAULT_SYMBOL);
				}
			}

			setState(7527);
			charset();
			setState(7529);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1002,_ctx) ) {
			case 1:
				{
				setState(7528);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(7531);
			charsetName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionClauseContext extends ParserRuleContext {
		public TerminalNode PARTITION_SYMBOL() { return getToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public PartitionTypeDefContext partitionTypeDef() {
			return getRuleContext(PartitionTypeDefContext.class,0);
		}
		public TerminalNode PARTITIONS_SYMBOL() { return getToken(MySQLParser.PARTITIONS_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public SubPartitionsContext subPartitions() {
			return getRuleContext(SubPartitionsContext.class,0);
		}
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public PartitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionClause; }
	}

	public final PartitionClauseContext partitionClause() throws RecognitionException {
		PartitionClauseContext _localctx = new PartitionClauseContext(_ctx, getState());
		enterRule(_localctx, 944, RULE_partitionClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7533);
			match(PARTITION_SYMBOL);
			setState(7534);
			match(BY_SYMBOL);
			setState(7535);
			partitionTypeDef();
			setState(7538);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1003,_ctx) ) {
			case 1:
				{
				setState(7536);
				match(PARTITIONS_SYMBOL);
				setState(7537);
				real_ulong_number();
				}
				break;
			}
			setState(7541);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1004,_ctx) ) {
			case 1:
				{
				setState(7540);
				subPartitions();
				}
				break;
			}
			setState(7544);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1005,_ctx) ) {
			case 1:
				{
				setState(7543);
				partitionDefinitions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionTypeDefContext extends ParserRuleContext {
		public PartitionTypeDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionTypeDef; }
	 
		public PartitionTypeDefContext() { }
		public void copyFrom(PartitionTypeDefContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PartitionDefRangeListContext extends PartitionTypeDefContext {
		public TerminalNode RANGE_SYMBOL() { return getToken(MySQLParser.RANGE_SYMBOL, 0); }
		public TerminalNode LIST_SYMBOL() { return getToken(MySQLParser.LIST_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return getRuleContext(BitExprContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode COLUMNS_SYMBOL() { return getToken(MySQLParser.COLUMNS_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public PartitionDefRangeListContext(PartitionTypeDefContext ctx) { copyFrom(ctx); }
	}
	public static class PartitionDefKeyContext extends PartitionTypeDefContext {
		public TerminalNode KEY_SYMBOL() { return getToken(MySQLParser.KEY_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode LINEAR_SYMBOL() { return getToken(MySQLParser.LINEAR_SYMBOL, 0); }
		public PartitionKeyAlgorithmContext partitionKeyAlgorithm() {
			return getRuleContext(PartitionKeyAlgorithmContext.class,0);
		}
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public PartitionDefKeyContext(PartitionTypeDefContext ctx) { copyFrom(ctx); }
	}
	public static class PartitionDefHashContext extends PartitionTypeDefContext {
		public TerminalNode HASH_SYMBOL() { return getToken(MySQLParser.HASH_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return getRuleContext(BitExprContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode LINEAR_SYMBOL() { return getToken(MySQLParser.LINEAR_SYMBOL, 0); }
		public PartitionDefHashContext(PartitionTypeDefContext ctx) { copyFrom(ctx); }
	}

	public final PartitionTypeDefContext partitionTypeDef() throws RecognitionException {
		PartitionTypeDefContext _localctx = new PartitionTypeDefContext(_ctx, getState());
		enterRule(_localctx, 946, RULE_partitionTypeDef);
		int _la;
		try {
			setState(7579);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1012,_ctx) ) {
			case 1:
				_localctx = new PartitionDefKeyContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(7547);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR_SYMBOL) {
					{
					setState(7546);
					match(LINEAR_SYMBOL);
					}
				}

				setState(7549);
				match(KEY_SYMBOL);
				setState(7551);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1007,_ctx) ) {
				case 1:
					{
					setState(7550);
					partitionKeyAlgorithm();
					}
					break;
				}
				setState(7553);
				match(OPEN_PAR_SYMBOL);
				setState(7555);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1008,_ctx) ) {
				case 1:
					{
					setState(7554);
					identifierList();
					}
					break;
				}
				setState(7557);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				_localctx = new PartitionDefHashContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(7559);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR_SYMBOL) {
					{
					setState(7558);
					match(LINEAR_SYMBOL);
					}
				}

				setState(7561);
				match(HASH_SYMBOL);
				setState(7562);
				match(OPEN_PAR_SYMBOL);
				setState(7563);
				bitExpr(0);
				setState(7564);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 3:
				_localctx = new PartitionDefRangeListContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(7566);
				_la = _input.LA(1);
				if ( !(_la==LIST_SYMBOL || _la==RANGE_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7577);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPEN_PAR_SYMBOL:
					{
					setState(7567);
					match(OPEN_PAR_SYMBOL);
					setState(7568);
					bitExpr(0);
					setState(7569);
					match(CLOSE_PAR_SYMBOL);
					}
					break;
				case COLUMNS_SYMBOL:
					{
					setState(7571);
					match(COLUMNS_SYMBOL);
					setState(7572);
					match(OPEN_PAR_SYMBOL);
					setState(7574);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1010,_ctx) ) {
					case 1:
						{
						setState(7573);
						identifierList();
						}
						break;
					}
					setState(7576);
					match(CLOSE_PAR_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubPartitionsContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION_SYMBOL() { return getToken(MySQLParser.SUBPARTITION_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public TerminalNode HASH_SYMBOL() { return getToken(MySQLParser.HASH_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return getRuleContext(BitExprContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode KEY_SYMBOL() { return getToken(MySQLParser.KEY_SYMBOL, 0); }
		public IdentifierListWithParenthesesContext identifierListWithParentheses() {
			return getRuleContext(IdentifierListWithParenthesesContext.class,0);
		}
		public TerminalNode LINEAR_SYMBOL() { return getToken(MySQLParser.LINEAR_SYMBOL, 0); }
		public TerminalNode SUBPARTITIONS_SYMBOL() { return getToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public PartitionKeyAlgorithmContext partitionKeyAlgorithm() {
			return getRuleContext(PartitionKeyAlgorithmContext.class,0);
		}
		public SubPartitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subPartitions; }
	}

	public final SubPartitionsContext subPartitions() throws RecognitionException {
		SubPartitionsContext _localctx = new SubPartitionsContext(_ctx, getState());
		enterRule(_localctx, 948, RULE_subPartitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7581);
			match(SUBPARTITION_SYMBOL);
			setState(7582);
			match(BY_SYMBOL);
			setState(7584);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LINEAR_SYMBOL) {
				{
				setState(7583);
				match(LINEAR_SYMBOL);
				}
			}

			setState(7596);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case HASH_SYMBOL:
				{
				setState(7586);
				match(HASH_SYMBOL);
				setState(7587);
				match(OPEN_PAR_SYMBOL);
				setState(7588);
				bitExpr(0);
				setState(7589);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case KEY_SYMBOL:
				{
				setState(7591);
				match(KEY_SYMBOL);
				setState(7593);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1014,_ctx) ) {
				case 1:
					{
					setState(7592);
					partitionKeyAlgorithm();
					}
					break;
				}
				setState(7595);
				identifierListWithParentheses();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(7600);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1016,_ctx) ) {
			case 1:
				{
				setState(7598);
				match(SUBPARTITIONS_SYMBOL);
				setState(7599);
				real_ulong_number();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionKeyAlgorithmContext extends ParserRuleContext {
		public TerminalNode ALGORITHM_SYMBOL() { return getToken(MySQLParser.ALGORITHM_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public PartitionKeyAlgorithmContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionKeyAlgorithm; }
	}

	public final PartitionKeyAlgorithmContext partitionKeyAlgorithm() throws RecognitionException {
		PartitionKeyAlgorithmContext _localctx = new PartitionKeyAlgorithmContext(_ctx, getState());
		enterRule(_localctx, 950, RULE_partitionKeyAlgorithm);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7602);
			if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
			setState(7603);
			match(ALGORITHM_SYMBOL);
			setState(7604);
			match(EQUAL_OPERATOR);
			setState(7605);
			real_ulong_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinitionsContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<PartitionDefinitionContext> partitionDefinition() {
			return getRuleContexts(PartitionDefinitionContext.class);
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return getRuleContext(PartitionDefinitionContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public PartitionDefinitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinitions; }
	}

	public final PartitionDefinitionsContext partitionDefinitions() throws RecognitionException {
		PartitionDefinitionsContext _localctx = new PartitionDefinitionsContext(_ctx, getState());
		enterRule(_localctx, 952, RULE_partitionDefinitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7607);
			match(OPEN_PAR_SYMBOL);
			setState(7608);
			partitionDefinition();
			setState(7613);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(7609);
				match(COMMA_SYMBOL);
				setState(7610);
				partitionDefinition();
				}
				}
				setState(7615);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7616);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinitionContext extends ParserRuleContext {
		public TerminalNode PARTITION_SYMBOL() { return getToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode VALUES_SYMBOL() { return getToken(MySQLParser.VALUES_SYMBOL, 0); }
		public TerminalNode LESS_SYMBOL() { return getToken(MySQLParser.LESS_SYMBOL, 0); }
		public TerminalNode THAN_SYMBOL() { return getToken(MySQLParser.THAN_SYMBOL, 0); }
		public TerminalNode IN_SYMBOL() { return getToken(MySQLParser.IN_SYMBOL, 0); }
		public PartitionValuesInContext partitionValuesIn() {
			return getRuleContext(PartitionValuesInContext.class,0);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public PartitionValueItemListParenContext partitionValueItemListParen() {
			return getRuleContext(PartitionValueItemListParenContext.class,0);
		}
		public TerminalNode MAXVALUE_SYMBOL() { return getToken(MySQLParser.MAXVALUE_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public PartitionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinition; }
	}

	public final PartitionDefinitionContext partitionDefinition() throws RecognitionException {
		PartitionDefinitionContext _localctx = new PartitionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 954, RULE_partitionDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7618);
			match(PARTITION_SYMBOL);
			setState(7619);
			identifier();
			setState(7630);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1019,_ctx) ) {
			case 1:
				{
				setState(7620);
				match(VALUES_SYMBOL);
				setState(7621);
				match(LESS_SYMBOL);
				setState(7622);
				match(THAN_SYMBOL);
				setState(7625);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPEN_PAR_SYMBOL:
					{
					setState(7623);
					partitionValueItemListParen();
					}
					break;
				case MAXVALUE_SYMBOL:
					{
					setState(7624);
					match(MAXVALUE_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				setState(7627);
				match(VALUES_SYMBOL);
				setState(7628);
				match(IN_SYMBOL);
				setState(7629);
				partitionValuesIn();
				}
				break;
			}
			setState(7635);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMENT_SYMBOL || _la==DATA_SYMBOL || _la==ENGINE_SYMBOL || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (MAX_ROWS_SYMBOL - 184)) | (1L << (MIN_ROWS_SYMBOL - 184)) | (1L << (NODEGROUP_SYMBOL - 184)))) != 0) || _la==STORAGE_SYMBOL || _la==TABLESPACE_SYMBOL || _la==INDEX_SYMBOL) {
				{
				{
				setState(7632);
				partitionOption();
				}
				}
				setState(7637);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7649);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				setState(7638);
				match(OPEN_PAR_SYMBOL);
				setState(7639);
				subpartitionDefinition();
				setState(7644);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(7640);
					match(COMMA_SYMBOL);
					setState(7641);
					subpartitionDefinition();
					}
					}
					setState(7646);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7647);
				match(CLOSE_PAR_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionValuesInContext extends ParserRuleContext {
		public List<PartitionValueItemListParenContext> partitionValueItemListParen() {
			return getRuleContexts(PartitionValueItemListParenContext.class);
		}
		public PartitionValueItemListParenContext partitionValueItemListParen(int i) {
			return getRuleContext(PartitionValueItemListParenContext.class,i);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public PartitionValuesInContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionValuesIn; }
	}

	public final PartitionValuesInContext partitionValuesIn() throws RecognitionException {
		PartitionValuesInContext _localctx = new PartitionValuesInContext(_ctx, getState());
		enterRule(_localctx, 956, RULE_partitionValuesIn);
		int _la;
		try {
			setState(7663);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1024,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7651);
				partitionValueItemListParen();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7652);
				match(OPEN_PAR_SYMBOL);
				setState(7653);
				partitionValueItemListParen();
				setState(7658);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(7654);
					match(COMMA_SYMBOL);
					setState(7655);
					partitionValueItemListParen();
					}
					}
					setState(7660);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7661);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionOptionContext extends ParserRuleContext {
		public Token option;
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public EngineRefContext engineRef() {
			return getRuleContext(EngineRefContext.class,0);
		}
		public TerminalNode ENGINE_SYMBOL() { return getToken(MySQLParser.ENGINE_SYMBOL, 0); }
		public TerminalNode STORAGE_SYMBOL() { return getToken(MySQLParser.STORAGE_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public TerminalNode NODEGROUP_SYMBOL() { return getToken(MySQLParser.NODEGROUP_SYMBOL, 0); }
		public TerminalNode MAX_ROWS_SYMBOL() { return getToken(MySQLParser.MAX_ROWS_SYMBOL, 0); }
		public TerminalNode MIN_ROWS_SYMBOL() { return getToken(MySQLParser.MIN_ROWS_SYMBOL, 0); }
		public TerminalNode DIRECTORY_SYMBOL() { return getToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode DATA_SYMBOL() { return getToken(MySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode INDEX_SYMBOL() { return getToken(MySQLParser.INDEX_SYMBOL, 0); }
		public TerminalNode COMMENT_SYMBOL() { return getToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public PartitionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionOption; }
	}

	public final PartitionOptionContext partitionOption() throws RecognitionException {
		PartitionOptionContext _localctx = new PartitionOptionContext(_ctx, getState());
		enterRule(_localctx, 958, RULE_partitionOption);
		int _la;
		try {
			setState(7699);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TABLESPACE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7665);
				((PartitionOptionContext)_localctx).option = match(TABLESPACE_SYMBOL);
				setState(7667);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1025,_ctx) ) {
				case 1:
					{
					setState(7666);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7669);
				identifier();
				}
				break;
			case ENGINE_SYMBOL:
			case STORAGE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7671);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE_SYMBOL) {
					{
					setState(7670);
					match(STORAGE_SYMBOL);
					}
				}

				setState(7673);
				((PartitionOptionContext)_localctx).option = match(ENGINE_SYMBOL);
				setState(7675);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1027,_ctx) ) {
				case 1:
					{
					setState(7674);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7677);
				engineRef();
				}
				break;
			case NODEGROUP_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(7678);
				((PartitionOptionContext)_localctx).option = match(NODEGROUP_SYMBOL);
				setState(7680);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7679);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7682);
				real_ulong_number();
				}
				break;
			case MAX_ROWS_SYMBOL:
			case MIN_ROWS_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(7683);
				((PartitionOptionContext)_localctx).option = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MAX_ROWS_SYMBOL || _la==MIN_ROWS_SYMBOL) ) {
					((PartitionOptionContext)_localctx).option = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7685);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7684);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7687);
				real_ulong_number();
				}
				break;
			case DATA_SYMBOL:
			case INDEX_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(7688);
				((PartitionOptionContext)_localctx).option = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATA_SYMBOL || _la==INDEX_SYMBOL) ) {
					((PartitionOptionContext)_localctx).option = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7689);
				match(DIRECTORY_SYMBOL);
				setState(7691);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1030,_ctx) ) {
				case 1:
					{
					setState(7690);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7693);
				textLiteral();
				}
				break;
			case COMMENT_SYMBOL:
				enterOuterAlt(_localctx, 6);
				{
				setState(7694);
				((PartitionOptionContext)_localctx).option = match(COMMENT_SYMBOL);
				setState(7696);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1031,_ctx) ) {
				case 1:
					{
					setState(7695);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7698);
				textLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubpartitionDefinitionContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION_SYMBOL() { return getToken(MySQLParser.SUBPARTITION_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public SubpartitionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartitionDefinition; }
	}

	public final SubpartitionDefinitionContext subpartitionDefinition() throws RecognitionException {
		SubpartitionDefinitionContext _localctx = new SubpartitionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 960, RULE_subpartitionDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7701);
			match(SUBPARTITION_SYMBOL);
			setState(7702);
			textOrIdentifier();
			setState(7706);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMENT_SYMBOL || _la==DATA_SYMBOL || _la==ENGINE_SYMBOL || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (MAX_ROWS_SYMBOL - 184)) | (1L << (MIN_ROWS_SYMBOL - 184)) | (1L << (NODEGROUP_SYMBOL - 184)))) != 0) || _la==STORAGE_SYMBOL || _la==TABLESPACE_SYMBOL || _la==INDEX_SYMBOL) {
				{
				{
				setState(7703);
				partitionOption();
				}
				}
				setState(7708);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionValueItemListParenContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<PartitionValueItemContext> partitionValueItem() {
			return getRuleContexts(PartitionValueItemContext.class);
		}
		public PartitionValueItemContext partitionValueItem(int i) {
			return getRuleContext(PartitionValueItemContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public PartitionValueItemListParenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionValueItemListParen; }
	}

	public final PartitionValueItemListParenContext partitionValueItemListParen() throws RecognitionException {
		PartitionValueItemListParenContext _localctx = new PartitionValueItemListParenContext(_ctx, getState());
		enterRule(_localctx, 962, RULE_partitionValueItemListParen);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7709);
			match(OPEN_PAR_SYMBOL);
			setState(7710);
			partitionValueItem();
			setState(7715);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(7711);
				match(COMMA_SYMBOL);
				setState(7712);
				partitionValueItem();
				}
				}
				setState(7717);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7718);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionValueItemContext extends ParserRuleContext {
		public BitExprContext bitExpr() {
			return getRuleContext(BitExprContext.class,0);
		}
		public TerminalNode MAXVALUE_SYMBOL() { return getToken(MySQLParser.MAXVALUE_SYMBOL, 0); }
		public PartitionValueItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionValueItem; }
	}

	public final PartitionValueItemContext partitionValueItem() throws RecognitionException {
		PartitionValueItemContext _localctx = new PartitionValueItemContext(_ctx, getState());
		enterRule(_localctx, 964, RULE_partitionValueItem);
		try {
			setState(7722);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1035,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7720);
				bitExpr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7721);
				match(MAXVALUE_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefinerClauseContext extends ParserRuleContext {
		public TerminalNode DEFINER_SYMBOL() { return getToken(MySQLParser.DEFINER_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public DefinerClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_definerClause; }
	}

	public final DefinerClauseContext definerClause() throws RecognitionException {
		DefinerClauseContext _localctx = new DefinerClauseContext(_ctx, getState());
		enterRule(_localctx, 966, RULE_definerClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7724);
			match(DEFINER_SYMBOL);
			setState(7725);
			match(EQUAL_OPERATOR);
			setState(7726);
			user();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfExistsContext extends ParserRuleContext {
		public TerminalNode IF_SYMBOL() { return getToken(MySQLParser.IF_SYMBOL, 0); }
		public TerminalNode EXISTS_SYMBOL() { return getToken(MySQLParser.EXISTS_SYMBOL, 0); }
		public IfExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifExists; }
	}

	public final IfExistsContext ifExists() throws RecognitionException {
		IfExistsContext _localctx = new IfExistsContext(_ctx, getState());
		enterRule(_localctx, 968, RULE_ifExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7728);
			match(IF_SYMBOL);
			setState(7729);
			match(EXISTS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfNotExistsContext extends ParserRuleContext {
		public TerminalNode IF_SYMBOL() { return getToken(MySQLParser.IF_SYMBOL, 0); }
		public NotRuleContext notRule() {
			return getRuleContext(NotRuleContext.class,0);
		}
		public TerminalNode EXISTS_SYMBOL() { return getToken(MySQLParser.EXISTS_SYMBOL, 0); }
		public IfNotExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifNotExists; }
	}

	public final IfNotExistsContext ifNotExists() throws RecognitionException {
		IfNotExistsContext _localctx = new IfNotExistsContext(_ctx, getState());
		enterRule(_localctx, 970, RULE_ifNotExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7731);
			match(IF_SYMBOL);
			setState(7732);
			notRule();
			setState(7733);
			match(EXISTS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureParameterContext extends ParserRuleContext {
		public Token type;
		public FunctionParameterContext functionParameter() {
			return getRuleContext(FunctionParameterContext.class,0);
		}
		public TerminalNode IN_SYMBOL() { return getToken(MySQLParser.IN_SYMBOL, 0); }
		public TerminalNode OUT_SYMBOL() { return getToken(MySQLParser.OUT_SYMBOL, 0); }
		public TerminalNode INOUT_SYMBOL() { return getToken(MySQLParser.INOUT_SYMBOL, 0); }
		public ProcedureParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureParameter; }
	}

	public final ProcedureParameterContext procedureParameter() throws RecognitionException {
		ProcedureParameterContext _localctx = new ProcedureParameterContext(_ctx, getState());
		enterRule(_localctx, 972, RULE_procedureParameter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7736);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1036,_ctx) ) {
			case 1:
				{
				setState(7735);
				((ProcedureParameterContext)_localctx).type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INOUT_SYMBOL || _la==IN_SYMBOL || _la==OUT_SYMBOL) ) {
					((ProcedureParameterContext)_localctx).type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(7738);
			functionParameter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionParameterContext extends ParserRuleContext {
		public ParameterNameContext parameterName() {
			return getRuleContext(ParameterNameContext.class,0);
		}
		public TypeWithOptCollateContext typeWithOptCollate() {
			return getRuleContext(TypeWithOptCollateContext.class,0);
		}
		public FunctionParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionParameter; }
	}

	public final FunctionParameterContext functionParameter() throws RecognitionException {
		FunctionParameterContext _localctx = new FunctionParameterContext(_ctx, getState());
		enterRule(_localctx, 974, RULE_functionParameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7740);
			parameterName();
			setState(7741);
			typeWithOptCollate();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollateContext extends ParserRuleContext {
		public TerminalNode COLLATE_SYMBOL() { return getToken(MySQLParser.COLLATE_SYMBOL, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public CollateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collate; }
	}

	public final CollateContext collate() throws RecognitionException {
		CollateContext _localctx = new CollateContext(_ctx, getState());
		enterRule(_localctx, 976, RULE_collate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7743);
			match(COLLATE_SYMBOL);
			setState(7744);
			collationName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeWithOptCollateContext extends ParserRuleContext {
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public CollateContext collate() {
			return getRuleContext(CollateContext.class,0);
		}
		public TypeWithOptCollateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeWithOptCollate; }
	}

	public final TypeWithOptCollateContext typeWithOptCollate() throws RecognitionException {
		TypeWithOptCollateContext _localctx = new TypeWithOptCollateContext(_ctx, getState());
		enterRule(_localctx, 978, RULE_typeWithOptCollate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7746);
			dataType();
			setState(7748);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1037,_ctx) ) {
			case 1:
				{
				setState(7747);
				collate();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SchemaIdentifierPairContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<SchemaRefContext> schemaRef() {
			return getRuleContexts(SchemaRefContext.class);
		}
		public SchemaRefContext schemaRef(int i) {
			return getRuleContext(SchemaRefContext.class,i);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SchemaIdentifierPairContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaIdentifierPair; }
	}

	public final SchemaIdentifierPairContext schemaIdentifierPair() throws RecognitionException {
		SchemaIdentifierPairContext _localctx = new SchemaIdentifierPairContext(_ctx, getState());
		enterRule(_localctx, 980, RULE_schemaIdentifierPair);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7750);
			match(OPEN_PAR_SYMBOL);
			setState(7751);
			schemaRef();
			setState(7752);
			match(COMMA_SYMBOL);
			setState(7753);
			schemaRef();
			setState(7754);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewRefListContext extends ParserRuleContext {
		public List<ViewRefContext> viewRef() {
			return getRuleContexts(ViewRefContext.class);
		}
		public ViewRefContext viewRef(int i) {
			return getRuleContext(ViewRefContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ViewRefListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewRefList; }
	}

	public final ViewRefListContext viewRefList() throws RecognitionException {
		ViewRefListContext _localctx = new ViewRefListContext(_ctx, getState());
		enterRule(_localctx, 982, RULE_viewRefList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7756);
			viewRef();
			setState(7761);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(7757);
				match(COMMA_SYMBOL);
				setState(7758);
				viewRef();
				}
				}
				setState(7763);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateListContext extends ParserRuleContext {
		public List<UpdateElementContext> updateElement() {
			return getRuleContexts(UpdateElementContext.class);
		}
		public UpdateElementContext updateElement(int i) {
			return getRuleContext(UpdateElementContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public UpdateListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateList; }
	}

	public final UpdateListContext updateList() throws RecognitionException {
		UpdateListContext _localctx = new UpdateListContext(_ctx, getState());
		enterRule(_localctx, 984, RULE_updateList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7764);
			updateElement();
			setState(7769);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1039,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(7765);
					match(COMMA_SYMBOL);
					setState(7766);
					updateElement();
					}
					} 
				}
				setState(7771);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1039,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateElementContext extends ParserRuleContext {
		public ColumnRefContext columnRef() {
			return getRuleContext(ColumnRefContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public UpdateElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateElement; }
	}

	public final UpdateElementContext updateElement() throws RecognitionException {
		UpdateElementContext _localctx = new UpdateElementContext(_ctx, getState());
		enterRule(_localctx, 986, RULE_updateElement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7772);
			columnRef();
			setState(7773);
			match(EQUAL_OPERATOR);
			setState(7776);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1040,_ctx) ) {
			case 1:
				{
				setState(7774);
				expr(0);
				}
				break;
			case 2:
				{
				setState(7775);
				match(DEFAULT_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetClauseContext extends ParserRuleContext {
		public CharsetContext charset() {
			return getRuleContext(CharsetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public CharsetClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetClause; }
	}

	public final CharsetClauseContext charsetClause() throws RecognitionException {
		CharsetClauseContext _localctx = new CharsetClauseContext(_ctx, getState());
		enterRule(_localctx, 988, RULE_charsetClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7778);
			charset();
			setState(7779);
			charsetName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FieldsClauseContext extends ParserRuleContext {
		public TerminalNode COLUMNS_SYMBOL() { return getToken(MySQLParser.COLUMNS_SYMBOL, 0); }
		public List<FieldTermContext> fieldTerm() {
			return getRuleContexts(FieldTermContext.class);
		}
		public FieldTermContext fieldTerm(int i) {
			return getRuleContext(FieldTermContext.class,i);
		}
		public FieldsClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldsClause; }
	}

	public final FieldsClauseContext fieldsClause() throws RecognitionException {
		FieldsClauseContext _localctx = new FieldsClauseContext(_ctx, getState());
		enterRule(_localctx, 990, RULE_fieldsClause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7781);
			match(COLUMNS_SYMBOL);
			setState(7783); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(7782);
					fieldTerm();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7785); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1041,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FieldTermContext extends ParserRuleContext {
		public TerminalNode TERMINATED_SYMBOL() { return getToken(MySQLParser.TERMINATED_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public TerminalNode ENCLOSED_SYMBOL() { return getToken(MySQLParser.ENCLOSED_SYMBOL, 0); }
		public TerminalNode OPTIONALLY_SYMBOL() { return getToken(MySQLParser.OPTIONALLY_SYMBOL, 0); }
		public TerminalNode ESCAPED_SYMBOL() { return getToken(MySQLParser.ESCAPED_SYMBOL, 0); }
		public FieldTermContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldTerm; }
	}

	public final FieldTermContext fieldTerm() throws RecognitionException {
		FieldTermContext _localctx = new FieldTermContext(_ctx, getState());
		enterRule(_localctx, 992, RULE_fieldTerm);
		int _la;
		try {
			setState(7799);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TERMINATED_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7787);
				match(TERMINATED_SYMBOL);
				setState(7788);
				match(BY_SYMBOL);
				setState(7789);
				textString();
				}
				break;
			case ENCLOSED_SYMBOL:
			case OPTIONALLY_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7791);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONALLY_SYMBOL) {
					{
					setState(7790);
					match(OPTIONALLY_SYMBOL);
					}
				}

				setState(7793);
				match(ENCLOSED_SYMBOL);
				setState(7794);
				match(BY_SYMBOL);
				setState(7795);
				textString();
				}
				break;
			case ESCAPED_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(7796);
				match(ESCAPED_SYMBOL);
				setState(7797);
				match(BY_SYMBOL);
				setState(7798);
				textString();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LinesClauseContext extends ParserRuleContext {
		public TerminalNode LINES_SYMBOL() { return getToken(MySQLParser.LINES_SYMBOL, 0); }
		public List<LineTermContext> lineTerm() {
			return getRuleContexts(LineTermContext.class);
		}
		public LineTermContext lineTerm(int i) {
			return getRuleContext(LineTermContext.class,i);
		}
		public LinesClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_linesClause; }
	}

	public final LinesClauseContext linesClause() throws RecognitionException {
		LinesClauseContext _localctx = new LinesClauseContext(_ctx, getState());
		enterRule(_localctx, 994, RULE_linesClause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7801);
			match(LINES_SYMBOL);
			setState(7803); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(7802);
					lineTerm();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7805); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1044,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LineTermContext extends ParserRuleContext {
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public TerminalNode TERMINATED_SYMBOL() { return getToken(MySQLParser.TERMINATED_SYMBOL, 0); }
		public TerminalNode STARTING_SYMBOL() { return getToken(MySQLParser.STARTING_SYMBOL, 0); }
		public LineTermContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lineTerm; }
	}

	public final LineTermContext lineTerm() throws RecognitionException {
		LineTermContext _localctx = new LineTermContext(_ctx, getState());
		enterRule(_localctx, 996, RULE_lineTerm);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7807);
			_la = _input.LA(1);
			if ( !(_la==STARTING_SYMBOL || _la==TERMINATED_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7808);
			match(BY_SYMBOL);
			setState(7809);
			textString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserListContext extends ParserRuleContext {
		public List<UserContext> user() {
			return getRuleContexts(UserContext.class);
		}
		public UserContext user(int i) {
			return getRuleContext(UserContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public UserListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userList; }
	}

	public final UserListContext userList() throws RecognitionException {
		UserListContext _localctx = new UserListContext(_ctx, getState());
		enterRule(_localctx, 998, RULE_userList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7811);
			user();
			setState(7816);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1045,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(7812);
					match(COMMA_SYMBOL);
					setState(7813);
					user();
					}
					} 
				}
				setState(7818);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1045,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUserListContext extends ParserRuleContext {
		public List<CreateUserEntryContext> createUserEntry() {
			return getRuleContexts(CreateUserEntryContext.class);
		}
		public CreateUserEntryContext createUserEntry(int i) {
			return getRuleContext(CreateUserEntryContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public CreateUserListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUserList; }
	}

	public final CreateUserListContext createUserList() throws RecognitionException {
		CreateUserListContext _localctx = new CreateUserListContext(_ctx, getState());
		enterRule(_localctx, 1000, RULE_createUserList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7819);
			createUserEntry();
			setState(7824);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1046,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(7820);
					match(COMMA_SYMBOL);
					setState(7821);
					createUserEntry();
					}
					} 
				}
				setState(7826);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1046,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUserListContext extends ParserRuleContext {
		public List<AlterUserEntryContext> alterUserEntry() {
			return getRuleContexts(AlterUserEntryContext.class);
		}
		public AlterUserEntryContext alterUserEntry(int i) {
			return getRuleContext(AlterUserEntryContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public AlterUserListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUserList; }
	}

	public final AlterUserListContext alterUserList() throws RecognitionException {
		AlterUserListContext _localctx = new AlterUserListContext(_ctx, getState());
		enterRule(_localctx, 1002, RULE_alterUserList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7827);
			alterUserEntry();
			setState(7832);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1047,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(7828);
					match(COMMA_SYMBOL);
					setState(7829);
					alterUserEntry();
					}
					} 
				}
				setState(7834);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1047,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUserEntryContext extends ParserRuleContext {
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public TerminalNode IDENTIFIED_SYMBOL() { return getToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public TerminalNode RANDOM_SYMBOL() { return getToken(MySQLParser.RANDOM_SYMBOL, 0); }
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public TextStringHashContext textStringHash() {
			return getRuleContext(TextStringHashContext.class,0);
		}
		public CreateUserEntryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUserEntry; }
	}

	public final CreateUserEntryContext createUserEntry() throws RecognitionException {
		CreateUserEntryContext _localctx = new CreateUserEntryContext(_ctx, getState());
		enterRule(_localctx, 1004, RULE_createUserEntry);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7835);
			user();
			setState(7862);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1052,_ctx) ) {
			case 1:
				{
				setState(7836);
				match(IDENTIFIED_SYMBOL);
				setState(7860);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1051,_ctx) ) {
				case 1:
					{
					setState(7837);
					match(BY_SYMBOL);
					setState(7840);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1048,_ctx) ) {
					case 1:
						{
						setState(7838);
						if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
						setState(7839);
						match(PASSWORD_SYMBOL);
						}
						break;
					}
					setState(7842);
					textString();
					}
					break;
				case 2:
					{
					setState(7843);
					match(WITH_SYMBOL);
					setState(7844);
					textOrIdentifier();
					setState(7850);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1049,_ctx) ) {
					case 1:
						{
						setState(7845);
						match(AS_SYMBOL);
						setState(7846);
						textStringHash();
						}
						break;
					case 2:
						{
						setState(7847);
						if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
						setState(7848);
						match(BY_SYMBOL);
						setState(7849);
						textString();
						}
						break;
					}
					}
					break;
				case 3:
					{
					setState(7852);
					if (!(serverVersion >= 80018)) throw new FailedPredicateException(this, "serverVersion >= 80018");
					setState(7855);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WITH_SYMBOL) {
						{
						setState(7853);
						match(WITH_SYMBOL);
						setState(7854);
						textOrIdentifier();
						}
					}

					setState(7857);
					match(BY_SYMBOL);
					setState(7858);
					match(RANDOM_SYMBOL);
					setState(7859);
					match(PASSWORD_SYMBOL);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUserEntryContext extends ParserRuleContext {
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public TerminalNode IDENTIFIED_SYMBOL() { return getToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public List<TextStringContext> textString() {
			return getRuleContexts(TextStringContext.class);
		}
		public TextStringContext textString(int i) {
			return getRuleContext(TextStringContext.class,i);
		}
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public DiscardOldPasswordContext discardOldPassword() {
			return getRuleContext(DiscardOldPasswordContext.class,0);
		}
		public TerminalNode REPLACE_SYMBOL() { return getToken(MySQLParser.REPLACE_SYMBOL, 0); }
		public RetainCurrentPasswordContext retainCurrentPassword() {
			return getRuleContext(RetainCurrentPasswordContext.class,0);
		}
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public TextStringHashContext textStringHash() {
			return getRuleContext(TextStringHashContext.class,0);
		}
		public AlterUserEntryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUserEntry; }
	}

	public final AlterUserEntryContext alterUserEntry() throws RecognitionException {
		AlterUserEntryContext _localctx = new AlterUserEntryContext(_ctx, getState());
		enterRule(_localctx, 1006, RULE_alterUserEntry);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7864);
			user();
			setState(7893);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1060,_ctx) ) {
			case 1:
				{
				setState(7865);
				match(IDENTIFIED_SYMBOL);
				setState(7888);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1058,_ctx) ) {
				case 1:
					{
					setState(7868);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WITH_SYMBOL) {
						{
						setState(7866);
						match(WITH_SYMBOL);
						setState(7867);
						textOrIdentifier();
						}
					}

					setState(7870);
					match(BY_SYMBOL);
					setState(7871);
					textString();
					setState(7874);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1054,_ctx) ) {
					case 1:
						{
						setState(7872);
						match(REPLACE_SYMBOL);
						setState(7873);
						textString();
						}
						break;
					}
					setState(7877);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1055,_ctx) ) {
					case 1:
						{
						setState(7876);
						retainCurrentPassword();
						}
						break;
					}
					}
					break;
				case 2:
					{
					setState(7879);
					match(WITH_SYMBOL);
					setState(7880);
					textOrIdentifier();
					setState(7886);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1057,_ctx) ) {
					case 1:
						{
						setState(7881);
						match(AS_SYMBOL);
						setState(7882);
						textStringHash();
						setState(7884);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,1056,_ctx) ) {
						case 1:
							{
							setState(7883);
							retainCurrentPassword();
							}
							break;
						}
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(7891);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1059,_ctx) ) {
				case 1:
					{
					setState(7890);
					discardOldPassword();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RetainCurrentPasswordContext extends ParserRuleContext {
		public TerminalNode RETAIN_SYMBOL() { return getToken(MySQLParser.RETAIN_SYMBOL, 0); }
		public TerminalNode CURRENT_SYMBOL() { return getToken(MySQLParser.CURRENT_SYMBOL, 0); }
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public RetainCurrentPasswordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_retainCurrentPassword; }
	}

	public final RetainCurrentPasswordContext retainCurrentPassword() throws RecognitionException {
		RetainCurrentPasswordContext _localctx = new RetainCurrentPasswordContext(_ctx, getState());
		enterRule(_localctx, 1008, RULE_retainCurrentPassword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7895);
			match(RETAIN_SYMBOL);
			setState(7896);
			match(CURRENT_SYMBOL);
			setState(7897);
			match(PASSWORD_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiscardOldPasswordContext extends ParserRuleContext {
		public TerminalNode DISCARD_SYMBOL() { return getToken(MySQLParser.DISCARD_SYMBOL, 0); }
		public TerminalNode OLD_SYMBOL() { return getToken(MySQLParser.OLD_SYMBOL, 0); }
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public DiscardOldPasswordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_discardOldPassword; }
	}

	public final DiscardOldPasswordContext discardOldPassword() throws RecognitionException {
		DiscardOldPasswordContext _localctx = new DiscardOldPasswordContext(_ctx, getState());
		enterRule(_localctx, 1010, RULE_discardOldPassword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7899);
			match(DISCARD_SYMBOL);
			setState(7900);
			match(OLD_SYMBOL);
			setState(7901);
			match(PASSWORD_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplacePasswordContext extends ParserRuleContext {
		public TerminalNode REPLACE_SYMBOL() { return getToken(MySQLParser.REPLACE_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public ReplacePasswordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replacePassword; }
	}

	public final ReplacePasswordContext replacePassword() throws RecognitionException {
		ReplacePasswordContext _localctx = new ReplacePasswordContext(_ctx, getState());
		enterRule(_localctx, 1012, RULE_replacePassword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7903);
			match(REPLACE_SYMBOL);
			setState(7904);
			textString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserIdentifierOrTextContext extends ParserRuleContext {
		public List<TextOrIdentifierContext> textOrIdentifier() {
			return getRuleContexts(TextOrIdentifierContext.class);
		}
		public TextOrIdentifierContext textOrIdentifier(int i) {
			return getRuleContext(TextOrIdentifierContext.class,i);
		}
		public TerminalNode AT_SIGN_SYMBOL() { return getToken(MySQLParser.AT_SIGN_SYMBOL, 0); }
		public TerminalNode AT_TEXT_SUFFIX() { return getToken(MySQLParser.AT_TEXT_SUFFIX, 0); }
		public UserIdentifierOrTextContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userIdentifierOrText; }
	}

	public final UserIdentifierOrTextContext userIdentifierOrText() throws RecognitionException {
		UserIdentifierOrTextContext _localctx = new UserIdentifierOrTextContext(_ctx, getState());
		enterRule(_localctx, 1014, RULE_userIdentifierOrText);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7906);
			textOrIdentifier();
			setState(7910);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1061,_ctx) ) {
			case 1:
				{
				setState(7907);
				match(AT_SIGN_SYMBOL);
				setState(7908);
				textOrIdentifier();
				}
				break;
			case 2:
				{
				setState(7909);
				match(AT_TEXT_SUFFIX);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserContext extends ParserRuleContext {
		public UserIdentifierOrTextContext userIdentifierOrText() {
			return getRuleContext(UserIdentifierOrTextContext.class,0);
		}
		public TerminalNode CURRENT_USER_SYMBOL() { return getToken(MySQLParser.CURRENT_USER_SYMBOL, 0); }
		public ParenthesesContext parentheses() {
			return getRuleContext(ParenthesesContext.class,0);
		}
		public UserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user; }
	}

	public final UserContext user() throws RecognitionException {
		UserContext _localctx = new UserContext(_ctx, getState());
		enterRule(_localctx, 1016, RULE_user);
		try {
			setState(7917);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1063,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7912);
				userIdentifierOrText();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7913);
				match(CURRENT_USER_SYMBOL);
				setState(7915);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1062,_ctx) ) {
				case 1:
					{
					setState(7914);
					parentheses();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LikeClauseContext extends ParserRuleContext {
		public TerminalNode LIKE_SYMBOL() { return getToken(MySQLParser.LIKE_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public LikeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_likeClause; }
	}

	public final LikeClauseContext likeClause() throws RecognitionException {
		LikeClauseContext _localctx = new LikeClauseContext(_ctx, getState());
		enterRule(_localctx, 1018, RULE_likeClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7919);
			match(LIKE_SYMBOL);
			setState(7920);
			textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LikeOrWhereContext extends ParserRuleContext {
		public LikeClauseContext likeClause() {
			return getRuleContext(LikeClauseContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public LikeOrWhereContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_likeOrWhere; }
	}

	public final LikeOrWhereContext likeOrWhere() throws RecognitionException {
		LikeOrWhereContext _localctx = new LikeOrWhereContext(_ctx, getState());
		enterRule(_localctx, 1020, RULE_likeOrWhere);
		try {
			setState(7924);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIKE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7922);
				likeClause();
				}
				break;
			case WHERE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7923);
				whereClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OnlineOptionContext extends ParserRuleContext {
		public TerminalNode ONLINE_SYMBOL() { return getToken(MySQLParser.ONLINE_SYMBOL, 0); }
		public TerminalNode OFFLINE_SYMBOL() { return getToken(MySQLParser.OFFLINE_SYMBOL, 0); }
		public OnlineOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onlineOption; }
	}

	public final OnlineOptionContext onlineOption() throws RecognitionException {
		OnlineOptionContext _localctx = new OnlineOptionContext(_ctx, getState());
		enterRule(_localctx, 1022, RULE_onlineOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7926);
			_la = _input.LA(1);
			if ( !(_la==OFFLINE_SYMBOL || _la==ONLINE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NoWriteToBinLogContext extends ParserRuleContext {
		public TerminalNode LOCAL_SYMBOL() { return getToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public TerminalNode NO_WRITE_TO_BINLOG_SYMBOL() { return getToken(MySQLParser.NO_WRITE_TO_BINLOG_SYMBOL, 0); }
		public NoWriteToBinLogContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_noWriteToBinLog; }
	}

	public final NoWriteToBinLogContext noWriteToBinLog() throws RecognitionException {
		NoWriteToBinLogContext _localctx = new NoWriteToBinLogContext(_ctx, getState());
		enterRule(_localctx, 1024, RULE_noWriteToBinLog);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7928);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UsePartitionContext extends ParserRuleContext {
		public TerminalNode PARTITION_SYMBOL() { return getToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public IdentifierListWithParenthesesContext identifierListWithParentheses() {
			return getRuleContext(IdentifierListWithParenthesesContext.class,0);
		}
		public UsePartitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_usePartition; }
	}

	public final UsePartitionContext usePartition() throws RecognitionException {
		UsePartitionContext _localctx = new UsePartitionContext(_ctx, getState());
		enterRule(_localctx, 1026, RULE_usePartition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7930);
			if (!(serverVersion >= 50602)) throw new FailedPredicateException(this, "serverVersion >= 50602");
			setState(7931);
			match(PARTITION_SYMBOL);
			setState(7932);
			identifierListWithParentheses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FieldIdentifierContext extends ParserRuleContext {
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public FieldIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldIdentifier; }
	}

	public final FieldIdentifierContext fieldIdentifier() throws RecognitionException {
		FieldIdentifierContext _localctx = new FieldIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1028, RULE_fieldIdentifier);
		try {
			setState(7939);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1066,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7934);
				dotIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7935);
				qualifiedIdentifier();
				setState(7937);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1065,_ctx) ) {
				case 1:
					{
					setState(7936);
					dotIdentifier();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public FieldIdentifierContext fieldIdentifier() {
			return getRuleContext(FieldIdentifierContext.class,0);
		}
		public ColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnName; }
	}

	public final ColumnNameContext columnName() throws RecognitionException {
		ColumnNameContext _localctx = new ColumnNameContext(_ctx, getState());
		enterRule(_localctx, 1030, RULE_columnName);
		try {
			setState(7945);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1067,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7941);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(7942);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7943);
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				setState(7944);
				fieldIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnInternalRefContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ColumnInternalRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnInternalRef; }
	}

	public final ColumnInternalRefContext columnInternalRef() throws RecognitionException {
		ColumnInternalRefContext _localctx = new ColumnInternalRefContext(_ctx, getState());
		enterRule(_localctx, 1032, RULE_columnInternalRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7947);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnInternalRefListContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<ColumnInternalRefContext> columnInternalRef() {
			return getRuleContexts(ColumnInternalRefContext.class);
		}
		public ColumnInternalRefContext columnInternalRef(int i) {
			return getRuleContext(ColumnInternalRefContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ColumnInternalRefListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnInternalRefList; }
	}

	public final ColumnInternalRefListContext columnInternalRefList() throws RecognitionException {
		ColumnInternalRefListContext _localctx = new ColumnInternalRefListContext(_ctx, getState());
		enterRule(_localctx, 1034, RULE_columnInternalRefList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7949);
			match(OPEN_PAR_SYMBOL);
			setState(7950);
			columnInternalRef();
			setState(7955);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(7951);
				match(COMMA_SYMBOL);
				setState(7952);
				columnInternalRef();
				}
				}
				setState(7957);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7958);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnRefContext extends ParserRuleContext {
		public FieldIdentifierContext fieldIdentifier() {
			return getRuleContext(FieldIdentifierContext.class,0);
		}
		public ColumnRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnRef; }
	}

	public final ColumnRefContext columnRef() throws RecognitionException {
		ColumnRefContext _localctx = new ColumnRefContext(_ctx, getState());
		enterRule(_localctx, 1036, RULE_columnRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7960);
			fieldIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertIdentifierContext extends ParserRuleContext {
		public ColumnRefContext columnRef() {
			return getRuleContext(ColumnRefContext.class,0);
		}
		public TableWildContext tableWild() {
			return getRuleContext(TableWildContext.class,0);
		}
		public InsertIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertIdentifier; }
	}

	public final InsertIdentifierContext insertIdentifier() throws RecognitionException {
		InsertIdentifierContext _localctx = new InsertIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1038, RULE_insertIdentifier);
		try {
			setState(7964);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1069,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7962);
				columnRef();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7963);
				tableWild();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public IndexNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexName; }
	}

	public final IndexNameContext indexName() throws RecognitionException {
		IndexNameContext _localctx = new IndexNameContext(_ctx, getState());
		enterRule(_localctx, 1040, RULE_indexName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7966);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexRefContext extends ParserRuleContext {
		public FieldIdentifierContext fieldIdentifier() {
			return getRuleContext(FieldIdentifierContext.class,0);
		}
		public IndexRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexRef; }
	}

	public final IndexRefContext indexRef() throws RecognitionException {
		IndexRefContext _localctx = new IndexRefContext(_ctx, getState());
		enterRule(_localctx, 1042, RULE_indexRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7968);
			fieldIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableWildContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> DOT_SYMBOL() { return getTokens(MySQLParser.DOT_SYMBOL); }
		public TerminalNode DOT_SYMBOL(int i) {
			return getToken(MySQLParser.DOT_SYMBOL, i);
		}
		public TerminalNode MULT_OPERATOR() { return getToken(MySQLParser.MULT_OPERATOR, 0); }
		public TableWildContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableWild; }
	}

	public final TableWildContext tableWild() throws RecognitionException {
		TableWildContext _localctx = new TableWildContext(_ctx, getState());
		enterRule(_localctx, 1044, RULE_tableWild);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7970);
			identifier();
			setState(7971);
			match(DOT_SYMBOL);
			setState(7975);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1070,_ctx) ) {
			case 1:
				{
				setState(7972);
				identifier();
				setState(7973);
				match(DOT_SYMBOL);
				}
				break;
			}
			setState(7977);
			match(MULT_OPERATOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SchemaNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaName; }
	}

	public final SchemaNameContext schemaName() throws RecognitionException {
		SchemaNameContext _localctx = new SchemaNameContext(_ctx, getState());
		enterRule(_localctx, 1046, RULE_schemaName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7979);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SchemaRefContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaRef; }
	}

	public final SchemaRefContext schemaRef() throws RecognitionException {
		SchemaRefContext _localctx = new SchemaRefContext(_ctx, getState());
		enterRule(_localctx, 1048, RULE_schemaRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7981);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureNameContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public ProcedureNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureName; }
	}

	public final ProcedureNameContext procedureName() throws RecognitionException {
		ProcedureNameContext _localctx = new ProcedureNameContext(_ctx, getState());
		enterRule(_localctx, 1050, RULE_procedureName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7983);
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureRefContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public ProcedureRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureRef; }
	}

	public final ProcedureRefContext procedureRef() throws RecognitionException {
		ProcedureRefContext _localctx = new ProcedureRefContext(_ctx, getState());
		enterRule(_localctx, 1052, RULE_procedureRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7985);
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionNameContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public FunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionName; }
	}

	public final FunctionNameContext functionName() throws RecognitionException {
		FunctionNameContext _localctx = new FunctionNameContext(_ctx, getState());
		enterRule(_localctx, 1054, RULE_functionName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7987);
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionRefContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public FunctionRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionRef; }
	}

	public final FunctionRefContext functionRef() throws RecognitionException {
		FunctionRefContext _localctx = new FunctionRefContext(_ctx, getState());
		enterRule(_localctx, 1056, RULE_functionRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7989);
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerNameContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public TriggerNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerName; }
	}

	public final TriggerNameContext triggerName() throws RecognitionException {
		TriggerNameContext _localctx = new TriggerNameContext(_ctx, getState());
		enterRule(_localctx, 1058, RULE_triggerName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7991);
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerRefContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public TriggerRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerRef; }
	}

	public final TriggerRefContext triggerRef() throws RecognitionException {
		TriggerRefContext _localctx = new TriggerRefContext(_ctx, getState());
		enterRule(_localctx, 1060, RULE_triggerRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7993);
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewNameContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public ViewNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewName; }
	}

	public final ViewNameContext viewName() throws RecognitionException {
		ViewNameContext _localctx = new ViewNameContext(_ctx, getState());
		enterRule(_localctx, 1062, RULE_viewName);
		try {
			setState(7997);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1071,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7995);
				qualifiedIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7996);
				dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewRefContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public ViewRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewRef; }
	}

	public final ViewRefContext viewRef() throws RecognitionException {
		ViewRefContext _localctx = new ViewRefContext(_ctx, getState());
		enterRule(_localctx, 1064, RULE_viewRef);
		try {
			setState(8001);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1072,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7999);
				qualifiedIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8000);
				dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablespaceNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TablespaceNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespaceName; }
	}

	public final TablespaceNameContext tablespaceName() throws RecognitionException {
		TablespaceNameContext _localctx = new TablespaceNameContext(_ctx, getState());
		enterRule(_localctx, 1066, RULE_tablespaceName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8003);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablespaceRefContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TablespaceRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespaceRef; }
	}

	public final TablespaceRefContext tablespaceRef() throws RecognitionException {
		TablespaceRefContext _localctx = new TablespaceRefContext(_ctx, getState());
		enterRule(_localctx, 1068, RULE_tablespaceRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8005);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LogfileGroupNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public LogfileGroupNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logfileGroupName; }
	}

	public final LogfileGroupNameContext logfileGroupName() throws RecognitionException {
		LogfileGroupNameContext _localctx = new LogfileGroupNameContext(_ctx, getState());
		enterRule(_localctx, 1070, RULE_logfileGroupName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8007);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LogfileGroupRefContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public LogfileGroupRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logfileGroupRef; }
	}

	public final LogfileGroupRefContext logfileGroupRef() throws RecognitionException {
		LogfileGroupRefContext _localctx = new LogfileGroupRefContext(_ctx, getState());
		enterRule(_localctx, 1072, RULE_logfileGroupRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8009);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EventNameContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public EventNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_eventName; }
	}

	public final EventNameContext eventName() throws RecognitionException {
		EventNameContext _localctx = new EventNameContext(_ctx, getState());
		enterRule(_localctx, 1074, RULE_eventName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8011);
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EventRefContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public EventRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_eventRef; }
	}

	public final EventRefContext eventRef() throws RecognitionException {
		EventRefContext _localctx = new EventRefContext(_ctx, getState());
		enterRule(_localctx, 1076, RULE_eventRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8013);
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UdfNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public UdfNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_udfName; }
	}

	public final UdfNameContext udfName() throws RecognitionException {
		UdfNameContext _localctx = new UdfNameContext(_ctx, getState());
		enterRule(_localctx, 1078, RULE_udfName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8015);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ServerNameContext extends ParserRuleContext {
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public ServerNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serverName; }
	}

	public final ServerNameContext serverName() throws RecognitionException {
		ServerNameContext _localctx = new ServerNameContext(_ctx, getState());
		enterRule(_localctx, 1080, RULE_serverName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8017);
			textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ServerRefContext extends ParserRuleContext {
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public ServerRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serverRef; }
	}

	public final ServerRefContext serverRef() throws RecognitionException {
		ServerRefContext _localctx = new ServerRefContext(_ctx, getState());
		enterRule(_localctx, 1082, RULE_serverRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8019);
			textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EngineRefContext extends ParserRuleContext {
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public EngineRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_engineRef; }
	}

	public final EngineRefContext engineRef() throws RecognitionException {
		EngineRefContext _localctx = new EngineRefContext(_ctx, getState());
		enterRule(_localctx, 1084, RULE_engineRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8021);
			textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableNameContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public TableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableName; }
	}

	public final TableNameContext tableName() throws RecognitionException {
		TableNameContext _localctx = new TableNameContext(_ctx, getState());
		enterRule(_localctx, 1086, RULE_tableName);
		try {
			setState(8025);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1073,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8023);
				qualifiedIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8024);
				dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FilterTableRefContext extends ParserRuleContext {
		public SchemaRefContext schemaRef() {
			return getRuleContext(SchemaRefContext.class,0);
		}
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public FilterTableRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filterTableRef; }
	}

	public final FilterTableRefContext filterTableRef() throws RecognitionException {
		FilterTableRefContext _localctx = new FilterTableRefContext(_ctx, getState());
		enterRule(_localctx, 1088, RULE_filterTableRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8027);
			schemaRef();
			setState(8028);
			dotIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableRefWithWildcardContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode DOT_SYMBOL() { return getToken(MySQLParser.DOT_SYMBOL, 0); }
		public TerminalNode MULT_OPERATOR() { return getToken(MySQLParser.MULT_OPERATOR, 0); }
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public TableRefWithWildcardContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableRefWithWildcard; }
	}

	public final TableRefWithWildcardContext tableRefWithWildcard() throws RecognitionException {
		TableRefWithWildcardContext _localctx = new TableRefWithWildcardContext(_ctx, getState());
		enterRule(_localctx, 1090, RULE_tableRefWithWildcard);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8030);
			identifier();
			setState(8038);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1075,_ctx) ) {
			case 1:
				{
				setState(8031);
				match(DOT_SYMBOL);
				setState(8032);
				match(MULT_OPERATOR);
				}
				break;
			case 2:
				{
				setState(8033);
				dotIdentifier();
				setState(8036);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1074,_ctx) ) {
				case 1:
					{
					setState(8034);
					match(DOT_SYMBOL);
					setState(8035);
					match(MULT_OPERATOR);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableRefContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public TableRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableRef; }
	}

	public final TableRefContext tableRef() throws RecognitionException {
		TableRefContext _localctx = new TableRefContext(_ctx, getState());
		enterRule(_localctx, 1092, RULE_tableRef);
		try {
			setState(8042);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1076,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8040);
				qualifiedIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8041);
				dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableRefListContext extends ParserRuleContext {
		public List<TableRefContext> tableRef() {
			return getRuleContexts(TableRefContext.class);
		}
		public TableRefContext tableRef(int i) {
			return getRuleContext(TableRefContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TableRefListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableRefList; }
	}

	public final TableRefListContext tableRefList() throws RecognitionException {
		TableRefListContext _localctx = new TableRefListContext(_ctx, getState());
		enterRule(_localctx, 1094, RULE_tableRefList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8044);
			tableRef();
			setState(8049);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1077,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8045);
					match(COMMA_SYMBOL);
					setState(8046);
					tableRef();
					}
					} 
				}
				setState(8051);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1077,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableAliasRefListContext extends ParserRuleContext {
		public List<TableRefWithWildcardContext> tableRefWithWildcard() {
			return getRuleContexts(TableRefWithWildcardContext.class);
		}
		public TableRefWithWildcardContext tableRefWithWildcard(int i) {
			return getRuleContext(TableRefWithWildcardContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TableAliasRefListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableAliasRefList; }
	}

	public final TableAliasRefListContext tableAliasRefList() throws RecognitionException {
		TableAliasRefListContext _localctx = new TableAliasRefListContext(_ctx, getState());
		enterRule(_localctx, 1096, RULE_tableAliasRefList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8052);
			tableRefWithWildcard();
			setState(8057);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1078,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8053);
					match(COMMA_SYMBOL);
					setState(8054);
					tableRefWithWildcard();
					}
					} 
				}
				setState(8059);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1078,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ParameterNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterName; }
	}

	public final ParameterNameContext parameterName() throws RecognitionException {
		ParameterNameContext _localctx = new ParameterNameContext(_ctx, getState());
		enterRule(_localctx, 1098, RULE_parameterName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8060);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LabelIdentifierContext extends ParserRuleContext {
		public PureIdentifierContext pureIdentifier() {
			return getRuleContext(PureIdentifierContext.class,0);
		}
		public LabelKeywordContext labelKeyword() {
			return getRuleContext(LabelKeywordContext.class,0);
		}
		public LabelIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labelIdentifier; }
	}

	public final LabelIdentifierContext labelIdentifier() throws RecognitionException {
		LabelIdentifierContext _localctx = new LabelIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1100, RULE_labelIdentifier);
		try {
			setState(8064);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1079,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8062);
				pureIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8063);
				labelKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LabelRefContext extends ParserRuleContext {
		public LabelIdentifierContext labelIdentifier() {
			return getRuleContext(LabelIdentifierContext.class,0);
		}
		public LabelRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labelRef; }
	}

	public final LabelRefContext labelRef() throws RecognitionException {
		LabelRefContext _localctx = new LabelRefContext(_ctx, getState());
		enterRule(_localctx, 1102, RULE_labelRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8066);
			labelIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleIdentifierContext extends ParserRuleContext {
		public PureIdentifierContext pureIdentifier() {
			return getRuleContext(PureIdentifierContext.class,0);
		}
		public RoleKeywordContext roleKeyword() {
			return getRuleContext(RoleKeywordContext.class,0);
		}
		public RoleIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleIdentifier; }
	}

	public final RoleIdentifierContext roleIdentifier() throws RecognitionException {
		RoleIdentifierContext _localctx = new RoleIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1104, RULE_roleIdentifier);
		try {
			setState(8070);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1080,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8068);
				pureIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8069);
				roleKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleRefContext extends ParserRuleContext {
		public RoleIdentifierContext roleIdentifier() {
			return getRuleContext(RoleIdentifierContext.class,0);
		}
		public RoleRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleRef; }
	}

	public final RoleRefContext roleRef() throws RecognitionException {
		RoleRefContext _localctx = new RoleRefContext(_ctx, getState());
		enterRule(_localctx, 1106, RULE_roleRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8072);
			roleIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PluginRefContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public PluginRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pluginRef; }
	}

	public final PluginRefContext pluginRef() throws RecognitionException {
		PluginRefContext _localctx = new PluginRefContext(_ctx, getState());
		enterRule(_localctx, 1108, RULE_pluginRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8074);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComponentRefContext extends ParserRuleContext {
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public ComponentRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_componentRef; }
	}

	public final ComponentRefContext componentRef() throws RecognitionException {
		ComponentRefContext _localctx = new ComponentRefContext(_ctx, getState());
		enterRule(_localctx, 1110, RULE_componentRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8076);
			textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResourceGroupRefContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ResourceGroupRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resourceGroupRef; }
	}

	public final ResourceGroupRefContext resourceGroupRef() throws RecognitionException {
		ResourceGroupRefContext _localctx = new ResourceGroupRefContext(_ctx, getState());
		enterRule(_localctx, 1112, RULE_resourceGroupRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8078);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public WindowNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowName; }
	}

	public final WindowNameContext windowName() throws RecognitionException {
		WindowNameContext _localctx = new WindowNameContext(_ctx, getState());
		enterRule(_localctx, 1114, RULE_windowName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8080);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PureIdentifierContext extends ParserRuleContext {
		public TerminalNode IDENTIFIER() { return getToken(MySQLParser.IDENTIFIER, 0); }
		public TerminalNode BACK_TICK_QUOTED_ID() { return getToken(MySQLParser.BACK_TICK_QUOTED_ID, 0); }
		public TerminalNode DOUBLE_QUOTED_TEXT() { return getToken(MySQLParser.DOUBLE_QUOTED_TEXT, 0); }
		public PureIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pureIdentifier; }
	}

	public final PureIdentifierContext pureIdentifier() throws RecognitionException {
		PureIdentifierContext _localctx = new PureIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1116, RULE_pureIdentifier);
		int _la;
		try {
			setState(8085);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1081,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8082);
				_la = _input.LA(1);
				if ( !(_la==IDENTIFIER || _la==BACK_TICK_QUOTED_ID) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8083);
				if (!(isSqlModeActive(AnsiQuotes))) throw new FailedPredicateException(this, "isSqlModeActive(AnsiQuotes)");
				setState(8084);
				match(DOUBLE_QUOTED_TEXT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierContext extends ParserRuleContext {
		public PureIdentifierContext pureIdentifier() {
			return getRuleContext(PureIdentifierContext.class,0);
		}
		public IdentifierKeywordContext identifierKeyword() {
			return getRuleContext(IdentifierKeywordContext.class,0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 1118, RULE_identifier);
		try {
			setState(8089);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1082,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8087);
				pureIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8088);
				identifierKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierListContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierList; }
	}

	public final IdentifierListContext identifierList() throws RecognitionException {
		IdentifierListContext _localctx = new IdentifierListContext(_ctx, getState());
		enterRule(_localctx, 1120, RULE_identifierList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8091);
			identifier();
			setState(8096);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1083,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8092);
					match(COMMA_SYMBOL);
					setState(8093);
					identifier();
					}
					} 
				}
				setState(8098);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1083,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierListWithParenthesesContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public IdentifierListWithParenthesesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierListWithParentheses; }
	}

	public final IdentifierListWithParenthesesContext identifierListWithParentheses() throws RecognitionException {
		IdentifierListWithParenthesesContext _localctx = new IdentifierListWithParenthesesContext(_ctx, getState());
		enterRule(_localctx, 1122, RULE_identifierListWithParentheses);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8099);
			match(OPEN_PAR_SYMBOL);
			setState(8100);
			identifierList();
			setState(8101);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QualifiedIdentifierContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public QualifiedIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualifiedIdentifier; }
	}

	public final QualifiedIdentifierContext qualifiedIdentifier() throws RecognitionException {
		QualifiedIdentifierContext _localctx = new QualifiedIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1124, RULE_qualifiedIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8103);
			identifier();
			setState(8105);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1084,_ctx) ) {
			case 1:
				{
				setState(8104);
				dotIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleIdentifierContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<DotIdentifierContext> dotIdentifier() {
			return getRuleContexts(DotIdentifierContext.class);
		}
		public DotIdentifierContext dotIdentifier(int i) {
			return getRuleContext(DotIdentifierContext.class,i);
		}
		public SimpleIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleIdentifier; }
	}

	public final SimpleIdentifierContext simpleIdentifier() throws RecognitionException {
		SimpleIdentifierContext _localctx = new SimpleIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1126, RULE_simpleIdentifier);
		int _la;
		try {
			setState(8118);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1087,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8107);
				identifier();
				setState(8112);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT_SYMBOL) {
					{
					setState(8108);
					dotIdentifier();
					setState(8110);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT_SYMBOL) {
						{
						setState(8109);
						dotIdentifier();
						}
					}

					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8114);
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				setState(8115);
				dotIdentifier();
				setState(8116);
				dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DotIdentifierContext extends ParserRuleContext {
		public TerminalNode DOT_SYMBOL() { return getToken(MySQLParser.DOT_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public DotIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dotIdentifier; }
	}

	public final DotIdentifierContext dotIdentifier() throws RecognitionException {
		DotIdentifierContext _localctx = new DotIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1128, RULE_dotIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8120);
			match(DOT_SYMBOL);
			setState(8121);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ulong_numberContext extends ParserRuleContext {
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public TerminalNode HEX_NUMBER() { return getToken(MySQLParser.HEX_NUMBER, 0); }
		public TerminalNode LONG_NUMBER() { return getToken(MySQLParser.LONG_NUMBER, 0); }
		public TerminalNode ULONGLONG_NUMBER() { return getToken(MySQLParser.ULONGLONG_NUMBER, 0); }
		public TerminalNode DECIMAL_NUMBER() { return getToken(MySQLParser.DECIMAL_NUMBER, 0); }
		public TerminalNode FLOAT_NUMBER() { return getToken(MySQLParser.FLOAT_NUMBER, 0); }
		public Ulong_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ulong_number; }
	}

	public final Ulong_numberContext ulong_number() throws RecognitionException {
		Ulong_numberContext _localctx = new Ulong_numberContext(_ctx, getState());
		enterRule(_localctx, 1130, RULE_ulong_number);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8123);
			_la = _input.LA(1);
			if ( !(((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (INT_NUMBER - 380)) | (1L << (LONG_NUMBER - 380)) | (1L << (ULONGLONG_NUMBER - 380)) | (1L << (HEX_NUMBER - 380)) | (1L << (DECIMAL_NUMBER - 380)) | (1L << (FLOAT_NUMBER - 380)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Real_ulong_numberContext extends ParserRuleContext {
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public TerminalNode HEX_NUMBER() { return getToken(MySQLParser.HEX_NUMBER, 0); }
		public TerminalNode LONG_NUMBER() { return getToken(MySQLParser.LONG_NUMBER, 0); }
		public TerminalNode ULONGLONG_NUMBER() { return getToken(MySQLParser.ULONGLONG_NUMBER, 0); }
		public Real_ulong_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_real_ulong_number; }
	}

	public final Real_ulong_numberContext real_ulong_number() throws RecognitionException {
		Real_ulong_numberContext _localctx = new Real_ulong_numberContext(_ctx, getState());
		enterRule(_localctx, 1132, RULE_real_ulong_number);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8125);
			_la = _input.LA(1);
			if ( !(((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (INT_NUMBER - 380)) | (1L << (LONG_NUMBER - 380)) | (1L << (ULONGLONG_NUMBER - 380)) | (1L << (HEX_NUMBER - 380)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ulonglong_numberContext extends ParserRuleContext {
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public TerminalNode LONG_NUMBER() { return getToken(MySQLParser.LONG_NUMBER, 0); }
		public TerminalNode ULONGLONG_NUMBER() { return getToken(MySQLParser.ULONGLONG_NUMBER, 0); }
		public TerminalNode DECIMAL_NUMBER() { return getToken(MySQLParser.DECIMAL_NUMBER, 0); }
		public TerminalNode FLOAT_NUMBER() { return getToken(MySQLParser.FLOAT_NUMBER, 0); }
		public Ulonglong_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ulonglong_number; }
	}

	public final Ulonglong_numberContext ulonglong_number() throws RecognitionException {
		Ulonglong_numberContext _localctx = new Ulonglong_numberContext(_ctx, getState());
		enterRule(_localctx, 1134, RULE_ulonglong_number);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8127);
			_la = _input.LA(1);
			if ( !(((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (INT_NUMBER - 380)) | (1L << (LONG_NUMBER - 380)) | (1L << (ULONGLONG_NUMBER - 380)) | (1L << (DECIMAL_NUMBER - 380)) | (1L << (FLOAT_NUMBER - 380)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Real_ulonglong_numberContext extends ParserRuleContext {
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public TerminalNode HEX_NUMBER() { return getToken(MySQLParser.HEX_NUMBER, 0); }
		public TerminalNode ULONGLONG_NUMBER() { return getToken(MySQLParser.ULONGLONG_NUMBER, 0); }
		public TerminalNode LONG_NUMBER() { return getToken(MySQLParser.LONG_NUMBER, 0); }
		public Real_ulonglong_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_real_ulonglong_number; }
	}

	public final Real_ulonglong_numberContext real_ulonglong_number() throws RecognitionException {
		Real_ulonglong_numberContext _localctx = new Real_ulonglong_numberContext(_ctx, getState());
		enterRule(_localctx, 1136, RULE_real_ulonglong_number);
		try {
			setState(8134);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1088,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8129);
				match(INT_NUMBER);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8130);
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				setState(8131);
				match(HEX_NUMBER);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8132);
				match(ULONGLONG_NUMBER);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8133);
				match(LONG_NUMBER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LiteralContext extends ParserRuleContext {
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public NumLiteralContext numLiteral() {
			return getRuleContext(NumLiteralContext.class,0);
		}
		public TemporalLiteralContext temporalLiteral() {
			return getRuleContext(TemporalLiteralContext.class,0);
		}
		public NullLiteralContext nullLiteral() {
			return getRuleContext(NullLiteralContext.class,0);
		}
		public BoolLiteralContext boolLiteral() {
			return getRuleContext(BoolLiteralContext.class,0);
		}
		public TerminalNode HEX_NUMBER() { return getToken(MySQLParser.HEX_NUMBER, 0); }
		public TerminalNode BIN_NUMBER() { return getToken(MySQLParser.BIN_NUMBER, 0); }
		public TerminalNode UNDERSCORE_CHARSET() { return getToken(MySQLParser.UNDERSCORE_CHARSET, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_literal; }
	}

	public final LiteralContext literal() throws RecognitionException {
		LiteralContext _localctx = new LiteralContext(_ctx, getState());
		enterRule(_localctx, 1138, RULE_literal);
		int _la;
		try {
			setState(8145);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1090,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8136);
				textLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8137);
				numLiteral();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8138);
				temporalLiteral();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8139);
				nullLiteral();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8140);
				boolLiteral();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8142);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNDERSCORE_CHARSET) {
					{
					setState(8141);
					match(UNDERSCORE_CHARSET);
					}
				}

				setState(8144);
				_la = _input.LA(1);
				if ( !(_la==HEX_NUMBER || _la==BIN_NUMBER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignedLiteralContext extends ParserRuleContext {
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public TerminalNode PLUS_OPERATOR() { return getToken(MySQLParser.PLUS_OPERATOR, 0); }
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public TerminalNode MINUS_OPERATOR() { return getToken(MySQLParser.MINUS_OPERATOR, 0); }
		public SignedLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signedLiteral; }
	}

	public final SignedLiteralContext signedLiteral() throws RecognitionException {
		SignedLiteralContext _localctx = new SignedLiteralContext(_ctx, getState());
		enterRule(_localctx, 1140, RULE_signedLiteral);
		try {
			setState(8152);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1091,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8147);
				literal();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8148);
				match(PLUS_OPERATOR);
				setState(8149);
				ulong_number();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8150);
				match(MINUS_OPERATOR);
				setState(8151);
				ulong_number();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringListContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<TextStringContext> textString() {
			return getRuleContexts(TextStringContext.class);
		}
		public TextStringContext textString(int i) {
			return getRuleContext(TextStringContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public StringListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringList; }
	}

	public final StringListContext stringList() throws RecognitionException {
		StringListContext _localctx = new StringListContext(_ctx, getState());
		enterRule(_localctx, 1142, RULE_stringList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8154);
			match(OPEN_PAR_SYMBOL);
			setState(8155);
			textString();
			setState(8160);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(8156);
				match(COMMA_SYMBOL);
				setState(8157);
				textString();
				}
				}
				setState(8162);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(8163);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TextStringLiteralContext extends ParserRuleContext {
		public Token value;
		public TerminalNode SINGLE_QUOTED_TEXT() { return getToken(MySQLParser.SINGLE_QUOTED_TEXT, 0); }
		public TerminalNode DOUBLE_QUOTED_TEXT() { return getToken(MySQLParser.DOUBLE_QUOTED_TEXT, 0); }
		public TextStringLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_textStringLiteral; }
	}

	public final TextStringLiteralContext textStringLiteral() throws RecognitionException {
		TextStringLiteralContext _localctx = new TextStringLiteralContext(_ctx, getState());
		enterRule(_localctx, 1144, RULE_textStringLiteral);
		try {
			setState(8168);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1093,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8165);
				((TextStringLiteralContext)_localctx).value = match(SINGLE_QUOTED_TEXT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8166);
				if (!(!isSqlModeActive(AnsiQuotes))) throw new FailedPredicateException(this, "!isSqlModeActive(AnsiQuotes)");
				setState(8167);
				((TextStringLiteralContext)_localctx).value = match(DOUBLE_QUOTED_TEXT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TextStringContext extends ParserRuleContext {
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode HEX_NUMBER() { return getToken(MySQLParser.HEX_NUMBER, 0); }
		public TerminalNode BIN_NUMBER() { return getToken(MySQLParser.BIN_NUMBER, 0); }
		public TextStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_textString; }
	}

	public final TextStringContext textString() throws RecognitionException {
		TextStringContext _localctx = new TextStringContext(_ctx, getState());
		enterRule(_localctx, 1146, RULE_textString);
		try {
			setState(8173);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1094,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8170);
				textStringLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8171);
				match(HEX_NUMBER);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8172);
				match(BIN_NUMBER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TextStringHashContext extends ParserRuleContext {
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode HEX_NUMBER() { return getToken(MySQLParser.HEX_NUMBER, 0); }
		public TextStringHashContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_textStringHash; }
	}

	public final TextStringHashContext textStringHash() throws RecognitionException {
		TextStringHashContext _localctx = new TextStringHashContext(_ctx, getState());
		enterRule(_localctx, 1148, RULE_textStringHash);
		try {
			setState(8178);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1095,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8175);
				textStringLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8176);
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				setState(8177);
				match(HEX_NUMBER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TextLiteralContext extends ParserRuleContext {
		public List<TextStringLiteralContext> textStringLiteral() {
			return getRuleContexts(TextStringLiteralContext.class);
		}
		public TextStringLiteralContext textStringLiteral(int i) {
			return getRuleContext(TextStringLiteralContext.class,i);
		}
		public TerminalNode NCHAR_TEXT() { return getToken(MySQLParser.NCHAR_TEXT, 0); }
		public TerminalNode UNDERSCORE_CHARSET() { return getToken(MySQLParser.UNDERSCORE_CHARSET, 0); }
		public TextLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_textLiteral; }
	}

	public final TextLiteralContext textLiteral() throws RecognitionException {
		TextLiteralContext _localctx = new TextLiteralContext(_ctx, getState());
		enterRule(_localctx, 1150, RULE_textLiteral);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8185);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1097,_ctx) ) {
			case 1:
				{
				setState(8181);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1096,_ctx) ) {
				case 1:
					{
					setState(8180);
					match(UNDERSCORE_CHARSET);
					}
					break;
				}
				setState(8183);
				textStringLiteral();
				}
				break;
			case 2:
				{
				setState(8184);
				match(NCHAR_TEXT);
				}
				break;
			}
			setState(8190);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1098,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8187);
					textStringLiteral();
					}
					} 
				}
				setState(8192);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1098,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TextStringNoLinebreakContext extends ParserRuleContext {
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TextStringNoLinebreakContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_textStringNoLinebreak; }
	}

	public final TextStringNoLinebreakContext textStringNoLinebreak() throws RecognitionException {
		TextStringNoLinebreakContext _localctx = new TextStringNoLinebreakContext(_ctx, getState());
		enterRule(_localctx, 1152, RULE_textStringNoLinebreak);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8193);
			textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TextStringLiteralListContext extends ParserRuleContext {
		public List<TextStringLiteralContext> textStringLiteral() {
			return getRuleContexts(TextStringLiteralContext.class);
		}
		public TextStringLiteralContext textStringLiteral(int i) {
			return getRuleContext(TextStringLiteralContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TextStringLiteralListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_textStringLiteralList; }
	}

	public final TextStringLiteralListContext textStringLiteralList() throws RecognitionException {
		TextStringLiteralListContext _localctx = new TextStringLiteralListContext(_ctx, getState());
		enterRule(_localctx, 1154, RULE_textStringLiteralList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8195);
			textStringLiteral();
			setState(8200);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(8196);
				match(COMMA_SYMBOL);
				setState(8197);
				textStringLiteral();
				}
				}
				setState(8202);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumLiteralContext extends ParserRuleContext {
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public TerminalNode LONG_NUMBER() { return getToken(MySQLParser.LONG_NUMBER, 0); }
		public TerminalNode ULONGLONG_NUMBER() { return getToken(MySQLParser.ULONGLONG_NUMBER, 0); }
		public TerminalNode DECIMAL_NUMBER() { return getToken(MySQLParser.DECIMAL_NUMBER, 0); }
		public TerminalNode FLOAT_NUMBER() { return getToken(MySQLParser.FLOAT_NUMBER, 0); }
		public NumLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numLiteral; }
	}

	public final NumLiteralContext numLiteral() throws RecognitionException {
		NumLiteralContext _localctx = new NumLiteralContext(_ctx, getState());
		enterRule(_localctx, 1156, RULE_numLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8203);
			_la = _input.LA(1);
			if ( !(((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (INT_NUMBER - 380)) | (1L << (LONG_NUMBER - 380)) | (1L << (ULONGLONG_NUMBER - 380)) | (1L << (DECIMAL_NUMBER - 380)) | (1L << (FLOAT_NUMBER - 380)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BoolLiteralContext extends ParserRuleContext {
		public TerminalNode TRUE_SYMBOL() { return getToken(MySQLParser.TRUE_SYMBOL, 0); }
		public TerminalNode FALSE_SYMBOL() { return getToken(MySQLParser.FALSE_SYMBOL, 0); }
		public BoolLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolLiteral; }
	}

	public final BoolLiteralContext boolLiteral() throws RecognitionException {
		BoolLiteralContext _localctx = new BoolLiteralContext(_ctx, getState());
		enterRule(_localctx, 1158, RULE_boolLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8205);
			_la = _input.LA(1);
			if ( !(_la==FALSE_SYMBOL || _la==TRUE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullLiteralContext extends ParserRuleContext {
		public TerminalNode NULL_SYMBOL() { return getToken(MySQLParser.NULL_SYMBOL, 0); }
		public TerminalNode NULL2_SYMBOL() { return getToken(MySQLParser.NULL2_SYMBOL, 0); }
		public NullLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullLiteral; }
	}

	public final NullLiteralContext nullLiteral() throws RecognitionException {
		NullLiteralContext _localctx = new NullLiteralContext(_ctx, getState());
		enterRule(_localctx, 1160, RULE_nullLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8207);
			_la = _input.LA(1);
			if ( !(_la==NULL2_SYMBOL || _la==NULL_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TemporalLiteralContext extends ParserRuleContext {
		public TerminalNode DATE_SYMBOL() { return getToken(MySQLParser.DATE_SYMBOL, 0); }
		public TerminalNode SINGLE_QUOTED_TEXT() { return getToken(MySQLParser.SINGLE_QUOTED_TEXT, 0); }
		public TerminalNode TIME_SYMBOL() { return getToken(MySQLParser.TIME_SYMBOL, 0); }
		public TerminalNode TIMESTAMP_SYMBOL() { return getToken(MySQLParser.TIMESTAMP_SYMBOL, 0); }
		public TemporalLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_temporalLiteral; }
	}

	public final TemporalLiteralContext temporalLiteral() throws RecognitionException {
		TemporalLiteralContext _localctx = new TemporalLiteralContext(_ctx, getState());
		enterRule(_localctx, 1162, RULE_temporalLiteral);
		try {
			setState(8215);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(8209);
				match(DATE_SYMBOL);
				setState(8210);
				match(SINGLE_QUOTED_TEXT);
				}
				break;
			case TIME_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(8211);
				match(TIME_SYMBOL);
				setState(8212);
				match(SINGLE_QUOTED_TEXT);
				}
				break;
			case TIMESTAMP_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(8213);
				match(TIMESTAMP_SYMBOL);
				setState(8214);
				match(SINGLE_QUOTED_TEXT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FloatOptionsContext extends ParserRuleContext {
		public FieldLengthContext fieldLength() {
			return getRuleContext(FieldLengthContext.class,0);
		}
		public PrecisionContext precision() {
			return getRuleContext(PrecisionContext.class,0);
		}
		public FloatOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_floatOptions; }
	}

	public final FloatOptionsContext floatOptions() throws RecognitionException {
		FloatOptionsContext _localctx = new FloatOptionsContext(_ctx, getState());
		enterRule(_localctx, 1164, RULE_floatOptions);
		try {
			setState(8219);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1101,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8217);
				fieldLength();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8218);
				precision();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StandardFloatOptionsContext extends ParserRuleContext {
		public PrecisionContext precision() {
			return getRuleContext(PrecisionContext.class,0);
		}
		public StandardFloatOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standardFloatOptions; }
	}

	public final StandardFloatOptionsContext standardFloatOptions() throws RecognitionException {
		StandardFloatOptionsContext _localctx = new StandardFloatOptionsContext(_ctx, getState());
		enterRule(_localctx, 1166, RULE_standardFloatOptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8221);
			precision();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrecisionContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<TerminalNode> INT_NUMBER() { return getTokens(MySQLParser.INT_NUMBER); }
		public TerminalNode INT_NUMBER(int i) {
			return getToken(MySQLParser.INT_NUMBER, i);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public PrecisionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precision; }
	}

	public final PrecisionContext precision() throws RecognitionException {
		PrecisionContext _localctx = new PrecisionContext(_ctx, getState());
		enterRule(_localctx, 1168, RULE_precision);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8223);
			match(OPEN_PAR_SYMBOL);
			setState(8224);
			match(INT_NUMBER);
			setState(8225);
			match(COMMA_SYMBOL);
			setState(8226);
			match(INT_NUMBER);
			setState(8227);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TextOrIdentifierContext extends ParserRuleContext {
		public TerminalNode SINGLE_QUOTED_TEXT() { return getToken(MySQLParser.SINGLE_QUOTED_TEXT, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TextOrIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_textOrIdentifier; }
	}

	public final TextOrIdentifierContext textOrIdentifier() throws RecognitionException {
		TextOrIdentifierContext _localctx = new TextOrIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1170, RULE_textOrIdentifier);
		try {
			setState(8231);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1102,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8229);
				match(SINGLE_QUOTED_TEXT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8230);
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LValueIdentifierContext extends ParserRuleContext {
		public PureIdentifierContext pureIdentifier() {
			return getRuleContext(PureIdentifierContext.class,0);
		}
		public LValueKeywordContext lValueKeyword() {
			return getRuleContext(LValueKeywordContext.class,0);
		}
		public LValueIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lValueIdentifier; }
	}

	public final LValueIdentifierContext lValueIdentifier() throws RecognitionException {
		LValueIdentifierContext _localctx = new LValueIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1172, RULE_lValueIdentifier);
		try {
			setState(8235);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1103,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8233);
				pureIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8234);
				lValueKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleIdentifierOrTextContext extends ParserRuleContext {
		public RoleIdentifierContext roleIdentifier() {
			return getRuleContext(RoleIdentifierContext.class,0);
		}
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public RoleIdentifierOrTextContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleIdentifierOrText; }
	}

	public final RoleIdentifierOrTextContext roleIdentifierOrText() throws RecognitionException {
		RoleIdentifierOrTextContext _localctx = new RoleIdentifierOrTextContext(_ctx, getState());
		enterRule(_localctx, 1174, RULE_roleIdentifierOrText);
		try {
			setState(8239);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1104,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8237);
				roleIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8238);
				textStringLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SizeNumberContext extends ParserRuleContext {
		public Real_ulonglong_numberContext real_ulonglong_number() {
			return getRuleContext(Real_ulonglong_numberContext.class,0);
		}
		public PureIdentifierContext pureIdentifier() {
			return getRuleContext(PureIdentifierContext.class,0);
		}
		public SizeNumberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sizeNumber; }
	}

	public final SizeNumberContext sizeNumber() throws RecognitionException {
		SizeNumberContext _localctx = new SizeNumberContext(_ctx, getState());
		enterRule(_localctx, 1176, RULE_sizeNumber);
		try {
			setState(8243);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1105,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8241);
				real_ulonglong_number();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8242);
				pureIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParenthesesContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ParenthesesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parentheses; }
	}

	public final ParenthesesContext parentheses() throws RecognitionException {
		ParenthesesContext _localctx = new ParenthesesContext(_ctx, getState());
		enterRule(_localctx, 1178, RULE_parentheses);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8245);
			match(OPEN_PAR_SYMBOL);
			setState(8246);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EqualContext extends ParserRuleContext {
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TerminalNode ASSIGN_OPERATOR() { return getToken(MySQLParser.ASSIGN_OPERATOR, 0); }
		public EqualContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_equal; }
	}

	public final EqualContext equal() throws RecognitionException {
		EqualContext _localctx = new EqualContext(_ctx, getState());
		enterRule(_localctx, 1180, RULE_equal);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8248);
			_la = _input.LA(1);
			if ( !(_la==EQUAL_OPERATOR || _la==ASSIGN_OPERATOR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptionTypeContext extends ParserRuleContext {
		public TerminalNode PERSIST_SYMBOL() { return getToken(MySQLParser.PERSIST_SYMBOL, 0); }
		public TerminalNode PERSIST_ONLY_SYMBOL() { return getToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0); }
		public TerminalNode GLOBAL_SYMBOL() { return getToken(MySQLParser.GLOBAL_SYMBOL, 0); }
		public TerminalNode LOCAL_SYMBOL() { return getToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public TerminalNode SESSION_SYMBOL() { return getToken(MySQLParser.SESSION_SYMBOL, 0); }
		public OptionTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optionType; }
	}

	public final OptionTypeContext optionType() throws RecognitionException {
		OptionTypeContext _localctx = new OptionTypeContext(_ctx, getState());
		enterRule(_localctx, 1182, RULE_optionType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8250);
			_la = _input.LA(1);
			if ( !(_la==GLOBAL_SYMBOL || _la==LOCAL_SYMBOL || _la==SESSION_SYMBOL || _la==PERSIST_SYMBOL || _la==PERSIST_ONLY_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VarIdentTypeContext extends ParserRuleContext {
		public TerminalNode GLOBAL_SYMBOL() { return getToken(MySQLParser.GLOBAL_SYMBOL, 0); }
		public TerminalNode DOT_SYMBOL() { return getToken(MySQLParser.DOT_SYMBOL, 0); }
		public TerminalNode LOCAL_SYMBOL() { return getToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public TerminalNode SESSION_SYMBOL() { return getToken(MySQLParser.SESSION_SYMBOL, 0); }
		public VarIdentTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varIdentType; }
	}

	public final VarIdentTypeContext varIdentType() throws RecognitionException {
		VarIdentTypeContext _localctx = new VarIdentTypeContext(_ctx, getState());
		enterRule(_localctx, 1184, RULE_varIdentType);
		try {
			setState(8258);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GLOBAL_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(8252);
				match(GLOBAL_SYMBOL);
				setState(8253);
				match(DOT_SYMBOL);
				}
				break;
			case LOCAL_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(8254);
				match(LOCAL_SYMBOL);
				setState(8255);
				match(DOT_SYMBOL);
				}
				break;
			case SESSION_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(8256);
				match(SESSION_SYMBOL);
				setState(8257);
				match(DOT_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetVarIdentTypeContext extends ParserRuleContext {
		public TerminalNode PERSIST_SYMBOL() { return getToken(MySQLParser.PERSIST_SYMBOL, 0); }
		public TerminalNode DOT_SYMBOL() { return getToken(MySQLParser.DOT_SYMBOL, 0); }
		public TerminalNode PERSIST_ONLY_SYMBOL() { return getToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0); }
		public TerminalNode GLOBAL_SYMBOL() { return getToken(MySQLParser.GLOBAL_SYMBOL, 0); }
		public TerminalNode LOCAL_SYMBOL() { return getToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public TerminalNode SESSION_SYMBOL() { return getToken(MySQLParser.SESSION_SYMBOL, 0); }
		public SetVarIdentTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setVarIdentType; }
	}

	public final SetVarIdentTypeContext setVarIdentType() throws RecognitionException {
		SetVarIdentTypeContext _localctx = new SetVarIdentTypeContext(_ctx, getState());
		enterRule(_localctx, 1186, RULE_setVarIdentType);
		try {
			setState(8270);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PERSIST_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(8260);
				match(PERSIST_SYMBOL);
				setState(8261);
				match(DOT_SYMBOL);
				}
				break;
			case PERSIST_ONLY_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(8262);
				match(PERSIST_ONLY_SYMBOL);
				setState(8263);
				match(DOT_SYMBOL);
				}
				break;
			case GLOBAL_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(8264);
				match(GLOBAL_SYMBOL);
				setState(8265);
				match(DOT_SYMBOL);
				}
				break;
			case LOCAL_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(8266);
				match(LOCAL_SYMBOL);
				setState(8267);
				match(DOT_SYMBOL);
				}
				break;
			case SESSION_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(8268);
				match(SESSION_SYMBOL);
				setState(8269);
				match(DOT_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierKeywordContext extends ParserRuleContext {
		public LabelKeywordContext labelKeyword() {
			return getRuleContext(LabelKeywordContext.class,0);
		}
		public RoleOrIdentifierKeywordContext roleOrIdentifierKeyword() {
			return getRuleContext(RoleOrIdentifierKeywordContext.class,0);
		}
		public TerminalNode EXECUTE_SYMBOL() { return getToken(MySQLParser.EXECUTE_SYMBOL, 0); }
		public TerminalNode SHUTDOWN_SYMBOL() { return getToken(MySQLParser.SHUTDOWN_SYMBOL, 0); }
		public TerminalNode RESTART_SYMBOL() { return getToken(MySQLParser.RESTART_SYMBOL, 0); }
		public IdentifierKeywordsUnambiguousContext identifierKeywordsUnambiguous() {
			return getRuleContext(IdentifierKeywordsUnambiguousContext.class,0);
		}
		public IdentifierKeywordsAmbiguous1RolesAndLabelsContext identifierKeywordsAmbiguous1RolesAndLabels() {
			return getRuleContext(IdentifierKeywordsAmbiguous1RolesAndLabelsContext.class,0);
		}
		public IdentifierKeywordsAmbiguous2LabelsContext identifierKeywordsAmbiguous2Labels() {
			return getRuleContext(IdentifierKeywordsAmbiguous2LabelsContext.class,0);
		}
		public IdentifierKeywordsAmbiguous3RolesContext identifierKeywordsAmbiguous3Roles() {
			return getRuleContext(IdentifierKeywordsAmbiguous3RolesContext.class,0);
		}
		public IdentifierKeywordsAmbiguous4SystemVariablesContext identifierKeywordsAmbiguous4SystemVariables() {
			return getRuleContext(IdentifierKeywordsAmbiguous4SystemVariablesContext.class,0);
		}
		public IdentifierKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierKeyword; }
	}

	public final IdentifierKeywordContext identifierKeyword() throws RecognitionException {
		IdentifierKeywordContext _localctx = new IdentifierKeywordContext(_ctx, getState());
		enterRule(_localctx, 1188, RULE_identifierKeyword);
		try {
			setState(8289);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1110,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8272);
				if (!(serverVersion < 80017)) throw new FailedPredicateException(this, "serverVersion < 80017");
				setState(8280);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1108,_ctx) ) {
				case 1:
					{
					setState(8273);
					labelKeyword();
					}
					break;
				case 2:
					{
					setState(8274);
					roleOrIdentifierKeyword();
					}
					break;
				case 3:
					{
					setState(8275);
					match(EXECUTE_SYMBOL);
					}
					break;
				case 4:
					{
					setState(8276);
					if (!(serverVersion >= 50709)) throw new FailedPredicateException(this, "serverVersion >= 50709");
					setState(8277);
					match(SHUTDOWN_SYMBOL);
					}
					break;
				case 5:
					{
					setState(8278);
					if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
					setState(8279);
					match(RESTART_SYMBOL);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8287);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ACCOUNT_SYMBOL:
				case ALWAYS_SYMBOL:
				case BACKUP_SYMBOL:
				case CLOSE_SYMBOL:
				case FORMAT_SYMBOL:
				case GROUP_REPLICATION_SYMBOL:
				case HOST_SYMBOL:
				case OPEN_SYMBOL:
				case OPTIONS_SYMBOL:
				case OWNER_SYMBOL:
				case PARSER_SYMBOL:
				case PORT_SYMBOL:
				case REMOVE_SYMBOL:
				case RESTORE_SYMBOL:
				case SECURITY_SYMBOL:
				case SERVER_SYMBOL:
				case SOCKET_SYMBOL:
				case SONAME_SYMBOL:
				case UPGRADE_SYMBOL:
				case WRAPPER_SYMBOL:
				case ACTION_SYMBOL:
				case ADDDATE_SYMBOL:
				case AFTER_SYMBOL:
				case AGAINST_SYMBOL:
				case AGGREGATE_SYMBOL:
				case ALGORITHM_SYMBOL:
				case ANY_SYMBOL:
				case AT_SYMBOL:
				case AUTO_INCREMENT_SYMBOL:
				case AUTOEXTEND_SIZE_SYMBOL:
				case AVG_ROW_LENGTH_SYMBOL:
				case AVG_SYMBOL:
				case BINLOG_SYMBOL:
				case BIT_SYMBOL:
				case BLOCK_SYMBOL:
				case BOOL_SYMBOL:
				case BOOLEAN_SYMBOL:
				case BTREE_SYMBOL:
				case CASCADED_SYMBOL:
				case CATALOG_NAME_SYMBOL:
				case CHAIN_SYMBOL:
				case CHANGED_SYMBOL:
				case CHANNEL_SYMBOL:
				case CIPHER_SYMBOL:
				case CLIENT_SYMBOL:
				case CLASS_ORIGIN_SYMBOL:
				case COALESCE_SYMBOL:
				case CODE_SYMBOL:
				case COLLATION_SYMBOL:
				case COLUMN_NAME_SYMBOL:
				case COLUMN_FORMAT_SYMBOL:
				case COLUMNS_SYMBOL:
				case COMMITTED_SYMBOL:
				case COMPACT_SYMBOL:
				case COMPLETION_SYMBOL:
				case COMPRESSED_SYMBOL:
				case COMPRESSION_SYMBOL:
				case ENCRYPTION_SYMBOL:
				case CONCURRENT_SYMBOL:
				case CONNECTION_SYMBOL:
				case CONSISTENT_SYMBOL:
				case CONSTRAINT_CATALOG_SYMBOL:
				case CONSTRAINT_SCHEMA_SYMBOL:
				case CONSTRAINT_NAME_SYMBOL:
				case CONTEXT_SYMBOL:
				case CPU_SYMBOL:
				case CURRENT_SYMBOL:
				case CURSOR_NAME_SYMBOL:
				case DATA_SYMBOL:
				case DATAFILE_SYMBOL:
				case DATETIME_SYMBOL:
				case DATE_SYMBOL:
				case DAY_SYMBOL:
				case DEFAULT_AUTH_SYMBOL:
				case DEFINER_SYMBOL:
				case DELAY_KEY_WRITE_SYMBOL:
				case DIAGNOSTICS_SYMBOL:
				case DIRECTORY_SYMBOL:
				case DISABLE_SYMBOL:
				case DISCARD_SYMBOL:
				case DISK_SYMBOL:
				case DUMPFILE_SYMBOL:
				case DUPLICATE_SYMBOL:
				case DYNAMIC_SYMBOL:
				case ENDS_SYMBOL:
				case ENUM_SYMBOL:
				case ENGINE_SYMBOL:
				case ENGINES_SYMBOL:
				case ERROR_SYMBOL:
				case ERRORS_SYMBOL:
				case ESCAPE_SYMBOL:
				case EVENTS_SYMBOL:
				case EVERY_SYMBOL:
				case EXPANSION_SYMBOL:
				case EXPORT_SYMBOL:
				case EXTENDED_SYMBOL:
				case EXTENT_SIZE_SYMBOL:
				case FAULTS_SYMBOL:
				case FAST_SYMBOL:
				case FOUND_SYMBOL:
				case ENABLE_SYMBOL:
				case FULL_SYMBOL:
				case FILE_BLOCK_SIZE_SYMBOL:
				case FILTER_SYMBOL:
				case FIRST_SYMBOL:
				case FIXED_SYMBOL:
				case GENERAL_SYMBOL:
				case GEOMETRY_SYMBOL:
				case GEOMETRYCOLLECTION_SYMBOL:
				case GET_FORMAT_SYMBOL:
				case GRANTS_SYMBOL:
				case HASH_SYMBOL:
				case HOSTS_SYMBOL:
				case HOUR_SYMBOL:
				case IDENTIFIED_SYMBOL:
				case IGNORE_SERVER_IDS_SYMBOL:
				case INVOKER_SYMBOL:
				case INDEXES_SYMBOL:
				case INITIAL_SIZE_SYMBOL:
				case INSTANCE_SYMBOL:
				case IO_SYMBOL:
				case IPC_SYMBOL:
				case ISOLATION_SYMBOL:
				case ISSUER_SYMBOL:
				case INSERT_METHOD_SYMBOL:
				case JSON_SYMBOL:
				case KEY_BLOCK_SIZE_SYMBOL:
				case LAST_SYMBOL:
				case LEAVES_SYMBOL:
				case LESS_SYMBOL:
				case LEVEL_SYMBOL:
				case LINESTRING_SYMBOL:
				case LIST_SYMBOL:
				case LOCKS_SYMBOL:
				case LOGFILE_SYMBOL:
				case LOGS_SYMBOL:
				case MAX_ROWS_SYMBOL:
				case MASTER_SYMBOL:
				case MASTER_HEARTBEAT_PERIOD_SYMBOL:
				case MASTER_HOST_SYMBOL:
				case MASTER_PORT_SYMBOL:
				case MASTER_LOG_FILE_SYMBOL:
				case MASTER_LOG_POS_SYMBOL:
				case MASTER_USER_SYMBOL:
				case MASTER_PASSWORD_SYMBOL:
				case MASTER_SERVER_ID_SYMBOL:
				case MASTER_CONNECT_RETRY_SYMBOL:
				case MASTER_RETRY_COUNT_SYMBOL:
				case MASTER_DELAY_SYMBOL:
				case MASTER_SSL_SYMBOL:
				case MASTER_SSL_CA_SYMBOL:
				case MASTER_SSL_CAPATH_SYMBOL:
				case MASTER_TLS_VERSION_SYMBOL:
				case MASTER_SSL_CERT_SYMBOL:
				case MASTER_SSL_CIPHER_SYMBOL:
				case MASTER_SSL_CRL_SYMBOL:
				case MASTER_SSL_CRLPATH_SYMBOL:
				case MASTER_SSL_KEY_SYMBOL:
				case MASTER_AUTO_POSITION_SYMBOL:
				case MAX_CONNECTIONS_PER_HOUR_SYMBOL:
				case MAX_QUERIES_PER_HOUR_SYMBOL:
				case MAX_SIZE_SYMBOL:
				case MAX_UPDATES_PER_HOUR_SYMBOL:
				case MAX_USER_CONNECTIONS_SYMBOL:
				case MEDIUM_SYMBOL:
				case MEMORY_SYMBOL:
				case MERGE_SYMBOL:
				case MESSAGE_TEXT_SYMBOL:
				case MICROSECOND_SYMBOL:
				case MIGRATE_SYMBOL:
				case MINUTE_SYMBOL:
				case MIN_ROWS_SYMBOL:
				case MODIFY_SYMBOL:
				case MODE_SYMBOL:
				case MONTH_SYMBOL:
				case MULTILINESTRING_SYMBOL:
				case MULTIPOINT_SYMBOL:
				case MULTIPOLYGON_SYMBOL:
				case MUTEX_SYMBOL:
				case MYSQL_ERRNO_SYMBOL:
				case NAME_SYMBOL:
				case NAMES_SYMBOL:
				case NATIONAL_SYMBOL:
				case NCHAR_SYMBOL:
				case NDBCLUSTER_SYMBOL:
				case NEVER_SYMBOL:
				case NEXT_SYMBOL:
				case NEW_SYMBOL:
				case NO_WAIT_SYMBOL:
				case NODEGROUP_SYMBOL:
				case NUMBER_SYMBOL:
				case NVARCHAR_SYMBOL:
				case OFFSET_SYMBOL:
				case ONE_SYMBOL:
				case PACK_KEYS_SYMBOL:
				case PAGE_SYMBOL:
				case PARTIAL_SYMBOL:
				case PARTITIONING_SYMBOL:
				case PARTITIONS_SYMBOL:
				case PASSWORD_SYMBOL:
				case PHASE_SYMBOL:
				case PLUGIN_DIR_SYMBOL:
				case PLUGIN_SYMBOL:
				case PLUGINS_SYMBOL:
				case POINT_SYMBOL:
				case POLYGON_SYMBOL:
				case PRESERVE_SYMBOL:
				case PREV_SYMBOL:
				case PRIVILEGES_SYMBOL:
				case PROCESSLIST_SYMBOL:
				case PROFILE_SYMBOL:
				case PROFILES_SYMBOL:
				case QUARTER_SYMBOL:
				case QUERY_SYMBOL:
				case QUICK_SYMBOL:
				case READ_ONLY_SYMBOL:
				case REBUILD_SYMBOL:
				case RECOVER_SYMBOL:
				case REDO_BUFFER_SIZE_SYMBOL:
				case REDUNDANT_SYMBOL:
				case RELAY_SYMBOL:
				case RELAYLOG_SYMBOL:
				case RELAY_LOG_FILE_SYMBOL:
				case RELAY_LOG_POS_SYMBOL:
				case RELAY_THREAD_SYMBOL:
				case REORGANIZE_SYMBOL:
				case REPEATABLE_SYMBOL:
				case REPLICATE_DO_DB_SYMBOL:
				case REPLICATE_IGNORE_DB_SYMBOL:
				case REPLICATE_DO_TABLE_SYMBOL:
				case REPLICATE_IGNORE_TABLE_SYMBOL:
				case REPLICATE_WILD_DO_TABLE_SYMBOL:
				case REPLICATE_WILD_IGNORE_TABLE_SYMBOL:
				case REPLICATE_REWRITE_DB_SYMBOL:
				case RESUME_SYMBOL:
				case RETURNED_SQLSTATE_SYMBOL:
				case RETURNS_SYMBOL:
				case REVERSE_SYMBOL:
				case ROLLUP_SYMBOL:
				case ROTATE_SYMBOL:
				case ROUTINE_SYMBOL:
				case ROW_COUNT_SYMBOL:
				case ROW_FORMAT_SYMBOL:
				case RTREE_SYMBOL:
				case SCHEDULE_SYMBOL:
				case SCHEMA_NAME_SYMBOL:
				case SECOND_SYMBOL:
				case SERIAL_SYMBOL:
				case SERIALIZABLE_SYMBOL:
				case SIMPLE_SYMBOL:
				case SHARE_SYMBOL:
				case SLOW_SYMBOL:
				case SNAPSHOT_SYMBOL:
				case SOUNDS_SYMBOL:
				case SOURCE_SYMBOL:
				case SQL_AFTER_GTIDS_SYMBOL:
				case SQL_AFTER_MTS_GAPS_SYMBOL:
				case SQL_BEFORE_GTIDS_SYMBOL:
				case SQL_BUFFER_RESULT_SYMBOL:
				case SQL_NO_CACHE_SYMBOL:
				case SQL_THREAD_SYMBOL:
				case STACKED_SYMBOL:
				case STARTS_SYMBOL:
				case STATS_AUTO_RECALC_SYMBOL:
				case STATS_PERSISTENT_SYMBOL:
				case STATS_SAMPLE_PAGES_SYMBOL:
				case STATUS_SYMBOL:
				case STORAGE_SYMBOL:
				case STRING_SYMBOL:
				case SUBCLASS_ORIGIN_SYMBOL:
				case SUBDATE_SYMBOL:
				case SUBJECT_SYMBOL:
				case SUBPARTITION_SYMBOL:
				case SUBPARTITIONS_SYMBOL:
				case SUSPEND_SYMBOL:
				case SWAPS_SYMBOL:
				case SWITCHES_SYMBOL:
				case TABLE_NAME_SYMBOL:
				case TABLES_SYMBOL:
				case TABLE_CHECKSUM_SYMBOL:
				case TABLESPACE_SYMBOL:
				case TEMPORARY_SYMBOL:
				case TEMPTABLE_SYMBOL:
				case TEXT_SYMBOL:
				case THAN_SYMBOL:
				case TRANSACTION_SYMBOL:
				case TRIGGERS_SYMBOL:
				case TIMESTAMP_SYMBOL:
				case TIMESTAMP_ADD_SYMBOL:
				case TIMESTAMP_DIFF_SYMBOL:
				case TIME_SYMBOL:
				case TYPES_SYMBOL:
				case TYPE_SYMBOL:
				case UNCOMMITTED_SYMBOL:
				case UNDEFINED_SYMBOL:
				case UNDO_BUFFER_SIZE_SYMBOL:
				case UNDOFILE_SYMBOL:
				case UNKNOWN_SYMBOL:
				case UNTIL_SYMBOL:
				case USER_RESOURCES_SYMBOL:
				case USER_SYMBOL:
				case USE_FRM_SYMBOL:
				case VARIABLES_SYMBOL:
				case VIEW_SYMBOL:
				case VALUE_SYMBOL:
				case WARNINGS_SYMBOL:
				case WAIT_SYMBOL:
				case WEEK_SYMBOL:
				case WORK_SYMBOL:
				case WEIGHT_STRING_SYMBOL:
				case X509_SYMBOL:
				case XID_SYMBOL:
				case XML_SYMBOL:
				case YEAR_SYMBOL:
				case EXCHANGE_SYMBOL:
				case EXPIRE_SYMBOL:
				case ONLY_SYMBOL:
				case VALIDATION_SYMBOL:
				case WITHOUT_SYMBOL:
				case ROLE_SYMBOL:
				case ADMIN_SYMBOL:
				case INVISIBLE_SYMBOL:
				case VISIBLE_SYMBOL:
				case COMPONENT_SYMBOL:
				case SKIP_SYMBOL:
				case LOCKED_SYMBOL:
				case NOWAIT_SYMBOL:
				case HISTOGRAM_SYMBOL:
				case BUCKETS_SYMBOL:
				case EXCLUDE_SYMBOL:
				case FOLLOWING_SYMBOL:
				case NULLS_SYMBOL:
				case OTHERS_SYMBOL:
				case PRECEDING_SYMBOL:
				case RESPECT_SYMBOL:
				case TIES_SYMBOL:
				case UNBOUNDED_SYMBOL:
				case NESTED_SYMBOL:
				case ORDINALITY_SYMBOL:
				case PATH_SYMBOL:
				case HISTORY_SYMBOL:
				case REUSE_SYMBOL:
				case SRID_SYMBOL:
				case THREAD_PRIORITY_SYMBOL:
				case VCPU_SYMBOL:
				case MASTER_PUBLIC_KEY_PATH_SYMBOL:
				case GET_MASTER_PUBLIC_KEY_SYMBOL:
				case DEFINITION_SYMBOL:
				case DESCRIPTION_SYMBOL:
				case ORGANIZATION_SYMBOL:
				case REFERENCE_SYMBOL:
				case OPTIONAL_SYMBOL:
				case SECONDARY_SYMBOL:
				case SECONDARY_ENGINE_SYMBOL:
				case SECONDARY_LOAD_SYMBOL:
				case SECONDARY_UNLOAD_SYMBOL:
				case ACTIVE_SYMBOL:
				case INACTIVE_SYMBOL:
				case RETAIN_SYMBOL:
				case OLD_SYMBOL:
				case NETWORK_NAMESPACE_SYMBOL:
				case ENFORCED_SYMBOL:
				case OJ_SYMBOL:
				case MASTER_COMPRESSION_ALGORITHM_SYMBOL:
				case MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL:
				case PRIVILEGE_CHECKS_USER_SYMBOL:
				case MASTER_TLS_CIPHERSUITES_SYMBOL:
					{
					setState(8282);
					identifierKeywordsUnambiguous();
					}
					break;
				case EXECUTE_SYMBOL:
				case SHUTDOWN_SYMBOL:
				case RESTART_SYMBOL:
					{
					setState(8283);
					identifierKeywordsAmbiguous1RolesAndLabels();
					}
					break;
				case ASCII_SYMBOL:
				case BEGIN_SYMBOL:
				case BYTE_SYMBOL:
				case CACHE_SYMBOL:
				case CHARSET_SYMBOL:
				case CHECKSUM_SYMBOL:
				case COMMENT_SYMBOL:
				case COMMIT_SYMBOL:
				case CONTAINS_SYMBOL:
				case DEALLOCATE_SYMBOL:
				case DO_SYMBOL:
				case END_SYMBOL:
				case FLUSH_SYMBOL:
				case FOLLOWS_SYMBOL:
				case HANDLER_SYMBOL:
				case HELP_SYMBOL:
				case INSTALL_SYMBOL:
				case LANGUAGE_SYMBOL:
				case NO_SYMBOL:
				case PRECEDES_SYMBOL:
				case PREPARE_SYMBOL:
				case REPAIR_SYMBOL:
				case RESET_SYMBOL:
				case ROLLBACK_SYMBOL:
				case SAVEPOINT_SYMBOL:
				case SIGNED_SYMBOL:
				case SLAVE_SYMBOL:
				case START_SYMBOL:
				case STOP_SYMBOL:
				case TRUNCATE_SYMBOL:
				case UNICODE_SYMBOL:
				case UNINSTALL_SYMBOL:
				case XA_SYMBOL:
				case IMPORT_SYMBOL:
				case CLONE_SYMBOL:
					{
					setState(8284);
					identifierKeywordsAmbiguous2Labels();
					}
					break;
				case EVENT_SYMBOL:
				case FILE_SYMBOL:
				case NONE_SYMBOL:
				case PROCESS_SYMBOL:
				case PROXY_SYMBOL:
				case RELOAD_SYMBOL:
				case REPLICATION_SYMBOL:
				case SUPER_SYMBOL:
				case RESOURCE_SYMBOL:
					{
					setState(8285);
					identifierKeywordsAmbiguous3Roles();
					}
					break;
				case GLOBAL_SYMBOL:
				case LOCAL_SYMBOL:
				case SESSION_SYMBOL:
				case PERSIST_SYMBOL:
				case PERSIST_ONLY_SYMBOL:
					{
					setState(8286);
					identifierKeywordsAmbiguous4SystemVariables();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierKeywordsAmbiguous1RolesAndLabelsContext extends ParserRuleContext {
		public TerminalNode EXECUTE_SYMBOL() { return getToken(MySQLParser.EXECUTE_SYMBOL, 0); }
		public TerminalNode RESTART_SYMBOL() { return getToken(MySQLParser.RESTART_SYMBOL, 0); }
		public TerminalNode SHUTDOWN_SYMBOL() { return getToken(MySQLParser.SHUTDOWN_SYMBOL, 0); }
		public IdentifierKeywordsAmbiguous1RolesAndLabelsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierKeywordsAmbiguous1RolesAndLabels; }
	}

	public final IdentifierKeywordsAmbiguous1RolesAndLabelsContext identifierKeywordsAmbiguous1RolesAndLabels() throws RecognitionException {
		IdentifierKeywordsAmbiguous1RolesAndLabelsContext _localctx = new IdentifierKeywordsAmbiguous1RolesAndLabelsContext(_ctx, getState());
		enterRule(_localctx, 1190, RULE_identifierKeywordsAmbiguous1RolesAndLabels);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8291);
			_la = _input.LA(1);
			if ( !(_la==EXECUTE_SYMBOL || _la==SHUTDOWN_SYMBOL || _la==RESTART_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierKeywordsAmbiguous2LabelsContext extends ParserRuleContext {
		public TerminalNode ASCII_SYMBOL() { return getToken(MySQLParser.ASCII_SYMBOL, 0); }
		public TerminalNode BEGIN_SYMBOL() { return getToken(MySQLParser.BEGIN_SYMBOL, 0); }
		public TerminalNode BYTE_SYMBOL() { return getToken(MySQLParser.BYTE_SYMBOL, 0); }
		public TerminalNode CACHE_SYMBOL() { return getToken(MySQLParser.CACHE_SYMBOL, 0); }
		public TerminalNode CHARSET_SYMBOL() { return getToken(MySQLParser.CHARSET_SYMBOL, 0); }
		public TerminalNode CHECKSUM_SYMBOL() { return getToken(MySQLParser.CHECKSUM_SYMBOL, 0); }
		public TerminalNode CLONE_SYMBOL() { return getToken(MySQLParser.CLONE_SYMBOL, 0); }
		public TerminalNode COMMENT_SYMBOL() { return getToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public TerminalNode COMMIT_SYMBOL() { return getToken(MySQLParser.COMMIT_SYMBOL, 0); }
		public TerminalNode CONTAINS_SYMBOL() { return getToken(MySQLParser.CONTAINS_SYMBOL, 0); }
		public TerminalNode DEALLOCATE_SYMBOL() { return getToken(MySQLParser.DEALLOCATE_SYMBOL, 0); }
		public TerminalNode DO_SYMBOL() { return getToken(MySQLParser.DO_SYMBOL, 0); }
		public TerminalNode END_SYMBOL() { return getToken(MySQLParser.END_SYMBOL, 0); }
		public TerminalNode FLUSH_SYMBOL() { return getToken(MySQLParser.FLUSH_SYMBOL, 0); }
		public TerminalNode FOLLOWS_SYMBOL() { return getToken(MySQLParser.FOLLOWS_SYMBOL, 0); }
		public TerminalNode HANDLER_SYMBOL() { return getToken(MySQLParser.HANDLER_SYMBOL, 0); }
		public TerminalNode HELP_SYMBOL() { return getToken(MySQLParser.HELP_SYMBOL, 0); }
		public TerminalNode IMPORT_SYMBOL() { return getToken(MySQLParser.IMPORT_SYMBOL, 0); }
		public TerminalNode INSTALL_SYMBOL() { return getToken(MySQLParser.INSTALL_SYMBOL, 0); }
		public TerminalNode LANGUAGE_SYMBOL() { return getToken(MySQLParser.LANGUAGE_SYMBOL, 0); }
		public TerminalNode NO_SYMBOL() { return getToken(MySQLParser.NO_SYMBOL, 0); }
		public TerminalNode PRECEDES_SYMBOL() { return getToken(MySQLParser.PRECEDES_SYMBOL, 0); }
		public TerminalNode PREPARE_SYMBOL() { return getToken(MySQLParser.PREPARE_SYMBOL, 0); }
		public TerminalNode REPAIR_SYMBOL() { return getToken(MySQLParser.REPAIR_SYMBOL, 0); }
		public TerminalNode RESET_SYMBOL() { return getToken(MySQLParser.RESET_SYMBOL, 0); }
		public TerminalNode ROLLBACK_SYMBOL() { return getToken(MySQLParser.ROLLBACK_SYMBOL, 0); }
		public TerminalNode SAVEPOINT_SYMBOL() { return getToken(MySQLParser.SAVEPOINT_SYMBOL, 0); }
		public TerminalNode SIGNED_SYMBOL() { return getToken(MySQLParser.SIGNED_SYMBOL, 0); }
		public TerminalNode SLAVE_SYMBOL() { return getToken(MySQLParser.SLAVE_SYMBOL, 0); }
		public TerminalNode START_SYMBOL() { return getToken(MySQLParser.START_SYMBOL, 0); }
		public TerminalNode STOP_SYMBOL() { return getToken(MySQLParser.STOP_SYMBOL, 0); }
		public TerminalNode TRUNCATE_SYMBOL() { return getToken(MySQLParser.TRUNCATE_SYMBOL, 0); }
		public TerminalNode UNICODE_SYMBOL() { return getToken(MySQLParser.UNICODE_SYMBOL, 0); }
		public TerminalNode UNINSTALL_SYMBOL() { return getToken(MySQLParser.UNINSTALL_SYMBOL, 0); }
		public TerminalNode XA_SYMBOL() { return getToken(MySQLParser.XA_SYMBOL, 0); }
		public IdentifierKeywordsAmbiguous2LabelsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierKeywordsAmbiguous2Labels; }
	}

	public final IdentifierKeywordsAmbiguous2LabelsContext identifierKeywordsAmbiguous2Labels() throws RecognitionException {
		IdentifierKeywordsAmbiguous2LabelsContext _localctx = new IdentifierKeywordsAmbiguous2LabelsContext(_ctx, getState());
		enterRule(_localctx, 1192, RULE_identifierKeywordsAmbiguous2Labels);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8293);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASCII_SYMBOL) | (1L << BEGIN_SYMBOL) | (1L << BYTE_SYMBOL) | (1L << CACHE_SYMBOL) | (1L << CHARSET_SYMBOL) | (1L << CHECKSUM_SYMBOL) | (1L << COMMENT_SYMBOL) | (1L << COMMIT_SYMBOL) | (1L << CONTAINS_SYMBOL) | (1L << DEALLOCATE_SYMBOL) | (1L << DO_SYMBOL) | (1L << END_SYMBOL) | (1L << FLUSH_SYMBOL) | (1L << FOLLOWS_SYMBOL) | (1L << HANDLER_SYMBOL) | (1L << HELP_SYMBOL) | (1L << INSTALL_SYMBOL) | (1L << LANGUAGE_SYMBOL) | (1L << NO_SYMBOL) | (1L << PRECEDES_SYMBOL) | (1L << PREPARE_SYMBOL) | (1L << REPAIR_SYMBOL) | (1L << RESET_SYMBOL) | (1L << ROLLBACK_SYMBOL) | (1L << SAVEPOINT_SYMBOL) | (1L << SIGNED_SYMBOL) | (1L << SLAVE_SYMBOL) | (1L << START_SYMBOL) | (1L << STOP_SYMBOL) | (1L << TRUNCATE_SYMBOL) | (1L << UNICODE_SYMBOL) | (1L << UNINSTALL_SYMBOL) | (1L << XA_SYMBOL))) != 0) || _la==IMPORT_SYMBOL || _la==CLONE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LabelKeywordContext extends ParserRuleContext {
		public RoleOrLabelKeywordContext roleOrLabelKeyword() {
			return getRuleContext(RoleOrLabelKeywordContext.class,0);
		}
		public TerminalNode EVENT_SYMBOL() { return getToken(MySQLParser.EVENT_SYMBOL, 0); }
		public TerminalNode FILE_SYMBOL() { return getToken(MySQLParser.FILE_SYMBOL, 0); }
		public TerminalNode NONE_SYMBOL() { return getToken(MySQLParser.NONE_SYMBOL, 0); }
		public TerminalNode PROCESS_SYMBOL() { return getToken(MySQLParser.PROCESS_SYMBOL, 0); }
		public TerminalNode PROXY_SYMBOL() { return getToken(MySQLParser.PROXY_SYMBOL, 0); }
		public TerminalNode RELOAD_SYMBOL() { return getToken(MySQLParser.RELOAD_SYMBOL, 0); }
		public TerminalNode REPLICATION_SYMBOL() { return getToken(MySQLParser.REPLICATION_SYMBOL, 0); }
		public TerminalNode RESOURCE_SYMBOL() { return getToken(MySQLParser.RESOURCE_SYMBOL, 0); }
		public TerminalNode SUPER_SYMBOL() { return getToken(MySQLParser.SUPER_SYMBOL, 0); }
		public IdentifierKeywordsUnambiguousContext identifierKeywordsUnambiguous() {
			return getRuleContext(IdentifierKeywordsUnambiguousContext.class,0);
		}
		public IdentifierKeywordsAmbiguous3RolesContext identifierKeywordsAmbiguous3Roles() {
			return getRuleContext(IdentifierKeywordsAmbiguous3RolesContext.class,0);
		}
		public IdentifierKeywordsAmbiguous4SystemVariablesContext identifierKeywordsAmbiguous4SystemVariables() {
			return getRuleContext(IdentifierKeywordsAmbiguous4SystemVariablesContext.class,0);
		}
		public LabelKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labelKeyword; }
	}

	public final LabelKeywordContext labelKeyword() throws RecognitionException {
		LabelKeywordContext _localctx = new LabelKeywordContext(_ctx, getState());
		enterRule(_localctx, 1194, RULE_labelKeyword);
		try {
			setState(8313);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1113,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8295);
				if (!(serverVersion < 80017)) throw new FailedPredicateException(this, "serverVersion < 80017");
				setState(8306);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1111,_ctx) ) {
				case 1:
					{
					setState(8296);
					roleOrLabelKeyword();
					}
					break;
				case 2:
					{
					setState(8297);
					match(EVENT_SYMBOL);
					}
					break;
				case 3:
					{
					setState(8298);
					match(FILE_SYMBOL);
					}
					break;
				case 4:
					{
					setState(8299);
					match(NONE_SYMBOL);
					}
					break;
				case 5:
					{
					setState(8300);
					match(PROCESS_SYMBOL);
					}
					break;
				case 6:
					{
					setState(8301);
					match(PROXY_SYMBOL);
					}
					break;
				case 7:
					{
					setState(8302);
					match(RELOAD_SYMBOL);
					}
					break;
				case 8:
					{
					setState(8303);
					match(REPLICATION_SYMBOL);
					}
					break;
				case 9:
					{
					setState(8304);
					match(RESOURCE_SYMBOL);
					}
					break;
				case 10:
					{
					setState(8305);
					match(SUPER_SYMBOL);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8311);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ACCOUNT_SYMBOL:
				case ALWAYS_SYMBOL:
				case BACKUP_SYMBOL:
				case CLOSE_SYMBOL:
				case FORMAT_SYMBOL:
				case GROUP_REPLICATION_SYMBOL:
				case HOST_SYMBOL:
				case OPEN_SYMBOL:
				case OPTIONS_SYMBOL:
				case OWNER_SYMBOL:
				case PARSER_SYMBOL:
				case PORT_SYMBOL:
				case REMOVE_SYMBOL:
				case RESTORE_SYMBOL:
				case SECURITY_SYMBOL:
				case SERVER_SYMBOL:
				case SOCKET_SYMBOL:
				case SONAME_SYMBOL:
				case UPGRADE_SYMBOL:
				case WRAPPER_SYMBOL:
				case ACTION_SYMBOL:
				case ADDDATE_SYMBOL:
				case AFTER_SYMBOL:
				case AGAINST_SYMBOL:
				case AGGREGATE_SYMBOL:
				case ALGORITHM_SYMBOL:
				case ANY_SYMBOL:
				case AT_SYMBOL:
				case AUTO_INCREMENT_SYMBOL:
				case AUTOEXTEND_SIZE_SYMBOL:
				case AVG_ROW_LENGTH_SYMBOL:
				case AVG_SYMBOL:
				case BINLOG_SYMBOL:
				case BIT_SYMBOL:
				case BLOCK_SYMBOL:
				case BOOL_SYMBOL:
				case BOOLEAN_SYMBOL:
				case BTREE_SYMBOL:
				case CASCADED_SYMBOL:
				case CATALOG_NAME_SYMBOL:
				case CHAIN_SYMBOL:
				case CHANGED_SYMBOL:
				case CHANNEL_SYMBOL:
				case CIPHER_SYMBOL:
				case CLIENT_SYMBOL:
				case CLASS_ORIGIN_SYMBOL:
				case COALESCE_SYMBOL:
				case CODE_SYMBOL:
				case COLLATION_SYMBOL:
				case COLUMN_NAME_SYMBOL:
				case COLUMN_FORMAT_SYMBOL:
				case COLUMNS_SYMBOL:
				case COMMITTED_SYMBOL:
				case COMPACT_SYMBOL:
				case COMPLETION_SYMBOL:
				case COMPRESSED_SYMBOL:
				case COMPRESSION_SYMBOL:
				case ENCRYPTION_SYMBOL:
				case CONCURRENT_SYMBOL:
				case CONNECTION_SYMBOL:
				case CONSISTENT_SYMBOL:
				case CONSTRAINT_CATALOG_SYMBOL:
				case CONSTRAINT_SCHEMA_SYMBOL:
				case CONSTRAINT_NAME_SYMBOL:
				case CONTEXT_SYMBOL:
				case CPU_SYMBOL:
				case CURRENT_SYMBOL:
				case CURSOR_NAME_SYMBOL:
				case DATA_SYMBOL:
				case DATAFILE_SYMBOL:
				case DATETIME_SYMBOL:
				case DATE_SYMBOL:
				case DAY_SYMBOL:
				case DEFAULT_AUTH_SYMBOL:
				case DEFINER_SYMBOL:
				case DELAY_KEY_WRITE_SYMBOL:
				case DIAGNOSTICS_SYMBOL:
				case DIRECTORY_SYMBOL:
				case DISABLE_SYMBOL:
				case DISCARD_SYMBOL:
				case DISK_SYMBOL:
				case DUMPFILE_SYMBOL:
				case DUPLICATE_SYMBOL:
				case DYNAMIC_SYMBOL:
				case ENDS_SYMBOL:
				case ENUM_SYMBOL:
				case ENGINE_SYMBOL:
				case ENGINES_SYMBOL:
				case ERROR_SYMBOL:
				case ERRORS_SYMBOL:
				case ESCAPE_SYMBOL:
				case EVENTS_SYMBOL:
				case EVERY_SYMBOL:
				case EXPANSION_SYMBOL:
				case EXPORT_SYMBOL:
				case EXTENDED_SYMBOL:
				case EXTENT_SIZE_SYMBOL:
				case FAULTS_SYMBOL:
				case FAST_SYMBOL:
				case FOUND_SYMBOL:
				case ENABLE_SYMBOL:
				case FULL_SYMBOL:
				case FILE_BLOCK_SIZE_SYMBOL:
				case FILTER_SYMBOL:
				case FIRST_SYMBOL:
				case FIXED_SYMBOL:
				case GENERAL_SYMBOL:
				case GEOMETRY_SYMBOL:
				case GEOMETRYCOLLECTION_SYMBOL:
				case GET_FORMAT_SYMBOL:
				case GRANTS_SYMBOL:
				case HASH_SYMBOL:
				case HOSTS_SYMBOL:
				case HOUR_SYMBOL:
				case IDENTIFIED_SYMBOL:
				case IGNORE_SERVER_IDS_SYMBOL:
				case INVOKER_SYMBOL:
				case INDEXES_SYMBOL:
				case INITIAL_SIZE_SYMBOL:
				case INSTANCE_SYMBOL:
				case IO_SYMBOL:
				case IPC_SYMBOL:
				case ISOLATION_SYMBOL:
				case ISSUER_SYMBOL:
				case INSERT_METHOD_SYMBOL:
				case JSON_SYMBOL:
				case KEY_BLOCK_SIZE_SYMBOL:
				case LAST_SYMBOL:
				case LEAVES_SYMBOL:
				case LESS_SYMBOL:
				case LEVEL_SYMBOL:
				case LINESTRING_SYMBOL:
				case LIST_SYMBOL:
				case LOCKS_SYMBOL:
				case LOGFILE_SYMBOL:
				case LOGS_SYMBOL:
				case MAX_ROWS_SYMBOL:
				case MASTER_SYMBOL:
				case MASTER_HEARTBEAT_PERIOD_SYMBOL:
				case MASTER_HOST_SYMBOL:
				case MASTER_PORT_SYMBOL:
				case MASTER_LOG_FILE_SYMBOL:
				case MASTER_LOG_POS_SYMBOL:
				case MASTER_USER_SYMBOL:
				case MASTER_PASSWORD_SYMBOL:
				case MASTER_SERVER_ID_SYMBOL:
				case MASTER_CONNECT_RETRY_SYMBOL:
				case MASTER_RETRY_COUNT_SYMBOL:
				case MASTER_DELAY_SYMBOL:
				case MASTER_SSL_SYMBOL:
				case MASTER_SSL_CA_SYMBOL:
				case MASTER_SSL_CAPATH_SYMBOL:
				case MASTER_TLS_VERSION_SYMBOL:
				case MASTER_SSL_CERT_SYMBOL:
				case MASTER_SSL_CIPHER_SYMBOL:
				case MASTER_SSL_CRL_SYMBOL:
				case MASTER_SSL_CRLPATH_SYMBOL:
				case MASTER_SSL_KEY_SYMBOL:
				case MASTER_AUTO_POSITION_SYMBOL:
				case MAX_CONNECTIONS_PER_HOUR_SYMBOL:
				case MAX_QUERIES_PER_HOUR_SYMBOL:
				case MAX_SIZE_SYMBOL:
				case MAX_UPDATES_PER_HOUR_SYMBOL:
				case MAX_USER_CONNECTIONS_SYMBOL:
				case MEDIUM_SYMBOL:
				case MEMORY_SYMBOL:
				case MERGE_SYMBOL:
				case MESSAGE_TEXT_SYMBOL:
				case MICROSECOND_SYMBOL:
				case MIGRATE_SYMBOL:
				case MINUTE_SYMBOL:
				case MIN_ROWS_SYMBOL:
				case MODIFY_SYMBOL:
				case MODE_SYMBOL:
				case MONTH_SYMBOL:
				case MULTILINESTRING_SYMBOL:
				case MULTIPOINT_SYMBOL:
				case MULTIPOLYGON_SYMBOL:
				case MUTEX_SYMBOL:
				case MYSQL_ERRNO_SYMBOL:
				case NAME_SYMBOL:
				case NAMES_SYMBOL:
				case NATIONAL_SYMBOL:
				case NCHAR_SYMBOL:
				case NDBCLUSTER_SYMBOL:
				case NEVER_SYMBOL:
				case NEXT_SYMBOL:
				case NEW_SYMBOL:
				case NO_WAIT_SYMBOL:
				case NODEGROUP_SYMBOL:
				case NUMBER_SYMBOL:
				case NVARCHAR_SYMBOL:
				case OFFSET_SYMBOL:
				case ONE_SYMBOL:
				case PACK_KEYS_SYMBOL:
				case PAGE_SYMBOL:
				case PARTIAL_SYMBOL:
				case PARTITIONING_SYMBOL:
				case PARTITIONS_SYMBOL:
				case PASSWORD_SYMBOL:
				case PHASE_SYMBOL:
				case PLUGIN_DIR_SYMBOL:
				case PLUGIN_SYMBOL:
				case PLUGINS_SYMBOL:
				case POINT_SYMBOL:
				case POLYGON_SYMBOL:
				case PRESERVE_SYMBOL:
				case PREV_SYMBOL:
				case PRIVILEGES_SYMBOL:
				case PROCESSLIST_SYMBOL:
				case PROFILE_SYMBOL:
				case PROFILES_SYMBOL:
				case QUARTER_SYMBOL:
				case QUERY_SYMBOL:
				case QUICK_SYMBOL:
				case READ_ONLY_SYMBOL:
				case REBUILD_SYMBOL:
				case RECOVER_SYMBOL:
				case REDO_BUFFER_SIZE_SYMBOL:
				case REDUNDANT_SYMBOL:
				case RELAY_SYMBOL:
				case RELAYLOG_SYMBOL:
				case RELAY_LOG_FILE_SYMBOL:
				case RELAY_LOG_POS_SYMBOL:
				case RELAY_THREAD_SYMBOL:
				case REORGANIZE_SYMBOL:
				case REPEATABLE_SYMBOL:
				case REPLICATE_DO_DB_SYMBOL:
				case REPLICATE_IGNORE_DB_SYMBOL:
				case REPLICATE_DO_TABLE_SYMBOL:
				case REPLICATE_IGNORE_TABLE_SYMBOL:
				case REPLICATE_WILD_DO_TABLE_SYMBOL:
				case REPLICATE_WILD_IGNORE_TABLE_SYMBOL:
				case REPLICATE_REWRITE_DB_SYMBOL:
				case RESUME_SYMBOL:
				case RETURNED_SQLSTATE_SYMBOL:
				case RETURNS_SYMBOL:
				case REVERSE_SYMBOL:
				case ROLLUP_SYMBOL:
				case ROTATE_SYMBOL:
				case ROUTINE_SYMBOL:
				case ROW_COUNT_SYMBOL:
				case ROW_FORMAT_SYMBOL:
				case RTREE_SYMBOL:
				case SCHEDULE_SYMBOL:
				case SCHEMA_NAME_SYMBOL:
				case SECOND_SYMBOL:
				case SERIAL_SYMBOL:
				case SERIALIZABLE_SYMBOL:
				case SIMPLE_SYMBOL:
				case SHARE_SYMBOL:
				case SLOW_SYMBOL:
				case SNAPSHOT_SYMBOL:
				case SOUNDS_SYMBOL:
				case SOURCE_SYMBOL:
				case SQL_AFTER_GTIDS_SYMBOL:
				case SQL_AFTER_MTS_GAPS_SYMBOL:
				case SQL_BEFORE_GTIDS_SYMBOL:
				case SQL_BUFFER_RESULT_SYMBOL:
				case SQL_NO_CACHE_SYMBOL:
				case SQL_THREAD_SYMBOL:
				case STACKED_SYMBOL:
				case STARTS_SYMBOL:
				case STATS_AUTO_RECALC_SYMBOL:
				case STATS_PERSISTENT_SYMBOL:
				case STATS_SAMPLE_PAGES_SYMBOL:
				case STATUS_SYMBOL:
				case STORAGE_SYMBOL:
				case STRING_SYMBOL:
				case SUBCLASS_ORIGIN_SYMBOL:
				case SUBDATE_SYMBOL:
				case SUBJECT_SYMBOL:
				case SUBPARTITION_SYMBOL:
				case SUBPARTITIONS_SYMBOL:
				case SUSPEND_SYMBOL:
				case SWAPS_SYMBOL:
				case SWITCHES_SYMBOL:
				case TABLE_NAME_SYMBOL:
				case TABLES_SYMBOL:
				case TABLE_CHECKSUM_SYMBOL:
				case TABLESPACE_SYMBOL:
				case TEMPORARY_SYMBOL:
				case TEMPTABLE_SYMBOL:
				case TEXT_SYMBOL:
				case THAN_SYMBOL:
				case TRANSACTION_SYMBOL:
				case TRIGGERS_SYMBOL:
				case TIMESTAMP_SYMBOL:
				case TIMESTAMP_ADD_SYMBOL:
				case TIMESTAMP_DIFF_SYMBOL:
				case TIME_SYMBOL:
				case TYPES_SYMBOL:
				case TYPE_SYMBOL:
				case UNCOMMITTED_SYMBOL:
				case UNDEFINED_SYMBOL:
				case UNDO_BUFFER_SIZE_SYMBOL:
				case UNDOFILE_SYMBOL:
				case UNKNOWN_SYMBOL:
				case UNTIL_SYMBOL:
				case USER_RESOURCES_SYMBOL:
				case USER_SYMBOL:
				case USE_FRM_SYMBOL:
				case VARIABLES_SYMBOL:
				case VIEW_SYMBOL:
				case VALUE_SYMBOL:
				case WARNINGS_SYMBOL:
				case WAIT_SYMBOL:
				case WEEK_SYMBOL:
				case WORK_SYMBOL:
				case WEIGHT_STRING_SYMBOL:
				case X509_SYMBOL:
				case XID_SYMBOL:
				case XML_SYMBOL:
				case YEAR_SYMBOL:
				case EXCHANGE_SYMBOL:
				case EXPIRE_SYMBOL:
				case ONLY_SYMBOL:
				case VALIDATION_SYMBOL:
				case WITHOUT_SYMBOL:
				case ROLE_SYMBOL:
				case ADMIN_SYMBOL:
				case INVISIBLE_SYMBOL:
				case VISIBLE_SYMBOL:
				case COMPONENT_SYMBOL:
				case SKIP_SYMBOL:
				case LOCKED_SYMBOL:
				case NOWAIT_SYMBOL:
				case HISTOGRAM_SYMBOL:
				case BUCKETS_SYMBOL:
				case EXCLUDE_SYMBOL:
				case FOLLOWING_SYMBOL:
				case NULLS_SYMBOL:
				case OTHERS_SYMBOL:
				case PRECEDING_SYMBOL:
				case RESPECT_SYMBOL:
				case TIES_SYMBOL:
				case UNBOUNDED_SYMBOL:
				case NESTED_SYMBOL:
				case ORDINALITY_SYMBOL:
				case PATH_SYMBOL:
				case HISTORY_SYMBOL:
				case REUSE_SYMBOL:
				case SRID_SYMBOL:
				case THREAD_PRIORITY_SYMBOL:
				case VCPU_SYMBOL:
				case MASTER_PUBLIC_KEY_PATH_SYMBOL:
				case GET_MASTER_PUBLIC_KEY_SYMBOL:
				case DEFINITION_SYMBOL:
				case DESCRIPTION_SYMBOL:
				case ORGANIZATION_SYMBOL:
				case REFERENCE_SYMBOL:
				case OPTIONAL_SYMBOL:
				case SECONDARY_SYMBOL:
				case SECONDARY_ENGINE_SYMBOL:
				case SECONDARY_LOAD_SYMBOL:
				case SECONDARY_UNLOAD_SYMBOL:
				case ACTIVE_SYMBOL:
				case INACTIVE_SYMBOL:
				case RETAIN_SYMBOL:
				case OLD_SYMBOL:
				case NETWORK_NAMESPACE_SYMBOL:
				case ENFORCED_SYMBOL:
				case OJ_SYMBOL:
				case MASTER_COMPRESSION_ALGORITHM_SYMBOL:
				case MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL:
				case PRIVILEGE_CHECKS_USER_SYMBOL:
				case MASTER_TLS_CIPHERSUITES_SYMBOL:
					{
					setState(8308);
					identifierKeywordsUnambiguous();
					}
					break;
				case EVENT_SYMBOL:
				case FILE_SYMBOL:
				case NONE_SYMBOL:
				case PROCESS_SYMBOL:
				case PROXY_SYMBOL:
				case RELOAD_SYMBOL:
				case REPLICATION_SYMBOL:
				case SUPER_SYMBOL:
				case RESOURCE_SYMBOL:
					{
					setState(8309);
					identifierKeywordsAmbiguous3Roles();
					}
					break;
				case GLOBAL_SYMBOL:
				case LOCAL_SYMBOL:
				case SESSION_SYMBOL:
				case PERSIST_SYMBOL:
				case PERSIST_ONLY_SYMBOL:
					{
					setState(8310);
					identifierKeywordsAmbiguous4SystemVariables();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierKeywordsAmbiguous3RolesContext extends ParserRuleContext {
		public TerminalNode EVENT_SYMBOL() { return getToken(MySQLParser.EVENT_SYMBOL, 0); }
		public TerminalNode FILE_SYMBOL() { return getToken(MySQLParser.FILE_SYMBOL, 0); }
		public TerminalNode NONE_SYMBOL() { return getToken(MySQLParser.NONE_SYMBOL, 0); }
		public TerminalNode PROCESS_SYMBOL() { return getToken(MySQLParser.PROCESS_SYMBOL, 0); }
		public TerminalNode PROXY_SYMBOL() { return getToken(MySQLParser.PROXY_SYMBOL, 0); }
		public TerminalNode RELOAD_SYMBOL() { return getToken(MySQLParser.RELOAD_SYMBOL, 0); }
		public TerminalNode REPLICATION_SYMBOL() { return getToken(MySQLParser.REPLICATION_SYMBOL, 0); }
		public TerminalNode RESOURCE_SYMBOL() { return getToken(MySQLParser.RESOURCE_SYMBOL, 0); }
		public TerminalNode SUPER_SYMBOL() { return getToken(MySQLParser.SUPER_SYMBOL, 0); }
		public IdentifierKeywordsAmbiguous3RolesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierKeywordsAmbiguous3Roles; }
	}

	public final IdentifierKeywordsAmbiguous3RolesContext identifierKeywordsAmbiguous3Roles() throws RecognitionException {
		IdentifierKeywordsAmbiguous3RolesContext _localctx = new IdentifierKeywordsAmbiguous3RolesContext(_ctx, getState());
		enterRule(_localctx, 1196, RULE_identifierKeywordsAmbiguous3Roles);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8315);
			_la = _input.LA(1);
			if ( !(_la==EVENT_SYMBOL || _la==FILE_SYMBOL || ((((_la - 239)) & ~0x3f) == 0 && ((1L << (_la - 239)) & ((1L << (NONE_SYMBOL - 239)) | (1L << (PROCESS_SYMBOL - 239)) | (1L << (PROXY_SYMBOL - 239)) | (1L << (RELOAD_SYMBOL - 239)) | (1L << (REPLICATION_SYMBOL - 239)))) != 0) || _la==SUPER_SYMBOL || _la==RESOURCE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierKeywordsUnambiguousContext extends ParserRuleContext {
		public TerminalNode ACTION_SYMBOL() { return getToken(MySQLParser.ACTION_SYMBOL, 0); }
		public TerminalNode ACCOUNT_SYMBOL() { return getToken(MySQLParser.ACCOUNT_SYMBOL, 0); }
		public TerminalNode ACTIVE_SYMBOL() { return getToken(MySQLParser.ACTIVE_SYMBOL, 0); }
		public TerminalNode ADDDATE_SYMBOL() { return getToken(MySQLParser.ADDDATE_SYMBOL, 0); }
		public TerminalNode ADMIN_SYMBOL() { return getToken(MySQLParser.ADMIN_SYMBOL, 0); }
		public TerminalNode AFTER_SYMBOL() { return getToken(MySQLParser.AFTER_SYMBOL, 0); }
		public TerminalNode AGAINST_SYMBOL() { return getToken(MySQLParser.AGAINST_SYMBOL, 0); }
		public TerminalNode AGGREGATE_SYMBOL() { return getToken(MySQLParser.AGGREGATE_SYMBOL, 0); }
		public TerminalNode ALGORITHM_SYMBOL() { return getToken(MySQLParser.ALGORITHM_SYMBOL, 0); }
		public TerminalNode ALWAYS_SYMBOL() { return getToken(MySQLParser.ALWAYS_SYMBOL, 0); }
		public TerminalNode ANY_SYMBOL() { return getToken(MySQLParser.ANY_SYMBOL, 0); }
		public TerminalNode AT_SYMBOL() { return getToken(MySQLParser.AT_SYMBOL, 0); }
		public TerminalNode AUTOEXTEND_SIZE_SYMBOL() { return getToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0); }
		public TerminalNode AUTO_INCREMENT_SYMBOL() { return getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0); }
		public TerminalNode AVG_ROW_LENGTH_SYMBOL() { return getToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0); }
		public TerminalNode AVG_SYMBOL() { return getToken(MySQLParser.AVG_SYMBOL, 0); }
		public TerminalNode BACKUP_SYMBOL() { return getToken(MySQLParser.BACKUP_SYMBOL, 0); }
		public TerminalNode BINLOG_SYMBOL() { return getToken(MySQLParser.BINLOG_SYMBOL, 0); }
		public TerminalNode BIT_SYMBOL() { return getToken(MySQLParser.BIT_SYMBOL, 0); }
		public TerminalNode BLOCK_SYMBOL() { return getToken(MySQLParser.BLOCK_SYMBOL, 0); }
		public TerminalNode BOOLEAN_SYMBOL() { return getToken(MySQLParser.BOOLEAN_SYMBOL, 0); }
		public TerminalNode BOOL_SYMBOL() { return getToken(MySQLParser.BOOL_SYMBOL, 0); }
		public TerminalNode BTREE_SYMBOL() { return getToken(MySQLParser.BTREE_SYMBOL, 0); }
		public TerminalNode BUCKETS_SYMBOL() { return getToken(MySQLParser.BUCKETS_SYMBOL, 0); }
		public TerminalNode CASCADED_SYMBOL() { return getToken(MySQLParser.CASCADED_SYMBOL, 0); }
		public TerminalNode CATALOG_NAME_SYMBOL() { return getToken(MySQLParser.CATALOG_NAME_SYMBOL, 0); }
		public TerminalNode CHAIN_SYMBOL() { return getToken(MySQLParser.CHAIN_SYMBOL, 0); }
		public TerminalNode CHANGED_SYMBOL() { return getToken(MySQLParser.CHANGED_SYMBOL, 0); }
		public TerminalNode CHANNEL_SYMBOL() { return getToken(MySQLParser.CHANNEL_SYMBOL, 0); }
		public TerminalNode CIPHER_SYMBOL() { return getToken(MySQLParser.CIPHER_SYMBOL, 0); }
		public TerminalNode CLASS_ORIGIN_SYMBOL() { return getToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0); }
		public TerminalNode CLIENT_SYMBOL() { return getToken(MySQLParser.CLIENT_SYMBOL, 0); }
		public TerminalNode CLOSE_SYMBOL() { return getToken(MySQLParser.CLOSE_SYMBOL, 0); }
		public TerminalNode COALESCE_SYMBOL() { return getToken(MySQLParser.COALESCE_SYMBOL, 0); }
		public TerminalNode CODE_SYMBOL() { return getToken(MySQLParser.CODE_SYMBOL, 0); }
		public TerminalNode COLLATION_SYMBOL() { return getToken(MySQLParser.COLLATION_SYMBOL, 0); }
		public TerminalNode COLUMNS_SYMBOL() { return getToken(MySQLParser.COLUMNS_SYMBOL, 0); }
		public TerminalNode COLUMN_FORMAT_SYMBOL() { return getToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0); }
		public TerminalNode COLUMN_NAME_SYMBOL() { return getToken(MySQLParser.COLUMN_NAME_SYMBOL, 0); }
		public TerminalNode COMMITTED_SYMBOL() { return getToken(MySQLParser.COMMITTED_SYMBOL, 0); }
		public TerminalNode COMPACT_SYMBOL() { return getToken(MySQLParser.COMPACT_SYMBOL, 0); }
		public TerminalNode COMPLETION_SYMBOL() { return getToken(MySQLParser.COMPLETION_SYMBOL, 0); }
		public TerminalNode COMPONENT_SYMBOL() { return getToken(MySQLParser.COMPONENT_SYMBOL, 0); }
		public TerminalNode COMPRESSED_SYMBOL() { return getToken(MySQLParser.COMPRESSED_SYMBOL, 0); }
		public TerminalNode COMPRESSION_SYMBOL() { return getToken(MySQLParser.COMPRESSION_SYMBOL, 0); }
		public TerminalNode CONCURRENT_SYMBOL() { return getToken(MySQLParser.CONCURRENT_SYMBOL, 0); }
		public TerminalNode CONNECTION_SYMBOL() { return getToken(MySQLParser.CONNECTION_SYMBOL, 0); }
		public TerminalNode CONSISTENT_SYMBOL() { return getToken(MySQLParser.CONSISTENT_SYMBOL, 0); }
		public TerminalNode CONSTRAINT_CATALOG_SYMBOL() { return getToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0); }
		public TerminalNode CONSTRAINT_NAME_SYMBOL() { return getToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0); }
		public TerminalNode CONSTRAINT_SCHEMA_SYMBOL() { return getToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0); }
		public TerminalNode CONTEXT_SYMBOL() { return getToken(MySQLParser.CONTEXT_SYMBOL, 0); }
		public TerminalNode CPU_SYMBOL() { return getToken(MySQLParser.CPU_SYMBOL, 0); }
		public TerminalNode CURRENT_SYMBOL() { return getToken(MySQLParser.CURRENT_SYMBOL, 0); }
		public TerminalNode CURSOR_NAME_SYMBOL() { return getToken(MySQLParser.CURSOR_NAME_SYMBOL, 0); }
		public TerminalNode DATAFILE_SYMBOL() { return getToken(MySQLParser.DATAFILE_SYMBOL, 0); }
		public TerminalNode DATA_SYMBOL() { return getToken(MySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode DATETIME_SYMBOL() { return getToken(MySQLParser.DATETIME_SYMBOL, 0); }
		public TerminalNode DATE_SYMBOL() { return getToken(MySQLParser.DATE_SYMBOL, 0); }
		public TerminalNode DAY_SYMBOL() { return getToken(MySQLParser.DAY_SYMBOL, 0); }
		public TerminalNode DEFAULT_AUTH_SYMBOL() { return getToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0); }
		public TerminalNode DEFINER_SYMBOL() { return getToken(MySQLParser.DEFINER_SYMBOL, 0); }
		public TerminalNode DEFINITION_SYMBOL() { return getToken(MySQLParser.DEFINITION_SYMBOL, 0); }
		public TerminalNode DELAY_KEY_WRITE_SYMBOL() { return getToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0); }
		public TerminalNode DESCRIPTION_SYMBOL() { return getToken(MySQLParser.DESCRIPTION_SYMBOL, 0); }
		public TerminalNode DIAGNOSTICS_SYMBOL() { return getToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0); }
		public TerminalNode DIRECTORY_SYMBOL() { return getToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
		public TerminalNode DISABLE_SYMBOL() { return getToken(MySQLParser.DISABLE_SYMBOL, 0); }
		public TerminalNode DISCARD_SYMBOL() { return getToken(MySQLParser.DISCARD_SYMBOL, 0); }
		public TerminalNode DISK_SYMBOL() { return getToken(MySQLParser.DISK_SYMBOL, 0); }
		public TerminalNode DUMPFILE_SYMBOL() { return getToken(MySQLParser.DUMPFILE_SYMBOL, 0); }
		public TerminalNode DUPLICATE_SYMBOL() { return getToken(MySQLParser.DUPLICATE_SYMBOL, 0); }
		public TerminalNode DYNAMIC_SYMBOL() { return getToken(MySQLParser.DYNAMIC_SYMBOL, 0); }
		public TerminalNode ENABLE_SYMBOL() { return getToken(MySQLParser.ENABLE_SYMBOL, 0); }
		public TerminalNode ENCRYPTION_SYMBOL() { return getToken(MySQLParser.ENCRYPTION_SYMBOL, 0); }
		public TerminalNode ENDS_SYMBOL() { return getToken(MySQLParser.ENDS_SYMBOL, 0); }
		public TerminalNode ENFORCED_SYMBOL() { return getToken(MySQLParser.ENFORCED_SYMBOL, 0); }
		public TerminalNode ENGINES_SYMBOL() { return getToken(MySQLParser.ENGINES_SYMBOL, 0); }
		public TerminalNode ENGINE_SYMBOL() { return getToken(MySQLParser.ENGINE_SYMBOL, 0); }
		public TerminalNode ENUM_SYMBOL() { return getToken(MySQLParser.ENUM_SYMBOL, 0); }
		public TerminalNode ERRORS_SYMBOL() { return getToken(MySQLParser.ERRORS_SYMBOL, 0); }
		public TerminalNode ERROR_SYMBOL() { return getToken(MySQLParser.ERROR_SYMBOL, 0); }
		public TerminalNode ESCAPE_SYMBOL() { return getToken(MySQLParser.ESCAPE_SYMBOL, 0); }
		public TerminalNode EVENTS_SYMBOL() { return getToken(MySQLParser.EVENTS_SYMBOL, 0); }
		public TerminalNode EVERY_SYMBOL() { return getToken(MySQLParser.EVERY_SYMBOL, 0); }
		public TerminalNode EXCHANGE_SYMBOL() { return getToken(MySQLParser.EXCHANGE_SYMBOL, 0); }
		public TerminalNode EXCLUDE_SYMBOL() { return getToken(MySQLParser.EXCLUDE_SYMBOL, 0); }
		public TerminalNode EXPANSION_SYMBOL() { return getToken(MySQLParser.EXPANSION_SYMBOL, 0); }
		public TerminalNode EXPIRE_SYMBOL() { return getToken(MySQLParser.EXPIRE_SYMBOL, 0); }
		public TerminalNode EXPORT_SYMBOL() { return getToken(MySQLParser.EXPORT_SYMBOL, 0); }
		public TerminalNode EXTENDED_SYMBOL() { return getToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		public TerminalNode EXTENT_SIZE_SYMBOL() { return getToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0); }
		public TerminalNode FAST_SYMBOL() { return getToken(MySQLParser.FAST_SYMBOL, 0); }
		public TerminalNode FAULTS_SYMBOL() { return getToken(MySQLParser.FAULTS_SYMBOL, 0); }
		public TerminalNode FILE_BLOCK_SIZE_SYMBOL() { return getToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0); }
		public TerminalNode FILTER_SYMBOL() { return getToken(MySQLParser.FILTER_SYMBOL, 0); }
		public TerminalNode FIRST_SYMBOL() { return getToken(MySQLParser.FIRST_SYMBOL, 0); }
		public TerminalNode FIXED_SYMBOL() { return getToken(MySQLParser.FIXED_SYMBOL, 0); }
		public TerminalNode FOLLOWING_SYMBOL() { return getToken(MySQLParser.FOLLOWING_SYMBOL, 0); }
		public TerminalNode FORMAT_SYMBOL() { return getToken(MySQLParser.FORMAT_SYMBOL, 0); }
		public TerminalNode FOUND_SYMBOL() { return getToken(MySQLParser.FOUND_SYMBOL, 0); }
		public TerminalNode FULL_SYMBOL() { return getToken(MySQLParser.FULL_SYMBOL, 0); }
		public TerminalNode GENERAL_SYMBOL() { return getToken(MySQLParser.GENERAL_SYMBOL, 0); }
		public TerminalNode GEOMETRYCOLLECTION_SYMBOL() { return getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
		public TerminalNode GEOMETRY_SYMBOL() { return getToken(MySQLParser.GEOMETRY_SYMBOL, 0); }
		public TerminalNode GET_FORMAT_SYMBOL() { return getToken(MySQLParser.GET_FORMAT_SYMBOL, 0); }
		public TerminalNode GET_MASTER_PUBLIC_KEY_SYMBOL() { return getToken(MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL, 0); }
		public TerminalNode GRANTS_SYMBOL() { return getToken(MySQLParser.GRANTS_SYMBOL, 0); }
		public TerminalNode GROUP_REPLICATION_SYMBOL() { return getToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0); }
		public TerminalNode HASH_SYMBOL() { return getToken(MySQLParser.HASH_SYMBOL, 0); }
		public TerminalNode HISTOGRAM_SYMBOL() { return getToken(MySQLParser.HISTOGRAM_SYMBOL, 0); }
		public TerminalNode HISTORY_SYMBOL() { return getToken(MySQLParser.HISTORY_SYMBOL, 0); }
		public TerminalNode HOSTS_SYMBOL() { return getToken(MySQLParser.HOSTS_SYMBOL, 0); }
		public TerminalNode HOST_SYMBOL() { return getToken(MySQLParser.HOST_SYMBOL, 0); }
		public TerminalNode HOUR_SYMBOL() { return getToken(MySQLParser.HOUR_SYMBOL, 0); }
		public TerminalNode IDENTIFIED_SYMBOL() { return getToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public TerminalNode IGNORE_SERVER_IDS_SYMBOL() { return getToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0); }
		public TerminalNode INACTIVE_SYMBOL() { return getToken(MySQLParser.INACTIVE_SYMBOL, 0); }
		public TerminalNode INDEXES_SYMBOL() { return getToken(MySQLParser.INDEXES_SYMBOL, 0); }
		public TerminalNode INITIAL_SIZE_SYMBOL() { return getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0); }
		public TerminalNode INSERT_METHOD_SYMBOL() { return getToken(MySQLParser.INSERT_METHOD_SYMBOL, 0); }
		public TerminalNode INSTANCE_SYMBOL() { return getToken(MySQLParser.INSTANCE_SYMBOL, 0); }
		public TerminalNode INVISIBLE_SYMBOL() { return getToken(MySQLParser.INVISIBLE_SYMBOL, 0); }
		public TerminalNode INVOKER_SYMBOL() { return getToken(MySQLParser.INVOKER_SYMBOL, 0); }
		public TerminalNode IO_SYMBOL() { return getToken(MySQLParser.IO_SYMBOL, 0); }
		public TerminalNode IPC_SYMBOL() { return getToken(MySQLParser.IPC_SYMBOL, 0); }
		public TerminalNode ISOLATION_SYMBOL() { return getToken(MySQLParser.ISOLATION_SYMBOL, 0); }
		public TerminalNode ISSUER_SYMBOL() { return getToken(MySQLParser.ISSUER_SYMBOL, 0); }
		public TerminalNode JSON_SYMBOL() { return getToken(MySQLParser.JSON_SYMBOL, 0); }
		public TerminalNode KEY_BLOCK_SIZE_SYMBOL() { return getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0); }
		public TerminalNode LAST_SYMBOL() { return getToken(MySQLParser.LAST_SYMBOL, 0); }
		public TerminalNode LEAVES_SYMBOL() { return getToken(MySQLParser.LEAVES_SYMBOL, 0); }
		public TerminalNode LESS_SYMBOL() { return getToken(MySQLParser.LESS_SYMBOL, 0); }
		public TerminalNode LEVEL_SYMBOL() { return getToken(MySQLParser.LEVEL_SYMBOL, 0); }
		public TerminalNode LINESTRING_SYMBOL() { return getToken(MySQLParser.LINESTRING_SYMBOL, 0); }
		public TerminalNode LIST_SYMBOL() { return getToken(MySQLParser.LIST_SYMBOL, 0); }
		public TerminalNode LOCKED_SYMBOL() { return getToken(MySQLParser.LOCKED_SYMBOL, 0); }
		public TerminalNode LOCKS_SYMBOL() { return getToken(MySQLParser.LOCKS_SYMBOL, 0); }
		public TerminalNode LOGFILE_SYMBOL() { return getToken(MySQLParser.LOGFILE_SYMBOL, 0); }
		public TerminalNode LOGS_SYMBOL() { return getToken(MySQLParser.LOGS_SYMBOL, 0); }
		public TerminalNode MASTER_AUTO_POSITION_SYMBOL() { return getToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0); }
		public TerminalNode MASTER_COMPRESSION_ALGORITHM_SYMBOL() { return getToken(MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL, 0); }
		public TerminalNode MASTER_CONNECT_RETRY_SYMBOL() { return getToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0); }
		public TerminalNode MASTER_DELAY_SYMBOL() { return getToken(MySQLParser.MASTER_DELAY_SYMBOL, 0); }
		public TerminalNode MASTER_HEARTBEAT_PERIOD_SYMBOL() { return getToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0); }
		public TerminalNode MASTER_HOST_SYMBOL() { return getToken(MySQLParser.MASTER_HOST_SYMBOL, 0); }
		public TerminalNode NETWORK_NAMESPACE_SYMBOL() { return getToken(MySQLParser.NETWORK_NAMESPACE_SYMBOL, 0); }
		public TerminalNode MASTER_LOG_FILE_SYMBOL() { return getToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0); }
		public TerminalNode MASTER_LOG_POS_SYMBOL() { return getToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0); }
		public TerminalNode MASTER_PASSWORD_SYMBOL() { return getToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0); }
		public TerminalNode MASTER_PORT_SYMBOL() { return getToken(MySQLParser.MASTER_PORT_SYMBOL, 0); }
		public TerminalNode MASTER_PUBLIC_KEY_PATH_SYMBOL() { return getToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0); }
		public TerminalNode MASTER_RETRY_COUNT_SYMBOL() { return getToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0); }
		public TerminalNode MASTER_SERVER_ID_SYMBOL() { return getToken(MySQLParser.MASTER_SERVER_ID_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CAPATH_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CA_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CERT_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CIPHER_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CRLPATH_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CRL_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_KEY_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_SYMBOL, 0); }
		public TerminalNode MASTER_SYMBOL() { return getToken(MySQLParser.MASTER_SYMBOL, 0); }
		public TerminalNode MASTER_TLS_CIPHERSUITES_SYMBOL() { return getToken(MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL, 0); }
		public TerminalNode MASTER_TLS_VERSION_SYMBOL() { return getToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0); }
		public TerminalNode MASTER_USER_SYMBOL() { return getToken(MySQLParser.MASTER_USER_SYMBOL, 0); }
		public TerminalNode MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL() { return getToken(MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR_SYMBOL() { return getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0); }
		public TerminalNode MAX_QUERIES_PER_HOUR_SYMBOL() { return getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0); }
		public TerminalNode MAX_ROWS_SYMBOL() { return getToken(MySQLParser.MAX_ROWS_SYMBOL, 0); }
		public TerminalNode MAX_SIZE_SYMBOL() { return getToken(MySQLParser.MAX_SIZE_SYMBOL, 0); }
		public TerminalNode MAX_UPDATES_PER_HOUR_SYMBOL() { return getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0); }
		public TerminalNode MAX_USER_CONNECTIONS_SYMBOL() { return getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0); }
		public TerminalNode MEDIUM_SYMBOL() { return getToken(MySQLParser.MEDIUM_SYMBOL, 0); }
		public TerminalNode MEMORY_SYMBOL() { return getToken(MySQLParser.MEMORY_SYMBOL, 0); }
		public TerminalNode MERGE_SYMBOL() { return getToken(MySQLParser.MERGE_SYMBOL, 0); }
		public TerminalNode MESSAGE_TEXT_SYMBOL() { return getToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0); }
		public TerminalNode MICROSECOND_SYMBOL() { return getToken(MySQLParser.MICROSECOND_SYMBOL, 0); }
		public TerminalNode MIGRATE_SYMBOL() { return getToken(MySQLParser.MIGRATE_SYMBOL, 0); }
		public TerminalNode MINUTE_SYMBOL() { return getToken(MySQLParser.MINUTE_SYMBOL, 0); }
		public TerminalNode MIN_ROWS_SYMBOL() { return getToken(MySQLParser.MIN_ROWS_SYMBOL, 0); }
		public TerminalNode MODE_SYMBOL() { return getToken(MySQLParser.MODE_SYMBOL, 0); }
		public TerminalNode MODIFY_SYMBOL() { return getToken(MySQLParser.MODIFY_SYMBOL, 0); }
		public TerminalNode MONTH_SYMBOL() { return getToken(MySQLParser.MONTH_SYMBOL, 0); }
		public TerminalNode MULTILINESTRING_SYMBOL() { return getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0); }
		public TerminalNode MULTIPOINT_SYMBOL() { return getToken(MySQLParser.MULTIPOINT_SYMBOL, 0); }
		public TerminalNode MULTIPOLYGON_SYMBOL() { return getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0); }
		public TerminalNode MUTEX_SYMBOL() { return getToken(MySQLParser.MUTEX_SYMBOL, 0); }
		public TerminalNode MYSQL_ERRNO_SYMBOL() { return getToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0); }
		public TerminalNode NAMES_SYMBOL() { return getToken(MySQLParser.NAMES_SYMBOL, 0); }
		public TerminalNode NAME_SYMBOL() { return getToken(MySQLParser.NAME_SYMBOL, 0); }
		public TerminalNode NATIONAL_SYMBOL() { return getToken(MySQLParser.NATIONAL_SYMBOL, 0); }
		public TerminalNode NCHAR_SYMBOL() { return getToken(MySQLParser.NCHAR_SYMBOL, 0); }
		public TerminalNode NDBCLUSTER_SYMBOL() { return getToken(MySQLParser.NDBCLUSTER_SYMBOL, 0); }
		public TerminalNode NESTED_SYMBOL() { return getToken(MySQLParser.NESTED_SYMBOL, 0); }
		public TerminalNode NEVER_SYMBOL() { return getToken(MySQLParser.NEVER_SYMBOL, 0); }
		public TerminalNode NEW_SYMBOL() { return getToken(MySQLParser.NEW_SYMBOL, 0); }
		public TerminalNode NEXT_SYMBOL() { return getToken(MySQLParser.NEXT_SYMBOL, 0); }
		public TerminalNode NODEGROUP_SYMBOL() { return getToken(MySQLParser.NODEGROUP_SYMBOL, 0); }
		public TerminalNode NOWAIT_SYMBOL() { return getToken(MySQLParser.NOWAIT_SYMBOL, 0); }
		public TerminalNode NO_WAIT_SYMBOL() { return getToken(MySQLParser.NO_WAIT_SYMBOL, 0); }
		public TerminalNode NULLS_SYMBOL() { return getToken(MySQLParser.NULLS_SYMBOL, 0); }
		public TerminalNode NUMBER_SYMBOL() { return getToken(MySQLParser.NUMBER_SYMBOL, 0); }
		public TerminalNode NVARCHAR_SYMBOL() { return getToken(MySQLParser.NVARCHAR_SYMBOL, 0); }
		public TerminalNode OFFSET_SYMBOL() { return getToken(MySQLParser.OFFSET_SYMBOL, 0); }
		public TerminalNode OJ_SYMBOL() { return getToken(MySQLParser.OJ_SYMBOL, 0); }
		public TerminalNode OLD_SYMBOL() { return getToken(MySQLParser.OLD_SYMBOL, 0); }
		public TerminalNode ONE_SYMBOL() { return getToken(MySQLParser.ONE_SYMBOL, 0); }
		public TerminalNode ONLY_SYMBOL() { return getToken(MySQLParser.ONLY_SYMBOL, 0); }
		public TerminalNode OPEN_SYMBOL() { return getToken(MySQLParser.OPEN_SYMBOL, 0); }
		public TerminalNode OPTIONAL_SYMBOL() { return getToken(MySQLParser.OPTIONAL_SYMBOL, 0); }
		public TerminalNode OPTIONS_SYMBOL() { return getToken(MySQLParser.OPTIONS_SYMBOL, 0); }
		public TerminalNode ORDINALITY_SYMBOL() { return getToken(MySQLParser.ORDINALITY_SYMBOL, 0); }
		public TerminalNode ORGANIZATION_SYMBOL() { return getToken(MySQLParser.ORGANIZATION_SYMBOL, 0); }
		public TerminalNode OTHERS_SYMBOL() { return getToken(MySQLParser.OTHERS_SYMBOL, 0); }
		public TerminalNode OWNER_SYMBOL() { return getToken(MySQLParser.OWNER_SYMBOL, 0); }
		public TerminalNode PACK_KEYS_SYMBOL() { return getToken(MySQLParser.PACK_KEYS_SYMBOL, 0); }
		public TerminalNode PAGE_SYMBOL() { return getToken(MySQLParser.PAGE_SYMBOL, 0); }
		public TerminalNode PARSER_SYMBOL() { return getToken(MySQLParser.PARSER_SYMBOL, 0); }
		public TerminalNode PARTIAL_SYMBOL() { return getToken(MySQLParser.PARTIAL_SYMBOL, 0); }
		public TerminalNode PARTITIONING_SYMBOL() { return getToken(MySQLParser.PARTITIONING_SYMBOL, 0); }
		public TerminalNode PARTITIONS_SYMBOL() { return getToken(MySQLParser.PARTITIONS_SYMBOL, 0); }
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public TerminalNode PATH_SYMBOL() { return getToken(MySQLParser.PATH_SYMBOL, 0); }
		public TerminalNode PHASE_SYMBOL() { return getToken(MySQLParser.PHASE_SYMBOL, 0); }
		public TerminalNode PLUGINS_SYMBOL() { return getToken(MySQLParser.PLUGINS_SYMBOL, 0); }
		public TerminalNode PLUGIN_DIR_SYMBOL() { return getToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0); }
		public TerminalNode PLUGIN_SYMBOL() { return getToken(MySQLParser.PLUGIN_SYMBOL, 0); }
		public TerminalNode POINT_SYMBOL() { return getToken(MySQLParser.POINT_SYMBOL, 0); }
		public TerminalNode POLYGON_SYMBOL() { return getToken(MySQLParser.POLYGON_SYMBOL, 0); }
		public TerminalNode PORT_SYMBOL() { return getToken(MySQLParser.PORT_SYMBOL, 0); }
		public TerminalNode PRECEDING_SYMBOL() { return getToken(MySQLParser.PRECEDING_SYMBOL, 0); }
		public TerminalNode PRESERVE_SYMBOL() { return getToken(MySQLParser.PRESERVE_SYMBOL, 0); }
		public TerminalNode PREV_SYMBOL() { return getToken(MySQLParser.PREV_SYMBOL, 0); }
		public TerminalNode PRIVILEGES_SYMBOL() { return getToken(MySQLParser.PRIVILEGES_SYMBOL, 0); }
		public TerminalNode PRIVILEGE_CHECKS_USER_SYMBOL() { return getToken(MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL, 0); }
		public TerminalNode PROCESSLIST_SYMBOL() { return getToken(MySQLParser.PROCESSLIST_SYMBOL, 0); }
		public TerminalNode PROFILES_SYMBOL() { return getToken(MySQLParser.PROFILES_SYMBOL, 0); }
		public TerminalNode PROFILE_SYMBOL() { return getToken(MySQLParser.PROFILE_SYMBOL, 0); }
		public TerminalNode QUARTER_SYMBOL() { return getToken(MySQLParser.QUARTER_SYMBOL, 0); }
		public TerminalNode QUERY_SYMBOL() { return getToken(MySQLParser.QUERY_SYMBOL, 0); }
		public TerminalNode QUICK_SYMBOL() { return getToken(MySQLParser.QUICK_SYMBOL, 0); }
		public TerminalNode READ_ONLY_SYMBOL() { return getToken(MySQLParser.READ_ONLY_SYMBOL, 0); }
		public TerminalNode REBUILD_SYMBOL() { return getToken(MySQLParser.REBUILD_SYMBOL, 0); }
		public TerminalNode RECOVER_SYMBOL() { return getToken(MySQLParser.RECOVER_SYMBOL, 0); }
		public TerminalNode REDO_BUFFER_SIZE_SYMBOL() { return getToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0); }
		public TerminalNode REDUNDANT_SYMBOL() { return getToken(MySQLParser.REDUNDANT_SYMBOL, 0); }
		public TerminalNode REFERENCE_SYMBOL() { return getToken(MySQLParser.REFERENCE_SYMBOL, 0); }
		public TerminalNode RELAY_SYMBOL() { return getToken(MySQLParser.RELAY_SYMBOL, 0); }
		public TerminalNode RELAYLOG_SYMBOL() { return getToken(MySQLParser.RELAYLOG_SYMBOL, 0); }
		public TerminalNode RELAY_LOG_FILE_SYMBOL() { return getToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0); }
		public TerminalNode RELAY_LOG_POS_SYMBOL() { return getToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0); }
		public TerminalNode RELAY_THREAD_SYMBOL() { return getToken(MySQLParser.RELAY_THREAD_SYMBOL, 0); }
		public TerminalNode REMOVE_SYMBOL() { return getToken(MySQLParser.REMOVE_SYMBOL, 0); }
		public TerminalNode REORGANIZE_SYMBOL() { return getToken(MySQLParser.REORGANIZE_SYMBOL, 0); }
		public TerminalNode REPEATABLE_SYMBOL() { return getToken(MySQLParser.REPEATABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_DO_DB_SYMBOL() { return getToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0); }
		public TerminalNode REPLICATE_DO_TABLE_SYMBOL() { return getToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_IGNORE_DB_SYMBOL() { return getToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0); }
		public TerminalNode REPLICATE_IGNORE_TABLE_SYMBOL() { return getToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_REWRITE_DB_SYMBOL() { return getToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0); }
		public TerminalNode REPLICATE_WILD_DO_TABLE_SYMBOL() { return getToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_WILD_IGNORE_TABLE_SYMBOL() { return getToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0); }
		public TerminalNode USER_RESOURCES_SYMBOL() { return getToken(MySQLParser.USER_RESOURCES_SYMBOL, 0); }
		public TerminalNode RESPECT_SYMBOL() { return getToken(MySQLParser.RESPECT_SYMBOL, 0); }
		public TerminalNode RESTORE_SYMBOL() { return getToken(MySQLParser.RESTORE_SYMBOL, 0); }
		public TerminalNode RESUME_SYMBOL() { return getToken(MySQLParser.RESUME_SYMBOL, 0); }
		public TerminalNode RETAIN_SYMBOL() { return getToken(MySQLParser.RETAIN_SYMBOL, 0); }
		public TerminalNode RETURNED_SQLSTATE_SYMBOL() { return getToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0); }
		public TerminalNode RETURNS_SYMBOL() { return getToken(MySQLParser.RETURNS_SYMBOL, 0); }
		public TerminalNode REUSE_SYMBOL() { return getToken(MySQLParser.REUSE_SYMBOL, 0); }
		public TerminalNode REVERSE_SYMBOL() { return getToken(MySQLParser.REVERSE_SYMBOL, 0); }
		public TerminalNode ROLE_SYMBOL() { return getToken(MySQLParser.ROLE_SYMBOL, 0); }
		public TerminalNode ROLLUP_SYMBOL() { return getToken(MySQLParser.ROLLUP_SYMBOL, 0); }
		public TerminalNode ROTATE_SYMBOL() { return getToken(MySQLParser.ROTATE_SYMBOL, 0); }
		public TerminalNode ROUTINE_SYMBOL() { return getToken(MySQLParser.ROUTINE_SYMBOL, 0); }
		public TerminalNode ROW_COUNT_SYMBOL() { return getToken(MySQLParser.ROW_COUNT_SYMBOL, 0); }
		public TerminalNode ROW_FORMAT_SYMBOL() { return getToken(MySQLParser.ROW_FORMAT_SYMBOL, 0); }
		public TerminalNode RTREE_SYMBOL() { return getToken(MySQLParser.RTREE_SYMBOL, 0); }
		public TerminalNode SCHEDULE_SYMBOL() { return getToken(MySQLParser.SCHEDULE_SYMBOL, 0); }
		public TerminalNode SCHEMA_NAME_SYMBOL() { return getToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0); }
		public TerminalNode SECONDARY_ENGINE_SYMBOL() { return getToken(MySQLParser.SECONDARY_ENGINE_SYMBOL, 0); }
		public TerminalNode SECONDARY_LOAD_SYMBOL() { return getToken(MySQLParser.SECONDARY_LOAD_SYMBOL, 0); }
		public TerminalNode SECONDARY_SYMBOL() { return getToken(MySQLParser.SECONDARY_SYMBOL, 0); }
		public TerminalNode SECONDARY_UNLOAD_SYMBOL() { return getToken(MySQLParser.SECONDARY_UNLOAD_SYMBOL, 0); }
		public TerminalNode SECOND_SYMBOL() { return getToken(MySQLParser.SECOND_SYMBOL, 0); }
		public TerminalNode SECURITY_SYMBOL() { return getToken(MySQLParser.SECURITY_SYMBOL, 0); }
		public TerminalNode SERIALIZABLE_SYMBOL() { return getToken(MySQLParser.SERIALIZABLE_SYMBOL, 0); }
		public TerminalNode SERIAL_SYMBOL() { return getToken(MySQLParser.SERIAL_SYMBOL, 0); }
		public TerminalNode SERVER_SYMBOL() { return getToken(MySQLParser.SERVER_SYMBOL, 0); }
		public TerminalNode SHARE_SYMBOL() { return getToken(MySQLParser.SHARE_SYMBOL, 0); }
		public TerminalNode SIMPLE_SYMBOL() { return getToken(MySQLParser.SIMPLE_SYMBOL, 0); }
		public TerminalNode SKIP_SYMBOL() { return getToken(MySQLParser.SKIP_SYMBOL, 0); }
		public TerminalNode SLOW_SYMBOL() { return getToken(MySQLParser.SLOW_SYMBOL, 0); }
		public TerminalNode SNAPSHOT_SYMBOL() { return getToken(MySQLParser.SNAPSHOT_SYMBOL, 0); }
		public TerminalNode SOCKET_SYMBOL() { return getToken(MySQLParser.SOCKET_SYMBOL, 0); }
		public TerminalNode SONAME_SYMBOL() { return getToken(MySQLParser.SONAME_SYMBOL, 0); }
		public TerminalNode SOUNDS_SYMBOL() { return getToken(MySQLParser.SOUNDS_SYMBOL, 0); }
		public TerminalNode SOURCE_SYMBOL() { return getToken(MySQLParser.SOURCE_SYMBOL, 0); }
		public TerminalNode SQL_AFTER_GTIDS_SYMBOL() { return getToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0); }
		public TerminalNode SQL_AFTER_MTS_GAPS_SYMBOL() { return getToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0); }
		public TerminalNode SQL_BEFORE_GTIDS_SYMBOL() { return getToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0); }
		public TerminalNode SQL_BUFFER_RESULT_SYMBOL() { return getToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0); }
		public TerminalNode SQL_NO_CACHE_SYMBOL() { return getToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0); }
		public TerminalNode SQL_THREAD_SYMBOL() { return getToken(MySQLParser.SQL_THREAD_SYMBOL, 0); }
		public TerminalNode SRID_SYMBOL() { return getToken(MySQLParser.SRID_SYMBOL, 0); }
		public TerminalNode STACKED_SYMBOL() { return getToken(MySQLParser.STACKED_SYMBOL, 0); }
		public TerminalNode STARTS_SYMBOL() { return getToken(MySQLParser.STARTS_SYMBOL, 0); }
		public TerminalNode STATS_AUTO_RECALC_SYMBOL() { return getToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0); }
		public TerminalNode STATS_PERSISTENT_SYMBOL() { return getToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0); }
		public TerminalNode STATS_SAMPLE_PAGES_SYMBOL() { return getToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0); }
		public TerminalNode STATUS_SYMBOL() { return getToken(MySQLParser.STATUS_SYMBOL, 0); }
		public TerminalNode STORAGE_SYMBOL() { return getToken(MySQLParser.STORAGE_SYMBOL, 0); }
		public TerminalNode STRING_SYMBOL() { return getToken(MySQLParser.STRING_SYMBOL, 0); }
		public TerminalNode SUBCLASS_ORIGIN_SYMBOL() { return getToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0); }
		public TerminalNode SUBDATE_SYMBOL() { return getToken(MySQLParser.SUBDATE_SYMBOL, 0); }
		public TerminalNode SUBJECT_SYMBOL() { return getToken(MySQLParser.SUBJECT_SYMBOL, 0); }
		public TerminalNode SUBPARTITIONS_SYMBOL() { return getToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0); }
		public TerminalNode SUBPARTITION_SYMBOL() { return getToken(MySQLParser.SUBPARTITION_SYMBOL, 0); }
		public TerminalNode SUSPEND_SYMBOL() { return getToken(MySQLParser.SUSPEND_SYMBOL, 0); }
		public TerminalNode SWAPS_SYMBOL() { return getToken(MySQLParser.SWAPS_SYMBOL, 0); }
		public TerminalNode SWITCHES_SYMBOL() { return getToken(MySQLParser.SWITCHES_SYMBOL, 0); }
		public TerminalNode TABLES_SYMBOL() { return getToken(MySQLParser.TABLES_SYMBOL, 0); }
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TerminalNode TABLE_CHECKSUM_SYMBOL() { return getToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0); }
		public TerminalNode TABLE_NAME_SYMBOL() { return getToken(MySQLParser.TABLE_NAME_SYMBOL, 0); }
		public TerminalNode TEMPORARY_SYMBOL() { return getToken(MySQLParser.TEMPORARY_SYMBOL, 0); }
		public TerminalNode TEMPTABLE_SYMBOL() { return getToken(MySQLParser.TEMPTABLE_SYMBOL, 0); }
		public TerminalNode TEXT_SYMBOL() { return getToken(MySQLParser.TEXT_SYMBOL, 0); }
		public TerminalNode THAN_SYMBOL() { return getToken(MySQLParser.THAN_SYMBOL, 0); }
		public TerminalNode THREAD_PRIORITY_SYMBOL() { return getToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0); }
		public TerminalNode TIES_SYMBOL() { return getToken(MySQLParser.TIES_SYMBOL, 0); }
		public TerminalNode TIMESTAMP_ADD_SYMBOL() { return getToken(MySQLParser.TIMESTAMP_ADD_SYMBOL, 0); }
		public TerminalNode TIMESTAMP_DIFF_SYMBOL() { return getToken(MySQLParser.TIMESTAMP_DIFF_SYMBOL, 0); }
		public TerminalNode TIMESTAMP_SYMBOL() { return getToken(MySQLParser.TIMESTAMP_SYMBOL, 0); }
		public TerminalNode TIME_SYMBOL() { return getToken(MySQLParser.TIME_SYMBOL, 0); }
		public TerminalNode TRANSACTION_SYMBOL() { return getToken(MySQLParser.TRANSACTION_SYMBOL, 0); }
		public TerminalNode TRIGGERS_SYMBOL() { return getToken(MySQLParser.TRIGGERS_SYMBOL, 0); }
		public TerminalNode TYPES_SYMBOL() { return getToken(MySQLParser.TYPES_SYMBOL, 0); }
		public TerminalNode TYPE_SYMBOL() { return getToken(MySQLParser.TYPE_SYMBOL, 0); }
		public TerminalNode UNBOUNDED_SYMBOL() { return getToken(MySQLParser.UNBOUNDED_SYMBOL, 0); }
		public TerminalNode UNCOMMITTED_SYMBOL() { return getToken(MySQLParser.UNCOMMITTED_SYMBOL, 0); }
		public TerminalNode UNDEFINED_SYMBOL() { return getToken(MySQLParser.UNDEFINED_SYMBOL, 0); }
		public TerminalNode UNDOFILE_SYMBOL() { return getToken(MySQLParser.UNDOFILE_SYMBOL, 0); }
		public TerminalNode UNDO_BUFFER_SIZE_SYMBOL() { return getToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0); }
		public TerminalNode UNKNOWN_SYMBOL() { return getToken(MySQLParser.UNKNOWN_SYMBOL, 0); }
		public TerminalNode UNTIL_SYMBOL() { return getToken(MySQLParser.UNTIL_SYMBOL, 0); }
		public TerminalNode UPGRADE_SYMBOL() { return getToken(MySQLParser.UPGRADE_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public TerminalNode USE_FRM_SYMBOL() { return getToken(MySQLParser.USE_FRM_SYMBOL, 0); }
		public TerminalNode VALIDATION_SYMBOL() { return getToken(MySQLParser.VALIDATION_SYMBOL, 0); }
		public TerminalNode VALUE_SYMBOL() { return getToken(MySQLParser.VALUE_SYMBOL, 0); }
		public TerminalNode VARIABLES_SYMBOL() { return getToken(MySQLParser.VARIABLES_SYMBOL, 0); }
		public TerminalNode VCPU_SYMBOL() { return getToken(MySQLParser.VCPU_SYMBOL, 0); }
		public TerminalNode VIEW_SYMBOL() { return getToken(MySQLParser.VIEW_SYMBOL, 0); }
		public TerminalNode VISIBLE_SYMBOL() { return getToken(MySQLParser.VISIBLE_SYMBOL, 0); }
		public TerminalNode WAIT_SYMBOL() { return getToken(MySQLParser.WAIT_SYMBOL, 0); }
		public TerminalNode WARNINGS_SYMBOL() { return getToken(MySQLParser.WARNINGS_SYMBOL, 0); }
		public TerminalNode WEEK_SYMBOL() { return getToken(MySQLParser.WEEK_SYMBOL, 0); }
		public TerminalNode WEIGHT_STRING_SYMBOL() { return getToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0); }
		public TerminalNode WITHOUT_SYMBOL() { return getToken(MySQLParser.WITHOUT_SYMBOL, 0); }
		public TerminalNode WORK_SYMBOL() { return getToken(MySQLParser.WORK_SYMBOL, 0); }
		public TerminalNode WRAPPER_SYMBOL() { return getToken(MySQLParser.WRAPPER_SYMBOL, 0); }
		public TerminalNode X509_SYMBOL() { return getToken(MySQLParser.X509_SYMBOL, 0); }
		public TerminalNode XID_SYMBOL() { return getToken(MySQLParser.XID_SYMBOL, 0); }
		public TerminalNode XML_SYMBOL() { return getToken(MySQLParser.XML_SYMBOL, 0); }
		public TerminalNode YEAR_SYMBOL() { return getToken(MySQLParser.YEAR_SYMBOL, 0); }
		public IdentifierKeywordsUnambiguousContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierKeywordsUnambiguous; }
	}

	public final IdentifierKeywordsUnambiguousContext identifierKeywordsUnambiguous() throws RecognitionException {
		IdentifierKeywordsUnambiguousContext _localctx = new IdentifierKeywordsUnambiguousContext(_ctx, getState());
		enterRule(_localctx, 1198, RULE_identifierKeywordsUnambiguous);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8317);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT_SYMBOL) | (1L << ALWAYS_SYMBOL) | (1L << BACKUP_SYMBOL) | (1L << CLOSE_SYMBOL) | (1L << FORMAT_SYMBOL) | (1L << GROUP_REPLICATION_SYMBOL) | (1L << HOST_SYMBOL) | (1L << OPEN_SYMBOL) | (1L << OPTIONS_SYMBOL) | (1L << OWNER_SYMBOL) | (1L << PARSER_SYMBOL) | (1L << PORT_SYMBOL) | (1L << REMOVE_SYMBOL) | (1L << RESTORE_SYMBOL) | (1L << SECURITY_SYMBOL) | (1L << SERVER_SYMBOL) | (1L << SOCKET_SYMBOL) | (1L << SONAME_SYMBOL) | (1L << UPGRADE_SYMBOL) | (1L << WRAPPER_SYMBOL) | (1L << ACTION_SYMBOL) | (1L << ADDDATE_SYMBOL) | (1L << AFTER_SYMBOL) | (1L << AGAINST_SYMBOL) | (1L << AGGREGATE_SYMBOL) | (1L << ALGORITHM_SYMBOL))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ANY_SYMBOL - 64)) | (1L << (AT_SYMBOL - 64)) | (1L << (AUTO_INCREMENT_SYMBOL - 64)) | (1L << (AUTOEXTEND_SIZE_SYMBOL - 64)) | (1L << (AVG_ROW_LENGTH_SYMBOL - 64)) | (1L << (AVG_SYMBOL - 64)) | (1L << (BINLOG_SYMBOL - 64)) | (1L << (BIT_SYMBOL - 64)) | (1L << (BLOCK_SYMBOL - 64)) | (1L << (BOOL_SYMBOL - 64)) | (1L << (BOOLEAN_SYMBOL - 64)) | (1L << (BTREE_SYMBOL - 64)) | (1L << (CASCADED_SYMBOL - 64)) | (1L << (CATALOG_NAME_SYMBOL - 64)) | (1L << (CHAIN_SYMBOL - 64)) | (1L << (CHANGED_SYMBOL - 64)) | (1L << (CHANNEL_SYMBOL - 64)) | (1L << (CIPHER_SYMBOL - 64)) | (1L << (CLIENT_SYMBOL - 64)) | (1L << (CLASS_ORIGIN_SYMBOL - 64)) | (1L << (COALESCE_SYMBOL - 64)) | (1L << (CODE_SYMBOL - 64)) | (1L << (COLLATION_SYMBOL - 64)) | (1L << (COLUMN_NAME_SYMBOL - 64)) | (1L << (COLUMN_FORMAT_SYMBOL - 64)) | (1L << (COLUMNS_SYMBOL - 64)) | (1L << (COMMITTED_SYMBOL - 64)) | (1L << (COMPACT_SYMBOL - 64)) | (1L << (COMPLETION_SYMBOL - 64)) | (1L << (COMPRESSED_SYMBOL - 64)) | (1L << (COMPRESSION_SYMBOL - 64)) | (1L << (ENCRYPTION_SYMBOL - 64)) | (1L << (CONCURRENT_SYMBOL - 64)) | (1L << (CONNECTION_SYMBOL - 64)) | (1L << (CONSISTENT_SYMBOL - 64)) | (1L << (CONSTRAINT_CATALOG_SYMBOL - 64)) | (1L << (CONSTRAINT_SCHEMA_SYMBOL - 64)) | (1L << (CONSTRAINT_NAME_SYMBOL - 64)) | (1L << (CONTEXT_SYMBOL - 64)) | (1L << (CPU_SYMBOL - 64)) | (1L << (CURRENT_SYMBOL - 64)) | (1L << (CURSOR_NAME_SYMBOL - 64)) | (1L << (DATA_SYMBOL - 64)) | (1L << (DATAFILE_SYMBOL - 64)) | (1L << (DATETIME_SYMBOL - 64)) | (1L << (DATE_SYMBOL - 64)) | (1L << (DAY_SYMBOL - 64)) | (1L << (DEFAULT_AUTH_SYMBOL - 64)) | (1L << (DEFINER_SYMBOL - 64)) | (1L << (DELAY_KEY_WRITE_SYMBOL - 64)) | (1L << (DIAGNOSTICS_SYMBOL - 64)) | (1L << (DIRECTORY_SYMBOL - 64)) | (1L << (DISABLE_SYMBOL - 64)) | (1L << (DISCARD_SYMBOL - 64)) | (1L << (DISK_SYMBOL - 64)) | (1L << (DUMPFILE_SYMBOL - 64)) | (1L << (DUPLICATE_SYMBOL - 64)) | (1L << (DYNAMIC_SYMBOL - 64)) | (1L << (ENDS_SYMBOL - 64)) | (1L << (ENUM_SYMBOL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENGINE_SYMBOL - 128)) | (1L << (ENGINES_SYMBOL - 128)) | (1L << (ERROR_SYMBOL - 128)) | (1L << (ERRORS_SYMBOL - 128)) | (1L << (ESCAPE_SYMBOL - 128)) | (1L << (EVENTS_SYMBOL - 128)) | (1L << (EVERY_SYMBOL - 128)) | (1L << (EXPANSION_SYMBOL - 128)) | (1L << (EXPORT_SYMBOL - 128)) | (1L << (EXTENDED_SYMBOL - 128)) | (1L << (EXTENT_SIZE_SYMBOL - 128)) | (1L << (FAULTS_SYMBOL - 128)) | (1L << (FAST_SYMBOL - 128)) | (1L << (FOUND_SYMBOL - 128)) | (1L << (ENABLE_SYMBOL - 128)) | (1L << (FULL_SYMBOL - 128)) | (1L << (FILE_BLOCK_SIZE_SYMBOL - 128)) | (1L << (FILTER_SYMBOL - 128)) | (1L << (FIRST_SYMBOL - 128)) | (1L << (FIXED_SYMBOL - 128)) | (1L << (GENERAL_SYMBOL - 128)) | (1L << (GEOMETRY_SYMBOL - 128)) | (1L << (GEOMETRYCOLLECTION_SYMBOL - 128)) | (1L << (GET_FORMAT_SYMBOL - 128)) | (1L << (GRANTS_SYMBOL - 128)) | (1L << (HASH_SYMBOL - 128)) | (1L << (HOSTS_SYMBOL - 128)) | (1L << (HOUR_SYMBOL - 128)) | (1L << (IDENTIFIED_SYMBOL - 128)) | (1L << (IGNORE_SERVER_IDS_SYMBOL - 128)) | (1L << (INVOKER_SYMBOL - 128)) | (1L << (INDEXES_SYMBOL - 128)) | (1L << (INITIAL_SIZE_SYMBOL - 128)) | (1L << (INSTANCE_SYMBOL - 128)) | (1L << (IO_SYMBOL - 128)) | (1L << (IPC_SYMBOL - 128)) | (1L << (ISOLATION_SYMBOL - 128)) | (1L << (ISSUER_SYMBOL - 128)) | (1L << (INSERT_METHOD_SYMBOL - 128)) | (1L << (JSON_SYMBOL - 128)) | (1L << (KEY_BLOCK_SIZE_SYMBOL - 128)) | (1L << (LAST_SYMBOL - 128)) | (1L << (LEAVES_SYMBOL - 128)) | (1L << (LESS_SYMBOL - 128)) | (1L << (LEVEL_SYMBOL - 128)) | (1L << (LINESTRING_SYMBOL - 128)) | (1L << (LIST_SYMBOL - 128)) | (1L << (LOCKS_SYMBOL - 128)) | (1L << (LOGFILE_SYMBOL - 128)) | (1L << (LOGS_SYMBOL - 128)) | (1L << (MAX_ROWS_SYMBOL - 128)) | (1L << (MASTER_SYMBOL - 128)) | (1L << (MASTER_HEARTBEAT_PERIOD_SYMBOL - 128)) | (1L << (MASTER_HOST_SYMBOL - 128)) | (1L << (MASTER_PORT_SYMBOL - 128)) | (1L << (MASTER_LOG_FILE_SYMBOL - 128)) | (1L << (MASTER_LOG_POS_SYMBOL - 128)) | (1L << (MASTER_USER_SYMBOL - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (MASTER_PASSWORD_SYMBOL - 192)) | (1L << (MASTER_SERVER_ID_SYMBOL - 192)) | (1L << (MASTER_CONNECT_RETRY_SYMBOL - 192)) | (1L << (MASTER_RETRY_COUNT_SYMBOL - 192)) | (1L << (MASTER_DELAY_SYMBOL - 192)) | (1L << (MASTER_SSL_SYMBOL - 192)) | (1L << (MASTER_SSL_CA_SYMBOL - 192)) | (1L << (MASTER_SSL_CAPATH_SYMBOL - 192)) | (1L << (MASTER_TLS_VERSION_SYMBOL - 192)) | (1L << (MASTER_SSL_CERT_SYMBOL - 192)) | (1L << (MASTER_SSL_CIPHER_SYMBOL - 192)) | (1L << (MASTER_SSL_CRL_SYMBOL - 192)) | (1L << (MASTER_SSL_CRLPATH_SYMBOL - 192)) | (1L << (MASTER_SSL_KEY_SYMBOL - 192)) | (1L << (MASTER_AUTO_POSITION_SYMBOL - 192)) | (1L << (MAX_CONNECTIONS_PER_HOUR_SYMBOL - 192)) | (1L << (MAX_QUERIES_PER_HOUR_SYMBOL - 192)) | (1L << (MAX_SIZE_SYMBOL - 192)) | (1L << (MAX_UPDATES_PER_HOUR_SYMBOL - 192)) | (1L << (MAX_USER_CONNECTIONS_SYMBOL - 192)) | (1L << (MEDIUM_SYMBOL - 192)) | (1L << (MEMORY_SYMBOL - 192)) | (1L << (MERGE_SYMBOL - 192)) | (1L << (MESSAGE_TEXT_SYMBOL - 192)) | (1L << (MICROSECOND_SYMBOL - 192)) | (1L << (MIGRATE_SYMBOL - 192)) | (1L << (MINUTE_SYMBOL - 192)) | (1L << (MIN_ROWS_SYMBOL - 192)) | (1L << (MODIFY_SYMBOL - 192)) | (1L << (MODE_SYMBOL - 192)) | (1L << (MONTH_SYMBOL - 192)) | (1L << (MULTILINESTRING_SYMBOL - 192)) | (1L << (MULTIPOINT_SYMBOL - 192)) | (1L << (MULTIPOLYGON_SYMBOL - 192)) | (1L << (MUTEX_SYMBOL - 192)) | (1L << (MYSQL_ERRNO_SYMBOL - 192)) | (1L << (NAME_SYMBOL - 192)) | (1L << (NAMES_SYMBOL - 192)) | (1L << (NATIONAL_SYMBOL - 192)) | (1L << (NCHAR_SYMBOL - 192)) | (1L << (NDBCLUSTER_SYMBOL - 192)) | (1L << (NEVER_SYMBOL - 192)) | (1L << (NEXT_SYMBOL - 192)) | (1L << (NEW_SYMBOL - 192)) | (1L << (NO_WAIT_SYMBOL - 192)) | (1L << (NODEGROUP_SYMBOL - 192)) | (1L << (NUMBER_SYMBOL - 192)) | (1L << (NVARCHAR_SYMBOL - 192)) | (1L << (OFFSET_SYMBOL - 192)) | (1L << (ONE_SYMBOL - 192)) | (1L << (PACK_KEYS_SYMBOL - 192)) | (1L << (PAGE_SYMBOL - 192)) | (1L << (PARTIAL_SYMBOL - 192)) | (1L << (PARTITIONING_SYMBOL - 192)) | (1L << (PARTITIONS_SYMBOL - 192)) | (1L << (PASSWORD_SYMBOL - 192)) | (1L << (PHASE_SYMBOL - 192)) | (1L << (PLUGIN_DIR_SYMBOL - 192)) | (1L << (PLUGIN_SYMBOL - 192)) | (1L << (PLUGINS_SYMBOL - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (POINT_SYMBOL - 256)) | (1L << (POLYGON_SYMBOL - 256)) | (1L << (PRESERVE_SYMBOL - 256)) | (1L << (PREV_SYMBOL - 256)) | (1L << (PRIVILEGES_SYMBOL - 256)) | (1L << (PROCESSLIST_SYMBOL - 256)) | (1L << (PROFILE_SYMBOL - 256)) | (1L << (PROFILES_SYMBOL - 256)) | (1L << (QUARTER_SYMBOL - 256)) | (1L << (QUERY_SYMBOL - 256)) | (1L << (QUICK_SYMBOL - 256)) | (1L << (READ_ONLY_SYMBOL - 256)) | (1L << (REBUILD_SYMBOL - 256)) | (1L << (RECOVER_SYMBOL - 256)) | (1L << (REDO_BUFFER_SIZE_SYMBOL - 256)) | (1L << (REDUNDANT_SYMBOL - 256)) | (1L << (RELAY_SYMBOL - 256)) | (1L << (RELAYLOG_SYMBOL - 256)) | (1L << (RELAY_LOG_FILE_SYMBOL - 256)) | (1L << (RELAY_LOG_POS_SYMBOL - 256)) | (1L << (RELAY_THREAD_SYMBOL - 256)) | (1L << (REORGANIZE_SYMBOL - 256)) | (1L << (REPEATABLE_SYMBOL - 256)) | (1L << (REPLICATE_DO_DB_SYMBOL - 256)) | (1L << (REPLICATE_IGNORE_DB_SYMBOL - 256)) | (1L << (REPLICATE_DO_TABLE_SYMBOL - 256)) | (1L << (REPLICATE_IGNORE_TABLE_SYMBOL - 256)) | (1L << (REPLICATE_WILD_DO_TABLE_SYMBOL - 256)) | (1L << (REPLICATE_WILD_IGNORE_TABLE_SYMBOL - 256)) | (1L << (REPLICATE_REWRITE_DB_SYMBOL - 256)) | (1L << (RESUME_SYMBOL - 256)) | (1L << (RETURNED_SQLSTATE_SYMBOL - 256)) | (1L << (RETURNS_SYMBOL - 256)) | (1L << (REVERSE_SYMBOL - 256)) | (1L << (ROLLUP_SYMBOL - 256)) | (1L << (ROTATE_SYMBOL - 256)) | (1L << (ROUTINE_SYMBOL - 256)) | (1L << (ROW_COUNT_SYMBOL - 256)) | (1L << (ROW_FORMAT_SYMBOL - 256)) | (1L << (RTREE_SYMBOL - 256)) | (1L << (SCHEDULE_SYMBOL - 256)) | (1L << (SCHEMA_NAME_SYMBOL - 256)) | (1L << (SECOND_SYMBOL - 256)) | (1L << (SERIAL_SYMBOL - 256)) | (1L << (SERIALIZABLE_SYMBOL - 256)) | (1L << (SIMPLE_SYMBOL - 256)) | (1L << (SHARE_SYMBOL - 256)) | (1L << (SLOW_SYMBOL - 256)) | (1L << (SNAPSHOT_SYMBOL - 256)) | (1L << (SOUNDS_SYMBOL - 256)) | (1L << (SOURCE_SYMBOL - 256)) | (1L << (SQL_AFTER_GTIDS_SYMBOL - 256)) | (1L << (SQL_AFTER_MTS_GAPS_SYMBOL - 256)) | (1L << (SQL_BEFORE_GTIDS_SYMBOL - 256)) | (1L << (SQL_BUFFER_RESULT_SYMBOL - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (SQL_NO_CACHE_SYMBOL - 320)) | (1L << (SQL_THREAD_SYMBOL - 320)) | (1L << (STACKED_SYMBOL - 320)) | (1L << (STARTS_SYMBOL - 320)) | (1L << (STATS_AUTO_RECALC_SYMBOL - 320)) | (1L << (STATS_PERSISTENT_SYMBOL - 320)) | (1L << (STATS_SAMPLE_PAGES_SYMBOL - 320)) | (1L << (STATUS_SYMBOL - 320)) | (1L << (STORAGE_SYMBOL - 320)) | (1L << (STRING_SYMBOL - 320)) | (1L << (SUBCLASS_ORIGIN_SYMBOL - 320)) | (1L << (SUBDATE_SYMBOL - 320)) | (1L << (SUBJECT_SYMBOL - 320)) | (1L << (SUBPARTITION_SYMBOL - 320)) | (1L << (SUBPARTITIONS_SYMBOL - 320)) | (1L << (SUSPEND_SYMBOL - 320)) | (1L << (SWAPS_SYMBOL - 320)) | (1L << (SWITCHES_SYMBOL - 320)) | (1L << (TABLE_NAME_SYMBOL - 320)) | (1L << (TABLES_SYMBOL - 320)) | (1L << (TABLE_CHECKSUM_SYMBOL - 320)) | (1L << (TABLESPACE_SYMBOL - 320)) | (1L << (TEMPORARY_SYMBOL - 320)) | (1L << (TEMPTABLE_SYMBOL - 320)) | (1L << (TEXT_SYMBOL - 320)) | (1L << (THAN_SYMBOL - 320)) | (1L << (TRANSACTION_SYMBOL - 320)) | (1L << (TRIGGERS_SYMBOL - 320)) | (1L << (TIMESTAMP_SYMBOL - 320)) | (1L << (TIMESTAMP_ADD_SYMBOL - 320)) | (1L << (TIMESTAMP_DIFF_SYMBOL - 320)) | (1L << (TIME_SYMBOL - 320)) | (1L << (TYPES_SYMBOL - 320)) | (1L << (TYPE_SYMBOL - 320)) | (1L << (UNCOMMITTED_SYMBOL - 320)) | (1L << (UNDEFINED_SYMBOL - 320)) | (1L << (UNDO_BUFFER_SIZE_SYMBOL - 320)) | (1L << (UNDOFILE_SYMBOL - 320)) | (1L << (UNKNOWN_SYMBOL - 320)) | (1L << (UNTIL_SYMBOL - 320)) | (1L << (USER_RESOURCES_SYMBOL - 320)) | (1L << (USER_SYMBOL - 320)) | (1L << (USE_FRM_SYMBOL - 320)) | (1L << (VARIABLES_SYMBOL - 320)) | (1L << (VIEW_SYMBOL - 320)) | (1L << (VALUE_SYMBOL - 320)) | (1L << (WARNINGS_SYMBOL - 320)) | (1L << (WAIT_SYMBOL - 320)) | (1L << (WEEK_SYMBOL - 320)) | (1L << (WORK_SYMBOL - 320)) | (1L << (WEIGHT_STRING_SYMBOL - 320)) | (1L << (X509_SYMBOL - 320)) | (1L << (XID_SYMBOL - 320)) | (1L << (XML_SYMBOL - 320)) | (1L << (YEAR_SYMBOL - 320)))) != 0) || _la==EXCHANGE_SYMBOL || _la==EXPIRE_SYMBOL || _la==ONLY_SYMBOL || ((((_la - 670)) & ~0x3f) == 0 && ((1L << (_la - 670)) & ((1L << (VALIDATION_SYMBOL - 670)) | (1L << (WITHOUT_SYMBOL - 670)) | (1L << (ROLE_SYMBOL - 670)) | (1L << (ADMIN_SYMBOL - 670)) | (1L << (INVISIBLE_SYMBOL - 670)) | (1L << (VISIBLE_SYMBOL - 670)) | (1L << (COMPONENT_SYMBOL - 670)) | (1L << (SKIP_SYMBOL - 670)) | (1L << (LOCKED_SYMBOL - 670)) | (1L << (NOWAIT_SYMBOL - 670)) | (1L << (HISTOGRAM_SYMBOL - 670)) | (1L << (BUCKETS_SYMBOL - 670)) | (1L << (EXCLUDE_SYMBOL - 670)) | (1L << (FOLLOWING_SYMBOL - 670)) | (1L << (NULLS_SYMBOL - 670)) | (1L << (OTHERS_SYMBOL - 670)) | (1L << (PRECEDING_SYMBOL - 670)) | (1L << (RESPECT_SYMBOL - 670)) | (1L << (TIES_SYMBOL - 670)) | (1L << (UNBOUNDED_SYMBOL - 670)) | (1L << (NESTED_SYMBOL - 670)) | (1L << (ORDINALITY_SYMBOL - 670)))) != 0) || ((((_la - 734)) & ~0x3f) == 0 && ((1L << (_la - 734)) & ((1L << (PATH_SYMBOL - 734)) | (1L << (HISTORY_SYMBOL - 734)) | (1L << (REUSE_SYMBOL - 734)) | (1L << (SRID_SYMBOL - 734)) | (1L << (THREAD_PRIORITY_SYMBOL - 734)) | (1L << (VCPU_SYMBOL - 734)) | (1L << (MASTER_PUBLIC_KEY_PATH_SYMBOL - 734)) | (1L << (GET_MASTER_PUBLIC_KEY_SYMBOL - 734)) | (1L << (DEFINITION_SYMBOL - 734)) | (1L << (DESCRIPTION_SYMBOL - 734)) | (1L << (ORGANIZATION_SYMBOL - 734)) | (1L << (REFERENCE_SYMBOL - 734)) | (1L << (OPTIONAL_SYMBOL - 734)) | (1L << (SECONDARY_SYMBOL - 734)) | (1L << (SECONDARY_ENGINE_SYMBOL - 734)) | (1L << (SECONDARY_LOAD_SYMBOL - 734)) | (1L << (SECONDARY_UNLOAD_SYMBOL - 734)) | (1L << (ACTIVE_SYMBOL - 734)) | (1L << (INACTIVE_SYMBOL - 734)) | (1L << (RETAIN_SYMBOL - 734)) | (1L << (OLD_SYMBOL - 734)) | (1L << (NETWORK_NAMESPACE_SYMBOL - 734)) | (1L << (ENFORCED_SYMBOL - 734)) | (1L << (OJ_SYMBOL - 734)) | (1L << (MASTER_COMPRESSION_ALGORITHM_SYMBOL - 734)) | (1L << (MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL - 734)) | (1L << (PRIVILEGE_CHECKS_USER_SYMBOL - 734)) | (1L << (MASTER_TLS_CIPHERSUITES_SYMBOL - 734)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleKeywordContext extends ParserRuleContext {
		public RoleOrLabelKeywordContext roleOrLabelKeyword() {
			return getRuleContext(RoleOrLabelKeywordContext.class,0);
		}
		public RoleOrIdentifierKeywordContext roleOrIdentifierKeyword() {
			return getRuleContext(RoleOrIdentifierKeywordContext.class,0);
		}
		public IdentifierKeywordsUnambiguousContext identifierKeywordsUnambiguous() {
			return getRuleContext(IdentifierKeywordsUnambiguousContext.class,0);
		}
		public IdentifierKeywordsAmbiguous2LabelsContext identifierKeywordsAmbiguous2Labels() {
			return getRuleContext(IdentifierKeywordsAmbiguous2LabelsContext.class,0);
		}
		public IdentifierKeywordsAmbiguous4SystemVariablesContext identifierKeywordsAmbiguous4SystemVariables() {
			return getRuleContext(IdentifierKeywordsAmbiguous4SystemVariablesContext.class,0);
		}
		public RoleKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleKeyword; }
	}

	public final RoleKeywordContext roleKeyword() throws RecognitionException {
		RoleKeywordContext _localctx = new RoleKeywordContext(_ctx, getState());
		enterRule(_localctx, 1200, RULE_roleKeyword);
		try {
			setState(8329);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1116,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8319);
				if (!(serverVersion < 80017)) throw new FailedPredicateException(this, "serverVersion < 80017");
				setState(8322);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1114,_ctx) ) {
				case 1:
					{
					setState(8320);
					roleOrLabelKeyword();
					}
					break;
				case 2:
					{
					setState(8321);
					roleOrIdentifierKeyword();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8327);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ACCOUNT_SYMBOL:
				case ALWAYS_SYMBOL:
				case BACKUP_SYMBOL:
				case CLOSE_SYMBOL:
				case FORMAT_SYMBOL:
				case GROUP_REPLICATION_SYMBOL:
				case HOST_SYMBOL:
				case OPEN_SYMBOL:
				case OPTIONS_SYMBOL:
				case OWNER_SYMBOL:
				case PARSER_SYMBOL:
				case PORT_SYMBOL:
				case REMOVE_SYMBOL:
				case RESTORE_SYMBOL:
				case SECURITY_SYMBOL:
				case SERVER_SYMBOL:
				case SOCKET_SYMBOL:
				case SONAME_SYMBOL:
				case UPGRADE_SYMBOL:
				case WRAPPER_SYMBOL:
				case ACTION_SYMBOL:
				case ADDDATE_SYMBOL:
				case AFTER_SYMBOL:
				case AGAINST_SYMBOL:
				case AGGREGATE_SYMBOL:
				case ALGORITHM_SYMBOL:
				case ANY_SYMBOL:
				case AT_SYMBOL:
				case AUTO_INCREMENT_SYMBOL:
				case AUTOEXTEND_SIZE_SYMBOL:
				case AVG_ROW_LENGTH_SYMBOL:
				case AVG_SYMBOL:
				case BINLOG_SYMBOL:
				case BIT_SYMBOL:
				case BLOCK_SYMBOL:
				case BOOL_SYMBOL:
				case BOOLEAN_SYMBOL:
				case BTREE_SYMBOL:
				case CASCADED_SYMBOL:
				case CATALOG_NAME_SYMBOL:
				case CHAIN_SYMBOL:
				case CHANGED_SYMBOL:
				case CHANNEL_SYMBOL:
				case CIPHER_SYMBOL:
				case CLIENT_SYMBOL:
				case CLASS_ORIGIN_SYMBOL:
				case COALESCE_SYMBOL:
				case CODE_SYMBOL:
				case COLLATION_SYMBOL:
				case COLUMN_NAME_SYMBOL:
				case COLUMN_FORMAT_SYMBOL:
				case COLUMNS_SYMBOL:
				case COMMITTED_SYMBOL:
				case COMPACT_SYMBOL:
				case COMPLETION_SYMBOL:
				case COMPRESSED_SYMBOL:
				case COMPRESSION_SYMBOL:
				case ENCRYPTION_SYMBOL:
				case CONCURRENT_SYMBOL:
				case CONNECTION_SYMBOL:
				case CONSISTENT_SYMBOL:
				case CONSTRAINT_CATALOG_SYMBOL:
				case CONSTRAINT_SCHEMA_SYMBOL:
				case CONSTRAINT_NAME_SYMBOL:
				case CONTEXT_SYMBOL:
				case CPU_SYMBOL:
				case CURRENT_SYMBOL:
				case CURSOR_NAME_SYMBOL:
				case DATA_SYMBOL:
				case DATAFILE_SYMBOL:
				case DATETIME_SYMBOL:
				case DATE_SYMBOL:
				case DAY_SYMBOL:
				case DEFAULT_AUTH_SYMBOL:
				case DEFINER_SYMBOL:
				case DELAY_KEY_WRITE_SYMBOL:
				case DIAGNOSTICS_SYMBOL:
				case DIRECTORY_SYMBOL:
				case DISABLE_SYMBOL:
				case DISCARD_SYMBOL:
				case DISK_SYMBOL:
				case DUMPFILE_SYMBOL:
				case DUPLICATE_SYMBOL:
				case DYNAMIC_SYMBOL:
				case ENDS_SYMBOL:
				case ENUM_SYMBOL:
				case ENGINE_SYMBOL:
				case ENGINES_SYMBOL:
				case ERROR_SYMBOL:
				case ERRORS_SYMBOL:
				case ESCAPE_SYMBOL:
				case EVENTS_SYMBOL:
				case EVERY_SYMBOL:
				case EXPANSION_SYMBOL:
				case EXPORT_SYMBOL:
				case EXTENDED_SYMBOL:
				case EXTENT_SIZE_SYMBOL:
				case FAULTS_SYMBOL:
				case FAST_SYMBOL:
				case FOUND_SYMBOL:
				case ENABLE_SYMBOL:
				case FULL_SYMBOL:
				case FILE_BLOCK_SIZE_SYMBOL:
				case FILTER_SYMBOL:
				case FIRST_SYMBOL:
				case FIXED_SYMBOL:
				case GENERAL_SYMBOL:
				case GEOMETRY_SYMBOL:
				case GEOMETRYCOLLECTION_SYMBOL:
				case GET_FORMAT_SYMBOL:
				case GRANTS_SYMBOL:
				case HASH_SYMBOL:
				case HOSTS_SYMBOL:
				case HOUR_SYMBOL:
				case IDENTIFIED_SYMBOL:
				case IGNORE_SERVER_IDS_SYMBOL:
				case INVOKER_SYMBOL:
				case INDEXES_SYMBOL:
				case INITIAL_SIZE_SYMBOL:
				case INSTANCE_SYMBOL:
				case IO_SYMBOL:
				case IPC_SYMBOL:
				case ISOLATION_SYMBOL:
				case ISSUER_SYMBOL:
				case INSERT_METHOD_SYMBOL:
				case JSON_SYMBOL:
				case KEY_BLOCK_SIZE_SYMBOL:
				case LAST_SYMBOL:
				case LEAVES_SYMBOL:
				case LESS_SYMBOL:
				case LEVEL_SYMBOL:
				case LINESTRING_SYMBOL:
				case LIST_SYMBOL:
				case LOCKS_SYMBOL:
				case LOGFILE_SYMBOL:
				case LOGS_SYMBOL:
				case MAX_ROWS_SYMBOL:
				case MASTER_SYMBOL:
				case MASTER_HEARTBEAT_PERIOD_SYMBOL:
				case MASTER_HOST_SYMBOL:
				case MASTER_PORT_SYMBOL:
				case MASTER_LOG_FILE_SYMBOL:
				case MASTER_LOG_POS_SYMBOL:
				case MASTER_USER_SYMBOL:
				case MASTER_PASSWORD_SYMBOL:
				case MASTER_SERVER_ID_SYMBOL:
				case MASTER_CONNECT_RETRY_SYMBOL:
				case MASTER_RETRY_COUNT_SYMBOL:
				case MASTER_DELAY_SYMBOL:
				case MASTER_SSL_SYMBOL:
				case MASTER_SSL_CA_SYMBOL:
				case MASTER_SSL_CAPATH_SYMBOL:
				case MASTER_TLS_VERSION_SYMBOL:
				case MASTER_SSL_CERT_SYMBOL:
				case MASTER_SSL_CIPHER_SYMBOL:
				case MASTER_SSL_CRL_SYMBOL:
				case MASTER_SSL_CRLPATH_SYMBOL:
				case MASTER_SSL_KEY_SYMBOL:
				case MASTER_AUTO_POSITION_SYMBOL:
				case MAX_CONNECTIONS_PER_HOUR_SYMBOL:
				case MAX_QUERIES_PER_HOUR_SYMBOL:
				case MAX_SIZE_SYMBOL:
				case MAX_UPDATES_PER_HOUR_SYMBOL:
				case MAX_USER_CONNECTIONS_SYMBOL:
				case MEDIUM_SYMBOL:
				case MEMORY_SYMBOL:
				case MERGE_SYMBOL:
				case MESSAGE_TEXT_SYMBOL:
				case MICROSECOND_SYMBOL:
				case MIGRATE_SYMBOL:
				case MINUTE_SYMBOL:
				case MIN_ROWS_SYMBOL:
				case MODIFY_SYMBOL:
				case MODE_SYMBOL:
				case MONTH_SYMBOL:
				case MULTILINESTRING_SYMBOL:
				case MULTIPOINT_SYMBOL:
				case MULTIPOLYGON_SYMBOL:
				case MUTEX_SYMBOL:
				case MYSQL_ERRNO_SYMBOL:
				case NAME_SYMBOL:
				case NAMES_SYMBOL:
				case NATIONAL_SYMBOL:
				case NCHAR_SYMBOL:
				case NDBCLUSTER_SYMBOL:
				case NEVER_SYMBOL:
				case NEXT_SYMBOL:
				case NEW_SYMBOL:
				case NO_WAIT_SYMBOL:
				case NODEGROUP_SYMBOL:
				case NUMBER_SYMBOL:
				case NVARCHAR_SYMBOL:
				case OFFSET_SYMBOL:
				case ONE_SYMBOL:
				case PACK_KEYS_SYMBOL:
				case PAGE_SYMBOL:
				case PARTIAL_SYMBOL:
				case PARTITIONING_SYMBOL:
				case PARTITIONS_SYMBOL:
				case PASSWORD_SYMBOL:
				case PHASE_SYMBOL:
				case PLUGIN_DIR_SYMBOL:
				case PLUGIN_SYMBOL:
				case PLUGINS_SYMBOL:
				case POINT_SYMBOL:
				case POLYGON_SYMBOL:
				case PRESERVE_SYMBOL:
				case PREV_SYMBOL:
				case PRIVILEGES_SYMBOL:
				case PROCESSLIST_SYMBOL:
				case PROFILE_SYMBOL:
				case PROFILES_SYMBOL:
				case QUARTER_SYMBOL:
				case QUERY_SYMBOL:
				case QUICK_SYMBOL:
				case READ_ONLY_SYMBOL:
				case REBUILD_SYMBOL:
				case RECOVER_SYMBOL:
				case REDO_BUFFER_SIZE_SYMBOL:
				case REDUNDANT_SYMBOL:
				case RELAY_SYMBOL:
				case RELAYLOG_SYMBOL:
				case RELAY_LOG_FILE_SYMBOL:
				case RELAY_LOG_POS_SYMBOL:
				case RELAY_THREAD_SYMBOL:
				case REORGANIZE_SYMBOL:
				case REPEATABLE_SYMBOL:
				case REPLICATE_DO_DB_SYMBOL:
				case REPLICATE_IGNORE_DB_SYMBOL:
				case REPLICATE_DO_TABLE_SYMBOL:
				case REPLICATE_IGNORE_TABLE_SYMBOL:
				case REPLICATE_WILD_DO_TABLE_SYMBOL:
				case REPLICATE_WILD_IGNORE_TABLE_SYMBOL:
				case REPLICATE_REWRITE_DB_SYMBOL:
				case RESUME_SYMBOL:
				case RETURNED_SQLSTATE_SYMBOL:
				case RETURNS_SYMBOL:
				case REVERSE_SYMBOL:
				case ROLLUP_SYMBOL:
				case ROTATE_SYMBOL:
				case ROUTINE_SYMBOL:
				case ROW_COUNT_SYMBOL:
				case ROW_FORMAT_SYMBOL:
				case RTREE_SYMBOL:
				case SCHEDULE_SYMBOL:
				case SCHEMA_NAME_SYMBOL:
				case SECOND_SYMBOL:
				case SERIAL_SYMBOL:
				case SERIALIZABLE_SYMBOL:
				case SIMPLE_SYMBOL:
				case SHARE_SYMBOL:
				case SLOW_SYMBOL:
				case SNAPSHOT_SYMBOL:
				case SOUNDS_SYMBOL:
				case SOURCE_SYMBOL:
				case SQL_AFTER_GTIDS_SYMBOL:
				case SQL_AFTER_MTS_GAPS_SYMBOL:
				case SQL_BEFORE_GTIDS_SYMBOL:
				case SQL_BUFFER_RESULT_SYMBOL:
				case SQL_NO_CACHE_SYMBOL:
				case SQL_THREAD_SYMBOL:
				case STACKED_SYMBOL:
				case STARTS_SYMBOL:
				case STATS_AUTO_RECALC_SYMBOL:
				case STATS_PERSISTENT_SYMBOL:
				case STATS_SAMPLE_PAGES_SYMBOL:
				case STATUS_SYMBOL:
				case STORAGE_SYMBOL:
				case STRING_SYMBOL:
				case SUBCLASS_ORIGIN_SYMBOL:
				case SUBDATE_SYMBOL:
				case SUBJECT_SYMBOL:
				case SUBPARTITION_SYMBOL:
				case SUBPARTITIONS_SYMBOL:
				case SUSPEND_SYMBOL:
				case SWAPS_SYMBOL:
				case SWITCHES_SYMBOL:
				case TABLE_NAME_SYMBOL:
				case TABLES_SYMBOL:
				case TABLE_CHECKSUM_SYMBOL:
				case TABLESPACE_SYMBOL:
				case TEMPORARY_SYMBOL:
				case TEMPTABLE_SYMBOL:
				case TEXT_SYMBOL:
				case THAN_SYMBOL:
				case TRANSACTION_SYMBOL:
				case TRIGGERS_SYMBOL:
				case TIMESTAMP_SYMBOL:
				case TIMESTAMP_ADD_SYMBOL:
				case TIMESTAMP_DIFF_SYMBOL:
				case TIME_SYMBOL:
				case TYPES_SYMBOL:
				case TYPE_SYMBOL:
				case UNCOMMITTED_SYMBOL:
				case UNDEFINED_SYMBOL:
				case UNDO_BUFFER_SIZE_SYMBOL:
				case UNDOFILE_SYMBOL:
				case UNKNOWN_SYMBOL:
				case UNTIL_SYMBOL:
				case USER_RESOURCES_SYMBOL:
				case USER_SYMBOL:
				case USE_FRM_SYMBOL:
				case VARIABLES_SYMBOL:
				case VIEW_SYMBOL:
				case VALUE_SYMBOL:
				case WARNINGS_SYMBOL:
				case WAIT_SYMBOL:
				case WEEK_SYMBOL:
				case WORK_SYMBOL:
				case WEIGHT_STRING_SYMBOL:
				case X509_SYMBOL:
				case XID_SYMBOL:
				case XML_SYMBOL:
				case YEAR_SYMBOL:
				case EXCHANGE_SYMBOL:
				case EXPIRE_SYMBOL:
				case ONLY_SYMBOL:
				case VALIDATION_SYMBOL:
				case WITHOUT_SYMBOL:
				case ROLE_SYMBOL:
				case ADMIN_SYMBOL:
				case INVISIBLE_SYMBOL:
				case VISIBLE_SYMBOL:
				case COMPONENT_SYMBOL:
				case SKIP_SYMBOL:
				case LOCKED_SYMBOL:
				case NOWAIT_SYMBOL:
				case HISTOGRAM_SYMBOL:
				case BUCKETS_SYMBOL:
				case EXCLUDE_SYMBOL:
				case FOLLOWING_SYMBOL:
				case NULLS_SYMBOL:
				case OTHERS_SYMBOL:
				case PRECEDING_SYMBOL:
				case RESPECT_SYMBOL:
				case TIES_SYMBOL:
				case UNBOUNDED_SYMBOL:
				case NESTED_SYMBOL:
				case ORDINALITY_SYMBOL:
				case PATH_SYMBOL:
				case HISTORY_SYMBOL:
				case REUSE_SYMBOL:
				case SRID_SYMBOL:
				case THREAD_PRIORITY_SYMBOL:
				case VCPU_SYMBOL:
				case MASTER_PUBLIC_KEY_PATH_SYMBOL:
				case GET_MASTER_PUBLIC_KEY_SYMBOL:
				case DEFINITION_SYMBOL:
				case DESCRIPTION_SYMBOL:
				case ORGANIZATION_SYMBOL:
				case REFERENCE_SYMBOL:
				case OPTIONAL_SYMBOL:
				case SECONDARY_SYMBOL:
				case SECONDARY_ENGINE_SYMBOL:
				case SECONDARY_LOAD_SYMBOL:
				case SECONDARY_UNLOAD_SYMBOL:
				case ACTIVE_SYMBOL:
				case INACTIVE_SYMBOL:
				case RETAIN_SYMBOL:
				case OLD_SYMBOL:
				case NETWORK_NAMESPACE_SYMBOL:
				case ENFORCED_SYMBOL:
				case OJ_SYMBOL:
				case MASTER_COMPRESSION_ALGORITHM_SYMBOL:
				case MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL:
				case PRIVILEGE_CHECKS_USER_SYMBOL:
				case MASTER_TLS_CIPHERSUITES_SYMBOL:
					{
					setState(8324);
					identifierKeywordsUnambiguous();
					}
					break;
				case ASCII_SYMBOL:
				case BEGIN_SYMBOL:
				case BYTE_SYMBOL:
				case CACHE_SYMBOL:
				case CHARSET_SYMBOL:
				case CHECKSUM_SYMBOL:
				case COMMENT_SYMBOL:
				case COMMIT_SYMBOL:
				case CONTAINS_SYMBOL:
				case DEALLOCATE_SYMBOL:
				case DO_SYMBOL:
				case END_SYMBOL:
				case FLUSH_SYMBOL:
				case FOLLOWS_SYMBOL:
				case HANDLER_SYMBOL:
				case HELP_SYMBOL:
				case INSTALL_SYMBOL:
				case LANGUAGE_SYMBOL:
				case NO_SYMBOL:
				case PRECEDES_SYMBOL:
				case PREPARE_SYMBOL:
				case REPAIR_SYMBOL:
				case RESET_SYMBOL:
				case ROLLBACK_SYMBOL:
				case SAVEPOINT_SYMBOL:
				case SIGNED_SYMBOL:
				case SLAVE_SYMBOL:
				case START_SYMBOL:
				case STOP_SYMBOL:
				case TRUNCATE_SYMBOL:
				case UNICODE_SYMBOL:
				case UNINSTALL_SYMBOL:
				case XA_SYMBOL:
				case IMPORT_SYMBOL:
				case CLONE_SYMBOL:
					{
					setState(8325);
					identifierKeywordsAmbiguous2Labels();
					}
					break;
				case GLOBAL_SYMBOL:
				case LOCAL_SYMBOL:
				case SESSION_SYMBOL:
				case PERSIST_SYMBOL:
				case PERSIST_ONLY_SYMBOL:
					{
					setState(8326);
					identifierKeywordsAmbiguous4SystemVariables();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LValueKeywordContext extends ParserRuleContext {
		public IdentifierKeywordsUnambiguousContext identifierKeywordsUnambiguous() {
			return getRuleContext(IdentifierKeywordsUnambiguousContext.class,0);
		}
		public IdentifierKeywordsAmbiguous1RolesAndLabelsContext identifierKeywordsAmbiguous1RolesAndLabels() {
			return getRuleContext(IdentifierKeywordsAmbiguous1RolesAndLabelsContext.class,0);
		}
		public IdentifierKeywordsAmbiguous2LabelsContext identifierKeywordsAmbiguous2Labels() {
			return getRuleContext(IdentifierKeywordsAmbiguous2LabelsContext.class,0);
		}
		public IdentifierKeywordsAmbiguous3RolesContext identifierKeywordsAmbiguous3Roles() {
			return getRuleContext(IdentifierKeywordsAmbiguous3RolesContext.class,0);
		}
		public LValueKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lValueKeyword; }
	}

	public final LValueKeywordContext lValueKeyword() throws RecognitionException {
		LValueKeywordContext _localctx = new LValueKeywordContext(_ctx, getState());
		enterRule(_localctx, 1202, RULE_lValueKeyword);
		try {
			setState(8335);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ACCOUNT_SYMBOL:
			case ALWAYS_SYMBOL:
			case BACKUP_SYMBOL:
			case CLOSE_SYMBOL:
			case FORMAT_SYMBOL:
			case GROUP_REPLICATION_SYMBOL:
			case HOST_SYMBOL:
			case OPEN_SYMBOL:
			case OPTIONS_SYMBOL:
			case OWNER_SYMBOL:
			case PARSER_SYMBOL:
			case PORT_SYMBOL:
			case REMOVE_SYMBOL:
			case RESTORE_SYMBOL:
			case SECURITY_SYMBOL:
			case SERVER_SYMBOL:
			case SOCKET_SYMBOL:
			case SONAME_SYMBOL:
			case UPGRADE_SYMBOL:
			case WRAPPER_SYMBOL:
			case ACTION_SYMBOL:
			case ADDDATE_SYMBOL:
			case AFTER_SYMBOL:
			case AGAINST_SYMBOL:
			case AGGREGATE_SYMBOL:
			case ALGORITHM_SYMBOL:
			case ANY_SYMBOL:
			case AT_SYMBOL:
			case AUTO_INCREMENT_SYMBOL:
			case AUTOEXTEND_SIZE_SYMBOL:
			case AVG_ROW_LENGTH_SYMBOL:
			case AVG_SYMBOL:
			case BINLOG_SYMBOL:
			case BIT_SYMBOL:
			case BLOCK_SYMBOL:
			case BOOL_SYMBOL:
			case BOOLEAN_SYMBOL:
			case BTREE_SYMBOL:
			case CASCADED_SYMBOL:
			case CATALOG_NAME_SYMBOL:
			case CHAIN_SYMBOL:
			case CHANGED_SYMBOL:
			case CHANNEL_SYMBOL:
			case CIPHER_SYMBOL:
			case CLIENT_SYMBOL:
			case CLASS_ORIGIN_SYMBOL:
			case COALESCE_SYMBOL:
			case CODE_SYMBOL:
			case COLLATION_SYMBOL:
			case COLUMN_NAME_SYMBOL:
			case COLUMN_FORMAT_SYMBOL:
			case COLUMNS_SYMBOL:
			case COMMITTED_SYMBOL:
			case COMPACT_SYMBOL:
			case COMPLETION_SYMBOL:
			case COMPRESSED_SYMBOL:
			case COMPRESSION_SYMBOL:
			case ENCRYPTION_SYMBOL:
			case CONCURRENT_SYMBOL:
			case CONNECTION_SYMBOL:
			case CONSISTENT_SYMBOL:
			case CONSTRAINT_CATALOG_SYMBOL:
			case CONSTRAINT_SCHEMA_SYMBOL:
			case CONSTRAINT_NAME_SYMBOL:
			case CONTEXT_SYMBOL:
			case CPU_SYMBOL:
			case CURRENT_SYMBOL:
			case CURSOR_NAME_SYMBOL:
			case DATA_SYMBOL:
			case DATAFILE_SYMBOL:
			case DATETIME_SYMBOL:
			case DATE_SYMBOL:
			case DAY_SYMBOL:
			case DEFAULT_AUTH_SYMBOL:
			case DEFINER_SYMBOL:
			case DELAY_KEY_WRITE_SYMBOL:
			case DIAGNOSTICS_SYMBOL:
			case DIRECTORY_SYMBOL:
			case DISABLE_SYMBOL:
			case DISCARD_SYMBOL:
			case DISK_SYMBOL:
			case DUMPFILE_SYMBOL:
			case DUPLICATE_SYMBOL:
			case DYNAMIC_SYMBOL:
			case ENDS_SYMBOL:
			case ENUM_SYMBOL:
			case ENGINE_SYMBOL:
			case ENGINES_SYMBOL:
			case ERROR_SYMBOL:
			case ERRORS_SYMBOL:
			case ESCAPE_SYMBOL:
			case EVENTS_SYMBOL:
			case EVERY_SYMBOL:
			case EXPANSION_SYMBOL:
			case EXPORT_SYMBOL:
			case EXTENDED_SYMBOL:
			case EXTENT_SIZE_SYMBOL:
			case FAULTS_SYMBOL:
			case FAST_SYMBOL:
			case FOUND_SYMBOL:
			case ENABLE_SYMBOL:
			case FULL_SYMBOL:
			case FILE_BLOCK_SIZE_SYMBOL:
			case FILTER_SYMBOL:
			case FIRST_SYMBOL:
			case FIXED_SYMBOL:
			case GENERAL_SYMBOL:
			case GEOMETRY_SYMBOL:
			case GEOMETRYCOLLECTION_SYMBOL:
			case GET_FORMAT_SYMBOL:
			case GRANTS_SYMBOL:
			case HASH_SYMBOL:
			case HOSTS_SYMBOL:
			case HOUR_SYMBOL:
			case IDENTIFIED_SYMBOL:
			case IGNORE_SERVER_IDS_SYMBOL:
			case INVOKER_SYMBOL:
			case INDEXES_SYMBOL:
			case INITIAL_SIZE_SYMBOL:
			case INSTANCE_SYMBOL:
			case IO_SYMBOL:
			case IPC_SYMBOL:
			case ISOLATION_SYMBOL:
			case ISSUER_SYMBOL:
			case INSERT_METHOD_SYMBOL:
			case JSON_SYMBOL:
			case KEY_BLOCK_SIZE_SYMBOL:
			case LAST_SYMBOL:
			case LEAVES_SYMBOL:
			case LESS_SYMBOL:
			case LEVEL_SYMBOL:
			case LINESTRING_SYMBOL:
			case LIST_SYMBOL:
			case LOCKS_SYMBOL:
			case LOGFILE_SYMBOL:
			case LOGS_SYMBOL:
			case MAX_ROWS_SYMBOL:
			case MASTER_SYMBOL:
			case MASTER_HEARTBEAT_PERIOD_SYMBOL:
			case MASTER_HOST_SYMBOL:
			case MASTER_PORT_SYMBOL:
			case MASTER_LOG_FILE_SYMBOL:
			case MASTER_LOG_POS_SYMBOL:
			case MASTER_USER_SYMBOL:
			case MASTER_PASSWORD_SYMBOL:
			case MASTER_SERVER_ID_SYMBOL:
			case MASTER_CONNECT_RETRY_SYMBOL:
			case MASTER_RETRY_COUNT_SYMBOL:
			case MASTER_DELAY_SYMBOL:
			case MASTER_SSL_SYMBOL:
			case MASTER_SSL_CA_SYMBOL:
			case MASTER_SSL_CAPATH_SYMBOL:
			case MASTER_TLS_VERSION_SYMBOL:
			case MASTER_SSL_CERT_SYMBOL:
			case MASTER_SSL_CIPHER_SYMBOL:
			case MASTER_SSL_CRL_SYMBOL:
			case MASTER_SSL_CRLPATH_SYMBOL:
			case MASTER_SSL_KEY_SYMBOL:
			case MASTER_AUTO_POSITION_SYMBOL:
			case MAX_CONNECTIONS_PER_HOUR_SYMBOL:
			case MAX_QUERIES_PER_HOUR_SYMBOL:
			case MAX_SIZE_SYMBOL:
			case MAX_UPDATES_PER_HOUR_SYMBOL:
			case MAX_USER_CONNECTIONS_SYMBOL:
			case MEDIUM_SYMBOL:
			case MEMORY_SYMBOL:
			case MERGE_SYMBOL:
			case MESSAGE_TEXT_SYMBOL:
			case MICROSECOND_SYMBOL:
			case MIGRATE_SYMBOL:
			case MINUTE_SYMBOL:
			case MIN_ROWS_SYMBOL:
			case MODIFY_SYMBOL:
			case MODE_SYMBOL:
			case MONTH_SYMBOL:
			case MULTILINESTRING_SYMBOL:
			case MULTIPOINT_SYMBOL:
			case MULTIPOLYGON_SYMBOL:
			case MUTEX_SYMBOL:
			case MYSQL_ERRNO_SYMBOL:
			case NAME_SYMBOL:
			case NAMES_SYMBOL:
			case NATIONAL_SYMBOL:
			case NCHAR_SYMBOL:
			case NDBCLUSTER_SYMBOL:
			case NEVER_SYMBOL:
			case NEXT_SYMBOL:
			case NEW_SYMBOL:
			case NO_WAIT_SYMBOL:
			case NODEGROUP_SYMBOL:
			case NUMBER_SYMBOL:
			case NVARCHAR_SYMBOL:
			case OFFSET_SYMBOL:
			case ONE_SYMBOL:
			case PACK_KEYS_SYMBOL:
			case PAGE_SYMBOL:
			case PARTIAL_SYMBOL:
			case PARTITIONING_SYMBOL:
			case PARTITIONS_SYMBOL:
			case PASSWORD_SYMBOL:
			case PHASE_SYMBOL:
			case PLUGIN_DIR_SYMBOL:
			case PLUGIN_SYMBOL:
			case PLUGINS_SYMBOL:
			case POINT_SYMBOL:
			case POLYGON_SYMBOL:
			case PRESERVE_SYMBOL:
			case PREV_SYMBOL:
			case PRIVILEGES_SYMBOL:
			case PROCESSLIST_SYMBOL:
			case PROFILE_SYMBOL:
			case PROFILES_SYMBOL:
			case QUARTER_SYMBOL:
			case QUERY_SYMBOL:
			case QUICK_SYMBOL:
			case READ_ONLY_SYMBOL:
			case REBUILD_SYMBOL:
			case RECOVER_SYMBOL:
			case REDO_BUFFER_SIZE_SYMBOL:
			case REDUNDANT_SYMBOL:
			case RELAY_SYMBOL:
			case RELAYLOG_SYMBOL:
			case RELAY_LOG_FILE_SYMBOL:
			case RELAY_LOG_POS_SYMBOL:
			case RELAY_THREAD_SYMBOL:
			case REORGANIZE_SYMBOL:
			case REPEATABLE_SYMBOL:
			case REPLICATE_DO_DB_SYMBOL:
			case REPLICATE_IGNORE_DB_SYMBOL:
			case REPLICATE_DO_TABLE_SYMBOL:
			case REPLICATE_IGNORE_TABLE_SYMBOL:
			case REPLICATE_WILD_DO_TABLE_SYMBOL:
			case REPLICATE_WILD_IGNORE_TABLE_SYMBOL:
			case REPLICATE_REWRITE_DB_SYMBOL:
			case RESUME_SYMBOL:
			case RETURNED_SQLSTATE_SYMBOL:
			case RETURNS_SYMBOL:
			case REVERSE_SYMBOL:
			case ROLLUP_SYMBOL:
			case ROTATE_SYMBOL:
			case ROUTINE_SYMBOL:
			case ROW_COUNT_SYMBOL:
			case ROW_FORMAT_SYMBOL:
			case RTREE_SYMBOL:
			case SCHEDULE_SYMBOL:
			case SCHEMA_NAME_SYMBOL:
			case SECOND_SYMBOL:
			case SERIAL_SYMBOL:
			case SERIALIZABLE_SYMBOL:
			case SIMPLE_SYMBOL:
			case SHARE_SYMBOL:
			case SLOW_SYMBOL:
			case SNAPSHOT_SYMBOL:
			case SOUNDS_SYMBOL:
			case SOURCE_SYMBOL:
			case SQL_AFTER_GTIDS_SYMBOL:
			case SQL_AFTER_MTS_GAPS_SYMBOL:
			case SQL_BEFORE_GTIDS_SYMBOL:
			case SQL_BUFFER_RESULT_SYMBOL:
			case SQL_NO_CACHE_SYMBOL:
			case SQL_THREAD_SYMBOL:
			case STACKED_SYMBOL:
			case STARTS_SYMBOL:
			case STATS_AUTO_RECALC_SYMBOL:
			case STATS_PERSISTENT_SYMBOL:
			case STATS_SAMPLE_PAGES_SYMBOL:
			case STATUS_SYMBOL:
			case STORAGE_SYMBOL:
			case STRING_SYMBOL:
			case SUBCLASS_ORIGIN_SYMBOL:
			case SUBDATE_SYMBOL:
			case SUBJECT_SYMBOL:
			case SUBPARTITION_SYMBOL:
			case SUBPARTITIONS_SYMBOL:
			case SUSPEND_SYMBOL:
			case SWAPS_SYMBOL:
			case SWITCHES_SYMBOL:
			case TABLE_NAME_SYMBOL:
			case TABLES_SYMBOL:
			case TABLE_CHECKSUM_SYMBOL:
			case TABLESPACE_SYMBOL:
			case TEMPORARY_SYMBOL:
			case TEMPTABLE_SYMBOL:
			case TEXT_SYMBOL:
			case THAN_SYMBOL:
			case TRANSACTION_SYMBOL:
			case TRIGGERS_SYMBOL:
			case TIMESTAMP_SYMBOL:
			case TIMESTAMP_ADD_SYMBOL:
			case TIMESTAMP_DIFF_SYMBOL:
			case TIME_SYMBOL:
			case TYPES_SYMBOL:
			case TYPE_SYMBOL:
			case UNCOMMITTED_SYMBOL:
			case UNDEFINED_SYMBOL:
			case UNDO_BUFFER_SIZE_SYMBOL:
			case UNDOFILE_SYMBOL:
			case UNKNOWN_SYMBOL:
			case UNTIL_SYMBOL:
			case USER_RESOURCES_SYMBOL:
			case USER_SYMBOL:
			case USE_FRM_SYMBOL:
			case VARIABLES_SYMBOL:
			case VIEW_SYMBOL:
			case VALUE_SYMBOL:
			case WARNINGS_SYMBOL:
			case WAIT_SYMBOL:
			case WEEK_SYMBOL:
			case WORK_SYMBOL:
			case WEIGHT_STRING_SYMBOL:
			case X509_SYMBOL:
			case XID_SYMBOL:
			case XML_SYMBOL:
			case YEAR_SYMBOL:
			case EXCHANGE_SYMBOL:
			case EXPIRE_SYMBOL:
			case ONLY_SYMBOL:
			case VALIDATION_SYMBOL:
			case WITHOUT_SYMBOL:
			case ROLE_SYMBOL:
			case ADMIN_SYMBOL:
			case INVISIBLE_SYMBOL:
			case VISIBLE_SYMBOL:
			case COMPONENT_SYMBOL:
			case SKIP_SYMBOL:
			case LOCKED_SYMBOL:
			case NOWAIT_SYMBOL:
			case HISTOGRAM_SYMBOL:
			case BUCKETS_SYMBOL:
			case EXCLUDE_SYMBOL:
			case FOLLOWING_SYMBOL:
			case NULLS_SYMBOL:
			case OTHERS_SYMBOL:
			case PRECEDING_SYMBOL:
			case RESPECT_SYMBOL:
			case TIES_SYMBOL:
			case UNBOUNDED_SYMBOL:
			case NESTED_SYMBOL:
			case ORDINALITY_SYMBOL:
			case PATH_SYMBOL:
			case HISTORY_SYMBOL:
			case REUSE_SYMBOL:
			case SRID_SYMBOL:
			case THREAD_PRIORITY_SYMBOL:
			case VCPU_SYMBOL:
			case MASTER_PUBLIC_KEY_PATH_SYMBOL:
			case GET_MASTER_PUBLIC_KEY_SYMBOL:
			case DEFINITION_SYMBOL:
			case DESCRIPTION_SYMBOL:
			case ORGANIZATION_SYMBOL:
			case REFERENCE_SYMBOL:
			case OPTIONAL_SYMBOL:
			case SECONDARY_SYMBOL:
			case SECONDARY_ENGINE_SYMBOL:
			case SECONDARY_LOAD_SYMBOL:
			case SECONDARY_UNLOAD_SYMBOL:
			case ACTIVE_SYMBOL:
			case INACTIVE_SYMBOL:
			case RETAIN_SYMBOL:
			case OLD_SYMBOL:
			case NETWORK_NAMESPACE_SYMBOL:
			case ENFORCED_SYMBOL:
			case OJ_SYMBOL:
			case MASTER_COMPRESSION_ALGORITHM_SYMBOL:
			case MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL:
			case PRIVILEGE_CHECKS_USER_SYMBOL:
			case MASTER_TLS_CIPHERSUITES_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(8331);
				identifierKeywordsUnambiguous();
				}
				break;
			case EXECUTE_SYMBOL:
			case SHUTDOWN_SYMBOL:
			case RESTART_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(8332);
				identifierKeywordsAmbiguous1RolesAndLabels();
				}
				break;
			case ASCII_SYMBOL:
			case BEGIN_SYMBOL:
			case BYTE_SYMBOL:
			case CACHE_SYMBOL:
			case CHARSET_SYMBOL:
			case CHECKSUM_SYMBOL:
			case COMMENT_SYMBOL:
			case COMMIT_SYMBOL:
			case CONTAINS_SYMBOL:
			case DEALLOCATE_SYMBOL:
			case DO_SYMBOL:
			case END_SYMBOL:
			case FLUSH_SYMBOL:
			case FOLLOWS_SYMBOL:
			case HANDLER_SYMBOL:
			case HELP_SYMBOL:
			case INSTALL_SYMBOL:
			case LANGUAGE_SYMBOL:
			case NO_SYMBOL:
			case PRECEDES_SYMBOL:
			case PREPARE_SYMBOL:
			case REPAIR_SYMBOL:
			case RESET_SYMBOL:
			case ROLLBACK_SYMBOL:
			case SAVEPOINT_SYMBOL:
			case SIGNED_SYMBOL:
			case SLAVE_SYMBOL:
			case START_SYMBOL:
			case STOP_SYMBOL:
			case TRUNCATE_SYMBOL:
			case UNICODE_SYMBOL:
			case UNINSTALL_SYMBOL:
			case XA_SYMBOL:
			case IMPORT_SYMBOL:
			case CLONE_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(8333);
				identifierKeywordsAmbiguous2Labels();
				}
				break;
			case EVENT_SYMBOL:
			case FILE_SYMBOL:
			case NONE_SYMBOL:
			case PROCESS_SYMBOL:
			case PROXY_SYMBOL:
			case RELOAD_SYMBOL:
			case REPLICATION_SYMBOL:
			case SUPER_SYMBOL:
			case RESOURCE_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(8334);
				identifierKeywordsAmbiguous3Roles();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierKeywordsAmbiguous4SystemVariablesContext extends ParserRuleContext {
		public TerminalNode GLOBAL_SYMBOL() { return getToken(MySQLParser.GLOBAL_SYMBOL, 0); }
		public TerminalNode LOCAL_SYMBOL() { return getToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public TerminalNode PERSIST_SYMBOL() { return getToken(MySQLParser.PERSIST_SYMBOL, 0); }
		public TerminalNode PERSIST_ONLY_SYMBOL() { return getToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0); }
		public TerminalNode SESSION_SYMBOL() { return getToken(MySQLParser.SESSION_SYMBOL, 0); }
		public IdentifierKeywordsAmbiguous4SystemVariablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierKeywordsAmbiguous4SystemVariables; }
	}

	public final IdentifierKeywordsAmbiguous4SystemVariablesContext identifierKeywordsAmbiguous4SystemVariables() throws RecognitionException {
		IdentifierKeywordsAmbiguous4SystemVariablesContext _localctx = new IdentifierKeywordsAmbiguous4SystemVariablesContext(_ctx, getState());
		enterRule(_localctx, 1204, RULE_identifierKeywordsAmbiguous4SystemVariables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8337);
			_la = _input.LA(1);
			if ( !(_la==GLOBAL_SYMBOL || _la==LOCAL_SYMBOL || _la==SESSION_SYMBOL || _la==PERSIST_SYMBOL || _la==PERSIST_ONLY_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleOrIdentifierKeywordContext extends ParserRuleContext {
		public TerminalNode ACCOUNT_SYMBOL() { return getToken(MySQLParser.ACCOUNT_SYMBOL, 0); }
		public TerminalNode ASCII_SYMBOL() { return getToken(MySQLParser.ASCII_SYMBOL, 0); }
		public TerminalNode ALWAYS_SYMBOL() { return getToken(MySQLParser.ALWAYS_SYMBOL, 0); }
		public TerminalNode BACKUP_SYMBOL() { return getToken(MySQLParser.BACKUP_SYMBOL, 0); }
		public TerminalNode BEGIN_SYMBOL() { return getToken(MySQLParser.BEGIN_SYMBOL, 0); }
		public TerminalNode BYTE_SYMBOL() { return getToken(MySQLParser.BYTE_SYMBOL, 0); }
		public TerminalNode CACHE_SYMBOL() { return getToken(MySQLParser.CACHE_SYMBOL, 0); }
		public TerminalNode CHARSET_SYMBOL() { return getToken(MySQLParser.CHARSET_SYMBOL, 0); }
		public TerminalNode CHECKSUM_SYMBOL() { return getToken(MySQLParser.CHECKSUM_SYMBOL, 0); }
		public TerminalNode CLONE_SYMBOL() { return getToken(MySQLParser.CLONE_SYMBOL, 0); }
		public TerminalNode CLOSE_SYMBOL() { return getToken(MySQLParser.CLOSE_SYMBOL, 0); }
		public TerminalNode COMMENT_SYMBOL() { return getToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public TerminalNode COMMIT_SYMBOL() { return getToken(MySQLParser.COMMIT_SYMBOL, 0); }
		public TerminalNode CONTAINS_SYMBOL() { return getToken(MySQLParser.CONTAINS_SYMBOL, 0); }
		public TerminalNode DEALLOCATE_SYMBOL() { return getToken(MySQLParser.DEALLOCATE_SYMBOL, 0); }
		public TerminalNode DO_SYMBOL() { return getToken(MySQLParser.DO_SYMBOL, 0); }
		public TerminalNode END_SYMBOL() { return getToken(MySQLParser.END_SYMBOL, 0); }
		public TerminalNode FLUSH_SYMBOL() { return getToken(MySQLParser.FLUSH_SYMBOL, 0); }
		public TerminalNode FOLLOWS_SYMBOL() { return getToken(MySQLParser.FOLLOWS_SYMBOL, 0); }
		public TerminalNode FORMAT_SYMBOL() { return getToken(MySQLParser.FORMAT_SYMBOL, 0); }
		public TerminalNode GROUP_REPLICATION_SYMBOL() { return getToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0); }
		public TerminalNode HANDLER_SYMBOL() { return getToken(MySQLParser.HANDLER_SYMBOL, 0); }
		public TerminalNode HELP_SYMBOL() { return getToken(MySQLParser.HELP_SYMBOL, 0); }
		public TerminalNode HOST_SYMBOL() { return getToken(MySQLParser.HOST_SYMBOL, 0); }
		public TerminalNode INSTALL_SYMBOL() { return getToken(MySQLParser.INSTALL_SYMBOL, 0); }
		public TerminalNode INVISIBLE_SYMBOL() { return getToken(MySQLParser.INVISIBLE_SYMBOL, 0); }
		public TerminalNode LANGUAGE_SYMBOL() { return getToken(MySQLParser.LANGUAGE_SYMBOL, 0); }
		public TerminalNode NO_SYMBOL() { return getToken(MySQLParser.NO_SYMBOL, 0); }
		public TerminalNode OPEN_SYMBOL() { return getToken(MySQLParser.OPEN_SYMBOL, 0); }
		public TerminalNode OPTIONS_SYMBOL() { return getToken(MySQLParser.OPTIONS_SYMBOL, 0); }
		public TerminalNode OWNER_SYMBOL() { return getToken(MySQLParser.OWNER_SYMBOL, 0); }
		public TerminalNode PARSER_SYMBOL() { return getToken(MySQLParser.PARSER_SYMBOL, 0); }
		public TerminalNode PARTITION_SYMBOL() { return getToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public TerminalNode PORT_SYMBOL() { return getToken(MySQLParser.PORT_SYMBOL, 0); }
		public TerminalNode PRECEDES_SYMBOL() { return getToken(MySQLParser.PRECEDES_SYMBOL, 0); }
		public TerminalNode PREPARE_SYMBOL() { return getToken(MySQLParser.PREPARE_SYMBOL, 0); }
		public TerminalNode REMOVE_SYMBOL() { return getToken(MySQLParser.REMOVE_SYMBOL, 0); }
		public TerminalNode REPAIR_SYMBOL() { return getToken(MySQLParser.REPAIR_SYMBOL, 0); }
		public TerminalNode RESET_SYMBOL() { return getToken(MySQLParser.RESET_SYMBOL, 0); }
		public TerminalNode RESTORE_SYMBOL() { return getToken(MySQLParser.RESTORE_SYMBOL, 0); }
		public TerminalNode ROLE_SYMBOL() { return getToken(MySQLParser.ROLE_SYMBOL, 0); }
		public TerminalNode ROLLBACK_SYMBOL() { return getToken(MySQLParser.ROLLBACK_SYMBOL, 0); }
		public TerminalNode SAVEPOINT_SYMBOL() { return getToken(MySQLParser.SAVEPOINT_SYMBOL, 0); }
		public TerminalNode SECONDARY_SYMBOL() { return getToken(MySQLParser.SECONDARY_SYMBOL, 0); }
		public TerminalNode SECONDARY_ENGINE_SYMBOL() { return getToken(MySQLParser.SECONDARY_ENGINE_SYMBOL, 0); }
		public TerminalNode SECONDARY_LOAD_SYMBOL() { return getToken(MySQLParser.SECONDARY_LOAD_SYMBOL, 0); }
		public TerminalNode SECONDARY_UNLOAD_SYMBOL() { return getToken(MySQLParser.SECONDARY_UNLOAD_SYMBOL, 0); }
		public TerminalNode SECURITY_SYMBOL() { return getToken(MySQLParser.SECURITY_SYMBOL, 0); }
		public TerminalNode SERVER_SYMBOL() { return getToken(MySQLParser.SERVER_SYMBOL, 0); }
		public TerminalNode SIGNED_SYMBOL() { return getToken(MySQLParser.SIGNED_SYMBOL, 0); }
		public TerminalNode SOCKET_SYMBOL() { return getToken(MySQLParser.SOCKET_SYMBOL, 0); }
		public TerminalNode SLAVE_SYMBOL() { return getToken(MySQLParser.SLAVE_SYMBOL, 0); }
		public TerminalNode SONAME_SYMBOL() { return getToken(MySQLParser.SONAME_SYMBOL, 0); }
		public TerminalNode START_SYMBOL() { return getToken(MySQLParser.START_SYMBOL, 0); }
		public TerminalNode STOP_SYMBOL() { return getToken(MySQLParser.STOP_SYMBOL, 0); }
		public TerminalNode TRUNCATE_SYMBOL() { return getToken(MySQLParser.TRUNCATE_SYMBOL, 0); }
		public TerminalNode UNICODE_SYMBOL() { return getToken(MySQLParser.UNICODE_SYMBOL, 0); }
		public TerminalNode UNINSTALL_SYMBOL() { return getToken(MySQLParser.UNINSTALL_SYMBOL, 0); }
		public TerminalNode UPGRADE_SYMBOL() { return getToken(MySQLParser.UPGRADE_SYMBOL, 0); }
		public TerminalNode VISIBLE_SYMBOL() { return getToken(MySQLParser.VISIBLE_SYMBOL, 0); }
		public TerminalNode WRAPPER_SYMBOL() { return getToken(MySQLParser.WRAPPER_SYMBOL, 0); }
		public TerminalNode XA_SYMBOL() { return getToken(MySQLParser.XA_SYMBOL, 0); }
		public TerminalNode SHUTDOWN_SYMBOL() { return getToken(MySQLParser.SHUTDOWN_SYMBOL, 0); }
		public TerminalNode IMPORT_SYMBOL() { return getToken(MySQLParser.IMPORT_SYMBOL, 0); }
		public RoleOrIdentifierKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleOrIdentifierKeyword; }
	}

	public final RoleOrIdentifierKeywordContext roleOrIdentifierKeyword() throws RecognitionException {
		RoleOrIdentifierKeywordContext _localctx = new RoleOrIdentifierKeywordContext(_ctx, getState());
		enterRule(_localctx, 1206, RULE_roleOrIdentifierKeyword);
		int _la;
		try {
			setState(8344);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1118,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8339);
				_la = _input.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT_SYMBOL) | (1L << ASCII_SYMBOL) | (1L << ALWAYS_SYMBOL) | (1L << BACKUP_SYMBOL) | (1L << BEGIN_SYMBOL) | (1L << BYTE_SYMBOL) | (1L << CACHE_SYMBOL) | (1L << CHARSET_SYMBOL) | (1L << CHECKSUM_SYMBOL) | (1L << CLOSE_SYMBOL) | (1L << COMMENT_SYMBOL) | (1L << COMMIT_SYMBOL) | (1L << CONTAINS_SYMBOL) | (1L << DEALLOCATE_SYMBOL) | (1L << DO_SYMBOL) | (1L << END_SYMBOL) | (1L << FLUSH_SYMBOL) | (1L << FOLLOWS_SYMBOL) | (1L << FORMAT_SYMBOL) | (1L << GROUP_REPLICATION_SYMBOL) | (1L << HANDLER_SYMBOL) | (1L << HELP_SYMBOL) | (1L << HOST_SYMBOL) | (1L << INSTALL_SYMBOL) | (1L << LANGUAGE_SYMBOL) | (1L << NO_SYMBOL) | (1L << OPEN_SYMBOL) | (1L << OPTIONS_SYMBOL) | (1L << OWNER_SYMBOL) | (1L << PARSER_SYMBOL) | (1L << PARTITION_SYMBOL) | (1L << PORT_SYMBOL) | (1L << PRECEDES_SYMBOL) | (1L << PREPARE_SYMBOL) | (1L << REMOVE_SYMBOL) | (1L << REPAIR_SYMBOL) | (1L << RESET_SYMBOL) | (1L << RESTORE_SYMBOL) | (1L << ROLLBACK_SYMBOL) | (1L << SAVEPOINT_SYMBOL) | (1L << SECURITY_SYMBOL) | (1L << SERVER_SYMBOL) | (1L << SIGNED_SYMBOL) | (1L << SLAVE_SYMBOL) | (1L << SOCKET_SYMBOL) | (1L << SONAME_SYMBOL) | (1L << START_SYMBOL) | (1L << STOP_SYMBOL) | (1L << TRUNCATE_SYMBOL) | (1L << UNICODE_SYMBOL) | (1L << UNINSTALL_SYMBOL) | (1L << UPGRADE_SYMBOL) | (1L << WRAPPER_SYMBOL) | (1L << XA_SYMBOL))) != 0) || ((((_la - 689)) & ~0x3f) == 0 && ((1L << (_la - 689)) & ((1L << (ROLE_SYMBOL - 689)) | (1L << (INVISIBLE_SYMBOL - 689)) | (1L << (VISIBLE_SYMBOL - 689)) | (1L << (CLONE_SYMBOL - 689)) | (1L << (SECONDARY_SYMBOL - 689)) | (1L << (SECONDARY_ENGINE_SYMBOL - 689)) | (1L << (SECONDARY_LOAD_SYMBOL - 689)))) != 0) || _la==SECONDARY_UNLOAD_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8340);
				if (!(serverVersion >= 50709)) throw new FailedPredicateException(this, "serverVersion >= 50709");
				setState(8341);
				match(SHUTDOWN_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8342);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(8343);
				match(IMPORT_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleOrLabelKeywordContext extends ParserRuleContext {
		public TerminalNode ACTION_SYMBOL() { return getToken(MySQLParser.ACTION_SYMBOL, 0); }
		public TerminalNode ACTIVE_SYMBOL() { return getToken(MySQLParser.ACTIVE_SYMBOL, 0); }
		public TerminalNode ADDDATE_SYMBOL() { return getToken(MySQLParser.ADDDATE_SYMBOL, 0); }
		public TerminalNode AFTER_SYMBOL() { return getToken(MySQLParser.AFTER_SYMBOL, 0); }
		public TerminalNode AGAINST_SYMBOL() { return getToken(MySQLParser.AGAINST_SYMBOL, 0); }
		public TerminalNode AGGREGATE_SYMBOL() { return getToken(MySQLParser.AGGREGATE_SYMBOL, 0); }
		public TerminalNode ALGORITHM_SYMBOL() { return getToken(MySQLParser.ALGORITHM_SYMBOL, 0); }
		public TerminalNode ANALYSE_SYMBOL() { return getToken(MySQLParser.ANALYSE_SYMBOL, 0); }
		public TerminalNode ANY_SYMBOL() { return getToken(MySQLParser.ANY_SYMBOL, 0); }
		public TerminalNode AT_SYMBOL() { return getToken(MySQLParser.AT_SYMBOL, 0); }
		public TerminalNode AUTHORS_SYMBOL() { return getToken(MySQLParser.AUTHORS_SYMBOL, 0); }
		public TerminalNode AUTO_INCREMENT_SYMBOL() { return getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0); }
		public TerminalNode AUTOEXTEND_SIZE_SYMBOL() { return getToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0); }
		public TerminalNode AVG_ROW_LENGTH_SYMBOL() { return getToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0); }
		public TerminalNode AVG_SYMBOL() { return getToken(MySQLParser.AVG_SYMBOL, 0); }
		public TerminalNode BINLOG_SYMBOL() { return getToken(MySQLParser.BINLOG_SYMBOL, 0); }
		public TerminalNode BIT_SYMBOL() { return getToken(MySQLParser.BIT_SYMBOL, 0); }
		public TerminalNode BLOCK_SYMBOL() { return getToken(MySQLParser.BLOCK_SYMBOL, 0); }
		public TerminalNode BOOL_SYMBOL() { return getToken(MySQLParser.BOOL_SYMBOL, 0); }
		public TerminalNode BOOLEAN_SYMBOL() { return getToken(MySQLParser.BOOLEAN_SYMBOL, 0); }
		public TerminalNode BTREE_SYMBOL() { return getToken(MySQLParser.BTREE_SYMBOL, 0); }
		public TerminalNode BUCKETS_SYMBOL() { return getToken(MySQLParser.BUCKETS_SYMBOL, 0); }
		public TerminalNode CASCADED_SYMBOL() { return getToken(MySQLParser.CASCADED_SYMBOL, 0); }
		public TerminalNode CATALOG_NAME_SYMBOL() { return getToken(MySQLParser.CATALOG_NAME_SYMBOL, 0); }
		public TerminalNode CHAIN_SYMBOL() { return getToken(MySQLParser.CHAIN_SYMBOL, 0); }
		public TerminalNode CHANGED_SYMBOL() { return getToken(MySQLParser.CHANGED_SYMBOL, 0); }
		public TerminalNode CHANNEL_SYMBOL() { return getToken(MySQLParser.CHANNEL_SYMBOL, 0); }
		public TerminalNode CIPHER_SYMBOL() { return getToken(MySQLParser.CIPHER_SYMBOL, 0); }
		public TerminalNode CLIENT_SYMBOL() { return getToken(MySQLParser.CLIENT_SYMBOL, 0); }
		public TerminalNode CLASS_ORIGIN_SYMBOL() { return getToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0); }
		public TerminalNode COALESCE_SYMBOL() { return getToken(MySQLParser.COALESCE_SYMBOL, 0); }
		public TerminalNode CODE_SYMBOL() { return getToken(MySQLParser.CODE_SYMBOL, 0); }
		public TerminalNode COLLATION_SYMBOL() { return getToken(MySQLParser.COLLATION_SYMBOL, 0); }
		public TerminalNode COLUMN_NAME_SYMBOL() { return getToken(MySQLParser.COLUMN_NAME_SYMBOL, 0); }
		public TerminalNode COLUMN_FORMAT_SYMBOL() { return getToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0); }
		public TerminalNode COLUMNS_SYMBOL() { return getToken(MySQLParser.COLUMNS_SYMBOL, 0); }
		public TerminalNode COMMITTED_SYMBOL() { return getToken(MySQLParser.COMMITTED_SYMBOL, 0); }
		public TerminalNode COMPACT_SYMBOL() { return getToken(MySQLParser.COMPACT_SYMBOL, 0); }
		public TerminalNode COMPLETION_SYMBOL() { return getToken(MySQLParser.COMPLETION_SYMBOL, 0); }
		public TerminalNode COMPONENT_SYMBOL() { return getToken(MySQLParser.COMPONENT_SYMBOL, 0); }
		public TerminalNode COMPRESSED_SYMBOL() { return getToken(MySQLParser.COMPRESSED_SYMBOL, 0); }
		public TerminalNode COMPRESSION_SYMBOL() { return getToken(MySQLParser.COMPRESSION_SYMBOL, 0); }
		public TerminalNode CONCURRENT_SYMBOL() { return getToken(MySQLParser.CONCURRENT_SYMBOL, 0); }
		public TerminalNode CONNECTION_SYMBOL() { return getToken(MySQLParser.CONNECTION_SYMBOL, 0); }
		public TerminalNode CONSISTENT_SYMBOL() { return getToken(MySQLParser.CONSISTENT_SYMBOL, 0); }
		public TerminalNode CONSTRAINT_CATALOG_SYMBOL() { return getToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0); }
		public TerminalNode CONSTRAINT_SCHEMA_SYMBOL() { return getToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0); }
		public TerminalNode CONSTRAINT_NAME_SYMBOL() { return getToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0); }
		public TerminalNode CONTEXT_SYMBOL() { return getToken(MySQLParser.CONTEXT_SYMBOL, 0); }
		public TerminalNode CONTRIBUTORS_SYMBOL() { return getToken(MySQLParser.CONTRIBUTORS_SYMBOL, 0); }
		public TerminalNode CPU_SYMBOL() { return getToken(MySQLParser.CPU_SYMBOL, 0); }
		public TerminalNode CURRENT_SYMBOL() { return getToken(MySQLParser.CURRENT_SYMBOL, 0); }
		public TerminalNode CURSOR_NAME_SYMBOL() { return getToken(MySQLParser.CURSOR_NAME_SYMBOL, 0); }
		public TerminalNode DATA_SYMBOL() { return getToken(MySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode DATAFILE_SYMBOL() { return getToken(MySQLParser.DATAFILE_SYMBOL, 0); }
		public TerminalNode DATETIME_SYMBOL() { return getToken(MySQLParser.DATETIME_SYMBOL, 0); }
		public TerminalNode DATE_SYMBOL() { return getToken(MySQLParser.DATE_SYMBOL, 0); }
		public TerminalNode DAY_SYMBOL() { return getToken(MySQLParser.DAY_SYMBOL, 0); }
		public TerminalNode DEFAULT_AUTH_SYMBOL() { return getToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0); }
		public TerminalNode DEFINER_SYMBOL() { return getToken(MySQLParser.DEFINER_SYMBOL, 0); }
		public TerminalNode DELAY_KEY_WRITE_SYMBOL() { return getToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0); }
		public TerminalNode DES_KEY_FILE_SYMBOL() { return getToken(MySQLParser.DES_KEY_FILE_SYMBOL, 0); }
		public TerminalNode DESCRIPTION_SYMBOL() { return getToken(MySQLParser.DESCRIPTION_SYMBOL, 0); }
		public TerminalNode DIAGNOSTICS_SYMBOL() { return getToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0); }
		public TerminalNode DIRECTORY_SYMBOL() { return getToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
		public TerminalNode DISABLE_SYMBOL() { return getToken(MySQLParser.DISABLE_SYMBOL, 0); }
		public TerminalNode DISCARD_SYMBOL() { return getToken(MySQLParser.DISCARD_SYMBOL, 0); }
		public TerminalNode DISK_SYMBOL() { return getToken(MySQLParser.DISK_SYMBOL, 0); }
		public TerminalNode DUMPFILE_SYMBOL() { return getToken(MySQLParser.DUMPFILE_SYMBOL, 0); }
		public TerminalNode DUPLICATE_SYMBOL() { return getToken(MySQLParser.DUPLICATE_SYMBOL, 0); }
		public TerminalNode DYNAMIC_SYMBOL() { return getToken(MySQLParser.DYNAMIC_SYMBOL, 0); }
		public TerminalNode ENCRYPTION_SYMBOL() { return getToken(MySQLParser.ENCRYPTION_SYMBOL, 0); }
		public TerminalNode ENDS_SYMBOL() { return getToken(MySQLParser.ENDS_SYMBOL, 0); }
		public TerminalNode ENUM_SYMBOL() { return getToken(MySQLParser.ENUM_SYMBOL, 0); }
		public TerminalNode ENGINE_SYMBOL() { return getToken(MySQLParser.ENGINE_SYMBOL, 0); }
		public TerminalNode ENGINES_SYMBOL() { return getToken(MySQLParser.ENGINES_SYMBOL, 0); }
		public TerminalNode ERROR_SYMBOL() { return getToken(MySQLParser.ERROR_SYMBOL, 0); }
		public TerminalNode ERRORS_SYMBOL() { return getToken(MySQLParser.ERRORS_SYMBOL, 0); }
		public TerminalNode ESCAPE_SYMBOL() { return getToken(MySQLParser.ESCAPE_SYMBOL, 0); }
		public TerminalNode EVENTS_SYMBOL() { return getToken(MySQLParser.EVENTS_SYMBOL, 0); }
		public TerminalNode EVERY_SYMBOL() { return getToken(MySQLParser.EVERY_SYMBOL, 0); }
		public TerminalNode EXCLUDE_SYMBOL() { return getToken(MySQLParser.EXCLUDE_SYMBOL, 0); }
		public TerminalNode EXPANSION_SYMBOL() { return getToken(MySQLParser.EXPANSION_SYMBOL, 0); }
		public TerminalNode EXPORT_SYMBOL() { return getToken(MySQLParser.EXPORT_SYMBOL, 0); }
		public TerminalNode EXTENDED_SYMBOL() { return getToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		public TerminalNode EXTENT_SIZE_SYMBOL() { return getToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0); }
		public TerminalNode FAULTS_SYMBOL() { return getToken(MySQLParser.FAULTS_SYMBOL, 0); }
		public TerminalNode FAST_SYMBOL() { return getToken(MySQLParser.FAST_SYMBOL, 0); }
		public TerminalNode FOLLOWING_SYMBOL() { return getToken(MySQLParser.FOLLOWING_SYMBOL, 0); }
		public TerminalNode FOUND_SYMBOL() { return getToken(MySQLParser.FOUND_SYMBOL, 0); }
		public TerminalNode ENABLE_SYMBOL() { return getToken(MySQLParser.ENABLE_SYMBOL, 0); }
		public TerminalNode FULL_SYMBOL() { return getToken(MySQLParser.FULL_SYMBOL, 0); }
		public TerminalNode FILE_BLOCK_SIZE_SYMBOL() { return getToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0); }
		public TerminalNode FILTER_SYMBOL() { return getToken(MySQLParser.FILTER_SYMBOL, 0); }
		public TerminalNode FIRST_SYMBOL() { return getToken(MySQLParser.FIRST_SYMBOL, 0); }
		public TerminalNode FIXED_SYMBOL() { return getToken(MySQLParser.FIXED_SYMBOL, 0); }
		public TerminalNode GENERAL_SYMBOL() { return getToken(MySQLParser.GENERAL_SYMBOL, 0); }
		public TerminalNode GEOMETRY_SYMBOL() { return getToken(MySQLParser.GEOMETRY_SYMBOL, 0); }
		public TerminalNode GEOMETRYCOLLECTION_SYMBOL() { return getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
		public TerminalNode GET_FORMAT_SYMBOL() { return getToken(MySQLParser.GET_FORMAT_SYMBOL, 0); }
		public TerminalNode GRANTS_SYMBOL() { return getToken(MySQLParser.GRANTS_SYMBOL, 0); }
		public TerminalNode GLOBAL_SYMBOL() { return getToken(MySQLParser.GLOBAL_SYMBOL, 0); }
		public TerminalNode HASH_SYMBOL() { return getToken(MySQLParser.HASH_SYMBOL, 0); }
		public TerminalNode HISTOGRAM_SYMBOL() { return getToken(MySQLParser.HISTOGRAM_SYMBOL, 0); }
		public TerminalNode HISTORY_SYMBOL() { return getToken(MySQLParser.HISTORY_SYMBOL, 0); }
		public TerminalNode HOSTS_SYMBOL() { return getToken(MySQLParser.HOSTS_SYMBOL, 0); }
		public TerminalNode HOUR_SYMBOL() { return getToken(MySQLParser.HOUR_SYMBOL, 0); }
		public TerminalNode IDENTIFIED_SYMBOL() { return getToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public TerminalNode IGNORE_SERVER_IDS_SYMBOL() { return getToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0); }
		public TerminalNode INVOKER_SYMBOL() { return getToken(MySQLParser.INVOKER_SYMBOL, 0); }
		public TerminalNode INDEXES_SYMBOL() { return getToken(MySQLParser.INDEXES_SYMBOL, 0); }
		public TerminalNode INITIAL_SIZE_SYMBOL() { return getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0); }
		public TerminalNode INSTANCE_SYMBOL() { return getToken(MySQLParser.INSTANCE_SYMBOL, 0); }
		public TerminalNode INACTIVE_SYMBOL() { return getToken(MySQLParser.INACTIVE_SYMBOL, 0); }
		public TerminalNode IO_SYMBOL() { return getToken(MySQLParser.IO_SYMBOL, 0); }
		public TerminalNode IPC_SYMBOL() { return getToken(MySQLParser.IPC_SYMBOL, 0); }
		public TerminalNode ISOLATION_SYMBOL() { return getToken(MySQLParser.ISOLATION_SYMBOL, 0); }
		public TerminalNode ISSUER_SYMBOL() { return getToken(MySQLParser.ISSUER_SYMBOL, 0); }
		public TerminalNode INSERT_METHOD_SYMBOL() { return getToken(MySQLParser.INSERT_METHOD_SYMBOL, 0); }
		public TerminalNode JSON_SYMBOL() { return getToken(MySQLParser.JSON_SYMBOL, 0); }
		public TerminalNode KEY_BLOCK_SIZE_SYMBOL() { return getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0); }
		public TerminalNode LAST_SYMBOL() { return getToken(MySQLParser.LAST_SYMBOL, 0); }
		public TerminalNode LEAVES_SYMBOL() { return getToken(MySQLParser.LEAVES_SYMBOL, 0); }
		public TerminalNode LESS_SYMBOL() { return getToken(MySQLParser.LESS_SYMBOL, 0); }
		public TerminalNode LEVEL_SYMBOL() { return getToken(MySQLParser.LEVEL_SYMBOL, 0); }
		public TerminalNode LINESTRING_SYMBOL() { return getToken(MySQLParser.LINESTRING_SYMBOL, 0); }
		public TerminalNode LIST_SYMBOL() { return getToken(MySQLParser.LIST_SYMBOL, 0); }
		public TerminalNode LOCAL_SYMBOL() { return getToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public TerminalNode LOCKED_SYMBOL() { return getToken(MySQLParser.LOCKED_SYMBOL, 0); }
		public TerminalNode LOCKS_SYMBOL() { return getToken(MySQLParser.LOCKS_SYMBOL, 0); }
		public TerminalNode LOGFILE_SYMBOL() { return getToken(MySQLParser.LOGFILE_SYMBOL, 0); }
		public TerminalNode LOGS_SYMBOL() { return getToken(MySQLParser.LOGS_SYMBOL, 0); }
		public TerminalNode MAX_ROWS_SYMBOL() { return getToken(MySQLParser.MAX_ROWS_SYMBOL, 0); }
		public TerminalNode MASTER_SYMBOL() { return getToken(MySQLParser.MASTER_SYMBOL, 0); }
		public TerminalNode MASTER_HEARTBEAT_PERIOD_SYMBOL() { return getToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0); }
		public TerminalNode MASTER_HOST_SYMBOL() { return getToken(MySQLParser.MASTER_HOST_SYMBOL, 0); }
		public TerminalNode MASTER_PORT_SYMBOL() { return getToken(MySQLParser.MASTER_PORT_SYMBOL, 0); }
		public TerminalNode MASTER_LOG_FILE_SYMBOL() { return getToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0); }
		public TerminalNode MASTER_LOG_POS_SYMBOL() { return getToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0); }
		public TerminalNode MASTER_USER_SYMBOL() { return getToken(MySQLParser.MASTER_USER_SYMBOL, 0); }
		public TerminalNode MASTER_PASSWORD_SYMBOL() { return getToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0); }
		public TerminalNode MASTER_PUBLIC_KEY_PATH_SYMBOL() { return getToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0); }
		public TerminalNode MASTER_SERVER_ID_SYMBOL() { return getToken(MySQLParser.MASTER_SERVER_ID_SYMBOL, 0); }
		public TerminalNode MASTER_CONNECT_RETRY_SYMBOL() { return getToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0); }
		public TerminalNode MASTER_RETRY_COUNT_SYMBOL() { return getToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0); }
		public TerminalNode MASTER_DELAY_SYMBOL() { return getToken(MySQLParser.MASTER_DELAY_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CA_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CAPATH_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0); }
		public TerminalNode MASTER_TLS_VERSION_SYMBOL() { return getToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CERT_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CIPHER_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CRL_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CRLPATH_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_KEY_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0); }
		public TerminalNode MASTER_AUTO_POSITION_SYMBOL() { return getToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR_SYMBOL() { return getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0); }
		public TerminalNode MAX_QUERIES_PER_HOUR_SYMBOL() { return getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0); }
		public TerminalNode MAX_STATEMENT_TIME_SYMBOL() { return getToken(MySQLParser.MAX_STATEMENT_TIME_SYMBOL, 0); }
		public TerminalNode MAX_SIZE_SYMBOL() { return getToken(MySQLParser.MAX_SIZE_SYMBOL, 0); }
		public TerminalNode MAX_UPDATES_PER_HOUR_SYMBOL() { return getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0); }
		public TerminalNode MAX_USER_CONNECTIONS_SYMBOL() { return getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0); }
		public TerminalNode MEDIUM_SYMBOL() { return getToken(MySQLParser.MEDIUM_SYMBOL, 0); }
		public TerminalNode MEMORY_SYMBOL() { return getToken(MySQLParser.MEMORY_SYMBOL, 0); }
		public TerminalNode MERGE_SYMBOL() { return getToken(MySQLParser.MERGE_SYMBOL, 0); }
		public TerminalNode MESSAGE_TEXT_SYMBOL() { return getToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0); }
		public TerminalNode MICROSECOND_SYMBOL() { return getToken(MySQLParser.MICROSECOND_SYMBOL, 0); }
		public TerminalNode MIGRATE_SYMBOL() { return getToken(MySQLParser.MIGRATE_SYMBOL, 0); }
		public TerminalNode MINUTE_SYMBOL() { return getToken(MySQLParser.MINUTE_SYMBOL, 0); }
		public TerminalNode MIN_ROWS_SYMBOL() { return getToken(MySQLParser.MIN_ROWS_SYMBOL, 0); }
		public TerminalNode MODIFY_SYMBOL() { return getToken(MySQLParser.MODIFY_SYMBOL, 0); }
		public TerminalNode MODE_SYMBOL() { return getToken(MySQLParser.MODE_SYMBOL, 0); }
		public TerminalNode MONTH_SYMBOL() { return getToken(MySQLParser.MONTH_SYMBOL, 0); }
		public TerminalNode MULTILINESTRING_SYMBOL() { return getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0); }
		public TerminalNode MULTIPOINT_SYMBOL() { return getToken(MySQLParser.MULTIPOINT_SYMBOL, 0); }
		public TerminalNode MULTIPOLYGON_SYMBOL() { return getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0); }
		public TerminalNode MUTEX_SYMBOL() { return getToken(MySQLParser.MUTEX_SYMBOL, 0); }
		public TerminalNode MYSQL_ERRNO_SYMBOL() { return getToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0); }
		public TerminalNode NAME_SYMBOL() { return getToken(MySQLParser.NAME_SYMBOL, 0); }
		public TerminalNode NAMES_SYMBOL() { return getToken(MySQLParser.NAMES_SYMBOL, 0); }
		public TerminalNode NATIONAL_SYMBOL() { return getToken(MySQLParser.NATIONAL_SYMBOL, 0); }
		public TerminalNode NCHAR_SYMBOL() { return getToken(MySQLParser.NCHAR_SYMBOL, 0); }
		public TerminalNode NDBCLUSTER_SYMBOL() { return getToken(MySQLParser.NDBCLUSTER_SYMBOL, 0); }
		public TerminalNode NESTED_SYMBOL() { return getToken(MySQLParser.NESTED_SYMBOL, 0); }
		public TerminalNode NEVER_SYMBOL() { return getToken(MySQLParser.NEVER_SYMBOL, 0); }
		public TerminalNode NEXT_SYMBOL() { return getToken(MySQLParser.NEXT_SYMBOL, 0); }
		public TerminalNode NEW_SYMBOL() { return getToken(MySQLParser.NEW_SYMBOL, 0); }
		public TerminalNode NO_WAIT_SYMBOL() { return getToken(MySQLParser.NO_WAIT_SYMBOL, 0); }
		public TerminalNode NODEGROUP_SYMBOL() { return getToken(MySQLParser.NODEGROUP_SYMBOL, 0); }
		public TerminalNode NULLS_SYMBOL() { return getToken(MySQLParser.NULLS_SYMBOL, 0); }
		public TerminalNode NOWAIT_SYMBOL() { return getToken(MySQLParser.NOWAIT_SYMBOL, 0); }
		public TerminalNode NUMBER_SYMBOL() { return getToken(MySQLParser.NUMBER_SYMBOL, 0); }
		public TerminalNode NVARCHAR_SYMBOL() { return getToken(MySQLParser.NVARCHAR_SYMBOL, 0); }
		public TerminalNode OFFSET_SYMBOL() { return getToken(MySQLParser.OFFSET_SYMBOL, 0); }
		public TerminalNode OLD_SYMBOL() { return getToken(MySQLParser.OLD_SYMBOL, 0); }
		public TerminalNode OLD_PASSWORD_SYMBOL() { return getToken(MySQLParser.OLD_PASSWORD_SYMBOL, 0); }
		public TerminalNode ONE_SYMBOL() { return getToken(MySQLParser.ONE_SYMBOL, 0); }
		public TerminalNode OPTIONAL_SYMBOL() { return getToken(MySQLParser.OPTIONAL_SYMBOL, 0); }
		public TerminalNode ORDINALITY_SYMBOL() { return getToken(MySQLParser.ORDINALITY_SYMBOL, 0); }
		public TerminalNode ORGANIZATION_SYMBOL() { return getToken(MySQLParser.ORGANIZATION_SYMBOL, 0); }
		public TerminalNode OTHERS_SYMBOL() { return getToken(MySQLParser.OTHERS_SYMBOL, 0); }
		public TerminalNode PACK_KEYS_SYMBOL() { return getToken(MySQLParser.PACK_KEYS_SYMBOL, 0); }
		public TerminalNode PAGE_SYMBOL() { return getToken(MySQLParser.PAGE_SYMBOL, 0); }
		public TerminalNode PARTIAL_SYMBOL() { return getToken(MySQLParser.PARTIAL_SYMBOL, 0); }
		public TerminalNode PARTITIONING_SYMBOL() { return getToken(MySQLParser.PARTITIONING_SYMBOL, 0); }
		public TerminalNode PARTITIONS_SYMBOL() { return getToken(MySQLParser.PARTITIONS_SYMBOL, 0); }
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public TerminalNode PATH_SYMBOL() { return getToken(MySQLParser.PATH_SYMBOL, 0); }
		public TerminalNode PHASE_SYMBOL() { return getToken(MySQLParser.PHASE_SYMBOL, 0); }
		public TerminalNode PLUGIN_DIR_SYMBOL() { return getToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0); }
		public TerminalNode PLUGIN_SYMBOL() { return getToken(MySQLParser.PLUGIN_SYMBOL, 0); }
		public TerminalNode PLUGINS_SYMBOL() { return getToken(MySQLParser.PLUGINS_SYMBOL, 0); }
		public TerminalNode POINT_SYMBOL() { return getToken(MySQLParser.POINT_SYMBOL, 0); }
		public TerminalNode POLYGON_SYMBOL() { return getToken(MySQLParser.POLYGON_SYMBOL, 0); }
		public TerminalNode PRECEDING_SYMBOL() { return getToken(MySQLParser.PRECEDING_SYMBOL, 0); }
		public TerminalNode PRESERVE_SYMBOL() { return getToken(MySQLParser.PRESERVE_SYMBOL, 0); }
		public TerminalNode PREV_SYMBOL() { return getToken(MySQLParser.PREV_SYMBOL, 0); }
		public TerminalNode THREAD_PRIORITY_SYMBOL() { return getToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0); }
		public TerminalNode PRIVILEGES_SYMBOL() { return getToken(MySQLParser.PRIVILEGES_SYMBOL, 0); }
		public TerminalNode PROCESSLIST_SYMBOL() { return getToken(MySQLParser.PROCESSLIST_SYMBOL, 0); }
		public TerminalNode PROFILE_SYMBOL() { return getToken(MySQLParser.PROFILE_SYMBOL, 0); }
		public TerminalNode PROFILES_SYMBOL() { return getToken(MySQLParser.PROFILES_SYMBOL, 0); }
		public TerminalNode QUARTER_SYMBOL() { return getToken(MySQLParser.QUARTER_SYMBOL, 0); }
		public TerminalNode QUERY_SYMBOL() { return getToken(MySQLParser.QUERY_SYMBOL, 0); }
		public TerminalNode QUICK_SYMBOL() { return getToken(MySQLParser.QUICK_SYMBOL, 0); }
		public TerminalNode READ_ONLY_SYMBOL() { return getToken(MySQLParser.READ_ONLY_SYMBOL, 0); }
		public TerminalNode REBUILD_SYMBOL() { return getToken(MySQLParser.REBUILD_SYMBOL, 0); }
		public TerminalNode RECOVER_SYMBOL() { return getToken(MySQLParser.RECOVER_SYMBOL, 0); }
		public TerminalNode REDO_BUFFER_SIZE_SYMBOL() { return getToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0); }
		public TerminalNode REDOFILE_SYMBOL() { return getToken(MySQLParser.REDOFILE_SYMBOL, 0); }
		public TerminalNode REDUNDANT_SYMBOL() { return getToken(MySQLParser.REDUNDANT_SYMBOL, 0); }
		public TerminalNode RELAY_SYMBOL() { return getToken(MySQLParser.RELAY_SYMBOL, 0); }
		public TerminalNode RELAYLOG_SYMBOL() { return getToken(MySQLParser.RELAYLOG_SYMBOL, 0); }
		public TerminalNode RELAY_LOG_FILE_SYMBOL() { return getToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0); }
		public TerminalNode RELAY_LOG_POS_SYMBOL() { return getToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0); }
		public TerminalNode RELAY_THREAD_SYMBOL() { return getToken(MySQLParser.RELAY_THREAD_SYMBOL, 0); }
		public TerminalNode REMOTE_SYMBOL() { return getToken(MySQLParser.REMOTE_SYMBOL, 0); }
		public TerminalNode REORGANIZE_SYMBOL() { return getToken(MySQLParser.REORGANIZE_SYMBOL, 0); }
		public TerminalNode REPEATABLE_SYMBOL() { return getToken(MySQLParser.REPEATABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_DO_DB_SYMBOL() { return getToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0); }
		public TerminalNode REPLICATE_IGNORE_DB_SYMBOL() { return getToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0); }
		public TerminalNode REPLICATE_DO_TABLE_SYMBOL() { return getToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_IGNORE_TABLE_SYMBOL() { return getToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_WILD_DO_TABLE_SYMBOL() { return getToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_WILD_IGNORE_TABLE_SYMBOL() { return getToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_REWRITE_DB_SYMBOL() { return getToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0); }
		public TerminalNode USER_RESOURCES_SYMBOL() { return getToken(MySQLParser.USER_RESOURCES_SYMBOL, 0); }
		public TerminalNode RESPECT_SYMBOL() { return getToken(MySQLParser.RESPECT_SYMBOL, 0); }
		public TerminalNode RESUME_SYMBOL() { return getToken(MySQLParser.RESUME_SYMBOL, 0); }
		public TerminalNode RETAIN_SYMBOL() { return getToken(MySQLParser.RETAIN_SYMBOL, 0); }
		public TerminalNode RETURNED_SQLSTATE_SYMBOL() { return getToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0); }
		public TerminalNode RETURNS_SYMBOL() { return getToken(MySQLParser.RETURNS_SYMBOL, 0); }
		public TerminalNode REUSE_SYMBOL() { return getToken(MySQLParser.REUSE_SYMBOL, 0); }
		public TerminalNode REVERSE_SYMBOL() { return getToken(MySQLParser.REVERSE_SYMBOL, 0); }
		public TerminalNode ROLLUP_SYMBOL() { return getToken(MySQLParser.ROLLUP_SYMBOL, 0); }
		public TerminalNode ROTATE_SYMBOL() { return getToken(MySQLParser.ROTATE_SYMBOL, 0); }
		public TerminalNode ROUTINE_SYMBOL() { return getToken(MySQLParser.ROUTINE_SYMBOL, 0); }
		public TerminalNode ROW_COUNT_SYMBOL() { return getToken(MySQLParser.ROW_COUNT_SYMBOL, 0); }
		public TerminalNode ROW_FORMAT_SYMBOL() { return getToken(MySQLParser.ROW_FORMAT_SYMBOL, 0); }
		public TerminalNode RTREE_SYMBOL() { return getToken(MySQLParser.RTREE_SYMBOL, 0); }
		public TerminalNode SCHEDULE_SYMBOL() { return getToken(MySQLParser.SCHEDULE_SYMBOL, 0); }
		public TerminalNode SCHEMA_NAME_SYMBOL() { return getToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0); }
		public TerminalNode SECOND_SYMBOL() { return getToken(MySQLParser.SECOND_SYMBOL, 0); }
		public TerminalNode SERIAL_SYMBOL() { return getToken(MySQLParser.SERIAL_SYMBOL, 0); }
		public TerminalNode SERIALIZABLE_SYMBOL() { return getToken(MySQLParser.SERIALIZABLE_SYMBOL, 0); }
		public TerminalNode SESSION_SYMBOL() { return getToken(MySQLParser.SESSION_SYMBOL, 0); }
		public TerminalNode SHARE_SYMBOL() { return getToken(MySQLParser.SHARE_SYMBOL, 0); }
		public TerminalNode SIMPLE_SYMBOL() { return getToken(MySQLParser.SIMPLE_SYMBOL, 0); }
		public TerminalNode SKIP_SYMBOL() { return getToken(MySQLParser.SKIP_SYMBOL, 0); }
		public TerminalNode SLOW_SYMBOL() { return getToken(MySQLParser.SLOW_SYMBOL, 0); }
		public TerminalNode SNAPSHOT_SYMBOL() { return getToken(MySQLParser.SNAPSHOT_SYMBOL, 0); }
		public TerminalNode SOUNDS_SYMBOL() { return getToken(MySQLParser.SOUNDS_SYMBOL, 0); }
		public TerminalNode SOURCE_SYMBOL() { return getToken(MySQLParser.SOURCE_SYMBOL, 0); }
		public TerminalNode SQL_AFTER_GTIDS_SYMBOL() { return getToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0); }
		public TerminalNode SQL_AFTER_MTS_GAPS_SYMBOL() { return getToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0); }
		public TerminalNode SQL_BEFORE_GTIDS_SYMBOL() { return getToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0); }
		public TerminalNode SQL_CACHE_SYMBOL() { return getToken(MySQLParser.SQL_CACHE_SYMBOL, 0); }
		public TerminalNode SQL_BUFFER_RESULT_SYMBOL() { return getToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0); }
		public TerminalNode SQL_NO_CACHE_SYMBOL() { return getToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0); }
		public TerminalNode SQL_THREAD_SYMBOL() { return getToken(MySQLParser.SQL_THREAD_SYMBOL, 0); }
		public TerminalNode SRID_SYMBOL() { return getToken(MySQLParser.SRID_SYMBOL, 0); }
		public TerminalNode STACKED_SYMBOL() { return getToken(MySQLParser.STACKED_SYMBOL, 0); }
		public TerminalNode STARTS_SYMBOL() { return getToken(MySQLParser.STARTS_SYMBOL, 0); }
		public TerminalNode STATS_AUTO_RECALC_SYMBOL() { return getToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0); }
		public TerminalNode STATS_PERSISTENT_SYMBOL() { return getToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0); }
		public TerminalNode STATS_SAMPLE_PAGES_SYMBOL() { return getToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0); }
		public TerminalNode STATUS_SYMBOL() { return getToken(MySQLParser.STATUS_SYMBOL, 0); }
		public TerminalNode STORAGE_SYMBOL() { return getToken(MySQLParser.STORAGE_SYMBOL, 0); }
		public TerminalNode STRING_SYMBOL() { return getToken(MySQLParser.STRING_SYMBOL, 0); }
		public TerminalNode SUBCLASS_ORIGIN_SYMBOL() { return getToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0); }
		public TerminalNode SUBDATE_SYMBOL() { return getToken(MySQLParser.SUBDATE_SYMBOL, 0); }
		public TerminalNode SUBJECT_SYMBOL() { return getToken(MySQLParser.SUBJECT_SYMBOL, 0); }
		public TerminalNode SUBPARTITION_SYMBOL() { return getToken(MySQLParser.SUBPARTITION_SYMBOL, 0); }
		public TerminalNode SUBPARTITIONS_SYMBOL() { return getToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0); }
		public TerminalNode SUPER_SYMBOL() { return getToken(MySQLParser.SUPER_SYMBOL, 0); }
		public TerminalNode SUSPEND_SYMBOL() { return getToken(MySQLParser.SUSPEND_SYMBOL, 0); }
		public TerminalNode SWAPS_SYMBOL() { return getToken(MySQLParser.SWAPS_SYMBOL, 0); }
		public TerminalNode SWITCHES_SYMBOL() { return getToken(MySQLParser.SWITCHES_SYMBOL, 0); }
		public TerminalNode TABLE_NAME_SYMBOL() { return getToken(MySQLParser.TABLE_NAME_SYMBOL, 0); }
		public TerminalNode TABLES_SYMBOL() { return getToken(MySQLParser.TABLES_SYMBOL, 0); }
		public TerminalNode TABLE_CHECKSUM_SYMBOL() { return getToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0); }
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TerminalNode TEMPORARY_SYMBOL() { return getToken(MySQLParser.TEMPORARY_SYMBOL, 0); }
		public TerminalNode TEMPTABLE_SYMBOL() { return getToken(MySQLParser.TEMPTABLE_SYMBOL, 0); }
		public TerminalNode TEXT_SYMBOL() { return getToken(MySQLParser.TEXT_SYMBOL, 0); }
		public TerminalNode THAN_SYMBOL() { return getToken(MySQLParser.THAN_SYMBOL, 0); }
		public TerminalNode TIES_SYMBOL() { return getToken(MySQLParser.TIES_SYMBOL, 0); }
		public TerminalNode TRANSACTION_SYMBOL() { return getToken(MySQLParser.TRANSACTION_SYMBOL, 0); }
		public TerminalNode TRIGGERS_SYMBOL() { return getToken(MySQLParser.TRIGGERS_SYMBOL, 0); }
		public TerminalNode TIMESTAMP_SYMBOL() { return getToken(MySQLParser.TIMESTAMP_SYMBOL, 0); }
		public TerminalNode TIMESTAMP_ADD_SYMBOL() { return getToken(MySQLParser.TIMESTAMP_ADD_SYMBOL, 0); }
		public TerminalNode TIMESTAMP_DIFF_SYMBOL() { return getToken(MySQLParser.TIMESTAMP_DIFF_SYMBOL, 0); }
		public TerminalNode TIME_SYMBOL() { return getToken(MySQLParser.TIME_SYMBOL, 0); }
		public TerminalNode TYPES_SYMBOL() { return getToken(MySQLParser.TYPES_SYMBOL, 0); }
		public TerminalNode TYPE_SYMBOL() { return getToken(MySQLParser.TYPE_SYMBOL, 0); }
		public TerminalNode UDF_RETURNS_SYMBOL() { return getToken(MySQLParser.UDF_RETURNS_SYMBOL, 0); }
		public TerminalNode UNBOUNDED_SYMBOL() { return getToken(MySQLParser.UNBOUNDED_SYMBOL, 0); }
		public TerminalNode UNCOMMITTED_SYMBOL() { return getToken(MySQLParser.UNCOMMITTED_SYMBOL, 0); }
		public TerminalNode UNDEFINED_SYMBOL() { return getToken(MySQLParser.UNDEFINED_SYMBOL, 0); }
		public TerminalNode UNDO_BUFFER_SIZE_SYMBOL() { return getToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0); }
		public TerminalNode UNDOFILE_SYMBOL() { return getToken(MySQLParser.UNDOFILE_SYMBOL, 0); }
		public TerminalNode UNKNOWN_SYMBOL() { return getToken(MySQLParser.UNKNOWN_SYMBOL, 0); }
		public TerminalNode UNTIL_SYMBOL() { return getToken(MySQLParser.UNTIL_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public TerminalNode USE_FRM_SYMBOL() { return getToken(MySQLParser.USE_FRM_SYMBOL, 0); }
		public TerminalNode VARIABLES_SYMBOL() { return getToken(MySQLParser.VARIABLES_SYMBOL, 0); }
		public TerminalNode VCPU_SYMBOL() { return getToken(MySQLParser.VCPU_SYMBOL, 0); }
		public TerminalNode VIEW_SYMBOL() { return getToken(MySQLParser.VIEW_SYMBOL, 0); }
		public TerminalNode VALUE_SYMBOL() { return getToken(MySQLParser.VALUE_SYMBOL, 0); }
		public TerminalNode WARNINGS_SYMBOL() { return getToken(MySQLParser.WARNINGS_SYMBOL, 0); }
		public TerminalNode WAIT_SYMBOL() { return getToken(MySQLParser.WAIT_SYMBOL, 0); }
		public TerminalNode WEEK_SYMBOL() { return getToken(MySQLParser.WEEK_SYMBOL, 0); }
		public TerminalNode WORK_SYMBOL() { return getToken(MySQLParser.WORK_SYMBOL, 0); }
		public TerminalNode WEIGHT_STRING_SYMBOL() { return getToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0); }
		public TerminalNode X509_SYMBOL() { return getToken(MySQLParser.X509_SYMBOL, 0); }
		public TerminalNode XID_SYMBOL() { return getToken(MySQLParser.XID_SYMBOL, 0); }
		public TerminalNode XML_SYMBOL() { return getToken(MySQLParser.XML_SYMBOL, 0); }
		public TerminalNode YEAR_SYMBOL() { return getToken(MySQLParser.YEAR_SYMBOL, 0); }
		public TerminalNode SHUTDOWN_SYMBOL() { return getToken(MySQLParser.SHUTDOWN_SYMBOL, 0); }
		public TerminalNode CUBE_SYMBOL() { return getToken(MySQLParser.CUBE_SYMBOL, 0); }
		public TerminalNode IMPORT_SYMBOL() { return getToken(MySQLParser.IMPORT_SYMBOL, 0); }
		public TerminalNode FUNCTION_SYMBOL() { return getToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		public TerminalNode ROWS_SYMBOL() { return getToken(MySQLParser.ROWS_SYMBOL, 0); }
		public TerminalNode ROW_SYMBOL() { return getToken(MySQLParser.ROW_SYMBOL, 0); }
		public TerminalNode EXCHANGE_SYMBOL() { return getToken(MySQLParser.EXCHANGE_SYMBOL, 0); }
		public TerminalNode EXPIRE_SYMBOL() { return getToken(MySQLParser.EXPIRE_SYMBOL, 0); }
		public TerminalNode ONLY_SYMBOL() { return getToken(MySQLParser.ONLY_SYMBOL, 0); }
		public TerminalNode VALIDATION_SYMBOL() { return getToken(MySQLParser.VALIDATION_SYMBOL, 0); }
		public TerminalNode WITHOUT_SYMBOL() { return getToken(MySQLParser.WITHOUT_SYMBOL, 0); }
		public TerminalNode ADMIN_SYMBOL() { return getToken(MySQLParser.ADMIN_SYMBOL, 0); }
		public RoleOrLabelKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleOrLabelKeyword; }
	}

	public final RoleOrLabelKeywordContext roleOrLabelKeyword() throws RecognitionException {
		RoleOrLabelKeywordContext _localctx = new RoleOrLabelKeywordContext(_ctx, getState());
		enterRule(_localctx, 1208, RULE_roleOrLabelKeyword);
		int _la;
		try {
			setState(8355);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1119,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8346);
				_la = _input.LA(1);
				if ( !(((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & ((1L << (ACTION_SYMBOL - 57)) | (1L << (ADDDATE_SYMBOL - 57)) | (1L << (AFTER_SYMBOL - 57)) | (1L << (AGAINST_SYMBOL - 57)) | (1L << (AGGREGATE_SYMBOL - 57)) | (1L << (ALGORITHM_SYMBOL - 57)) | (1L << (ANY_SYMBOL - 57)) | (1L << (AT_SYMBOL - 57)) | (1L << (AUTHORS_SYMBOL - 57)) | (1L << (AUTO_INCREMENT_SYMBOL - 57)) | (1L << (AUTOEXTEND_SIZE_SYMBOL - 57)) | (1L << (AVG_ROW_LENGTH_SYMBOL - 57)) | (1L << (AVG_SYMBOL - 57)) | (1L << (BINLOG_SYMBOL - 57)) | (1L << (BIT_SYMBOL - 57)) | (1L << (BLOCK_SYMBOL - 57)) | (1L << (BOOL_SYMBOL - 57)) | (1L << (BOOLEAN_SYMBOL - 57)) | (1L << (BTREE_SYMBOL - 57)) | (1L << (CASCADED_SYMBOL - 57)) | (1L << (CATALOG_NAME_SYMBOL - 57)) | (1L << (CHAIN_SYMBOL - 57)) | (1L << (CHANGED_SYMBOL - 57)) | (1L << (CHANNEL_SYMBOL - 57)) | (1L << (CIPHER_SYMBOL - 57)) | (1L << (CLIENT_SYMBOL - 57)) | (1L << (CLASS_ORIGIN_SYMBOL - 57)) | (1L << (COALESCE_SYMBOL - 57)) | (1L << (CODE_SYMBOL - 57)) | (1L << (COLLATION_SYMBOL - 57)) | (1L << (COLUMN_NAME_SYMBOL - 57)) | (1L << (COLUMN_FORMAT_SYMBOL - 57)) | (1L << (COLUMNS_SYMBOL - 57)) | (1L << (COMMITTED_SYMBOL - 57)) | (1L << (COMPACT_SYMBOL - 57)) | (1L << (COMPLETION_SYMBOL - 57)) | (1L << (COMPRESSED_SYMBOL - 57)) | (1L << (COMPRESSION_SYMBOL - 57)) | (1L << (ENCRYPTION_SYMBOL - 57)) | (1L << (CONCURRENT_SYMBOL - 57)) | (1L << (CONNECTION_SYMBOL - 57)) | (1L << (CONSISTENT_SYMBOL - 57)) | (1L << (CONSTRAINT_CATALOG_SYMBOL - 57)) | (1L << (CONSTRAINT_SCHEMA_SYMBOL - 57)) | (1L << (CONSTRAINT_NAME_SYMBOL - 57)) | (1L << (CONTEXT_SYMBOL - 57)) | (1L << (CONTRIBUTORS_SYMBOL - 57)) | (1L << (CPU_SYMBOL - 57)) | (1L << (CURRENT_SYMBOL - 57)) | (1L << (CURSOR_NAME_SYMBOL - 57)) | (1L << (DATA_SYMBOL - 57)) | (1L << (DATAFILE_SYMBOL - 57)) | (1L << (DATETIME_SYMBOL - 57)) | (1L << (DATE_SYMBOL - 57)) | (1L << (DAY_SYMBOL - 57)) | (1L << (DEFAULT_AUTH_SYMBOL - 57)) | (1L << (DEFINER_SYMBOL - 57)) | (1L << (DELAY_KEY_WRITE_SYMBOL - 57)) | (1L << (DES_KEY_FILE_SYMBOL - 57)) | (1L << (DIAGNOSTICS_SYMBOL - 57)) | (1L << (DIRECTORY_SYMBOL - 57)) | (1L << (DISABLE_SYMBOL - 57)))) != 0) || ((((_la - 121)) & ~0x3f) == 0 && ((1L << (_la - 121)) & ((1L << (DISCARD_SYMBOL - 121)) | (1L << (DISK_SYMBOL - 121)) | (1L << (DUMPFILE_SYMBOL - 121)) | (1L << (DUPLICATE_SYMBOL - 121)) | (1L << (DYNAMIC_SYMBOL - 121)) | (1L << (ENDS_SYMBOL - 121)) | (1L << (ENUM_SYMBOL - 121)) | (1L << (ENGINE_SYMBOL - 121)) | (1L << (ENGINES_SYMBOL - 121)) | (1L << (ERROR_SYMBOL - 121)) | (1L << (ERRORS_SYMBOL - 121)) | (1L << (ESCAPE_SYMBOL - 121)) | (1L << (EVENTS_SYMBOL - 121)) | (1L << (EVERY_SYMBOL - 121)) | (1L << (EXPANSION_SYMBOL - 121)) | (1L << (EXPORT_SYMBOL - 121)) | (1L << (EXTENDED_SYMBOL - 121)) | (1L << (EXTENT_SIZE_SYMBOL - 121)) | (1L << (FAULTS_SYMBOL - 121)) | (1L << (FAST_SYMBOL - 121)) | (1L << (FOUND_SYMBOL - 121)) | (1L << (ENABLE_SYMBOL - 121)) | (1L << (FULL_SYMBOL - 121)) | (1L << (FILE_BLOCK_SIZE_SYMBOL - 121)) | (1L << (FILTER_SYMBOL - 121)) | (1L << (FIRST_SYMBOL - 121)) | (1L << (FIXED_SYMBOL - 121)) | (1L << (GENERAL_SYMBOL - 121)) | (1L << (GEOMETRY_SYMBOL - 121)) | (1L << (GEOMETRYCOLLECTION_SYMBOL - 121)) | (1L << (GET_FORMAT_SYMBOL - 121)) | (1L << (GRANTS_SYMBOL - 121)) | (1L << (GLOBAL_SYMBOL - 121)) | (1L << (HASH_SYMBOL - 121)) | (1L << (HOSTS_SYMBOL - 121)) | (1L << (HOUR_SYMBOL - 121)) | (1L << (IDENTIFIED_SYMBOL - 121)) | (1L << (IGNORE_SERVER_IDS_SYMBOL - 121)) | (1L << (INVOKER_SYMBOL - 121)) | (1L << (INDEXES_SYMBOL - 121)) | (1L << (INITIAL_SIZE_SYMBOL - 121)) | (1L << (INSTANCE_SYMBOL - 121)) | (1L << (IO_SYMBOL - 121)) | (1L << (IPC_SYMBOL - 121)) | (1L << (ISOLATION_SYMBOL - 121)) | (1L << (ISSUER_SYMBOL - 121)) | (1L << (INSERT_METHOD_SYMBOL - 121)) | (1L << (JSON_SYMBOL - 121)) | (1L << (KEY_BLOCK_SIZE_SYMBOL - 121)) | (1L << (LAST_SYMBOL - 121)) | (1L << (LEAVES_SYMBOL - 121)) | (1L << (LESS_SYMBOL - 121)) | (1L << (LEVEL_SYMBOL - 121)) | (1L << (LINESTRING_SYMBOL - 121)) | (1L << (LIST_SYMBOL - 121)) | (1L << (LOCAL_SYMBOL - 121)) | (1L << (LOCKS_SYMBOL - 121)) | (1L << (LOGFILE_SYMBOL - 121)) | (1L << (LOGS_SYMBOL - 121)) | (1L << (MAX_ROWS_SYMBOL - 121)))) != 0) || ((((_la - 185)) & ~0x3f) == 0 && ((1L << (_la - 185)) & ((1L << (MASTER_SYMBOL - 185)) | (1L << (MASTER_HEARTBEAT_PERIOD_SYMBOL - 185)) | (1L << (MASTER_HOST_SYMBOL - 185)) | (1L << (MASTER_PORT_SYMBOL - 185)) | (1L << (MASTER_LOG_FILE_SYMBOL - 185)) | (1L << (MASTER_LOG_POS_SYMBOL - 185)) | (1L << (MASTER_USER_SYMBOL - 185)) | (1L << (MASTER_PASSWORD_SYMBOL - 185)) | (1L << (MASTER_SERVER_ID_SYMBOL - 185)) | (1L << (MASTER_CONNECT_RETRY_SYMBOL - 185)) | (1L << (MASTER_RETRY_COUNT_SYMBOL - 185)) | (1L << (MASTER_DELAY_SYMBOL - 185)) | (1L << (MASTER_SSL_SYMBOL - 185)) | (1L << (MASTER_SSL_CA_SYMBOL - 185)) | (1L << (MASTER_SSL_CAPATH_SYMBOL - 185)) | (1L << (MASTER_TLS_VERSION_SYMBOL - 185)) | (1L << (MASTER_SSL_CERT_SYMBOL - 185)) | (1L << (MASTER_SSL_CIPHER_SYMBOL - 185)) | (1L << (MASTER_SSL_CRL_SYMBOL - 185)) | (1L << (MASTER_SSL_CRLPATH_SYMBOL - 185)) | (1L << (MASTER_SSL_KEY_SYMBOL - 185)) | (1L << (MASTER_AUTO_POSITION_SYMBOL - 185)) | (1L << (MAX_CONNECTIONS_PER_HOUR_SYMBOL - 185)) | (1L << (MAX_QUERIES_PER_HOUR_SYMBOL - 185)) | (1L << (MAX_STATEMENT_TIME_SYMBOL - 185)) | (1L << (MAX_SIZE_SYMBOL - 185)) | (1L << (MAX_UPDATES_PER_HOUR_SYMBOL - 185)) | (1L << (MAX_USER_CONNECTIONS_SYMBOL - 185)) | (1L << (MEDIUM_SYMBOL - 185)) | (1L << (MEMORY_SYMBOL - 185)) | (1L << (MERGE_SYMBOL - 185)) | (1L << (MESSAGE_TEXT_SYMBOL - 185)) | (1L << (MICROSECOND_SYMBOL - 185)) | (1L << (MIGRATE_SYMBOL - 185)) | (1L << (MINUTE_SYMBOL - 185)) | (1L << (MIN_ROWS_SYMBOL - 185)) | (1L << (MODIFY_SYMBOL - 185)) | (1L << (MODE_SYMBOL - 185)) | (1L << (MONTH_SYMBOL - 185)) | (1L << (MULTILINESTRING_SYMBOL - 185)) | (1L << (MULTIPOINT_SYMBOL - 185)) | (1L << (MULTIPOLYGON_SYMBOL - 185)) | (1L << (MUTEX_SYMBOL - 185)) | (1L << (MYSQL_ERRNO_SYMBOL - 185)) | (1L << (NAME_SYMBOL - 185)) | (1L << (NAMES_SYMBOL - 185)) | (1L << (NATIONAL_SYMBOL - 185)) | (1L << (NCHAR_SYMBOL - 185)) | (1L << (NDBCLUSTER_SYMBOL - 185)) | (1L << (NEVER_SYMBOL - 185)) | (1L << (NEXT_SYMBOL - 185)) | (1L << (NEW_SYMBOL - 185)) | (1L << (NO_WAIT_SYMBOL - 185)) | (1L << (NODEGROUP_SYMBOL - 185)) | (1L << (NUMBER_SYMBOL - 185)) | (1L << (NVARCHAR_SYMBOL - 185)) | (1L << (OFFSET_SYMBOL - 185)) | (1L << (OLD_PASSWORD_SYMBOL - 185)) | (1L << (ONE_SYMBOL - 185)) | (1L << (PACK_KEYS_SYMBOL - 185)) | (1L << (PAGE_SYMBOL - 185)) | (1L << (PARTIAL_SYMBOL - 185)))) != 0) || ((((_la - 249)) & ~0x3f) == 0 && ((1L << (_la - 249)) & ((1L << (PARTITIONING_SYMBOL - 249)) | (1L << (PARTITIONS_SYMBOL - 249)) | (1L << (PASSWORD_SYMBOL - 249)) | (1L << (PHASE_SYMBOL - 249)) | (1L << (PLUGIN_DIR_SYMBOL - 249)) | (1L << (PLUGIN_SYMBOL - 249)) | (1L << (PLUGINS_SYMBOL - 249)) | (1L << (POINT_SYMBOL - 249)) | (1L << (POLYGON_SYMBOL - 249)) | (1L << (PRESERVE_SYMBOL - 249)) | (1L << (PREV_SYMBOL - 249)) | (1L << (PRIVILEGES_SYMBOL - 249)) | (1L << (PROCESSLIST_SYMBOL - 249)) | (1L << (PROFILE_SYMBOL - 249)) | (1L << (PROFILES_SYMBOL - 249)) | (1L << (QUARTER_SYMBOL - 249)) | (1L << (QUERY_SYMBOL - 249)) | (1L << (QUICK_SYMBOL - 249)) | (1L << (READ_ONLY_SYMBOL - 249)) | (1L << (REBUILD_SYMBOL - 249)) | (1L << (RECOVER_SYMBOL - 249)) | (1L << (REDO_BUFFER_SIZE_SYMBOL - 249)) | (1L << (REDOFILE_SYMBOL - 249)) | (1L << (REDUNDANT_SYMBOL - 249)) | (1L << (RELAY_SYMBOL - 249)) | (1L << (RELAYLOG_SYMBOL - 249)) | (1L << (RELAY_LOG_FILE_SYMBOL - 249)) | (1L << (RELAY_LOG_POS_SYMBOL - 249)) | (1L << (RELAY_THREAD_SYMBOL - 249)) | (1L << (REORGANIZE_SYMBOL - 249)) | (1L << (REPEATABLE_SYMBOL - 249)) | (1L << (REPLICATE_DO_DB_SYMBOL - 249)) | (1L << (REPLICATE_IGNORE_DB_SYMBOL - 249)) | (1L << (REPLICATE_DO_TABLE_SYMBOL - 249)) | (1L << (REPLICATE_IGNORE_TABLE_SYMBOL - 249)) | (1L << (REPLICATE_WILD_DO_TABLE_SYMBOL - 249)) | (1L << (REPLICATE_WILD_IGNORE_TABLE_SYMBOL - 249)) | (1L << (REPLICATE_REWRITE_DB_SYMBOL - 249)) | (1L << (RESUME_SYMBOL - 249)) | (1L << (RETURNED_SQLSTATE_SYMBOL - 249)) | (1L << (RETURNS_SYMBOL - 249)) | (1L << (REVERSE_SYMBOL - 249)) | (1L << (ROLLUP_SYMBOL - 249)) | (1L << (ROTATE_SYMBOL - 249)) | (1L << (ROUTINE_SYMBOL - 249)) | (1L << (ROW_COUNT_SYMBOL - 249)) | (1L << (ROW_FORMAT_SYMBOL - 249)) | (1L << (RTREE_SYMBOL - 249)) | (1L << (SCHEDULE_SYMBOL - 249)) | (1L << (SCHEMA_NAME_SYMBOL - 249)) | (1L << (SECOND_SYMBOL - 249)) | (1L << (SERIAL_SYMBOL - 249)) | (1L << (SERIALIZABLE_SYMBOL - 249)) | (1L << (SESSION_SYMBOL - 249)) | (1L << (SIMPLE_SYMBOL - 249)) | (1L << (SHARE_SYMBOL - 249)) | (1L << (SLOW_SYMBOL - 249)) | (1L << (SNAPSHOT_SYMBOL - 249)))) != 0) || ((((_la - 313)) & ~0x3f) == 0 && ((1L << (_la - 313)) & ((1L << (SOUNDS_SYMBOL - 313)) | (1L << (SOURCE_SYMBOL - 313)) | (1L << (SQL_AFTER_GTIDS_SYMBOL - 313)) | (1L << (SQL_AFTER_MTS_GAPS_SYMBOL - 313)) | (1L << (SQL_BEFORE_GTIDS_SYMBOL - 313)) | (1L << (SQL_CACHE_SYMBOL - 313)) | (1L << (SQL_BUFFER_RESULT_SYMBOL - 313)) | (1L << (SQL_NO_CACHE_SYMBOL - 313)) | (1L << (SQL_THREAD_SYMBOL - 313)) | (1L << (STACKED_SYMBOL - 313)) | (1L << (STARTS_SYMBOL - 313)) | (1L << (STATS_AUTO_RECALC_SYMBOL - 313)) | (1L << (STATS_PERSISTENT_SYMBOL - 313)) | (1L << (STATS_SAMPLE_PAGES_SYMBOL - 313)) | (1L << (STATUS_SYMBOL - 313)) | (1L << (STORAGE_SYMBOL - 313)) | (1L << (STRING_SYMBOL - 313)) | (1L << (SUBCLASS_ORIGIN_SYMBOL - 313)) | (1L << (SUBDATE_SYMBOL - 313)) | (1L << (SUBJECT_SYMBOL - 313)) | (1L << (SUBPARTITION_SYMBOL - 313)) | (1L << (SUBPARTITIONS_SYMBOL - 313)) | (1L << (SUPER_SYMBOL - 313)) | (1L << (SUSPEND_SYMBOL - 313)) | (1L << (SWAPS_SYMBOL - 313)) | (1L << (SWITCHES_SYMBOL - 313)) | (1L << (TABLE_NAME_SYMBOL - 313)) | (1L << (TABLES_SYMBOL - 313)) | (1L << (TABLE_CHECKSUM_SYMBOL - 313)) | (1L << (TABLESPACE_SYMBOL - 313)) | (1L << (TEMPORARY_SYMBOL - 313)) | (1L << (TEMPTABLE_SYMBOL - 313)) | (1L << (TEXT_SYMBOL - 313)) | (1L << (THAN_SYMBOL - 313)) | (1L << (TRANSACTION_SYMBOL - 313)) | (1L << (TRIGGERS_SYMBOL - 313)) | (1L << (TIMESTAMP_SYMBOL - 313)) | (1L << (TIMESTAMP_ADD_SYMBOL - 313)) | (1L << (TIMESTAMP_DIFF_SYMBOL - 313)) | (1L << (TIME_SYMBOL - 313)) | (1L << (TYPES_SYMBOL - 313)) | (1L << (TYPE_SYMBOL - 313)) | (1L << (UDF_RETURNS_SYMBOL - 313)) | (1L << (UNCOMMITTED_SYMBOL - 313)) | (1L << (UNDEFINED_SYMBOL - 313)) | (1L << (UNDO_BUFFER_SIZE_SYMBOL - 313)) | (1L << (UNDOFILE_SYMBOL - 313)) | (1L << (UNKNOWN_SYMBOL - 313)) | (1L << (UNTIL_SYMBOL - 313)) | (1L << (USER_RESOURCES_SYMBOL - 313)) | (1L << (USER_SYMBOL - 313)) | (1L << (USE_FRM_SYMBOL - 313)) | (1L << (VARIABLES_SYMBOL - 313)) | (1L << (VIEW_SYMBOL - 313)) | (1L << (VALUE_SYMBOL - 313)) | (1L << (WARNINGS_SYMBOL - 313)) | (1L << (WAIT_SYMBOL - 313)) | (1L << (WEEK_SYMBOL - 313)) | (1L << (WORK_SYMBOL - 313)) | (1L << (WEIGHT_STRING_SYMBOL - 313)) | (1L << (X509_SYMBOL - 313)) | (1L << (XID_SYMBOL - 313)) | (1L << (XML_SYMBOL - 313)))) != 0) || _la==YEAR_SYMBOL || _la==ANALYSE_SYMBOL || ((((_la - 694)) & ~0x3f) == 0 && ((1L << (_la - 694)) & ((1L << (COMPONENT_SYMBOL - 694)) | (1L << (SKIP_SYMBOL - 694)) | (1L << (LOCKED_SYMBOL - 694)) | (1L << (NOWAIT_SYMBOL - 694)) | (1L << (HISTOGRAM_SYMBOL - 694)) | (1L << (BUCKETS_SYMBOL - 694)) | (1L << (REMOTE_SYMBOL - 694)) | (1L << (EXCLUDE_SYMBOL - 694)) | (1L << (FOLLOWING_SYMBOL - 694)) | (1L << (NULLS_SYMBOL - 694)) | (1L << (OTHERS_SYMBOL - 694)) | (1L << (PRECEDING_SYMBOL - 694)) | (1L << (RESPECT_SYMBOL - 694)) | (1L << (TIES_SYMBOL - 694)) | (1L << (UNBOUNDED_SYMBOL - 694)) | (1L << (NESTED_SYMBOL - 694)) | (1L << (ORDINALITY_SYMBOL - 694)) | (1L << (PATH_SYMBOL - 694)) | (1L << (HISTORY_SYMBOL - 694)) | (1L << (REUSE_SYMBOL - 694)) | (1L << (SRID_SYMBOL - 694)) | (1L << (THREAD_PRIORITY_SYMBOL - 694)) | (1L << (VCPU_SYMBOL - 694)) | (1L << (MASTER_PUBLIC_KEY_PATH_SYMBOL - 694)) | (1L << (DESCRIPTION_SYMBOL - 694)) | (1L << (ORGANIZATION_SYMBOL - 694)) | (1L << (OPTIONAL_SYMBOL - 694)) | (1L << (ACTIVE_SYMBOL - 694)) | (1L << (INACTIVE_SYMBOL - 694)) | (1L << (RETAIN_SYMBOL - 694)))) != 0) || _la==OLD_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8347);
				if (!(serverVersion < 50709)) throw new FailedPredicateException(this, "serverVersion < 50709");
				setState(8348);
				match(SHUTDOWN_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8349);
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				setState(8350);
				_la = _input.LA(1);
				if ( !(_la==CUBE_SYMBOL || _la==IMPORT_SYMBOL || ((((_la - 298)) & ~0x3f) == 0 && ((1L << (_la - 298)) & ((1L << (ROWS_SYMBOL - 298)) | (1L << (ROW_SYMBOL - 298)) | (1L << (FUNCTION_SYMBOL - 298)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8351);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(8352);
				_la = _input.LA(1);
				if ( !(_la==SUPER_SYMBOL || _la==EXCHANGE_SYMBOL || _la==EXPIRE_SYMBOL || _la==ONLY_SYMBOL || _la==VALIDATION_SYMBOL || _la==WITHOUT_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8353);
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				setState(8354);
				match(ADMIN_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1:
			return simpleStatement_sempred((SimpleStatementContext)_localctx, predIndex);
		case 2:
			return alterStatement_sempred((AlterStatementContext)_localctx, predIndex);
		case 3:
			return alterDatabase_sempred((AlterDatabaseContext)_localctx, predIndex);
		case 9:
			return alterTable_sempred((AlterTableContext)_localctx, predIndex);
		case 13:
			return standaloneAlterCommands_sempred((StandaloneAlterCommandsContext)_localctx, predIndex);
		case 14:
			return alterPartition_sempred((AlterPartitionContext)_localctx, predIndex);
		case 17:
			return alterListItem_sempred((AlterListItemContext)_localctx, predIndex);
		case 24:
			return withValidation_sempred((WithValidationContext)_localctx, predIndex);
		case 28:
			return alterTablespace_sempred((AlterTablespaceContext)_localctx, predIndex);
		case 39:
			return createStatement_sempred((CreateStatementContext)_localctx, predIndex);
		case 41:
			return createDatabaseOption_sempred((CreateDatabaseOptionContext)_localctx, predIndex);
		case 54:
			return createIndex_sempred((CreateIndexContext)_localctx, predIndex);
		case 65:
			return tsDataFileName_sempred((TsDataFileNameContext)_localctx, predIndex);
		case 68:
			return tablespaceOption_sempred((TablespaceOptionContext)_localctx, predIndex);
		case 85:
			return triggerFollowsPrecedesClause_sempred((TriggerFollowsPrecedesClauseContext)_localctx, predIndex);
		case 90:
			return dropStatement_sempred((DropStatementContext)_localctx, predIndex);
		case 111:
			return deleteStatement_sempred((DeleteStatementContext)_localctx, predIndex);
		case 112:
			return partitionDelete_sempred((PartitionDeleteContext)_localctx, predIndex);
		case 114:
			return doStatement_sempred((DoStatementContext)_localctx, predIndex);
		case 117:
			return insertStatement_sempred((InsertStatementContext)_localctx, predIndex);
		case 136:
			return queryExpression_sempred((QueryExpressionContext)_localctx, predIndex);
		case 137:
			return queryExpressionBody_sempred((QueryExpressionBodyContext)_localctx, predIndex);
		case 139:
			return querySpecification_sempred((QuerySpecificationContext)_localctx, predIndex);
		case 163:
			return olapOption_sempred((OlapOptionContext)_localctx, predIndex);
		case 168:
			return selectOption_sempred((SelectOptionContext)_localctx, predIndex);
		case 169:
			return lockingClause_sempred((LockingClauseContext)_localctx, predIndex);
		case 170:
			return lockStrengh_sempred((LockStrenghContext)_localctx, predIndex);
		case 176:
			return tableReference_sempred((TableReferenceContext)_localctx, predIndex);
		case 182:
			return tableFactor_sempred((TableFactorContext)_localctx, predIndex);
		case 185:
			return derivedTable_sempred((DerivedTableContext)_localctx, predIndex);
		case 189:
			return jtColumn_sempred((JtColumnContext)_localctx, predIndex);
		case 195:
			return tableAlias_sempred((TableAliasContext)_localctx, predIndex);
		case 204:
			return updateStatement_sempred((UpdateStatementContext)_localctx, predIndex);
		case 208:
			return transactionCharacteristic_sempred((TransactionCharacteristicContext)_localctx, predIndex);
		case 210:
			return lockStatement_sempred((LockStatementContext)_localctx, predIndex);
		case 214:
			return xaConvert_sempred((XaConvertContext)_localctx, predIndex);
		case 216:
			return replicationStatement_sempred((ReplicationStatementContext)_localctx, predIndex);
		case 217:
			return resetOption_sempred((ResetOptionContext)_localctx, predIndex);
		case 218:
			return masterResetOptions_sempred((MasterResetOptionsContext)_localctx, predIndex);
		case 227:
			return changeReplication_sempred((ChangeReplicationContext)_localctx, predIndex);
		case 235:
			return slaveUntilOptions_sempred((SlaveUntilOptionsContext)_localctx, predIndex);
		case 236:
			return slaveConnectionOptions_sempred((SlaveConnectionOptionsContext)_localctx, predIndex);
		case 243:
			return cloneStatement_sempred((CloneStatementContext)_localctx, predIndex);
		case 246:
			return accountManagementStatement_sempred((AccountManagementStatementContext)_localctx, predIndex);
		case 247:
			return alterUser_sempred((AlterUserContext)_localctx, predIndex);
		case 248:
			return alterUserTail_sempred((AlterUserTailContext)_localctx, predIndex);
		case 250:
			return createUser_sempred((CreateUserContext)_localctx, predIndex);
		case 251:
			return createUserTail_sempred((CreateUserTailContext)_localctx, predIndex);
		case 252:
			return defaultRoleClause_sempred((DefaultRoleClauseContext)_localctx, predIndex);
		case 255:
			return accountLockPasswordExpireOptions_sempred((AccountLockPasswordExpireOptionsContext)_localctx, predIndex);
		case 256:
			return dropUser_sempred((DropUserContext)_localctx, predIndex);
		case 257:
			return grant_sempred((GrantContext)_localctx, predIndex);
		case 258:
			return grantTargetList_sempred((GrantTargetListContext)_localctx, predIndex);
		case 259:
			return grantOptions_sempred((GrantOptionsContext)_localctx, predIndex);
		case 263:
			return versionedRequireClause_sempred((VersionedRequireClauseContext)_localctx, predIndex);
		case 265:
			return revoke_sempred((RevokeContext)_localctx, predIndex);
		case 266:
			return onTypeTo_sempred((OnTypeToContext)_localctx, predIndex);
		case 269:
			return roleOrPrivilege_sempred((RoleOrPrivilegeContext)_localctx, predIndex);
		case 270:
			return grantIdentifier_sempred((GrantIdentifierContext)_localctx, predIndex);
		case 277:
			return tableAdministrationStatement_sempred((TableAdministrationStatementContext)_localctx, predIndex);
		case 283:
			return startOptionValueList_sempred((StartOptionValueListContext)_localctx, predIndex);
		case 288:
			return optionValueNoOptionType_sempred((OptionValueNoOptionTypeContext)_localctx, predIndex);
		case 293:
			return setExprOrDefault_sempred((SetExprOrDefaultContext)_localctx, predIndex);
		case 294:
			return showStatement_sempred((ShowStatementContext)_localctx, predIndex);
		case 295:
			return showCommandType_sempred((ShowCommandTypeContext)_localctx, predIndex);
		case 296:
			return nonBlocking_sempred((NonBlockingContext)_localctx, predIndex);
		case 300:
			return otherAdministrativeStatement_sempred((OtherAdministrativeStatementContext)_localctx, predIndex);
		case 308:
			return flushOption_sempred((FlushOptionContext)_localctx, predIndex);
		case 311:
			return flushTablesOptions_sempred((FlushTablesOptionsContext)_localctx, predIndex);
		case 326:
			return utilityStatement_sempred((UtilityStatementContext)_localctx, predIndex);
		case 328:
			return explainCommand_sempred((ExplainCommandContext)_localctx, predIndex);
		case 329:
			return explainableStatement_sempred((ExplainableStatementContext)_localctx, predIndex);
		case 333:
			return expr_sempred((ExprContext)_localctx, predIndex);
		case 334:
			return boolPri_sempred((BoolPriContext)_localctx, predIndex);
		case 336:
			return predicate_sempred((PredicateContext)_localctx, predIndex);
		case 338:
			return bitExpr_sempred((BitExprContext)_localctx, predIndex);
		case 339:
			return simpleExpr_sempred((SimpleExprContext)_localctx, predIndex);
		case 340:
			return arrayCast_sempred((ArrayCastContext)_localctx, predIndex);
		case 341:
			return jsonOperator_sempred((JsonOperatorContext)_localctx, predIndex);
		case 342:
			return sumExpr_sempred((SumExprContext)_localctx, predIndex);
		case 353:
			return runtimeFunctionCall_sempred((RuntimeFunctionCallContext)_localctx, predIndex);
		case 354:
			return geometryFunction_sempred((GeometryFunctionContext)_localctx, predIndex);
		case 356:
			return fractionalPrecision_sempred((FractionalPrecisionContext)_localctx, predIndex);
		case 368:
			return internalVariableName_sempred((InternalVariableNameContext)_localctx, predIndex);
		case 372:
			return castType_sempred((CastTypeContext)_localctx, predIndex);
		case 386:
			return channel_sempred((ChannelContext)_localctx, predIndex);
		case 415:
			return getDiagnostics_sempred((GetDiagnosticsContext)_localctx, predIndex);
		case 428:
			return checkOrReferences_sempred((CheckOrReferencesContext)_localctx, predIndex);
		case 431:
			return tableConstraintDef_sempred((TableConstraintDefContext)_localctx, predIndex);
		case 433:
			return fieldDefinition_sempred((FieldDefinitionContext)_localctx, predIndex);
		case 434:
			return columnAttribute_sempred((ColumnAttributeContext)_localctx, predIndex);
		case 444:
			return keyListVariants_sempred((KeyListVariantsContext)_localctx, predIndex);
		case 447:
			return commonIndexOption_sempred((CommonIndexOptionContext)_localctx, predIndex);
		case 453:
			return dataType_sempred((DataTypeContext)_localctx, predIndex);
		case 463:
			return charsetName_sempred((CharsetNameContext)_localctx, predIndex);
		case 464:
			return collationName_sempred((CollationNameContext)_localctx, predIndex);
		case 467:
			return createTableOption_sempred((CreateTableOptionContext)_localctx, predIndex);
		case 475:
			return partitionKeyAlgorithm_sempred((PartitionKeyAlgorithmContext)_localctx, predIndex);
		case 502:
			return createUserEntry_sempred((CreateUserEntryContext)_localctx, predIndex);
		case 513:
			return usePartition_sempred((UsePartitionContext)_localctx, predIndex);
		case 515:
			return columnName_sempred((ColumnNameContext)_localctx, predIndex);
		case 558:
			return pureIdentifier_sempred((PureIdentifierContext)_localctx, predIndex);
		case 563:
			return simpleIdentifier_sempred((SimpleIdentifierContext)_localctx, predIndex);
		case 568:
			return real_ulonglong_number_sempred((Real_ulonglong_numberContext)_localctx, predIndex);
		case 572:
			return textStringLiteral_sempred((TextStringLiteralContext)_localctx, predIndex);
		case 574:
			return textStringHash_sempred((TextStringHashContext)_localctx, predIndex);
		case 594:
			return identifierKeyword_sempred((IdentifierKeywordContext)_localctx, predIndex);
		case 597:
			return labelKeyword_sempred((LabelKeywordContext)_localctx, predIndex);
		case 600:
			return roleKeyword_sempred((RoleKeywordContext)_localctx, predIndex);
		case 603:
			return roleOrIdentifierKeyword_sempred((RoleOrIdentifierKeywordContext)_localctx, predIndex);
		case 604:
			return roleOrLabelKeyword_sempred((RoleOrLabelKeywordContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean simpleStatement_sempred(SimpleStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return serverVersion >= 80000;
		case 1:
			return serverVersion >= 80000;
		case 2:
			return serverVersion >= 80000;
		case 3:
			return serverVersion >= 50604;
		}
		return true;
	}
	private boolean alterStatement_sempred(AlterStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4:
			return serverVersion >= 80014;
		case 5:
			return serverVersion >= 50713;
		}
		return true;
	}
	private boolean alterDatabase_sempred(AlterDatabaseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6:
			return serverVersion < 80000;
		}
		return true;
	}
	private boolean alterTable_sempred(AlterTableContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7:
			return serverVersion < 50700;
		}
		return true;
	}
	private boolean standaloneAlterCommands_sempred(StandaloneAlterCommandsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8:
			return serverVersion >= 80014;
		}
		return true;
	}
	private boolean alterPartition_sempred(AlterPartitionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9:
			return serverVersion >= 50704;
		case 10:
			return serverVersion >= 50704;
		}
		return true;
	}
	private boolean alterListItem_sempred(AlterListItemContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11:
			return serverVersion >= 50700;
		case 12:
			return serverVersion < 50700;
		case 13:
			return serverVersion >= 80014;
		case 14:
			return serverVersion >= 80000;
		case 15:
			return serverVersion >= 80017;
		case 16:
			return serverVersion >= 80000;
		case 17:
			return serverVersion >= 50700;
		case 18:
			return serverVersion >= 80014;
		case 19:
			return serverVersion >= 50708 && serverVersion < 80000;
		}
		return true;
	}
	private boolean withValidation_sempred(WithValidationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 20:
			return serverVersion >= 50706;
		}
		return true;
	}
	private boolean alterTablespace_sempred(AlterTablespaceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 21:
			return serverVersion < 80000;
		case 22:
			return serverVersion >= 80014;
		}
		return true;
	}
	private boolean createStatement_sempred(CreateStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 23:
			return serverVersion >= 80000;
		case 24:
			return serverVersion >= 80011;
		case 25:
			return serverVersion >= 80014;
		}
		return true;
	}
	private boolean createDatabaseOption_sempred(CreateDatabaseOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 26:
			return serverVersion >= 80016;
		}
		return true;
	}
	private boolean createIndex_sempred(CreateIndexContext _localctx, int predIndex) {
		switch (predIndex) {
		case 27:
			return serverVersion >= 80014;
		}
		return true;
	}
	private boolean tsDataFileName_sempred(TsDataFileNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 28:
			return serverVersion >= 80014;
		}
		return true;
	}
	private boolean tablespaceOption_sempred(TablespaceOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 29:
			return serverVersion >= 50707;
		case 30:
			return serverVersion >= 80014;
		}
		return true;
	}
	private boolean triggerFollowsPrecedesClause_sempred(TriggerFollowsPrecedesClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 31:
			return serverVersion >= 50700;
		}
		return true;
	}
	private boolean dropStatement_sempred(DropStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 32:
			return serverVersion >= 80000;
		case 33:
			return serverVersion >= 80011;
		case 34:
			return serverVersion >= 80014;
		}
		return true;
	}
	private boolean deleteStatement_sempred(DeleteStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 35:
			return serverVersion >= 80000;
		case 36:
			return serverVersion >= 80017;
		}
		return true;
	}
	private boolean partitionDelete_sempred(PartitionDeleteContext _localctx, int predIndex) {
		switch (predIndex) {
		case 37:
			return serverVersion >= 50602;
		}
		return true;
	}
	private boolean doStatement_sempred(DoStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 38:
			return serverVersion < 50709;
		case 39:
			return serverVersion >= 50709;
		}
		return true;
	}
	private boolean insertStatement_sempred(InsertStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 40:
			return  serverVersion >= 80018;
		case 41:
			return  serverVersion >= 80018;
		}
		return true;
	}
	private boolean queryExpression_sempred(QueryExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 42:
			return serverVersion >= 80000;
		case 43:
			return serverVersion < 80000;
		case 44:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean queryExpressionBody_sempred(QueryExpressionBodyContext _localctx, int predIndex) {
		switch (predIndex) {
		case 45:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean querySpecification_sempred(QuerySpecificationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 46:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean olapOption_sempred(OlapOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 47:
			return serverVersion < 80000;
		}
		return true;
	}
	private boolean selectOption_sempred(SelectOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 48:
			return serverVersion < 80000;
		case 49:
			return serverVersion >= 50704 && serverVersion < 50708;
		}
		return true;
	}
	private boolean lockingClause_sempred(LockingClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 50:
			return serverVersion >= 80000;
		case 51:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean lockStrengh_sempred(LockStrenghContext _localctx, int predIndex) {
		switch (predIndex) {
		case 52:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean tableReference_sempred(TableReferenceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 53:
			return serverVersion < 80017;
		}
		return true;
	}
	private boolean tableFactor_sempred(TableFactorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 54:
			return serverVersion >= 80004;
		}
		return true;
	}
	private boolean derivedTable_sempred(DerivedTableContext _localctx, int predIndex) {
		switch (predIndex) {
		case 55:
			return serverVersion >= 80000;
		case 56:
			return serverVersion >= 80014;
		}
		return true;
	}
	private boolean jtColumn_sempred(JtColumnContext _localctx, int predIndex) {
		switch (predIndex) {
		case 57:
			return serverVersion >= 80014;
		}
		return true;
	}
	private boolean tableAlias_sempred(TableAliasContext _localctx, int predIndex) {
		switch (predIndex) {
		case 58:
			return serverVersion < 80017;
		}
		return true;
	}
	private boolean updateStatement_sempred(UpdateStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 59:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean transactionCharacteristic_sempred(TransactionCharacteristicContext _localctx, int predIndex) {
		switch (predIndex) {
		case 60:
			return serverVersion >= 50605;
		}
		return true;
	}
	private boolean lockStatement_sempred(LockStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 61:
			return serverVersion >= 80000;
		case 62:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean xaConvert_sempred(XaConvertContext _localctx, int predIndex) {
		switch (predIndex) {
		case 63:
			return serverVersion >= 50704;
		}
		return true;
	}
	private boolean replicationStatement_sempred(ReplicationStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 64:
			return serverVersion > 80000;
		case 65:
			return serverVersion >= 50700;
		case 66:
			return serverVersion > 50706;
		}
		return true;
	}
	private boolean resetOption_sempred(ResetOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 67:
			return serverVersion < 80000;
		}
		return true;
	}
	private boolean masterResetOptions_sempred(MasterResetOptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 68:
			return serverVersion >= 80000;
		case 69:
			return serverVersion < 80017;
		case 70:
			return serverVersion >= 80017;
		}
		return true;
	}
	private boolean changeReplication_sempred(ChangeReplicationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 71:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean slaveUntilOptions_sempred(SlaveUntilOptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 72:
			return serverVersion >= 50606;
		case 73:
			return serverVersion >= 50606;
		}
		return true;
	}
	private boolean slaveConnectionOptions_sempred(SlaveConnectionOptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 74:
			return serverVersion >= 50604;
		}
		return true;
	}
	private boolean cloneStatement_sempred(CloneStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 75:
			return serverVersion >= 80014;
		}
		return true;
	}
	private boolean accountManagementStatement_sempred(AccountManagementStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 76:
			return serverVersion >= 50606;
		case 77:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean alterUser_sempred(AlterUserContext _localctx, int predIndex) {
		switch (predIndex) {
		case 78:
			return serverVersion >= 50706;
		}
		return true;
	}
	private boolean alterUserTail_sempred(AlterUserTailContext _localctx, int predIndex) {
		switch (predIndex) {
		case 79:
			return serverVersion < 80014;
		case 80:
			return serverVersion >= 80014;
		case 81:
			return serverVersion >= 50706;
		case 82:
			return serverVersion >= 80014;
		case 83:
			return serverVersion >= 80014;
		case 84:
			return serverVersion >= 80014;
		case 85:
			return serverVersion >= 80000;
		case 86:
			return serverVersion >= 80018;
		}
		return true;
	}
	private boolean createUser_sempred(CreateUserContext _localctx, int predIndex) {
		switch (predIndex) {
		case 87:
			return serverVersion >= 50706;
		}
		return true;
	}
	private boolean createUserTail_sempred(CreateUserTailContext _localctx, int predIndex) {
		switch (predIndex) {
		case 88:
			return serverVersion >= 50706;
		}
		return true;
	}
	private boolean defaultRoleClause_sempred(DefaultRoleClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 89:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean accountLockPasswordExpireOptions_sempred(AccountLockPasswordExpireOptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 90:
			return serverVersion >= 80014;
		}
		return true;
	}
	private boolean dropUser_sempred(DropUserContext _localctx, int predIndex) {
		switch (predIndex) {
		case 91:
			return serverVersion >= 50706;
		}
		return true;
	}
	private boolean grant_sempred(GrantContext _localctx, int predIndex) {
		switch (predIndex) {
		case 92:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean grantTargetList_sempred(GrantTargetListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 93:
			return serverVersion < 80011;
		case 94:
			return serverVersion >= 80011;
		}
		return true;
	}
	private boolean grantOptions_sempred(GrantOptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 95:
			return serverVersion < 80011;
		case 96:
			return serverVersion >= 80011;
		}
		return true;
	}
	private boolean versionedRequireClause_sempred(VersionedRequireClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 97:
			return serverVersion < 80011;
		}
		return true;
	}
	private boolean revoke_sempred(RevokeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 98:
			return serverVersion >= 80000;
		case 99:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean onTypeTo_sempred(OnTypeToContext _localctx, int predIndex) {
		switch (predIndex) {
		case 100:
			return serverVersion < 80000;
		case 101:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean roleOrPrivilege_sempred(RoleOrPrivilegeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 102:
			return serverVersion > 80000;
		case 103:
			return serverVersion > 80000;
		}
		return true;
	}
	private boolean grantIdentifier_sempred(GrantIdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 104:
			return serverVersion >= 80017;
		}
		return true;
	}
	private boolean tableAdministrationStatement_sempred(TableAdministrationStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 105:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean startOptionValueList_sempred(StartOptionValueListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 106:
			return serverVersion < 50706;
		case 107:
			return serverVersion < 80014;
		case 108:
			return serverVersion >= 80018;
		}
		return true;
	}
	private boolean optionValueNoOptionType_sempred(OptionValueNoOptionTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 109:
			return serverVersion >= 80011;
		}
		return true;
	}
	private boolean setExprOrDefault_sempred(SetExprOrDefaultContext _localctx, int predIndex) {
		switch (predIndex) {
		case 110:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean showStatement_sempred(ShowStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 111:
			return serverVersion < 50700;
		case 112:
			return serverVersion >= 80000;
		case 113:
			return serverVersion < 50700;
		case 114:
			return serverVersion >= 50704;
		}
		return true;
	}
	private boolean showCommandType_sempred(ShowCommandTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 115:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean nonBlocking_sempred(NonBlockingContext _localctx, int predIndex) {
		switch (predIndex) {
		case 116:
			return serverVersion >= 50700 && serverVersion < 50706;
		}
		return true;
	}
	private boolean otherAdministrativeStatement_sempred(OtherAdministrativeStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 117:
			return serverVersion >= 50709;
		}
		return true;
	}
	private boolean flushOption_sempred(FlushOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 118:
			return serverVersion < 80000;
		case 119:
			return serverVersion >= 50706;
		}
		return true;
	}
	private boolean flushTablesOptions_sempred(FlushTablesOptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 120:
			return serverVersion >= 50606;
		}
		return true;
	}
	private boolean utilityStatement_sempred(UtilityStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 121:
			return serverVersion >= 80011;
		}
		return true;
	}
	private boolean explainCommand_sempred(ExplainCommandContext _localctx, int predIndex) {
		switch (predIndex) {
		case 122:
			return serverVersion < 80000;
		case 123:
			return serverVersion < 80000;
		case 124:
			return serverVersion >= 50605;
		case 125:
			return serverVersion >= 80018;
		}
		return true;
	}
	private boolean explainableStatement_sempred(ExplainableStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 126:
			return serverVersion >= 50603;
		case 127:
			return serverVersion >= 50700;
		}
		return true;
	}
	private boolean expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 128:
			return precpred(_ctx, 3);
		case 129:
			return precpred(_ctx, 2);
		case 130:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean boolPri_sempred(BoolPriContext _localctx, int predIndex) {
		switch (predIndex) {
		case 131:
			return precpred(_ctx, 3);
		case 132:
			return precpred(_ctx, 2);
		case 133:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean predicate_sempred(PredicateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 134:
			return serverVersion >= 80017;
		}
		return true;
	}
	private boolean bitExpr_sempred(BitExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 135:
			return precpred(_ctx, 7);
		case 136:
			return precpred(_ctx, 6);
		case 137:
			return precpred(_ctx, 5);
		case 138:
			return precpred(_ctx, 3);
		case 139:
			return precpred(_ctx, 2);
		case 140:
			return precpred(_ctx, 1);
		case 141:
			return precpred(_ctx, 4);
		}
		return true;
	}
	private boolean simpleExpr_sempred(SimpleExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 142:
			return serverVersion >= 80000;
		case 143:
			return serverVersion >= 80000;
		case 144:
			return precpred(_ctx, 15);
		case 145:
			return precpred(_ctx, 21);
		}
		return true;
	}
	private boolean arrayCast_sempred(ArrayCastContext _localctx, int predIndex) {
		switch (predIndex) {
		case 146:
			return serverVersion >= 80017;
		}
		return true;
	}
	private boolean jsonOperator_sempred(JsonOperatorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 147:
			return serverVersion >= 50708;
		case 148:
			return serverVersion >= 50713;
		}
		return true;
	}
	private boolean sumExpr_sempred(SumExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 149:
			return serverVersion >= 80000;
		case 150:
			return serverVersion >= 80000;
		case 151:
			return serverVersion >= 80000;
		case 152:
			return serverVersion >= 80000;
		case 153:
			return serverVersion >= 80000;
		case 154:
			return serverVersion >= 80000;
		case 155:
			return serverVersion >= 80000;
		case 156:
			return serverVersion >= 80000;
		case 157:
			return serverVersion >= 80000;
		case 158:
			return serverVersion >= 80000;
		case 159:
			return serverVersion >= 80000;
		case 160:
			return serverVersion >= 80000;
		case 161:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean runtimeFunctionCall_sempred(RuntimeFunctionCallContext _localctx, int predIndex) {
		switch (predIndex) {
		case 162:
			return serverVersion < 50607;
		case 163:
			return serverVersion < 80011;
		case 164:
			return serverVersion < 80000;
		}
		return true;
	}
	private boolean geometryFunction_sempred(GeometryFunctionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 165:
			return serverVersion < 50706;
		}
		return true;
	}
	private boolean fractionalPrecision_sempred(FractionalPrecisionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 166:
			return serverVersion >= 50604;
		}
		return true;
	}
	private boolean internalVariableName_sempred(InternalVariableNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 167:
			return serverVersion < 80017;
		case 168:
			return serverVersion >= 80017;
		}
		return true;
	}
	private boolean castType_sempred(CastTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 169:
			return serverVersion >= 50708;
		case 170:
			return serverVersion >= 80017;
		case 171:
			return serverVersion >= 80017;
		}
		return true;
	}
	private boolean channel_sempred(ChannelContext _localctx, int predIndex) {
		switch (predIndex) {
		case 172:
			return serverVersion >= 50706;
		}
		return true;
	}
	private boolean getDiagnostics_sempred(GetDiagnosticsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 173:
			return serverVersion >= 50700;
		}
		return true;
	}
	private boolean checkOrReferences_sempred(CheckOrReferencesContext _localctx, int predIndex) {
		switch (predIndex) {
		case 174:
			return serverVersion < 80016;
		}
		return true;
	}
	private boolean tableConstraintDef_sempred(TableConstraintDefContext _localctx, int predIndex) {
		switch (predIndex) {
		case 175:
			return serverVersion >= 80017;
		}
		return true;
	}
	private boolean fieldDefinition_sempred(FieldDefinitionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 176:
			return serverVersion >= 50707;
		case 177:
			return serverVersion < 80000;
		case 178:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean columnAttribute_sempred(ColumnAttributeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 179:
			return serverVersion >= 80014;
		case 180:
			return serverVersion >= 80013;
		case 181:
			return serverVersion >= 80000;
		case 182:
			return serverVersion >= 80017;
		case 183:
			return serverVersion >= 80017;
		}
		return true;
	}
	private boolean keyListVariants_sempred(KeyListVariantsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 184:
			return serverVersion >= 80013;
		case 185:
			return serverVersion < 80013;
		}
		return true;
	}
	private boolean commonIndexOption_sempred(CommonIndexOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 186:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean dataType_sempred(DataTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 187:
			return serverVersion >= 50708;
		}
		return true;
	}
	private boolean charsetName_sempred(CharsetNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 188:
			return serverVersion < 80011;
		}
		return true;
	}
	private boolean collationName_sempred(CollationNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 189:
			return serverVersion < 80011;
		case 190:
			return serverVersion >= 80018;
		}
		return true;
	}
	private boolean createTableOption_sempred(CreateTableOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 191:
			return serverVersion >= 80014;
		case 192:
			return serverVersion >= 50708;
		case 193:
			return serverVersion >= 50711;
		case 194:
			return serverVersion >= 50707;
		}
		return true;
	}
	private boolean partitionKeyAlgorithm_sempred(PartitionKeyAlgorithmContext _localctx, int predIndex) {
		switch (predIndex) {
		case 195:
			return serverVersion >= 50700;
		}
		return true;
	}
	private boolean createUserEntry_sempred(CreateUserEntryContext _localctx, int predIndex) {
		switch (predIndex) {
		case 196:
			return serverVersion < 80011;
		case 197:
			return serverVersion >= 50706;
		case 198:
			return serverVersion >= 80018;
		}
		return true;
	}
	private boolean usePartition_sempred(UsePartitionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 199:
			return serverVersion >= 50602;
		}
		return true;
	}
	private boolean columnName_sempred(ColumnNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 200:
			return serverVersion >= 80000;
		case 201:
			return serverVersion < 80000;
		}
		return true;
	}
	private boolean pureIdentifier_sempred(PureIdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 202:
			return isSqlModeActive(AnsiQuotes);
		}
		return true;
	}
	private boolean simpleIdentifier_sempred(SimpleIdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 203:
			return serverVersion < 80000;
		}
		return true;
	}
	private boolean real_ulonglong_number_sempred(Real_ulonglong_numberContext _localctx, int predIndex) {
		switch (predIndex) {
		case 204:
			return serverVersion >= 80017;
		}
		return true;
	}
	private boolean textStringLiteral_sempred(TextStringLiteralContext _localctx, int predIndex) {
		switch (predIndex) {
		case 205:
			return !isSqlModeActive(AnsiQuotes);
		}
		return true;
	}
	private boolean textStringHash_sempred(TextStringHashContext _localctx, int predIndex) {
		switch (predIndex) {
		case 206:
			return serverVersion >= 80017;
		}
		return true;
	}
	private boolean identifierKeyword_sempred(IdentifierKeywordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 207:
			return serverVersion < 80017;
		case 208:
			return serverVersion >= 50709;
		case 209:
			return serverVersion >= 80011;
		}
		return true;
	}
	private boolean labelKeyword_sempred(LabelKeywordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 210:
			return serverVersion < 80017;
		}
		return true;
	}
	private boolean roleKeyword_sempred(RoleKeywordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 211:
			return serverVersion < 80017;
		}
		return true;
	}
	private boolean roleOrIdentifierKeyword_sempred(RoleOrIdentifierKeywordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 212:
			return serverVersion >= 50709;
		case 213:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean roleOrLabelKeyword_sempred(RoleOrLabelKeywordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 214:
			return serverVersion < 50709;
		case 215:
			return serverVersion < 80000;
		case 216:
			return serverVersion >= 80000;
		case 217:
			return serverVersion >= 80014;
		}
		return true;
	}

	private static final int _serializedATNSegments = 4;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0311\u20a8\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
		"\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
		"\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
		"\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181"+
		"\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\4\u0184\t\u0184\4\u0185\t\u0185"+
		"\4\u0186\t\u0186\4\u0187\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\4\u018a"+
		"\t\u018a\4\u018b\t\u018b\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e\t\u018e"+
		"\4\u018f\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191\4\u0192\t\u0192\4\u0193"+
		"\t\u0193\4\u0194\t\u0194\4\u0195\t\u0195\4\u0196\t\u0196\4\u0197\t\u0197"+
		"\4\u0198\t\u0198\4\u0199\t\u0199\4\u019a\t\u019a\4\u019b\t\u019b\4\u019c"+
		"\t\u019c\4\u019d\t\u019d\4\u019e\t\u019e\4\u019f\t\u019f\4\u01a0\t\u01a0"+
		"\4\u01a1\t\u01a1\4\u01a2\t\u01a2\4\u01a3\t\u01a3\4\u01a4\t\u01a4\4\u01a5"+
		"\t\u01a5\4\u01a6\t\u01a6\4\u01a7\t\u01a7\4\u01a8\t\u01a8\4\u01a9\t\u01a9"+
		"\4\u01aa\t\u01aa\4\u01ab\t\u01ab\4\u01ac\t\u01ac\4\u01ad\t\u01ad\4\u01ae"+
		"\t\u01ae\4\u01af\t\u01af\4\u01b0\t\u01b0\4\u01b1\t\u01b1\4\u01b2\t\u01b2"+
		"\4\u01b3\t\u01b3\4\u01b4\t\u01b4\4\u01b5\t\u01b5\4\u01b6\t\u01b6\4\u01b7"+
		"\t\u01b7\4\u01b8\t\u01b8\4\u01b9\t\u01b9\4\u01ba\t\u01ba\4\u01bb\t\u01bb"+
		"\4\u01bc\t\u01bc\4\u01bd\t\u01bd\4\u01be\t\u01be\4\u01bf\t\u01bf\4\u01c0"+
		"\t\u01c0\4\u01c1\t\u01c1\4\u01c2\t\u01c2\4\u01c3\t\u01c3\4\u01c4\t\u01c4"+
		"\4\u01c5\t\u01c5\4\u01c6\t\u01c6\4\u01c7\t\u01c7\4\u01c8\t\u01c8\4\u01c9"+
		"\t\u01c9\4\u01ca\t\u01ca\4\u01cb\t\u01cb\4\u01cc\t\u01cc\4\u01cd\t\u01cd"+
		"\4\u01ce\t\u01ce\4\u01cf\t\u01cf\4\u01d0\t\u01d0\4\u01d1\t\u01d1\4\u01d2"+
		"\t\u01d2\4\u01d3\t\u01d3\4\u01d4\t\u01d4\4\u01d5\t\u01d5\4\u01d6\t\u01d6"+
		"\4\u01d7\t\u01d7\4\u01d8\t\u01d8\4\u01d9\t\u01d9\4\u01da\t\u01da\4\u01db"+
		"\t\u01db\4\u01dc\t\u01dc\4\u01dd\t\u01dd\4\u01de\t\u01de\4\u01df\t\u01df"+
		"\4\u01e0\t\u01e0\4\u01e1\t\u01e1\4\u01e2\t\u01e2\4\u01e3\t\u01e3\4\u01e4"+
		"\t\u01e4\4\u01e5\t\u01e5\4\u01e6\t\u01e6\4\u01e7\t\u01e7\4\u01e8\t\u01e8"+
		"\4\u01e9\t\u01e9\4\u01ea\t\u01ea\4\u01eb\t\u01eb\4\u01ec\t\u01ec\4\u01ed"+
		"\t\u01ed\4\u01ee\t\u01ee\4\u01ef\t\u01ef\4\u01f0\t\u01f0\4\u01f1\t\u01f1"+
		"\4\u01f2\t\u01f2\4\u01f3\t\u01f3\4\u01f4\t\u01f4\4\u01f5\t\u01f5\4\u01f6"+
		"\t\u01f6\4\u01f7\t\u01f7\4\u01f8\t\u01f8\4\u01f9\t\u01f9\4\u01fa\t\u01fa"+
		"\4\u01fb\t\u01fb\4\u01fc\t\u01fc\4\u01fd\t\u01fd\4\u01fe\t\u01fe\4\u01ff"+
		"\t\u01ff\4\u0200\t\u0200\4\u0201\t\u0201\4\u0202\t\u0202\4\u0203\t\u0203"+
		"\4\u0204\t\u0204\4\u0205\t\u0205\4\u0206\t\u0206\4\u0207\t\u0207\4\u0208"+
		"\t\u0208\4\u0209\t\u0209\4\u020a\t\u020a\4\u020b\t\u020b\4\u020c\t\u020c"+
		"\4\u020d\t\u020d\4\u020e\t\u020e\4\u020f\t\u020f\4\u0210\t\u0210\4\u0211"+
		"\t\u0211\4\u0212\t\u0212\4\u0213\t\u0213\4\u0214\t\u0214\4\u0215\t\u0215"+
		"\4\u0216\t\u0216\4\u0217\t\u0217\4\u0218\t\u0218\4\u0219\t\u0219\4\u021a"+
		"\t\u021a\4\u021b\t\u021b\4\u021c\t\u021c\4\u021d\t\u021d\4\u021e\t\u021e"+
		"\4\u021f\t\u021f\4\u0220\t\u0220\4\u0221\t\u0221\4\u0222\t\u0222\4\u0223"+
		"\t\u0223\4\u0224\t\u0224\4\u0225\t\u0225\4\u0226\t\u0226\4\u0227\t\u0227"+
		"\4\u0228\t\u0228\4\u0229\t\u0229\4\u022a\t\u022a\4\u022b\t\u022b\4\u022c"+
		"\t\u022c\4\u022d\t\u022d\4\u022e\t\u022e\4\u022f\t\u022f\4\u0230\t\u0230"+
		"\4\u0231\t\u0231\4\u0232\t\u0232\4\u0233\t\u0233\4\u0234\t\u0234\4\u0235"+
		"\t\u0235\4\u0236\t\u0236\4\u0237\t\u0237\4\u0238\t\u0238\4\u0239\t\u0239"+
		"\4\u023a\t\u023a\4\u023b\t\u023b\4\u023c\t\u023c\4\u023d\t\u023d\4\u023e"+
		"\t\u023e\4\u023f\t\u023f\4\u0240\t\u0240\4\u0241\t\u0241\4\u0242\t\u0242"+
		"\4\u0243\t\u0243\4\u0244\t\u0244\4\u0245\t\u0245\4\u0246\t\u0246\4\u0247"+
		"\t\u0247\4\u0248\t\u0248\4\u0249\t\u0249\4\u024a\t\u024a\4\u024b\t\u024b"+
		"\4\u024c\t\u024c\4\u024d\t\u024d\4\u024e\t\u024e\4\u024f\t\u024f\4\u0250"+
		"\t\u0250\4\u0251\t\u0251\4\u0252\t\u0252\4\u0253\t\u0253\4\u0254\t\u0254"+
		"\4\u0255\t\u0255\4\u0256\t\u0256\4\u0257\t\u0257\4\u0258\t\u0258\4\u0259"+
		"\t\u0259\4\u025a\t\u025a\4\u025b\t\u025b\4\u025c\t\u025c\4\u025d\t\u025d"+
		"\4\u025e\t\u025e\3\2\3\2\3\2\5\2\u04c0\n\2\3\2\3\2\5\2\u04c4\n\2\3\2\5"+
		"\2\u04c7\n\2\5\2\u04c9\n\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3"+
		"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3"+
		"\3\3\3\3\3\3\3\3\3\3\3\5\3\u04ed\n\3\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u04f5"+
		"\n\4\3\4\3\4\3\4\5\4\u04fa\n\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4"+
		"\3\4\3\4\3\4\3\4\5\4\u050a\n\4\3\5\3\5\3\5\6\5\u050f\n\5\r\5\16\5\u0510"+
		"\3\5\3\5\3\5\3\5\3\5\5\5\u0518\n\5\3\6\5\6\u051b\n\6\3\6\3\6\3\6\3\6\3"+
		"\6\5\6\u0522\n\6\3\6\3\6\3\6\5\6\u0527\n\6\3\6\5\6\u052a\n\6\3\6\3\6\3"+
		"\6\5\6\u052f\n\6\3\6\3\6\3\6\3\6\5\6\u0535\n\6\5\6\u0537\n\6\3\6\3\6\5"+
		"\6\u053b\n\6\3\6\3\6\5\6\u053f\n\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u0548"+
		"\n\7\3\b\3\b\5\b\u054c\n\b\3\b\7\b\u054f\n\b\f\b\16\b\u0552\13\b\3\t\3"+
		"\t\3\t\5\t\u0557\n\t\3\n\3\n\3\n\3\n\3\13\5\13\u055e\n\13\3\13\3\13\5"+
		"\13\u0562\n\13\3\13\3\13\3\13\5\13\u0567\n\13\3\f\3\f\3\f\5\f\u056c\n"+
		"\f\3\f\3\f\3\f\3\f\3\f\5\f\u0573\n\f\3\f\5\f\u0576\n\f\3\r\3\r\3\r\3\r"+
		"\5\r\u057c\n\r\3\r\5\r\u057f\n\r\3\16\3\16\3\16\7\16\u0584\n\16\f\16\16"+
		"\16\u0587\13\16\3\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u0590\n\17\3\20"+
		"\3\20\3\20\5\20\u0595\n\20\3\20\3\20\3\20\5\20\u059a\n\20\3\20\3\20\3"+
		"\20\3\20\3\20\3\20\5\20\u05a2\n\20\3\20\3\20\3\20\3\20\5\20\u05a8\n\20"+
		"\3\20\3\20\5\20\u05ac\n\20\3\20\3\20\3\20\5\20\u05b1\n\20\3\20\3\20\3"+
		"\20\3\20\3\20\7\20\u05b8\n\20\f\20\16\20\u05bb\13\20\3\20\3\20\3\20\5"+
		"\20\u05c0\n\20\3\20\3\20\7\20\u05c4\n\20\f\20\16\20\u05c7\13\20\3\20\3"+
		"\20\3\20\5\20\u05cc\n\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\5\20"+
		"\u05d6\n\20\3\20\3\20\3\20\3\20\5\20\u05dc\n\20\3\20\3\20\3\20\3\20\3"+
		"\20\3\20\3\20\5\20\u05e5\n\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20"+
		"\3\20\3\20\3\20\3\20\5\20\u05f3\n\20\3\21\3\21\5\21\u05f7\n\21\3\21\3"+
		"\21\3\21\3\21\5\21\u05fd\n\21\7\21\u05ff\n\21\f\21\16\21\u0602\13\21\3"+
		"\22\3\22\3\22\5\22\u0607\n\22\3\23\3\23\5\23\u060b\n\23\3\23\3\23\3\23"+
		"\5\23\u0610\n\23\3\23\5\23\u0613\n\23\3\23\3\23\3\23\3\23\5\23\u0619\n"+
		"\23\3\23\3\23\3\23\3\23\5\23\u061f\n\23\3\23\3\23\3\23\3\23\5\23\u0625"+
		"\n\23\3\23\3\23\5\23\u0629\n\23\3\23\3\23\3\23\5\23\u062e\n\23\3\23\3"+
		"\23\5\23\u0632\n\23\3\23\3\23\5\23\u0636\n\23\3\23\3\23\3\23\3\23\3\23"+
		"\3\23\5\23\u063e\n\23\5\23\u0640\n\23\3\23\3\23\3\23\3\23\3\23\5\23\u0647"+
		"\n\23\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u064f\n\23\3\23\3\23\3\23\3\23"+
		"\3\23\3\23\5\23\u0657\n\23\3\23\3\23\5\23\u065b\n\23\3\23\3\23\3\23\3"+
		"\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3"+
		"\23\3\23\3\23\3\23\5\23\u0672\n\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23"+
		"\3\23\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u0682\n\23\3\23\5\23\u0685\n"+
		"\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u068e\n\23\3\24\3\24\3\24"+
		"\5\24\u0693\n\24\3\25\3\25\3\26\3\26\5\26\u0699\n\26\3\26\3\26\3\26\5"+
		"\26\u069e\n\26\7\26\u06a0\n\26\f\26\16\26\u06a3\13\26\3\27\3\27\5\27\u06a7"+
		"\n\27\3\27\3\27\5\27\u06ab\n\27\3\30\3\30\5\30\u06af\n\30\3\30\3\30\5"+
		"\30\u06b3\n\30\3\31\3\31\5\31\u06b7\n\31\3\31\3\31\5\31\u06bb\n\31\5\31"+
		"\u06bd\n\31\3\32\3\32\3\32\3\32\3\33\3\33\3\33\3\34\3\34\5\34\u06c8\n"+
		"\34\3\35\3\35\3\35\5\35\u06cd\n\35\3\35\3\35\3\35\3\35\5\35\u06d3\n\35"+
		"\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u06db\n\36\3\36\3\36\3\36\3\36\3\36"+
		"\3\36\3\36\5\36\u06e4\n\36\3\36\7\36\u06e7\n\36\f\36\16\36\u06ea\13\36"+
		"\5\36\u06ec\n\36\3\36\3\36\3\36\5\36\u06f1\n\36\3\36\3\36\3\36\3\36\3"+
		"\36\5\36\u06f8\n\36\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u0700\n\37\3 \3"+
		" \5 \u0704\n \3 \7 \u0707\n \f \16 \u070a\13 \3!\3!\3\"\3\"\5\"\u0710"+
		"\n\"\3\"\7\"\u0713\n\"\f\"\16\"\u0716\13\"\3#\3#\5#\u071a\n#\3#\3#\3#"+
		"\3#\3#\3#\5#\u0722\n#\3$\3$\5$\u0726\n$\3$\3$\3$\5$\u072b\n$\3%\5%\u072e"+
		"\n%\3%\5%\u0731\n%\3%\5%\u0734\n%\3%\3%\3%\3%\3&\5&\u073b\n&\3&\3&\3&"+
		"\3\'\3\'\5\'\u0742\n\'\3(\3(\5(\u0746\n(\3(\3(\3(\3)\3)\3)\3)\3)\3)\3"+
		")\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\5)\u075e\n)\3*\3*\5*\u0762\n*\3"+
		"*\3*\7*\u0766\n*\f*\16*\u0769\13*\3+\3+\3+\3+\5+\u076f\n+\3,\5,\u0772"+
		"\n,\3,\3,\5,\u0776\n,\3,\3,\3,\3,\3,\5,\u077d\n,\3,\5,\u0780\n,\3,\5,"+
		"\u0783\n,\3,\5,\u0786\n,\3,\3,\3,\3,\3,\3,\3,\5,\u078f\n,\3-\3-\3-\7-"+
		"\u0794\n-\f-\16-\u0797\13-\3.\3.\5.\u079b\n.\3/\5/\u079e\n/\3/\5/\u07a1"+
		"\n/\3/\3/\3\60\3\60\5\60\u07a7\n\60\3\61\3\61\3\61\3\61\5\61\u07ad\n\61"+
		"\3\61\5\61\u07b0\n\61\3\61\3\61\3\62\5\62\u07b5\n\62\3\62\3\62\3\62\3"+
		"\62\3\62\3\62\7\62\u07bd\n\62\f\62\16\62\u07c0\13\62\5\62\u07c2\n\62\3"+
		"\62\3\62\7\62\u07c6\n\62\f\62\16\62\u07c9\13\62\3\62\3\62\3\63\5\63\u07ce"+
		"\n\63\3\63\3\63\3\63\3\63\3\63\3\63\7\63\u07d6\n\63\f\63\16\63\u07d9\13"+
		"\63\5\63\u07db\n\63\3\63\3\63\3\63\3\63\7\63\u07e1\n\63\f\63\16\63\u07e4"+
		"\13\63\3\63\3\63\3\64\5\64\u07e9\n\64\3\64\3\64\3\64\3\64\3\64\3\64\3"+
		"\64\3\65\3\65\5\65\u07f4\n\65\3\65\5\65\u07f7\n\65\3\66\6\66\u07fa\n\66"+
		"\r\66\16\66\u07fb\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3"+
		"\67\3\67\3\67\3\67\3\67\3\67\3\67\5\67\u080f\n\67\38\58\u0812\n8\38\5"+
		"8\u0815\n8\38\38\38\38\58\u081b\n8\38\58\u081e\n8\58\u0820\n8\38\38\7"+
		"8\u0824\n8\f8\168\u0827\138\38\38\38\38\38\78\u082e\n8\f8\168\u0831\13"+
		"8\38\38\38\38\38\78\u0838\n8\f8\168\u083b\138\58\u083d\n8\38\58\u0840"+
		"\n8\39\39\39\59\u0845\n9\39\39\39\39\59\u084b\n9\3:\3:\3:\3:\3;\3;\3;"+
		"\3;\3;\3;\3;\5;\u0858\n;\3<\3<\5<\u085c\n<\3<\7<\u085f\n<\f<\16<\u0862"+
		"\13<\3=\3=\3=\3=\3=\3=\5=\u086a\n=\3>\3>\3>\3>\3>\3>\3>\3>\3?\3?\3?\3"+
		"?\3?\7?\u0879\n?\f?\16?\u087c\13?\3?\3?\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@"+
		"\3@\3@\3@\3@\5@\u088e\n@\3A\3A\3A\3A\3A\3A\3A\5A\u0897\nA\3A\5A\u089a"+
		"\nA\3B\3B\3B\3B\3B\3B\5B\u08a2\nB\3C\3C\3C\5C\u08a7\nC\3C\3C\5C\u08ab"+
		"\nC\3D\3D\3D\3E\3E\5E\u08b2\nE\3E\7E\u08b5\nE\fE\16E\u08b8\13E\3F\3F\3"+
		"F\3F\3F\3F\3F\3F\3F\3F\3F\3F\5F\u08c6\nF\3G\3G\5G\u08ca\nG\3G\3G\3H\3"+
		"H\5H\u08d0\nH\3H\3H\3I\3I\5I\u08d6\nI\3I\3I\3J\3J\5J\u08dc\nJ\3J\3J\3"+
		"K\3K\5K\u08e2\nK\3K\3K\3L\3L\5L\u08e8\nL\3L\3L\3M\5M\u08ed\nM\3M\3M\5"+
		"M\u08f1\nM\3M\3M\3N\3N\3O\3O\5O\u08f9\nO\3O\3O\3P\3P\5P\u08ff\nP\3P\3"+
		"P\3Q\3Q\5Q\u0905\nQ\3Q\3Q\3R\5R\u090a\nR\3R\5R\u090d\nR\3R\5R\u0910\n"+
		"R\3R\3R\3R\3R\3S\3S\3S\5S\u0919\nS\3S\5S\u091c\nS\3T\3T\3T\3T\3U\3U\3"+
		"U\3U\3V\5V\u0927\nV\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\5V\u0933\nV\3V\3V\3"+
		"W\3W\3W\3W\3X\5X\u093c\nX\3X\3X\5X\u0940\nX\3X\3X\3X\3X\3X\3X\3X\5X\u0949"+
		"\nX\3X\5X\u094c\nX\3X\3X\3X\3X\5X\u0952\nX\5X\u0954\nX\3X\3X\5X\u0958"+
		"\nX\3X\3X\3X\3Y\3Y\5Y\u095f\nY\3Y\3Y\3Z\3Z\3Z\3Z\3Z\3Z\3Z\7Z\u096a\nZ"+
		"\fZ\16Z\u096d\13Z\3Z\3Z\3Z\3Z\5Z\u0973\nZ\3Z\3Z\7Z\u0977\nZ\fZ\16Z\u097a"+
		"\13Z\5Z\u097c\nZ\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\5[\u098d"+
		"\n[\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3"+
		"\\\3\\\5\\\u09a1\n\\\3]\3]\5]\u09a5\n]\3]\3]\3^\3^\5^\u09ab\n^\3^\3^\3"+
		"_\3_\5_\u09b1\n_\3_\3_\3`\3`\5`\u09b7\n`\3`\3`\3a\5a\u09bc\na\3a\3a\3"+
		"a\3a\3a\5a\u09c3\na\3b\3b\3b\3b\3b\5b\u09ca\nb\3b\7b\u09cd\nb\fb\16b\u09d0"+
		"\13b\5b\u09d2\nb\3c\3c\5c\u09d6\nc\3d\3d\5d\u09da\nd\3d\3d\3e\5e\u09df"+
		"\ne\3e\3e\5e\u09e3\ne\3e\3e\5e\u09e7\ne\3f\3f\3f\3f\5f\u09ed\nf\3f\7f"+
		"\u09f0\nf\ff\16f\u09f3\13f\5f\u09f5\nf\3g\3g\5g\u09f9\ng\3g\3g\3h\3h\5"+
		"h\u09ff\nh\3h\3h\5h\u0a03\nh\3i\3i\5i\u0a07\ni\3i\3i\3j\3j\3j\3j\5j\u0a0f"+
		"\nj\3j\3j\3k\3k\3k\3k\5k\u0a17\nk\3l\3l\3l\3l\3l\7l\u0a1e\nl\fl\16l\u0a21"+
		"\13l\3m\3m\3m\3m\3n\3n\5n\u0a29\nn\3n\3n\3o\3o\3o\3o\3o\3p\3p\3p\3p\5"+
		"p\u0a36\np\3p\5p\u0a39\np\3q\3q\5q\u0a3d\nq\3q\3q\7q\u0a41\nq\fq\16q\u0a44"+
		"\13q\3q\3q\3q\3q\3q\5q\u0a4b\nq\3q\3q\3q\5q\u0a50\nq\3q\5q\u0a53\nq\3"+
		"q\5q\u0a56\nq\3q\5q\u0a59\nq\3q\5q\u0a5c\nq\5q\u0a5e\nq\3q\3q\3q\3q\5"+
		"q\u0a64\nq\5q\u0a66\nq\3r\3r\3r\3r\3r\3r\3s\3s\3t\3t\3t\3t\3t\5t\u0a75"+
		"\nt\3u\3u\3u\3u\5u\u0a7b\nu\3u\3u\3u\3u\3u\5u\u0a82\nu\3u\5u\u0a85\nu"+
		"\5u\u0a87\nu\5u\u0a89\nu\3v\3v\3v\3v\3v\3v\3v\3v\5v\u0a93\nv\5v\u0a95"+
		"\nv\3w\3w\5w\u0a99\nw\3w\5w\u0a9c\nw\3w\5w\u0a9f\nw\3w\3w\5w\u0aa3\nw"+
		"\3w\3w\3w\5w\u0aa8\nw\3w\3w\3w\3w\5w\u0aae\nw\3w\5w\u0ab1\nw\3w\5w\u0ab4"+
		"\nw\3x\3x\3y\3y\5y\u0aba\ny\3y\5y\u0abd\ny\3y\3y\3z\3z\3z\7z\u0ac4\nz"+
		"\fz\16z\u0ac7\13z\3{\3{\3{\3|\3|\3|\5|\u0acf\n|\3|\3|\5|\u0ad3\n|\3}\3"+
		"}\5}\u0ad7\n}\3}\3}\3}\3}\5}\u0add\n}\3}\7}\u0ae0\n}\f}\16}\u0ae3\13}"+
		"\3~\3~\5~\u0ae7\n~\3~\3~\3~\5~\u0aec\n~\7~\u0aee\n~\f~\16~\u0af1\13~\3"+
		"\177\3\177\3\177\5\177\u0af6\n\177\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080"+
		"\3\u0080\3\u0081\3\u0081\3\u0081\5\u0081\u0b01\n\u0081\3\u0081\5\u0081"+
		"\u0b04\n\u0081\3\u0081\3\u0081\3\u0081\5\u0081\u0b09\n\u0081\3\u0081\3"+
		"\u0081\3\u0081\3\u0081\5\u0081\u0b0f\n\u0081\3\u0081\5\u0081\u0b12\n\u0081"+
		"\3\u0081\5\u0081\u0b15\n\u0081\3\u0081\5\u0081\u0b18\n\u0081\3\u0081\5"+
		"\u0081\u0b1b\n\u0081\3\u0081\3\u0081\3\u0082\3\u0082\3\u0083\3\u0083\3"+
		"\u0083\3\u0083\3\u0083\3\u0084\3\u0084\3\u0084\5\u0084\u0b29\n\u0084\3"+
		"\u0084\5\u0084\u0b2c\n\u0084\3\u0084\3\u0084\5\u0084\u0b30\n\u0084\3\u0085"+
		"\3\u0085\5\u0085\u0b34\n\u0085\3\u0085\3\u0085\3\u0086\3\u0086\5\u0086"+
		"\u0b3a\n\u0086\3\u0086\3\u0086\3\u0086\5\u0086\u0b3f\n\u0086\7\u0086\u0b41"+
		"\n\u0086\f\u0086\16\u0086\u0b44\13\u0086\3\u0087\3\u0087\5\u0087\u0b48"+
		"\n\u0087\3\u0087\5\u0087\u0b4b\n\u0087\3\u0087\3\u0087\5\u0087\u0b4f\n"+
		"\u0087\3\u0087\3\u0087\3\u0087\3\u0087\5\u0087\u0b55\n\u0087\3\u0088\3"+
		"\u0088\3\u0088\5\u0088\u0b5a\n\u0088\3\u0089\3\u0089\3\u0089\3\u0089\3"+
		"\u0089\3\u0089\3\u0089\5\u0089\u0b63\n\u0089\3\u008a\3\u008a\5\u008a\u0b67"+
		"\n\u008a\3\u008a\3\u008a\5\u008a\u0b6b\n\u008a\3\u008a\5\u008a\u0b6e\n"+
		"\u008a\3\u008a\3\u008a\3\u008a\5\u008a\u0b73\n\u008a\3\u008a\5\u008a\u0b76"+
		"\n\u008a\5\u008a\u0b78\n\u008a\3\u008a\3\u008a\5\u008a\u0b7c\n\u008a\3"+
		"\u008a\5\u008a\u0b7f\n\u008a\3\u008a\3\u008a\3\u008a\3\u008a\5\u008a\u0b85"+
		"\n\u008a\5\u008a\u0b87\n\u008a\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b"+
		"\5\u008b\u0b8e\n\u008b\3\u008b\3\u008b\5\u008b\u0b92\n\u008b\5\u008b\u0b94"+
		"\n\u008b\3\u008b\3\u008b\3\u008b\5\u008b\u0b99\n\u008b\3\u008b\3\u008b"+
		"\5\u008b\u0b9d\n\u008b\7\u008b\u0b9f\n\u008b\f\u008b\16\u008b\u0ba2\13"+
		"\u008b\3\u008c\3\u008c\3\u008c\5\u008c\u0ba7\n\u008c\3\u008c\3\u008c\3"+
		"\u008d\3\u008d\7\u008d\u0bad\n\u008d\f\u008d\16\u008d\u0bb0\13\u008d\3"+
		"\u008d\3\u008d\5\u008d\u0bb4\n\u008d\3\u008d\5\u008d\u0bb7\n\u008d\3\u008d"+
		"\5\u008d\u0bba\n\u008d\3\u008d\5\u008d\u0bbd\n\u008d\3\u008d\5\u008d\u0bc0"+
		"\n\u008d\3\u008d\3\u008d\5\u008d\u0bc4\n\u008d\3\u008e\3\u008e\3\u008f"+
		"\3\u008f\3\u0090\3\u0090\3\u0090\3\u0091\3\u0091\3\u0091\3\u0092\3\u0092"+
		"\3\u0092\5\u0092\u0bd3\n\u0092\3\u0093\3\u0093\5\u0093\u0bd7\n\u0093\3"+
		"\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0bdd\n\u0094\3\u0094\5\u0094\u0be0"+
		"\n\u0094\3\u0094\5\u0094\u0be3\n\u0094\3\u0094\3\u0094\3\u0094\3\u0094"+
		"\5\u0094\u0be9\n\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0bee\n\u0094\7"+
		"\u0094\u0bf0\n\u0094\f\u0094\16\u0094\u0bf3\13\u0094\5\u0094\u0bf5\n\u0094"+
		"\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\5\u0095\u0bfd\n\u0095"+
		"\5\u0095\u0bff\n\u0095\3\u0095\3\u0095\3\u0096\3\u0096\3\u0096\3\u0097"+
		"\3\u0097\3\u0097\3\u0097\7\u0097\u0c0a\n\u0097\f\u0097\16\u0097\u0c0d"+
		"\13\u0097\3\u0098\3\u0098\3\u0098\3\u0098\3\u0099\3\u0099\3\u0099\3\u0099"+
		"\3\u009a\5\u009a\u0c18\n\u009a\3\u009a\3\u009a\3\u009a\5\u009a\u0c1d\n"+
		"\u009a\3\u009a\5\u009a\u0c20\n\u009a\3\u009a\5\u009a\u0c23\n\u009a\3\u009b"+
		"\3\u009b\3\u009b\5\u009b\u0c28\n\u009b\3\u009c\3\u009c\3\u009d\3\u009d"+
		"\5\u009d\u0c2e\n\u009d\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e"+
		"\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\5\u009e"+
		"\u0c3e\n\u009e\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u00a0\3\u00a0"+
		"\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0"+
		"\3\u00a0\3\u00a0\5\u00a0\u0c52\n\u00a0\3\u00a1\3\u00a1\3\u00a1\3\u00a1"+
		"\3\u00a1\3\u00a1\3\u00a1\5\u00a1\u0c5b\n\u00a1\3\u00a2\3\u00a2\5\u00a2"+
		"\u0c5f\n\u00a2\3\u00a2\3\u00a2\3\u00a2\7\u00a2\u0c64\n\u00a2\f\u00a2\16"+
		"\u00a2\u0c67\13\u00a2\3\u00a3\3\u00a3\5\u00a3\u0c6b\n\u00a3\3\u00a3\3"+
		"\u00a3\3\u00a3\3\u00a4\3\u00a4\3\u00a4\3\u00a4\5\u00a4\u0c74\n\u00a4\3"+
		"\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\5\u00a5\u0c7b\n\u00a5\3\u00a6\3"+
		"\u00a6\3\u00a6\3\u00a6\3\u00a7\3\u00a7\3\u00a8\3\u00a8\3\u00a8\5\u00a8"+
		"\u0c86\n\u00a8\3\u00a9\3\u00a9\3\u00a9\7\u00a9\u0c8b\n\u00a9\f\u00a9\16"+
		"\u00a9\u0c8e\13\u00a9\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa"+
		"\3\u00aa\3\u00aa\5\u00aa\u0c98\n\u00aa\3\u00ab\3\u00ab\3\u00ab\3\u00ab"+
		"\3\u00ab\5\u00ab\u0c9f\n\u00ab\3\u00ab\3\u00ab\5\u00ab\u0ca3\n\u00ab\3"+
		"\u00ab\3\u00ab\3\u00ab\3\u00ab\5\u00ab\u0ca9\n\u00ab\3\u00ac\3\u00ac\3"+
		"\u00ac\5\u00ac\u0cae\n\u00ac\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u0cb3\n\u00ad"+
		"\3\u00ae\3\u00ae\5\u00ae\u0cb7\n\u00ae\3\u00ae\3\u00ae\7\u00ae\u0cbb\n"+
		"\u00ae\f\u00ae\16\u00ae\u0cbe\13\u00ae\3\u00af\3\u00af\3\u00af\5\u00af"+
		"\u0cc3\n\u00af\5\u00af\u0cc5\n\u00af\3\u00b0\5\u00b0\u0cc8\n\u00b0\3\u00b0"+
		"\3\u00b0\5\u00b0\u0ccc\n\u00b0\3\u00b1\3\u00b1\3\u00b1\3\u00b2\3\u00b2"+
		"\3\u00b2\3\u00b2\3\u00b2\5\u00b2\u0cd6\n\u00b2\3\u00b2\3\u00b2\3\u00b2"+
		"\5\u00b2\u0cdb\n\u00b2\3\u00b2\7\u00b2\u0cde\n\u00b2\f\u00b2\16\u00b2"+
		"\u0ce1\13\u00b2\3\u00b3\3\u00b3\7\u00b3\u0ce5\n\u00b3\f\u00b3\16\u00b3"+
		"\u0ce8\13\u00b3\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4"+
		"\u0cf0\n\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4"+
		"\u0cf8\n\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u0cfd\n\u00b4\3\u00b5\3"+
		"\u00b5\5\u00b5\u0d01\n\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\5\u00b5\u0d07"+
		"\n\u00b5\3\u00b5\5\u00b5\u0d0a\n\u00b5\3\u00b6\5\u00b6\u0d0d\n\u00b6\3"+
		"\u00b6\3\u00b6\5\u00b6\u0d11\n\u00b6\3\u00b7\3\u00b7\5\u00b7\u0d15\n\u00b7"+
		"\3\u00b7\3\u00b7\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8"+
		"\u0d1f\n\u00b8\3\u00b9\3\u00b9\5\u00b9\u0d23\n\u00b9\3\u00b9\5\u00b9\u0d26"+
		"\n\u00b9\3\u00b9\5\u00b9\u0d29\n\u00b9\3\u00ba\3\u00ba\3\u00ba\5\u00ba"+
		"\u0d2e\n\u00ba\3\u00ba\3\u00ba\3\u00bb\3\u00bb\5\u00bb\u0d34\n\u00bb\3"+
		"\u00bb\3\u00bb\5\u00bb\u0d38\n\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\5"+
		"\u00bb\u0d3e\n\u00bb\3\u00bb\5\u00bb\u0d41\n\u00bb\5\u00bb\u0d43\n\u00bb"+
		"\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u0d48\n\u00bc\3\u00bc\3\u00bc\3\u00bd"+
		"\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u0d54"+
		"\n\u00bd\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\7\u00be\u0d5b\n\u00be"+
		"\f\u00be\16\u00be\u0d5e\13\u00be\3\u00be\3\u00be\3\u00bf\3\u00bf\3\u00bf"+
		"\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u0d6a\n\u00bf\3\u00bf"+
		"\5\u00bf\u0d6d\n\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u0d72\n\u00bf\3"+
		"\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u0d79\n\u00bf\3\u00c0\3"+
		"\u00c0\5\u00c0\u0d7d\n\u00c0\3\u00c0\3\u00c0\5\u00c0\u0d81\n\u00c0\5\u00c0"+
		"\u0d83\n\u00c0\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c2\3\u00c2\3\u00c2"+
		"\3\u00c2\3\u00c3\3\u00c3\3\u00c3\3\u00c3\5\u00c3\u0d91\n\u00c3\3\u00c4"+
		"\3\u00c4\3\u00c5\3\u00c5\3\u00c5\5\u00c5\u0d98\n\u00c5\3\u00c5\3\u00c5"+
		"\3\u00c6\3\u00c6\3\u00c6\7\u00c6\u0d9f\n\u00c6\f\u00c6\16\u00c6\u0da2"+
		"\13\u00c6\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u0da7\n\u00c7\3\u00c7\3\u00c7"+
		"\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u0db0\n\u00c7\3\u00c7"+
		"\3\u00c7\5\u00c7\u0db4\n\u00c7\3\u00c7\3\u00c7\5\u00c7\u0db8\n\u00c7\3"+
		"\u00c8\3\u00c8\3\u00c9\3\u00c9\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca"+
		"\u0dc2\n\u00ca\5\u00ca\u0dc4\n\u00ca\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3"+
		"\u00cb\3\u00cb\5\u00cb\u0dcc\n\u00cb\3\u00cc\3\u00cc\3\u00cc\7\u00cc\u0dd1"+
		"\n\u00cc\f\u00cc\16\u00cc\u0dd4\13\u00cc\3\u00cd\3\u00cd\5\u00cd\u0dd8"+
		"\n\u00cd\3\u00ce\3\u00ce\5\u00ce\u0ddc\n\u00ce\3\u00ce\3\u00ce\5\u00ce"+
		"\u0de0\n\u00ce\3\u00ce\5\u00ce\u0de3\n\u00ce\3\u00ce\3\u00ce\3\u00ce\3"+
		"\u00ce\5\u00ce\u0de9\n\u00ce\3\u00ce\5\u00ce\u0dec\n\u00ce\3\u00ce\5\u00ce"+
		"\u0def\n\u00ce\3\u00cf\3\u00cf\3\u00cf\3\u00cf\5\u00cf\u0df5\n\u00cf\3"+
		"\u00d0\3\u00d0\3\u00d0\7\u00d0\u0dfa\n\u00d0\f\u00d0\16\u00d0\u0dfd\13"+
		"\u00d0\3\u00d0\3\u00d0\5\u00d0\u0e01\n\u00d0\3\u00d0\3\u00d0\5\u00d0\u0e05"+
		"\n\u00d0\3\u00d0\5\u00d0\u0e08\n\u00d0\3\u00d0\5\u00d0\u0e0b\n\u00d0\3"+
		"\u00d0\5\u00d0\u0e0e\n\u00d0\5\u00d0\u0e10\n\u00d0\3\u00d1\3\u00d1\5\u00d1"+
		"\u0e14\n\u00d1\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\5\u00d2"+
		"\u0e1c\n\u00d2\3\u00d3\3\u00d3\3\u00d3\3\u00d3\5\u00d3\u0e22\n\u00d3\3"+
		"\u00d3\3\u00d3\5\u00d3\u0e26\n\u00d3\3\u00d3\3\u00d3\3\u00d3\5\u00d3\u0e2b"+
		"\n\u00d3\3\u00d3\5\u00d3\u0e2e\n\u00d3\3\u00d3\5\u00d3\u0e31\n\u00d3\3"+
		"\u00d3\5\u00d3\u0e34\n\u00d3\5\u00d3\u0e36\n\u00d3\3\u00d3\3\u00d3\3\u00d3"+
		"\5\u00d3\u0e3b\n\u00d3\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\7\u00d4"+
		"\u0e42\n\u00d4\f\u00d4\16\u00d4\u0e45\13\u00d4\3\u00d4\3\u00d4\3\u00d4"+
		"\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\5\u00d4\u0e51"+
		"\n\u00d4\5\u00d4\u0e53\n\u00d4\3\u00d5\3\u00d5\5\u00d5\u0e57\n\u00d5\3"+
		"\u00d5\3\u00d5\3\u00d6\3\u00d6\5\u00d6\u0e5d\n\u00d6\3\u00d6\5\u00d6\u0e60"+
		"\n\u00d6\3\u00d6\5\u00d6\u0e63\n\u00d6\3\u00d7\3\u00d7\3\u00d7\3\u00d7"+
		"\5\u00d7\u0e69\n\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\5\u00d7"+
		"\u0e70\n\u00d7\5\u00d7\u0e72\n\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3"+
		"\u00d7\3\u00d7\5\u00d7\u0e7a\n\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\5"+
		"\u00d7\u0e80\n\u00d7\3\u00d8\3\u00d8\3\u00d8\5\u00d8\u0e85\n\u00d8\3\u00d8"+
		"\5\u00d8\u0e88\n\u00d8\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\5\u00d9"+
		"\u0e8f\n\u00d9\5\u00d9\u0e91\n\u00d9\3\u00da\3\u00da\3\u00da\3\u00da\3"+
		"\u00da\3\u00da\3\u00da\5\u00da\u0e9a\n\u00da\3\u00da\3\u00da\3\u00da\3"+
		"\u00da\3\u00da\7\u00da\u0ea1\n\u00da\f\u00da\16\u00da\u0ea4\13\u00da\3"+
		"\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\5\u00da\u0eac\n\u00da\3"+
		"\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\5\u00da\u0eb4\n\u00da\3"+
		"\u00db\3\u00db\5\u00db\u0eb8\n\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3"+
		"\u00db\5\u00db\u0ebf\n\u00db\3\u00db\5\u00db\u0ec2\n\u00db\5\u00db\u0ec4"+
		"\n\u00db\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\5\u00dc\u0ecc"+
		"\n\u00dc\3\u00dd\3\u00dd\3\u00dd\3\u00dd\5\u00dd\u0ed2\n\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\5\u00de\u0edc"+
		"\n\u00de\3\u00df\3\u00df\3\u00df\7\u00df\u0ee1\n\u00df\f\u00df\16\u00df"+
		"\u0ee4\13\u00df\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0"+
		"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0"+
		"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0"+
		"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0"+
		"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0"+
		"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0"+
		"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0"+
		"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0"+
		"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0"+
		"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\5\u00e0\u0f3b\n\u00e0"+
		"\3\u00e1\3\u00e1\5\u00e1\u0f3f\n\u00e1\3\u00e2\3\u00e2\5\u00e2\u0f43\n"+
		"\u00e2\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3"+
		"\3\u00e3\3\u00e3\3\u00e3\3\u00e3\5\u00e3\u0f51\n\u00e3\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\7\u00e4\u0f57\n\u00e4\f\u00e4\16\u00e4\u0f5a\13\u00e4"+
		"\5\u00e4\u0f5c\n\u00e4\3\u00e4\3\u00e4\3\u00e5\3\u00e5\3\u00e5\3\u00e5"+
		"\3\u00e5\3\u00e5\7\u00e5\u0f66\n\u00e5\f\u00e5\16\u00e5\u0f69\13\u00e5"+
		"\3\u00e5\3\u00e5\5\u00e5\u0f6d\n\u00e5\3\u00e6\3\u00e6\3\u00e6\3\u00e6"+
		"\5\u00e6\u0f73\n\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\5\u00e6"+
		"\u0f7a\n\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\5\u00e6\u0f81\n"+
		"\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\5\u00e6\u0f88\n\u00e6\3"+
		"\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\5\u00e6\u0f8f\n\u00e6\3\u00e6\3"+
		"\u00e6\3\u00e6\3\u00e6\3\u00e6\5\u00e6\u0f96\n\u00e6\3\u00e6\3\u00e6\3"+
		"\u00e6\3\u00e6\3\u00e6\5\u00e6\u0f9d\n\u00e6\3\u00e6\5\u00e6\u0fa0\n\u00e6"+
		"\3\u00e7\3\u00e7\3\u00e7\7\u00e7\u0fa5\n\u00e7\f\u00e7\16\u00e7\u0fa8"+
		"\13\u00e7\3\u00e8\3\u00e8\3\u00e8\7\u00e8\u0fad\n\u00e8\f\u00e8\16\u00e8"+
		"\u0fb0\13\u00e8\3\u00e9\3\u00e9\3\u00e9\7\u00e9\u0fb5\n\u00e9\f\u00e9"+
		"\16\u00e9\u0fb8\13\u00e9\3\u00ea\3\u00ea\3\u00eb\3\u00eb\3\u00eb\7\u00eb"+
		"\u0fbf\n\u00eb\f\u00eb\16\u00eb\u0fc2\13\u00eb\3\u00ec\3\u00ec\3\u00ec"+
		"\5\u00ec\u0fc7\n\u00ec\3\u00ec\3\u00ec\5\u00ec\u0fcb\n\u00ec\3\u00ec\3"+
		"\u00ec\5\u00ec\u0fcf\n\u00ec\3\u00ec\3\u00ec\3\u00ec\5\u00ec\u0fd4\n\u00ec"+
		"\3\u00ec\5\u00ec\u0fd7\n\u00ec\5\u00ec\u0fd9\n\u00ec\3\u00ed\3\u00ed\3"+
		"\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\5\u00ed\u0fe2\n\u00ed\3\u00ed\3"+
		"\u00ed\7\u00ed\u0fe6\n\u00ed\f\u00ed\16\u00ed\u0fe9\13\u00ed\3\u00ee\3"+
		"\u00ee\3\u00ee\3\u00ee\5\u00ee\u0fef\n\u00ee\3\u00ee\3\u00ee\3\u00ee\5"+
		"\u00ee\u0ff4\n\u00ee\3\u00ee\3\u00ee\3\u00ee\5\u00ee\u0ff9\n\u00ee\3\u00ee"+
		"\3\u00ee\3\u00ee\5\u00ee\u0ffe\n\u00ee\3\u00ee\5\u00ee\u1001\n\u00ee\3"+
		"\u00ef\3\u00ef\3\u00ef\7\u00ef\u1006\n\u00ef\f\u00ef\16\u00ef\u1009\13"+
		"\u00ef\3\u00f0\3\u00f0\3\u00f1\3\u00f1\3\u00f1\3\u00f2\3\u00f2\3\u00f2"+
		"\3\u00f2\3\u00f2\5\u00f2\u1015\n\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2"+
		"\5\u00f2\u101b\n\u00f2\3\u00f3\3\u00f3\3\u00f3\3\u00f3\5\u00f3\u1021\n"+
		"\u00f3\3\u00f4\3\u00f4\3\u00f4\7\u00f4\u1026\n\u00f4\f\u00f4\16\u00f4"+
		"\u1029\13\u00f4\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\5\u00f5\u1030"+
		"\n\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\5\u00f5\u1036\n\u00f5\3\u00f5"+
		"\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5"+
		"\5\u00f5\u1042\n\u00f5\5\u00f5\u1044\n\u00f5\3\u00f6\3\u00f6\3\u00f6\3"+
		"\u00f6\5\u00f6\u104a\n\u00f6\3\u00f6\3\u00f6\5\u00f6\u104e\n\u00f6\5\u00f6"+
		"\u1050\n\u00f6\3\u00f7\3\u00f7\5\u00f7\u1054\n\u00f7\3\u00f7\3\u00f7\3"+
		"\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8"+
		"\5\u00f8\u1061\n\u00f8\3\u00f9\3\u00f9\3\u00f9\3\u00f9\5\u00f9\u1067\n"+
		"\u00f9\3\u00f9\3\u00f9\3\u00fa\3\u00fa\3\u00fa\3\u00fa\5\u00fa\u106f\n"+
		"\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa"+
		"\3\u00fa\5\u00fa\u107a\n\u00fa\3\u00fa\3\u00fa\5\u00fa\u107e\n\u00fa\3"+
		"\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa"+
		"\3\u00fa\3\u00fa\5\u00fa\u108b\n\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa"+
		"\3\u00fa\5\u00fa\u1092\n\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\5\u00fa"+
		"\u1098\n\u00fa\5\u00fa\u109a\n\u00fa\3\u00fb\3\u00fb\3\u00fb\3\u00fc\3"+
		"\u00fc\3\u00fc\3\u00fc\3\u00fc\5\u00fc\u10a4\n\u00fc\3\u00fc\3\u00fc\3"+
		"\u00fc\3\u00fc\3\u00fd\3\u00fd\5\u00fd\u10ac\n\u00fd\3\u00fd\5\u00fd\u10af"+
		"\n\u00fd\3\u00fd\7\u00fd\u10b2\n\u00fd\f\u00fd\16\u00fd\u10b5\13\u00fd"+
		"\3\u00fd\5\u00fd\u10b8\n\u00fd\3\u00fe\3\u00fe\3\u00fe\3\u00fe\5\u00fe"+
		"\u10be\n\u00fe\3\u00fe\5\u00fe\u10c1\n\u00fe\3\u00ff\3\u00ff\3\u00ff\5"+
		"\u00ff\u10c6\n\u00ff\3\u0100\3\u0100\3\u0100\3\u0100\3\u0100\3\u0100\3"+
		"\u0100\3\u0100\3\u0100\6\u0100\u10d1\n\u0100\r\u0100\16\u0100\u10d2\3"+
		"\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101"+
		"\3\u0101\5\u0101\u10df\n\u0101\3\u0101\3\u0101\3\u0101\5\u0101\u10e4\n"+
		"\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\5\u0101\u10ec\n"+
		"\u0101\3\u0101\3\u0101\3\u0101\3\u0101\5\u0101\u10f2\n\u0101\5\u0101\u10f4"+
		"\n\u0101\5\u0101\u10f6\n\u0101\3\u0102\3\u0102\3\u0102\3\u0102\5\u0102"+
		"\u10fc\n\u0102\3\u0102\3\u0102\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103"+
		"\3\u0103\3\u0103\3\u0103\5\u0103\u1108\n\u0103\3\u0103\3\u0103\3\u0103"+
		"\5\u0103\u110d\n\u0103\5\u0103\u110f\n\u0103\3\u0103\3\u0103\5\u0103\u1113"+
		"\n\u0103\3\u0103\3\u0103\3\u0103\3\u0103\5\u0103\u1119\n\u0103\3\u0103"+
		"\5\u0103\u111c\n\u0103\3\u0103\5\u0103\u111f\n\u0103\3\u0103\3\u0103\3"+
		"\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\5\u0103\u1129\n\u0103\5"+
		"\u0103\u112b\n\u0103\3\u0104\3\u0104\3\u0104\3\u0104\5\u0104\u1131\n\u0104"+
		"\3\u0105\3\u0105\3\u0105\6\u0105\u1136\n\u0105\r\u0105\16\u0105\u1137"+
		"\3\u0105\3\u0105\3\u0105\3\u0105\5\u0105\u113e\n\u0105\3\u0106\3\u0106"+
		"\3\u0106\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\5\u0107\u1148\n\u0107"+
		"\3\u0107\3\u0107\5\u0107\u114c\n\u0107\3\u0108\3\u0108\3\u0108\5\u0108"+
		"\u1151\n\u0108\3\u0109\3\u0109\3\u0109\3\u010a\3\u010a\3\u010a\3\u010a"+
		"\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\7\u010a\u1160\n\u010a"+
		"\f\u010a\16\u010a\u1163\13\u010a\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b"+
		"\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\5\u010b"+
		"\u1172\n\u010b\3\u010b\3\u010b\3\u010b\5\u010b\u1177\n\u010b\3\u010b\3"+
		"\u010b\3\u010b\3\u010b\3\u010b\3\u010b\5\u010b\u117f\n\u010b\3\u010b\3"+
		"\u010b\3\u010b\3\u010b\3\u010b\3\u010b\5\u010b\u1187\n\u010b\3\u010c\3"+
		"\u010c\3\u010c\5\u010c\u118c\n\u010c\3\u010c\3\u010c\3\u010c\3\u010c\5"+
		"\u010c\u1192\n\u010c\3\u010c\5\u010c\u1195\n\u010c\5\u010c\u1197\n\u010c"+
		"\3\u010d\3\u010d\3\u010e\3\u010e\3\u010e\7\u010e\u119e\n\u010e\f\u010e"+
		"\16\u010e\u11a1\13\u010e\3\u010f\3\u010f\3\u010f\5\u010f\u11a6\n\u010f"+
		"\3\u010f\3\u010f\3\u010f\3\u010f\5\u010f\u11ac\n\u010f\5\u010f\u11ae\n"+
		"\u010f\3\u010f\3\u010f\5\u010f\u11b2\n\u010f\3\u010f\3\u010f\3\u010f\3"+
		"\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\5\u010f\u11bd\n\u010f\3"+
		"\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\5\u010f"+
		"\u11c7\n\u010f\3\u010f\3\u010f\3\u010f\5\u010f\u11cc\n\u010f\3\u0110\3"+
		"\u0110\3\u0110\5\u0110\u11d1\n\u0110\3\u0110\3\u0110\3\u0110\5\u0110\u11d6"+
		"\n\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\5\u0110\u11de"+
		"\n\u0110\3\u0111\3\u0111\5\u0111\u11e2\n\u0111\3\u0111\7\u0111\u11e5\n"+
		"\u0111\f\u0111\16\u0111\u11e8\13\u0111\3\u0112\3\u0112\3\u0112\3\u0112"+
		"\3\u0112\3\u0112\5\u0112\u11f0\n\u0112\3\u0113\3\u0113\3\u0113\3\u0113"+
		"\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\5\u0113\u11fc\n\u0113"+
		"\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114"+
		"\3\u0114\3\u0114\3\u0114\5\u0114\u120a\n\u0114\3\u0114\3\u0114\3\u0114"+
		"\3\u0114\3\u0114\3\u0114\3\u0114\5\u0114\u1213\n\u0114\5\u0114\u1215\n"+
		"\u0114\3\u0115\3\u0115\3\u0115\7\u0115\u121a\n\u0115\f\u0115\16\u0115"+
		"\u121d\13\u0115\3\u0116\3\u0116\3\u0116\3\u0116\5\u0116\u1223\n\u0116"+
		"\3\u0117\3\u0117\5\u0117\u1227\n\u0117\3\u0117\3\u0117\3\u0117\3\u0117"+
		"\5\u0117\u122d\n\u0117\3\u0117\3\u0117\3\u0117\3\u0117\7\u0117\u1233\n"+
		"\u0117\f\u0117\16\u0117\u1236\13\u0117\3\u0117\3\u0117\3\u0117\3\u0117"+
		"\5\u0117\u123c\n\u0117\3\u0117\3\u0117\5\u0117\u1240\n\u0117\3\u0117\3"+
		"\u0117\3\u0117\3\u0117\5\u0117\u1246\n\u0117\3\u0117\3\u0117\3\u0117\7"+
		"\u0117\u124b\n\u0117\f\u0117\16\u0117\u124e\13\u0117\5\u0117\u1250\n\u0117"+
		"\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\5\u0118\u1259"+
		"\n\u0118\3\u0118\3\u0118\3\u0118\3\u0118\5\u0118\u125f\n\u0118\3\u0119"+
		"\3\u0119\3\u0119\5\u0119\u1264\n\u0119\3\u011a\3\u011a\3\u011b\3\u011b"+
		"\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b"+
		"\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\7\u011b\u1279\n\u011b"+
		"\f\u011b\16\u011b\u127c\13\u011b\5\u011b\u127e\n\u011b\3\u011c\3\u011c"+
		"\3\u011c\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d"+
		"\3\u011d\3\u011d\3\u011d\5\u011d\u128e\n\u011d\3\u011d\3\u011d\3\u011d"+
		"\5\u011d\u1293\n\u011d\3\u011d\5\u011d\u1296\n\u011d\3\u011d\3\u011d\5"+
		"\u011d\u129a\n\u011d\3\u011d\5\u011d\u129d\n\u011d\3\u011d\3\u011d\3\u011d"+
		"\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d"+
		"\5\u011d\u12ab\n\u011d\3\u011d\3\u011d\3\u011d\3\u011d\5\u011d\u12b1\n"+
		"\u011d\3\u011d\3\u011d\3\u011d\5\u011d\u12b6\n\u011d\3\u011d\5\u011d\u12b9"+
		"\n\u011d\5\u011d\u12bb\n\u011d\3\u011e\3\u011e\5\u011e\u12bf\n\u011e\3"+
		"\u011e\3\u011e\3\u011e\5\u011e\u12c4\n\u011e\5\u011e\u12c6\n\u011e\3\u011f"+
		"\3\u011f\3\u011f\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120"+
		"\5\u0120\u12d2\n\u0120\3\u0121\3\u0121\7\u0121\u12d6\n\u0121\f\u0121\16"+
		"\u0121\u12d9\13\u0121\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122"+
		"\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122"+
		"\3\u0122\3\u0122\3\u0122\3\u0122\5\u0122\u12ee\n\u0122\3\u0122\3\u0122"+
		"\5\u0122\u12f2\n\u0122\5\u0122\u12f4\n\u0122\3\u0123\3\u0123\3\u0123\3"+
		"\u0123\3\u0123\3\u0123\5\u0123\u12fc\n\u0123\3\u0124\3\u0124\5\u0124\u1300"+
		"\n\u0124\3\u0124\3\u0124\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\5\u0125"+
		"\u1309\n\u0125\3\u0126\3\u0126\3\u0126\3\u0126\3\u0127\3\u0127\3\u0127"+
		"\3\u0127\5\u0127\u1313\n\u0127\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128"+
		"\5\u0128\u131a\n\u0128\3\u0128\5\u0128\u131d\n\u0128\3\u0128\3\u0128\5"+
		"\u0128\u1321\n\u0128\3\u0128\5\u0128\u1324\n\u0128\3\u0128\5\u0128\u1327"+
		"\n\u0128\3\u0128\3\u0128\5\u0128\u132b\n\u0128\3\u0128\5\u0128\u132e\n"+
		"\u0128\3\u0128\3\u0128\5\u0128\u1332\n\u0128\3\u0128\5\u0128\u1335\n\u0128"+
		"\3\u0128\3\u0128\3\u0128\5\u0128\u133a\n\u0128\3\u0128\5\u0128\u133d\n"+
		"\u0128\3\u0128\3\u0128\3\u0128\5\u0128\u1342\n\u0128\3\u0128\5\u0128\u1345"+
		"\n\u0128\3\u0128\3\u0128\3\u0128\3\u0128\5\u0128\u134b\n\u0128\3\u0128"+
		"\3\u0128\5\u0128\u134f\n\u0128\3\u0128\3\u0128\3\u0128\3\u0128\5\u0128"+
		"\u1355\n\u0128\3\u0128\5\u0128\u1358\n\u0128\3\u0128\3\u0128\3\u0128\3"+
		"\u0128\3\u0128\3\u0128\3\u0128\5\u0128\u1361\n\u0128\5\u0128\u1363\n\u0128"+
		"\3\u0128\3\u0128\3\u0128\3\u0128\5\u0128\u1369\n\u0128\3\u0128\3\u0128"+
		"\5\u0128\u136d\n\u0128\3\u0128\5\u0128\u1370\n\u0128\3\u0128\5\u0128\u1373"+
		"\n\u0128\3\u0128\3\u0128\5\u0128\u1377\n\u0128\3\u0128\3\u0128\3\u0128"+
		"\3\u0128\5\u0128\u137d\n\u0128\3\u0128\5\u0128\u1380\n\u0128\3\u0128\5"+
		"\u0128\u1383\n\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3"+
		"\u0128\3\u0128\5\u0128\u138d\n\u0128\3\u0128\3\u0128\5\u0128\u1391\n\u0128"+
		"\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\7\u0128\u1398\n\u0128\f\u0128"+
		"\16\u0128\u139b\13\u0128\5\u0128\u139d\n\u0128\3\u0128\3\u0128\3\u0128"+
		"\5\u0128\u13a2\n\u0128\3\u0128\5\u0128\u13a5\n\u0128\3\u0128\5\u0128\u13a8"+
		"\n\u0128\3\u0128\3\u0128\5\u0128\u13ac\n\u0128\3\u0128\5\u0128\u13af\n"+
		"\u0128\3\u0128\3\u0128\3\u0128\5\u0128\u13b4\n\u0128\3\u0128\3\u0128\5"+
		"\u0128\u13b8\n\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\5"+
		"\u0128\u13c0\n\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3"+
		"\u0128\3\u0128\3\u0128\3\u0128\3\u0128\5\u0128\u13cd\n\u0128\3\u0128\3"+
		"\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128"+
		"\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\5\u0128\u13df\n\u0128"+
		"\3\u0128\3\u0128\3\u0128\5\u0128\u13e4\n\u0128\3\u0128\3\u0128\3\u0128"+
		"\5\u0128\u13e9\n\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128"+
		"\5\u0128\u13f1\n\u0128\3\u0129\3\u0129\3\u0129\3\u0129\5\u0129\u13f7\n"+
		"\u0129\5\u0129\u13f9\n\u0129\3\u012a\3\u012a\5\u012a\u13fd\n\u012a\3\u012a"+
		"\5\u012a\u1400\n\u012a\3\u012b\3\u012b\3\u012c\3\u012c\3\u012c\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\5\u012d\u140e\n\u012d"+
		"\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\5\u012e"+
		"\u1418\n\u012e\3\u012e\3\u012e\5\u012e\u141c\n\u012e\3\u012e\3\u012e\3"+
		"\u012e\3\u012e\7\u012e\u1422\n\u012e\f\u012e\16\u012e\u1425\13\u012e\5"+
		"\u012e\u1427\n\u012e\3\u012e\3\u012e\5\u012e\u142b\n\u012e\3\u012e\3\u012e"+
		"\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\5\u012e\u1435\n\u012e"+
		"\3\u012f\3\u012f\5\u012f\u1439\n\u012f\3\u0130\3\u0130\3\u0130\7\u0130"+
		"\u143e\n\u0130\f\u0130\16\u0130\u1441\13\u0130\3\u0131\3\u0131\5\u0131"+
		"\u1445\n\u0131\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\5\u0132"+
		"\u144d\n\u0132\3\u0133\3\u0133\3\u0133\5\u0133\u1452\n\u0133\3\u0133\3"+
		"\u0133\3\u0134\3\u0134\5\u0134\u1458\n\u0134\3\u0135\3\u0135\3\u0135\7"+
		"\u0135\u145d\n\u0135\f\u0135\16\u0135\u1460\13\u0135\3\u0136\3\u0136\5"+
		"\u0136\u1464\n\u0136\3\u0136\3\u0136\3\u0136\3\u0136\5\u0136\u146a\n\u0136"+
		"\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\5\u0136\u1471\n\u0136\3\u0137"+
		"\3\u0137\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\5\u0138\u147b"+
		"\n\u0138\5\u0138\u147d\n\u0138\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139"+
		"\3\u0139\5\u0139\u1485\n\u0139\3\u013a\3\u013a\3\u013a\5\u013a\u148a\n"+
		"\u013a\3\u013a\3\u013a\5\u013a\u148e\n\u013a\3\u013a\5\u013a\u1491\n\u013a"+
		"\3\u013b\3\u013b\3\u013b\7\u013b\u1496\n\u013b\f\u013b\16\u013b\u1499"+
		"\13\u013b\3\u013c\3\u013c\5\u013c\u149d\n\u013c\3\u013c\3\u013c\5\u013c"+
		"\u14a1\n\u013c\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013e\3\u013e"+
		"\3\u013e\3\u013e\5\u013e\u14ac\n\u013e\3\u013f\3\u013f\3\u013f\3\u013f"+
		"\3\u013f\3\u013f\5\u013f\u14b4\n\u013f\3\u013f\3\u013f\5\u013f\u14b8\n"+
		"\u013f\3\u013f\5\u013f\u14bb\n\u013f\3\u013f\5\u013f\u14be\n\u013f\3\u0140"+
		"\3\u0140\5\u0140\u14c2\n\u0140\3\u0140\3\u0140\5\u0140\u14c6\n\u0140\3"+
		"\u0140\7\u0140\u14c9\n\u0140\f\u0140\16\u0140\u14cc\13\u0140\3\u0141\3"+
		"\u0141\3\u0141\5\u0141\u14d1\n\u0141\3\u0142\3\u0142\5\u0142\u14d5\n\u0142"+
		"\3\u0142\3\u0142\3\u0143\3\u0143\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144"+
		"\5\u0144\u14e0\n\u0144\3\u0144\5\u0144\u14e3\n\u0144\3\u0144\5\u0144\u14e6"+
		"\n\u0144\3\u0144\5\u0144\u14e9\n\u0144\3\u0145\3\u0145\3\u0145\3\u0145"+
		"\3\u0145\3\u0145\5\u0145\u14f1\n\u0145\3\u0146\3\u0146\5\u0146\u14f5\n"+
		"\u0146\3\u0146\7\u0146\u14f8\n\u0146\f\u0146\16\u0146\u14fb\13\u0146\3"+
		"\u0147\3\u0147\3\u0147\3\u0147\3\u0147\5\u0147\u1502\n\u0147\3\u0148\3"+
		"\u0148\3\u0148\3\u0148\3\u0148\3\u0148\5\u0148\u150a\n\u0148\3\u0149\3"+
		"\u0149\3\u0149\3\u0149\5\u0149\u1510\n\u0149\3\u014a\3\u014a\3\u014a\3"+
		"\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\5\u014a"+
		"\u151d\n\u014a\3\u014a\3\u014a\3\u014b\3\u014b\3\u014b\3\u014b\3\u014b"+
		"\3\u014b\5\u014b\u1527\n\u014b\3\u014b\3\u014b\3\u014b\3\u014b\5\u014b"+
		"\u152d\n\u014b\3\u014c\3\u014c\3\u014c\3\u014d\3\u014d\3\u014d\3\u014e"+
		"\3\u014e\3\u014f\3\u014f\3\u014f\3\u014f\5\u014f\u153b\n\u014f\3\u014f"+
		"\5\u014f\u153e\n\u014f\3\u014f\3\u014f\5\u014f\u1542\n\u014f\3\u014f\3"+
		"\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\7\u014f"+
		"\u154d\n\u014f\f\u014f\16\u014f\u1550\13\u014f\3\u0150\3\u0150\3\u0150"+
		"\3\u0150\3\u0150\3\u0150\5\u0150\u1558\n\u0150\3\u0150\3\u0150\3\u0150"+
		"\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\7\u0150\u1564"+
		"\n\u0150\f\u0150\16\u0150\u1567\13\u0150\3\u0151\3\u0151\3\u0152\3\u0152"+
		"\5\u0152\u156d\n\u0152\3\u0152\3\u0152\3\u0152\3\u0152\5\u0152\u1573\n"+
		"\u0152\3\u0152\3\u0152\3\u0152\3\u0152\5\u0152\u1579\n\u0152\3\u0153\3"+
		"\u0153\3\u0153\3\u0153\3\u0153\3\u0153\5\u0153\u1581\n\u0153\3\u0153\3"+
		"\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\5\u0153"+
		"\u158c\n\u0153\3\u0153\3\u0153\5\u0153\u1590\n\u0153\3\u0154\3\u0154\3"+
		"\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154"+
		"\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154"+
		"\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\7\u0154\u15ad"+
		"\n\u0154\f\u0154\16\u0154\u15b0\13\u0154\3\u0155\3\u0155\3\u0155\3\u0155"+
		"\5\u0155\u15b6\n\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155"+
		"\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155"+
		"\5\u0155\u15c7\n\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\5\u0155"+
		"\u15ce\n\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155"+
		"\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\5\u0155\u15dc\n\u0155\3\u0155"+
		"\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155"+
		"\5\u0155\u15e8\n\u0155\3\u0155\3\u0155\3\u0155\3\u0155\5\u0155\u15ee\n"+
		"\u0155\3\u0155\3\u0155\3\u0155\6\u0155\u15f3\n\u0155\r\u0155\16\u0155"+
		"\u15f4\3\u0155\5\u0155\u15f8\n\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3"+
		"\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155"+
		"\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155"+
		"\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155"+
		"\3\u0155\5\u0155\u161a\n\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155"+
		"\3\u0155\7\u0155\u1622\n\u0155\f\u0155\16\u0155\u1625\13\u0155\3\u0156"+
		"\3\u0156\3\u0156\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\5\u0157"+
		"\u1630\n\u0157\3\u0158\3\u0158\3\u0158\5\u0158\u1635\n\u0158\3\u0158\3"+
		"\u0158\3\u0158\3\u0158\5\u0158\u163b\n\u0158\3\u0158\3\u0158\3\u0158\3"+
		"\u0158\3\u0158\3\u0158\5\u0158\u1643\n\u0158\3\u0158\3\u0158\3\u0158\3"+
		"\u0158\3\u0158\5\u0158\u164a\n\u0158\3\u0158\3\u0158\3\u0158\3\u0158\5"+
		"\u0158\u1650\n\u0158\3\u0158\3\u0158\3\u0158\5\u0158\u1655\n\u0158\3\u0158"+
		"\3\u0158\3\u0158\3\u0158\5\u0158\u165b\n\u0158\3\u0158\3\u0158\3\u0158"+
		"\5\u0158\u1660\n\u0158\3\u0158\3\u0158\3\u0158\5\u0158\u1665\n\u0158\3"+
		"\u0158\3\u0158\3\u0158\3\u0158\5\u0158\u166b\n\u0158\3\u0158\3\u0158\3"+
		"\u0158\5\u0158\u1670\n\u0158\3\u0158\3\u0158\3\u0158\3\u0158\5\u0158\u1676"+
		"\n\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\5\u0158\u167e"+
		"\n\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\5\u0158\u1686"+
		"\n\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\5\u0158\u168e"+
		"\n\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\5\u0158\u1696"+
		"\n\u0158\3\u0158\3\u0158\3\u0158\5\u0158\u169b\n\u0158\3\u0158\3\u0158"+
		"\3\u0158\3\u0158\5\u0158\u16a1\n\u0158\3\u0158\3\u0158\3\u0158\5\u0158"+
		"\u16a6\n\u0158\3\u0158\3\u0158\5\u0158\u16aa\n\u0158\3\u0158\3\u0158\5"+
		"\u0158\u16ae\n\u0158\3\u0158\3\u0158\3\u0158\5\u0158\u16b3\n\u0158\5\u0158"+
		"\u16b5\n\u0158\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u015a\3\u015a"+
		"\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a"+
		"\3\u015a\5\u015a\u16c8\n\u015a\3\u015a\3\u015a\5\u015a\u16cc\n\u015a\3"+
		"\u015a\3\u015a\3\u015a\3\u015a\3\u015a\5\u015a\u16d3\n\u015a\3\u015a\3"+
		"\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a"+
		"\5\u015a\u16df\n\u015a\3\u015a\5\u015a\u16e2\n\u015a\3\u015a\3\u015a\5"+
		"\u015a\u16e6\n\u015a\3\u015b\3\u015b\3\u015b\5\u015b\u16eb\n\u015b\3\u015c"+
		"\3\u015c\3\u015c\5\u015c\u16f0\n\u015c\3\u015c\3\u015c\5\u015c\u16f4\n"+
		"\u015c\3\u015d\3\u015d\3\u015d\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e"+
		"\5\u015e\u16fe\n\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e"+
		"\3\u015e\5\u015e\u1707\n\u015e\5\u015e\u1709\n\u015e\3\u015f\5\u015f\u170c"+
		"\n\u015f\3\u015f\3\u015f\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160\5\u0160"+
		"\u1715\n\u0160\3\u0161\3\u0161\3\u0161\7\u0161\u171a\n\u0161\f\u0161\16"+
		"\u0161\u171d\13\u0161\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162"+
		"\3\u0162\3\u0162\3\u0162\3\u0162\5\u0162\u1729\n\u0162\3\u0162\3\u0162"+
		"\3\u0162\5\u0162\u172e\n\u0162\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163"+
		"\5\u0163\u1735\n\u0163\3\u0163\3\u0163\3\u0163\3\u0163\5\u0163\u173b\n"+
		"\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163"+
		"\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163"+
		"\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\6\u0163\u1753\n\u0163\r\u0163"+
		"\16\u0163\u1754\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163"+
		"\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163"+
		"\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163"+
		"\3\u0163\3\u0163\3\u0163\3\u0163\5\u0163\u1774\n\u0163\3\u0163\3\u0163"+
		"\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163"+
		"\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\5\u0163\u1788"+
		"\n\u0163\3\u0163\3\u0163\3\u0163\3\u0163\5\u0163\u178e\n\u0163\3\u0163"+
		"\3\u0163\5\u0163\u1792\n\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163"+
		"\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163"+
		"\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163"+
		"\3\u0163\3\u0163\5\u0163\u17ad\n\u0163\3\u0163\3\u0163\3\u0163\3\u0163"+
		"\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\5\u0163\u17b9\n\u0163"+
		"\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163"+
		"\3\u0163\3\u0163\5\u0163\u17c6\n\u0163\3\u0163\3\u0163\5\u0163\u17ca\n"+
		"\u0163\3\u0163\3\u0163\5\u0163\u17ce\n\u0163\3\u0163\3\u0163\3\u0163\3"+
		"\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163"+
		"\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163"+
		"\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\5\u0163\u17ea\n\u0163\3\u0163"+
		"\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163"+
		"\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163"+
		"\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163"+
		"\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163"+
		"\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163"+
		"\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\5\u0163"+
		"\u1822\n\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163"+
		"\3\u0163\5\u0163\u182c\n\u0163\3\u0163\3\u0163\5\u0163\u1830\n\u0163\3"+
		"\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163"+
		"\3\u0163\5\u0163\u183c\n\u0163\3\u0163\3\u0163\3\u0163\5\u0163\u1841\n"+
		"\u0163\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164"+
		"\3\u0164\3\u0164\3\u0164\5\u0164\u184e\n\u0164\3\u0164\3\u0164\3\u0164"+
		"\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164"+
		"\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\5\u0164\u1862\n\u0164"+
		"\3\u0165\3\u0165\5\u0165\u1866\n\u0165\3\u0165\3\u0165\3\u0166\3\u0166"+
		"\3\u0166\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167"+
		"\7\u0167\u1875\n\u0167\f\u0167\16\u0167\u1878\13\u0167\5\u0167\u187a\n"+
		"\u0167\3\u0168\3\u0168\3\u0168\5\u0168\u187f\n\u0168\3\u0168\5\u0168\u1882"+
		"\n\u0168\3\u0169\3\u0169\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a\5\u016a"+
		"\u188b\n\u016a\3\u016a\3\u016a\5\u016a\u188f\n\u016a\3\u016a\3\u016a\3"+
		"\u016a\3\u016a\5\u016a\u1895\n\u016a\3\u016a\3\u016a\3\u016a\3\u016a\5"+
		"\u016a\u189b\n\u016a\3\u016a\3\u016a\5\u016a\u189f\n\u016a\3\u016a\3\u016a"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\5\u016b\u18aa"+
		"\n\u016b\3\u016b\3\u016b\3\u016b\3\u016b\5\u016b\u18b0\n\u016b\5\u016b"+
		"\u18b2\n\u016b\3\u016b\3\u016b\3\u016c\3\u016c\3\u016c\5\u016c\u18b9\n"+
		"\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\5\u016c\u18c0\n\u016c\3"+
		"\u016c\3\u016c\5\u016c\u18c4\n\u016c\3\u016d\3\u016d\3\u016d\7\u016d\u18c9"+
		"\n\u016d\f\u016d\16\u016d\u18cc\13\u016d\3\u016e\3\u016e\5\u016e\u18d0"+
		"\n\u016e\3\u016f\3\u016f\3\u016f\5\u016f\u18d5\n\u016f\3\u016f\5\u016f"+
		"\u18d8\n\u016f\3\u0170\3\u0170\3\u0170\5\u0170\u18dd\n\u0170\3\u0171\3"+
		"\u0171\5\u0171\u18e1\n\u0171\3\u0171\3\u0171\5\u0171\u18e5\n\u0171\3\u0172"+
		"\3\u0172\3\u0172\5\u0172\u18ea\n\u0172\3\u0172\3\u0172\3\u0172\5\u0172"+
		"\u18ef\n\u0172\5\u0172\u18f1\n\u0172\3\u0172\3\u0172\5\u0172\u18f5\n\u0172"+
		"\3\u0173\3\u0173\3\u0173\3\u0174\3\u0174\3\u0174\3\u0175\3\u0175\3\u0175"+
		"\3\u0176\3\u0176\5\u0176\u1902\n\u0176\3\u0176\3\u0176\5\u0176\u1906\n"+
		"\u0176\3\u0176\5\u0176\u1909\n\u0176\3\u0176\3\u0176\5\u0176\u190d\n\u0176"+
		"\3\u0176\3\u0176\5\u0176\u1911\n\u0176\3\u0176\3\u0176\5\u0176\u1915\n"+
		"\u0176\3\u0176\3\u0176\3\u0176\5\u0176\u191a\n\u0176\3\u0176\3\u0176\5"+
		"\u0176\u191e\n\u0176\3\u0176\3\u0176\5\u0176\u1922\n\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\5\u0176\u192b\n\u0176\5\u0176"+
		"\u192d\n\u0176\3\u0177\3\u0177\3\u0177\7\u0177\u1932\n\u0177\f\u0177\16"+
		"\u0177\u1935\13\u0177\3\u0178\3\u0178\3\u0178\5\u0178\u193a\n\u0178\3"+
		"\u0179\3\u0179\3\u017a\3\u017a\3\u017b\3\u017b\5\u017b\u1942\n\u017b\3"+
		"\u017c\3\u017c\3\u017d\3\u017d\3\u017d\3\u017d\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017f\3\u017f\3\u017f\3\u017f\3\u0180\3\u0180\3\u0180\7\u0180"+
		"\u1955\n\u0180\f\u0180\16\u0180\u1958\13\u0180\3\u0181\3\u0181\5\u0181"+
		"\u195c\n\u0181\3\u0182\3\u0182\3\u0182\7\u0182\u1961\n\u0182\f\u0182\16"+
		"\u0182\u1964\13\u0182\3\u0183\3\u0183\3\u0184\3\u0184\3\u0184\3\u0184"+
		"\3\u0184\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185"+
		"\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185\5\u0185\u197a\n\u0185\3\u0186"+
		"\3\u0186\3\u0186\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0188\3\u0188"+
		"\3\u0188\3\u0188\3\u0188\3\u0188\5\u0188\u198a\n\u0188\3\u0189\3\u0189"+
		"\3\u0189\3\u018a\3\u018a\3\u018a\6\u018a\u1992\n\u018a\r\u018a\16\u018a"+
		"\u1993\3\u018b\3\u018b\5\u018b\u1998\n\u018b\3\u018b\3\u018b\3\u018b\6"+
		"\u018b\u199d\n\u018b\r\u018b\16\u018b\u199e\3\u018b\5\u018b\u19a2\n\u018b"+
		"\3\u018b\3\u018b\3\u018b\3\u018c\3\u018c\3\u018c\3\u018d\3\u018d\3\u018d"+
		"\5\u018d\u19ad\n\u018d\3\u018e\3\u018e\3\u018f\3\u018f\3\u018f\3\u0190"+
		"\3\u0190\5\u0190\u19b6\n\u0190\3\u0190\5\u0190\u19b9\n\u0190\3\u0190\3"+
		"\u0190\3\u0191\3\u0191\3\u0191\5\u0191\u19c0\n\u0191\3\u0192\3\u0192\3"+
		"\u0192\5\u0192\u19c5\n\u0192\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193\3"+
		"\u0194\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194\3\u0195\3\u0195"+
		"\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195\3\u0196\3\u0196\3\u0196\6\u0196"+
		"\u19dd\n\u0196\r\u0196\16\u0196\u19de\3\u0197\3\u0197\3\u0197\3\u0197"+
		"\5\u0197\u19e5\n\u0197\3\u0198\3\u0198\3\u0198\3\u0198\5\u0198\u19eb\n"+
		"\u0198\3\u0198\3\u0198\5\u0198\u19ef\n\u0198\3\u0199\3\u0199\3\u0199\3"+
		"\u0199\3\u0199\3\u0199\3\u019a\3\u019a\5\u019a\u19f9\n\u019a\3\u019b\3"+
		"\u019b\5\u019b\u19fd\n\u019b\3\u019b\3\u019b\3\u019c\3\u019c\3\u019c\3"+
		"\u019c\3\u019c\3\u019c\3\u019c\7\u019c\u1a08\n\u019c\f\u019c\16\u019c"+
		"\u1a0b\13\u019c\3\u019c\3\u019c\3\u019d\3\u019d\3\u019d\3\u019d\3\u019d"+
		"\3\u019d\3\u019d\5\u019d\u1a16\n\u019d\3\u019e\3\u019e\3\u019e\3\u019e"+
		"\3\u019e\3\u019e\3\u019f\3\u019f\3\u019f\3\u01a0\3\u01a0\3\u01a0\3\u01a1"+
		"\3\u01a1\3\u01a1\3\u01a1\5\u01a1\u1a28\n\u01a1\3\u01a1\3\u01a1\3\u01a1"+
		"\3\u01a1\7\u01a1\u1a2e\n\u01a1\f\u01a1\16\u01a1\u1a31\13\u01a1\3\u01a1"+
		"\3\u01a1\3\u01a1\3\u01a1\3\u01a1\7\u01a1\u1a38\n\u01a1\f\u01a1\16\u01a1"+
		"\u1a3b\13\u01a1\5\u01a1\u1a3d\n\u01a1\3\u01a2\3\u01a2\3\u01a2\5\u01a2"+
		"\u1a42\n\u01a2\3\u01a3\3\u01a3\5\u01a3\u1a46\n\u01a3\3\u01a3\3\u01a3\3"+
		"\u01a3\3\u01a4\3\u01a4\5\u01a4\u1a4d\n\u01a4\3\u01a4\3\u01a4\3\u01a4\5"+
		"\u01a4\u1a52\n\u01a4\3\u01a5\3\u01a5\3\u01a6\3\u01a6\3\u01a6\5\u01a6\u1a59"+
		"\n\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\7\u01a6\u1a5f\n\u01a6\f\u01a6"+
		"\16\u01a6\u1a62\13\u01a6\5\u01a6\u1a64\n\u01a6\3\u01a7\3\u01a7\3\u01a7"+
		"\5\u01a7\u1a69\n\u01a7\3\u01a7\5\u01a7\u1a6c\n\u01a7\3\u01a7\3\u01a7\3"+
		"\u01a7\3\u01a7\7\u01a7\u1a72\n\u01a7\f\u01a7\16\u01a7\u1a75\13\u01a7\5"+
		"\u01a7\u1a77\n\u01a7\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a9\3\u01a9\3"+
		"\u01a9\3\u01aa\3\u01aa\3\u01aa\3\u01ab\3\u01ab\5\u01ab\u1a85\n\u01ab\3"+
		"\u01ab\5\u01ab\u1a88\n\u01ab\3\u01ab\3\u01ab\3\u01ab\3\u01ab\3\u01ac\3"+
		"\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\5\u01ac\u1a95\n\u01ac\3"+
		"\u01ac\3\u01ac\5\u01ac\u1a99\n\u01ac\5\u01ac\u1a9b\n\u01ac\3\u01ad\3\u01ad"+
		"\3\u01ad\5\u01ad\u1aa0\n\u01ad\3\u01ae\3\u01ae\3\u01ae\5\u01ae\u1aa5\n"+
		"\u01ae\3\u01af\3\u01af\3\u01af\3\u01b0\5\u01b0\u1aab\n\u01b0\3\u01b0\3"+
		"\u01b0\3\u01b1\3\u01b1\5\u01b1\u1ab1\n\u01b1\3\u01b1\3\u01b1\7\u01b1\u1ab5"+
		"\n\u01b1\f\u01b1\16\u01b1\u1ab8\13\u01b1\3\u01b1\3\u01b1\5\u01b1\u1abc"+
		"\n\u01b1\3\u01b1\5\u01b1\u1abf\n\u01b1\3\u01b1\3\u01b1\7\u01b1\u1ac3\n"+
		"\u01b1\f\u01b1\16\u01b1\u1ac6\13\u01b1\3\u01b1\3\u01b1\5\u01b1\u1aca\n"+
		"\u01b1\3\u01b1\5\u01b1\u1acd\n\u01b1\3\u01b1\3\u01b1\7\u01b1\u1ad1\n\u01b1"+
		"\f\u01b1\16\u01b1\u1ad4\13\u01b1\3\u01b1\5\u01b1\u1ad7\n\u01b1\3\u01b1"+
		"\3\u01b1\3\u01b1\3\u01b1\5\u01b1\u1add\n\u01b1\5\u01b1\u1adf\n\u01b1\3"+
		"\u01b1\5\u01b1\u1ae2\n\u01b1\3\u01b1\3\u01b1\7\u01b1\u1ae6\n\u01b1\f\u01b1"+
		"\16\u01b1\u1ae9\13\u01b1\3\u01b1\3\u01b1\3\u01b1\5\u01b1\u1aee\n\u01b1"+
		"\3\u01b1\3\u01b1\3\u01b1\3\u01b1\3\u01b1\3\u01b1\5\u01b1\u1af6\n\u01b1"+
		"\5\u01b1\u1af8\n\u01b1\5\u01b1\u1afa\n\u01b1\3\u01b2\3\u01b2\5\u01b2\u1afe"+
		"\n\u01b2\3\u01b3\3\u01b3\7\u01b3\u1b02\n\u01b3\f\u01b3\16\u01b3\u1b05"+
		"\13\u01b3\3\u01b3\3\u01b3\5\u01b3\u1b09\n\u01b3\3\u01b3\3\u01b3\5\u01b3"+
		"\u1b0d\n\u01b3\3\u01b3\3\u01b3\3\u01b3\5\u01b3\u1b12\n\u01b3\3\u01b3\3"+
		"\u01b3\7\u01b3\u1b16\n\u01b3\f\u01b3\16\u01b3\u1b19\13\u01b3\3\u01b3\3"+
		"\u01b3\7\u01b3\u1b1d\n\u01b3\f\u01b3\16\u01b3\u1b20\13\u01b3\5\u01b3\u1b22"+
		"\n\u01b3\5\u01b3\u1b24\n\u01b3\3\u01b4\5\u01b4\u1b27\n\u01b4\3\u01b4\3"+
		"\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4\5\u01b4\u1b31\n"+
		"\u01b4\3\u01b4\3\u01b4\5\u01b4\u1b35\n\u01b4\3\u01b4\3\u01b4\3\u01b4\3"+
		"\u01b4\5\u01b4\u1b3b\n\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4\5"+
		"\u01b4\u1b42\n\u01b4\3\u01b4\3\u01b4\3\u01b4\5\u01b4\u1b47\n\u01b4\3\u01b4"+
		"\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4"+
		"\3\u01b4\3\u01b4\5\u01b4\u1b55\n\u01b4\3\u01b4\3\u01b4\3\u01b4\5\u01b4"+
		"\u1b5a\n\u01b4\3\u01b5\3\u01b5\3\u01b6\3\u01b6\3\u01b7\3\u01b7\5\u01b7"+
		"\u1b62\n\u01b7\3\u01b7\3\u01b7\3\u01b7\5\u01b7\u1b67\n\u01b7\3\u01b7\3"+
		"\u01b7\5\u01b7\u1b6b\n\u01b7\3\u01b7\5\u01b7\u1b6e\n\u01b7\3\u01b8\3\u01b8"+
		"\3\u01b8\5\u01b8\u1b73\n\u01b8\3\u01b8\3\u01b8\5\u01b8\u1b77\n\u01b8\3"+
		"\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\5\u01b8\u1b7f\n\u01b8\3"+
		"\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\5\u01b8\u1b87\n\u01b8\5"+
		"\u01b8\u1b89\n\u01b8\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\5\u01b9\u1b90"+
		"\n\u01b9\3\u01ba\3\u01ba\3\u01ba\3\u01ba\7\u01ba\u1b96\n\u01ba\f\u01ba"+
		"\16\u01ba\u1b99\13\u01ba\3\u01ba\3\u01ba\3\u01bb\3\u01bb\5\u01bb\u1b9f"+
		"\n\u01bb\3\u01bb\5\u01bb\u1ba2\n\u01bb\3\u01bc\3\u01bc\3\u01bc\3\u01bc"+
		"\7\u01bc\u1ba8\n\u01bc\f\u01bc\16\u01bc\u1bab\13\u01bc\3\u01bc\3\u01bc"+
		"\3\u01bd\3\u01bd\3\u01bd\5\u01bd\u1bb2\n\u01bd\5\u01bd\u1bb4\n\u01bd\3"+
		"\u01be\3\u01be\3\u01be\3\u01be\5\u01be\u1bba\n\u01be\3\u01bf\3\u01bf\3"+
		"\u01c0\3\u01c0\5\u01c0\u1bc0\n\u01c0\3\u01c1\3\u01c1\5\u01c1\u1bc4\n\u01c1"+
		"\3\u01c1\3\u01c1\3\u01c1\3\u01c1\3\u01c1\5\u01c1\u1bcb\n\u01c1\3\u01c2"+
		"\3\u01c2\3\u01c3\3\u01c3\3\u01c3\3\u01c4\3\u01c4\3\u01c4\3\u01c4\5\u01c4"+
		"\u1bd6\n\u01c4\3\u01c5\3\u01c5\3\u01c6\3\u01c6\3\u01c6\3\u01c7\3\u01c7"+
		"\5\u01c7\u1bdf\n\u01c7\3\u01c7\5\u01c7\u1be2\n\u01c7\3\u01c7\3\u01c7\3"+
		"\u01c7\5\u01c7\u1be7\n\u01c7\5\u01c7\u1be9\n\u01c7\3\u01c7\5\u01c7\u1bec"+
		"\n\u01c7\3\u01c7\5\u01c7\u1bef\n\u01c7\3\u01c7\3\u01c7\5\u01c7\u1bf3\n"+
		"\u01c7\3\u01c7\5\u01c7\u1bf6\n\u01c7\3\u01c7\3\u01c7\5\u01c7\u1bfa\n\u01c7"+
		"\3\u01c7\3\u01c7\3\u01c7\5\u01c7\u1bff\n\u01c7\3\u01c7\5\u01c7\u1c02\n"+
		"\u01c7\3\u01c7\3\u01c7\5\u01c7\u1c06\n\u01c7\3\u01c7\5\u01c7\u1c09\n\u01c7"+
		"\3\u01c7\3\u01c7\5\u01c7\u1c0d\n\u01c7\3\u01c7\3\u01c7\3\u01c7\5\u01c7"+
		"\u1c12\n\u01c7\3\u01c7\3\u01c7\5\u01c7\u1c16\n\u01c7\3\u01c7\3\u01c7\3"+
		"\u01c7\3\u01c7\3\u01c7\3\u01c7\3\u01c7\3\u01c7\3\u01c7\3\u01c7\5\u01c7"+
		"\u1c22\n\u01c7\3\u01c7\3\u01c7\5\u01c7\u1c26\n\u01c7\3\u01c7\3\u01c7\3"+
		"\u01c7\3\u01c7\5\u01c7\u1c2c\n\u01c7\3\u01c7\5\u01c7\u1c2f\n\u01c7\3\u01c7"+
		"\3\u01c7\3\u01c7\5\u01c7\u1c34\n\u01c7\3\u01c7\3\u01c7\5\u01c7\u1c38\n"+
		"\u01c7\3\u01c7\3\u01c7\5\u01c7\u1c3c\n\u01c7\3\u01c7\3\u01c7\3\u01c7\5"+
		"\u01c7\u1c41\n\u01c7\3\u01c7\3\u01c7\3\u01c7\3\u01c7\3\u01c7\3\u01c7\3"+
		"\u01c7\5\u01c7\u1c4a\n\u01c7\3\u01c7\5\u01c7\u1c4d\n\u01c7\3\u01c7\3\u01c7"+
		"\5\u01c7\u1c51\n\u01c7\3\u01c7\3\u01c7\5\u01c7\u1c55\n\u01c7\3\u01c7\5"+
		"\u01c7\u1c58\n\u01c7\3\u01c7\3\u01c7\5\u01c7\u1c5c\n\u01c7\3\u01c7\3\u01c7"+
		"\5\u01c7\u1c60\n\u01c7\3\u01c7\3\u01c7\3\u01c7\5\u01c7\u1c65\n\u01c7\3"+
		"\u01c7\3\u01c7\3\u01c7\5\u01c7\u1c6a\n\u01c7\3\u01c7\3\u01c7\3\u01c7\3"+
		"\u01c7\5\u01c7\u1c70\n\u01c7\3\u01c8\3\u01c8\3\u01c8\5\u01c8\u1c75\n\u01c8"+
		"\3\u01c9\3\u01c9\3\u01c9\5\u01c9\u1c7a\n\u01c9\5\u01c9\u1c7c\n\u01c9\3"+
		"\u01ca\3\u01ca\3\u01ca\5\u01ca\u1c81\n\u01ca\3\u01ca\3\u01ca\3\u01cb\6"+
		"\u01cb\u1c86\n\u01cb\r\u01cb\16\u01cb\u1c87\3\u01cc\3\u01cc\3\u01cc\3"+
		"\u01cc\3\u01cc\3\u01cc\5\u01cc\u1c90\n\u01cc\3\u01cc\3\u01cc\3\u01cc\3"+
		"\u01cc\5\u01cc\u1c96\n\u01cc\5\u01cc\u1c98\n\u01cc\3\u01cd\3\u01cd\5\u01cd"+
		"\u1c9c\n\u01cd\3\u01cd\3\u01cd\5\u01cd\u1ca0\n\u01cd\3\u01ce\3\u01ce\5"+
		"\u01ce\u1ca4\n\u01ce\3\u01ce\3\u01ce\5\u01ce\u1ca8\n\u01ce\3\u01cf\3\u01cf"+
		"\3\u01cf\3\u01cf\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d1\3\u01d1\3\u01d1"+
		"\3\u01d1\5\u01d1\u1cb6\n\u01d1\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2"+
		"\5\u01d2\u1cbd\n\u01d2\3\u01d3\3\u01d3\5\u01d3\u1cc1\n\u01d3\3\u01d3\7"+
		"\u01d3\u1cc4\n\u01d3\f\u01d3\16\u01d3\u1cc7\13\u01d3\3\u01d4\6\u01d4\u1cca"+
		"\n\u01d4\r\u01d4\16\u01d4\u1ccb\3\u01d5\3\u01d5\5\u01d5\u1cd0\n\u01d5"+
		"\3\u01d5\3\u01d5\3\u01d5\3\u01d5\5\u01d5\u1cd6\n\u01d5\3\u01d5\3\u01d5"+
		"\5\u01d5\u1cda\n\u01d5\3\u01d5\3\u01d5\5\u01d5\u1cde\n\u01d5\3\u01d5\3"+
		"\u01d5\3\u01d5\5\u01d5\u1ce3\n\u01d5\3\u01d5\3\u01d5\3\u01d5\5\u01d5\u1ce8"+
		"\n\u01d5\3\u01d5\3\u01d5\3\u01d5\5\u01d5\u1ced\n\u01d5\3\u01d5\3\u01d5"+
		"\3\u01d5\5\u01d5\u1cf2\n\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\5\u01d5"+
		"\u1cf8\n\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\5\u01d5\u1cfe\n\u01d5\3"+
		"\u01d5\3\u01d5\3\u01d5\5\u01d5\u1d03\n\u01d5\3\u01d5\3\u01d5\3\u01d5\5"+
		"\u01d5\u1d08\n\u01d5\3\u01d5\3\u01d5\3\u01d5\5\u01d5\u1d0d\n\u01d5\3\u01d5"+
		"\3\u01d5\3\u01d5\5\u01d5\u1d12\n\u01d5\3\u01d5\3\u01d5\3\u01d5\5\u01d5"+
		"\u1d17\n\u01d5\3\u01d5\3\u01d5\3\u01d5\5\u01d5\u1d1c\n\u01d5\3\u01d5\3"+
		"\u01d5\3\u01d5\5\u01d5\u1d21\n\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3"+
		"\u01d5\3\u01d5\3\u01d5\3\u01d5\5\u01d5\u1d2b\n\u01d5\3\u01d5\3\u01d5\3"+
		"\u01d5\3\u01d5\5\u01d5\u1d31\n\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\5"+
		"\u01d5\u1d37\n\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\5\u01d5\u1d3d\n\u01d5"+
		"\3\u01d5\5\u01d5\u1d40\n\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5"+
		"\5\u01d5\u1d47\n\u01d5\3\u01d5\3\u01d5\3\u01d5\5\u01d5\u1d4c\n\u01d5\3"+
		"\u01d5\5\u01d5\u1d4f\n\u01d5\3\u01d6\3\u01d6\5\u01d6\u1d53\n\u01d6\3\u01d7"+
		"\5\u01d7\u1d56\n\u01d7\3\u01d7\3\u01d7\5\u01d7\u1d5a\n\u01d7\3\u01d7\3"+
		"\u01d7\3\u01d8\5\u01d8\u1d5f\n\u01d8\3\u01d8\3\u01d8\5\u01d8\u1d63\n\u01d8"+
		"\3\u01d8\3\u01d8\3\u01d9\5\u01d9\u1d68\n\u01d9\3\u01d9\3\u01d9\5\u01d9"+
		"\u1d6c\n\u01d9\3\u01d9\3\u01d9\3\u01da\3\u01da\3\u01da\3\u01da\3\u01da"+
		"\5\u01da\u1d75\n\u01da\3\u01da\5\u01da\u1d78\n\u01da\3\u01da\5\u01da\u1d7b"+
		"\n\u01da\3\u01db\5\u01db\u1d7e\n\u01db\3\u01db\3\u01db\5\u01db\u1d82\n"+
		"\u01db\3\u01db\3\u01db\5\u01db\u1d86\n\u01db\3\u01db\3\u01db\5\u01db\u1d8a"+
		"\n\u01db\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db"+
		"\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db\5\u01db\u1d99\n\u01db\3\u01db"+
		"\5\u01db\u1d9c\n\u01db\5\u01db\u1d9e\n\u01db\3\u01dc\3\u01dc\3\u01dc\5"+
		"\u01dc\u1da3\n\u01dc\3\u01dc\3\u01dc\3\u01dc\3\u01dc\3\u01dc\3\u01dc\3"+
		"\u01dc\5\u01dc\u1dac\n\u01dc\3\u01dc\5\u01dc\u1daf\n\u01dc\3\u01dc\3\u01dc"+
		"\5\u01dc\u1db3\n\u01dc\3\u01dd\3\u01dd\3\u01dd\3\u01dd\3\u01dd\3\u01de"+
		"\3\u01de\3\u01de\3\u01de\7\u01de\u1dbe\n\u01de\f\u01de\16\u01de\u1dc1"+
		"\13\u01de\3\u01de\3\u01de\3\u01df\3\u01df\3\u01df\3\u01df\3\u01df\3\u01df"+
		"\3\u01df\5\u01df\u1dcc\n\u01df\3\u01df\3\u01df\3\u01df\5\u01df\u1dd1\n"+
		"\u01df\3\u01df\7\u01df\u1dd4\n\u01df\f\u01df\16\u01df\u1dd7\13\u01df\3"+
		"\u01df\3\u01df\3\u01df\3\u01df\7\u01df\u1ddd\n\u01df\f\u01df\16\u01df"+
		"\u1de0\13\u01df\3\u01df\3\u01df\5\u01df\u1de4\n\u01df\3\u01e0\3\u01e0"+
		"\3\u01e0\3\u01e0\3\u01e0\7\u01e0\u1deb\n\u01e0\f\u01e0\16\u01e0\u1dee"+
		"\13\u01e0\3\u01e0\3\u01e0\5\u01e0\u1df2\n\u01e0\3\u01e1\3\u01e1\5\u01e1"+
		"\u1df6\n\u01e1\3\u01e1\3\u01e1\5\u01e1\u1dfa\n\u01e1\3\u01e1\3\u01e1\5"+
		"\u01e1\u1dfe\n\u01e1\3\u01e1\3\u01e1\3\u01e1\5\u01e1\u1e03\n\u01e1\3\u01e1"+
		"\3\u01e1\3\u01e1\5\u01e1\u1e08\n\u01e1\3\u01e1\3\u01e1\3\u01e1\3\u01e1"+
		"\5\u01e1\u1e0e\n\u01e1\3\u01e1\3\u01e1\3\u01e1\5\u01e1\u1e13\n\u01e1\3"+
		"\u01e1\5\u01e1\u1e16\n\u01e1\3\u01e2\3\u01e2\3\u01e2\7\u01e2\u1e1b\n\u01e2"+
		"\f\u01e2\16\u01e2\u1e1e\13\u01e2\3\u01e3\3\u01e3\3\u01e3\3\u01e3\7\u01e3"+
		"\u1e24\n\u01e3\f\u01e3\16\u01e3\u1e27\13\u01e3\3\u01e3\3\u01e3\3\u01e4"+
		"\3\u01e4\5\u01e4\u1e2d\n\u01e4\3\u01e5\3\u01e5\3\u01e5\3\u01e5\3\u01e6"+
		"\3\u01e6\3\u01e6\3\u01e7\3\u01e7\3\u01e7\3\u01e7\3\u01e8\5\u01e8\u1e3b"+
		"\n\u01e8\3\u01e8\3\u01e8\3\u01e9\3\u01e9\3\u01e9\3\u01ea\3\u01ea\3\u01ea"+
		"\3\u01eb\3\u01eb\5\u01eb\u1e47\n\u01eb\3\u01ec\3\u01ec\3\u01ec\3\u01ec"+
		"\3\u01ec\3\u01ec\3\u01ed\3\u01ed\3\u01ed\7\u01ed\u1e52\n\u01ed\f\u01ed"+
		"\16\u01ed\u1e55\13\u01ed\3\u01ee\3\u01ee\3\u01ee\7\u01ee\u1e5a\n\u01ee"+
		"\f\u01ee\16\u01ee\u1e5d\13\u01ee\3\u01ef\3\u01ef\3\u01ef\3\u01ef\5\u01ef"+
		"\u1e63\n\u01ef\3\u01f0\3\u01f0\3\u01f0\3\u01f1\3\u01f1\6\u01f1\u1e6a\n"+
		"\u01f1\r\u01f1\16\u01f1\u1e6b\3\u01f2\3\u01f2\3\u01f2\3\u01f2\5\u01f2"+
		"\u1e72\n\u01f2\3\u01f2\3\u01f2\3\u01f2\3\u01f2\3\u01f2\3\u01f2\5\u01f2"+
		"\u1e7a\n\u01f2\3\u01f3\3\u01f3\6\u01f3\u1e7e\n\u01f3\r\u01f3\16\u01f3"+
		"\u1e7f\3\u01f4\3\u01f4\3\u01f4\3\u01f4\3\u01f5\3\u01f5\3\u01f5\7\u01f5"+
		"\u1e89\n\u01f5\f\u01f5\16\u01f5\u1e8c\13\u01f5\3\u01f6\3\u01f6\3\u01f6"+
		"\7\u01f6\u1e91\n\u01f6\f\u01f6\16\u01f6\u1e94\13\u01f6\3\u01f7\3\u01f7"+
		"\3\u01f7\7\u01f7\u1e99\n\u01f7\f\u01f7\16\u01f7\u1e9c\13\u01f7\3\u01f8"+
		"\3\u01f8\3\u01f8\3\u01f8\3\u01f8\5\u01f8\u1ea3\n\u01f8\3\u01f8\3\u01f8"+
		"\3\u01f8\3\u01f8\3\u01f8\3\u01f8\3\u01f8\3\u01f8\5\u01f8\u1ead\n\u01f8"+
		"\3\u01f8\3\u01f8\3\u01f8\5\u01f8\u1eb2\n\u01f8\3\u01f8\3\u01f8\3\u01f8"+
		"\5\u01f8\u1eb7\n\u01f8\5\u01f8\u1eb9\n\u01f8\3\u01f9\3\u01f9\3\u01f9\3"+
		"\u01f9\5\u01f9\u1ebf\n\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9\5\u01f9\u1ec5"+
		"\n\u01f9\3\u01f9\5\u01f9\u1ec8\n\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9"+
		"\3\u01f9\5\u01f9\u1ecf\n\u01f9\5\u01f9\u1ed1\n\u01f9\5\u01f9\u1ed3\n\u01f9"+
		"\3\u01f9\5\u01f9\u1ed6\n\u01f9\5\u01f9\u1ed8\n\u01f9\3\u01fa\3\u01fa\3"+
		"\u01fa\3\u01fa\3\u01fb\3\u01fb\3\u01fb\3\u01fb\3\u01fc\3\u01fc\3\u01fc"+
		"\3\u01fd\3\u01fd\3\u01fd\3\u01fd\5\u01fd\u1ee9\n\u01fd\3\u01fe\3\u01fe"+
		"\3\u01fe\5\u01fe\u1eee\n\u01fe\5\u01fe\u1ef0\n\u01fe\3\u01ff\3\u01ff\3"+
		"\u01ff\3\u0200\3\u0200\5\u0200\u1ef7\n\u0200\3\u0201\3\u0201\3\u0202\3"+
		"\u0202\3\u0203\3\u0203\3\u0203\3\u0203\3\u0204\3\u0204\3\u0204\5\u0204"+
		"\u1f04\n\u0204\5\u0204\u1f06\n\u0204\3\u0205\3\u0205\3\u0205\3\u0205\5"+
		"\u0205\u1f0c\n\u0205\3\u0206\3\u0206\3\u0207\3\u0207\3\u0207\3\u0207\7"+
		"\u0207\u1f14\n\u0207\f\u0207\16\u0207\u1f17\13\u0207\3\u0207\3\u0207\3"+
		"\u0208\3\u0208\3\u0209\3\u0209\5\u0209\u1f1f\n\u0209\3\u020a\3\u020a\3"+
		"\u020b\3\u020b\3\u020c\3\u020c\3\u020c\3\u020c\3\u020c\5\u020c\u1f2a\n"+
		"\u020c\3\u020c\3\u020c\3\u020d\3\u020d\3\u020e\3\u020e\3\u020f\3\u020f"+
		"\3\u0210\3\u0210\3\u0211\3\u0211\3\u0212\3\u0212\3\u0213\3\u0213\3\u0214"+
		"\3\u0214\3\u0215\3\u0215\5\u0215\u1f40\n\u0215\3\u0216\3\u0216\5\u0216"+
		"\u1f44\n\u0216\3\u0217\3\u0217\3\u0218\3\u0218\3\u0219\3\u0219\3\u021a"+
		"\3\u021a\3\u021b\3\u021b\3\u021c\3\u021c\3\u021d\3\u021d\3\u021e\3\u021e"+
		"\3\u021f\3\u021f\3\u0220\3\u0220\3\u0221\3\u0221\5\u0221\u1f5c\n\u0221"+
		"\3\u0222\3\u0222\3\u0222\3\u0223\3\u0223\3\u0223\3\u0223\3\u0223\3\u0223"+
		"\5\u0223\u1f67\n\u0223\5\u0223\u1f69\n\u0223\3\u0224\3\u0224\5\u0224\u1f6d"+
		"\n\u0224\3\u0225\3\u0225\3\u0225\7\u0225\u1f72\n\u0225\f\u0225\16\u0225"+
		"\u1f75\13\u0225\3\u0226\3\u0226\3\u0226\7\u0226\u1f7a\n\u0226\f\u0226"+
		"\16\u0226\u1f7d\13\u0226\3\u0227\3\u0227\3\u0228\3\u0228\5\u0228\u1f83"+
		"\n\u0228\3\u0229\3\u0229\3\u022a\3\u022a\5\u022a\u1f89\n\u022a\3\u022b"+
		"\3\u022b\3\u022c\3\u022c\3\u022d\3\u022d\3\u022e\3\u022e\3\u022f\3\u022f"+
		"\3\u0230\3\u0230\3\u0230\5\u0230\u1f98\n\u0230\3\u0231\3\u0231\5\u0231"+
		"\u1f9c\n\u0231\3\u0232\3\u0232\3\u0232\7\u0232\u1fa1\n\u0232\f\u0232\16"+
		"\u0232\u1fa4\13\u0232\3\u0233\3\u0233\3\u0233\3\u0233\3\u0234\3\u0234"+
		"\5\u0234\u1fac\n\u0234\3\u0235\3\u0235\3\u0235\5\u0235\u1fb1\n\u0235\5"+
		"\u0235\u1fb3\n\u0235\3\u0235\3\u0235\3\u0235\3\u0235\5\u0235\u1fb9\n\u0235"+
		"\3\u0236\3\u0236\3\u0236\3\u0237\3\u0237\3\u0238\3\u0238\3\u0239\3\u0239"+
		"\3\u023a\3\u023a\3\u023a\3\u023a\3\u023a\5\u023a\u1fc9\n\u023a\3\u023b"+
		"\3\u023b\3\u023b\3\u023b\3\u023b\3\u023b\5\u023b\u1fd1\n\u023b\3\u023b"+
		"\5\u023b\u1fd4\n\u023b\3\u023c\3\u023c\3\u023c\3\u023c\3\u023c\5\u023c"+
		"\u1fdb\n\u023c\3\u023d\3\u023d\3\u023d\3\u023d\7\u023d\u1fe1\n\u023d\f"+
		"\u023d\16\u023d\u1fe4\13\u023d\3\u023d\3\u023d\3\u023e\3\u023e\3\u023e"+
		"\5\u023e\u1feb\n\u023e\3\u023f\3\u023f\3\u023f\5\u023f\u1ff0\n\u023f\3"+
		"\u0240\3\u0240\3\u0240\5\u0240\u1ff5\n\u0240\3\u0241\5\u0241\u1ff8\n\u0241"+
		"\3\u0241\3\u0241\5\u0241\u1ffc\n\u0241\3\u0241\7\u0241\u1fff\n\u0241\f"+
		"\u0241\16\u0241\u2002\13\u0241\3\u0242\3\u0242\3\u0243\3\u0243\3\u0243"+
		"\7\u0243\u2009\n\u0243\f\u0243\16\u0243\u200c\13\u0243\3\u0244\3\u0244"+
		"\3\u0245\3\u0245\3\u0246\3\u0246\3\u0247\3\u0247\3\u0247\3\u0247\3\u0247"+
		"\3\u0247\5\u0247\u201a\n\u0247\3\u0248\3\u0248\5\u0248\u201e\n\u0248\3"+
		"\u0249\3\u0249\3\u024a\3\u024a\3\u024a\3\u024a\3\u024a\3\u024a\3\u024b"+
		"\3\u024b\5\u024b\u202a\n\u024b\3\u024c\3\u024c\5\u024c\u202e\n\u024c\3"+
		"\u024d\3\u024d\5\u024d\u2032\n\u024d\3\u024e\3\u024e\5\u024e\u2036\n\u024e"+
		"\3\u024f\3\u024f\3\u024f\3\u0250\3\u0250\3\u0251\3\u0251\3\u0252\3\u0252"+
		"\3\u0252\3\u0252\3\u0252\3\u0252\5\u0252\u2045\n\u0252\3\u0253\3\u0253"+
		"\3\u0253\3\u0253\3\u0253\3\u0253\3\u0253\3\u0253\3\u0253\3\u0253\5\u0253"+
		"\u2051\n\u0253\3\u0254\3\u0254\3\u0254\3\u0254\3\u0254\3\u0254\3\u0254"+
		"\3\u0254\5\u0254\u205b\n\u0254\3\u0254\3\u0254\3\u0254\3\u0254\3\u0254"+
		"\5\u0254\u2062\n\u0254\5\u0254\u2064\n\u0254\3\u0255\3\u0255\3\u0256\3"+
		"\u0256\3\u0257\3\u0257\3\u0257\3\u0257\3\u0257\3\u0257\3\u0257\3\u0257"+
		"\3\u0257\3\u0257\3\u0257\5\u0257\u2075\n\u0257\3\u0257\3\u0257\3\u0257"+
		"\5\u0257\u207a\n\u0257\5\u0257\u207c\n\u0257\3\u0258\3\u0258\3\u0259\3"+
		"\u0259\3\u025a\3\u025a\3\u025a\5\u025a\u2085\n\u025a\3\u025a\3\u025a\3"+
		"\u025a\5\u025a\u208a\n\u025a\5\u025a\u208c\n\u025a\3\u025b\3\u025b\3\u025b"+
		"\3\u025b\5\u025b\u2092\n\u025b\3\u025c\3\u025c\3\u025d\3\u025d\3\u025d"+
		"\3\u025d\3\u025d\5\u025d\u209b\n\u025d\3\u025e\3\u025e\3\u025e\3\u025e"+
		"\3\u025e\3\u025e\3\u025e\3\u025e\3\u025e\5\u025e\u20a6\n\u025e\3\u025e"+
		"\2\7\u0114\u029c\u029e\u02a6\u02a8\u025f\2\4\6\b\n\f\16\20\22\24\26\30"+
		"\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080"+
		"\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098"+
		"\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0"+
		"\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8"+
		"\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0"+
		"\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8"+
		"\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110"+
		"\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128"+
		"\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140"+
		"\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158"+
		"\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170"+
		"\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188"+
		"\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0"+
		"\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8"+
		"\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0"+
		"\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8"+
		"\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200"+
		"\u0202\u0204\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218"+
		"\u021a\u021c\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230"+
		"\u0232\u0234\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248"+
		"\u024a\u024c\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260"+
		"\u0262\u0264\u0266\u0268\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278"+
		"\u027a\u027c\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c\u028e\u0290"+
		"\u0292\u0294\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8"+
		"\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0"+
		"\u02c2\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8"+
		"\u02da\u02dc\u02de\u02e0\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0"+
		"\u02f2\u02f4\u02f6\u02f8\u02fa\u02fc\u02fe\u0300\u0302\u0304\u0306\u0308"+
		"\u030a\u030c\u030e\u0310\u0312\u0314\u0316\u0318\u031a\u031c\u031e\u0320"+
		"\u0322\u0324\u0326\u0328\u032a\u032c\u032e\u0330\u0332\u0334\u0336\u0338"+
		"\u033a\u033c\u033e\u0340\u0342\u0344\u0346\u0348\u034a\u034c\u034e\u0350"+
		"\u0352\u0354\u0356\u0358\u035a\u035c\u035e\u0360\u0362\u0364\u0366\u0368"+
		"\u036a\u036c\u036e\u0370\u0372\u0374\u0376\u0378\u037a\u037c\u037e\u0380"+
		"\u0382\u0384\u0386\u0388\u038a\u038c\u038e\u0390\u0392\u0394\u0396\u0398"+
		"\u039a\u039c\u039e\u03a0\u03a2\u03a4\u03a6\u03a8\u03aa\u03ac\u03ae\u03b0"+
		"\u03b2\u03b4\u03b6\u03b8\u03ba\u03bc\u03be\u03c0\u03c2\u03c4\u03c6\u03c8"+
		"\u03ca\u03cc\u03ce\u03d0\u03d2\u03d4\u03d6\u03d8\u03da\u03dc\u03de\u03e0"+
		"\u03e2\u03e4\u03e6\u03e8\u03ea\u03ec\u03ee\u03f0\u03f2\u03f4\u03f6\u03f8"+
		"\u03fa\u03fc\u03fe\u0400\u0402\u0404\u0406\u0408\u040a\u040c\u040e\u0410"+
		"\u0412\u0414\u0416\u0418\u041a\u041c\u041e\u0420\u0422\u0424\u0426\u0428"+
		"\u042a\u042c\u042e\u0430\u0432\u0434\u0436\u0438\u043a\u043c\u043e\u0440"+
		"\u0442\u0444\u0446\u0448\u044a\u044c\u044e\u0450\u0452\u0454\u0456\u0458"+
		"\u045a\u045c\u045e\u0460\u0462\u0464\u0466\u0468\u046a\u046c\u046e\u0470"+
		"\u0472\u0474\u0476\u0478\u047a\u047c\u047e\u0480\u0482\u0484\u0486\u0488"+
		"\u048a\u048c\u048e\u0490\u0492\u0494\u0496\u0498\u049a\u049c\u049e\u04a0"+
		"\u04a2\u04a4\u04a6\u04a8\u04aa\u04ac\u04ae\u04b0\u04b2\u04b4\u04b6\u04b8"+
		"\u04ba\2\u0092\3\2\u02f2\u02f3\4\2\u01b1\u01b1\u028f\u028f\4\2\u01c0\u01c0"+
		"\u0263\u0263\3\2\u02ac\u02ad\4\2\u01ac\u01ac\u01e9\u01e9\4\2\u010f\u010f"+
		"\u0259\u0259\3\2\u02f4\u02f5\4\2OO\u00b6\u00b6\4\2\u020a\u020a\u0260\u0260"+
		"\6\2\u014b\u014b\u01de\u01de\u0213\u0213\u025a\u025a\4\2uu\u00a3\u00a3"+
		"\4\2\u0113\u0113\u016a\u016a\4\2\u0112\u0112\u0169\u0169\4\2\u00ef\u00ef"+
		"\u0174\u0174\5\2\u00d9\u00d9\u015a\u015a\u0168\u0168\4\2==\u01b4\u01b4"+
		"\5\2\u01e2\u01e2\u0210\u0210\u0299\u0299\4\2\25\25$$\4\2\u0156\u0156\u0289"+
		"\u0289\5\2\u010e\u010e\u020a\u020a\u022c\u022c\4\2\u0096\u0096\u00ed\u00ed"+
		"\6\2\u0096\u0096\u00b0\u00b0\u00ed\u00ed\u0105\u0105\4\2\u0181\u0181\u0184"+
		"\u0187\5\2\u01e1\u01e1\u0205\u0205\u022c\u022c\4\2\u0172\u0172\u02a1\u02a1"+
		"\4\2cc\u022c\u022c\4\2oo\u017a\u017a\4\2\u012c\u012c\u0223\u0223\4\2\u01e1"+
		"\u01e1\u022c\u022c\b\2\u0141\u0141\u01ad\u01ad\u01e6\u01e6\u0205\u0205"+
		"\u0277\u0279\u0282\u0282\4\2\u00f4\u00f4\u0198\u0198\4\2\u017e\u0180\u01a6"+
		"\u01a6\5\2\u012c\u012c\u0256\u0256\u02cb\u02cb\4\2\u01b2\u01b2\u01e3\u01e3"+
		"\4\2\u021f\u021f\u0266\u0266\4\2\u01ce\u01ce\u020d\u020d\4\2\u01ad\u01ad"+
		"\u01e6\u01e6\4\2\u01fa\u01fa\u020a\u020a\4\2\u020b\u020b\u021b\u021b\4"+
		"\2\u0247\u0247\u02ae\u02ae\4\2\7\7\62\62\4\2\u0125\u0125\u0219\u0219\4"+
		"\2\u00bb\u00bb\u01b7\u01b7\4\2\u013d\u013d\u013f\u013f\4\2\u0119\u0119"+
		"\u0143\u0143\3\2\62\63\4\2\20\20\u01e9\u01e9\5\2\u00f1\u00f1\u0178\u0178"+
		"\u027b\u027b\4\2\u0226\u0226\u0297\u0297\4\2\u01e0\u01e0\u02ef\u02ef\5"+
		"\2\u0166\u0166\u0254\u0254\u0289\u0289\6\2\u0210\u0210\u025b\u025b\u0268"+
		"\u0268\u0299\u0299\17\2\23\23::\u0087\u0087\u0093\u0093\u0107\u0107\u010b"+
		"\u010b\u011a\u011a\u0151\u0151\u01e2\u01e2\u01e9\u01e9\u020b\u020b\u0291"+
		"\u0291\u029a\u029a\6\2\u012b\u012b\u0158\u0158\u016e\u016e\u0171\u0171"+
		"\4\2//UU\4\2\u01cd\u01cd\u01e9\u01e9\4\2\u00f1\u00f1\u01e0\u01e0\4\2\u008c"+
		"\u008c\u010e\u010e\7\2RR\u008c\u008c\u008f\u008f\u00d7\u00d7\u010e\u010e"+
		"\5\2\u008c\u008c\u010e\u010e\u016f\u016f\4\2]]\u0167\u0167\6\2\u01ad\u01ad"+
		"\u01b7\u01b7\u01e0\u01e0\u0245\u0245\4\2\u012f\u012f\u02e6\u02e6\5\2\u00b9"+
		"\u00b9\u00e5\u00e5\u0149\u0149\4\2\u01fd\u01fd\u0214\u0214\4\2II\u0116"+
		"\u0116\5\2\u00a5\u00a5\u020b\u020b\u021a\u021a\4\2\u0085\u0085\u0173\u0173"+
		"\4\2\u0149\u0149\u0170\u0170\b\2kk\u00aa\u00aa\u00d8\u00d8\u013c\u013c"+
		"\u0153\u0153\u01ad\u01ad\4\2dd\u010d\u010d\7\2ww\u009f\u009f\u0106\u0106"+
		"\u0149\u0149\u016d\u016d\7\2\u0082\u0082\u0084\u0084\u0098\u0098\u0139"+
		"\u0139\u01b7\u01b7\4\2\u016e\u016e\u02e6\u02e6\4\2zz\u0091\u0091\4\2\u01e3"+
		"\u01e4\u01f5\u01f5\5\2\u016b\u016b\u01f7\u01f7\u0293\u0293\4\2\u0192\u0192"+
		"\u01b0\u01b0\4\2\u0195\u0195\u024d\u024d\4\2BB\u01ad\u01ad\4\2\u0181\u0181"+
		"\u0183\u0188\5\2\u018b\u018d\u01e7\u01e7\u023a\u023a\3\2\u0189\u018a\3"+
		"\2\u0190\u0191\4\2\u0189\u018a\u018f\u018f\3\2\u01b9\u01bb\6\2\u02c6\u02c7"+
		"\u02d4\u02d4\u02d6\u02d6\u02d8\u02d8\4\2\u02cc\u02cc\u02ce\u02ce\4\2\u02c9"+
		"\u02c9\u02cd\u02cd\4\2\u0096\u0096\u00b0\u00b0\4\2\u020a\u020a\u02d7\u02d7"+
		"\4\2<<\u014d\u014d\3\2\u01d7\u01d8\3\2\u0160\u0161\5\2qr\u015f\u015f\u0162"+
		"\u0162\4\2\u017c\u017c\u023f\u023f\4\2\u017c\u017c\u018e\u018e\7\2\u01d9"+
		"\u01dc\u0206\u0208\u0236\u0237\u0267\u0267\u02b0\u02b0\13\2ss\u00a0\u00a0"+
		"\u00db\u00db\u00dd\u00dd\u00e1\u00e1\u010c\u010c\u0133\u0133\u0175\u0175"+
		"\u017b\u017b\5\2\u01ca\u01ca\u01f3\u01f3\u0294\u0294\4\2\u00f2\u00f2\u012d"+
		"\u012d\f\2PPVVZZfhnn\u00da\u00da\u00e6\u00e6\u0132\u0132\u014c\u014c\u0155"+
		"\u0155\4\2\u0281\u0281\u02a8\u02a8\5\2\177\177\u0097\u0097\u01e0\u01e0"+
		"\5\2||\u00d8\u00d8\u01e0\u01e0\5\2\u0092\u0092\u00fa\u00fa\u0137\u0137"+
		"\5\2NN\u009e\u009e\u0130\u0130\3\2\u02b5\u02b6\4\2\u0164\u0164\u029c\u029c"+
		"\7\2\u01b6\u01b6\u0213\u0213\u0233\u0233\u0271\u0271\u028d\u028d\6\2\u0097"+
		"\u0097\u01de\u01de\u01f9\u01f9\u0243\u0243\3\2LM\4\2\u0227\u0227\u0232"+
		"\u0232\6\2\u0099\u009a\u00b4\u00b4\u00e2\u00e4\u0102\u0103\5\2..\u0298"+
		"\u0298\u02b1\u02b1\3\2\u0146\u0148\4\2\13\13\u0157\u0157\b\2^^``\177\177"+
		"\u0097\u0097\u0114\u0114\u01e0\u01e0\5\2\35\35\u0096\u0096\u00b0\u00b0"+
		"\4\2||\u00d8\u00d8\4\2\u00b5\u00b5\u0256\u0256\4\2\u00ba\u00ba\u00de\u00de"+
		"\4\2oo\u020b\u020b\5\2\u020e\u020e\u0214\u0214\u0250\u0250\4\2\u027c\u027c"+
		"\u028a\u028a\4\2\u0244\u0244\u0246\u0246\4\2\u00b6\u00b6\u0241\u0241\4"+
		"\2\u0306\u0306\u0308\u0308\5\2\u017e\u0180\u01a7\u01a7\u01a9\u01aa\4\2"+
		"\u017e\u0180\u01a7\u01a7\4\2\u017e\u0180\u01a9\u01aa\3\2\u01a7\u01a8\4"+
		"\2\u01f7\u01f7\u0293\u0293\4\2\u01a5\u01a5\u0242\u0242\3\2\u0181\u0182"+
		"\7\2\u009d\u009d\u00b6\u00b6\u0136\u0136\u02b2\u02b2\u02c1\u02c1\5\2\23"+
		"\23::\u02ea\u02ea\20\2\4\4\7\13\r\22\24\25\30\31\33\35$%\'(*+./\62\66"+
		"99\u00a4\u00a4\u02c5\u02c5\13\2\u0087\u0087\u0093\u0093\u00f1\u00f1\u0107"+
		"\u0107\u010b\u010b\u011a\u011a\u011d\u011d\u0151\u0151\u02e5\u02e5=\2"+
		"\3\3\5\6\f\f\26\27\32\32\36!##&&)),-\60\61\678;@BCEikkmvx\u0086\u0088"+
		"\u0092\u0094\u009c\u009e\u00a3\u00a5\u00a7\u00a9\u00b5\u00b7\u00d2\u00d4"+
		"\u00f0\u00f2\u00f4\u00f7\u0106\u0108\u010a\u010c\u0112\u0114\u0119\u011b"+
		"\u011c\u011e\u012b\u012d\u012e\u0130\u0135\u0137\u013f\u0141\u0150\u0152"+
		"\u0164\u0167\u017b\u01f1\u01f1\u01f4\u01f4\u0247\u0247\u02a0\u02a0\u02ad"+
		"\u02ad\u02b3\u02b6\u02b8\u02b8\u02bd\u02bf\u02c2\u02c3\u02c8\u02c8\u02ca"+
		"\u02ca\u02d1\u02d2\u02d5\u02d5\u02d7\u02d7\u02d9\u02da\u02de\u02e4\u02e7"+
		"\u02e9\u02eb\u02f5\u02f7\u02fa\u02fc\u02fc\u02ff\u0302\b\2\3\22\249\u02b3"+
		"\u02b3\u02b5\u02b6\u02c5\u02c5\u02f0\u02f3\"\2;@Bkm\u0086\u0088\u0092"+
		"\u0094\u00a3\u00a5\u00a7\u00a9\u00f0\u00f2\u00f5\u00f7\u0106\u0108\u010a"+
		"\u010c\u0119\u011b\u011c\u011e\u012b\u012d\u012e\u0130\u0165\u0167\u017b"+
		"\u01af\u01af\u02b8\u02b8\u02bd\u02bf\u02c2\u02c4\u02c8\u02c8\u02ca\u02ca"+
		"\u02d1\u02d2\u02d5\u02d5\u02d7\u02d7\u02d9\u02da\u02de\u02e4\u02e7\u02e8"+
		"\u02ec\u02ed\u02ef\u02ef\u02f4\u02f5\u02f7\u02f8\7\2ll\u00a4\u00a4\u012c"+
		"\u012c\u012f\u012f\u0166\u0166\b\2\u0151\u0151\u01f1\u01f1\u01f4\u01f4"+
		"\u0247\u0247\u02a0\u02a0\u02ad\u02ad\2\u24ff\2\u04c8\3\2\2\2\4\u04ec\3"+
		"\2\2\2\6\u04ee\3\2\2\2\b\u050b\3\2\2\2\n\u051a\3\2\2\2\f\u0540\3\2\2\2"+
		"\16\u0549\3\2\2\2\20\u0556\3\2\2\2\22\u0558\3\2\2\2\24\u055d\3\2\2\2\26"+
		"\u0575\3\2\2\2\30\u057e\3\2\2\2\32\u0580\3\2\2\2\34\u058f\3\2\2\2\36\u05f2"+
		"\3\2\2\2 \u05f6\3\2\2\2\"\u0606\3\2\2\2$\u068d\3\2\2\2&\u0692\3\2\2\2"+
		"(\u0694\3\2\2\2*\u0696\3\2\2\2,\u06a4\3\2\2\2.\u06ac\3\2\2\2\60\u06bc"+
		"\3\2\2\2\62\u06be\3\2\2\2\64\u06c2\3\2\2\2\66\u06c7\3\2\2\28\u06c9\3\2"+
		"\2\2:\u06d4\3\2\2\2<\u06f9\3\2\2\2>\u0701\3\2\2\2@\u070b\3\2\2\2B\u070d"+
		"\3\2\2\2D\u0721\3\2\2\2F\u072a\3\2\2\2H\u072d\3\2\2\2J\u073a\3\2\2\2L"+
		"\u073f\3\2\2\2N\u0743\3\2\2\2P\u074a\3\2\2\2R\u075f\3\2\2\2T\u076e\3\2"+
		"\2\2V\u0771\3\2\2\2X\u0790\3\2\2\2Z\u079a\3\2\2\2\\\u079d\3\2\2\2^\u07a6"+
		"\3\2\2\2`\u07a8\3\2\2\2b\u07b4\3\2\2\2d\u07cd\3\2\2\2f\u07e8\3\2\2\2h"+
		"\u07f6\3\2\2\2j\u07f9\3\2\2\2l\u080e\3\2\2\2n\u0811\3\2\2\2p\u084a\3\2"+
		"\2\2r\u084c\3\2\2\2t\u0850\3\2\2\2v\u0859\3\2\2\2x\u0869\3\2\2\2z\u086b"+
		"\3\2\2\2|\u0873\3\2\2\2~\u088d\3\2\2\2\u0080\u088f\3\2\2\2\u0082\u089b"+
		"\3\2\2\2\u0084\u08aa\3\2\2\2\u0086\u08ac\3\2\2\2\u0088\u08af\3\2\2\2\u008a"+
		"\u08c5\3\2\2\2\u008c\u08c7\3\2\2\2\u008e\u08cd\3\2\2\2\u0090\u08d3\3\2"+
		"\2\2\u0092\u08d9\3\2\2\2\u0094\u08df\3\2\2\2\u0096\u08e5\3\2\2\2\u0098"+
		"\u08ec\3\2\2\2\u009a\u08f4\3\2\2\2\u009c\u08f6\3\2\2\2\u009e\u08fc\3\2"+
		"\2\2\u00a0\u0902\3\2\2\2\u00a2\u0909\3\2\2\2\u00a4\u091b\3\2\2\2\u00a6"+
		"\u091d\3\2\2\2\u00a8\u0921\3\2\2\2\u00aa\u0926\3\2\2\2\u00ac\u0936\3\2"+
		"\2\2\u00ae\u093b\3\2\2\2\u00b0\u095c\3\2\2\2\u00b2\u097b\3\2\2\2\u00b4"+
		"\u098c\3\2\2\2\u00b6\u098e\3\2\2\2\u00b8\u09a2\3\2\2\2\u00ba\u09a8\3\2"+
		"\2\2\u00bc\u09ae\3\2\2\2\u00be\u09b4\3\2\2\2\u00c0\u09bb\3\2\2\2\u00c2"+
		"\u09c4\3\2\2\2\u00c4\u09d5\3\2\2\2\u00c6\u09d7\3\2\2\2\u00c8\u09de\3\2"+
		"\2\2\u00ca\u09e8\3\2\2\2\u00cc\u09f6\3\2\2\2\u00ce\u09fc\3\2\2\2\u00d0"+
		"\u0a04\3\2\2\2\u00d2\u0a0a\3\2\2\2\u00d4\u0a12\3\2\2\2\u00d6\u0a18\3\2"+
		"\2\2\u00d8\u0a22\3\2\2\2\u00da\u0a26\3\2\2\2\u00dc\u0a2c\3\2\2\2\u00de"+
		"\u0a31\3\2\2\2\u00e0\u0a3c\3\2\2\2\u00e2\u0a67\3\2\2\2\u00e4\u0a6d\3\2"+
		"\2\2\u00e6\u0a6f\3\2\2\2\u00e8\u0a76\3\2\2\2\u00ea\u0a94\3\2\2\2\u00ec"+
		"\u0a96\3\2\2\2\u00ee\u0ab5\3\2\2\2\u00f0\u0abc\3\2\2\2\u00f2\u0ac0\3\2"+
		"\2\2\u00f4\u0ac8\3\2\2\2\u00f6\u0ad2\3\2\2\2\u00f8\u0ad4\3\2\2\2\u00fa"+
		"\u0ae6\3\2\2\2\u00fc\u0af2\3\2\2\2\u00fe\u0af7\3\2\2\2\u0100\u0afd\3\2"+
		"\2\2\u0102\u0b1e\3\2\2\2\u0104\u0b20\3\2\2\2\u0106\u0b28\3\2\2\2\u0108"+
		"\u0b31\3\2\2\2\u010a\u0b39\3\2\2\2\u010c\u0b45\3\2\2\2\u010e\u0b59\3\2"+
		"\2\2\u0110\u0b62\3\2\2\2\u0112\u0b86\3\2\2\2\u0114\u0b93\3\2\2\2\u0116"+
		"\u0ba3\3\2\2\2\u0118\u0baa\3\2\2\2\u011a\u0bc5\3\2\2\2\u011c\u0bc7\3\2"+
		"\2\2\u011e\u0bc9\3\2\2\2\u0120\u0bcc\3\2\2\2\u0122\u0bcf\3\2\2\2\u0124"+
		"\u0bd6\3\2\2\2\u0126\u0bd8\3\2\2\2\u0128\u0bf6\3\2\2\2\u012a\u0c02\3\2"+
		"\2\2\u012c\u0c05\3\2\2\2\u012e\u0c0e\3\2\2\2\u0130\u0c12\3\2\2\2\u0132"+
		"\u0c17\3\2\2\2\u0134\u0c24\3\2\2\2\u0136\u0c29\3\2\2\2\u0138\u0c2d\3\2"+
		"\2\2\u013a\u0c3d\3\2\2\2\u013c\u0c3f\3\2\2\2\u013e\u0c51\3\2\2\2\u0140"+
		"\u0c53\3\2\2\2\u0142\u0c5c\3\2\2\2\u0144\u0c68\3\2\2\2\u0146\u0c6f\3\2"+
		"\2\2\u0148\u0c7a\3\2\2\2\u014a\u0c7c\3\2\2\2\u014c\u0c80\3\2\2\2\u014e"+
		"\u0c82\3\2\2\2\u0150\u0c87\3\2\2\2\u0152\u0c97\3\2\2\2\u0154\u0ca8\3\2"+
		"\2\2\u0156\u0cad\3\2\2\2\u0158\u0cb2\3\2\2\2\u015a\u0cb6\3\2\2\2\u015c"+
		"\u0cc4\3\2\2\2\u015e\u0cc7\3\2\2\2\u0160\u0ccd\3\2\2\2\u0162\u0cda\3\2"+
		"\2\2\u0164\u0ce2\3\2\2\2\u0166\u0cfc\3\2\2\2\u0168\u0d09\3\2\2\2\u016a"+
		"\u0d10\3\2\2\2\u016c\u0d12\3\2\2\2\u016e\u0d1e\3\2\2\2\u0170\u0d20\3\2"+
		"\2\2\u0172\u0d2a\3\2\2\2\u0174\u0d42\3\2\2\2\u0176\u0d44\3\2\2\2\u0178"+
		"\u0d4b\3\2\2\2\u017a\u0d55\3\2\2\2\u017c\u0d78\3\2\2\2\u017e\u0d82\3\2"+
		"\2\2\u0180\u0d84\3\2\2\2\u0182\u0d88\3\2\2\2\u0184\u0d90\3\2\2\2\u0186"+
		"\u0d92\3\2\2\2\u0188\u0d97\3\2\2\2\u018a\u0d9b\3\2\2\2\u018c\u0db7\3\2"+
		"\2\2\u018e\u0db9\3\2\2\2\u0190\u0dbb\3\2\2\2\u0192\u0dc3\3\2\2\2\u0194"+
		"\u0dc5\3\2\2\2\u0196\u0dcd\3\2\2\2\u0198\u0dd7\3\2\2\2\u019a\u0ddb\3\2"+
		"\2\2\u019c\u0df4\3\2\2\2\u019e\u0e0f\3\2\2\2\u01a0\u0e11\3\2\2\2\u01a2"+
		"\u0e1b\3\2\2\2\u01a4\u0e3a\3\2\2\2\u01a6\u0e52\3\2\2\2\u01a8\u0e54\3\2"+
		"\2\2\u01aa\u0e62\3\2\2\2\u01ac\u0e64\3\2\2\2\u01ae\u0e87\3\2\2\2\u01b0"+
		"\u0e89\3\2\2\2\u01b2\u0eb3\3\2\2\2\u01b4\u0ec3\3\2\2\2\u01b6\u0ec5\3\2"+
		"\2\2\u01b8\u0ecd\3\2\2\2\u01ba\u0ed6\3\2\2\2\u01bc\u0edd\3\2\2\2\u01be"+
		"\u0f3a\3\2\2\2\u01c0\u0f3e\3\2\2\2\u01c2\u0f42\3\2\2\2\u01c4\u0f50\3\2"+
		"\2\2\u01c6\u0f52\3\2\2\2\u01c8\u0f5f\3\2\2\2\u01ca\u0f9f\3\2\2\2\u01cc"+
		"\u0fa1\3\2\2\2\u01ce\u0fa9\3\2\2\2\u01d0\u0fb1\3\2\2\2\u01d2\u0fb9\3\2"+
		"\2\2\u01d4\u0fbb\3\2\2\2\u01d6\u0fd8\3\2\2\2\u01d8\u0fe1\3\2\2\2\u01da"+
		"\u1000\3\2\2\2\u01dc\u1002\3\2\2\2\u01de\u100a\3\2\2\2\u01e0\u100c\3\2"+
		"\2\2\u01e2\u101a\3\2\2\2\u01e4\u101c\3\2\2\2\u01e6\u1022\3\2\2\2\u01e8"+
		"\u102a\3\2\2\2\u01ea\u104f\3\2\2\2\u01ec\u1051\3\2\2\2\u01ee\u1060\3\2"+
		"\2\2\u01f0\u1062\3\2\2\2\u01f2\u1099\3\2\2\2\u01f4\u109b\3\2\2\2\u01f6"+
		"\u109e\3\2\2\2\u01f8\u10b7\3\2\2\2\u01fa\u10c0\3\2\2\2\u01fc\u10c2\3\2"+
		"\2\2\u01fe\u10c7\3\2\2\2\u0200\u10f5\3\2\2\2\u0202\u10f7\3\2\2\2\u0204"+
		"\u10ff\3\2\2\2\u0206\u1130\3\2\2\2\u0208\u113d\3\2\2\2\u020a\u113f\3\2"+
		"\2\2\u020c\u1142\3\2\2\2\u020e\u114d\3\2\2\2\u0210\u1152\3\2\2\2\u0212"+
		"\u1155\3\2\2\2\u0214\u1164\3\2\2\2\u0216\u1196\3\2\2\2\u0218\u1198\3\2"+
		"\2\2\u021a\u119a\3\2\2\2\u021c\u11cb\3\2\2\2\u021e\u11dd\3\2\2\2\u0220"+
		"\u11df\3\2\2\2\u0222\u11ef\3\2\2\2\u0224\u11fb\3\2\2\2\u0226\u1214\3\2"+
		"\2\2\u0228\u1216\3\2\2\2\u022a\u121e\3\2\2\2\u022c\u124f\3\2\2\2\u022e"+
		"\u125e\3\2\2\2\u0230\u1263\3\2\2\2\u0232\u1265\3\2\2\2\u0234\u127d\3\2"+
		"\2\2\u0236\u127f\3\2\2\2\u0238\u12ba\3\2\2\2\u023a\u12c5\3\2\2\2\u023c"+
		"\u12c7\3\2\2\2\u023e\u12ca\3\2\2\2\u0240\u12d7\3\2\2\2\u0242\u12f3\3\2"+
		"\2\2\u0244\u12fb\3\2\2\2\u0246\u12fd\3\2\2\2\u0248\u1308\3\2\2\2\u024a"+
		"\u130a\3\2\2\2\u024c\u1312\3\2\2\2\u024e\u1314\3\2\2\2\u0250\u13f8\3\2"+
		"\2\2\u0252\u13ff\3\2\2\2\u0254\u1401\3\2\2\2\u0256\u1403\3\2\2\2\u0258"+
		"\u140d\3\2\2\2\u025a\u1434\3\2\2\2\u025c\u1438\3\2\2\2\u025e\u143a\3\2"+
		"\2\2\u0260\u1442\3\2\2\2\u0262\u1446\3\2\2\2\u0264\u144e\3\2\2\2\u0266"+
		"\u1457\3\2\2\2\u0268\u1459\3\2\2\2\u026a\u1470\3\2\2\2\u026c\u1472\3\2"+
		"\2\2\u026e\u1474\3\2\2\2\u0270\u1484\3\2\2\2\u0272\u1490\3\2\2\2\u0274"+
		"\u1492\3\2\2\2\u0276\u149a\3\2\2\2\u0278\u14a2\3\2\2\2\u027a\u14ab\3\2"+
		"\2\2\u027c\u14ad\3\2\2\2\u027e\u14bf\3\2\2\2\u0280\u14cd\3\2\2\2\u0282"+
		"\u14d2\3\2\2\2\u0284\u14d8\3\2\2\2\u0286\u14da\3\2\2\2\u0288\u14ea\3\2"+
		"\2\2\u028a\u14f2\3\2\2\2\u028c\u14fc\3\2\2\2\u028e\u1509\3\2\2\2\u0290"+
		"\u150b\3\2\2\2\u0292\u1511\3\2\2\2\u0294\u152c\3\2\2\2\u0296\u152e\3\2"+
		"\2\2\u0298\u1531\3\2\2\2\u029a\u1534\3\2\2";
	private static final String _serializedATNSegment1 =
		"\2\u029c\u1541\3\2\2\2\u029e\u1551\3\2\2\2\u02a0\u1568\3\2\2\2\u02a2\u156a"+
		"\3\2\2\2\u02a4\u158f\3\2\2\2\u02a6\u1591\3\2\2\2\u02a8\u1619\3\2\2\2\u02aa"+
		"\u1626\3\2\2\2\u02ac\u162f\3\2\2\2\u02ae\u16b4\3\2\2\2\u02b0\u16b6\3\2"+
		"\2\2\u02b2\u16e5\3\2\2\2\u02b4\u16e7\3\2\2\2\u02b6\u16ec\3\2\2\2\u02b8"+
		"\u16f5\3\2\2\2\u02ba\u1708\3\2\2\2\u02bc\u170b\3\2\2\2\u02be\u1714\3\2"+
		"\2\2\u02c0\u1716\3\2\2\2\u02c2\u172d\3\2\2\2\u02c4\u1840\3\2\2\2\u02c6"+
		"\u1861\3\2\2\2\u02c8\u1863\3\2\2\2\u02ca\u1869\3\2\2\2\u02cc\u186c\3\2"+
		"\2\2\u02ce\u187b\3\2\2\2\u02d0\u1883\3\2\2\2\u02d2\u1885\3\2\2\2\u02d4"+
		"\u18a2\3\2\2\2\u02d6\u18c3\3\2\2\2\u02d8\u18c5\3\2\2\2\u02da\u18cd\3\2"+
		"\2\2\u02dc\u18d7\3\2\2\2\u02de\u18dc\3\2\2\2\u02e0\u18de\3\2\2\2\u02e2"+
		"\u18f4\3\2\2\2\u02e4\u18f6\3\2\2\2\u02e6\u18f9\3\2\2\2\u02e8\u18fc\3\2"+
		"\2\2\u02ea\u192c\3\2\2\2\u02ec\u192e\3\2\2\2\u02ee\u1939\3\2\2\2\u02f0"+
		"\u193b\3\2\2\2\u02f2\u193d\3\2\2\2\u02f4\u1941\3\2\2\2\u02f6\u1943\3\2"+
		"\2\2\u02f8\u1945\3\2\2\2\u02fa\u1949\3\2\2\2\u02fc\u194d\3\2\2\2\u02fe"+
		"\u1951\3\2\2\2\u0300\u1959\3\2\2\2\u0302\u195d\3\2\2\2\u0304\u1965\3\2"+
		"\2\2\u0306\u1967\3\2\2\2\u0308\u1979\3\2\2\2\u030a\u197b\3\2\2\2\u030c"+
		"\u197e\3\2\2\2\u030e\u1983\3\2\2\2\u0310\u198b\3\2\2\2\u0312\u1991\3\2"+
		"\2\2\u0314\u1995\3\2\2\2\u0316\u19a6\3\2\2\2\u0318\u19a9\3\2\2\2\u031a"+
		"\u19ae\3\2\2\2\u031c\u19b0\3\2\2\2\u031e\u19b3\3\2\2\2\u0320\u19bc\3\2"+
		"\2\2\u0322\u19c4\3\2\2\2\u0324\u19c6\3\2\2\2\u0326\u19cb\3\2\2\2\u0328"+
		"\u19d2\3\2\2\2\u032a\u19dc\3\2\2\2\u032c\u19e4\3\2\2\2\u032e\u19e6\3\2"+
		"\2\2\u0330\u19f0\3\2\2\2\u0332\u19f8\3\2\2\2\u0334\u19fa\3\2\2\2\u0336"+
		"\u1a00\3\2\2\2\u0338\u1a15\3\2\2\2\u033a\u1a17\3\2\2\2\u033c\u1a1d\3\2"+
		"\2\2\u033e\u1a20\3\2\2\2\u0340\u1a23\3\2\2\2\u0342\u1a41\3\2\2\2\u0344"+
		"\u1a45\3\2\2\2\u0346\u1a4c\3\2\2\2\u0348\u1a53\3\2\2\2\u034a\u1a55\3\2"+
		"\2\2\u034c\u1a65\3\2\2\2\u034e\u1a78\3\2\2\2\u0350\u1a7c\3\2\2\2\u0352"+
		"\u1a7f\3\2\2\2\u0354\u1a82\3\2\2\2\u0356\u1a9a\3\2\2\2\u0358\u1a9c\3\2"+
		"\2\2\u035a\u1aa4\3\2\2\2\u035c\u1aa6\3\2\2\2\u035e\u1aaa\3\2\2\2\u0360"+
		"\u1af9\3\2\2\2\u0362\u1afb\3\2\2\2\u0364\u1aff\3\2\2\2\u0366\u1b59\3\2"+
		"\2\2\u0368\u1b5b\3\2\2\2\u036a\u1b5d\3\2\2\2\u036c\u1b6d\3\2\2\2\u036e"+
		"\u1b6f\3\2\2\2\u0370\u1b8f\3\2\2\2\u0372\u1b91\3\2\2\2\u0374\u1b9c\3\2"+
		"\2\2\u0376\u1ba3\3\2\2\2\u0378\u1bb3\3\2\2\2\u037a\u1bb9\3\2\2\2\u037c"+
		"\u1bbb\3\2\2\2\u037e\u1bbf\3\2\2\2\u0380\u1bca\3\2\2\2\u0382\u1bcc\3\2"+
		"\2\2\u0384\u1bce\3\2\2\2\u0386\u1bd5\3\2\2\2\u0388\u1bd7\3\2\2\2\u038a"+
		"\u1bd9\3\2\2\2\u038c\u1c6f\3\2\2\2\u038e\u1c74\3\2\2\2\u0390\u1c7b\3\2"+
		"\2\2\u0392\u1c7d\3\2\2\2\u0394\u1c85\3\2\2\2\u0396\u1c97\3\2\2\2\u0398"+
		"\u1c9f\3\2\2\2\u039a\u1ca7\3\2\2\2\u039c\u1ca9\3\2\2\2\u039e\u1cad\3\2"+
		"\2\2\u03a0\u1cb5\3\2\2\2\u03a2\u1cbc\3\2\2\2\u03a4\u1cbe\3\2\2\2\u03a6"+
		"\u1cc9\3\2\2\2\u03a8\u1d4e\3\2\2\2\u03aa\u1d52\3\2\2\2\u03ac\u1d55\3\2"+
		"\2\2\u03ae\u1d5e\3\2\2\2\u03b0\u1d67\3\2\2\2\u03b2\u1d6f\3\2\2\2\u03b4"+
		"\u1d9d\3\2\2\2\u03b6\u1d9f\3\2\2\2\u03b8\u1db4\3\2\2\2\u03ba\u1db9\3\2"+
		"\2\2\u03bc\u1dc4\3\2\2\2\u03be\u1df1\3\2\2\2\u03c0\u1e15\3\2\2\2\u03c2"+
		"\u1e17\3\2\2\2\u03c4\u1e1f\3\2\2\2\u03c6\u1e2c\3\2\2\2\u03c8\u1e2e\3\2"+
		"\2\2\u03ca\u1e32\3\2\2\2\u03cc\u1e35\3\2\2\2\u03ce\u1e3a\3\2\2\2\u03d0"+
		"\u1e3e\3\2\2\2\u03d2\u1e41\3\2\2\2\u03d4\u1e44\3\2\2\2\u03d6\u1e48\3\2"+
		"\2\2\u03d8\u1e4e\3\2\2\2\u03da\u1e56\3\2\2\2\u03dc\u1e5e\3\2\2\2\u03de"+
		"\u1e64\3\2\2\2\u03e0\u1e67\3\2\2\2\u03e2\u1e79\3\2\2\2\u03e4\u1e7b\3\2"+
		"\2\2\u03e6\u1e81\3\2\2\2\u03e8\u1e85\3\2\2\2\u03ea\u1e8d\3\2\2\2\u03ec"+
		"\u1e95\3\2\2\2\u03ee\u1e9d\3\2\2\2\u03f0\u1eba\3\2\2\2\u03f2\u1ed9\3\2"+
		"\2\2\u03f4\u1edd\3\2\2\2\u03f6\u1ee1\3\2\2\2\u03f8\u1ee4\3\2\2\2\u03fa"+
		"\u1eef\3\2\2\2\u03fc\u1ef1\3\2\2\2\u03fe\u1ef6\3\2\2\2\u0400\u1ef8\3\2"+
		"\2\2\u0402\u1efa\3\2\2\2\u0404\u1efc\3\2\2\2\u0406\u1f05\3\2\2\2\u0408"+
		"\u1f0b\3\2\2\2\u040a\u1f0d\3\2\2\2\u040c\u1f0f\3\2\2\2\u040e\u1f1a\3\2"+
		"\2\2\u0410\u1f1e\3\2\2\2\u0412\u1f20\3\2\2\2\u0414\u1f22\3\2\2\2\u0416"+
		"\u1f24\3\2\2\2\u0418\u1f2d\3\2\2\2\u041a\u1f2f\3\2\2\2\u041c\u1f31\3\2"+
		"\2\2\u041e\u1f33\3\2\2\2\u0420\u1f35\3\2\2\2\u0422\u1f37\3\2\2\2\u0424"+
		"\u1f39\3\2\2\2\u0426\u1f3b\3\2\2\2\u0428\u1f3f\3\2\2\2\u042a\u1f43\3\2"+
		"\2\2\u042c\u1f45\3\2\2\2\u042e\u1f47\3\2\2\2\u0430\u1f49\3\2\2\2\u0432"+
		"\u1f4b\3\2\2\2\u0434\u1f4d\3\2\2\2\u0436\u1f4f\3\2\2\2\u0438\u1f51\3\2"+
		"\2\2\u043a\u1f53\3\2\2\2\u043c\u1f55\3\2\2\2\u043e\u1f57\3\2\2\2\u0440"+
		"\u1f5b\3\2\2\2\u0442\u1f5d\3\2\2\2\u0444\u1f60\3\2\2\2\u0446\u1f6c\3\2"+
		"\2\2\u0448\u1f6e\3\2\2\2\u044a\u1f76\3\2\2\2\u044c\u1f7e\3\2\2\2\u044e"+
		"\u1f82\3\2\2\2\u0450\u1f84\3\2\2\2\u0452\u1f88\3\2\2\2\u0454\u1f8a\3\2"+
		"\2\2\u0456\u1f8c\3\2\2\2\u0458\u1f8e\3\2\2\2\u045a\u1f90\3\2\2\2\u045c"+
		"\u1f92\3\2\2\2\u045e\u1f97\3\2\2\2\u0460\u1f9b\3\2\2\2\u0462\u1f9d\3\2"+
		"\2\2\u0464\u1fa5\3\2\2\2\u0466\u1fa9\3\2\2\2\u0468\u1fb8\3\2\2\2\u046a"+
		"\u1fba\3\2\2\2\u046c\u1fbd\3\2\2\2\u046e\u1fbf\3\2\2\2\u0470\u1fc1\3\2"+
		"\2\2\u0472\u1fc8\3\2\2\2\u0474\u1fd3\3\2\2\2\u0476\u1fda\3\2\2\2\u0478"+
		"\u1fdc\3\2\2\2\u047a\u1fea\3\2\2\2\u047c\u1fef\3\2\2\2\u047e\u1ff4\3\2"+
		"\2\2\u0480\u1ffb\3\2\2\2\u0482\u2003\3\2\2\2\u0484\u2005\3\2\2\2\u0486"+
		"\u200d\3\2\2\2\u0488\u200f\3\2\2\2\u048a\u2011\3\2\2\2\u048c\u2019\3\2"+
		"\2\2\u048e\u201d\3\2\2\2\u0490\u201f\3\2\2\2\u0492\u2021\3\2\2\2\u0494"+
		"\u2029\3\2\2\2\u0496\u202d\3\2\2\2\u0498\u2031\3\2\2\2\u049a\u2035\3\2"+
		"\2\2\u049c\u2037\3\2\2\2\u049e\u203a\3\2\2\2\u04a0\u203c\3\2\2\2\u04a2"+
		"\u2044\3\2\2\2\u04a4\u2050\3\2\2\2\u04a6\u2063\3\2\2\2\u04a8\u2065\3\2"+
		"\2\2\u04aa\u2067\3\2\2\2\u04ac\u207b\3\2\2\2\u04ae\u207d\3\2\2\2\u04b0"+
		"\u207f\3\2\2\2\u04b2\u208b\3\2\2\2\u04b4\u2091\3\2\2\2\u04b6\u2093\3\2"+
		"\2\2\u04b8\u209a\3\2\2\2\u04ba\u20a5\3\2\2\2\u04bc\u04c9\7\2\2\3\u04bd"+
		"\u04c0\5\4\3\2\u04be\u04c0\5\u01a0\u00d1\2\u04bf\u04bd\3\2\2\2\u04bf\u04be"+
		"\3\2\2\2\u04c0\u04c6\3\2\2\2\u04c1\u04c3\7\u0199\2\2\u04c2\u04c4\7\2\2"+
		"\3\u04c3\u04c2\3\2\2\2\u04c3\u04c4\3\2\2\2\u04c4\u04c7\3\2\2\2\u04c5\u04c7"+
		"\7\2\2\3\u04c6\u04c1\3\2\2\2\u04c6\u04c5\3\2\2\2\u04c7\u04c9\3\2\2\2\u04c8"+
		"\u04bc\3\2\2\2\u04c8\u04bf\3\2\2\2\u04c9\3\3\2\2\2\u04ca\u04ed\5\6\4\2"+
		"\u04cb\u04ed\5P)\2\u04cc\u04ed\5\u00b6\\\2\u04cd\u04ed\5\u00d6l\2\u04ce"+
		"\u04ed\5\u00dan\2\u04cf\u04d0\6\3\2\2\u04d0\u04ed\5\u00dco\2\u04d1\u04ed"+
		"\5\u00dep\2\u04d2\u04ed\5\u00e0q\2\u04d3\u04ed\5\u00e6t\2\u04d4\u04ed"+
		"\5\u00e8u\2\u04d5\u04ed\5\u00ecw\2\u04d6\u04ed\5\u0100\u0081\2\u04d7\u04ed"+
		"\5\u010c\u0087\2\u04d8\u04ed\5\u010e\u0088\2\u04d9\u04ed\5\u019a\u00ce"+
		"\2\u04da\u04ed\5\u019c\u00cf\2\u04db\u04ed\5\u01b2\u00da\2\u04dc\u04ed"+
		"\5\u01e2\u00f2\2\u04dd\u04de\6\3\3\2\u04de\u04ed\5\u01e8\u00f5\2\u04df"+
		"\u04ed\5\u01ee\u00f8\2\u04e0\u04ed\5\u022c\u0117\2\u04e1\u04ed\5\u0234"+
		"\u011b\2\u04e2\u04ed\5\u0236\u011c\2\u04e3\u04ed\5\u024e\u0128\2\u04e4"+
		"\u04e5\6\3\4\2\u04e5\u04ed\5\u027a\u013e\2\u04e6\u04ed\5\u025a\u012e\2"+
		"\u04e7\u04ed\5\u028e\u0148\2\u04e8\u04e9\6\3\5\2\u04e9\u04ed\5\u0340\u01a1"+
		"\2\u04ea\u04ed\5\u034a\u01a6\2\u04eb\u04ed\5\u034c\u01a7\2\u04ec\u04ca"+
		"\3\2\2\2\u04ec\u04cb\3\2\2\2\u04ec\u04cc\3\2\2\2\u04ec\u04cd\3\2\2\2\u04ec"+
		"\u04ce\3\2\2\2\u04ec\u04cf\3\2\2\2\u04ec\u04d1\3\2\2\2\u04ec\u04d2\3\2"+
		"\2\2\u04ec\u04d3\3\2\2\2\u04ec\u04d4\3\2\2\2\u04ec\u04d5\3\2\2\2\u04ec"+
		"\u04d6\3\2\2\2\u04ec\u04d7\3\2\2\2\u04ec\u04d8\3\2\2\2\u04ec\u04d9\3\2"+
		"\2\2\u04ec\u04da\3\2\2\2\u04ec\u04db\3\2\2\2\u04ec\u04dc\3\2\2\2\u04ec"+
		"\u04dd\3\2\2\2\u04ec\u04df\3\2\2\2\u04ec\u04e0\3\2\2\2\u04ec\u04e1\3\2"+
		"\2\2\u04ec\u04e2\3\2\2\2\u04ec\u04e3\3\2\2\2\u04ec\u04e4\3\2\2\2\u04ec"+
		"\u04e6\3\2\2\2\u04ec\u04e7\3\2\2\2\u04ec\u04e8\3\2\2\2\u04ec\u04ea\3\2"+
		"\2\2\u04ec\u04eb\3\2\2\2\u04ed\5\3\2\2\2\u04ee\u0509\7\u01ae\2\2\u04ef"+
		"\u050a\5\24\13\2\u04f0\u050a\5\b\5\2\u04f1\u04f2\7\u0254\2\2\u04f2\u04f4"+
		"\5\u041e\u0210\2\u04f3\u04f5\5j\66\2\u04f4\u04f3\3\2\2\2\u04f4\u04f5\3"+
		"\2\2\2\u04f5\u050a\3\2\2\2\u04f6\u04f7\7\u0166\2\2\u04f7\u04f9\5\u0422"+
		"\u0212\2\u04f8\u04fa\5j\66\2\u04f9\u04f8\3\2\2\2\u04f9\u04fa\3\2\2\2\u04fa"+
		"\u050a\3\2\2\2\u04fb\u050a\5H%\2\u04fc\u050a\5\n\6\2\u04fd\u050a\5:\36"+
		"\2\u04fe\u04ff\6\4\6\2\u04ff\u050a\5<\37\2\u0500\u050a\5\f\7\2\u0501\u050a"+
		"\5\22\n\2\u0502\u0503\6\4\7\2\u0503\u0504\7\u00a7\2\2\u0504\u0505\7\u012a"+
		"\2\2\u0505\u0506\5\u0494\u024b\2\u0506\u0507\7\u00bb\2\2\u0507\u0508\7"+
		"\u021b\2\2\u0508\u050a\3\2\2\2\u0509\u04ef\3\2\2\2\u0509\u04f0\3\2\2\2"+
		"\u0509\u04f1\3\2\2\2\u0509\u04f6\3\2\2\2\u0509\u04fb\3\2\2\2\u0509\u04fc"+
		"\3\2\2\2\u0509\u04fd\3\2\2\2\u0509\u04fe\3\2\2\2\u0509\u0500\3\2\2\2\u0509"+
		"\u0501\3\2\2\2\u0509\u0502\3\2\2\2\u050a\7\3\2\2\2\u050b\u050c\7\u01d5"+
		"\2\2\u050c\u0517\5\u041a\u020e\2\u050d\u050f\5T+\2\u050e\u050d\3\2\2\2"+
		"\u050f\u0510\3\2\2\2\u0510\u050e\3\2\2\2\u0510\u0511\3\2\2\2\u0511\u0518"+
		"\3\2\2\2\u0512\u0513\6\5\b\2\u0513\u0514\7\67\2\2\u0514\u0515\7o\2\2\u0515"+
		"\u0516\7y\2\2\u0516\u0518\7\u00e7\2\2\u0517\u050e\3\2\2\2\u0517\u0512"+
		"\3\2\2\2\u0518\t\3\2\2\2\u0519\u051b\5\u03c8\u01e5\2\u051a\u0519\3\2\2"+
		"\2\u051a\u051b\3\2\2\2\u051b\u051c\3\2\2\2\u051c\u051d\7\u0087\2\2\u051d"+
		"\u0521\5\u0436\u021c\2\u051e\u051f\7\u0245\2\2\u051f\u0520\7\u0131\2\2"+
		"\u0520\u0522\5\u0356\u01ac\2\u0521\u051e\3\2\2\2\u0521\u0522\3\2\2\2\u0522"+
		"\u0529\3\2\2\2\u0523\u0524\7\u0245\2\2\u0524\u0526\7_\2\2\u0525\u0527"+
		"\7\u023f\2\2\u0526\u0525\3\2\2\2\u0526\u0527\3\2\2\2\u0527\u0528\3\2\2"+
		"\2\u0528\u052a\7\u0104\2\2\u0529\u0523\3\2\2\2\u0529\u052a\3\2\2\2\u052a"+
		"\u052e\3\2\2\2\u052b\u052c\7\u025e\2\2\u052c\u052d\7\u028f\2\2\u052d\u052f"+
		"\5\u0460\u0231\2\u052e\u052b\3\2\2\2\u052e\u052f\3\2\2\2\u052f\u0536\3"+
		"\2\2\2\u0530\u0537\7\u0091\2\2\u0531\u0534\7z\2\2\u0532\u0533\7\u0245"+
		"\2\2\u0533\u0535\7/\2\2\u0534\u0532\3\2\2\2\u0534\u0535\3\2\2\2\u0535"+
		"\u0537\3\2\2\2\u0536\u0530\3\2\2\2\u0536\u0531\3\2\2\2\u0536\u0537\3\2"+
		"\2\2\u0537\u053a\3\2\2\2\u0538\u0539\7\r\2\2\u0539\u053b\5\u0480\u0241"+
		"\2\u053a\u0538\3\2\2\2\u053a\u053b\3\2\2\2\u053b\u053e\3\2\2\2\u053c\u053d"+
		"\7\21\2\2\u053d\u053f\5\u0308\u0185\2\u053e\u053c\3\2\2\2\u053e\u053f"+
		"\3\2\2\2\u053f\13\3\2\2\2\u0540\u0541\7\u00b8\2\2\u0541\u0542\7\u0202"+
		"\2\2\u0542\u0543\5\u0432\u021a\2\u0543\u0544\7\u01ac\2\2\u0544\u0545\7"+
		"\u016a\2\2\u0545\u0547\5\u0480\u0241\2\u0546\u0548\5\16\b\2\u0547\u0546"+
		"\3\2\2\2\u0547\u0548\3\2\2\2\u0548\r\3\2\2\2\u0549\u0550\5\20\t\2\u054a"+
		"\u054c\7\u0198\2\2\u054b\u054a\3\2\2\2\u054b\u054c\3\2\2\2\u054c\u054d"+
		"\3\2\2\2\u054d\u054f\5\20\t\2\u054e\u054b\3\2\2\2\u054f\u0552\3\2\2\2"+
		"\u0550\u054e\3\2\2\2\u0550\u0551\3\2\2\2\u0551\17\3\2\2\2\u0552\u0550"+
		"\3\2\2\2\u0553\u0557\5\u008cG\2\u0554\u0557\5\u0098M\2\u0555\u0557\5\u009a"+
		"N\2\u0556\u0553\3\2\2\2\u0556\u0554\3\2\2\2\u0556\u0555\3\2\2\2\u0557"+
		"\21\3\2\2\2\u0558\u0559\7-\2\2\u0559\u055a\5\u043c\u021f\2\u055a\u055b"+
		"\5|?\2\u055b\23\3\2\2\2\u055c\u055e\5\u0400\u0201\2\u055d\u055c\3\2\2"+
		"\2\u055d\u055e\3\2\2\2\u055e\u0561\3\2\2\2\u055f\u0560\6\13\t\2\u0560"+
		"\u0562\7\u020a\2\2\u0561\u055f\3\2\2\2\u0561\u0562\3\2\2\2\u0562\u0563"+
		"\3\2\2\2\u0563\u0564\7\u0289\2\2\u0564\u0566\5\u0446\u0224\2\u0565\u0567"+
		"\5\26\f\2\u0566\u0565\3\2\2\2\u0566\u0567\3\2\2\2\u0567\25\3\2\2\2\u0568"+
		"\u056b\5\30\r\2\u0569\u056c\5\u03b2\u01da\2\u056a\u056c\5\64\33\2\u056b"+
		"\u0569\3\2\2\2\u056b\u056a\3\2\2\2\u056b\u056c\3\2\2\2\u056c\u0576\3\2"+
		"\2\2\u056d\u0576\5\u03b2\u01da\2\u056e\u0576\5\64\33\2\u056f\u0570\5\32"+
		"\16\2\u0570\u0571\7\u0198\2\2\u0571\u0573\3\2\2\2\u0572\u056f\3\2\2\2"+
		"\u0572\u0573\3\2\2\2\u0573\u0574\3\2\2\2\u0574\u0576\5\34\17\2\u0575\u0568"+
		"\3\2\2\2\u0575\u056d\3\2\2\2\u0575\u056e\3\2\2\2\u0575\u0572\3\2\2\2\u0576"+
		"\27\3\2\2\2\u0577\u057f\5\32\16\2\u0578\u0579\5\32\16\2\u0579\u057a\7"+
		"\u0198\2\2\u057a\u057c\3\2\2\2\u057b\u0578\3\2\2\2\u057b\u057c\3\2\2\2"+
		"\u057c\u057d\3\2\2\2\u057d\u057f\5 \21\2\u057e\u0577\3\2\2\2\u057e\u057b"+
		"\3\2\2\2\u057f\31\3\2\2\2\u0580\u0585\5\"\22\2\u0581\u0582\7\u0198\2\2"+
		"\u0582\u0584\5\"\22\2\u0583\u0581\3\2\2\2\u0584\u0587\3\2\2\2\u0585\u0583"+
		"\3\2\2\2\u0585\u0586\3\2\2\2\u0586\33\3\2\2\2\u0587\u0585\3\2\2\2\u0588"+
		"\u0589\7{\2\2\u0589\u0590\7\u0158\2\2\u058a\u058b\7\u00a4\2\2\u058b\u0590"+
		"\7\u0158\2\2\u058c\u0590\5\36\20\2\u058d\u058e\6\17\n\2\u058e\u0590\t"+
		"\2\2\2\u058f\u0588\3\2\2\2\u058f\u058a\3\2\2\2\u058f\u058c\3\2\2\2\u058f"+
		"\u058d\3\2\2\2\u0590\35\3\2\2\2\u0591\u0592\7\u01ac\2\2\u0592\u0594\7"+
		"\"\2\2\u0593\u0595\5\u0402\u0202\2\u0594\u0593\3\2\2\2\u0594\u0595\3\2"+
		"\2\2\u0595\u0599\3\2\2\2\u0596\u059a\5\u03ba\u01de\2\u0597\u0598\7\u00fc"+
		"\2\2\u0598\u059a\5\u046e\u0238\2\u0599\u0596\3\2\2\2\u0599\u0597\3\2\2"+
		"\2\u059a\u05f3\3\2\2\2\u059b\u059c\7\u01e9\2\2\u059c\u059d\7\"\2\2\u059d"+
		"\u05f3\5\u0462\u0232\2\u059e\u059f\7\u0110\2\2\u059f\u05a1\7\"\2\2\u05a0"+
		"\u05a2\5\u0402\u0202\2\u05a1\u05a0\3\2\2\2\u05a1\u05a2\3\2\2\2\u05a2\u05a3"+
		"\3\2\2\2\u05a3\u05f3\5\66\34\2\u05a4\u05a5\7\u0248\2\2\u05a5\u05a7\7\""+
		"\2\2\u05a6\u05a8\5\u0402\u0202\2\u05a7\u05a6\3\2\2\2\u05a7\u05a8\3\2\2"+
		"\2\u05a8\u05a9\3\2\2\2\u05a9\u05ab\5\66\34\2\u05aa\u05ac\5\u0402\u0202"+
		"\2\u05ab\u05aa\3\2\2\2\u05ab\u05ac\3\2\2\2\u05ac\u05f3\3\2\2\2\u05ad\u05ae"+
		"\7A\2\2\u05ae\u05b0\7\"\2\2\u05af\u05b1\5\u0402\u0202\2\u05b0\u05af\3"+
		"\2\2\2\u05b0\u05b1\3\2\2\2\u05b1\u05b2\3\2\2\2\u05b2\u05f3\5\66\34\2\u05b3"+
		"\u05b4\7\u01c5\2\2\u05b4\u05b5\7\"\2\2\u05b5\u05b9\5\66\34\2\u05b6\u05b8"+
		"\5\u0230\u0119\2\u05b7\u05b6\3\2\2\2\u05b8\u05bb\3\2\2\2\u05b9\u05b7\3"+
		"\2\2\2\u05b9\u05ba\3\2\2\2\u05ba\u05f3\3\2\2\2\u05bb\u05b9\3\2\2\2\u05bc"+
		"\u05bd\7\'\2\2\u05bd\u05bf\7\"\2\2\u05be\u05c0\5\u0402\u0202\2\u05bf\u05be"+
		"\3\2\2\2\u05bf\u05c0\3\2\2\2\u05c0\u05c1\3\2\2\2\u05c1\u05c5\5\66\34\2"+
		"\u05c2\u05c4\5\u0232\u011a\2\u05c3\u05c2\3\2\2\2\u05c4\u05c7\3\2\2\2\u05c5"+
		"\u05c3\3\2\2\2\u05c5\u05c6\3\2\2\2\u05c6\u05f3\3\2\2\2\u05c7\u05c5\3\2"+
		"\2\2\u05c8\u05c9\7W\2\2\u05c9\u05cb\7\"\2\2\u05ca\u05cc\5\u0402\u0202"+
		"\2\u05cb\u05ca\3\2\2\2\u05cb\u05cc\3\2\2\2\u05cc\u05cd\3\2\2\2\u05cd\u05f3"+
		"\5\u046e\u0238\2\u05ce\u05cf\7\64\2\2\u05cf\u05d0\7\"\2\2\u05d0\u05f3"+
		"\5\66\34\2\u05d1\u05f3\58\35\2\u05d2\u05d3\7\u011b\2\2\u05d3\u05d5\7\""+
		"\2\2\u05d4\u05d6\5\u0402\u0202\2\u05d5\u05d4\3\2\2\2\u05d5\u05d6\3\2\2"+
		"\2\u05d6\u05db\3\2\2\2\u05d7\u05d8\5\u0462\u0232\2\u05d8\u05d9\7\u0212"+
		"\2\2\u05d9\u05da\5\u03ba\u01de\2\u05da\u05dc\3\2\2\2\u05db\u05d7\3\2\2"+
		"\2\u05db\u05dc\3\2\2\2\u05dc\u05f3\3\2\2\2\u05dd\u05de\7\u01f1\2\2\u05de"+
		"\u05df\7\"\2\2\u05df\u05e0\5\u0460\u0231\2\u05e0\u05e1\7\u02ac\2\2\u05e1"+
		"\u05e2\7\u0289\2\2\u05e2\u05e4\5\u0446\u0224\2\u05e3\u05e5\5\62\32\2\u05e4"+
		"\u05e3\3\2\2\2\u05e4\u05e5\3\2\2\2\u05e5\u05f3\3\2\2\2\u05e6\u05e7\6\20"+
		"\13\2\u05e7\u05e8\7{\2\2\u05e8\u05e9\7\"\2\2\u05e9\u05ea\5\66\34\2\u05ea"+
		"\u05eb\7\u0158\2\2\u05eb\u05f3\3\2\2\2\u05ec\u05ed\6\20\f\2\u05ed\u05ee"+
		"\7\u00a4\2\2\u05ee\u05ef\7\"\2\2\u05ef\u05f0\5\66\34\2\u05f0\u05f1\7\u0158"+
		"\2\2\u05f1\u05f3\3\2\2\2\u05f2\u0591\3\2\2\2\u05f2\u059b\3\2\2\2\u05f2"+
		"\u059e\3\2\2\2\u05f2\u05a4\3\2\2\2\u05f2\u05ad\3\2\2\2\u05f2\u05b3\3\2"+
		"\2\2\u05f2\u05bc\3\2\2\2\u05f2\u05c8\3\2\2\2\u05f2\u05ce\3\2\2\2\u05f2"+
		"\u05d1\3\2\2\2\u05f2\u05d2\3\2\2\2\u05f2\u05dd\3\2\2\2\u05f2\u05e6\3\2"+
		"\2\2\u05f2\u05ec\3\2\2\2\u05f3\37\3\2\2\2\u05f4\u05f7\5$\23\2\u05f5\u05f7"+
		"\5\u03a6\u01d4\2\u05f6\u05f4\3\2\2\2\u05f6\u05f5\3\2\2\2\u05f7\u0600\3"+
		"\2\2\2\u05f8\u05fc\7\u0198\2\2\u05f9\u05fd\5$\23\2\u05fa\u05fd\5\"\22"+
		"\2\u05fb\u05fd\5\u03a6\u01d4\2\u05fc\u05f9\3\2\2\2\u05fc\u05fa\3\2\2\2"+
		"\u05fc\u05fb\3\2\2\2\u05fd\u05ff\3\2\2\2\u05fe\u05f8\3\2\2\2\u05ff\u0602"+
		"\3\2\2\2\u0600\u05fe\3\2\2\2\u0600\u0601\3\2\2\2\u0601!\3\2\2\2\u0602"+
		"\u0600\3\2\2\2\u0603\u0607\5,\27\2\u0604\u0607\5.\30\2\u0605\u0607\5\62"+
		"\32\2\u0606\u0603\3\2\2\2\u0606\u0604\3\2\2\2\u0606\u0605\3\2\2\2\u0607"+
		"#\3\2\2\2\u0608\u060a\7\u01ac\2\2\u0609\u060b\7\u01c7\2\2\u060a\u0609"+
		"\3\2\2\2\u060a\u060b\3\2\2\2\u060b\u0618\3\2\2\2\u060c\u060d\5\u0460\u0231"+
		"\2\u060d\u060f\5\u0364\u01b3\2\u060e\u0610\5\u035a\u01ae\2\u060f\u060e"+
		"\3\2\2\2\u060f\u0610\3\2\2\2\u0610\u0612\3\2\2\2\u0611\u0613\5&\24\2\u0612"+
		"\u0611\3\2\2\2\u0612\u0613\3\2\2\2\u0613\u0619\3\2\2\2\u0614\u0615\7\u019b"+
		"\2\2\u0615\u0616\5X-\2\u0616\u0617\7\u019c\2\2\u0617\u0619\3\2\2\2\u0618"+
		"\u060c\3\2\2\2\u0618\u0614\3\2\2\2\u0619\u068e\3\2\2\2\u061a\u061b\7\u01ac"+
		"\2\2\u061b\u068e\5\u0360\u01b1\2\u061c\u061e\7\u01c3\2\2\u061d\u061f\7"+
		"\u01c7\2\2\u061e\u061d\3\2\2\2\u061e\u061f\3\2\2\2\u061f\u0620\3\2\2\2"+
		"\u0620\u0621\5\u040a\u0206\2\u0621\u0622\5\u0460\u0231\2\u0622\u0624\5"+
		"\u0364\u01b3\2\u0623\u0625\5&\24\2\u0624\u0623\3\2\2\2\u0624\u0625\3\2"+
		"\2\2\u0625\u068e\3\2\2\2\u0626\u0628\7\u00df\2\2\u0627\u0629\7\u01c7\2"+
		"\2\u0628\u0627\3\2\2\2\u0628\u0629\3\2\2\2\u0629\u062a\3\2\2\2\u062a\u062b"+
		"\5\u040a\u0206\2\u062b\u062d\5\u0364\u01b3\2\u062c\u062e\5&\24\2\u062d"+
		"\u062c\3\2\2\2\u062d\u062e\3\2\2\2\u062e\u068e\3\2\2\2\u062f\u0646\7\u01e9"+
		"\2\2\u0630\u0632\7\u01c7\2\2\u0631\u0630\3\2\2\2\u0631\u0632\3\2\2\2\u0632"+
		"\u0633\3\2\2\2\u0633\u0635\5\u040a\u0206\2\u0634\u0636\5(\25\2\u0635\u0634"+
		"\3\2\2\2\u0635\u0636\3\2\2\2\u0636\u0647\3\2\2\2\u0637\u0638\7\u01fb\2"+
		"\2\u0638\u063f\7\u021b\2\2\u0639\u063a\6\23\r\2\u063a\u0640\5\u040a\u0206"+
		"\2\u063b\u063d\6\23\16\2\u063c\u063e\5\u040a\u0206\2\u063d\u063c\3\2\2"+
		"\2\u063d\u063e\3\2\2\2\u063e\u0640\3\2\2\2\u063f\u0639\3\2\2\2\u063f\u063b"+
		"\3\2\2\2\u0640\u0647\3\2\2\2\u0641\u0642\7\u0253\2\2\u0642\u0647\7\u021b"+
		"\2\2\u0643\u0644\5\u0190\u00c9\2\u0644\u0645\5\u0414\u020b\2\u0645\u0647"+
		"\3\2\2\2\u0646\u0631\3\2\2\2\u0646\u0637\3\2\2\2\u0646\u0641\3\2\2\2\u0646"+
		"\u0643\3\2\2\2\u0647\u068e\3\2\2\2\u0648\u0649\7z\2\2\u0649\u068e\7\u021a"+
		"\2\2\u064a\u064b\7\u0091\2\2\u064b\u068e\7\u021a\2\2\u064c\u064e\7\u01ae"+
		"\2\2\u064d\u064f\7\u01c7\2\2\u064e\u064d\3\2\2\2\u064e\u064f\3\2\2\2\u064f"+
		"\u0650\3\2\2\2\u0650\u065a\5\u040a\u0206\2\u0651\u0652\7\u026d\2\2\u0652"+
		"\u0656\7\u01e0\2\2\u0653\u0654\6\23\17\2\u0654\u0657\5\u02fa\u017e\2\u0655"+
		"\u0657\5\u0476\u023c\2\u0656\u0653\3\2\2\2\u0656\u0655\3\2\2\2\u0657\u065b"+
		"\3\2\2\2\u0658\u0659\7\u01e9\2\2\u0659\u065b\7\u01e0\2\2\u065a\u0651\3"+
		"\2\2\2\u065a\u0658\3\2\2\2\u065b\u068e\3\2\2\2\u065c\u065d\6\23\20\2\u065d"+
		"\u065e\7\u01ae\2\2\u065e\u065f\7\u020b\2\2\u065f\u0660\5\u0414\u020b\2"+
		"\u0660\u0661\5\u0382\u01c2\2\u0661\u068e\3\2\2\2\u0662\u0663\6\23\21\2"+
		"\u0663\u0664\7\u01ae\2\2\u0664\u0665\7\u01c5\2\2\u0665\u0666\5\u0460\u0231"+
		"\2\u0666\u0667\5\u035e\u01b0\2\u0667\u068e\3\2\2\2\u0668\u0669\6\23\22"+
		"\2\u0669\u066a\7\u025e\2\2\u066a\u066b\7\u01c7\2\2\u066b\u066c\5\u040a"+
		"\u0206\2\u066c\u066d\7\u028f\2\2\u066d\u066e\5\u0460\u0231\2\u066e\u068e"+
		"\3\2\2\2\u066f\u0671\7\u025e\2\2\u0670\u0672\t\3\2\2\u0671\u0670\3\2\2"+
		"\2\u0671\u0672\3\2\2\2\u0672\u0673\3\2\2\2\u0673\u068e\5\u0440\u0221\2"+
		"\u0674\u0675\6\23\23\2\u0675\u0676\7\u025e\2\2\u0676\u0677\5\u0190\u00c9"+
		"\2\u0677\u0678\5\u0414\u020b\2\u0678\u0679\7\u028f\2\2\u0679\u067a\5\u0412"+
		"\u020a\2\u067a\u068e\3\2\2\2\u067b\u067c\7\u01cb\2\2\u067c\u067d\7\u028f"+
		"\2\2\u067d\u0681\5\u02ee\u0178\2\u067e\u067f\6\23\24\2\u067f\u0682\7\u01e0"+
		"\2\2\u0680\u0682\5\u03a0\u01d1\2\u0681\u067e\3\2\2\2\u0681\u0680\3\2\2"+
		"\2\u0682\u0684\3\2\2\2\u0683\u0685\5\u03d2\u01ea\2\u0684\u0683\3\2\2\2"+
		"\u0684\u0685\3\2\2\2\u0685\u068e\3\2\2\2\u0686\u068e\7\u01fa\2\2\u0687"+
		"\u0688\7\u024c\2\2\u0688\u0689\7\u01be\2\2\u0689\u068e\5*\26\2\u068a\u068b"+
		"\6\23\25\2\u068b\u068c\7\67\2\2\u068c\u068e\7\u00fb\2\2\u068d\u0608\3"+
		"\2\2\2\u068d\u061a\3\2\2\2\u068d\u061c\3\2\2\2\u068d\u0626\3\2\2\2\u068d"+
		"\u062f\3\2\2\2\u068d\u0648\3\2\2\2\u068d\u064a\3\2\2\2\u068d\u064c\3\2"+
		"\2\2\u068d\u065c\3\2\2\2\u068d\u0662\3\2\2\2\u068d\u0668\3\2\2\2\u068d"+
		"\u066f\3\2\2\2\u068d\u0674\3\2\2\2\u068d\u067b\3\2\2\2\u068d\u0686\3\2"+
		"\2\2\u068d\u0687\3\2\2\2\u068d\u068a\3\2\2\2\u068e%\3\2\2\2\u068f\u0690"+
		"\7=\2\2\u0690\u0693\5\u0460\u0231\2\u0691\u0693\7\u0096\2\2\u0692\u068f"+
		"\3\2\2\2\u0692\u0691\3\2\2\2\u0693\'\3\2\2\2\u0694\u0695\t\4\2\2\u0695"+
		")\3\2\2\2\u0696\u0698\5\u0460\u0231\2\u0697\u0699\5\u014c\u00a7\2\u0698"+
		"\u0697\3\2\2\2\u0698\u0699\3\2\2\2\u0699\u06a1\3\2\2\2\u069a\u069b\7\u0198"+
		"\2\2\u069b\u069d\5\u0460\u0231\2\u069c\u069e\5\u014c\u00a7\2\u069d\u069c"+
		"\3\2\2\2\u069d\u069e\3\2\2\2\u069e\u06a0\3\2\2\2\u069f\u069a\3\2\2\2\u06a0"+
		"\u06a3\3\2\2\2\u06a1\u069f\3\2\2\2\u06a1\u06a2\3\2\2\2\u06a2+\3\2\2\2"+
		"\u06a3\u06a1\3\2\2\2\u06a4\u06a6\7@\2\2\u06a5\u06a7\7\u0181\2\2\u06a6"+
		"\u06a5\3\2\2\2\u06a6\u06a7\3\2\2\2\u06a7\u06aa\3\2\2\2\u06a8\u06ab\7\u01e0"+
		"\2\2\u06a9\u06ab\5\u0460\u0231\2\u06aa\u06a8\3\2\2\2\u06aa\u06a9\3\2\2"+
		"\2\u06ab-\3\2\2\2\u06ac\u06ae\7\u0226\2\2\u06ad\u06af\7\u0181\2\2\u06ae"+
		"\u06ad\3\2\2\2\u06ae\u06af\3\2\2\2\u06af\u06b2\3\2\2\2\u06b0\u06b3\7\u01e0"+
		"\2\2\u06b1\u06b3\5\u0460\u0231\2\u06b2\u06b0\3\2\2\2\u06b2\u06b1\3\2\2"+
		"\2\u06b3/\3\2\2\2\u06b4\u06b6\5,\27\2\u06b5\u06b7\5.\30\2\u06b6\u06b5"+
		"\3\2\2\2\u06b6\u06b7\3\2\2\2\u06b7\u06bd\3\2\2\2\u06b8\u06ba\5.\30\2\u06b9"+
		"\u06bb\5,\27\2\u06ba\u06b9\3\2\2\2\u06ba\u06bb\3\2\2\2\u06bb\u06bd\3\2"+
		"\2\2\u06bc\u06b4\3\2\2\2\u06bc\u06b8\3\2\2\2\u06bd\61\3\2\2\2\u06be\u06bf"+
		"\6\32\26\2\u06bf\u06c0\t\5\2\2\u06c0\u06c1\7\u02a0\2\2\u06c1\63\3\2\2"+
		"\2\u06c2\u06c3\7&\2\2\u06c3\u06c4\7\u00fb\2\2\u06c4\65\3\2\2\2\u06c5\u06c8"+
		"\7\u01ad\2\2\u06c6\u06c8\5\u0462\u0232\2\u06c7\u06c5\3\2\2\2\u06c7\u06c6"+
		"\3\2\2\2\u06c8\67\3\2\2\2\u06c9\u06ca\7\u011b\2\2\u06ca\u06cc\7\"\2\2"+
		"\u06cb\u06cd\5\u0402\u0202\2\u06cc\u06cb\3\2\2\2\u06cc\u06cd\3\2\2\2\u06cd"+
		"\u06d2\3\2\2\2\u06ce\u06cf\5\u0462\u0232\2\u06cf\u06d0\7\u0212\2\2\u06d0"+
		"\u06d1\5\u03ba\u01de\2\u06d1\u06d3\3\2\2\2\u06d2\u06ce\3\2\2\2\u06d2\u06d3"+
		"\3\2\2\2\u06d39\3\2\2\2\u06d4\u06d5\7\u0158\2\2\u06d5\u06f7\5\u042e\u0218"+
		"\2\u06d6\u06d7\t\6\2\2\u06d7\u06d8\7p\2\2\u06d8\u06da\5\u0480\u0241\2"+
		"\u06d9\u06db\5B\"\2\u06da\u06d9\3\2\2\2\u06da\u06db\3\2\2\2\u06db\u06f8"+
		"\3\2\2\2\u06dc\u06f0\6\36\27\2\u06dd\u06f1\3\2\2\2\u06de\u06df\7\u01c3"+
		"\2\2\u06df\u06e0\7p\2\2\u06e0\u06eb\5\u0480\u0241\2\u06e1\u06e8\5F$\2"+
		"\u06e2\u06e4\7\u0198\2\2\u06e3\u06e2\3\2\2\2\u06e3\u06e4\3\2\2\2\u06e4"+
		"\u06e5\3\2\2\2\u06e5\u06e7\5F$\2\u06e6\u06e3\3\2\2\2\u06e7\u06ea\3\2\2"+
		"\2\u06e8\u06e6\3\2\2\2\u06e8\u06e9\3\2\2\2\u06e9\u06ec\3\2\2\2\u06ea\u06e8"+
		"\3\2\2\2\u06eb\u06e1\3\2\2\2\u06eb\u06ec\3\2\2\2\u06ec\u06f1\3\2\2\2\u06ed"+
		"\u06f1\t\7\2\2\u06ee\u06ef\7\u023f\2\2\u06ef\u06f1\7\u01ab\2\2\u06f0\u06dd"+
		"\3\2\2\2\u06f0\u06de\3\2\2\2\u06f0\u06ed\3\2\2\2\u06f0\u06ee\3\2\2\2\u06f1"+
		"\u06f8\3\2\2\2\u06f2\u06f3\7\u025e\2\2\u06f3\u06f4\7\u028f\2\2\u06f4\u06f8"+
		"\5\u0460\u0231\2\u06f5\u06f6\6\36\30\2\u06f6\u06f8\5B\"\2\u06f7\u06d6"+
		"\3\2\2\2\u06f7\u06dc\3\2\2\2\u06f7\u06f2\3\2\2\2\u06f7\u06f5\3\2\2\2\u06f8"+
		";\3\2\2\2\u06f9\u06fa\7\u0294\2\2\u06fa\u06fb\7\u0158\2\2\u06fb\u06fc"+
		"\5\u042e\u0218\2\u06fc\u06fd\7\u026d\2\2\u06fd\u06ff\t\b\2\2\u06fe\u0700"+
		"\5> \2\u06ff\u06fe\3\2\2\2\u06ff\u0700\3\2\2\2\u0700=\3\2\2\2\u0701\u0708"+
		"\5@!\2\u0702\u0704\7\u0198\2\2\u0703\u0702\3\2\2\2\u0703\u0704\3\2\2\2"+
		"\u0704\u0705\3\2\2\2\u0705\u0707\5@!\2\u0706\u0703\3\2\2\2\u0707\u070a"+
		"\3\2\2\2\u0708\u0706\3\2\2\2\u0708\u0709\3\2\2\2\u0709?\3\2\2\2\u070a"+
		"\u0708\3\2\2\2\u070b\u070c\5\u0098M\2\u070cA\3\2\2\2\u070d\u0714\5D#\2"+
		"\u070e\u0710\7\u0198\2\2\u070f\u070e\3\2\2\2\u070f\u0710\3\2\2\2\u0710"+
		"\u0711\3\2\2\2\u0711\u0713\5D#\2\u0712\u070f\3\2\2\2\u0713\u0716\3\2\2"+
		"\2\u0714\u0712\3\2\2\2\u0714\u0715\3\2\2\2\u0715C\3\2\2\2\u0716\u0714"+
		"\3\2\2\2\u0717\u0719\7\u00a6\2\2\u0718\u071a\7\u0181\2\2\u0719\u0718\3"+
		"\2\2\2\u0719\u071a\3\2\2\2\u071a\u071b\3\2\2\2\u071b\u0722\5\u049a\u024e"+
		"\2\u071c\u0722\5\u0090I\2\u071d\u0722\5\u0092J\2\u071e\u0722\5\u0098M"+
		"\2\u071f\u0722\5\u009aN\2\u0720\u0722\5\u00a0Q\2\u0721\u0717\3\2\2\2\u0721"+
		"\u071c\3\2\2\2\u0721\u071d\3\2\2\2\u0721\u071e\3\2\2\2\u0721\u071f\3\2"+
		"\2\2\u0721\u0720\3\2\2\2\u0722E\3\2\2\2\u0723\u0725\7\u00a6\2\2\u0724"+
		"\u0726\7\u0181\2\2\u0725\u0724\3\2\2\2\u0725\u0726\3\2\2\2\u0726\u0727"+
		"\3\2\2\2\u0727\u072b\5\u049a\u024e\2\u0728\u072b\5\u0090I\2\u0729\u072b"+
		"\5\u0092J\2\u072a\u0723\3\2\2\2\u072a\u0728\3\2\2\2\u072a\u0729\3\2\2"+
		"\2\u072bG\3\2\2\2\u072c\u072e\5\u00a6T\2\u072d\u072c\3\2\2\2\u072d\u072e"+
		"\3\2\2\2\u072e\u0730\3\2\2\2\u072f\u0731\5\u03c8\u01e5\2\u0730\u072f\3"+
		"\2\2\2\u0730\u0731\3\2\2\2\u0731\u0733\3\2\2\2\u0732\u0734\5\u00a8U\2"+
		"\u0733\u0732\3\2\2\2\u0733\u0734\3\2\2\2\u0734\u0735\3\2\2\2\u0735\u0736"+
		"\7\u0171\2\2\u0736\u0737\5\u042a\u0216\2\u0737\u0738\5J&\2\u0738I\3\2"+
		"\2\2\u0739\u073b\5\u040c\u0207\2\u073a\u0739\3\2\2\2\u073a\u073b\3\2\2"+
		"\2\u073b\u073c\3\2\2\2\u073c\u073d\7\u01b1\2\2\u073d\u073e\5L\'\2\u073e"+
		"K\3\2\2\2\u073f\u0741\5^\60\2\u0740\u0742\5N(\2\u0741\u0740\3\2\2\2\u0741"+
		"\u0742\3\2\2\2\u0742M\3\2\2\2\u0743\u0745\7\u02ac\2\2\u0744\u0746\t\t"+
		"\2\2\u0745\u0744\3\2\2\2\u0745\u0746\3\2\2\2\u0746\u0747\3\2\2\2\u0747"+
		"\u0748\7\u01c5\2\2\u0748\u0749\7\u024a\2\2\u0749O\3\2\2\2\u074a\u075d"+
		"\7\u01cd\2\2\u074b\u075e\5R*\2\u074c\u075e\5V,\2\u074d\u075e\5d\63\2\u074e"+
		"\u075e\5b\62\2\u074f\u075e\5f\64\2\u0750\u075e\5t;\2\u0751\u075e\5\u00a2"+
		"R\2\u0752\u075e\5\u00aaV\2\u0753\u075e\5n8\2\u0754\u075e\5z>\2\u0755\u075e"+
		"\5\u0080A\2\u0756\u075e\5\u00aeX\2\u0757\u0758\6)\31\2\u0758\u075e\5\u00b0"+
		"Y\2\u0759\u075a\6)\32\2\u075a\u075e\5\u00b2Z\2\u075b\u075c\6)\33\2\u075c"+
		"\u075e\5\u0082B\2\u075d\u074b\3\2\2\2\u075d\u074c\3\2\2\2\u075d\u074d"+
		"\3\2\2\2\u075d\u074e\3\2\2\2\u075d\u074f\3\2\2\2\u075d\u0750\3\2\2\2\u075d"+
		"\u0751\3\2\2\2\u075d\u0752\3\2\2\2\u075d\u0753\3\2\2\2\u075d\u0754\3\2"+
		"\2\2\u075d\u0755\3\2\2\2\u075d\u0756\3\2\2\2\u075d\u0757\3\2\2\2\u075d"+
		"\u0759\3\2\2\2\u075d\u075b\3\2\2\2\u075eQ\3\2\2\2\u075f\u0761\7\u01d5"+
		"\2\2\u0760\u0762\5\u03cc\u01e7\2\u0761\u0760\3\2\2\2\u0761\u0762\3\2\2"+
		"\2\u0762\u0763\3\2\2\2\u0763\u0767\5\u0418\u020d\2\u0764\u0766\5T+\2\u0765"+
		"\u0764\3\2\2\2\u0766\u0769\3\2\2\2\u0767\u0765\3\2\2\2\u0767\u0768\3\2"+
		"\2\2\u0768S\3\2\2\2\u0769\u0767\3\2\2\2\u076a\u076f\5\u03b0\u01d9\2\u076b"+
		"\u076f\5\u03ac\u01d7\2\u076c\u076d\6+\34\2\u076d\u076f\5\u03ae\u01d8\2"+
		"\u076e\u076a\3\2\2\2\u076e\u076b\3\2\2\2\u076e\u076c\3\2\2\2\u076fU\3"+
		"\2\2\2\u0770\u0772\7\u0159\2\2\u0771\u0770\3\2\2\2\u0771\u0772\3\2\2\2"+
		"\u0772\u0773\3\2\2\2\u0773\u0775\7\u0289\2\2\u0774\u0776\5\u03cc\u01e7"+
		"\2\u0775\u0774\3\2\2\2\u0775\u0776\3\2\2\2\u0776\u0777\3\2\2\2\u0777\u078e"+
		"\5\u0440\u0221\2\u0778\u0779\7\u019b\2\2\u0779\u077a\5X-\2\u077a\u077b"+
		"\7\u019c\2\2\u077b\u077d\3\2\2\2\u077c\u0778\3\2\2\2\u077c\u077d\3\2\2"+
		"\2\u077d\u077f\3\2\2\2\u077e\u0780\5\u03a4\u01d3\2\u077f\u077e\3\2\2\2"+
		"\u077f\u0780\3\2\2\2\u0780\u0782\3\2\2\2\u0781\u0783\5\u03b2\u01da\2\u0782"+
		"\u0781\3\2\2\2\u0782\u0783\3\2\2\2\u0783\u0785\3\2\2\2\u0784\u0786\5\\"+
		"/\2\u0785\u0784\3\2\2\2\u0785\u0786\3\2\2\2\u0786\u078f\3\2\2\2\u0787"+
		"\u0788\7\u0220\2\2\u0788\u078f\5\u0446\u0224\2\u0789\u078a\7\u019b\2\2"+
		"\u078a\u078b\7\u0220\2\2\u078b\u078c\5\u0446\u0224\2\u078c\u078d\7\u019c"+
		"\2\2\u078d\u078f\3\2\2\2\u078e\u077c\3\2\2\2\u078e\u0787\3\2\2\2\u078e"+
		"\u0789\3\2\2\2\u078fW\3\2\2\2\u0790\u0795\5Z.\2\u0791\u0792\7\u0198\2"+
		"\2\u0792\u0794\5Z.\2\u0793\u0791\3\2\2\2\u0794\u0797\3\2\2\2\u0795\u0793"+
		"\3\2\2\2\u0795\u0796\3\2\2\2\u0796Y\3\2\2\2\u0797\u0795\3\2\2\2\u0798"+
		"\u079b\5\u0358\u01ad\2\u0799\u079b\5\u0360\u01b1\2\u079a\u0798\3\2\2\2"+
		"\u079a\u0799\3\2\2\2\u079b[\3\2\2\2\u079c\u079e\t\n\2\2\u079d\u079c\3"+
		"\2\2\2\u079d\u079e\3\2\2\2\u079e\u07a0\3\2\2\2\u079f\u07a1\7\u01b1\2\2"+
		"\u07a0\u079f\3\2\2\2\u07a0\u07a1\3\2\2\2\u07a1\u07a2\3\2\2\2\u07a2\u07a3"+
		"\5^\60\2\u07a3]\3\2\2\2\u07a4\u07a7\5\u0112\u008a\2\u07a5\u07a7\5\u0116"+
		"\u008c\2\u07a6\u07a4\3\2\2\2\u07a6\u07a5\3\2\2\2\u07a7_\3\2\2\2\u07a8"+
		"\u07ac\7\u01cd\2\2\u07a9\u07ad\5b\62\2\u07aa\u07ad\5d\63\2\u07ab\u07ad"+
		"\5f\64\2\u07ac\u07a9\3\2\2\2\u07ac\u07aa\3\2\2\2\u07ac\u07ab\3\2\2\2\u07ad"+
		"\u07af\3\2\2\2\u07ae\u07b0\7\u0199\2\2\u07af\u07ae\3\2\2\2\u07af\u07b0"+
		"\3\2\2\2\u07b0\u07b1\3\2\2\2\u07b1\u07b2\7\2\2\3\u07b2a\3\2\2\2\u07b3"+
		"\u07b5\5\u03c8\u01e5\2\u07b4\u07b3\3\2\2\2\u07b4\u07b5\3\2\2\2\u07b5\u07b6"+
		"\3\2\2\2\u07b6\u07b7\7\u0254\2\2\u07b7\u07b8\5\u041c\u020f\2\u07b8\u07c1"+
		"\7\u019b\2\2\u07b9\u07be\5\u03ce\u01e8\2\u07ba\u07bb\7\u0198\2\2\u07bb"+
		"\u07bd\5\u03ce\u01e8\2\u07bc\u07ba\3\2\2\2\u07bd\u07c0\3\2\2\2\u07be\u07bc"+
		"\3\2\2\2\u07be\u07bf\3\2\2\2\u07bf\u07c2\3\2\2\2\u07c0\u07be\3\2\2\2\u07c1"+
		"\u07b9\3\2\2\2\u07c1\u07c2\3\2\2\2\u07c2\u07c3\3\2\2\2\u07c3\u07c7\7\u019c"+
		"\2\2\u07c4\u07c6\5h\65\2\u07c5\u07c4\3\2\2\2\u07c6\u07c9\3\2\2\2\u07c7"+
		"\u07c5\3\2\2\2\u07c7\u07c8\3\2\2\2\u07c8\u07ca\3\2\2\2\u07c9\u07c7\3\2"+
		"\2\2\u07ca\u07cb\5\u0308\u0185\2\u07cbc\3\2\2\2\u07cc\u07ce\5\u03c8\u01e5"+
		"\2\u07cd\u07cc\3\2\2\2\u07cd\u07ce\3\2\2\2\u07ce\u07cf\3\2\2\2\u07cf\u07d0"+
		"\7\u0166\2\2\u07d0\u07d1\5\u0420\u0211\2\u07d1\u07da\7\u019b\2\2\u07d2"+
		"\u07d7\5\u03d0\u01e9\2\u07d3\u07d4\7\u0198\2\2\u07d4\u07d6\5\u03d0\u01e9"+
		"\2\u07d5\u07d3\3\2\2\2\u07d6\u07d9\3\2\2\2\u07d7\u07d5\3\2\2\2\u07d7\u07d8"+
		"\3\2\2\2\u07d8\u07db\3\2\2\2\u07d9\u07d7\3\2\2\2\u07da\u07d2\3\2\2\2\u07da"+
		"\u07db\3\2\2\2\u07db\u07dc\3\2\2\2\u07dc\u07dd\7\u019c\2\2\u07dd\u07de"+
		"\7\u0127\2\2\u07de\u07e2\5\u03d4\u01eb\2\u07df\u07e1\5h\65\2\u07e0\u07df"+
		"\3\2\2\2\u07e1\u07e4\3\2\2\2\u07e2\u07e0\3\2\2\2\u07e2\u07e3\3\2\2\2\u07e3"+
		"\u07e5\3\2\2\2\u07e4\u07e2\3\2\2\2\u07e5\u07e6\5\u0308\u0185\2\u07e6e"+
		"\3\2\2\2\u07e7\u07e9\7?\2\2\u07e8\u07e7\3\2\2\2\u07e8\u07e9\3\2\2\2\u07e9"+
		"\u07ea\3\2\2\2\u07ea\u07eb\7\u0166\2\2\u07eb\u07ec\5\u0438\u021d\2\u07ec"+
		"\u07ed\7\u0127\2\2\u07ed\u07ee\t\13\2\2\u07ee\u07ef\7\61\2\2\u07ef\u07f0"+
		"\5\u0480\u0241\2\u07f0g\3\2\2\2\u07f1\u07f7\5l\67\2\u07f2\u07f4\7\u023f"+
		"\2\2\u07f3\u07f2\3\2\2\2\u07f3\u07f4\3\2\2\2\u07f4\u07f5\3\2\2\2\u07f5"+
		"\u07f7\7\u01e5\2\2\u07f6\u07f1\3\2\2\2\u07f6\u07f3\3\2\2\2\u07f7i\3\2"+
		"\2\2\u07f8\u07fa\5h\65\2\u07f9\u07f8\3\2\2\2\u07fa\u07fb\3\2\2\2\u07fb"+
		"\u07f9\3\2\2\2\u07fb\u07fc\3\2\2\2\u07fck\3\2\2\2\u07fd\u07fe\7\r\2\2"+
		"\u07fe\u080f\5\u0480\u0241\2\u07ff\u0800\7\34\2\2\u0800\u080f\7\u027a"+
		"\2\2\u0801\u0802\7\35\2\2\u0802\u080f\7\u027a\2\2\u0803\u0804\7\17\2\2"+
		"\u0804\u080f\7\u027a\2\2\u0805\u0806\7\u0257\2\2\u0806\u0807\7\u027a\2"+
		"\2\u0807\u080f\7o\2\2\u0808\u0809\7\u0239\2\2\u0809\u080a\7\u027a\2\2"+
		"\u080a\u080f\7o\2\2\u080b\u080c\7\u027a\2\2\u080c\u080d\7,\2\2\u080d\u080f"+
		"\t\f\2\2\u080e\u07fd\3\2\2\2\u080e\u07ff\3\2\2\2\u080e\u0801\3\2\2\2\u080e"+
		"\u0803\3\2\2\2\u080e\u0805\3\2\2\2\u080e\u0808\3\2\2\2\u080e\u080b\3\2"+
		"\2\2\u080fm\3\2\2\2\u0810\u0812\5\u0400\u0201\2\u0811\u0810\3\2\2\2\u0811"+
		"\u0812\3\2\2\2\u0812\u083c\3\2\2\2\u0813\u0815\7\u0296\2\2\u0814\u0813"+
		"\3\2\2\2\u0814\u0815\3\2\2\2\u0815\u0816\3\2\2\2\u0816\u081f\7\u020b\2"+
		"\2\u0817\u0818\68\35\2\u0818\u081a\5\u0412\u020a\2\u0819\u081b\5\u0384"+
		"\u01c3\2\u081a\u0819\3\2\2\2\u081a\u081b\3\2\2\2\u081b\u0820\3\2\2\2\u081c"+
		"\u081e\5p9\2\u081d\u081c\3\2\2\2\u081d\u081e\3\2\2\2\u081e\u0820\3\2\2"+
		"\2\u081f\u0817\3\2\2\2\u081f\u081d\3\2\2\2\u0820\u0821\3\2\2\2\u0821\u0825"+
		"\5r:\2\u0822\u0824\5\u037e\u01c0\2\u0823\u0822\3\2\2\2\u0824\u0827\3\2"+
		"\2\2\u0825\u0823\3\2\2\2\u0825\u0826\3\2\2\2\u0826\u083d\3\2\2\2\u0827"+
		"\u0825\3\2\2\2\u0828\u0829\7\u01fe\2\2\u0829\u082a\7\u020b\2\2\u082a\u082b"+
		"\5\u0412\u020a\2\u082b\u082f\5r:\2\u082c\u082e\5\u0386\u01c4\2\u082d\u082c"+
		"\3\2\2\2\u082e\u0831\3\2\2\2\u082f\u082d\3\2\2\2\u082f\u0830\3\2\2\2\u0830"+
		"\u083d\3\2\2\2\u0831\u082f\3\2\2\2\u0832\u0833\7\u0272\2\2\u0833\u0834"+
		"\7\u020b\2\2\u0834\u0835\5\u0412\u020a\2\u0835\u0839\5r:\2\u0836\u0838"+
		"\5\u0388\u01c5\2\u0837\u0836\3\2\2\2\u0838\u083b\3\2\2\2\u0839\u0837\3"+
		"\2\2\2\u0839\u083a\3\2\2\2\u083a\u083d\3\2\2\2\u083b\u0839\3\2\2\2\u083c"+
		"\u0814\3\2\2\2\u083c\u0828\3\2\2\2\u083c\u0832\3\2\2\2\u083d\u083f\3\2"+
		"\2\2\u083e\u0840\5\60\31\2\u083f\u083e\3\2\2\2\u083f\u0840\3\2\2\2\u0840"+
		"o\3\2\2\2\u0841\u0844\5\u0412\u020a\2\u0842\u0843\7\u029c\2\2\u0843\u0845"+
		"\5\u037c\u01bf\2\u0844\u0842\3\2\2\2\u0844\u0845\3\2\2\2\u0845\u084b\3"+
		"\2\2\2\u0846\u0847\5\u0412\u020a\2\u0847\u0848\7\u0164\2\2\u0848\u0849"+
		"\5\u037c\u01bf\2\u0849\u084b\3\2\2\2\u084a\u0841\3\2\2\2\u084a\u0846\3"+
		"\2\2\2\u084bq\3\2\2\2\u084c\u084d\7\u0245\2\2\u084d\u084e\5\u0446\u0224"+
		"\2\u084e\u084f\5\u037a\u01be\2\u084fs\3\2\2\2\u0850\u0851\7\u00b8\2\2"+
		"\u0851\u0852\7\u0202\2\2\u0852\u0853\5\u0430\u0219\2\u0853\u0854\7\u01ac"+
		"\2\2\u0854\u0855\t\r\2\2\u0855\u0857\5\u0480\u0241\2\u0856\u0858\5v<\2"+
		"\u0857\u0856\3\2\2\2\u0857\u0858\3\2\2\2\u0858u\3\2\2\2\u0859\u0860\5"+
		"x=\2\u085a\u085c\7\u0198\2\2\u085b\u085a\3\2\2\2\u085b\u085c\3\2\2\2\u085c"+
		"\u085d\3\2\2\2\u085d\u085f\5x=\2\u085e\u085b\3\2\2\2\u085f\u0862\3\2\2"+
		"\2\u0860\u085e\3\2\2\2\u0860\u0861\3\2\2\2\u0861w\3\2\2\2\u0862\u0860"+
		"\3\2\2\2\u0863\u086a\5\u008cG\2\u0864\u086a\5\u008eH\2\u0865\u086a\5\u0096"+
		"L\2\u0866\u086a\5\u0098M\2\u0867\u086a\5\u009aN\2\u0868\u086a\5\u009c"+
		"O\2\u0869\u0863\3\2\2\2\u0869\u0864\3\2\2\2\u0869\u0865\3\2\2\2\u0869"+
		"\u0866\3\2\2\2\u0869\u0867\3\2\2\2\u0869\u0868\3\2\2\2\u086ay\3\2\2\2"+
		"\u086b\u086c\7-\2\2\u086c\u086d\5\u043a\u021e\2\u086d\u086e\7\u01fb\2"+
		"\2\u086e\u086f\7o\2\2\u086f\u0870\78\2\2\u0870\u0871\5\u0494\u024b\2\u0871"+
		"\u0872\5|?\2\u0872{\3\2\2\2\u0873\u0874\7\37\2\2\u0874\u0875\7\u019b\2"+
		"\2\u0875\u087a\5~@\2\u0876\u0877\7\u0198\2\2\u0877\u0879\5~@\2\u0878\u0876"+
		"\3\2\2\2\u0879\u087c\3\2\2\2\u087a\u0878\3\2\2\2\u087a\u087b\3\2\2\2\u087b"+
		"\u087d\3\2\2\2\u087c\u087a\3\2\2\2\u087d\u087e\7\u019c\2\2\u087e}\3\2"+
		"\2\2\u087f\u0880\7\32\2\2\u0880\u088e\5\u0480\u0241\2\u0881\u0882\7\u01d5"+
		"\2\2\u0882\u088e\5\u0480\u0241\2\u0883\u0884\7\u016e\2\2\u0884\u088e\5"+
		"\u0480\u0241\2\u0885\u0886\7\u00fd\2\2\u0886\u088e\5\u0480\u0241\2\u0887"+
		"\u0888\7\60\2\2\u0888\u088e\5\u0480\u0241\2\u0889\u088a\7 \2\2\u088a\u088e"+
		"\5\u0480\u0241\2\u088b\u088c\7#\2\2\u088c\u088e\5\u046c\u0237\2\u088d"+
		"\u087f\3\2\2\2\u088d\u0881\3\2\2\2\u088d\u0883\3\2\2\2\u088d\u0885\3\2"+
		"\2\2\u088d\u0887\3\2\2\2\u088d\u0889\3\2\2\2\u088d\u088b\3\2\2\2\u088e"+
		"\177\3\2\2\2\u088f\u0890\7\u0158\2\2\u0890\u0891\5\u042c\u0217\2\u0891"+
		"\u0896\5\u0084C\2\u0892\u0893\7\u029b\2\2\u0893\u0894\7\u00b8\2\2\u0894"+
		"\u0895\7\u0202\2\2\u0895\u0897\5\u0432\u021a\2\u0896\u0892\3\2\2\2\u0896"+
		"\u0897\3\2\2\2\u0897\u0899\3\2\2\2\u0898\u089a\5\u0088E\2\u0899\u0898"+
		"\3\2\2\2\u0899\u089a\3\2\2\2\u089a\u0081\3\2\2\2\u089b\u089c\7\u0294\2"+
		"\2\u089c\u089d\7\u0158\2\2\u089d\u089e\5\u042c\u0217\2\u089e\u089f\7\u01ac"+
		"\2\2\u089f\u08a1\5\u0086D\2\u08a0\u08a2\5> \2\u08a1\u08a0\3\2\2\2\u08a1"+
		"\u08a2\3\2\2\2\u08a2\u0083\3\2\2\2\u08a3\u08a6\6C\36\2\u08a4\u08a5\7\u01ac"+
		"\2\2\u08a5\u08a7\5\u0086D\2\u08a6\u08a4\3\2\2\2\u08a6\u08a7\3\2\2\2\u08a7"+
		"\u08ab\3\2\2\2\u08a8\u08a9\7\u01ac\2\2\u08a9\u08ab\5\u0086D\2\u08aa\u08a3"+
		"\3\2\2\2\u08aa\u08a8\3\2\2\2\u08ab\u0085\3\2\2\2\u08ac\u08ad\7p\2\2\u08ad"+
		"\u08ae\5\u0480\u0241\2\u08ae\u0087\3\2\2\2\u08af\u08b6\5\u008aF\2\u08b0"+
		"\u08b2\7\u0198\2\2\u08b1\u08b0\3\2\2\2\u08b1\u08b2\3\2\2\2\u08b2\u08b3"+
		"\3\2\2\2\u08b3\u08b5\5\u008aF\2\u08b4\u08b1\3\2\2\2\u08b5\u08b8\3\2\2"+
		"\2\u08b6\u08b4\3\2\2\2\u08b6\u08b7\3\2\2\2\u08b7\u0089\3\2\2\2\u08b8\u08b6"+
		"\3\2\2\2\u08b9\u08c6\5\u008cG\2\u08ba\u08c6\5\u0090I\2\u08bb\u08c6\5\u0092"+
		"J\2\u08bc\u08c6\5\u0094K\2\u08bd\u08c6\5\u0096L\2\u08be\u08c6\5\u0098"+
		"M\2\u08bf\u08c6\5\u009aN\2\u08c0\u08c6\5\u009cO\2\u08c1\u08c2\6F\37\2"+
		"\u08c2\u08c6\5\u009eP\2\u08c3\u08c4\6F \2\u08c4\u08c6\5\u00a0Q\2\u08c5"+
		"\u08b9\3\2\2\2\u08c5\u08ba\3\2\2\2\u08c5\u08bb\3\2\2\2\u08c5\u08bc\3\2"+
		"\2\2\u08c5\u08bd\3\2\2\2\u08c5\u08be\3\2\2\2\u08c5\u08bf\3\2\2\2\u08c5"+
		"\u08c0\3\2\2\2\u08c5\u08c1\3\2\2\2\u08c5\u08c3\3\2\2\2\u08c6\u008b\3\2"+
		"\2\2\u08c7\u08c9\7\u00a6\2\2\u08c8\u08ca\7\u0181\2\2\u08c9\u08c8\3\2\2"+
		"\2\u08c9\u08ca\3\2\2\2\u08ca\u08cb\3\2\2\2\u08cb\u08cc\5\u049a\u024e\2"+
		"\u08cc\u008d\3\2\2\2\u08cd\u08cf\t\16\2\2\u08ce\u08d0\7\u0181\2\2\u08cf"+
		"\u08ce\3\2\2\2\u08cf\u08d0\3\2\2\2\u08d0\u08d1\3\2\2\2\u08d1\u08d2\5\u049a"+
		"\u024e\2\u08d2\u008f\3\2\2\2\u08d3\u08d5\7F\2\2\u08d4\u08d6\7\u0181\2"+
		"\2\u08d5\u08d4\3\2\2\2\u08d5\u08d6\3\2\2\2\u08d6\u08d7\3\2\2\2\u08d7\u08d8"+
		"\5\u049a\u024e\2\u08d8\u0091\3\2\2\2\u08d9\u08db\7\u00d4\2\2\u08da\u08dc"+
		"\7\u0181\2\2\u08db\u08da\3\2\2\2\u08db\u08dc\3\2\2\2\u08dc\u08dd\3\2\2"+
		"\2\u08dd\u08de\5\u049a\u024e\2\u08de\u0093\3\2\2\2\u08df\u08e1\7\u008d"+
		"\2\2\u08e0\u08e2\7\u0181\2\2\u08e1\u08e0\3\2\2\2\u08e1\u08e2\3\2\2\2\u08e2"+
		"\u08e3\3\2\2\2\u08e3\u08e4\5\u049a\u024e\2\u08e4\u0095\3\2\2\2\u08e5\u08e7"+
		"\7\u00f0\2\2\u08e6\u08e8\7\u0181\2\2\u08e7\u08e6\3\2\2\2\u08e7\u08e8\3"+
		"\2\2\2\u08e8\u08e9\3\2\2\2\u08e9\u08ea\5\u046e\u0238\2\u08ea\u0097\3\2"+
		"\2\2\u08eb\u08ed\7\u014a\2\2\u08ec\u08eb\3\2\2\2\u08ec\u08ed\3\2\2\2\u08ed"+
		"\u08ee\3\2\2\2\u08ee\u08f0\7\u0082\2\2\u08ef\u08f1\7\u0181\2\2\u08f0\u08ef"+
		"\3\2\2\2\u08f0\u08f1\3\2\2\2\u08f1\u08f2\3\2\2\2\u08f2\u08f3\5\u043e\u0220"+
		"\2\u08f3\u0099\3\2\2\2\u08f4\u08f5\t\17\2\2\u08f5\u009b\3\2\2\2\u08f6"+
		"\u08f8\7\r\2\2\u08f7\u08f9\7\u0181\2\2\u08f8\u08f7\3\2\2\2\u08f8\u08f9"+
		"\3\2\2\2\u08f9\u08fa\3\2\2\2\u08fa\u08fb\5\u0480\u0241\2\u08fb\u009d\3"+
		"\2\2\2\u08fc\u08fe\7\u0094\2\2\u08fd\u08ff\7\u0181\2\2\u08fe\u08fd\3\2"+
		"\2\2\u08fe\u08ff\3\2\2\2\u08ff\u0900\3\2\2\2\u0900\u0901\5\u049a\u024e"+
		"\2\u0901\u009f\3\2\2\2\u0902\u0904\7b\2\2\u0903\u0905\7\u0181\2\2\u0904"+
		"\u0903\3\2\2\2\u0904\u0905\3\2\2\2\u0905\u0906\3\2\2\2\u0906\u0907\5\u047a"+
		"\u023e\2\u0907\u00a1\3\2\2\2\u0908\u090a\5\u00a4S\2\u0909\u0908\3\2\2"+
		"\2\u0909\u090a\3\2\2\2\u090a\u090c\3\2\2\2\u090b\u090d\5\u03c8\u01e5\2"+
		"\u090c\u090b\3\2\2\2\u090c\u090d\3\2\2\2\u090d\u090f\3\2\2\2\u090e\u0910"+
		"\5\u00a8U\2\u090f\u090e\3\2\2\2\u090f\u0910\3\2\2\2\u0910\u0911\3\2\2"+
		"\2\u0911\u0912\7\u0171\2\2\u0912\u0913\5\u0428\u0215\2\u0913\u0914\5J"+
		"&\2\u0914\u00a3\3\2\2\2\u0915\u0916\7\u024d\2\2\u0916\u0918\7\u0260\2"+
		"\2\u0917\u0919\5\u00a6T\2\u0918\u0917\3\2\2\2\u0918\u0919\3\2\2\2\u0919"+
		"\u091c\3\2\2\2\u091a\u091c\5\u00a6T\2\u091b\u0915\3\2\2\2\u091b\u091a"+
		"\3\2\2\2\u091c\u00a5\3\2\2\2\u091d\u091e\7@\2\2\u091e\u091f\7\u0181\2"+
		"\2\u091f\u0920\t\20\2\2\u0920\u00a7\3\2\2\2\u0921\u0922\7\u027a\2\2\u0922"+
		"\u0923\7,\2\2\u0923\u0924\t\f\2\2\u0924\u00a9\3\2\2\2\u0925\u0927\5\u03c8"+
		"\u01e5\2\u0926\u0925\3\2\2\2\u0926\u0927\3\2\2\2\u0927\u0928\3\2\2\2\u0928"+
		"\u0929\7\u0291\2\2\u0929\u092a\5\u0424\u0213\2\u092a\u092b\t\21\2\2\u092b"+
		"\u092c\t\22\2\2\u092c\u092d\7\u0245\2\2\u092d\u092e\5\u0446\u0224\2\u092e"+
		"\u092f\7\u01fc\2\2\u092f\u0930\7\u01eb\2\2\u0930\u0932\7\u012f\2\2\u0931"+
		"\u0933\5\u00acW\2\u0932\u0931\3\2\2\2\u0932\u0933\3\2\2\2\u0933\u0934"+
		"\3\2\2\2\u0934\u0935\5\u0308\u0185\2\u0935\u00ab\3\2\2\2\u0936\u0937\6"+
		"W!\2\u0937\u0938\t\23\2\2\u0938\u0939\5\u0494\u024b\2\u0939\u00ad\3\2"+
		"\2\2\u093a\u093c\5\u03c8\u01e5\2\u093b\u093a\3\2\2\2\u093b\u093c\3\2\2"+
		"\2\u093c\u093d\3\2\2\2\u093d\u093f\7\u0087\2\2\u093e\u0940\5\u03cc\u01e7"+
		"\2\u093f\u093e\3\2\2\2\u093f\u0940\3\2\2\2\u0940\u0941\3\2\2\2\u0941\u0942"+
		"\5\u0434\u021b\2\u0942\u0943\7\u0245\2\2\u0943\u0944\7\u0131\2\2\u0944"+
		"\u094b\5\u0356\u01ac\2\u0945\u0946\7\u0245\2\2\u0946\u0948\7_\2\2\u0947"+
		"\u0949\7\u023f\2\2\u0948\u0947\3\2\2\2\u0948\u0949\3\2\2\2\u0949\u094a"+
		"\3\2\2\2\u094a\u094c\7\u0104\2\2\u094b\u0945\3\2\2\2\u094b\u094c\3\2\2"+
		"\2\u094c\u0953\3\2\2\2\u094d\u0954\7\u0091\2\2\u094e\u0951\7z\2\2\u094f"+
		"\u0950\7\u0245\2\2\u0950\u0952\7/\2\2\u0951\u094f\3\2\2\2\u0951\u0952"+
		"\3\2\2\2\u0952\u0954\3\2\2\2\u0953\u094d\3\2\2\2\u0953\u094e\3\2\2\2\u0953"+
		"\u0954\3\2\2\2\u0954\u0957\3\2\2\2\u0955\u0956\7\r\2\2\u0956\u0958\5\u0480"+
		"\u0241\2\u0957\u0955\3\2\2\2\u0957\u0958\3\2\2\2\u0958\u0959\3\2\2\2\u0959"+
		"\u095a\7\21\2\2\u095a\u095b\5\u0308\u0185\2\u095b\u00af\3\2\2\2\u095c"+
		"\u095e\7\u02b3\2\2\u095d\u095f\5\u03cc\u01e7\2\u095e\u095d\3\2\2\2\u095e"+
		"\u095f\3\2\2\2\u095f\u0960\3\2\2\2\u0960\u0961\5\u0228\u0115\2\u0961\u00b1"+
		"\3\2\2\2\u0962\u0963\7\u024d\2\2\u0963\u0964\7\u0260\2\2\u0964\u0965\7"+
		"\u0272\2\2\u0965\u0966\7\u02ee\2\2\u0966\u0967\7\u02e6\2\2\u0967\u096b"+
		"\5\u0472\u023a\2\u0968\u096a\5\u00b4[\2\u0969\u0968\3\2\2\2\u096a\u096d"+
		"\3\2\2\2\u096b\u0969\3\2\2\2\u096b\u096c\3\2\2\2\u096c\u097c\3\2\2\2\u096d"+
		"\u096b\3\2\2\2\u096e\u096f\7\u0272\2\2\u096f\u0970\7\u02ee\2\2\u0970\u0972"+
		"\7\u02e6\2\2\u0971\u0973\5\u03cc\u01e7\2\u0972\u0971\3\2\2\2\u0972\u0973"+
		"\3\2\2\2\u0973\u0974\3\2\2\2\u0974\u0978\5\u0472\u023a\2\u0975\u0977\5"+
		"\u00b4[\2\u0976\u0975\3\2\2\2\u0977\u097a\3\2\2\2\u0978\u0976\3\2\2\2"+
		"\u0978\u0979\3\2\2\2\u0979\u097c\3\2\2\2\u097a\u0978\3\2\2\2\u097b\u0962"+
		"\3\2\2\2\u097b\u096e\3\2\2\2\u097c\u00b3\3\2\2\2\u097d\u097e\7\u00e7\2"+
		"\2\u097e\u097f\7\u015b\2\2\u097f\u098d\5\u0482\u0242\2\u0980\u0981\7\u02eb"+
		"\2\2\u0981\u0982\7\u015b\2\2\u0982\u098d\5\u0482\u0242\2\u0983\u0984\7"+
		"\u02ed\2\2\u0984\u0985\5\u0482\u0242\2\u0985\u0986\7\u00a1\2\2\u0986\u0987"+
		"\7\u01be\2\2\u0987\u0988\5\u0472\u023a\2\u0988\u098d\3\2\2\2\u0989\u098a"+
		"\7\u02ec\2\2\u098a\u098b\7\u015b\2\2\u098b\u098d\5\u0482\u0242\2\u098c"+
		"\u097d\3\2\2\2\u098c\u0980\3\2\2\2\u098c\u0983\3\2\2\2\u098c\u0989\3\2"+
		"\2\2\u098d\u00b5\3\2\2\2\u098e\u09a0\7\u01e9\2\2\u098f\u09a1\5\u00b8]"+
		"\2\u0990\u09a1\5\u00ba^\2\u0991\u09a1\5\u00bc_\2\u0992\u09a1\5\u00be`"+
		"\2\u0993\u09a1\5\u00c0a\2\u0994\u09a1\5\u00c2b\2\u0995\u09a1\5\u00c6d"+
		"\2\u0996\u09a1\5\u00c8e\2\u0997\u09a1\5\u00caf\2\u0998\u09a1\5\u00ccg"+
		"\2\u0999\u09a1\5\u00ceh\2\u099a\u099b\6\\\"\2\u099b\u09a1\5\u00d0i\2\u099c"+
		"\u099d\6\\#\2\u099d\u09a1\5\u00d2j\2\u099e\u099f\6\\$\2\u099f\u09a1\5"+
		"\u00d4k\2\u09a0\u098f\3\2\2\2\u09a0\u0990\3\2\2\2\u09a0\u0991\3\2\2\2"+
		"\u09a0\u0992\3\2\2\2\u09a0\u0993\3\2\2\2\u09a0\u0994\3\2\2\2\u09a0\u0995"+
		"\3\2\2\2\u09a0\u0996\3\2\2\2\u09a0\u0997\3\2\2\2\u09a0\u0998\3\2\2\2\u09a0"+
		"\u0999\3\2\2\2\u09a0\u099a\3\2\2\2\u09a0\u099c\3\2\2\2\u09a0\u099e\3\2"+
		"\2\2\u09a1\u00b7\3\2\2\2\u09a2\u09a4\7\u01d5\2\2\u09a3\u09a5\5\u03ca\u01e6"+
		"\2\u09a4\u09a3\3\2\2\2\u09a4\u09a5\3\2\2\2\u09a5\u09a6\3\2\2\2\u09a6\u09a7"+
		"\5\u041a\u020e\2\u09a7\u00b9\3\2\2\2\u09a8\u09aa\7\u0087\2\2\u09a9\u09ab"+
		"\5\u03ca\u01e6\2\u09aa\u09a9\3\2\2\2\u09aa\u09ab\3\2\2\2\u09ab\u09ac\3"+
		"\2\2\2\u09ac\u09ad\5\u0436\u021c\2\u09ad\u00bb\3\2\2\2\u09ae\u09b0\7\u0166"+
		"\2\2\u09af\u09b1\5\u03ca\u01e6\2\u09b0\u09af\3\2\2\2\u09b0\u09b1\3\2\2"+
		"\2\u09b1\u09b2\3\2\2\2\u09b2\u09b3\5\u0422\u0212\2\u09b3\u00bd\3\2\2\2"+
		"\u09b4\u09b6\7\u0254\2\2\u09b5\u09b7\5\u03ca\u01e6\2\u09b6\u09b5\3\2\2"+
		"\2\u09b6\u09b7\3\2\2\2\u09b7\u09b8\3\2\2\2\u09b8\u09b9\5\u041e\u0210\2"+
		"\u09b9\u00bf\3\2\2\2\u09ba\u09bc\5\u0400\u0201\2\u09bb\u09ba\3\2\2\2\u09bb"+
		"\u09bc\3\2\2\2\u09bc\u09bd\3\2\2\2\u09bd\u09be\7\u020b\2\2\u09be\u09bf"+
		"\5\u0414\u020b\2\u09bf\u09c0\7\u0245\2\2\u09c0\u09c2\5\u0446\u0224\2\u09c1"+
		"\u09c3\5\60\31\2\u09c2\u09c1\3\2\2\2\u09c2\u09c3\3\2\2\2\u09c3\u00c1\3"+
		"\2\2\2\u09c4\u09c5\7\u00b8\2\2\u09c5\u09c6\7\u0202\2\2\u09c6\u09d1\5\u0432"+
		"\u021a\2\u09c7\u09ce\5\u00c4c\2\u09c8\u09ca\7\u0198\2\2\u09c9\u09c8\3"+
		"\2\2\2\u09c9\u09ca\3\2\2\2\u09ca\u09cb\3\2\2\2\u09cb\u09cd\5\u00c4c\2"+
		"\u09cc\u09c9\3\2\2\2\u09cd\u09d0\3\2\2\2\u09ce\u09cc\3\2\2\2\u09ce\u09cf"+
		"\3\2\2\2\u09cf\u09d2\3\2\2\2\u09d0\u09ce\3\2\2\2\u09d1\u09c7\3\2\2\2\u09d1"+
		"\u09d2\3\2\2\2\u09d2\u00c3\3\2\2\2\u09d3\u09d6\5\u009aN\2\u09d4\u09d6"+
		"\5\u0098M\2\u09d5\u09d3\3\2\2\2\u09d5\u09d4\3\2\2\2\u09d6\u00c5\3\2\2"+
		"\2\u09d7\u09d9\7-\2\2\u09d8\u09da\5\u03ca\u01e6\2\u09d9\u09d8\3\2\2\2"+
		"\u09d9\u09da\3\2\2\2\u09da\u09db\3\2\2\2\u09db\u09dc\5\u043c\u021f\2\u09dc"+
		"\u00c7\3\2\2\2\u09dd\u09df\7\u0159\2\2\u09de\u09dd\3\2\2\2\u09de\u09df"+
		"\3\2\2\2\u09df\u09e0\3\2\2\2\u09e0\u09e2\t\24\2\2\u09e1\u09e3\5\u03ca"+
		"\u01e6\2\u09e2\u09e1\3\2\2\2\u09e2\u09e3\3\2\2\2\u09e3\u09e4\3\2\2\2\u09e4"+
		"\u09e6\5\u0448\u0225\2\u09e5\u09e7\t\4\2\2\u09e6\u09e5\3\2\2\2\u09e6\u09e7"+
		"\3\2\2\2\u09e7\u00c9\3\2\2\2\u09e8\u09e9\7\u0158\2\2\u09e9\u09f4\5\u042e"+
		"\u0218\2\u09ea\u09f1\5\u00c4c\2\u09eb\u09ed\7\u0198\2\2\u09ec\u09eb\3"+
		"\2\2\2\u09ec\u09ed\3\2\2\2\u09ed\u09ee\3\2\2\2\u09ee\u09f0\5\u00c4c\2"+
		"\u09ef\u09ec\3\2\2\2\u09f0\u09f3\3\2\2\2\u09f1\u09ef\3\2\2\2\u09f1\u09f2"+
		"\3\2\2\2\u09f2\u09f5\3\2\2\2\u09f3\u09f1\3\2\2\2\u09f4\u09ea\3\2\2\2\u09f4"+
		"\u09f5\3\2\2\2\u09f5\u00cb\3\2\2\2\u09f6\u09f8\7\u0291\2\2\u09f7\u09f9"+
		"\5\u03ca\u01e6\2\u09f8\u09f7\3\2\2\2\u09f8\u09f9\3\2\2\2\u09f9\u09fa\3"+
		"\2\2\2\u09fa\u09fb\5\u0426\u0214\2\u09fb\u00cd\3\2\2\2\u09fc\u09fe\7\u0171"+
		"\2\2\u09fd\u09ff\5\u03ca\u01e6\2\u09fe\u09fd\3\2\2\2\u09fe\u09ff\3\2\2"+
		"\2\u09ff\u0a00\3\2\2\2\u0a00\u0a02\5\u03d8\u01ed\2\u0a01\u0a03\t\4\2\2"+
		"\u0a02\u0a01\3\2\2\2\u0a02\u0a03\3\2\2\2\u0a03\u00cf\3\2\2\2\u0a04\u0a06"+
		"\7\u02b3\2\2\u0a05\u0a07\5\u03ca\u01e6\2\u0a06\u0a05\3\2\2\2\u0a06\u0a07"+
		"\3\2\2\2\u0a07\u0a08\3\2\2\2\u0a08\u0a09\5\u0228\u0115\2\u0a09\u00d1\3"+
		"\2\2\2\u0a0a\u0a0b\7\u0272\2\2\u0a0b\u0a0c\7\u02ee\2\2\u0a0c\u0a0e\7\u02e6"+
		"\2\2\u0a0d\u0a0f\5\u03ca\u01e6\2\u0a0e\u0a0d\3\2\2\2\u0a0e\u0a0f\3\2\2"+
		"\2\u0a0f\u0a10\3\2\2\2\u0a10\u0a11\5\u0472\u023a\2\u0a11\u00d3\3\2\2\2"+
		"\u0a12\u0a13\7\u0294\2\2\u0a13\u0a14\7\u0158\2\2\u0a14\u0a16\5\u042e\u0218"+
		"\2\u0a15\u0a17\5> \2\u0a16\u0a15\3\2\2\2\u0a16\u0a17\3\2\2\2\u0a17\u00d5"+
		"\3\2\2\2\u0a18\u0a19\7\u025e\2\2\u0a19\u0a1a\t\24\2\2\u0a1a\u0a1f\5\u00d8"+
		"m\2\u0a1b\u0a1c\7\u0198\2\2\u0a1c\u0a1e\5\u00d8m\2\u0a1d\u0a1b\3\2\2\2"+
		"\u0a1e\u0a21\3\2\2\2\u0a1f\u0a1d\3\2\2\2\u0a1f\u0a20\3\2\2\2\u0a20\u00d7"+
		"\3\2\2\2\u0a21\u0a1f\3\2\2\2\u0a22\u0a23\5\u0446\u0224\2\u0a23\u0a24\7"+
		"\u028f\2\2\u0a24\u0a25\5\u0440\u0221\2\u0a25\u00d9\3\2\2\2\u0a26\u0a28"+
		"\7\64\2\2\u0a27\u0a29\7\u0289\2\2\u0a28\u0a27\3\2\2\2\u0a28\u0a29\3\2"+
		"\2\2\u0a29\u0a2a\3\2\2\2\u0a2a\u0a2b\5\u0446\u0224\2\u0a2b\u00db\3\2\2"+
		"\2\u0a2c\u0a2d\7\u00a4\2\2\u0a2d\u0a2e\7\u0289\2\2\u0a2e\u0a2f\7\u01fd"+
		"\2\2\u0a2f\u0a30\5\u0484\u0243\2\u0a30\u00dd\3\2\2\2\u0a31\u0a32\7\u01bf"+
		"\2\2\u0a32\u0a38\5\u041e\u0210\2\u0a33\u0a35\7\u019b\2\2\u0a34\u0a36\5"+
		"\u02ec\u0177\2\u0a35\u0a34\3\2\2\2\u0a35\u0a36\3\2\2\2\u0a36\u0a37\3\2"+
		"\2\2\u0a37\u0a39\7\u019c\2\2\u0a38\u0a33\3\2\2\2\u0a38\u0a39\3\2\2\2\u0a39"+
		"\u00df\3\2\2\2\u0a3a\u0a3b\6q%\2\u0a3b\u0a3d\5\u0142\u00a2\2\u0a3c\u0a3a"+
		"\3\2\2\2\u0a3c\u0a3d\3\2\2\2\u0a3d\u0a3e\3\2\2\2\u0a3e\u0a42\7\u01e2\2"+
		"\2\u0a3f\u0a41\5\u00e4s\2\u0a40\u0a3f\3\2\2\2\u0a41\u0a44\3\2\2\2\u0a42"+
		"\u0a40\3\2\2\2\u0a42\u0a43\3\2\2\2\u0a43\u0a65\3\2\2\2\u0a44\u0a42\3\2"+
		"\2\2\u0a45\u0a5d\7\u01fd\2\2\u0a46\u0a47\5\u044a\u0226\2\u0a47\u0a48\7"+
		"\u029c\2\2\u0a48\u0a4a\5\u0150\u00a9\2\u0a49\u0a4b\5\u0160\u00b1\2\u0a4a"+
		"\u0a49\3\2\2\2\u0a4a\u0a4b\3\2\2\2\u0a4b\u0a5e\3\2\2\2\u0a4c\u0a4f\5\u0446"+
		"\u0224\2\u0a4d\u0a4e\6q&\2\u0a4e\u0a50\5\u0188\u00c5\2\u0a4f\u0a4d\3\2"+
		"\2\2\u0a4f\u0a50\3\2\2\2\u0a50\u0a52\3\2\2\2\u0a51\u0a53\5\u00e2r\2\u0a52"+
		"\u0a51\3\2\2\2\u0a52\u0a53\3\2\2\2\u0a53\u0a55\3\2\2\2\u0a54\u0a56\5\u0160"+
		"\u00b1\2\u0a55\u0a54\3\2\2\2\u0a55\u0a56\3\2\2\2\u0a56\u0a58\3\2\2\2\u0a57"+
		"\u0a59\5\u014a\u00a6\2\u0a58\u0a57\3\2\2\2\u0a58\u0a59\3\2\2\2\u0a59\u0a5b"+
		"\3\2\2\2\u0a5a\u0a5c\5\u0120\u0091\2\u0a5b\u0a5a\3\2\2\2\u0a5b\u0a5c\3"+
		"\2\2\2\u0a5c\u0a5e\3\2\2\2\u0a5d\u0a46\3\2\2\2\u0a5d\u0a4c\3\2\2\2\u0a5e"+
		"\u0a66\3\2\2\2\u0a5f\u0a60\5\u044a\u0226\2\u0a60\u0a61\7\u01fd\2\2\u0a61"+
		"\u0a63\5\u0150\u00a9\2\u0a62\u0a64\5\u0160\u00b1\2\u0a63\u0a62\3\2\2\2"+
		"\u0a63\u0a64\3\2\2\2\u0a64\u0a66\3\2\2\2\u0a65\u0a45\3\2\2\2\u0a65\u0a5f"+
		"\3\2\2\2\u0a66\u00e1\3\2\2\2\u0a67\u0a68\6r\'\2\u0a68\u0a69\7\"\2\2\u0a69"+
		"\u0a6a\7\u019b\2\2\u0a6a\u0a6b\5\u0462\u0232\2\u0a6b\u0a6c\7\u019c\2\2"+
		"\u0a6c\u00e3\3\2\2\2\u0a6d\u0a6e\t\25\2\2\u0a6e\u00e5\3\2\2\2\u0a6f\u0a74"+
		"\7\21\2\2\u0a70\u0a71\6t(\2\u0a71\u0a75\5\u02ec\u0177\2\u0a72\u0a73\6"+
		"t)\2\u0a73\u0a75\5\u015a\u00ae\2\u0a74\u0a70\3\2\2\2\u0a74\u0a72\3\2\2"+
		"\2\u0a75\u00e7\3\2\2\2\u0a76\u0a88\7\30\2\2\u0a77\u0a78\5\u0446\u0224"+
		"\2\u0a78\u0a7a\7\36\2\2\u0a79\u0a7b\5\u0188\u00c5\2\u0a7a\u0a79\3\2\2"+
		"\2\u0a7a\u0a7b\3\2\2\2\u0a7b\u0a89\3\2\2\2\u0a7c\u0a86\5\u0460\u0231\2"+
		"\u0a7d\u0a87\7\f\2\2\u0a7e\u0a7f\7\u0258\2\2\u0a7f\u0a81\5\u00eav\2\u0a80"+
		"\u0a82\5\u0160\u00b1\2\u0a81\u0a80\3\2\2\2\u0a81\u0a82\3\2\2\2\u0a82\u0a84"+
		"\3\2\2\2\u0a83\u0a85\5\u011e\u0090\2\u0a84\u0a83\3\2\2\2\u0a84\u0a85\3"+
		"\2\2\2\u0a85\u0a87\3\2\2\2\u0a86\u0a7d\3\2\2\2\u0a86\u0a7e\3\2\2\2\u0a87"+
		"\u0a89\3\2\2\2\u0a88\u0a77\3\2\2\2\u0a88\u0a7c\3\2\2\2\u0a89\u00e9\3\2"+
		"\2\2\u0a8a\u0a95\t\26\2\2\u0a8b\u0a92\5\u0460\u0231\2\u0a8c\u0a93\t\27"+
		"\2\2\u0a8d\u0a8e\t\30\2\2\u0a8e\u0a8f\7\u019b\2\2\u0a8f\u0a90\5\u00fa"+
		"~\2\u0a90\u0a91\7\u019c\2\2\u0a91\u0a93\3\2\2\2\u0a92\u0a8c\3\2\2\2\u0a92"+
		"\u0a8d\3\2\2\2\u0a93\u0a95\3\2\2\2\u0a94\u0a8a\3\2\2\2\u0a94\u0a8b\3\2"+
		"\2\2\u0a95\u00eb\3\2\2\2\u0a96\u0a98\7\u0210\2\2\u0a97\u0a99\5\u00eex"+
		"\2\u0a98\u0a97\3\2\2\2\u0a98\u0a99\3\2\2\2\u0a99\u0a9b\3\2\2\2\u0a9a\u0a9c"+
		"\7\u020a\2\2\u0a9b\u0a9a\3\2\2\2\u0a9b\u0a9c\3\2\2\2\u0a9c\u0a9e\3\2\2"+
		"\2\u0a9d\u0a9f\7\u0212\2\2\u0a9e\u0a9d\3\2\2\2\u0a9e\u0a9f\3\2\2\2\u0a9f"+
		"\u0aa0\3\2\2\2\u0aa0\u0aa2\5\u0446\u0224\2\u0aa1\u0aa3\5\u0404\u0203\2"+
		"\u0aa2\u0aa1\3\2\2\2\u0aa2\u0aa3\3\2\2\2\u0aa3\u0ab0\3\2\2\2\u0aa4\u0aa7"+
		"\5\u00f0y\2\u0aa5\u0aa6\6w*\2\u0aa6\u0aa8\5\u00fc\177\2\u0aa7\u0aa5\3"+
		"\2\2\2\u0aa7\u0aa8\3\2\2\2\u0aa8\u0ab1\3\2\2\2\u0aa9\u0aaa\7\u026d\2\2"+
		"\u0aaa\u0aad\5\u03da\u01ee\2\u0aab\u0aac\6w+\2\u0aac\u0aae\5\u00fc\177"+
		"\2\u0aad\u0aab\3\2\2\2\u0aad\u0aae\3\2\2\2\u0aae\u0ab1\3\2\2\2\u0aaf\u0ab1"+
		"\5\u00f6|\2\u0ab0\u0aa4\3\2\2\2\u0ab0\u0aa9\3\2\2\2\u0ab0\u0aaf\3\2\2"+
		"\2\u0ab1\u0ab3\3\2\2\2\u0ab2\u0ab4\5\u00fe\u0080\2\u0ab3\u0ab2\3\2\2\2"+
		"\u0ab3\u0ab4\3\2\2\2\u0ab4\u00ed\3\2\2\2\u0ab5\u0ab6\t\31\2\2\u0ab6\u00ef"+
		"\3\2\2\2\u0ab7\u0ab9\7\u019b\2\2\u0ab8\u0aba\5\u00f2z\2\u0ab9\u0ab8\3"+
		"\2\2\2\u0ab9\u0aba\3\2\2\2\u0aba\u0abb\3\2\2\2\u0abb\u0abd\7\u019c\2\2"+
		"\u0abc\u0ab7\3\2\2\2\u0abc\u0abd\3\2\2\2\u0abd\u0abe\3\2\2\2\u0abe\u0abf"+
		"\5\u00f4{\2\u0abf\u00f1\3\2\2\2\u0ac0\u0ac5\5\u0410\u0209\2\u0ac1\u0ac2"+
		"\7\u0198\2\2\u0ac2\u0ac4\5\u0410\u0209\2\u0ac3\u0ac1\3\2\2\2\u0ac4\u0ac7"+
		"\3\2\2\2\u0ac5\u0ac3\3\2\2\2\u0ac5\u0ac6\3\2\2\2\u0ac6\u00f3\3\2\2\2\u0ac7"+
		"\u0ac5\3\2\2\2\u0ac8\u0ac9\t\32\2\2\u0ac9\u0aca\5\u00f8}\2\u0aca\u00f5"+
		"\3\2\2\2\u0acb\u0ad3\5^\60\2\u0acc\u0ace\7\u019b\2\2\u0acd\u0acf\5\u00f2"+
		"z\2\u0ace\u0acd\3\2\2\2\u0ace\u0acf\3\2\2\2\u0acf\u0ad0\3\2\2\2\u0ad0"+
		"\u0ad1\7\u019c\2\2\u0ad1\u0ad3\5^\60\2\u0ad2\u0acb\3\2\2\2\u0ad2\u0acc"+
		"\3\2\2\2\u0ad3\u00f7\3\2\2\2\u0ad4\u0ad6\7\u019b\2\2\u0ad5\u0ad7\5\u00fa"+
		"~\2\u0ad6\u0ad5\3\2\2\2\u0ad6\u0ad7\3\2\2\2\u0ad7\u0ad8\3\2\2\2\u0ad8"+
		"\u0ae1\7\u019c\2\2\u0ad9\u0ada\7\u0198\2\2\u0ada\u0adc\7\u019b\2\2\u0adb"+
		"\u0add\5\u00fa~\2\u0adc\u0adb\3\2\2\2\u0adc\u0add\3\2\2\2\u0add\u0ade"+
		"\3\2\2\2\u0ade\u0ae0\7\u019c\2\2\u0adf\u0ad9\3\2\2\2\u0ae0\u0ae3\3\2\2"+
		"\2\u0ae1\u0adf\3\2\2\2\u0ae1\u0ae2\3\2\2\2\u0ae2\u00f9\3\2\2\2\u0ae3\u0ae1"+
		"\3\2\2\2\u0ae4\u0ae7\5\u029c\u014f\2\u0ae5\u0ae7\7\u01e0\2\2\u0ae6\u0ae4"+
		"\3\2\2\2\u0ae6\u0ae5\3\2\2\2\u0ae7\u0aef\3\2\2\2\u0ae8\u0aeb\7\u0198\2"+
		"\2\u0ae9\u0aec\5\u029c\u014f\2\u0aea\u0aec\7\u01e0\2\2\u0aeb\u0ae9\3\2"+
		"\2\2\u0aeb\u0aea\3\2\2\2\u0aec\u0aee\3\2\2\2\u0aed\u0ae8\3\2\2\2\u0aee"+
		"\u0af1\3\2\2\2\u0aef\u0aed\3\2\2\2\u0aef\u0af0\3\2\2\2\u0af0\u00fb\3\2"+
		"\2\2\u0af1\u0aef\3\2\2\2\u0af2\u0af3\7\u01b1\2\2\u0af3\u0af5\5\u0460\u0231"+
		"\2\u0af4\u0af6\5\u040c\u0207\2\u0af5\u0af4\3\2\2\2\u0af5\u0af6\3\2\2\2"+
		"\u0af6\u00fd\3\2\2\2\u0af7\u0af8\7\u0245\2\2\u0af8\u0af9\7~\2\2\u0af9"+
		"\u0afa\7\u021b\2\2\u0afa\u0afb\7\u0299\2\2\u0afb\u0afc\5\u03da\u01ee\2"+
		"\u0afc\u00ff\3\2\2\2\u0afd\u0afe\7\u0224\2\2\u0afe\u0b00\5\u0102\u0082"+
		"\2\u0aff\u0b01\t\33\2\2\u0b00\u0aff\3\2\2\2\u0b00\u0b01\3\2\2\2\u0b01"+
		"\u0b03\3\2\2\2\u0b02\u0b04\7\u00b6\2\2\u0b03\u0b02\3\2\2\2\u0b03\u0b04"+
		"\3\2\2\2\u0b04\u0b05\3\2\2\2\u0b05\u0b06\7\u020c\2\2\u0b06\u0b08\5\u0480"+
		"\u0241\2\u0b07\u0b09\t\n\2\2\u0b08\u0b07\3\2\2\2\u0b08\u0b09\3\2\2\2\u0b09"+
		"\u0b0a\3\2\2\2\u0b0a\u0b0b\7\u0212\2\2\u0b0b\u0b0c\7\u0289\2\2\u0b0c\u0b0e"+
		"\5\u0446\u0224\2\u0b0d\u0b0f\5\u0404\u0203\2\u0b0e\u0b0d\3\2\2\2\u0b0e"+
		"\u0b0f\3\2\2\2\u0b0f\u0b11\3\2\2\2\u0b10\u0b12\5\u03de\u01f0\2\u0b11\u0b10"+
		"\3\2\2\2\u0b11\u0b12\3\2\2\2\u0b12\u0b14\3\2\2\2\u0b13\u0b15\5\u0104\u0083"+
		"\2\u0b14\u0b13\3\2\2\2\u0b14\u0b15\3\2\2\2\u0b15\u0b17\3\2\2\2\u0b16\u0b18"+
		"\5\u03e0\u01f1\2\u0b17\u0b16\3\2\2\2\u0b17\u0b18\3\2\2\2\u0b18\u0b1a\3"+
		"\2\2\2\u0b19\u0b1b\5\u03e4\u01f3\2\u0b1a\u0b19\3\2\2\2\u0b1a\u0b1b\3\2"+
		"\2\2\u0b1b\u0b1c\3\2\2\2\u0b1c\u0b1d\5\u0106\u0084\2\u0b1d\u0101\3\2\2"+
		"\2\u0b1e\u0b1f\t\34\2\2\u0b1f\u0103\3\2\2\2\u0b20\u0b21\7\u012c\2\2\u0b21"+
		"\u0b22\7\u00a1\2\2\u0b22\u0b23\7\u01be\2\2\u0b23\u0b24\5\u047c\u023f\2"+
		"\u0b24\u0105\3\2\2\2\u0b25\u0b26\7\u020a\2\2\u0b26\u0b27\7\u017e\2\2\u0b27"+
		"\u0b29\t\35\2\2\u0b28\u0b25\3\2\2\2\u0b28\u0b29\3\2\2\2\u0b29\u0b2b\3"+
		"\2\2\2\u0b2a\u0b2c\5\u0108\u0085\2\u0b2b\u0b2a\3\2\2\2\u0b2b\u0b2c\3\2"+
		"\2\2\u0b2c\u0b2f\3\2\2\2\u0b2d\u0b2e\7\u026d\2\2\u0b2e\u0b30\5\u03da\u01ee"+
		"\2\u0b2f\u0b2d\3\2\2\2\u0b2f\u0b30\3\2\2\2\u0b30\u0107\3\2\2\2\u0b31\u0b33"+
		"\7\u019b\2\2\u0b32\u0b34\5\u010a\u0086\2\u0b33\u0b32\3\2\2\2\u0b33\u0b34"+
		"\3\2\2\2\u0b34\u0b35\3\2\2\2\u0b35\u0b36\7\u019c\2\2\u0b36\u0109\3\2\2"+
		"\2\u0b37\u0b3a\5\u040e\u0208\2\u0b38\u0b3a\5\u02de\u0170\2\u0b39\u0b37"+
		"\3\2\2\2\u0b39\u0b38\3\2\2\2\u0b3a\u0b42\3\2\2\2\u0b3b\u0b3e\7\u0198\2"+
		"\2\u0b3c\u0b3f\5\u040e\u0208\2\u0b3d\u0b3f\5\u02de\u0170\2\u0b3e\u0b3c"+
		"\3\2\2\2\u0b3e\u0b3d\3\2\2\2\u0b3f\u0b41\3\2\2\2\u0b40\u0b3b\3\2\2\2\u0b41"+
		"\u0b44\3\2\2\2\u0b42\u0b40\3\2\2\2\u0b42\u0b43\3\2\2\2\u0b43\u010b\3\2"+
		"\2\2\u0b44\u0b42\3\2\2\2\u0b45\u0b47\7\u0260\2\2\u0b46\u0b48\t\36\2\2"+
		"\u0b47\u0b46\3\2\2\2\u0b47\u0b48\3\2\2\2\u0b48\u0b4a\3\2\2\2\u0b49\u0b4b"+
		"\7\u0212\2\2\u0b4a\u0b49\3\2\2\2\u0b4a\u0b4b\3\2\2\2\u0b4b\u0b4c\3\2\2"+
		"\2\u0b4c\u0b4e\5\u0446\u0224\2\u0b4d\u0b4f\5\u0404\u0203\2\u0b4e\u0b4d"+
		"\3\2\2\2\u0b4e\u0b4f\3\2\2\2\u0b4f\u0b54\3\2\2\2\u0b50\u0b55\5\u00f0y"+
		"\2\u0b51\u0b52\7\u026d\2\2\u0b52\u0b55\5\u03da\u01ee\2\u0b53\u0b55\5\u00f6"+
		"|\2\u0b54\u0b50\3\2\2\2\u0b54\u0b51\3\2\2\2\u0b54\u0b53\3\2\2\2\u0b55"+
		"\u010d\3\2\2\2\u0b56\u0b5a\5\u0112\u008a\2\u0b57\u0b5a\5\u0116\u008c\2"+
		"\u0b58\u0b5a\5\u0110\u0089\2\u0b59\u0b56\3\2\2\2\u0b59\u0b57\3\2\2\2\u0b59"+
		"\u0b58\3\2\2\2\u0b5a\u010f\3\2\2\2\u0b5b\u0b5c\7\u019b\2\2\u0b5c\u0b5d"+
		"\5\u0110\u0089\2\u0b5d\u0b5e\7\u019c\2\2\u0b5e\u0b63\3\2\2\2\u0b5f\u0b60"+
		"\5\u0112\u008a\2\u0b60\u0b61\5\u0126\u0094\2\u0b61\u0b63\3\2\2\2\u0b62"+
		"\u0b5b\3\2\2\2\u0b62\u0b5f\3\2\2\2\u0b63\u0111\3\2\2\2\u0b64\u0b65\6\u008a"+
		",\2\u0b65\u0b67\5\u0142\u00a2\2\u0b66\u0b64\3\2\2\2\u0b66\u0b67\3\2\2"+
		"\2\u0b67\u0b77\3\2\2\2\u0b68\u0b6a\5\u0114\u008b\2\u0b69\u0b6b\5\u014a"+
		"\u00a6\2\u0b6a\u0b69\3\2\2\2\u0b6a\u0b6b\3\2\2\2\u0b6b\u0b6d\3\2\2\2\u0b6c"+
		"\u0b6e\5\u011e\u0090\2\u0b6d\u0b6c\3\2\2\2\u0b6d\u0b6e\3\2\2\2\u0b6e\u0b78"+
		"\3\2\2\2\u0b6f\u0b75\5\u0116\u008c\2\u0b70\u0b72\5\u014a\u00a6\2\u0b71"+
		"\u0b73\5\u011e\u0090\2\u0b72\u0b71\3\2\2\2\u0b72\u0b73\3\2\2\2\u0b73\u0b76"+
		"\3\2\2\2\u0b74\u0b76\5\u011e\u0090\2\u0b75\u0b70\3\2\2\2\u0b75\u0b74\3"+
		"\2\2\2\u0b76\u0b78\3\2\2\2\u0b77\u0b68\3\2\2\2\u0b77\u0b6f\3\2\2\2\u0b78"+
		"\u0b7b\3\2\2\2\u0b79\u0b7a\6\u008a-\2\u0b7a\u0b7c\5\u0128\u0095\2\u0b7b"+
		"\u0b79\3\2\2\2\u0b7b\u0b7c\3\2\2\2\u0b7c\u0b7e\3\2\2\2\u0b7d\u0b7f\5\u0154"+
		"\u00ab\2\u0b7e\u0b7d\3\2\2\2\u0b7e\u0b7f\3\2\2\2\u0b7f\u0b87\3\2\2\2\u0b80"+
		"\u0b81\6\u008a.\2\u0b81\u0b82\5\u0142\u00a2\2\u0b82\u0b84\5\u0116\u008c"+
		"\2\u0b83\u0b85\5\u0154\u00ab\2\u0b84\u0b83\3\2\2\2\u0b84\u0b85\3\2\2\2"+
		"\u0b85\u0b87\3\2\2\2\u0b86\u0b66\3\2\2\2\u0b86\u0b80\3\2\2\2\u0b87\u0113"+
		"\3\2\2\2\u0b88\u0b89\b\u008b\1\2\u0b89\u0b94\5\u0118\u008d\2\u0b8a\u0b8b"+
		"\5\u0116\u008c\2\u0b8b\u0b8d\7\u0295\2\2\u0b8c\u0b8e\5\u0186\u00c4\2\u0b8d"+
		"\u0b8c\3\2\2\2\u0b8d\u0b8e\3\2\2\2\u0b8e\u0b91\3\2\2\2\u0b8f\u0b92\5\u0118"+
		"\u008d\2\u0b90\u0b92\5\u0116\u008c\2\u0b91\u0b8f\3\2\2\2\u0b91\u0b90\3"+
		"\2\2\2\u0b92\u0b94\3\2\2\2\u0b93\u0b88\3\2\2\2\u0b93\u0b8a\3\2\2\2\u0b94"+
		"\u0ba0\3\2\2\2\u0b95\u0b96\f\4\2\2\u0b96\u0b98\7\u0295\2\2\u0b97\u0b99"+
		"\5\u0186\u00c4\2\u0b98\u0b97\3\2\2\2\u0b98\u0b99\3\2\2\2\u0b99\u0b9c\3"+
		"\2\2\2\u0b9a\u0b9d\5\u0118\u008d\2\u0b9b\u0b9d\5\u0116\u008c\2\u0b9c\u0b9a"+
		"\3\2\2\2\u0b9c\u0b9b\3\2\2\2\u0b9d\u0b9f\3\2\2\2\u0b9e\u0b95\3\2\2\2\u0b9f"+
		"\u0ba2\3\2\2\2\u0ba0\u0b9e\3\2\2\2\u0ba0\u0ba1\3\2\2\2\u0ba1\u0115\3\2"+
		"\2\2\u0ba2\u0ba0\3\2\2\2\u0ba3\u0ba6\7\u019b\2\2\u0ba4\u0ba7\5\u0116\u008c"+
		"\2\u0ba5\u0ba7\5\u0112\u008a\2\u0ba6\u0ba4\3\2\2\2\u0ba6\u0ba5\3\2\2\2"+
		"\u0ba7\u0ba8\3\2\2\2\u0ba8\u0ba9\7\u019c\2\2\u0ba9\u0117\3\2\2\2\u0baa"+
		"\u0bae\7\u0268\2\2\u0bab\u0bad\5\u0152\u00aa\2\u0bac\u0bab\3\2\2\2\u0bad"+
		"\u0bb0\3\2\2\2\u0bae\u0bac\3\2\2\2\u0bae\u0baf\3\2\2\2\u0baf\u0bb1\3\2"+
		"\2\2\u0bb0\u0bae\3\2\2\2\u0bb1\u0bb3\5\u015a\u00ae\2\u0bb2\u0bb4\5\u0126"+
		"\u0094\2\u0bb3\u0bb2\3\2\2\2\u0bb3\u0bb4\3\2\2\2\u0bb4\u0bb6\3\2\2\2\u0bb5"+
		"\u0bb7\5\u014e\u00a8\2\u0bb6\u0bb5\3\2\2\2\u0bb6\u0bb7\3\2\2\2\u0bb7\u0bb9"+
		"\3\2\2\2\u0bb8\u0bba\5\u0160\u00b1\2\u0bb9\u0bb8\3\2\2\2\u0bb9\u0bba\3"+
		"\2\2\2\u0bba\u0bbc\3\2\2\2\u0bbb\u0bbd\5\u0146\u00a4\2\u0bbc\u0bbb\3\2"+
		"\2\2\u0bbc\u0bbd\3\2\2\2\u0bbd\u0bbf\3\2\2\2\u0bbe\u0bc0\5\u012a\u0096"+
		"\2\u0bbf\u0bbe\3\2\2\2\u0bbf\u0bc0\3\2\2\2\u0bc0\u0bc3\3\2\2\2\u0bc1\u0bc2"+
		"\6\u008d\60\2\u0bc2\u0bc4\5\u012c\u0097\2\u0bc3\u0bc1\3\2\2\2\u0bc3\u0bc4"+
		"\3\2\2\2\u0bc4\u0119\3\2\2\2\u0bc5\u0bc6\5\u0116\u008c\2\u0bc6\u011b\3"+
		"\2\2\2\u0bc7\u0bc8\t\37\2\2\u0bc8\u011d\3\2\2\2\u0bc9\u0bca\7\u0221\2"+
		"\2\u0bca\u0bcb\5\u0122\u0092\2\u0bcb\u011f\3\2\2\2\u0bcc\u0bcd\7\u0221"+
		"\2\2\u0bcd\u0bce\5\u0124\u0093\2\u0bce\u0121\3\2\2\2\u0bcf\u0bd2\5\u0124"+
		"\u0093\2\u0bd0\u0bd1\t \2\2\u0bd1\u0bd3\5\u0124\u0093\2\u0bd2\u0bd0\3"+
		"\2\2\2\u0bd2\u0bd3\3\2\2\2\u0bd3\u0123\3\2\2\2\u0bd4\u0bd7\5\u0460\u0231"+
		"\2\u0bd5\u0bd7\t!\2\2\u0bd6\u0bd4\3\2\2\2\u0bd6\u0bd5\3\2\2\2\u0bd7\u0125"+
		"\3\2\2\2\u0bd8\u0bf4\7\u0212\2\2\u0bd9\u0bda\7\u024f\2\2\u0bda\u0bdc\5"+
		"\u047a\u023e\2\u0bdb\u0bdd\5\u03de\u01f0\2\u0bdc\u0bdb\3\2\2\2\u0bdc\u0bdd"+
		"\3\2\2\2\u0bdd\u0bdf\3\2\2\2\u0bde\u0be0\5\u03e0\u01f1\2\u0bdf\u0bde\3"+
		"\2\2\2\u0bdf\u0be0\3\2\2\2\u0be0\u0be2\3\2\2\2\u0be1\u0be3\5\u03e4\u01f3"+
		"\2\u0be2\u0be1\3\2\2\2\u0be2\u0be3\3\2\2\2\u0be3\u0bf5\3\2\2\2\u0be4\u0be5"+
		"\7}\2\2\u0be5\u0bf5\5\u047a\u023e\2\u0be6\u0be9\5\u0494\u024b\2\u0be7"+
		"\u0be9\5\u02de\u0170\2\u0be8\u0be6\3\2\2\2\u0be8\u0be7\3\2\2\2\u0be9\u0bf1"+
		"\3\2\2\2\u0bea\u0bed\7\u0198\2\2\u0beb\u0bee\5\u0494\u024b\2\u0bec\u0bee"+
		"\5\u02de\u0170\2\u0bed\u0beb\3\2\2\2\u0bed\u0bec\3\2\2\2\u0bee\u0bf0\3"+
		"\2\2\2\u0bef\u0bea\3\2\2\2\u0bf0\u0bf3\3\2\2\2\u0bf1\u0bef\3\2\2\2\u0bf1"+
		"\u0bf2\3\2\2\2\u0bf2\u0bf5\3\2\2\2\u0bf3\u0bf1\3\2\2\2\u0bf4\u0bd9\3\2"+
		"\2\2\u0bf4\u0be4\3\2\2\2\u0bf4\u0be8\3\2\2\2\u0bf5\u0127\3\2\2\2\u0bf6"+
		"\u0bf7\7\u0254\2\2\u0bf7\u0bf8\7\u01af\2\2\u0bf8\u0bfe\7\u019b\2\2\u0bf9"+
		"\u0bfc\7\u017e\2\2\u0bfa\u0bfb\7\u0198\2\2\u0bfb\u0bfd\7\u017e\2\2\u0bfc"+
		"\u0bfa\3\2\2\2\u0bfc\u0bfd\3\2\2\2\u0bfd\u0bff\3\2\2\2\u0bfe\u0bf9\3\2"+
		"\2\2\u0bfe\u0bff\3\2\2\2\u0bff\u0c00\3\2\2\2\u0c00\u0c01\7\u019c\2\2\u0c01"+
		"\u0129\3\2\2\2\u0c02\u0c03\7\u0204\2\2\u0c03\u0c04\5\u029c\u014f\2\u0c04"+
		"\u012b\3\2\2\2\u0c05\u0c06\7\u02db\2\2\u0c06\u0c0b\5\u012e\u0098\2\u0c07"+
		"\u0c08\7\u0198\2\2\u0c08\u0c0a\5\u012e\u0098\2\u0c09\u0c07\3\2\2\2\u0c0a"+
		"\u0c0d\3\2\2\2\u0c0b\u0c09\3\2\2\2\u0c0b\u0c0c\3\2\2\2\u0c0c\u012d\3\2"+
		"\2\2\u0c0d\u0c0b\3\2\2\2\u0c0e\u0c0f\5\u045c\u022f\2\u0c0f\u0c10\7\u01b1"+
		"\2\2\u0c10\u0c11\5\u0130\u0099\2\u0c11\u012f\3\2\2\2\u0c12\u0c13\7\u019b"+
		"\2\2\u0c13\u0c14\5\u0132\u009a\2\u0c14\u0c15\7\u019c\2\2\u0c15\u0131\3"+
		"\2\2\2\u0c16\u0c18\5\u045c\u022f\2\u0c17\u0c16\3\2\2\2\u0c17\u0c18\3\2"+
		"\2\2\u0c18\u0c1c\3\2\2\2\u0c19\u0c1a\7\"\2\2\u0c1a\u0c1b\7\u01be\2\2\u0c1b"+
		"\u0c1d\5\u02fe\u0180\2\u0c1c\u0c19\3\2\2\2\u0c1c\u0c1d\3\2\2\2\u0c1d\u0c1f"+
		"\3\2\2\2\u0c1e\u0c20\5\u014a\u00a6\2\u0c1f\u0c1e\3\2\2\2\u0c1f\u0c20\3"+
		"\2\2\2\u0c20\u0c22\3\2\2\2\u0c21\u0c23\5\u0134\u009b\2\u0c22\u0c21\3\2"+
		"\2\2\u0c22\u0c23\3\2\2\2\u0c23\u0133\3\2\2\2\u0c24\u0c25\5\u0136\u009c"+
		"\2\u0c25\u0c27\5\u0138\u009d\2\u0c26\u0c28\5\u0140\u00a1\2\u0c27\u0c26"+
		"\3\2\2\2\u0c27\u0c28\3\2\2\2\u0c28\u0135\3\2\2\2\u0c29\u0c2a\t\"\2\2\u0c2a"+
		"\u0137\3\2\2\2\u0c2b\u0c2e\5\u013a\u009e\2\u0c2c\u0c2e\5\u013c\u009f\2"+
		"\u0c2d\u0c2b\3\2\2\2\u0c2d\u0c2c\3\2\2\2\u0c2e\u0139\3\2\2\2\u0c2f\u0c30"+
		"\7\u02da\2\2\u0c30\u0c3e\7\u02d5\2\2\u0c31\u0c32\5\u0470\u0239\2\u0c32"+
		"\u0c33\7\u02d5\2\2\u0c33\u0c3e\3\2\2\2\u0c34\u0c35\7\u01a6\2\2\u0c35\u0c3e"+
		"\7\u02d5\2\2\u0c36\u0c37\7\u0211\2\2\u0c37\u0c38\5\u029c\u014f\2\u0c38"+
		"\u0c39\5\u02f4\u017b\2\u0c39\u0c3a\7\u02d5\2\2\u0c3a\u0c3e\3\2\2\2\u0c3b"+
		"\u0c3c\7m\2\2\u0c3c\u0c3e\7\u012f\2\2\u0c3d\u0c2f\3\2\2\2\u0c3d\u0c31"+
		"\3\2\2\2\u0c3d\u0c34\3\2\2\2\u0c3d\u0c36\3\2\2\2\u0c3d\u0c3b\3\2\2\2\u0c3e"+
		"\u013b\3\2\2\2\u0c3f\u0c40\7\u01b5\2\2\u0c40\u0c41\5\u013e\u00a0\2\u0c41"+
		"\u0c42\7\u01b0\2\2\u0c42\u0c43\5\u013e\u00a0\2\u0c43\u013d\3\2\2\2\u0c44"+
		"\u0c52\5\u013a\u009e\2\u0c45\u0c46\7\u02da\2\2\u0c46\u0c52\7\u02ca\2\2"+
		"\u0c47\u0c48\5\u0470\u0239\2\u0c48\u0c49\7\u02ca\2\2\u0c49\u0c52\3\2\2"+
		"\2\u0c4a\u0c4b\7\u01a6\2\2\u0c4b\u0c52\7\u02ca\2\2\u0c4c\u0c4d\7\u0211"+
		"\2\2\u0c4d\u0c4e\5\u029c\u014f\2\u0c4e\u0c4f\5\u02f4\u017b\2\u0c4f\u0c50"+
		"\7\u02ca\2\2\u0c50\u0c52\3\2\2\2\u0c51\u0c44\3\2\2\2\u0c51\u0c45\3\2\2"+
		"\2\u0c51\u0c47\3\2\2\2\u0c51\u0c4a\3\2\2\2\u0c51\u0c4c\3\2\2\2\u0c52\u013f"+
		"\3\2\2\2\u0c53\u0c5a\7\u02c8\2\2\u0c54\u0c55\7m\2\2\u0c55\u0c5b\7\u012f"+
		"\2\2\u0c56\u0c5b\7\u0202\2\2\u0c57\u0c5b\7\u02d9\2\2\u0c58\u0c59\7\35"+
		"\2\2\u0c59\u0c5b\7\u02d2\2\2\u0c5a\u0c54\3\2\2\2\u0c5a\u0c56\3\2\2\2\u0c5a"+
		"\u0c57\3\2\2\2\u0c5a\u0c58\3\2\2\2\u0c5b\u0141\3\2\2\2\u0c5c\u0c5e\7\u02ac"+
		"\2\2\u0c5d\u0c5f\7\u02b9\2\2\u0c5e\u0c5d\3\2\2\2\u0c5e\u0c5f\3\2\2\2\u0c5f"+
		"\u0c60\3\2\2\2\u0c60\u0c65\5\u0144\u00a3\2\u0c61\u0c62\7\u0198\2\2\u0c62"+
		"\u0c64\5\u0144\u00a3\2\u0c63\u0c61\3\2\2\2\u0c64\u0c67\3\2\2\2\u0c65\u0c63"+
		"\3\2\2\2\u0c65\u0c66\3\2\2\2\u0c66\u0143\3\2\2\2\u0c67\u0c65\3\2\2\2\u0c68"+
		"\u0c6a\5\u0460\u0231\2\u0c69\u0c6b\5\u040c\u0207\2\u0c6a\u0c69\3\2\2\2"+
		"\u0c6a\u0c6b\3\2\2\2\u0c6b\u0c6c\3\2\2\2\u0c6c\u0c6d\7\u01b1\2\2\u0c6d"+
		"\u0c6e\5\u011a\u008e\2\u0c6e\u0145\3\2\2\2\u0c6f\u0c70\7\u0202\2\2\u0c70"+
		"\u0c71\7\u01be\2\2\u0c71\u0c73\5\u02fe\u0180\2\u0c72\u0c74\5\u0148\u00a5"+
		"\2\u0c73\u0c72\3\2\2\2\u0c73\u0c74\3\2\2\2\u0c74\u0147\3\2\2\2\u0c75\u0c76"+
		"\7\u02ac\2\2\u0c76\u0c7b\7\u0129\2\2\u0c77\u0c78\6\u00a5\61\2\u0c78\u0c79"+
		"\7\u02ac\2\2\u0c79\u0c7b\7l\2\2\u0c7a\u0c75\3\2\2\2\u0c7a\u0c77\3\2\2"+
		"\2\u0c7b\u0149\3\2\2\2\u0c7c\u0c7d\7\u024c\2\2\u0c7d\u0c7e\7\u01be\2\2"+
		"\u0c7e\u0c7f\5\u02fe\u0180\2\u0c7f\u014b\3\2\2\2\u0c80\u0c81\t#\2\2\u0c81"+
		"\u014d\3\2\2\2\u0c82\u0c85\7\u01fd\2\2\u0c83\u0c86\7\u01ea\2\2\u0c84\u0c86"+
		"\5\u0150\u00a9\2\u0c85\u0c83\3\2\2\2\u0c85\u0c84\3\2\2\2\u0c86\u014f\3"+
		"\2\2\2\u0c87\u0c8c\5\u0162\u00b2\2\u0c88\u0c89\7\u0198\2\2\u0c89\u0c8b"+
		"\5\u0162\u00b2\2\u0c8a\u0c88\3\2\2\2\u0c8b\u0c8e\3\2\2\2\u0c8c\u0c8a\3"+
		"\2\2\2\u0c8c\u0c8d\3\2\2\2\u0c8d\u0151\3\2\2\2\u0c8e\u0c8c\3\2\2\2\u0c8f"+
		"\u0c98\5\u011c\u008f\2\u0c90\u0c98\7\u0142\2\2\u0c91\u0c92\6\u00aa\62"+
		"\2\u0c92\u0c98\7\u0140\2\2\u0c93\u0c94\6\u00aa\63\2\u0c94\u0c95\7\u00d3"+
		"\2\2\u0c95\u0c96\7\u0181\2\2\u0c96\u0c98\5\u046e\u0238\2\u0c97\u0c8f\3"+
		"\2\2\2\u0c97\u0c90\3\2\2\2\u0c97\u0c91\3\2\2\2\u0c97\u0c93\3\2\2\2\u0c98"+
		"\u0153\3\2\2\2\u0c99\u0c9a\7\u01fc\2\2\u0c9a\u0c9e\5\u0156\u00ac\2\u0c9b"+
		"\u0c9c\6\u00ab\64\2\u0c9c\u0c9d\7\u02bc\2\2\u0c9d\u0c9f\5\u044a\u0226"+
		"\2\u0c9e\u0c9b\3\2\2\2\u0c9e\u0c9f\3\2\2\2\u0c9f\u0ca2\3\2\2\2\u0ca0\u0ca1"+
		"\6\u00ab\65\2\u0ca1\u0ca3\5\u0158\u00ad\2\u0ca2\u0ca0\3\2\2\2\u0ca2\u0ca3"+
		"\3\2\2\2\u0ca3\u0ca9\3\2\2\2\u0ca4\u0ca5\7\u0226\2\2\u0ca5\u0ca6\7\u0214"+
		"\2\2\u0ca6\u0ca7\7\u0138\2\2\u0ca7\u0ca9\7\u00e0\2\2\u0ca8\u0c99\3\2\2"+
		"\2\u0ca8\u0ca4\3\2\2\2\u0ca9\u0155\3\2\2\2\u0caa\u0cae\7\u0299\2\2\u0cab"+
		"\u0cac\6\u00ac\66\2\u0cac\u0cae\7\u0138\2\2\u0cad\u0caa\3\2\2\2\u0cad"+
		"\u0cab\3\2\2\2\u0cae\u0157\3\2\2\2\u0caf\u0cb0\7\u02bd\2\2\u0cb0\u0cb3"+
		"\7\u02be\2\2\u0cb1\u0cb3\7\u02bf\2\2\u0cb2\u0caf\3\2\2\2\u0cb2\u0cb1\3"+
		"\2\2\2\u0cb3\u0159\3\2\2\2\u0cb4\u0cb7\5\u015c\u00af\2\u0cb5\u0cb7\7\u018b"+
		"\2\2\u0cb6\u0cb4\3\2\2\2\u0cb6\u0cb5\3\2\2\2\u0cb7\u0cbc\3\2\2\2\u0cb8"+
		"\u0cb9\7\u0198\2\2\u0cb9\u0cbb\5\u015c\u00af\2\u0cba\u0cb8\3\2\2\2\u0cbb"+
		"\u0cbe\3\2\2\2\u0cbc\u0cba\3\2\2\2\u0cbc\u0cbd\3\2\2\2\u0cbd\u015b\3\2"+
		"\2\2\u0cbe\u0cbc\3\2\2\2\u0cbf\u0cc5\5\u0416\u020c\2\u0cc0\u0cc2\5\u029c"+
		"\u014f\2\u0cc1\u0cc3\5\u015e\u00b0\2\u0cc2\u0cc1\3\2\2\2\u0cc2\u0cc3\3"+
		"\2\2\2\u0cc3\u0cc5\3\2\2\2\u0cc4\u0cbf\3\2\2\2\u0cc4\u0cc0\3\2\2\2\u0cc5"+
		"\u015d\3\2\2\2\u0cc6\u0cc8\7\u01b1\2\2\u0cc7\u0cc6\3\2\2\2\u0cc7\u0cc8"+
		"\3\2\2\2\u0cc8\u0ccb\3\2\2\2\u0cc9\u0ccc\5\u0460\u0231\2\u0cca\u0ccc\5"+
		"\u047a\u023e\2\u0ccb\u0cc9\3\2\2\2\u0ccb\u0cca\3\2\2\2\u0ccc\u015f\3\2"+
		"\2\2\u0ccd\u0cce\7\u02aa\2\2\u0cce\u0ccf\5\u029c\u014f\2\u0ccf\u0161\3"+
		"\2\2\2\u0cd0\u0cdb\5\u016e\u00b8\2\u0cd1\u0cd5\7\u019d\2\2\u0cd2\u0cd3"+
		"\6\u00b2\67\2\u0cd3\u0cd6\5\u0460\u0231\2\u0cd4\u0cd6\7\u02fc\2\2\u0cd5"+
		"\u0cd2\3\2\2\2\u0cd5\u0cd4\3\2\2\2\u0cd6\u0cd7\3\2\2\2\u0cd7\u0cd8\5\u0164"+
		"\u00b3\2\u0cd8\u0cd9\7\u019e\2\2\u0cd9\u0cdb\3\2\2\2\u0cda\u0cd0\3\2\2"+
		"\2\u0cda\u0cd1\3\2\2\2\u0cdb\u0cdf\3\2\2\2\u0cdc\u0cde\5\u0166\u00b4\2"+
		"\u0cdd\u0cdc\3\2\2\2\u0cde\u0ce1\3\2\2\2\u0cdf\u0cdd\3\2\2\2\u0cdf\u0ce0"+
		"\3\2\2\2\u0ce0\u0163\3\2\2\2\u0ce1\u0cdf\3\2\2\2\u0ce2\u0ce6\5\u016e\u00b8"+
		"\2\u0ce3\u0ce5\5\u0166\u00b4\2\u0ce4\u0ce3\3\2\2\2\u0ce5\u0ce8\3\2\2\2"+
		"\u0ce6\u0ce4\3\2\2\2\u0ce6\u0ce7\3\2\2\2\u0ce7\u0165\3\2\2\2\u0ce8\u0ce6"+
		"\3\2\2\2\u0ce9\u0cea\5\u016a\u00b6\2\u0cea\u0cef\5\u0162\u00b2\2\u0ceb"+
		"\u0cec\7\u0245\2\2\u0cec\u0cf0\5\u029c\u014f\2\u0ced\u0cee\7\u029c\2\2"+
		"\u0cee\u0cf0\5\u0464\u0233\2\u0cef\u0ceb\3\2\2\2\u0cef\u0ced\3\2\2\2\u0cef"+
		"\u0cf0\3\2\2\2\u0cf0\u0cfd\3\2\2\2\u0cf1\u0cf2\5\u016c\u00b7\2\u0cf2\u0cf7"+
		"\5\u0162\u00b2\2\u0cf3\u0cf4\7\u0245\2\2\u0cf4\u0cf8\5\u029c\u014f\2\u0cf5"+
		"\u0cf6\7\u029c\2\2\u0cf6\u0cf8\5\u0464\u0233\2\u0cf7\u0cf3\3\2\2\2\u0cf7"+
		"\u0cf5\3\2\2\2\u0cf8\u0cfd\3\2\2\2\u0cf9\u0cfa\5\u0168\u00b5\2\u0cfa\u0cfb"+
		"\5\u016e\u00b8\2\u0cfb\u0cfd\3\2\2\2\u0cfc\u0ce9\3\2\2\2\u0cfc\u0cf1\3"+
		"\2\2\2\u0cfc\u0cf9\3\2\2\2\u0cfd\u0167\3\2\2\2\u0cfe\u0d00\7\u023b\2\2"+
		"\u0cff\u0d01\7\u020d\2\2\u0d00\u0cff\3\2\2\2\u0d00\u0d01\3\2\2\2\u0d01"+
		"\u0d02\3\2\2\2\u0d02\u0d0a\7\u0219\2\2\u0d03\u0d04\7\u023b\2\2\u0d04\u0d06"+
		"\t$\2\2\u0d05\u0d07\7\u024e\2\2\u0d06\u0d05\3\2\2\2\u0d06\u0d07\3\2\2"+
		"\2\u0d07\u0d08\3\2\2\2\u0d08\u0d0a\7\u0219\2\2\u0d09\u0cfe\3\2\2\2\u0d09"+
		"\u0d03\3\2\2\2\u0d0a\u0169\3\2\2\2\u0d0b\u0d0d\t%\2\2\u0d0c\u0d0b\3\2"+
		"\2\2\u0d0c\u0d0d\3\2\2\2\u0d0d\u0d0e\3\2\2\2\u0d0e\u0d11\7\u0219\2\2\u0d0f"+
		"\u0d11\7\u0282\2\2\u0d10\u0d0c\3\2\2\2\u0d10\u0d0f\3\2\2\2\u0d11\u016b"+
		"\3\2\2\2\u0d12\u0d14\t$\2\2\u0d13\u0d15\7\u024e\2\2\u0d14\u0d13\3\2\2"+
		"\2\u0d14\u0d15\3\2\2\2\u0d15\u0d16\3\2\2\2\u0d16\u0d17\7\u0219\2\2\u0d17"+
		"\u016d\3\2\2\2\u0d18\u0d1f\5\u0170\u00b9\2\u0d19\u0d1f\5\u0172\u00ba\2"+
		"\u0d1a\u0d1f\5\u0174\u00bb\2\u0d1b\u0d1f\5\u0176\u00bc\2\u0d1c\u0d1d\6"+
		"\u00b88\2\u0d1d\u0d1f\5\u0178\u00bd\2\u0d1e\u0d18\3\2\2\2\u0d1e\u0d19"+
		"\3\2\2\2\u0d1e\u0d1a\3\2\2\2\u0d1e\u0d1b\3\2\2\2\u0d1e\u0d1c\3\2\2\2\u0d1f"+
		"\u016f\3\2\2\2\u0d20\u0d22\5\u0446\u0224\2\u0d21\u0d23\5\u0404\u0203\2"+
		"\u0d22\u0d21\3\2\2\2\u0d22\u0d23\3\2\2\2\u0d23\u0d25\3\2\2\2\u0d24\u0d26"+
		"\5\u0188\u00c5\2\u0d25\u0d24\3\2\2\2\u0d25\u0d26\3\2\2\2\u0d26\u0d28\3"+
		"\2\2\2\u0d27\u0d29\5\u018a\u00c6\2\u0d28\u0d27\3\2\2\2\u0d28\u0d29\3\2"+
		"\2\2\u0d29\u0171\3\2\2\2\u0d2a\u0d2d\7\u019b\2\2\u0d2b\u0d2e\5\u0170\u00b9"+
		"\2\u0d2c\u0d2e\5\u0172\u00ba\2\u0d2d\u0d2b\3\2\2\2\u0d2d\u0d2c\3\2\2\2"+
		"\u0d2e\u0d2f\3\2\2\2\u0d2f\u0d30\7\u019c\2\2\u0d30\u0173\3\2\2\2\u0d31"+
		"\u0d33\5\u011a\u008e\2\u0d32\u0d34\5\u0188\u00c5\2\u0d33\u0d32\3\2\2\2"+
		"\u0d33\u0d34\3\2\2\2\u0d34\u0d37\3\2\2\2\u0d35\u0d36\6\u00bb9\2\u0d36"+
		"\u0d38\5\u040c\u0207\2\u0d37\u0d35\3\2\2\2\u0d37\u0d38\3\2\2\2\u0d38\u0d43"+
		"\3\2\2\2\u0d39\u0d3a\6\u00bb:\2\u0d3a\u0d3b\7\u02f6\2\2\u0d3b\u0d3d\5"+
		"\u011a\u008e\2\u0d3c\u0d3e\5\u0188\u00c5\2\u0d3d\u0d3c\3\2\2\2\u0d3d\u0d3e"+
		"\3\2\2\2\u0d3e\u0d40\3\2\2\2\u0d3f\u0d41\5\u040c\u0207\2\u0d40\u0d3f\3"+
		"\2\2\2\u0d40\u0d41\3\2\2\2\u0d41\u0d43\3\2\2\2\u0d42\u0d31\3\2\2\2\u0d42"+
		"\u0d39\3\2\2\2\u0d43\u0175\3\2\2\2\u0d44\u0d47\7\u019b\2\2\u0d45\u0d48"+
		"\5\u0150\u00a9\2\u0d46\u0d48\5\u0176\u00bc\2\u0d47\u0d45\3\2\2\2\u0d47"+
		"\u0d46\3\2\2\2\u0d48\u0d49\3\2\2\2\u0d49\u0d4a\7\u019c\2\2\u0d4a\u0177"+
		"\3\2\2\2\u0d4b\u0d4c\7\u02dd\2\2\u0d4c\u0d4d\7\u019b\2\2\u0d4d\u0d4e\5"+
		"\u029c\u014f\2\u0d4e\u0d4f\7\u0198\2\2\u0d4f\u0d50\5\u047a\u023e\2\u0d50"+
		"\u0d51\5\u017a\u00be\2\u0d51\u0d53\7\u019c\2\2\u0d52\u0d54\5\u0188\u00c5"+
		"\2\u0d53\u0d52\3\2\2\2\u0d53\u0d54\3\2\2\2\u0d54\u0179\3\2\2\2\u0d55\u0d56"+
		"\7\\\2\2\u0d56\u0d57\7\u019b\2\2\u0d57\u0d5c\5\u017c\u00bf\2\u0d58\u0d59"+
		"\7\u0198\2\2\u0d59\u0d5b\5\u017c\u00bf\2\u0d5a\u0d58\3\2\2\2\u0d5b\u0d5e"+
		"\3\2\2\2\u0d5c\u0d5a\3\2\2\2\u0d5c\u0d5d\3\2\2\2\u0d5d\u0d5f\3\2\2\2\u0d5e"+
		"\u0d5c\3\2\2\2\u0d5f\u0d60\7\u019c\2\2\u0d60\u017b\3\2\2\2\u0d61\u0d62"+
		"\5\u0460\u0231\2\u0d62\u0d63\7\u01fc\2\2\u0d63\u0d64\7\u02df\2\2\u0d64"+
		"\u0d79\3\2\2\2\u0d65\u0d66\5\u0460\u0231\2\u0d66\u0d69\5\u038c\u01c7\2"+
		"\u0d67\u0d68\6\u00bf;\2\u0d68\u0d6a\5\u03d2\u01ea\2\u0d69\u0d67\3\2\2"+
		"\2\u0d69\u0d6a\3\2\2\2\u0d6a\u0d6c\3\2\2\2\u0d6b\u0d6d\7\u01f2\2\2\u0d6c"+
		"\u0d6b\3\2\2\2\u0d6c\u0d6d\3\2\2\2\u0d6d\u0d6e\3\2\2\2\u0d6e\u0d6f\7\u02e0"+
		"\2\2\u0d6f\u0d71\5\u047a\u023e\2\u0d70\u0d72\5\u017e\u00c0\2\u0d71\u0d70"+
		"\3\2\2\2\u0d71\u0d72\3\2\2\2\u0d72\u0d79\3\2\2\2\u0d73\u0d74\7\u02de\2"+
		"\2\u0d74\u0d75\7\u02e0\2\2\u0d75\u0d76\5\u047a\u023e\2\u0d76\u0d77\5\u017a"+
		"\u00be\2\u0d77\u0d79\3\2\2\2\u0d78\u0d61\3\2\2\2\u0d78\u0d65\3\2\2\2\u0d78"+
		"\u0d73\3\2\2\2\u0d79\u017d\3\2\2\2\u0d7a\u0d7c\5\u0180\u00c1\2\u0d7b\u0d7d"+
		"\5\u0182\u00c2\2\u0d7c\u0d7b\3\2\2\2\u0d7c\u0d7d\3\2\2\2\u0d7d\u0d83\3"+
		"\2\2\2\u0d7e\u0d80\5\u0182\u00c2\2\u0d7f\u0d81\5\u0180\u00c1\2\u0d80\u0d7f"+
		"\3\2\2\2\u0d80\u0d81\3\2\2\2\u0d81\u0d83\3\2\2\2\u0d82\u0d7a\3\2\2\2\u0d82"+
		"\u0d7e\3\2\2\2\u0d83\u017f\3\2\2\2\u0d84\u0d85\5\u0184\u00c3\2\u0d85\u0d86"+
		"\7\u0245\2\2\u0d86\u0d87\7\u02dc\2\2\u0d87\u0181\3\2\2\2\u0d88\u0d89\5"+
		"\u0184\u00c3\2\u0d89\u0d8a\7\u0245\2\2\u0d8a\u0d8b\7\u0084\2\2\u0d8b\u0183"+
		"\3\2\2\2\u0d8c\u0d91\7\u0084\2\2\u0d8d\u0d91\7\u0242\2\2\u0d8e\u0d8f\7"+
		"\u01e0\2\2\u0d8f\u0d91\5\u047a\u023e\2\u0d90\u0d8c\3\2\2\2\u0d90\u0d8d"+
		"\3\2\2\2\u0d90\u0d8e\3\2\2\2\u0d91\u0185\3\2\2\2\u0d92\u0d93\t&\2\2\u0d93"+
		"\u0187\3\2\2\2\u0d94\u0d98\7\u01b1\2\2\u0d95\u0d96\6\u00c5<\2\u0d96\u0d98"+
		"\7\u0181\2\2\u0d97\u0d94\3\2\2\2\u0d97\u0d95\3\2\2\2\u0d97\u0d98\3\2\2"+
		"\2\u0d98\u0d99\3\2\2\2\u0d99\u0d9a\5\u0460\u0231\2\u0d9a\u0189\3\2\2\2"+
		"\u0d9b\u0da0\5\u018c\u00c7\2\u0d9c\u0d9d\7\u0198\2\2\u0d9d\u0d9f\5\u018c"+
		"\u00c7\2\u0d9e\u0d9c\3\2\2\2\u0d9f\u0da2\3\2\2\2\u0da0\u0d9e\3\2\2\2\u0da0"+
		"\u0da1\3\2\2\2\u0da1\u018b\3\2\2\2\u0da2\u0da0\3\2\2\2\u0da3\u0da4\5\u018e"+
		"\u00c8\2\u0da4\u0da6\5\u0190\u00c9\2\u0da5\u0da7\5\u0194\u00cb\2\u0da6"+
		"\u0da5\3\2\2\2\u0da6\u0da7\3\2\2\2\u0da7\u0da8\3\2\2\2\u0da8\u0da9\7\u019b"+
		"\2\2\u0da9\u0daa\5\u0196\u00cc\2\u0daa\u0dab\7\u019c\2\2\u0dab\u0db8\3"+
		"\2\2\2\u0dac\u0dad\7\u029b\2\2\u0dad\u0daf\5\u0190\u00c9\2\u0dae\u0db0"+
		"\5\u0194\u00cb\2\u0daf\u0dae\3\2\2\2\u0daf\u0db0\3\2\2\2\u0db0\u0db1\3"+
		"\2\2\2\u0db1\u0db3\7\u019b\2\2\u0db2\u0db4\5\u0196\u00cc\2\u0db3\u0db2"+
		"\3\2\2\2\u0db3\u0db4\3\2\2\2\u0db4\u0db5\3\2\2\2\u0db5\u0db6\7\u019c\2"+
		"\2\u0db6\u0db8\3\2\2\2\u0db7\u0da3\3\2\2\2\u0db7\u0dac\3\2\2\2\u0db8\u018d"+
		"\3\2\2\2\u0db9\u0dba\t\'\2\2\u0dba\u018f\3\2\2\2\u0dbb\u0dbc\t(\2\2\u0dbc"+
		"\u0191\3\2\2\2\u0dbd\u0dbe\7\u0253\2\2\u0dbe\u0dc4\7\u021b\2\2\u0dbf\u0dc1"+
		"\7\u0296\2\2\u0dc0\u0dc2\5\u0190\u00c9\2\u0dc1\u0dc0\3\2\2\2\u0dc1\u0dc2"+
		"\3\2\2\2\u0dc2\u0dc4\3\2\2\2\u0dc3\u0dbd\3\2\2\2\u0dc3\u0dbf\3\2\2\2\u0dc4"+
		"\u0193\3\2\2\2\u0dc5\u0dcb\7\u01fc\2\2\u0dc6\u0dcc\7\u0219\2\2\u0dc7\u0dc8"+
		"\7\u024c\2\2\u0dc8\u0dcc\7\u01be\2\2\u0dc9\u0dca\7\u0202\2\2\u0dca\u0dcc"+
		"\7\u01be\2\2\u0dcb\u0dc6\3\2\2\2\u0dcb\u0dc7\3\2\2\2\u0dcb\u0dc9\3\2\2"+
		"\2\u0dcc\u0195\3\2\2\2\u0dcd\u0dd2\5\u0198\u00cd\2\u0dce\u0dcf\7\u0198"+
		"\2\2\u0dcf\u0dd1\5\u0198\u00cd\2\u0dd0\u0dce\3\2\2\2\u0dd1\u0dd4\3\2\2"+
		"\2\u0dd2\u0dd0\3\2\2\2\u0dd2\u0dd3\3\2\2\2\u0dd3\u0197\3\2\2\2\u0dd4\u0dd2"+
		"\3\2\2\2\u0dd5\u0dd8\5\u0460\u0231\2\u0dd6\u0dd8\7\u0253\2\2\u0dd7\u0dd5"+
		"\3\2\2\2\u0dd7\u0dd6\3\2\2\2\u0dd8\u0199\3\2\2\2\u0dd9\u0dda\6\u00ce="+
		"\2\u0dda\u0ddc\5\u0142\u00a2\2\u0ddb\u0dd9\3\2\2\2\u0ddb\u0ddc\3\2\2\2"+
		"\u0ddc\u0ddd\3\2\2\2\u0ddd\u0ddf\7\u0299\2\2\u0dde\u0de0\7\u022c\2\2\u0ddf"+
		"\u0dde\3\2\2\2\u0ddf\u0de0\3\2\2\2\u0de0\u0de2\3\2\2\2\u0de1\u0de3\7\u020a"+
		"\2\2\u0de2\u0de1\3\2\2\2\u0de2\u0de3\3\2\2\2\u0de3\u0de4\3\2\2\2\u0de4"+
		"\u0de5\5\u0150\u00a9\2\u0de5\u0de6\7\u026d\2\2\u0de6\u0de8\5\u03da\u01ee"+
		"\2\u0de7\u0de9\5\u0160\u00b1\2\u0de8\u0de7\3\2\2\2\u0de8\u0de9\3\2\2\2"+
		"\u0de9\u0deb\3\2\2\2\u0dea\u0dec\5\u014a\u00a6\2\u0deb\u0dea\3\2\2\2\u0deb"+
		"\u0dec\3\2\2\2\u0dec\u0dee\3\2\2\2\u0ded\u0def\5\u0120\u0091\2\u0dee\u0ded"+
		"\3\2\2\2\u0dee\u0def\3\2\2\2\u0def\u019b\3\2\2\2\u0df0\u0df5\5\u019e\u00d0"+
		"\2\u0df1\u0df5\5\u01a4\u00d3\2\u0df2\u0df5\5\u01a6\u00d4\2\u0df3\u0df5"+
		"\5\u01ac\u00d7\2\u0df4\u0df0\3\2\2\2\u0df4\u0df1\3\2\2\2\u0df4\u0df2\3"+
		"\2\2\2\u0df4\u0df3\3\2\2\2\u0df5\u019d\3\2\2\2\u0df6\u0df7\7\62\2\2\u0df7"+
		"\u0dfb\7\u015d\2\2\u0df8\u0dfa\5\u01a2\u00d2\2\u0df9\u0df8\3\2\2\2\u0dfa"+
		"\u0dfd\3\2\2\2\u0dfb\u0df9\3\2\2\2\u0dfb\u0dfc\3\2\2\2\u0dfc\u0e10\3\2"+
		"\2\2\u0dfd\u0dfb\3\2\2\2\u0dfe\u0e00\7\16\2\2\u0dff\u0e01\7\u0176\2\2"+
		"\u0e00\u0dff\3\2\2\2\u0e00\u0e01\3\2\2\2\u0e01\u0e07\3\2\2\2\u0e02\u0e04"+
		"\7\u01b0\2\2\u0e03\u0e05\7\35\2\2\u0e04\u0e03\3\2\2\2\u0e04\u0e05\3\2"+
		"\2\2\u0e05\u0e06\3\2\2\2\u0e06\u0e08\7Q\2\2\u0e07\u0e02\3\2\2\2\u0e07"+
		"\u0e08\3\2\2\2\u0e08\u0e0d\3\2\2\2\u0e09\u0e0b\7\35\2\2\u0e0a\u0e09\3"+
		"\2\2\2\u0e0a\u0e0b\3\2\2\2\u0e0b\u0e0c\3\2\2\2\u0e0c\u0e0e\7\u025d\2\2"+
		"\u0e0d\u0e0a\3\2\2\2\u0e0d\u0e0e\3\2\2\2\u0e0e\u0e10\3\2\2\2\u0e0f\u0df6"+
		"\3\2\2\2\u0e0f\u0dfe\3\2\2\2\u0e10\u019f\3\2\2\2\u0e11\u0e13\7\7\2\2\u0e12"+
		"\u0e14\7\u0176\2\2\u0e13\u0e12\3\2\2\2\u0e13\u0e14\3\2\2\2\u0e14\u01a1"+
		"\3\2\2\2\u0e15\u0e16\7\u02ac\2\2\u0e16\u0e17\7e\2\2\u0e17\u0e1c\7\u013a"+
		"\2\2\u0e18\u0e19\6\u00d2>\2\u0e19\u0e1a\7\u0258\2\2\u0e1a\u0e1c\t)\2\2"+
		"\u0e1b\u0e15\3\2\2\2\u0e1b\u0e18\3\2\2\2\u0e1c\u01a3\3\2\2\2\u0e1d\u0e1e"+
		"\7+\2\2\u0e1e\u0e3b\5\u0460\u0231\2\u0e1f\u0e21\7*\2\2\u0e20\u0e22\7\u0176"+
		"\2\2\u0e21\u0e20\3\2\2\2\u0e21\u0e22\3\2\2\2\u0e22\u0e35\3\2\2\2\u0e23"+
		"\u0e25\7\u028f\2\2\u0e24\u0e26\7+\2\2\u0e25\u0e24\3\2\2\2\u0e25\u0e26"+
		"\3\2\2\2\u0e26\u0e27\3\2\2\2\u0e27\u0e36\5\u0460\u0231\2\u0e28\u0e2a\7"+
		"\u01b0\2\2\u0e29\u0e2b\7\35\2\2\u0e2a\u0e29\3\2\2\2\u0e2a\u0e2b\3\2\2"+
		"\2\u0e2b\u0e2c\3\2\2\2\u0e2c\u0e2e\7Q\2\2\u0e2d\u0e28\3\2\2\2\u0e2d\u0e2e"+
		"\3\2\2\2\u0e2e\u0e33\3\2\2\2\u0e2f\u0e31\7\35\2\2\u0e30\u0e2f\3\2\2\2"+
		"\u0e30\u0e31\3\2\2\2\u0e31\u0e32\3\2\2\2\u0e32\u0e34\7\u025d\2\2\u0e33"+
		"\u0e30\3\2\2\2\u0e33\u0e34\3\2\2\2\u0e34\u0e36\3\2\2\2\u0e35\u0e23\3\2"+
		"\2\2\u0e35\u0e2d\3\2\2\2\u0e36\u0e3b\3\2\2\2\u0e37\u0e38\7\u025d\2\2\u0e38"+
		"\u0e39\7+\2\2\u0e39\u0e3b\5\u0460\u0231\2\u0e3a\u0e1d\3\2\2\2\u0e3a\u0e1f"+
		"\3\2\2\2\u0e3a\u0e37\3\2\2\2\u0e3b\u01a5\3\2\2\2\u0e3c\u0e3d\7\u0226\2"+
		"\2\u0e3d\u0e3e\t\24\2\2\u0e3e\u0e43\5\u01a8\u00d5\2\u0e3f\u0e40\7\u0198"+
		"\2\2\u0e40\u0e42\5\u01a8\u00d5\2\u0e41\u0e3f\3\2\2\2\u0e42\u0e45\3\2\2"+
		"\2\u0e43\u0e41\3\2\2\2\u0e43\u0e44\3\2\2\2\u0e44\u0e53\3\2\2\2\u0e45\u0e43"+
		"\3\2\2\2\u0e46\u0e47\6\u00d4?\2\u0e47\u0e48\7\u0226\2\2\u0e48\u0e49\7"+
		"\u00a7\2\2\u0e49\u0e4a\7\u01fc\2\2\u0e4a\u0e53\7\6\2\2\u0e4b\u0e50\7\u0297"+
		"\2\2\u0e4c\u0e51\7\u0156\2\2\u0e4d\u0e51\7\u0289\2\2\u0e4e\u0e4f\6\u00d4"+
		"@\2\u0e4f\u0e51\7\u00a7\2\2\u0e50\u0e4c\3\2\2\2\u0e50\u0e4d\3\2\2\2\u0e50"+
		"\u0e4e\3\2\2\2\u0e51\u0e53\3\2\2\2\u0e52\u0e3c\3\2\2\2\u0e52\u0e46\3\2"+
		"\2\2\u0e52\u0e4b\3\2\2\2\u0e53\u01a7\3\2\2\2\u0e54\u0e56\5\u0446\u0224"+
		"\2\u0e55\u0e57\5\u0188\u00c5\2\u0e56\u0e55\3\2\2\2\u0e56\u0e57\3\2\2\2"+
		"\u0e57\u0e58\3\2\2\2\u0e58\u0e59\5\u01aa\u00d6\2\u0e59\u01a9\3\2\2\2\u0e5a"+
		"\u0e5c\7\u0258\2\2\u0e5b\u0e5d\7\u00b6\2\2\u0e5c\u0e5b\3\2\2\2\u0e5c\u0e5d"+
		"\3\2\2\2\u0e5d\u0e63\3\2\2\2\u0e5e\u0e60\7\u022c\2\2\u0e5f\u0e5e\3\2\2"+
		"\2\u0e5f\u0e60\3\2\2\2\u0e60\u0e61\3\2\2\2\u0e61\u0e63\7\u02ae\2\2\u0e62"+
		"\u0e5a\3\2\2\2\u0e62\u0e5f\3\2\2\2\u0e63\u01ab\3\2\2\2\u0e64\u0e7f\79"+
		"\2\2\u0e65\u0e66\t*\2\2\u0e66\u0e68\5\u01b0\u00d9\2\u0e67\u0e69\t+\2\2"+
		"\u0e68\u0e67\3\2\2\2\u0e68\u0e69\3\2\2\2\u0e69\u0e80\3\2\2\2\u0e6a\u0e6b"+
		"\7\22\2\2\u0e6b\u0e71\5\u01b0\u00d9\2\u0e6c\u0e6f\7\u0152\2\2\u0e6d\u0e6e"+
		"\7\u01fc\2\2\u0e6e\u0e70\7\u00dc\2\2\u0e6f\u0e6d\3\2\2\2\u0e6f\u0e70\3"+
		"\2\2\2\u0e70\u0e72\3\2\2\2\u0e71\u0e6c\3\2\2\2\u0e71\u0e72\3\2\2\2\u0e72"+
		"\u0e80\3\2\2\2\u0e73\u0e74\7%\2\2\u0e74\u0e80\5\u01b0\u00d9\2\u0e75\u0e76"+
		"\7\16\2\2\u0e76\u0e79\5\u01b0\u00d9\2\u0e77\u0e78\7\u00f7\2\2\u0e78\u0e7a"+
		"\7\u00fe\2\2\u0e79\u0e77\3\2\2\2\u0e79\u0e7a\3\2\2\2\u0e7a\u0e80\3\2\2"+
		"\2\u0e7b\u0e7c\7*\2\2\u0e7c\u0e80\5\u01b0\u00d9\2\u0e7d\u0e7e\7\u0111"+
		"\2\2\u0e7e\u0e80\5\u01ae\u00d8\2\u0e7f\u0e65\3\2\2\2\u0e7f\u0e6a\3\2\2"+
		"\2\u0e7f\u0e73\3\2\2\2\u0e7f\u0e75\3\2\2\2\u0e7f\u0e7b\3\2\2\2\u0e7f\u0e7d"+
		"\3\2\2\2\u0e80\u01ad\3\2\2\2\u0e81\u0e84\6\u00d8A\2\u0e82\u0e83\7\u01cb"+
		"\2\2\u0e83\u0e85\7\u0179\2\2\u0e84\u0e82\3\2\2\2\u0e84\u0e85\3\2\2\2\u0e85"+
		"\u0e88\3\2\2\2\u0e86\u0e88\3\2\2\2\u0e87\u0e81\3\2\2\2\u0e87\u0e86\3\2"+
		"\2\2\u0e88\u01af\3\2\2\2\u0e89\u0e90\5\u047c\u023f\2\u0e8a\u0e8b\7\u0198"+
		"\2\2\u0e8b\u0e8e\5\u047c\u023f\2\u0e8c\u0e8d\7\u0198\2\2\u0e8d\u0e8f\5"+
		"\u046c\u0237\2\u0e8e\u0e8c\3\2\2\2\u0e8e\u0e8f\3\2\2\2\u0e8f\u0e91\3\2"+
		"\2\2\u0e90\u0e8a\3\2\2\2\u0e90\u0e91\3\2\2\2\u0e91\u01b1\3\2\2\2\u0e92"+
		"\u0e93\7\u0255\2\2\u0e93\u0e94\t,\2\2\u0e94\u0e99\7\u00b9\2\2\u0e95\u0e96"+
		"\7\u028f\2\2\u0e96\u0e9a\5\u0480\u0241\2\u0e97\u0e98\7\u01b4\2\2\u0e98"+
		"\u0e9a\5\u029c\u014f\2\u0e99\u0e95\3\2\2\2\u0e99\u0e97\3\2\2\2\u0e9a\u0eb4"+
		"\3\2\2\2\u0e9b\u0eb4\5\u01ba\u00de\2\u0e9c\u0e9d\7(\2\2\u0e9d\u0ea2\5"+
		"\u01b4\u00db\2\u0e9e\u0e9f\7\u0198\2\2\u0e9f\u0ea1\5\u01b4\u00db\2\u0ea0"+
		"\u0e9e\3\2\2\2\u0ea1\u0ea4\3\2\2\2\u0ea2\u0ea0\3\2\2\2\u0ea2\u0ea3\3\2"+
		"\2\2\u0ea3\u0eb4\3\2\2\2\u0ea4\u0ea2\3\2\2\2\u0ea5\u0ea6\6\u00daB\2\u0ea6"+
		"\u0ea7\7(\2\2\u0ea7\u0eab\7\u02b2\2\2\u0ea8\u0ea9\5\u03ca\u01e6\2\u0ea9"+
		"\u0eaa\5\u0460\u0231\2\u0eaa\u0eac\3\2\2\2\u0eab\u0ea8\3\2\2\2\u0eab\u0eac"+
		"\3\2\2\2\u0eac\u0eb4\3\2\2\2\u0ead\u0eb4\5\u01d6\u00ec\2\u0eae\u0eaf\6"+
		"\u00daC\2\u0eaf\u0eb4\5\u01c8\u00e5\2\u0eb0\u0eb4\5\u01b8\u00dd\2\u0eb1"+
		"\u0eb2\6\u00daD\2\u0eb2\u0eb4\5\u01e0\u00f1\2\u0eb3\u0e92\3\2\2\2\u0eb3"+
		"\u0e9b\3\2\2\2\u0eb3\u0e9c\3\2\2\2\u0eb3\u0ea5\3\2\2\2\u0eb3\u0ead\3\2"+
		"\2\2\u0eb3\u0eae\3\2\2\2\u0eb3\u0eb0\3\2\2\2\u0eb3\u0eb1\3\2\2\2\u0eb4"+
		"\u01b3\3\2\2\2\u0eb5\u0eb7\7\u00bb\2\2\u0eb6\u0eb8\5\u01b6\u00dc\2\u0eb7"+
		"\u0eb6\3\2\2\2\u0eb7\u0eb8\3\2\2\2\u0eb8\u0ec4\3\2\2\2\u0eb9\u0eba\6\u00db"+
		"E\2\u0eba\u0ebb\7\u010d\2\2\u0ebb\u0ec4\7\t\2\2\u0ebc\u0ebe\7/\2\2\u0ebd"+
		"\u0ebf\7\u01ad\2\2\u0ebe\u0ebd\3\2\2\2\u0ebe\u0ebf\3\2\2\2\u0ebf\u0ec1"+
		"\3\2\2\2\u0ec0\u0ec2\5\u0306\u0184\2\u0ec1\u0ec0\3\2\2\2\u0ec1\u0ec2\3"+
		"\2\2\2\u0ec2\u0ec4\3\2\2\2\u0ec3\u0eb5\3\2\2\2\u0ec3\u0eb9\3\2\2\2\u0ec3"+
		"\u0ebc\3\2\2\2\u0ec4\u01b5\3\2\2\2\u0ec5\u0ec6\6\u00dcF\2\u0ec6\u0ecb"+
		"\7\u028f\2\2\u0ec7\u0ec8\6\u00dcG\2\u0ec8\u0ecc\5\u046e\u0238\2\u0ec9"+
		"\u0eca\6\u00dcH\2\u0eca\u0ecc\5\u0472\u023a\2\u0ecb\u0ec7\3\2\2\2\u0ecb"+
		"\u0ec9\3\2\2\2\u0ecc\u01b7\3\2\2\2\u0ecd\u0ed1\7\u0224\2\2\u0ece\u0ed2"+
		"\7o\2\2\u0ecf\u0ed0\7\u0289\2\2\u0ed0\u0ed2\5\u0446\u0224\2\u0ed1\u0ece"+
		"\3\2\2\2\u0ed1\u0ecf\3\2\2\2\u0ed2\u0ed3\3\2\2\2\u0ed3\u0ed4\7\u01fd\2"+
		"\2\u0ed4\u0ed5\7\u00bb\2\2\u0ed5\u01b9\3\2\2\2\u0ed6\u0ed7\7\u01c3\2\2"+
		"\u0ed7\u0ed8\7\u00bb\2\2\u0ed8\u0ed9\7\u028f\2\2\u0ed9\u0edb\5\u01bc\u00df"+
		"\2\u0eda\u0edc\5\u0306\u0184\2\u0edb\u0eda\3\2\2\2\u0edb\u0edc\3\2\2\2"+
		"\u0edc\u01bb\3\2\2\2\u0edd\u0ee2\5\u01be\u00e0\2\u0ede\u0edf\7\u0198\2"+
		"\2\u0edf\u0ee1\5\u01be\u00e0\2\u0ee0\u0ede\3\2\2\2\u0ee1\u0ee4\3\2\2\2"+
		"\u0ee2\u0ee0\3\2\2\2\u0ee2\u0ee3\3\2\2\2\u0ee3\u01bd\3\2\2\2\u0ee4\u0ee2"+
		"\3\2\2\2\u0ee5\u0ee6\7\u00bd\2\2\u0ee6\u0ee7\7\u0181\2\2\u0ee7\u0f3b\5"+
		"\u0482\u0242\2\u0ee8\u0ee9\7\u02f9\2\2\u0ee9\u0eea\7\u0181\2\2\u0eea\u0f3b"+
		"\5\u0482\u0242\2\u0eeb\u0eec\7\u022d\2\2\u0eec\u0eed\7\u0181\2\2\u0eed"+
		"\u0f3b\5\u0482\u0242\2\u0eee\u0eef\7\u00c1\2\2\u0eef\u0ef0\7\u0181\2\2"+
		"\u0ef0\u0f3b\5\u0482\u0242\2\u0ef1\u0ef2\7\u00c2\2\2\u0ef2\u0ef3\7\u0181"+
		"\2\2\u0ef3\u0f3b\5\u0482\u0242\2\u0ef4\u0ef5\7\u00be\2\2\u0ef5\u0ef6\7"+
		"\u0181\2\2\u0ef6\u0f3b\5\u046c\u0237\2\u0ef7\u0ef8\7\u00c4\2\2\u0ef8\u0ef9"+
		"\7\u0181\2\2\u0ef9\u0f3b\5\u046c\u0237\2\u0efa\u0efb\7\u00c5\2\2\u0efb"+
		"\u0efc\7\u0181\2\2\u0efc\u0f3b\5\u046c\u0237\2\u0efd\u0efe\7\u00c6\2\2"+
		"\u0efe\u0eff\7\u0181\2\2\u0eff\u0f3b\5\u046c\u0237\2\u0f00\u0f01\7\u00c7"+
		"\2\2\u0f01\u0f02\7\u0181\2\2\u0f02\u0f3b\5\u046c\u0237\2\u0f03\u0f04\7"+
		"\u00c8\2\2\u0f04\u0f05\7\u0181\2\2\u0f05\u0f3b\5\u0482\u0242\2\u0f06\u0f07"+
		"\7\u00c9\2\2\u0f07\u0f08\7\u0181\2\2\u0f08\u0f3b\5\u0482\u0242\2\u0f09"+
		"\u0f0a\7\u00ca\2\2\u0f0a\u0f0b\7\u0181\2\2\u0f0b\u0f3b\5\u0482\u0242\2"+
		"\u0f0c\u0f0d\7\u00cb\2\2\u0f0d\u0f0e\7\u0181\2\2\u0f0e\u0f3b\5\u0482\u0242"+
		"\2\u0f0f\u0f10\7\u0302\2\2\u0f10\u0f11\7\u0181\2\2\u0f11\u0f3b\5\u01c2"+
		"\u00e2\2\u0f12\u0f13\7\u00cc\2\2\u0f13\u0f14\7\u0181\2\2\u0f14\u0f3b\5"+
		"\u0482\u0242\2\u0f15\u0f16\7\u00cf\2\2\u0f16\u0f17\7\u0181\2\2\u0f17\u0f3b"+
		"\5\u0482\u0242\2\u0f18\u0f19\7\u022e\2\2\u0f19\u0f1a\7\u0181\2\2\u0f1a"+
		"\u0f3b\5\u046c\u0237\2\u0f1b\u0f1c\7\u00cd\2\2\u0f1c\u0f1d\7\u0181\2\2"+
		"\u0f1d\u0f3b\5\u0480\u0241\2\u0f1e\u0f1f\7\u00ce\2\2\u0f1f\u0f20\7\u0181"+
		"\2\2\u0f20\u0f3b\5\u0482\u0242\2\u0f21\u0f22\7\u02e8\2\2\u0f22\u0f23\7"+
		"\u0181\2\2\u0f23\u0f3b\5\u0482\u0242\2\u0f24\u0f25\7\u02e9\2\2\u0f25\u0f26"+
		"\7\u0181\2\2\u0f26\u0f3b\5\u046c\u0237\2\u0f27\u0f28\7\u00bc\2\2\u0f28"+
		"\u0f29\7\u0181\2\2\u0f29\u0f3b\5\u046c\u0237\2\u0f2a\u0f2b\7\u00a2\2\2"+
		"\u0f2b\u0f2c\7\u0181\2\2\u0f2c\u0f3b\5\u01c6\u00e4\2\u0f2d\u0f2e\7\u02ff"+
		"\2\2\u0f2e\u0f2f\7\u0181\2\2\u0f2f\u0f3b\5\u047a\u023e\2\u0f30\u0f31\7"+
		"\u0300\2\2\u0f31\u0f32\7\u0181\2\2\u0f32\u0f3b\5\u046c\u0237\2\u0f33\u0f34"+
		"\7\u00d0\2\2\u0f34\u0f35\7\u0181\2\2\u0f35\u0f3b\5\u046c\u0237\2\u0f36"+
		"\u0f37\7\u0301\2\2\u0f37\u0f38\7\u0181\2\2\u0f38\u0f3b\5\u01c0\u00e1\2"+
		"\u0f39\u0f3b\5\u01c4\u00e3\2\u0f3a\u0ee5\3\2\2\2\u0f3a\u0ee8\3\2\2\2\u0f3a"+
		"\u0eeb\3\2\2\2\u0f3a\u0eee\3\2\2\2\u0f3a\u0ef1\3\2\2\2\u0f3a\u0ef4\3\2"+
		"\2\2\u0f3a\u0ef7\3\2\2\2\u0f3a\u0efa\3\2\2\2\u0f3a\u0efd\3\2\2\2\u0f3a"+
		"\u0f00\3\2\2\2\u0f3a\u0f03\3\2\2\2\u0f3a\u0f06\3\2\2\2\u0f3a\u0f09\3\2"+
		"\2\2\u0f3a\u0f0c\3\2\2\2\u0f3a\u0f0f\3\2\2\2\u0f3a\u0f12\3\2\2\2\u0f3a"+
		"\u0f15\3\2\2\2\u0f3a\u0f18\3\2\2\2\u0f3a\u0f1b\3\2\2\2\u0f3a\u0f1e\3\2"+
		"\2\2\u0f3a\u0f21\3\2\2\2\u0f3a\u0f24\3\2\2\2\u0f3a\u0f27\3\2\2\2\u0f3a"+
		"\u0f2a\3\2\2\2\u0f3a\u0f2d\3\2\2\2\u0f3a\u0f30\3\2\2\2\u0f3a\u0f33\3\2"+
		"\2\2\u0f3a\u0f36\3\2\2\2\u0f3a\u0f39\3\2\2\2\u0f3b\u01bf\3\2\2\2\u0f3c"+
		"\u0f3f\5\u03f8\u01fd\2\u0f3d\u0f3f\7\u0242\2\2\u0f3e\u0f3c\3\2\2\2\u0f3e"+
		"\u0f3d\3\2\2\2\u0f3f\u01c1\3\2\2\2\u0f40\u0f43\5\u0482\u0242\2\u0f41\u0f43"+
		"\7\u0242\2\2\u0f42\u0f40\3\2\2\2\u0f42\u0f41\3\2\2\2\u0f43\u01c3\3\2\2"+
		"\2\u0f44\u0f45\7\u00bf\2\2\u0f45\u0f46\7\u0181\2\2\u0f46\u0f51\5\u0482"+
		"\u0242\2\u0f47\u0f48\7\u00c0\2\2\u0f48\u0f49\7\u0181\2\2\u0f49\u0f51\5"+
		"\u0470\u0239\2\u0f4a\u0f4b\7\u0117\2\2\u0f4b\u0f4c\7\u0181\2\2\u0f4c\u0f51"+
		"\5\u0482\u0242\2\u0f4d\u0f4e\7\u0118\2\2\u0f4e\u0f4f\7\u0181\2\2\u0f4f"+
		"\u0f51\5\u046c\u0237\2\u0f50\u0f44\3\2\2\2\u0f50\u0f47\3\2\2\2\u0f50\u0f4a"+
		"\3\2\2\2\u0f50\u0f4d\3\2\2\2\u0f51\u01c5\3\2\2\2\u0f52\u0f5b\7\u019b\2"+
		"\2\u0f53\u0f58\5\u046c\u0237\2\u0f54\u0f55\7\u0198\2\2\u0f55\u0f57\5\u046c"+
		"\u0237\2\u0f56\u0f54\3\2\2\2\u0f57\u0f5a\3\2";
	private static final String _serializedATNSegment2 =
		"\2\2\u0f58\u0f56\3\2\2\2\u0f58\u0f59\3\2\2\2\u0f59\u0f5c\3\2\2\2\u0f5a"+
		"\u0f58\3\2\2\2\u0f5b\u0f53\3\2\2\2\u0f5b\u0f5c\3\2\2\2\u0f5c\u0f5d\3\2"+
		"\2\2\u0f5d\u0f5e\7\u019c\2\2\u0f5e\u01c7\3\2\2\2\u0f5f\u0f60\7\u01c3\2"+
		"\2\u0f60\u0f61\7\u011d\2\2\u0f61\u0f62\7\u0095\2\2\u0f62\u0f67\5\u01ca"+
		"\u00e6\2\u0f63\u0f64\7\u0198\2\2\u0f64\u0f66\5\u01ca\u00e6\2\u0f65\u0f63"+
		"\3\2\2\2\u0f66\u0f69\3\2\2\2\u0f67\u0f65\3\2\2\2\u0f67\u0f68\3\2\2\2\u0f68"+
		"\u0f6c\3\2\2\2\u0f69\u0f67\3\2\2\2\u0f6a\u0f6b\6\u00e5I\2\u0f6b\u0f6d"+
		"\5\u0306\u0184\2\u0f6c\u0f6a\3\2\2\2\u0f6c\u0f6d\3\2\2\2\u0f6d\u01c9\3"+
		"\2\2\2\u0f6e\u0f6f\7\u011e\2\2\u0f6f\u0f70\7\u0181\2\2\u0f70\u0f72\7\u019b"+
		"\2\2\u0f71\u0f73\5\u01cc\u00e7\2\u0f72\u0f71\3\2\2\2\u0f72\u0f73\3\2\2"+
		"\2\u0f73\u0f74\3\2\2\2\u0f74\u0fa0\7\u019c\2\2\u0f75\u0f76\7\u011f\2\2"+
		"\u0f76\u0f77\7\u0181\2\2\u0f77\u0f79\7\u019b\2\2\u0f78\u0f7a\5\u01cc\u00e7"+
		"\2\u0f79\u0f78\3\2\2\2\u0f79\u0f7a\3\2\2\2\u0f7a\u0f7b\3\2\2\2\u0f7b\u0fa0"+
		"\7\u019c\2\2\u0f7c\u0f7d\7\u0120\2\2\u0f7d\u0f7e\7\u0181\2\2\u0f7e\u0f80"+
		"\7\u019b\2\2\u0f7f\u0f81\5\u01ce\u00e8\2\u0f80\u0f7f\3\2\2\2\u0f80\u0f81"+
		"\3\2\2\2\u0f81\u0f82\3\2\2\2\u0f82\u0fa0\7\u019c\2\2\u0f83\u0f84\7\u0121"+
		"\2\2\u0f84\u0f85\7\u0181\2\2\u0f85\u0f87\7\u019b\2\2\u0f86\u0f88\5\u01ce"+
		"\u00e8\2\u0f87\u0f86\3\2\2\2\u0f87\u0f88\3\2\2\2\u0f88\u0f89\3\2\2\2\u0f89"+
		"\u0fa0\7\u019c\2\2\u0f8a\u0f8b\7\u0122\2\2\u0f8b\u0f8c\7\u0181\2\2\u0f8c"+
		"\u0f8e\7\u019b\2\2\u0f8d\u0f8f\5\u01d0\u00e9\2\u0f8e\u0f8d\3\2\2\2\u0f8e"+
		"\u0f8f\3\2\2\2\u0f8f\u0f90\3\2\2\2\u0f90\u0fa0\7\u019c\2\2\u0f91\u0f92"+
		"\7\u0123\2\2\u0f92\u0f93\7\u0181\2\2\u0f93\u0f95\7\u019b\2\2\u0f94\u0f96"+
		"\5\u01d0\u00e9\2\u0f95\u0f94\3\2\2\2\u0f95\u0f96\3\2\2\2\u0f96\u0f97\3"+
		"\2\2\2\u0f97\u0fa0\7\u019c\2\2\u0f98\u0f99\7\u0124\2\2\u0f99\u0f9a\7\u0181"+
		"\2\2\u0f9a\u0f9c\7\u019b\2\2\u0f9b\u0f9d\5\u01d4\u00eb\2\u0f9c\u0f9b\3"+
		"\2\2\2\u0f9c\u0f9d\3\2\2\2\u0f9d\u0f9e\3\2\2\2\u0f9e\u0fa0\7\u019c\2\2"+
		"\u0f9f\u0f6e\3\2\2\2\u0f9f\u0f75\3\2\2\2\u0f9f\u0f7c\3\2\2\2\u0f9f\u0f83"+
		"\3\2\2\2\u0f9f\u0f8a\3\2\2\2\u0f9f\u0f91\3\2\2\2\u0f9f\u0f98\3\2\2\2\u0fa0"+
		"\u01cb\3\2\2\2\u0fa1\u0fa6\5\u041a\u020e\2\u0fa2\u0fa3\7\u0198\2\2\u0fa3"+
		"\u0fa5\5\u041a\u020e\2\u0fa4\u0fa2\3\2\2\2\u0fa5\u0fa8\3\2\2\2\u0fa6\u0fa4"+
		"\3\2\2\2\u0fa6\u0fa7\3\2\2\2\u0fa7\u01cd\3\2\2\2\u0fa8\u0fa6\3\2\2\2\u0fa9"+
		"\u0fae\5\u0442\u0222\2\u0faa\u0fab\7\u0198\2\2\u0fab\u0fad\5\u0442\u0222"+
		"\2\u0fac\u0faa\3\2\2\2\u0fad\u0fb0\3\2\2\2\u0fae\u0fac\3\2\2\2\u0fae\u0faf"+
		"\3\2\2\2\u0faf\u01cf\3\2\2\2\u0fb0\u0fae\3\2\2\2\u0fb1\u0fb6\5\u01d2\u00ea"+
		"\2\u0fb2\u0fb3\7\u0198\2\2\u0fb3\u0fb5\5\u01d2\u00ea\2\u0fb4\u0fb2\3\2"+
		"\2\2\u0fb5\u0fb8\3\2\2\2\u0fb6\u0fb4\3\2\2\2\u0fb6\u0fb7\3\2\2\2\u0fb7"+
		"\u01d1\3\2\2\2\u0fb8\u0fb6\3\2\2\2\u0fb9\u0fba\5\u0482\u0242\2\u0fba\u01d3"+
		"\3\2\2\2\u0fbb\u0fc0\5\u03d6\u01ec\2\u0fbc\u0fbd\7\u0198\2\2\u0fbd\u0fbf"+
		"\5\u03d6\u01ec\2\u0fbe\u0fbc\3\2\2\2\u0fbf\u0fc2\3\2\2\2\u0fc0\u0fbe\3"+
		"\2\2\2\u0fc0\u0fc1\3\2\2\2\u0fc1\u01d5\3\2\2\2\u0fc2\u0fc0\3\2\2\2\u0fc3"+
		"\u0fc4\7\62\2\2\u0fc4\u0fc6\7/\2\2\u0fc5\u0fc7\5\u01dc\u00ef\2\u0fc6\u0fc5"+
		"\3\2\2\2\u0fc6\u0fc7\3\2\2\2\u0fc7\u0fca\3\2\2\2\u0fc8\u0fc9\7\u016c\2"+
		"\2\u0fc9\u0fcb\5\u01d8\u00ed\2\u0fca\u0fc8\3\2\2\2\u0fca\u0fcb\3\2\2\2"+
		"\u0fcb\u0fcc\3\2\2\2\u0fcc\u0fce\5\u01da\u00ee\2\u0fcd\u0fcf\5\u0306\u0184"+
		"\2\u0fce\u0fcd\3\2\2\2\u0fce\u0fcf\3\2\2\2\u0fcf\u0fd9\3\2\2\2\u0fd0\u0fd1"+
		"\7\63\2\2\u0fd1\u0fd3\7/\2\2\u0fd2\u0fd4\5\u01dc\u00ef\2\u0fd3\u0fd2\3"+
		"\2\2\2\u0fd3\u0fd4\3\2\2\2\u0fd4\u0fd6\3\2\2\2\u0fd5\u0fd7\5\u0306\u0184"+
		"\2\u0fd6\u0fd5\3\2\2\2\u0fd6\u0fd7\3\2\2\2\u0fd7\u0fd9\3\2\2\2\u0fd8\u0fc3"+
		"\3\2\2\2\u0fd8\u0fd0\3\2\2\2\u0fd9\u01d7\3\2\2\2\u0fda\u0fe2\5\u01c4\u00e3"+
		"\2\u0fdb\u0fdc\6\u00edJ\2\u0fdc\u0fdd\t-\2\2\u0fdd\u0fde\7\u0181\2\2\u0fde"+
		"\u0fe2\5\u047c\u023f\2\u0fdf\u0fe0\6\u00edK\2\u0fe0\u0fe2\7\u013e\2\2"+
		"\u0fe1\u0fda\3\2\2\2\u0fe1\u0fdb\3\2\2\2\u0fe1\u0fdf\3\2\2\2\u0fe2\u0fe7"+
		"\3\2\2\2\u0fe3\u0fe4\7\u0198\2\2\u0fe4\u0fe6\5\u01c4\u00e3\2\u0fe5\u0fe3"+
		"\3\2\2\2\u0fe6\u0fe9\3\2\2\2\u0fe7\u0fe5\3\2\2\2\u0fe7\u0fe8\3\2\2\2\u0fe8"+
		"\u01d9\3\2\2\2\u0fe9\u0fe7\3\2\2\2\u0fea\u0fee\6\u00eeL\2\u0feb\u0fec"+
		"\7\u016e\2\2\u0fec\u0fed\7\u0181\2\2\u0fed\u0fef\5\u047c\u023f\2\u0fee"+
		"\u0feb\3\2\2\2\u0fee\u0fef\3\2\2\2\u0fef\u0ff3\3\2\2\2\u0ff0\u0ff1\7\u00fd"+
		"\2\2\u0ff1\u0ff2\7\u0181\2\2\u0ff2\u0ff4\5\u047c\u023f\2\u0ff3\u0ff0\3"+
		"\2\2\2\u0ff3\u0ff4\3\2\2\2\u0ff4\u0ff8\3\2\2\2\u0ff5\u0ff6\7t\2\2\u0ff6"+
		"\u0ff7\7\u0181\2\2\u0ff7\u0ff9\5\u047c\u023f\2\u0ff8\u0ff5\3\2\2\2\u0ff8"+
		"\u0ff9\3\2\2\2\u0ff9\u0ffd\3\2\2\2\u0ffa\u0ffb\7\u00ff\2\2\u0ffb\u0ffc"+
		"\7\u0181\2\2\u0ffc\u0ffe\5\u047c\u023f\2\u0ffd\u0ffa\3\2\2\2\u0ffd\u0ffe"+
		"\3\2\2\2\u0ffe\u1001\3\2\2\2\u0fff\u1001\3\2\2\2\u1000\u0fea\3\2\2\2\u1000"+
		"\u0fff\3\2\2\2\u1001\u01db\3\2\2\2\u1002\u1007\5\u01de\u00f0\2\u1003\u1004"+
		"\7\u0198\2\2\u1004\u1006\5\u01de\u00f0\2\u1005\u1003\3\2\2\2\u1006\u1009"+
		"\3\2\2\2\u1007\u1005\3\2\2\2\u1007\u1008\3\2\2\2\u1008\u01dd\3\2\2\2\u1009"+
		"\u1007\3\2\2\2\u100a\u100b\t.\2\2\u100b\u01df\3\2\2\2\u100c\u100d\t/\2"+
		"\2\u100d\u100e\7\27\2\2\u100e\u01e1\3\2\2\2\u100f\u1010\7%\2\2\u1010\u1011"+
		"\5\u0460\u0231\2\u1011\u1014\7\u01fd\2\2\u1012\u1015\5\u0480\u0241\2\u1013"+
		"\u1015\5\u02de\u0170\2\u1014\u1012\3\2\2\2\u1014\u1013\3\2\2\2\u1015\u101b"+
		"\3\2\2\2\u1016\u101b\5\u01e4\u00f3\2\u1017\u1018\t\60\2\2\u1018\u1019"+
		"\7%\2\2\u1019\u101b\5\u0460\u0231\2\u101a\u100f\3\2\2\2\u101a\u1016\3"+
		"\2\2\2\u101a\u1017\3\2\2\2\u101b\u01e3\3\2\2\2\u101c\u101d\7\23\2\2\u101d"+
		"\u1020\5\u0460\u0231\2\u101e\u101f\7\u029c\2\2\u101f\u1021\5\u01e6\u00f4"+
		"\2\u1020\u101e\3\2\2\2\u1020\u1021\3\2\2\2\u1021\u01e5\3\2\2\2\u1022\u1027"+
		"\5\u02de\u0170\2\u1023\u1024\7\u0198\2\2\u1024\u1026\5\u02de\u0170\2\u1025"+
		"\u1023\3\2\2\2\u1026\u1029\3\2\2\2\u1027\u1025\3\2\2\2\u1027\u1028\3\2"+
		"\2\2\u1028\u01e7\3\2\2\2\u1029\u1027\3\2\2\2\u102a\u1043\7\u02c5\2\2\u102b"+
		"\u102c\7\u00b6\2\2\u102c\u102d\7o\2\2\u102d\u102f\7y\2\2\u102e\u1030\5"+
		"\u049e\u0250\2\u102f\u102e\3\2\2\2\u102f\u1030\3\2\2\2\u1030\u1031\3\2"+
		"\2\2\u1031\u1044\5\u047a\u023e\2\u1032\u1035\7\u02c4\2\2\u1033\u1034\7"+
		"\u01fc\2\2\u1034\u1036\7\u011d\2\2\u1035\u1033\3\2\2\2\u1035\u1036\3\2"+
		"\2\2\u1036\u1044\3\2\2\2\u1037\u1038\6\u00f5M\2\u1038\u1039\7\u00a7\2"+
		"\2\u1039\u103a\7\u01fd\2\2\u103a\u103b\5\u03fa\u01fe\2\u103b\u103c\7\u019a"+
		"\2\2\u103c\u103d\5\u046c\u0237\2\u103d\u103e\7\u00a1\2\2\u103e\u103f\7"+
		"\u01be\2\2\u103f\u1041\5\u047a\u023e\2\u1040\u1042\5\u01ea\u00f6\2\u1041"+
		"\u1040\3\2\2\2\u1041\u1042\3\2\2\2\u1042\u1044\3\2\2\2\u1043\u102b\3\2"+
		"\2\2\u1043\u1032\3\2\2\2\u1043\u1037\3\2\2\2\u1044\u01e9\3\2\2\2\u1045"+
		"\u1050\5\u01ec\u00f7\2\u1046\u1047\7o\2\2\u1047\u1049\7y\2\2\u1048\u104a"+
		"\5\u049e\u0250\2\u1049\u1048\3\2\2\2\u1049\u104a\3\2\2\2\u104a\u104b\3"+
		"\2\2\2\u104b\u104d\5\u047a\u023e\2\u104c\u104e\5\u01ec\u00f7\2\u104d\u104c"+
		"\3\2\2\2\u104d\u104e\3\2\2\2\u104e\u1050\3\2\2\2\u104f\u1045\3\2\2\2\u104f"+
		"\u1046\3\2\2\2\u1050\u01eb\3\2\2\2\u1051\u1053\7\u0261\2\2\u1052\u1054"+
		"\7\35\2\2\u1053\u1052\3\2\2\2\u1053\u1054\3\2\2\2\u1054\u1055\3\2\2\2"+
		"\u1055\u1056\7\u027b\2\2\u1056\u01ed\3\2\2\2\u1057\u1058\6\u00f8N\2\u1058"+
		"\u1061\5\u01f0\u00f9\2\u1059\u1061\5\u01f6\u00fc\2\u105a\u1061\5\u0202"+
		"\u0102\2\u105b\u1061\5\u0204\u0103\2\u105c\u1061\5\u0212\u010a\2\u105d"+
		"\u1061\5\u0214\u010b\2\u105e\u105f\6\u00f8O\2\u105f\u1061\5\u0226\u0114"+
		"\2\u1060\u1057\3\2\2\2\u1060\u1059\3\2\2\2\u1060\u105a\3\2\2\2\u1060\u105b"+
		"\3\2\2\2\u1060\u105c\3\2\2\2\u1060\u105d\3\2\2\2\u1060\u105e\3\2\2\2\u1061"+
		"\u01ef\3\2\2\2\u1062\u1063\7\u01ae\2\2\u1063\u1066\7\u016e\2\2\u1064\u1065"+
		"\6\u00f9P\2\u1065\u1067\5\u03ca\u01e6\2\u1066\u1064\3\2\2\2\u1066\u1067"+
		"\3\2\2\2\u1067\u1068\3\2\2\2\u1068\u1069\5\u01f2\u00fa\2\u1069\u01f1\3"+
		"\2\2\2\u106a\u106b\6\u00faQ\2\u106b\u106f\5\u03ea\u01f6\2\u106c\u106d"+
		"\6\u00faR\2\u106d\u106f\5\u03ec\u01f7\2\u106e\u106a\3\2\2\2\u106e\u106c"+
		"\3\2\2\2\u106f\u1070\3\2\2\2\u1070\u1071\5\u01f8\u00fd\2\u1071\u109a\3"+
		"\2\2\2\u1072\u1073\6\u00faS\2\u1073\u1074\5\u03fa\u01fe\2\u1074\u1075"+
		"\7\u00a1\2\2\u1075\u1076\7\u01be\2\2\u1076\u1079\5\u047c\u023f\2\u1077"+
		"\u1078\6\u00faT\2\u1078\u107a\5\u03f6\u01fc\2\u1079\u1077\3\2\2\2\u1079"+
		"\u107a\3\2\2\2\u107a\u107d\3\2\2\2\u107b\u107c\6\u00faU\2\u107c\u107e"+
		"\5\u03f2\u01fa\2\u107d\u107b\3\2\2\2\u107d\u107e\3\2\2\2\u107e\u109a\3"+
		"\2\2\2\u107f\u1080\6\u00faV\2\u1080\u1081\5\u03fa\u01fe\2\u1081\u1082"+
		"\5\u03f4\u01fb\2\u1082\u109a\3\2\2\2\u1083\u1084\6\u00faW\2\u1084\u1085"+
		"\5\u03fa\u01fe\2\u1085\u1086\7\u01e0\2\2\u1086\u108a\7\u02b3\2\2\u1087"+
		"\u108b\7\u01ad\2\2\u1088\u108b\7\u00f1\2\2\u1089\u108b\5\u0228\u0115\2"+
		"\u108a\u1087\3\2\2\2\u108a\u1088\3\2\2\2\u108a\u1089\3\2\2\2\u108b\u109a"+
		"\3\2\2\2\u108c\u108d\6\u00faX\2\u108d\u108e\5\u03fa\u01fe\2\u108e\u1091"+
		"\7\u00a1\2\2\u108f\u1090\7\u02ac\2\2\u1090\u1092\5\u0494\u024b\2\u1091"+
		"\u108f\3\2\2\2\u1091\u1092\3\2\2\2\u1092\u1093\3\2\2\2\u1093\u1094\7\u01be"+
		"\2\2\u1094\u1095\7\u02fe\2\2\u1095\u1097\7\u00fd\2\2\u1096\u1098\5\u03f2"+
		"\u01fa\2\u1097\u1096\3\2\2\2\u1097\u1098\3\2\2\2\u1098\u109a\3\2\2\2\u1099"+
		"\u106e\3\2\2\2\u1099\u1072\3\2\2\2\u1099\u107f\3\2\2\2\u1099\u1083\3\2"+
		"\2\2\u1099\u108c\3\2\2\2\u109a\u01f3\3\2\2\2\u109b\u109c\7\u016e\2\2\u109c"+
		"\u109d\5\u049c\u024f\2\u109d\u01f5\3\2\2\2\u109e\u109f\7\u01cd\2\2\u109f"+
		"\u10a3\7\u016e\2\2\u10a0\u10a1\6\u00fcY\2\u10a1\u10a4\5\u03cc\u01e7\2"+
		"\u10a2\u10a4\3\2\2\2\u10a3\u10a0\3\2\2\2\u10a3\u10a2\3\2\2\2\u10a4\u10a5"+
		"\3\2\2\2\u10a5\u10a6\5\u03ea\u01f6\2\u10a6\u10a7\5\u01fa\u00fe\2\u10a7"+
		"\u10a8\5\u01f8\u00fd\2\u10a8\u01f7\3\2\2\2\u10a9\u10ab\6\u00fdZ\2\u10aa"+
		"\u10ac\5\u01fc\u00ff\2\u10ab\u10aa\3\2\2\2\u10ab\u10ac\3\2\2\2\u10ac\u10ae"+
		"\3\2\2\2\u10ad\u10af\5\u01fe\u0100\2\u10ae\u10ad\3\2\2\2\u10ae\u10af\3"+
		"\2\2\2\u10af\u10b3\3\2\2\2\u10b0\u10b2\5\u0200\u0101\2\u10b1\u10b0\3\2"+
		"\2\2\u10b2\u10b5\3\2\2\2\u10b3\u10b1\3\2\2\2\u10b3\u10b4\3\2\2\2\u10b4"+
		"\u10b8\3\2\2\2\u10b5\u10b3\3\2\2\2\u10b6\u10b8\3\2\2\2\u10b7\u10a9\3\2"+
		"\2\2\u10b7\u10b6\3\2\2\2\u10b8\u01f9\3\2\2\2\u10b9\u10bd\6\u00fe[\2\u10ba"+
		"\u10bb\7\u01e0\2\2\u10bb\u10bc\7\u02b3\2\2\u10bc\u10be\5\u0228\u0115\2"+
		"\u10bd\u10ba\3\2\2\2\u10bd\u10be\3\2\2\2\u10be\u10c1\3\2\2\2\u10bf\u10c1"+
		"\3\2\2\2\u10c0\u10b9\3\2\2\2\u10c0\u10bf\3\2\2\2\u10c1\u01fb\3\2\2\2\u10c2"+
		"\u10c5\7\u0261\2\2\u10c3\u10c6\5\u0220\u0111\2\u10c4\u10c6\t\61\2\2\u10c5"+
		"\u10c3\3\2\2\2\u10c5\u10c4\3\2\2\2\u10c6\u01fd\3\2\2\2\u10c7\u10d0\7\u02ac"+
		"\2\2\u10c8\u10c9\7\u00d2\2\2\u10c9\u10d1\5\u046c\u0237\2\u10ca\u10cb\7"+
		"\u00d5\2\2\u10cb\u10d1\5\u046c\u0237\2\u10cc\u10cd\7\u00d1\2\2\u10cd\u10d1"+
		"\5\u046c\u0237\2\u10ce\u10cf\7\u00d6\2\2\u10cf\u10d1\5\u046c\u0237\2\u10d0"+
		"\u10c8\3\2\2\2\u10d0\u10ca\3\2\2\2\u10d0\u10cc\3\2\2\2\u10d0\u10ce\3\2"+
		"\2\2\u10d1\u10d2\3\2\2\2\u10d2\u10d0\3\2\2\2\u10d2\u10d3\3\2\2\2\u10d3"+
		"\u01ff\3\2\2\2\u10d4\u10d5\7\3\2\2\u10d5\u10f6\t\62\2\2\u10d6\u10f3\7"+
		"\u00fd\2\2\u10d7\u10de\7\u01f4\2\2\u10d8\u10d9\7\u0211\2\2\u10d9\u10da"+
		"\5\u046e\u0238\2\u10da\u10db\7s\2\2\u10db\u10df\3\2\2\2\u10dc\u10df\7"+
		"\u00ec\2\2\u10dd\u10df\7\u01e0\2\2\u10de\u10d8\3\2\2\2\u10de\u10dc\3\2"+
		"\2\2\u10de\u10dd\3\2\2\2\u10de\u10df\3\2\2\2\u10df\u10f4\3\2\2\2\u10e0"+
		"\u10e3\7\u02e1\2\2\u10e1\u10e4\5\u046e\u0238\2\u10e2\u10e4\7\u01e0\2\2"+
		"\u10e3\u10e1\3\2\2\2\u10e3\u10e2\3\2\2\2\u10e4\u10f4\3\2\2\2\u10e5\u10e6"+
		"\7\u02e2\2\2\u10e6\u10eb\7\u0211\2\2\u10e7\u10e8\5\u046e\u0238\2\u10e8"+
		"\u10e9\7s\2\2\u10e9\u10ec\3\2\2\2\u10ea\u10ec\7\u01e0\2\2\u10eb\u10e7"+
		"\3\2\2\2\u10eb\u10ea\3\2\2\2\u10ec\u10f4\3\2\2\2\u10ed\u10ee\6\u0101\\"+
		"\2\u10ee\u10ef\7\u0261\2\2\u10ef\u10f1\7m\2\2\u10f0\u10f2\t\63\2\2\u10f1"+
		"\u10f0\3\2\2\2\u10f1\u10f2\3\2\2\2\u10f2\u10f4\3\2\2\2\u10f3\u10d7\3\2"+
		"\2\2\u10f3\u10e0\3\2\2\2\u10f3\u10e5\3\2\2\2\u10f3\u10ed\3\2\2\2\u10f4"+
		"\u10f6\3\2\2\2\u10f5\u10d4\3\2\2\2\u10f5\u10d6\3\2\2\2\u10f6\u0201\3\2"+
		"\2\2\u10f7\u10f8\7\u01e9\2\2\u10f8\u10fb\7\u016e\2\2\u10f9\u10fa\6\u0102"+
		"]\2\u10fa\u10fc\5\u03ca\u01e6\2\u10fb\u10f9\3\2\2\2\u10fb\u10fc\3\2\2"+
		"\2\u10fc\u10fd\3\2\2\2\u10fd\u10fe\5\u03e8\u01f5\2\u10fe\u0203\3\2\2\2"+
		"\u10ff\u112a\7\u0201\2\2\u1100\u1101\6\u0103^\2\u1101\u1102\5\u021a\u010e"+
		"\2\u1102\u1103\7\u028f\2\2\u1103\u1107\5\u03e8\u01f5\2\u1104\u1105\7\u02ac"+
		"\2\2\u1105\u1106\7\u02b4\2\2\u1106\u1108\7\u024a\2\2\u1107\u1104\3\2\2"+
		"\2\u1107\u1108\3\2\2\2\u1108\u112b\3\2\2\2\u1109\u110f\5\u021a\u010e\2"+
		"\u110a\u110c\7\u01ad\2\2\u110b\u110d\7\u0106\2\2\u110c\u110b\3\2\2\2\u110c"+
		"\u110d\3\2\2\2\u110d\u110f\3\2\2\2\u110e\u1109\3\2\2\2\u110e\u110a\3\2"+
		"\2\2\u110f\u1110\3\2\2\2\u1110\u1112\7\u0245\2\2\u1111\u1113\5\u0218\u010d"+
		"\2\u1112\u1111\3\2\2\2\u1112\u1113\3\2\2\2\u1113\u1114\3\2\2\2\u1114\u1115"+
		"\5\u021e\u0110\2\u1115\u1116\7\u028f\2\2\u1116\u1118\5\u0206\u0104\2\u1117"+
		"\u1119\5\u0210\u0109\2\u1118\u1117\3\2\2\2\u1118\u1119\3\2\2\2\u1119\u111b"+
		"\3\2\2\2\u111a\u111c\5\u0208\u0105\2\u111b\u111a\3\2\2\2\u111b\u111c\3"+
		"\2\2\2\u111c\u111e\3\2\2\2\u111d\u111f\5\u020e\u0108\2\u111e\u111d\3\2"+
		"\2\2\u111e\u111f\3\2\2\2\u111f\u112b\3\2\2\2\u1120\u1121\7\u010b\2\2\u1121"+
		"\u1122\7\u0245\2\2\u1122\u1123\5\u03fa\u01fe\2\u1123\u1124\7\u028f\2\2"+
		"\u1124\u1128\5\u0206\u0104\2\u1125\u1126\7\u02ac\2\2\u1126\u1127\7\u0201"+
		"\2\2\u1127\u1129\7\u024a\2\2\u1128\u1125\3\2\2\2\u1128\u1129\3\2\2\2\u1129"+
		"\u112b\3\2\2\2\u112a\u1100\3\2\2\2\u112a\u110e\3\2\2\2\u112a\u1120\3\2"+
		"\2\2\u112b\u0205\3\2\2\2\u112c\u112d\6\u0104_\2\u112d\u1131\5\u03ea\u01f6"+
		"\2\u112e\u112f\6\u0104`\2\u112f\u1131\5\u03e8\u01f5\2\u1130\u112c\3\2"+
		"\2\2\u1130\u112e\3\2\2\2\u1131\u0207\3\2\2\2\u1132\u1133\6\u0105a\2\u1133"+
		"\u1135\7\u02ac\2\2\u1134\u1136\5\u0224\u0113\2\u1135\u1134\3\2\2\2\u1136"+
		"\u1137\3\2\2\2\u1137\u1135\3\2\2\2\u1137\u1138\3\2\2\2\u1138\u113e\3\2"+
		"\2\2\u1139\u113a\6\u0105b\2\u113a\u113b\7\u02ac\2\2\u113b\u113c\7\u0201"+
		"\2\2\u113c\u113e\7\u024a\2\2\u113d\u1132\3\2\2\2\u113d\u1139\3\2\2\2\u113e"+
		"\u0209\3\2\2\2\u113f\u1140\7\u02b7\2\2\u1140\u1141\5\u0228\u0115\2\u1141"+
		"\u020b\3\2\2\2\u1142\u1143\7\u02ac\2\2\u1143\u114b\7\u02b3\2\2\u1144\u114c"+
		"\5\u0228\u0115\2\u1145\u1147\7\u01ad\2\2\u1146\u1148\5\u020a\u0106\2\u1147"+
		"\u1146\3\2\2\2\u1147\u1148\3\2\2\2\u1148\u114c\3\2\2\2\u1149\u114c\7\u00f1"+
		"\2\2\u114a\u114c\7\u01e0\2\2\u114b\u1144\3\2\2\2\u114b\u1145\3\2\2\2\u114b"+
		"\u1149\3\2\2\2\u114b\u114a\3\2\2\2\u114c\u020d\3\2\2\2\u114d\u114e\7\u01b1"+
		"\2\2\u114e\u1150\7\u016e\2\2\u114f\u1151\5\u020c\u0107\2\u1150\u114f\3"+
		"\2\2\2\u1150\u1151\3\2\2\2\u1151\u020f\3\2\2\2\u1152\u1153\6\u0109c\2"+
		"\u1153\u1154\5\u01fc\u00ff\2\u1154\u0211\3\2\2\2\u1155\u1156\7\u025e\2"+
		"\2\u1156\u1157\7\u016e\2\2\u1157\u1158\5\u03fa\u01fe\2\u1158\u1159\7\u028f"+
		"\2\2\u1159\u1161\5\u03fa\u01fe\2\u115a\u115b\7\u0198\2\2\u115b\u115c\5"+
		"\u03fa\u01fe\2\u115c\u115d\7\u028f\2\2\u115d\u115e\5\u03fa\u01fe\2\u115e"+
		"\u1160\3\2\2\2\u115f\u115a\3\2\2\2\u1160\u1163\3\2\2\2\u1161\u115f\3\2"+
		"\2\2\u1161\u1162\3\2\2\2\u1162\u0213\3\2\2\2\u1163\u1161\3\2\2\2\u1164"+
		"\u1186\7\u0265\2\2\u1165\u1166\6\u010bd\2\u1166\u1167\5\u021a\u010e\2"+
		"\u1167\u1168\7\u01fd\2\2\u1168\u1169\5\u03e8\u01f5\2\u1169\u1187\3\2\2"+
		"\2\u116a\u116b\5\u021a\u010e\2\u116b\u116c\5\u0216\u010c\2\u116c\u116d"+
		"\7\u01fd\2\2\u116d\u116e\5\u03e8\u01f5\2\u116e\u1187\3\2\2\2\u116f\u1171"+
		"\7\u01ad\2\2\u1170\u1172\7\u0106\2\2\u1171\u1170\3\2\2\2\u1171\u1172\3"+
		"\2\2\2\u1172\u117e\3\2\2\2\u1173\u1174\6\u010be\2\u1174\u1176\7\u0245"+
		"\2\2\u1175\u1177\5\u0218\u010d\2\u1176\u1175\3\2\2\2\u1176\u1177\3\2\2"+
		"\2\u1177\u1178\3\2\2\2\u1178\u117f\5\u021e\u0110\2\u1179\u117a\7\u0198"+
		"\2\2\u117a\u117b\7\u0201\2\2\u117b\u117c\7\u024a\2\2\u117c\u117d\7\u01fd"+
		"\2\2\u117d\u117f\5\u03e8\u01f5\2\u117e\u1173\3\2\2\2\u117e\u1179\3\2\2"+
		"\2\u117f\u1187\3\2\2\2\u1180\u1181\7\u010b\2\2\u1181\u1182\7\u0245\2\2"+
		"\u1182\u1183\5\u03fa\u01fe\2\u1183\u1184\7\u01fd\2\2\u1184\u1185\5\u03e8"+
		"\u01f5\2\u1185\u1187\3\2\2\2\u1186\u1165\3\2\2\2\u1186\u116a\3\2\2\2\u1186"+
		"\u116f\3\2\2\2\u1186\u1180\3\2\2\2\u1187\u0215\3\2\2\2\u1188\u1189\6\u010c"+
		"f\2\u1189\u118b\7\u0245\2\2\u118a\u118c\5\u0218\u010d\2\u118b\u118a\3"+
		"\2\2\2\u118b\u118c\3\2\2\2\u118c\u118d\3\2\2\2\u118d\u1197\5\u021e\u0110"+
		"\2\u118e\u1194\6\u010cg\2\u118f\u1191\7\u0245\2\2\u1190\u1192\5\u0218"+
		"\u010d\2\u1191\u1190\3\2\2\2\u1191\u1192\3\2\2\2\u1192\u1193\3\2\2\2\u1193"+
		"\u1195\5\u021e\u0110\2\u1194\u118f\3\2\2\2\u1194\u1195\3\2\2\2\u1195\u1197"+
		"\3\2\2\2\u1196\u1188\3\2\2\2\u1196\u118e\3\2\2\2\u1197\u0217\3\2\2\2\u1198"+
		"\u1199\t\64\2\2\u1199\u0219\3\2\2\2\u119a\u119f\5\u021c\u010f\2\u119b"+
		"\u119c\7\u0198\2\2\u119c\u119e\5\u021c\u010f\2\u119d\u119b\3\2\2\2\u119e"+
		"\u11a1\3\2\2\2\u119f\u119d\3\2\2\2\u119f\u11a0\3\2\2\2\u11a0\u021b\3\2"+
		"\2\2\u11a1\u119f\3\2\2\2\u11a2\u11ad\6\u010fh\2\u11a3\u11a5\5\u0498\u024d"+
		"\2\u11a4\u11a6\5\u040c\u0207\2\u11a5\u11a4\3\2\2\2\u11a5\u11a6\3\2\2\2"+
		"\u11a6\u11ae\3\2\2\2\u11a7\u11ab\5\u0498\u024d\2\u11a8\u11ac\7\u01a3\2"+
		"\2\u11a9\u11aa\7\u01a2\2\2\u11aa\u11ac\5\u0494\u024b\2\u11ab\u11a8\3\2"+
		"\2\2\u11ab\u11a9\3\2\2\2\u11ac\u11ae\3\2\2\2\u11ad\u11a3\3\2\2\2\u11ad"+
		"\u11a7\3\2\2\2\u11ae\u11cc\3\2\2\2\u11af\u11b1\t\65\2\2\u11b0\u11b2\5"+
		"\u040c\u0207\2\u11b1\u11b0\3\2\2\2\u11b1\u11b2\3\2\2\2\u11b2\u11cc\3\2"+
		"\2\2\u11b3\u11cc\t\66\2\2\u11b4\u11b5\7\u0201\2\2\u11b5\u11cc\7\u024a"+
		"\2\2\u11b6\u11b7\7\u026f\2\2\u11b7\u11cc\7\u01d6\2\2\u11b8\u11bc\7\u01cd"+
		"\2\2\u11b9\u11ba\7\u0159\2\2\u11ba\u11bd\7\u0156\2\2\u11bb\u11bd\t\67"+
		"\2\2\u11bc\u11b9\3\2\2\2\u11bc\u11bb\3\2\2\2\u11bc\u11bd\3\2\2\2\u11bd"+
		"\u11cc\3\2\2\2\u11be\u11bf\7\u0226\2\2\u11bf\u11cc\7\u0156\2\2\u11c0\u11c1"+
		"\7\u011d\2\2\u11c1\u11cc\t8\2\2\u11c2\u11c3\7\u026f\2\2\u11c3\u11cc\7"+
		"\u0171\2\2\u11c4\u11c6\7\u01ae\2\2\u11c5\u11c7\7\u012b\2\2\u11c6\u11c5"+
		"\3\2\2\2\u11c6\u11c7\3\2\2\2\u11c7\u11cc\3\2\2\2\u11c8\u11c9\6\u010fi"+
		"\2\u11c9\u11ca\t9\2\2\u11ca\u11cc\7\u02b3\2\2\u11cb\u11a2\3\2\2\2\u11cb"+
		"\u11af\3\2\2\2\u11cb\u11b3\3\2\2\2\u11cb\u11b4\3\2\2\2\u11cb\u11b6\3\2"+
		"\2\2\u11cb\u11b8\3\2\2\2\u11cb\u11be\3\2\2\2\u11cb\u11c0\3\2\2\2\u11cb"+
		"\u11c2\3\2\2\2\u11cb\u11c4\3\2\2\2\u11cb\u11c8\3\2\2\2\u11cc\u021d\3\2"+
		"\2\2\u11cd\u11d0\7\u018b\2\2\u11ce\u11cf\7\u0197\2\2\u11cf\u11d1\7\u018b"+
		"\2\2\u11d0\u11ce\3\2\2\2\u11d0\u11d1\3\2\2\2\u11d1\u11de\3\2\2\2\u11d2"+
		"\u11d5\5\u041a\u020e\2\u11d3\u11d4\7\u0197\2\2\u11d4\u11d6\7\u018b\2\2"+
		"\u11d5\u11d3\3\2\2\2\u11d5\u11d6\3\2\2\2\u11d6\u11de\3\2\2\2\u11d7\u11de"+
		"\5\u0446\u0224\2\u11d8\u11d9\6\u0110j\2\u11d9\u11da\5\u041a\u020e\2\u11da"+
		"\u11db\7\u0197\2\2\u11db\u11dc\5\u0446\u0224\2\u11dc\u11de\3\2\2\2\u11dd"+
		"\u11cd\3\2\2\2\u11dd\u11d2\3\2\2\2\u11dd\u11d7\3\2\2\2\u11dd\u11d8\3\2"+
		"\2\2\u11de\u021f\3\2\2\2\u11df\u11e6\5\u0222\u0112\2\u11e0\u11e2\7\u01b0"+
		"\2\2\u11e1\u11e0\3\2\2\2\u11e1\u11e2\3\2\2\2\u11e2\u11e3\3\2\2\2\u11e3"+
		"\u11e5\5\u0222\u0112\2\u11e4\u11e1\3\2\2\2\u11e5\u11e8\3\2\2\2\u11e6\u11e4"+
		"\3\2\2\2\u11e6\u11e7\3\2\2\2\u11e7\u0221\3\2\2\2\u11e8\u11e6\3\2\2\2\u11e9"+
		"\u11ea\7T\2\2\u11ea\u11f0\5\u047c\u023f\2\u11eb\u11ec\7\u00ac\2\2\u11ec"+
		"\u11f0\5\u047c\u023f\2\u11ed\u11ee\7\u014e\2\2\u11ee\u11f0\5\u047c\u023f"+
		"\2\u11ef\u11e9\3\2\2\2\u11ef\u11eb\3\2\2\2\u11ef\u11ed\3\2\2\2\u11f0\u0223"+
		"\3\2\2\2\u11f1\u11f2\7\u0201\2\2\u11f2\u11fc\7\u024a\2\2\u11f3\u11f4\7"+
		"\u00d2\2\2\u11f4\u11fc\5\u046c\u0237\2\u11f5\u11f6\7\u00d5\2\2\u11f6\u11fc"+
		"\5\u046c\u0237\2\u11f7\u11f8\7\u00d1\2\2\u11f8\u11fc\5\u046c\u0237\2\u11f9"+
		"\u11fa\7\u00d6\2\2\u11fa\u11fc\5\u046c\u0237\2\u11fb\u11f1\3\2\2\2\u11fb"+
		"\u11f3\3\2\2\2\u11fb\u11f5\3\2\2\2\u11fb\u11f7\3\2\2\2\u11fb\u11f9\3\2"+
		"\2\2\u11fc\u0225\3\2\2\2\u11fd\u11fe\7\u026d\2\2\u11fe\u11ff\7\u02b3\2"+
		"\2\u11ff\u1215\5\u0228\u0115\2\u1200\u1201\7\u026d\2\2\u1201\u1202\7\u02b3"+
		"\2\2\u1202\u1215\t:\2\2\u1203\u1204\7\u026d\2\2\u1204\u1205\7\u01e0\2"+
		"\2\u1205\u1209\7\u02b3\2\2\u1206\u120a\5\u0228\u0115\2\u1207\u120a\7\u00f1"+
		"\2\2\u1208\u120a\7\u01ad\2\2\u1209\u1206\3\2\2\2\u1209\u1207\3\2\2\2\u1209"+
		"\u1208\3\2\2\2\u120a\u120b\3\2\2\2\u120b\u120c\7\u028f\2\2\u120c\u1215"+
		"\5\u0228\u0115\2\u120d\u120e\7\u026d\2\2\u120e\u120f\7\u02b3\2\2\u120f"+
		"\u1212\7\u01ad\2\2\u1210\u1211\7\u02b7\2\2\u1211\u1213\5\u0228\u0115\2"+
		"\u1212\u1210\3\2\2\2\u1212\u1213\3\2\2\2\u1213\u1215\3\2\2\2\u1214\u11fd"+
		"\3\2\2\2\u1214\u1200\3\2\2\2\u1214\u1203\3\2\2\2\u1214\u120d\3\2\2\2\u1215"+
		"\u0227\3\2\2\2\u1216\u121b\5\u022a\u0116\2\u1217\u1218\7\u0198\2\2\u1218"+
		"\u121a\5\u022a\u0116\2\u1219\u1217\3\2\2\2\u121a\u121d\3\2\2\2\u121b\u1219"+
		"\3\2\2\2\u121b\u121c\3\2\2\2\u121c\u0229\3\2\2\2\u121d\u121b\3\2\2\2\u121e"+
		"\u1222\5\u0498\u024d\2\u121f\u1220\7\u01a2\2\2\u1220\u1223\5\u0494\u024b"+
		"\2\u1221\u1223\7\u01a3\2\2\u1222\u121f\3\2\2\2\u1222\u1221\3\2\2\2\u1222"+
		"\u1223\3\2\2\2\u1223\u022b\3\2\2\2\u1224\u1226\7A\2\2\u1225\u1227\5\u0402"+
		"\u0202\2\u1226\u1225\3\2\2\2\u1226\u1227\3\2\2\2\u1227\u1228\3\2\2\2\u1228"+
		"\u1229\7\u0289\2\2\u1229\u122c\5\u0448\u0225\2\u122a\u122b\6\u0117k\2"+
		"\u122b\u122d\5\u022e\u0118\2\u122c\u122a\3\2\2\2\u122c\u122d\3\2\2\2\u122d"+
		"\u1250\3\2\2\2\u122e\u122f\7\u01c5\2\2\u122f\u1230\7\u0289\2\2\u1230\u1234"+
		"\5\u0448\u0225\2\u1231\u1233\5\u0230\u0119\2\u1232\u1231\3\2\2\2\u1233"+
		"\u1236\3\2\2\2\u1234\u1232\3\2\2\2\u1234\u1235\3\2\2\2\u1235\u1250\3\2"+
		"\2\2\u1236\u1234\3\2\2\2\u1237\u1238\7\13\2\2\u1238\u1239\7\u0289\2\2"+
		"\u1239\u123b\5\u0448\u0225\2\u123a\u123c\t;\2\2\u123b\u123a\3\2\2\2\u123b"+
		"\u123c\3\2\2\2\u123c\u1250\3\2\2\2\u123d\u123f\7\u0248\2\2\u123e\u1240"+
		"\5\u0402\u0202\2\u123f\u123e\3\2\2\2\u123f\u1240\3\2\2\2\u1240\u1241\3"+
		"\2\2\2\u1241\u1242\7\u0289\2\2\u1242\u1250\5\u0448\u0225\2\u1243\u1245"+
		"\7\'\2\2\u1244\u1246\5\u0402\u0202\2\u1245\u1244\3\2\2\2\u1245\u1246\3"+
		"\2\2\2\u1246\u1247\3\2\2\2\u1247\u1248\7\u0289\2\2\u1248\u124c\5\u0448"+
		"\u0225\2\u1249\u124b\5\u0232\u011a\2\u124a\u1249\3\2\2\2\u124b\u124e\3"+
		"\2\2\2\u124c\u124a\3\2\2\2\u124c\u124d\3\2\2\2\u124d\u1250\3\2\2\2\u124e"+
		"\u124c\3\2\2\2\u124f\u1224\3\2\2\2\u124f\u122e\3\2\2\2\u124f\u1237\3\2"+
		"\2\2\u124f\u123d\3\2\2\2\u124f\u1243\3\2\2\2\u1250\u022d\3\2\2\2\u1251"+
		"\u1252\7\u0299\2\2\u1252\u1253\7\u02c2\2\2\u1253\u1254\7\u0245\2\2\u1254"+
		"\u1258\5\u0462\u0232\2\u1255\u1256\7\u02ac\2\2\u1256\u1257\7\u017e\2\2"+
		"\u1257\u1259\7\u02c3\2\2\u1258\u1255\3\2\2\2\u1258\u1259\3\2\2\2\u1259"+
		"\u125f\3\2\2\2\u125a\u125b\7\u01e9\2\2\u125b\u125c\7\u02c2\2\2\u125c\u125d"+
		"\7\u0245\2\2\u125d\u125f\5\u0462\u0232\2\u125e\u1251\3\2\2\2\u125e\u125a"+
		"\3\2\2\2\u125f\u022f\3\2\2\2\u1260\u1261\7\u01fc\2\2\u1261\u1264\7\67"+
		"\2\2\u1262\u1264\t<\2\2\u1263\u1260\3\2\2\2\u1263\u1262\3\2\2\2\u1264"+
		"\u0231\3\2\2\2\u1265\u1266\t=\2\2\u1266\u0233\3\2\2\2\u1267\u1268\7\33"+
		"\2\2\u1268\u1269\7\u0100\2\2\u1269\u126a\5\u0460\u0231\2\u126a\u126b\7"+
		"\61\2\2\u126b\u126c\5\u047a\u023e\2\u126c\u127e\3\2\2\2\u126d\u126e\7"+
		"\33\2\2\u126e\u126f\7\u02b8\2\2\u126f\u127e\5\u0484\u0243\2\u1270\u1271"+
		"\7\66\2\2\u1271\u1272\7\u0100\2\2\u1272\u127e\5\u0456\u022c\2\u1273\u1274"+
		"\7\66\2\2\u1274\u1275\7\u02b8\2\2\u1275\u127a\5\u0458\u022d\2\u1276\u1277"+
		"\7\u0198\2\2\u1277\u1279\5\u0458\u022d\2\u1278\u1276\3\2\2\2\u1279\u127c"+
		"\3\2\2\2\u127a\u1278\3\2\2\2\u127a\u127b\3\2\2\2\u127b\u127e\3\2\2\2\u127c"+
		"\u127a\3\2\2\2\u127d\u1267\3\2\2\2\u127d\u126d\3\2\2\2\u127d\u1270\3\2"+
		"\2\2\u127d\u1273\3\2\2\2\u127e\u0235\3\2\2\2\u127f\u1280\7\u026d\2\2\u1280"+
		"\u1281\5\u0238\u011d\2\u1281\u0237\3\2\2\2\u1282\u1283\5\u0242\u0122\2"+
		"\u1283\u1284\5\u0240\u0121\2\u1284\u12bb\3\2\2\2\u1285\u1286\7\u015d\2"+
		"\2\u1286\u12bb\5\u023a\u011e\2\u1287\u1288\5\u04a0\u0251\2\u1288\u1289"+
		"\5\u0248\u0125\2\u1289\u12bb\3\2\2\2\u128a\u128d\7\u00fd\2\2\u128b\u128c"+
		"\7\u01fc\2\2\u128c\u128e\5\u03fa\u01fe\2\u128d\u128b\3\2\2\2\u128d\u128e"+
		"\3\2\2\2\u128e\u128f\3\2\2\2\u128f\u12aa\5\u049e\u0250\2\u1290\u1292\5"+
		"\u047c\u023f\2\u1291\u1293\5\u03f6\u01fc\2\u1292\u1291\3\2\2\2\u1292\u1293"+
		"\3\2\2\2\u1293\u1295\3\2\2\2\u1294\u1296\5\u03f2\u01fa\2\u1295\u1294\3"+
		"\2\2\2\u1295\u1296\3\2\2\2\u1296\u12ab\3\2\2\2\u1297\u1299\5\u047c\u023f"+
		"\2\u1298\u129a\5\u03f6\u01fc\2\u1299\u1298\3\2\2\2\u1299\u129a\3\2\2\2"+
		"\u129a\u129c\3\2\2\2\u129b\u129d\5\u03f2\u01fa\2\u129c\u129b\3\2\2\2\u129c"+
		"\u129d\3\2\2\2\u129d\u12ab\3\2\2\2\u129e\u129f\6\u011dl\2\u129f\u12a0"+
		"\7\u00f5\2\2\u12a0\u12a1\7\u019b\2\2\u12a1\u12a2\5\u047c\u023f\2\u12a2"+
		"\u12a3\7\u019c\2\2\u12a3\u12ab\3\2\2\2\u12a4\u12a5\6\u011dm\2\u12a5\u12a6"+
		"\7\u00fd\2\2\u12a6\u12a7\7\u019b\2\2\u12a7\u12a8\5\u047c\u023f\2\u12a8"+
		"\u12a9\7\u019c\2\2\u12a9\u12ab\3\2\2\2\u12aa\u1290\3\2\2\2\u12aa\u1297"+
		"\3\2\2\2\u12aa\u129e\3\2\2\2\u12aa\u12a4\3\2\2\2\u12ab\u12bb\3\2\2\2\u12ac"+
		"\u12ad\6\u011dn\2\u12ad\u12b0\7\u00fd\2\2\u12ae\u12af\7\u01fc\2\2\u12af"+
		"\u12b1\5\u03fa\u01fe\2\u12b0\u12ae\3\2\2\2\u12b0\u12b1\3\2\2\2\u12b1\u12b2"+
		"\3\2\2\2\u12b2\u12b3\7\u028f\2\2\u12b3\u12b5\7\u02fe\2\2\u12b4\u12b6\5"+
		"\u03f6\u01fc\2\u12b5\u12b4\3\2\2\2\u12b5\u12b6\3\2\2\2\u12b6\u12b8\3\2"+
		"\2\2\u12b7\u12b9\5\u03f2\u01fa\2\u12b8\u12b7\3\2\2\2\u12b8\u12b9\3\2\2"+
		"\2\u12b9\u12bb\3\2\2\2\u12ba\u1282\3\2\2\2\u12ba\u1285\3\2\2\2\u12ba\u1287"+
		"\3\2\2\2\u12ba\u128a\3\2\2\2\u12ba\u12ac\3\2\2\2\u12bb\u0239\3\2\2\2\u12bc"+
		"\u12be\5\u023c\u011f\2\u12bd\u12bf\5\u023e\u0120\2\u12be\u12bd\3\2\2\2"+
		"\u12be\u12bf\3\2\2\2\u12bf\u12c6\3\2\2\2\u12c0\u12c3\5\u023e\u0120\2\u12c1"+
		"\u12c2\7\u0198\2\2\u12c2\u12c4\5\u023c\u011f\2\u12c3\u12c1\3\2\2\2\u12c3"+
		"\u12c4\3\2\2\2\u12c4\u12c6\3\2\2\2\u12c5\u12bc\3\2\2\2\u12c5\u12c0\3\2"+
		"\2\2\u12c6\u023b\3\2\2\2\u12c7\u12c8\7\u0258\2\2\u12c8\u12c9\t)\2\2\u12c9"+
		"\u023d\3\2\2\2\u12ca\u12cb\7\u00ab\2\2\u12cb\u12d1\7\u00b3\2\2\u12cc\u12cd"+
		"\7\u011c\2\2\u12cd\u12d2\7\u0258\2\2\u12ce\u12cf\7\u0258\2\2\u12cf\u12d2"+
		"\t>\2\2\u12d0\u12d2\7\u0135\2\2\u12d1\u12cc\3\2\2\2\u12d1\u12ce\3\2\2"+
		"\2\u12d1\u12d0\3\2\2\2\u12d2\u023f\3\2\2\2\u12d3\u12d4\7\u0198\2\2\u12d4"+
		"\u12d6\5\u0244\u0123\2\u12d5\u12d3\3\2\2\2\u12d6\u12d9\3\2\2\2\u12d7\u12d5"+
		"\3\2\2\2\u12d7\u12d8\3\2\2\2\u12d8\u0241\3\2\2\2\u12d9\u12d7\3\2\2\2\u12da"+
		"\u12db\5\u02e2\u0172\2\u12db\u12dc\5\u049e\u0250\2\u12dc\u12dd\5\u024c"+
		"\u0127\2\u12dd\u12f4\3\2\2\2\u12de\u12f4\5\u03de\u01f0\2\u12df\u12e0\5"+
		"\u02de\u0170\2\u12e0\u12e1\5\u049e\u0250\2\u12e1\u12e2\5\u029c\u014f\2"+
		"\u12e2\u12f4\3\2\2\2\u12e3\u12e4\5\u0246\u0124\2\u12e4\u12e5\5\u049e\u0250"+
		"\2\u12e5\u12e6\5\u024c\u0127\2\u12e6\u12f4\3\2\2\2\u12e7\u12f1\7\u00e8"+
		"\2\2\u12e8\u12e9\5\u049e\u0250\2\u12e9\u12ea\5\u029c\u014f\2\u12ea\u12f2"+
		"\3\2\2\2\u12eb\u12ed\5\u03a0\u01d1\2\u12ec\u12ee\5\u03d2\u01ea\2\u12ed"+
		"\u12ec\3\2\2\2\u12ed\u12ee\3\2\2\2\u12ee\u12f2\3\2\2\2\u12ef\u12f0\6\u0122"+
		"o\2\u12f0\u12f2\7\u01e0\2\2\u12f1\u12e8\3\2\2\2\u12f1\u12eb\3\2\2\2\u12f1"+
		"\u12ef\3\2\2\2\u12f2\u12f4\3\2\2\2\u12f3\u12da\3\2\2\2\u12f3\u12de\3\2"+
		"\2\2\u12f3\u12df\3\2\2\2\u12f3\u12e3\3\2\2\2\u12f3\u12e7\3\2\2\2\u12f4"+
		"\u0243\3\2\2\2\u12f5\u12f6\5\u04a0\u0251\2\u12f6\u12f7\5\u02e2\u0172\2"+
		"\u12f7\u12f8\5\u049e\u0250\2\u12f8\u12f9\5\u024c\u0127\2\u12f9\u12fc\3"+
		"\2\2\2\u12fa\u12fc\5\u0242\u0122\2\u12fb\u12f5\3\2\2\2\u12fb\u12fa\3\2"+
		"\2\2\u12fc\u0245\3\2\2\2\u12fd\u12ff\7\u01a4\2\2\u12fe\u1300\5\u04a4\u0253"+
		"\2\u12ff\u12fe\3\2\2\2\u12ff\u1300\3\2\2\2\u1300\u1301\3\2\2\2\u1301\u1302"+
		"\5\u02e2\u0172\2\u1302\u0247\3\2\2\2\u1303\u1304\5\u024a\u0126\2\u1304"+
		"\u1305\5\u0240\u0121\2\u1305\u1309\3\2\2\2\u1306\u1307\7\u015d\2\2\u1307"+
		"\u1309\5\u023a\u011e\2\u1308\u1303\3\2\2\2\u1308\u1306\3\2\2\2\u1309\u0249"+
		"\3\2\2\2\u130a\u130b\5\u02e2\u0172\2\u130b\u130c\5\u049e\u0250\2\u130c"+
		"\u130d\5\u024c\u0127\2\u130d\u024b\3\2\2\2\u130e\u1313\5\u029c\u014f\2"+
		"\u130f\u1313\t?\2\2\u1310\u1311\6\u0127p\2\u1311\u1313\t@\2\2\u1312\u130e"+
		"\3\2\2\2\u1312\u130f\3\2\2\2\u1312\u1310\3\2\2\2\u1313\u024d\3\2\2\2\u1314"+
		"\u13f0\7\u026f\2\2\u1315\u1316\6\u0128q\2\u1316\u13f1\7D\2\2\u1317\u1319"+
		"\7\u01d6\2\2\u1318\u131a\5\u03fe\u0200\2\u1319\u1318\3\2\2\2\u1319\u131a"+
		"\3\2\2\2\u131a\u13f1\3\2\2\2\u131b\u131d\5\u0250\u0129\2\u131c\u131b\3"+
		"\2\2\2\u131c\u131d\3\2\2\2\u131d\u131e\3\2\2\2\u131e\u1320\7\u0156\2\2"+
		"\u131f\u1321\5\u0256\u012c\2\u1320\u131f\3\2\2\2\u1320\u1321\3\2\2\2\u1321"+
		"\u1323\3\2\2\2\u1322\u1324\5\u03fe\u0200\2\u1323\u1322\3\2\2\2\u1323\u1324"+
		"\3\2\2\2\u1324\u13f1\3\2\2\2\u1325\u1327\7\u0092\2\2\u1326\u1325\3\2\2"+
		"\2\u1326\u1327\3\2\2\2\u1327\u1328\3\2\2\2\u1328\u132a\7\u015e\2\2\u1329"+
		"\u132b\5\u0256\u012c\2\u132a\u1329\3\2\2\2\u132a\u132b\3\2\2\2\u132b\u132d"+
		"\3\2\2\2\u132c\u132e\5\u03fe\u0200\2\u132d\u132c\3\2\2\2\u132d\u132e\3"+
		"\2\2\2\u132e\u13f1\3\2\2\2\u132f\u1331\7\u0088\2\2\u1330\u1332\5\u0256"+
		"\u012c\2\u1331\u1330\3\2\2\2\u1331\u1332\3\2\2\2\u1332\u1334\3\2\2\2\u1333"+
		"\u1335\5\u03fe\u0200\2\u1334\u1333\3\2\2\2\u1334\u1335\3\2\2\2\u1335\u13f1"+
		"\3\2\2\2\u1336\u1337\7\u0289\2\2\u1337\u1339\7\u0149\2\2\u1338\u133a\5"+
		"\u0256\u012c\2\u1339\u1338\3\2\2\2\u1339\u133a\3\2\2\2\u133a\u133c\3\2"+
		"\2\2\u133b\u133d\5\u03fe\u0200\2\u133c\u133b\3\2\2\2\u133c\u133d\3\2\2"+
		"\2\u133d\u13f1\3\2\2\2\u133e\u133f\7\36\2\2\u133f\u1341\7\u0156\2\2\u1340"+
		"\u1342\5\u0256\u012c\2\u1341\u1340\3\2\2\2\u1341\u1342\3\2\2\2\u1342\u1344"+
		"\3\2\2\2\u1343\u1345\5\u03fe\u0200\2\u1344\u1343\3\2\2\2\u1344\u1345\3"+
		"\2\2\2\u1345\u13f1\3\2\2\2\u1346\u13f1\7\u0101\2\2\u1347\u134a\7\u0082"+
		"\2\2\u1348\u134b\5\u043e\u0220\2\u1349\u134b\7\u01ad\2\2\u134a\u1348\3"+
		"\2\2\2\u134a\u1349\3\2\2\2\u134b\u134c\3\2\2\2\u134c\u13f1\tA\2\2\u134d"+
		"\u134f\5\u0250\u0129\2\u134e\u134d\3\2\2\2\u134e\u134f\3\2\2\2\u134f\u1350"+
		"\3\2\2\2\u1350\u1351\7\\\2\2\u1351\u1352\tB\2\2\u1352\u1354\5\u0446\u0224"+
		"\2\u1353\u1355\5\u0256\u012c\2\u1354\u1353\3\2\2\2\u1354\u1355\3\2\2\2"+
		"\u1355\u1357\3\2\2\2\u1356\u1358\5\u03fe\u0200\2\u1357\u1356\3\2\2\2\u1357"+
		"\u1358\3\2\2\2\u1358\u13f1\3\2\2\2\u1359\u135a\t,\2\2\u135a\u13f1\7\u00b9"+
		"\2\2\u135b\u1362\7/\2\2\u135c\u1363\7\u009f\2\2\u135d\u135e\7\u0149\2"+
		"\2\u135e\u1360\5\u0252\u012a\2\u135f\u1361\5\u0306\u0184\2\u1360\u135f"+
		"\3\2\2\2\u1360\u1361\3\2\2\2\u1361\u1363\3\2\2\2\u1362\u135c\3\2\2\2\u1362"+
		"\u135d\3\2\2\2\u1363\u13f1\3\2\2\2\u1364\u1365\tC\2\2\u1365\u1368\7\u0088"+
		"\2\2\u1366\u1367\7\u0214\2\2\u1367\u1369\5\u047c\u023f\2\u1368\u1366\3"+
		"\2\2\2\u1368\u1369\3\2\2\2\u1369\u136c\3\2\2\2\u136a\u136b\7\u01fd\2\2"+
		"\u136b\u136d\5\u0470\u0239\2\u136c\u136a\3\2\2\2\u136c\u136d\3\2\2\2\u136d"+
		"\u136f\3\2\2\2\u136e\u1370\5\u011e\u0090\2\u136f\u136e\3\2\2\2\u136f\u1370"+
		"\3\2\2\2\u1370\u1372\3\2\2\2\u1371\u1373\5\u0306\u0184\2\u1372\u1371\3"+
		"\2\2\2\u1372\u1373\3\2\2\2\u1373\u13f1\3\2\2\2\u1374\u1375\6\u0128r\2"+
		"\u1375\u1377\7\u008c\2\2\u1376\u1374\3\2\2\2\u1376\u1377\3\2\2\2\u1377"+
		"\u1378\3\2\2\2\u1378\u1379\tD\2\2\u1379\u137a\5\u0254\u012b\2\u137a\u137c"+
		"\5\u0446\u0224\2\u137b\u137d\5\u0256\u012c\2\u137c\u137b\3\2\2\2\u137c"+
		"\u137d\3\2\2\2\u137d\u137f\3\2\2\2\u137e\u1380\5\u0160\u00b1\2\u137f\u137e"+
		"\3\2\2\2\u137f\u1380\3\2\2\2\u1380\u13f1\3\2\2\2\u1381\u1383\7\u014a\2"+
		"\2\u1382\u1381\3\2\2\2\u1382\u1383\3\2\2\2\u1383\u1384\3\2\2\2\u1384\u13f1"+
		"\7\u0083\2\2\u1385\u1386\7\u01cc\2\2\u1386\u1387\7\u019b\2\2\u1387\u1388"+
		"\7\u018b\2\2\u1388\u1389\7\u019c\2\2\u1389\u13f1\tE\2\2\u138a\u138c\7"+
		"\u0173\2\2\u138b\u138d\5\u011e\u0090\2\u138c\u138b\3\2\2\2\u138c\u138d"+
		"\3\2\2\2\u138d\u13f1\3\2\2\2\u138e\u1390\7\u0085\2\2\u138f\u1391\5\u011e"+
		"\u0090\2\u1390\u138f\3\2\2\2\u1390\u1391\3\2\2\2\u1391\u13f1\3\2\2\2\u1392"+
		"\u13f1\7\u010a\2\2\u1393\u139c\7\u0109\2\2\u1394\u1399\5\u0258\u012d\2"+
		"\u1395\u1396\7\u0198\2\2\u1396\u1398\5\u0258\u012d\2\u1397\u1395\3\2\2"+
		"\2\u1398\u139b\3\2\2\2\u1399\u1397\3\2\2\2\u1399\u139a\3\2\2\2\u139a\u139d"+
		"\3\2\2\2\u139b\u1399\3\2\2\2\u139c\u1394\3\2\2\2\u139c\u139d\3\2\2\2\u139d"+
		"\u13a1\3\2\2\2\u139e\u139f\7\u01fc\2\2\u139f\u13a0\7\u010d\2\2\u13a0\u13a2"+
		"\7\u017e\2\2\u13a1\u139e\3\2\2\2\u13a1\u13a2\3\2\2\2\u13a2\u13a4\3\2\2"+
		"\2\u13a3\u13a5\5\u011e\u0090\2\u13a4\u13a3\3\2\2\2\u13a4\u13a5\3\2\2\2"+
		"\u13a5\u13f1\3\2\2\2\u13a6\u13a8\5\u04a0\u0251\2\u13a7\u13a6\3\2\2\2\u13a7"+
		"\u13a8\3\2\2\2\u13a8\u13a9\3\2\2\2\u13a9\u13ab\tF\2\2\u13aa\u13ac\5\u03fe"+
		"\u0200\2\u13ab\u13aa\3\2\2\2\u13ab\u13ac\3\2\2\2\u13ac\u13f1\3\2\2\2\u13ad"+
		"\u13af\7\u0092\2\2\u13ae\u13ad\3\2\2\2\u13ae\u13af\3\2\2\2\u13af\u13b0"+
		"\3\2\2\2\u13b0\u13f1\7\u0108\2\2\u13b1\u13b3\5\u02ee\u0178\2\u13b2\u13b4"+
		"\5\u03fe\u0200\2\u13b3\u13b2\3\2\2\2\u13b3\u13b4\3\2\2\2\u13b4\u13f1\3"+
		"\2\2\2\u13b5\u13b7\7Y\2\2\u13b6\u13b8\5\u03fe\u0200\2\u13b7\u13b6\3\2"+
		"\2\2\u13b7\u13b8\3\2\2\2\u13b8\u13f1\3\2\2\2\u13b9\u13ba\6\u0128s\2\u13ba"+
		"\u13f1\7j\2\2\u13bb\u13f1\7\u0106\2\2\u13bc\u13bf\7\u009c\2\2\u13bd\u13be"+
		"\7\u01fc\2\2\u13be\u13c0\5\u03fa\u01fe\2\u13bf\u13bd\3\2\2\2\u13bf\u13c0"+
		"\3\2\2\2\u13c0\u13f1\3\2\2\2\u13c1\u13c2\7\u009c\2\2\u13c2\u13c3\7\u01fc"+
		"\2\2\u13c3\u13c4\5\u03fa\u01fe\2\u13c4\u13c5\7\u029c\2\2\u13c5\u13c6\5"+
		"\u03e8\u01f5\2\u13c6\u13f1\3\2\2\2\u13c7\u13c8\7\u00bb\2\2\u13c8\u13f1"+
		"\7\u0149\2\2\u13c9\u13de\7\u01cd\2\2\u13ca\u13cc\7\u01d5\2\2\u13cb\u13cd"+
		"\5\u03cc\u01e7\2\u13cc\u13cb\3\2\2\2\u13cc\u13cd\3\2\2\2\u13cd\u13ce\3"+
		"\2\2\2\u13ce\u13df\5\u041a\u020e\2\u13cf\u13d0\7\u0087\2\2\u13d0\u13df"+
		"\5\u0436\u021c\2\u13d1\u13d2\7\u0166\2\2\u13d2\u13df\5\u0422\u0212\2\u13d3"+
		"\u13d4\7\u0254\2\2\u13d4\u13df\5\u041e\u0210\2\u13d5\u13d6\7\u0289\2\2"+
		"\u13d6\u13df\5\u0446\u0224\2\u13d7\u13d8\7\u0291\2\2\u13d8\u13df\5\u0426"+
		"\u0214\2\u13d9\u13da\7\u0171\2\2\u13da\u13df\5\u042a\u0216\2\u13db\u13dc"+
		"\6\u0128t\2\u13dc\u13dd\7\u016e\2\2\u13dd\u13df\5\u03fa\u01fe\2\u13de"+
		"\u13ca\3\2\2\2\u13de\u13cf\3\2\2\2\u13de\u13d1\3\2\2\2\u13de\u13d3\3\2"+
		"\2\2\u13de\u13d5\3\2\2\2\u13de\u13d7\3\2\2\2\u13de\u13d9\3\2\2\2\u13de"+
		"\u13db\3\2\2\2\u13df\u13f1\3\2\2\2\u13e0\u13e1\7\u0254\2\2\u13e1\u13e3"+
		"\7\u0149\2\2\u13e2\u13e4\5\u03fe\u0200\2\u13e3\u13e2\3\2\2\2\u13e3\u13e4"+
		"\3\2\2\2\u13e4\u13f1\3\2\2\2\u13e5\u13e6\7\u0166\2\2\u13e6\u13e8\7\u0149"+
		"\2\2\u13e7\u13e9\5\u03fe\u0200\2\u13e8\u13e7\3\2\2\2\u13e8\u13e9\3\2\2"+
		"\2\u13e9\u13f1\3\2\2\2\u13ea\u13eb\7\u0254\2\2\u13eb\u13ec\7X\2\2\u13ec"+
		"\u13f1\5\u041e\u0210\2\u13ed\u13ee\7\u0166\2\2\u13ee\u13ef\7X\2\2\u13ef"+
		"\u13f1\5\u0422\u0212\2\u13f0\u1315\3\2\2\2\u13f0\u1317\3\2\2\2\u13f0\u131c"+
		"\3\2\2\2\u13f0\u1326\3\2\2\2\u13f0\u132f\3\2\2\2\u13f0\u1336\3\2\2\2\u13f0"+
		"\u133e\3\2\2\2\u13f0\u1346\3\2\2\2\u13f0\u1347\3\2\2\2\u13f0\u134e\3\2"+
		"\2\2\u13f0\u1359\3\2\2\2\u13f0\u135b\3\2\2\2\u13f0\u1364\3\2\2\2\u13f0"+
		"\u1376\3\2\2\2\u13f0\u1382\3\2\2\2\u13f0\u1385\3\2\2\2\u13f0\u138a\3\2"+
		"\2\2\u13f0\u138e\3\2\2\2\u13f0\u1392\3\2\2\2\u13f0\u1393\3\2\2\2\u13f0"+
		"\u13a7\3\2\2\2\u13f0\u13ae\3\2\2\2\u13f0\u13b1\3\2\2\2\u13f0\u13b5\3\2"+
		"\2\2\u13f0\u13b9\3\2\2\2\u13f0\u13bb\3\2\2\2\u13f0\u13bc\3\2\2\2\u13f0"+
		"\u13c1\3\2\2\2\u13f0\u13c7\3\2\2\2\u13f0\u13c9\3\2\2\2\u13f0\u13e0\3\2"+
		"\2\2\u13f0\u13e5\3\2\2\2\u13f0\u13ea\3\2\2\2\u13f0\u13ed\3\2\2\2\u13f1"+
		"\u024f\3\2\2\2\u13f2\u13f9\7\u0092\2\2\u13f3\u13f4\6\u0129u\2\u13f4\u13f6"+
		"\7\u008c\2\2\u13f5\u13f7\7\u0092\2\2\u13f6\u13f5\3\2\2\2\u13f6\u13f7\3"+
		"\2\2\2\u13f7\u13f9\3\2\2\2\u13f8\u13f2\3\2\2\2\u13f8\u13f3\3\2\2\2\u13f9"+
		"\u0251\3\2\2\2\u13fa\u13fc\6\u012av\2\u13fb\u13fd\7\u023e\2\2\u13fc\u13fb"+
		"\3\2\2\2\u13fc\u13fd\3\2\2\2\u13fd\u1400\3\2\2\2\u13fe\u1400\3\2\2\2\u13ff"+
		"\u13fa\3\2\2\2\u13ff\u13fe\3\2\2\2\u1400\u0253\3\2\2\2\u1401\u1402\tB"+
		"\2\2\u1402\u0255\3\2\2\2\u1403\u1404\5\u0254\u012b\2\u1404\u1405\5\u0460"+
		"\u0231\2\u1405\u0257\3\2\2\2\u1406\u1407\7K\2\2\u1407\u140e\7\u00a9\2"+
		"\2\u1408\u1409\7i\2\2\u1409\u140e\7\u0154\2\2\u140a\u140b\7\u00f9\2\2"+
		"\u140b\u140e\7\u008e\2\2\u140c\u140e\tG\2\2\u140d\u1406\3\2\2\2\u140d"+
		"\u1408\3\2\2\2\u140d\u140a\3\2\2\2\u140d\u140c\3\2\2\2\u140e\u0259\3\2"+
		"\2\2\u140f\u1410\7I\2\2\u1410\u1435\5\u0480\u0241\2\u1411\u1412\7\t\2"+
		"\2\u1412\u1413\7\u020b\2\2\u1413\u1414\5\u025c\u012f\2\u1414\u1417\7\u0214"+
		"\2\2\u1415\u1418\5\u0460\u0231\2\u1416\u1418\7\u01e0\2\2\u1417\u1415\3"+
		"\2\2\2\u1417\u1416\3\2\2\2\u1418\u1435\3\2\2\2\u1419\u141b\7\24\2\2\u141a"+
		"\u141c\5\u0402\u0202\2\u141b\u141a\3\2\2\2\u141b\u141c\3\2\2\2\u141c\u1426"+
		"\3\2\2\2\u141d\u1427\5\u026e\u0138\2\u141e\u1423\5\u026a\u0136\2\u141f"+
		"\u1420\7\u0198\2\2\u1420\u1422\5\u026a\u0136\2\u1421\u141f\3\2\2\2\u1422"+
		"\u1425\3\2\2\2\u1423\u1421\3\2\2\2\u1423\u1424\3\2\2\2\u1424\u1427\3\2"+
		"\2\2\u1425\u1423\3\2\2\2\u1426\u141d\3\2\2\2\u1426\u141e\3\2\2\2\u1427"+
		"\u1435\3\2\2\2\u1428\u142a\7\u021c\2\2\u1429\u142b\tH\2\2\u142a\u1429"+
		"\3\2\2\2\u142a\u142b\3\2\2\2\u142b\u142c\3\2\2\2\u142c\u1435\5\u029c\u014f"+
		"\2\u142d\u142e\7\u0224\2\2\u142e\u142f\7\u020b\2\2\u142f\u1430\7\u0212"+
		"\2\2\u1430\u1431\7\t\2\2\u1431\u1435\5\u0272\u013a\2\u1432\u1433\6\u012e"+
		"w\2\u1433\u1435\7:\2\2\u1434\u140f\3\2\2\2\u1434\u1411\3\2\2\2\u1434\u1419"+
		"\3\2\2\2\u1434\u1428\3\2\2\2\u1434\u142d\3\2\2\2\u1434\u1432\3\2\2\2\u1435"+
		"\u025b\3\2\2\2\u1436\u1439\5\u025e\u0130\2\u1437\u1439\5\u0262\u0132\2"+
		"\u1438\u1436\3\2\2\2\u1438\u1437\3\2\2\2\u1439\u025d\3\2\2\2\u143a\u143f"+
		"\5\u0260\u0131\2\u143b\u143c\7\u0198\2\2\u143c\u143e\5\u0260\u0131\2\u143d"+
		"\u143b\3\2\2\2\u143e\u1441\3\2\2\2\u143f\u143d\3\2\2\2\u143f\u1440\3\2"+
		"\2\2\u1440\u025f\3\2\2\2\u1441\u143f\3\2\2\2\u1442\u1444\5\u0446\u0224"+
		"\2\u1443\u1445\5\u0264\u0133\2\u1444\u1443\3\2\2\2\u1444\u1445\3\2\2\2"+
		"\u1445\u0261\3\2\2\2\u1446\u1447\5\u0446\u0224\2\u1447\u1448\7\"\2\2\u1448"+
		"\u1449\7\u019b\2\2\u1449\u144a\5\66\34\2\u144a\u144c\7\u019c\2\2\u144b"+
		"\u144d\5\u0264\u0133\2\u144c\u144b\3\2\2\2\u144c\u144d\3\2\2\2\u144d\u0263"+
		"\3\2\2\2\u144e\u144f\5\u0190\u00c9\2\u144f\u1451\7\u019b\2\2\u1450\u1452"+
		"\5\u0268\u0135\2\u1451\u1450\3\2\2\2\u1451\u1452\3\2\2\2\u1452\u1453\3"+
		"\2\2\2\u1453\u1454\7\u019c\2\2\u1454\u0265\3\2\2\2\u1455\u1458\5\u0460"+
		"\u0231\2\u1456\u1458\7\u0253\2\2\u1457\u1455\3\2\2\2\u1457\u1456\3\2\2"+
		"\2\u1458\u0267\3\2\2\2\u1459\u145e\5\u0266\u0134\2\u145a\u145b\7\u0198"+
		"\2\2\u145b\u145d\5\u0266\u0134\2\u145c\u145a\3\2\2\2\u145d\u1460\3\2\2"+
		"\2\u145e\u145c\3\2\2\2\u145e\u145f\3\2\2\2\u145f\u0269\3\2\2\2\u1460\u145e"+
		"\3\2\2\2\u1461\u1471\tI\2\2\u1462\u1464\5\u026c\u0137\2\u1463\u1462\3"+
		"\2\2\2\u1463\u1464\3\2\2\2\u1464\u1465\3\2\2\2\u1465\u1471\7\u00b9\2\2"+
		"\u1466\u1467\7\u0115\2\2\u1467\u1469\7\u00b9\2\2\u1468\u146a\5\u0306\u0184"+
		"\2\u1469\u1468\3\2\2\2\u1469\u146a\3\2\2\2\u146a\u1471\3\2\2\2\u146b\u146c"+
		"\6\u0136x\2\u146c\u146d\7\u010d\2\2\u146d\u1471\7\t\2\2\u146e\u146f\6"+
		"\u0136y\2\u146f\u1471\7\u0249\2\2\u1470\u1461\3\2\2\2\u1470\u1463\3\2"+
		"\2\2\u1470\u1466\3\2\2\2\u1470\u146b\3\2\2\2\u1470\u146e\3\2\2\2\u1471"+
		"\u026b\3\2\2\2\u1472\u1473\tJ\2\2\u1473\u026d\3\2\2\2\u1474\u147c\t\24"+
		"\2\2\u1475\u1476\7\u02ac\2\2\u1476\u1477\7\u0258\2\2\u1477\u147d\7\u0226"+
		"\2\2\u1478\u147a\5\u0462\u0232\2\u1479\u147b\5\u0270\u0139\2\u147a\u1479"+
		"\3\2\2\2\u147a\u147b\3\2\2\2\u147b\u147d\3\2\2\2\u147c\u1475\3\2\2\2\u147c"+
		"\u1478\3\2\2\2\u147c\u147d\3\2\2\2\u147d\u026f\3\2\2\2\u147e\u147f\6\u0139"+
		"z\2\u147f\u1480\7\u01fc\2\2\u1480\u1485\7\u008b\2\2\u1481\u1482\7\u02ac"+
		"\2\2\u1482\u1483\7\u0258\2\2\u1483\u1485\7\u0226\2\2\u1484\u147e\3\2\2"+
		"\2\u1484\u1481\3\2\2\2\u1485\u0271\3\2\2\2\u1486\u1487\5\u0446\u0224\2"+
		"\u1487\u1489\5\u0278\u013d\2\u1488\u148a\5\u0264\u0133\2\u1489\u1488\3"+
		"\2\2\2\u1489\u148a\3\2\2\2\u148a\u148d\3\2\2\2\u148b\u148c\7\u020a\2\2"+
		"\u148c\u148e\7\u00b1\2\2\u148d\u148b\3\2\2\2\u148d\u148e\3\2\2\2\u148e"+
		"\u1491\3\2\2\2\u148f\u1491\5\u0274\u013b\2\u1490\u1486\3\2\2\2\u1490\u148f"+
		"\3\2\2\2\u1491\u0273\3\2\2\2\u1492\u1497\5\u0276\u013c\2\u1493\u1494\7"+
		"\u0198\2\2\u1494\u1496\5\u0276\u013c\2\u1495\u1493\3\2\2\2\u1496\u1499"+
		"\3\2\2\2\u1497\u1495\3\2\2\2\u1497\u1498\3\2\2\2\u1498\u0275\3\2\2\2\u1499"+
		"\u1497\3\2\2\2\u149a\u149c\5\u0446\u0224\2\u149b\u149d\5\u0264\u0133\2"+
		"\u149c\u149b\3\2\2\2\u149c\u149d\3\2\2\2\u149d\u14a0\3\2\2\2\u149e\u149f"+
		"\7\u020a\2\2\u149f\u14a1\7\u00b1\2\2\u14a0\u149e\3\2\2\2\u14a0\u14a1\3"+
		"\2\2\2\u14a1\u0277\3\2\2\2\u14a2\u14a3\7\"\2\2\u14a3\u14a4\7\u019b\2\2"+
		"\u14a4\u14a5\5\66\34\2\u14a5\u14a6\7\u019c\2\2\u14a6\u0279\3\2\2\2\u14a7"+
		"\u14ac\5\u027c\u013f\2\u14a8\u14ac\5\u0286\u0144\2\u14a9\u14ac\5\u0288"+
		"\u0145\2\u14aa\u14ac\5\u028c\u0147\2\u14ab\u14a7\3\2\2\2\u14ab\u14a8\3"+
		"\2\2\2\u14ab\u14a9\3\2\2\2\u14ab\u14aa\3\2\2\2\u14ac\u027b\3\2\2\2\u14ad"+
		"\u14ae\7\u01cd\2\2\u14ae\u14af\7\u02e5\2\2\u14af\u14b0\7\u0202\2\2\u14b0"+
		"\u14b1\5\u0460\u0231\2\u14b1\u14b3\7\u0164\2\2\u14b2\u14b4\5\u049e\u0250"+
		"\2\u14b3\u14b2\3\2\2\2\u14b3\u14b4\3\2\2\2\u14b4\u14b5\3\2\2\2\u14b5\u14b7"+
		"\tK\2\2\u14b6\u14b8\5\u027e\u0140\2\u14b7\u14b6\3\2\2\2\u14b7\u14b8\3"+
		"\2\2\2\u14b8\u14ba\3\2\2\2\u14b9\u14bb\5\u0282\u0142\2\u14ba\u14b9\3\2"+
		"\2\2\u14ba\u14bb\3\2\2\2\u14bb\u14bd\3\2\2\2\u14bc\u14be\5\u0284\u0143"+
		"\2\u14bd\u14bc\3\2\2\2\u14bd\u14be\3\2\2\2\u14be\u027d\3\2\2\2\u14bf\u14c1"+
		"\7\u02e7\2\2\u14c0\u14c2\5\u049e\u0250\2\u14c1\u14c0\3\2\2\2\u14c1\u14c2"+
		"\3\2\2\2\u14c2\u14c3\3\2\2\2\u14c3\u14ca\5\u0280\u0141\2\u14c4\u14c6\7"+
		"\u0198\2\2\u14c5\u14c4\3\2\2\2\u14c5\u14c6\3\2\2\2\u14c6\u14c7\3\2\2\2"+
		"\u14c7\u14c9\5\u0280\u0141\2\u14c8\u14c5\3\2\2\2\u14c9\u14cc\3\2\2\2\u14ca"+
		"\u14c8\3\2\2\2\u14ca\u14cb\3\2\2\2\u14cb\u027f\3\2\2\2\u14cc\u14ca\3\2"+
		"\2\2\u14cd\u14d0\7\u017e\2\2\u14ce\u14cf\7\u018a\2\2\u14cf\u14d1\7\u017e"+
		"\2\2\u14d0\u14ce\3\2\2\2\u14d0\u14d1\3\2\2\2\u14d1\u0281\3\2\2\2\u14d2"+
		"\u14d4\7\u02e4\2\2\u14d3\u14d5\5\u049e\u0250\2\u14d4\u14d3\3\2\2\2\u14d4"+
		"\u14d5\3\2\2\2\u14d5\u14d6\3\2\2\2\u14d6\u14d7\7\u017e\2\2\u14d7\u0283"+
		"\3\2\2\2\u14d8\u14d9\tL\2\2\u14d9\u0285\3\2\2\2\u14da\u14db\7\u01ae\2"+
		"\2\u14db\u14dc\7\u02e5\2\2\u14dc\u14dd\7\u0202\2\2\u14dd\u14df\5\u045a"+
		"\u022e\2\u14de\u14e0\5\u027e\u0140\2\u14df\u14de\3\2\2\2\u14df\u14e0\3"+
		"\2\2\2\u14e0\u14e2\3\2\2\2\u14e1\u14e3\5\u0282\u0142\2\u14e2\u14e1\3\2"+
		"\2\2\u14e2\u14e3\3\2\2\2\u14e3\u14e5\3\2\2\2\u14e4\u14e6\5\u0284\u0143"+
		"\2\u14e5\u14e4\3\2\2\2\u14e5\u14e6\3\2\2\2\u14e6\u14e8\3\2\2\2\u14e7\u14e9"+
		"\7\u01fa\2\2\u14e8\u14e7\3\2\2\2\u14e8\u14e9\3\2\2\2\u14e9\u0287\3\2\2"+
		"\2\u14ea\u14eb\7\u026d\2\2\u14eb\u14ec\7\u02e5\2\2\u14ec\u14ed\7\u0202"+
		"\2\2\u14ed\u14f0\5\u0460\u0231\2\u14ee\u14ef\7\u01fc\2\2\u14ef\u14f1\5"+
		"\u028a\u0146\2\u14f0\u14ee\3\2\2\2\u14f0\u14f1\3\2\2\2\u14f1\u0289\3\2"+
		"\2\2\u14f2\u14f9\5\u046e\u0238\2\u14f3\u14f5\7\u0198\2\2\u14f4\u14f3\3"+
		"\2\2\2\u14f4\u14f5\3\2\2\2\u14f5\u14f6\3\2\2\2\u14f6\u14f8\5\u046e\u0238"+
		"\2\u14f7\u14f4\3\2\2\2\u14f8\u14fb\3\2\2\2\u14f9\u14f7\3\2\2\2\u14f9\u14fa"+
		"\3\2\2\2\u14fa\u028b\3\2\2\2\u14fb\u14f9\3\2\2\2\u14fc\u14fd\7\u01e9\2"+
		"\2\u14fd\u14fe\7\u02e5\2\2\u14fe\u14ff\7\u0202\2\2\u14ff\u1501\5\u045a"+
		"\u022e\2\u1500\u1502\7\u01fa\2\2\u1501\u1500\3\2\2\2\u1501\u1502\3\2\2"+
		"\2\u1502\u028d\3\2\2\2\u1503\u150a\5\u0290\u0149\2\u1504\u150a\5\u0292"+
		"\u014a\2\u1505\u150a\5\u0296\u014c\2\u1506\u150a\5\u0298\u014d\2\u1507"+
		"\u1508\6\u0148{\2\u1508\u150a\5\u029a\u014e\2\u1509\u1503\3\2\2\2\u1509"+
		"\u1504\3\2\2\2\u1509\u1505\3\2\2\2\u1509\u1506\3\2\2\2\u1509\u1507\3\2"+
		"\2\2\u150a\u028f\3\2\2\2\u150b\u150c\tM\2\2\u150c\u150f\5\u0446\u0224"+
		"\2\u150d\u1510\5\u047c\u023f\2\u150e\u1510\5\u040e\u0208\2\u150f\u150d"+
		"\3\2\2\2\u150f\u150e\3\2\2\2\u150f\u1510\3\2\2\2\u1510\u0291\3\2\2\2\u1511"+
		"\u151c\tM\2\2\u1512\u1513\6\u014a|\2\u1513\u151d\7\u008c\2\2\u1514\u1515"+
		"\6\u014a}\2\u1515\u151d\7\u00fc\2\2\u1516\u1517\6\u014a~\2\u1517\u1518"+
		"\7\26\2\2\u1518\u1519\7\u0181\2\2\u1519\u151d\5\u0494\u024b\2\u151a\u151b"+
		"\6\u014a\177\2\u151b\u151d\7A\2\2\u151c\u1512\3\2\2\2\u151c\u1514\3\2"+
		"\2\2\u151c\u1516\3\2\2\2\u151c\u151a\3\2\2\2\u151c\u151d\3\2\2\2\u151d"+
		"\u151e\3\2\2\2\u151e\u151f\5\u0294\u014b\2\u151f\u0293\3\2\2\2\u1520\u152d"+
		"\5\u010e\u0088\2\u1521\u1526\6\u014b\u0080\2\u1522\u1527\5\u00e0q\2\u1523"+
		"\u1527\5\u00ecw\2\u1524\u1527\5\u010c\u0087\2\u1525\u1527\5\u019a\u00ce"+
		"\2\u1526\u1522\3\2\2\2\u1526\u1523\3\2\2\2\u1526\u1524\3\2\2\2\u1526\u1525"+
		"\3\2\2\2\u1527\u152d\3\2\2\2\u1528\u1529\6\u014b\u0081\2\u1529\u152a\7"+
		"\u01fc\2\2\u152a\u152b\7d\2\2\u152b\u152d\5\u046e\u0238\2\u152c\u1520"+
		"\3\2\2\2\u152c\u1521\3\2\2\2\u152c\u1528\3\2\2\2\u152d\u0295\3\2\2\2\u152e"+
		"\u152f\7\31\2\2\u152f\u1530\5\u0494\u024b\2\u1530\u0297\3\2\2\2\u1531"+
		"\u1532\7\u029b\2\2\u1532\u1533\5\u0460\u0231\2\u1533\u0299\3\2\2\2\u1534"+
		"\u1535\7\u02ea\2\2\u1535\u029b\3\2\2\2\u1536\u1537\b\u014f\1\2\u1537\u153d"+
		"\5\u029e\u0150\2\u1538\u153a\7\u0217\2\2\u1539\u153b\5\u02f0\u0179\2\u153a"+
		"\u1539\3\2\2\2\u153a\u153b\3\2\2\2\u153b\u153c\3\2\2\2\u153c\u153e\tN"+
		"\2\2\u153d\u1538\3\2\2\2\u153d\u153e\3\2\2\2\u153e\u1542\3\2\2\2\u153f"+
		"\u1540\7\u023f\2\2\u1540\u1542\5\u029c\u014f\6\u1541\u1536\3\2\2\2\u1541"+
		"\u153f\3\2\2\2\u1542\u154e\3\2\2\2\u1543\u1544\f\5\2\2\u1544\u1545\tO"+
		"\2\2\u1545\u154d\5\u029c\u014f\6\u1546\u1547\f\4\2\2\u1547\u1548\7\u02af"+
		"\2\2\u1548\u154d\5\u029c\u014f\5\u1549\u154a\f\3\2\2\u154a\u154b\tP\2"+
		"\2\u154b\u154d\5\u029c\u014f\4\u154c\u1543\3\2\2\2\u154c\u1546\3\2\2\2"+
		"\u154c\u1549\3\2\2\2\u154d\u1550\3\2\2\2\u154e\u154c\3\2\2\2\u154e\u154f"+
		"\3\2\2\2\u154f\u029d\3\2\2\2\u1550\u154e\3\2\2\2\u1551\u1552\b\u0150\1"+
		"\2\u1552\u1553\5\u02a2\u0152\2\u1553\u1565\3\2\2\2\u1554\u1555\f\5\2\2"+
		"\u1555\u1557\7\u0217\2\2\u1556\u1558\5\u02f0\u0179\2\u1557\u1556\3\2\2"+
		"\2\u1557\u1558\3\2\2\2\u1558\u1559\3\2\2\2\u1559\u1564\7\u0242\2\2\u155a"+
		"\u155b\f\4\2\2\u155b\u155c\5\u02a0\u0151\2\u155c\u155d\5\u02a2\u0152\2"+
		"\u155d\u1564\3\2\2\2\u155e\u155f\f\3\2\2\u155f\u1560\5\u02a0\u0151\2\u1560"+
		"\u1561\tQ\2\2\u1561\u1562\5\u011a\u008e\2\u1562\u1564\3\2\2\2\u1563\u1554"+
		"\3\2\2\2\u1563\u155a\3\2\2\2\u1563\u155e\3\2\2\2\u1564\u1567\3\2\2\2\u1565"+
		"\u1563\3\2\2\2\u1565\u1566\3\2\2\2\u1566\u029f\3\2\2\2\u1567\u1565\3\2"+
		"\2\2\u1568\u1569\tR\2\2\u1569\u02a1\3\2\2\2\u156a\u1578\5\u02a6\u0154"+
		"\2\u156b\u156d\5\u02f0\u0179\2\u156c\u156b\3\2\2\2\u156c\u156d\3\2\2\2"+
		"\u156d\u156e\3\2\2\2\u156e\u1579\5\u02a4\u0153\2\u156f\u1570\6\u0152\u0088"+
		"\2\u1570\u1572\7\u02fd\2\2\u1571\u1573\7\u02bc\2\2\u1572\u1571\3\2\2\2"+
		"\u1572\u1573\3\2\2\2\u1573\u1574\3\2\2\2\u1574\u1579\5\u02fc\u017f\2\u1575"+
		"\u1576\7\u013b\2\2\u1576\u1577\7\u0220\2\2\u1577\u1579\5\u02a6\u0154\2"+
		"\u1578\u156c\3\2\2\2\u1578\u156f\3\2\2\2\u1578\u1575\3\2\2\2\u1578\u1579"+
		"\3\2\2\2\u1579\u02a3\3\2\2\2\u157a\u1580\7\u0214\2\2\u157b\u1581\5\u011a"+
		"\u008e\2\u157c\u157d\7\u019b\2\2\u157d\u157e\5\u02ec\u0177\2\u157e\u157f"+
		"\7\u019c\2\2\u157f\u1581\3\2\2\2\u1580\u157b\3\2\2\2\u1580\u157c\3\2\2"+
		"\2\u1581\u1590\3\2\2\2\u1582\u1583\7\u01b5\2\2\u1583\u1584\5\u02a6\u0154"+
		"\2\u1584\u1585\7\u01b0\2\2\u1585\u1586\5\u02a2\u0152\2\u1586\u1590\3\2"+
		"\2\2\u1587\u1588\7\u0220\2\2\u1588\u158b\5\u02a8\u0155\2\u1589\u158a\7"+
		"\u0086\2\2\u158a\u158c\5\u02a8\u0155\2\u158b\u1589\3\2\2\2\u158b\u158c"+
		"\3\2\2\2\u158c\u1590\3\2\2\2\u158d\u158e\7\u025c\2\2\u158e\u1590\5\u02a6"+
		"\u0154\2\u158f\u157a\3\2\2\2\u158f\u1582\3\2\2\2\u158f\u1587\3\2\2\2\u158f"+
		"\u158d\3\2\2\2\u1590\u02a5\3\2\2\2\u1591\u1592\b\u0154\1\2\u1592\u1593"+
		"\5\u02a8\u0155\2\u1593\u15ae\3\2\2\2\u1594\u1595\f\t\2\2\u1595\u1596\7"+
		"\u0194\2\2\u1596\u15ad\5\u02a6\u0154\n\u1597\u1598\f\b\2\2\u1598\u1599"+
		"\tS\2\2\u1599\u15ad\5\u02a6\u0154\t\u159a\u159b\f\7\2\2\u159b\u159c\t"+
		"T\2\2\u159c\u15ad\5\u02a6\u0154\b\u159d\u159e\f\5\2\2\u159e\u159f\tU\2"+
		"\2\u159f\u15ad\5\u02a6\u0154\6\u15a0\u15a1\f\4\2\2\u15a1\u15a2\7\u0193"+
		"\2\2\u15a2\u15ad\5\u02a6\u0154\5\u15a3\u15a4\f\3\2\2\u15a4\u15a5\7\u0196"+
		"\2\2\u15a5\u15ad\5\u02a6\u0154\4\u15a6\u15a7\f\6\2\2\u15a7\u15a8\tT\2"+
		"\2\u15a8\u15a9\7\u0211\2\2\u15a9\u15aa\5\u029c\u014f\2\u15aa\u15ab\5\u02f4"+
		"\u017b\2\u15ab\u15ad\3\2\2\2\u15ac\u1594\3\2\2\2\u15ac\u1597\3\2\2\2\u15ac"+
		"\u159a\3\2\2\2\u15ac\u159d\3\2\2\2\u15ac\u15a0\3\2\2\2\u15ac\u15a3\3\2"+
		"\2\2\u15ac\u15a6\3\2\2\2\u15ad\u15b0\3\2\2\2\u15ae\u15ac\3\2\2\2\u15ae"+
		"\u15af\3\2\2\2\u15af\u02a7\3\2\2\2\u15b0\u15ae\3\2\2\2\u15b1\u15b2\b\u0155"+
		"\1\2\u15b2\u161a\5\u02dc\u016f\2\u15b3\u15b5\5\u040e\u0208\2\u15b4\u15b6"+
		"\5\u02ac\u0157\2\u15b5\u15b4\3\2\2\2\u15b5\u15b6\3\2\2\2\u15b6\u161a\3"+
		"\2\2\2\u15b7\u161a\5\u02c4\u0163\2\u15b8\u161a\5\u02d6\u016c\2\u15b9\u161a"+
		"\5\u0474\u023b\2\u15ba\u161a\7\u01a6\2\2\u15bb\u161a\5\u02ae\u0158\2\u15bc"+
		"\u15bd\6\u0155\u0090\2\u15bd\u161a\5\u02b0\u0159\2\u15be\u15bf\6\u0155"+
		"\u0091\2\u15bf\u161a\5\u02b2\u015a\2\u15c0\u15c1\tV\2\2\u15c1\u161a\5"+
		"\u02a8\u0155\20\u15c2\u15c3\5\u02f2\u017a\2\u15c3\u15c4\5\u02a8\u0155"+
		"\17\u15c4\u161a\3\2\2\2\u15c5\u15c7\7\u012f\2\2\u15c6\u15c5\3\2\2\2\u15c6"+
		"\u15c7\3\2\2\2\u15c7\u15c8\3\2\2\2\u15c8\u15c9\7\u019b\2\2\u15c9\u15ca"+
		"\5\u02ec\u0177\2\u15ca\u15cb\7\u019c\2\2\u15cb\u161a\3\2\2\2\u15cc\u15ce"+
		"\7\u01f2\2\2\u15cd\u15cc\3\2\2\2\u15cd\u15ce\3\2\2\2\u15ce\u15cf\3\2\2"+
		"\2\u15cf\u161a\5\u011a\u008e\2\u15d0\u15d1\7\u019d\2\2\u15d1\u15d2\5\u0460"+
		"\u0231\2\u15d2\u15d3\5\u029c\u014f\2\u15d3\u15d4\7\u019e\2\2\u15d4\u161a"+
		"\3\2\2\2\u15d5\u15d6\7\u022f\2\2\u15d6\u15d7\5\u02be\u0160\2\u15d7\u15d8"+
		"\7>\2\2\u15d8\u15d9\7\u019b\2\2\u15d9\u15db\5\u02a6\u0154\2\u15da\u15dc"+
		"\5\u02c2\u0162\2\u15db\u15da\3\2\2\2\u15db\u15dc\3\2\2\2\u15dc\u15dd\3"+
		"\2\2\2\u15dd\u15de\7\u019c\2\2\u15de\u161a\3\2\2\2\u15df\u15e0\7\u01b7"+
		"\2\2\u15e0\u161a\5\u02a8\u0155\n\u15e1\u15e2\7\u01c2\2\2\u15e2\u15e3\7"+
		"\u019b\2\2\u15e3\u15e4\5\u029c\u014f\2\u15e4\u15e5\7\u01b1\2\2\u15e5\u15e7"+
		"\5\u02ea\u0176\2\u15e6\u15e8\5\u02aa\u0156\2\u15e7\u15e6\3\2\2\2\u15e7"+
		"\u15e8\3\2\2\2\u15e8\u15e9\3\2\2\2\u15e9\u15ea\7\u019c\2\2\u15ea\u161a"+
		"\3\2\2\2\u15eb\u15ed\7\u01c1\2\2\u15ec\u15ee\5\u029c\u014f\2\u15ed\u15ec"+
		"\3\2\2\2\u15ed\u15ee\3\2\2\2\u15ee\u15f2\3\2\2\2\u15ef\u15f0\5\u02e4\u0173"+
		"\2\u15f0\u15f1\5\u02e6\u0174\2\u15f1\u15f3\3\2\2\2\u15f2\u15ef\3\2\2\2"+
		"\u15f3\u15f4\3\2\2\2\u15f4\u15f2\3\2\2\2\u15f4\u15f5\3\2\2\2\u15f5\u15f7"+
		"\3\2\2\2\u15f6\u15f8\5\u02e8\u0175\2\u15f7\u15f6\3\2\2\2\u15f7\u15f8\3"+
		"\2\2\2\u15f8\u15f9\3\2\2\2\u15f9\u15fa\7\22\2\2\u15fa\u161a\3\2\2\2\u15fb"+
		"\u15fc\7\u01cb\2\2\u15fc\u15fd\7\u019b\2\2\u15fd\u15fe\5\u029c\u014f\2"+
		"\u15fe\u15ff\7\u0198\2\2\u15ff\u1600\5\u02ea\u0176\2\u1600\u1601\7\u019c"+
		"\2\2\u1601\u161a\3\2\2\2\u1602\u1603\7\u01cb\2\2\u1603\u1604\7\u019b\2"+
		"\2\u1604\u1605\5\u029c\u014f\2\u1605\u1606\7\u029c\2\2\u1606\u1607\5\u03a0"+
		"\u01d1\2\u1607\u1608\7\u019c\2\2\u1608\u161a\3\2\2\2\u1609\u160a\7\u01e0"+
		"\2\2\u160a\u160b\7\u019b\2\2\u160b\u160c\5\u0468\u0235\2\u160c\u160d\7"+
		"\u019c\2\2\u160d\u161a\3\2\2\2\u160e\u160f\7\u02a1\2\2\u160f\u1610\7\u019b"+
		"\2\2\u1610\u1611\5\u0468\u0235\2\u1611\u1612\7\u019c\2\2\u1612\u161a\3"+
		"\2\2\2\u1613\u1614\7\u0211\2\2\u1614\u1615\5\u029c\u014f\2\u1615\u1616"+
		"\5\u02f4\u017b\2\u1616\u1617\7\u0189\2\2\u1617\u1618\5\u029c\u014f\2\u1618"+
		"\u161a\3\2\2\2\u1619\u15b1\3\2\2\2\u1619\u15b3\3\2\2\2\u1619\u15b7\3\2"+
		"\2\2\u1619\u15b8\3\2\2\2\u1619\u15b9\3\2\2\2\u1619\u15ba\3\2\2\2\u1619"+
		"\u15bb\3\2\2\2\u1619\u15bc\3\2\2\2\u1619\u15be\3\2\2\2\u1619\u15c0\3\2"+
		"\2\2\u1619\u15c2\3\2\2\2\u1619\u15c6\3\2\2\2\u1619\u15cd\3\2\2\2\u1619"+
		"\u15d0\3\2\2\2\u1619\u15d5\3\2\2\2\u1619\u15df\3\2\2\2\u1619\u15e1\3\2"+
		"\2\2\u1619\u15eb\3\2\2\2\u1619\u15fb\3\2\2\2\u1619\u1602\3\2\2\2\u1619"+
		"\u1609\3\2\2\2\u1619\u160e\3\2\2\2\u1619\u1613\3\2\2\2\u161a\u1623\3\2"+
		"\2\2\u161b\u161c\f\21\2\2\u161c\u161d\7\u017d\2\2\u161d\u1622\5\u02a8"+
		"\u0155\22\u161e\u161f\f\27\2\2\u161f\u1620\7\u01c6\2\2\u1620\u1622\5\u0494"+
		"\u024b\2\u1621\u161b\3\2\2\2\u1621\u161e\3\2\2\2\u1622\u1625\3\2\2\2\u1623"+
		"\u1621\3\2\2\2\u1623\u1624\3\2\2\2\u1624\u02a9\3\2\2\2\u1625\u1623\3\2"+
		"\2\2\u1626\u1627\6\u0156\u0094\2\u1627\u1628\7\u02fb\2\2\u1628\u02ab\3"+
		"\2\2\2\u1629\u162a\6\u0157\u0095\2\u162a\u162b\7\u01a0\2\2\u162b\u1630"+
		"\5\u047a\u023e\2\u162c\u162d\6\u0157\u0096\2\u162d\u162e\7\u01a1\2\2\u162e"+
		"\u1630\5\u047a\u023e\2\u162f\u1629\3\2\2\2\u162f\u162c\3\2\2\2\u1630\u02ad"+
		"\3\2\2\2\u1631\u1632\7H\2\2\u1632\u1634\7\u019b\2\2\u1633\u1635\7\u01e6"+
		"\2\2\u1634\u1633\3\2\2\2\u1634\u1635\3\2\2\2\u1635\u1636\3\2\2\2\u1636"+
		"\u1637\5\u02bc\u015f\2\u1637\u163a\7\u019c\2\2\u1638\u1639\6\u0158\u0097"+
		"\2\u1639\u163b\5\u02b4\u015b\2\u163a\u1638\3\2\2\2\u163a\u163b\3\2\2\2"+
		"\u163b\u16b5\3\2\2\2\u163c\u163d\tW\2\2\u163d\u163e\7\u019b\2\2\u163e"+
		"\u163f\5\u02bc\u015f\2\u163f\u1642\7\u019c\2\2\u1640\u1641\6\u0158\u0098"+
		"\2\u1641\u1643\5\u02b4\u015b\2\u1642\u1640\3\2\2\2\u1642\u1643\3\2\2\2"+
		"\u1643\u16b5\3\2\2\2\u1644\u1645\6\u0158\u0099\2\u1645\u16b5\5\u02ba\u015e"+
		"\2\u1646\u1647\7\u01cc\2\2\u1647\u1649\7\u019b\2\2\u1648\u164a\7\u01ad"+
		"\2\2\u1649\u1648\3\2\2\2\u1649\u164a\3\2\2\2\u164a\u164b\3\2\2\2\u164b"+
		"\u164c\7\u018b\2\2\u164c\u164f\7\u019c\2\2\u164d\u164e\6\u0158\u009a\2"+
		"\u164e\u1650\5\u02b4\u015b\2\u164f\u164d\3\2\2\2\u164f\u1650\3\2\2\2\u1650"+
		"\u16b5\3\2\2\2\u1651\u1652\7\u01cc\2\2\u1652\u165a\7\u019b\2\2\u1653\u1655"+
		"\7\u01ad\2\2\u1654\u1653\3\2\2\2\u1654\u1655\3\2\2\2\u1655\u1656\3\2\2"+
		"\2\u1656\u165b\7\u018b\2\2\u1657\u165b\5\u02bc\u015f\2\u1658\u1659\7\u01e6"+
		"\2\2\u1659\u165b\5\u02ec\u0177\2\u165a\u1654\3\2\2\2\u165a\u1657\3\2\2"+
		"\2\u165a\u1658\3\2\2\2\u165b\u165c\3\2\2\2\u165c\u165f\7\u019c\2\2\u165d"+
		"\u165e\6\u0158\u009b\2\u165e\u1660\5\u02b4\u015b\2\u165f\u165d\3\2\2\2"+
		"\u165f\u1660\3\2\2\2\u1660\u16b5\3\2\2\2\u1661\u1662\7\u0238\2\2\u1662"+
		"\u1664\7\u019b\2\2\u1663\u1665\7\u01e6\2\2\u1664\u1663\3\2\2\2\u1664\u1665"+
		"\3\2\2\2\u1665\u1666\3\2\2\2\u1666\u1667\5\u02bc\u015f\2\u1667\u166a\7"+
		"\u019c\2\2\u1668\u1669\6\u0158\u009c\2\u1669\u166b\5\u02b4\u015b\2\u166a"+
		"\u1668\3\2\2\2\u166a\u166b\3\2\2\2\u166b\u16b5\3\2\2\2\u166c\u166d\7\u0230"+
		"\2\2\u166d\u166f\7\u019b\2\2\u166e\u1670\7\u01e6\2\2\u166f\u166e\3\2\2"+
		"\2\u166f\u1670\3\2\2\2\u1670\u1671\3\2\2\2\u1671\u1672\5\u02bc\u015f\2"+
		"\u1672\u1675\7\u019c\2\2\u1673\u1674\6\u0158\u009d\2\u1674\u1676\5\u02b4"+
		"\u015b\2\u1675\u1673\3\2\2\2\u1675\u1676\3\2\2\2\u1676\u16b5\3\2\2\2\u1677"+
		"\u1678\7\u0280\2\2\u1678\u1679\7\u019b\2\2\u1679\u167a\5\u02bc\u015f\2"+
		"\u167a\u167d\7\u019c\2\2\u167b\u167c\6\u0158\u009e\2\u167c\u167e\5\u02b4"+
		"\u015b\2\u167d\u167b\3\2\2\2\u167d\u167e\3\2\2\2\u167e\u16b5\3\2\2\2\u167f"+
		"\u1680\7\u02a4\2\2\u1680\u1681\7\u019b\2\2\u1681\u1682\5\u02bc\u015f\2"+
		"\u1682\u1685\7\u019c\2\2\u1683\u1684\6\u0158\u009f\2\u1684\u1686\5\u02b4"+
		"\u015b\2\u1685\u1683\3\2\2\2\u1685\u1686\3\2\2\2\u1686\u16b5\3\2\2\2\u1687"+
		"\u1688\7\u027d\2\2\u1688\u1689\7\u019b\2\2\u1689\u168a\5\u02bc\u015f\2"+
		"\u168a\u168d\7\u019c\2\2\u168b\u168c\6\u0158\u00a0\2\u168c\u168e\5\u02b4"+
		"\u015b\2\u168d\u168b\3\2\2\2\u168d\u168e\3\2\2\2\u168e\u16b5\3\2\2\2\u168f"+
		"\u1690\7\u02a7\2\2\u1690\u1691\7\u019b\2\2\u1691\u1692\5\u02bc\u015f\2"+
		"\u1692\u1695\7\u019c\2\2\u1693\u1694\6\u0158\u00a1\2\u1694\u1696\5\u02b4"+
		"\u015b\2\u1695\u1693\3\2\2\2\u1695\u1696\3\2\2\2\u1696\u16b5\3\2\2\2\u1697"+
		"\u1698\7\u0285\2\2\u1698\u169a\7\u019b\2\2\u1699\u169b\7\u01e6\2\2\u169a"+
		"\u1699\3\2\2\2\u169a\u169b\3\2\2\2\u169b\u169c\3\2\2\2\u169c\u169d\5\u02bc"+
		"\u015f\2\u169d\u16a0\7\u019c\2\2\u169e\u169f\6\u0158\u00a2\2\u169f\u16a1"+
		"\5\u02b4\u015b\2\u16a0\u169e\3\2\2\2\u16a0\u16a1\3\2\2\2\u16a1\u16b5\3"+
		"\2\2\2\u16a2\u16a3\7\u0203\2\2\u16a3\u16a5\7\u019b\2\2\u16a4\u16a6\7\u01e6"+
		"\2\2\u16a5\u16a4\3\2\2\2\u16a5\u16a6\3\2\2\2\u16a6\u16a7\3\2\2\2\u16a7"+
		"\u16a9\5\u02ec\u0177\2\u16a8\u16aa\5\u014a\u00a6\2\u16a9\u16a8\3\2\2\2"+
		"\u16a9\u16aa\3\2\2\2\u16aa\u16ad\3\2\2\2\u16ab\u16ac\7\u026a\2\2\u16ac"+
		"\u16ae\5\u047c\u023f\2\u16ad\u16ab\3\2\2\2\u16ad\u16ae\3\2\2\2\u16ae\u16af"+
		"\3\2\2\2\u16af\u16b2\7\u019c\2\2\u16b0\u16b1\6\u0158\u00a3\2\u16b1\u16b3"+
		"\5\u02b4\u015b\2\u16b2\u16b0\3\2\2\2\u16b2\u16b3\3\2\2\2\u16b3\u16b5\3"+
		"\2\2\2\u16b4\u1631\3\2\2\2\u16b4\u163c\3\2\2\2\u16b4\u1644\3\2\2\2\u16b4"+
		"\u1646\3\2\2\2\u16b4\u1651\3\2\2\2\u16b4\u1661\3\2\2\2\u16b4\u166c\3\2"+
		"\2\2\u16b4\u1677\3\2\2\2\u16b4\u167f\3\2\2\2\u16b4\u1687\3\2\2\2\u16b4"+
		"\u168f\3\2\2\2\u16b4\u1697\3\2\2\2\u16b4\u16a2\3\2\2\2\u16b5\u02af\3\2"+
		"\2\2\u16b6\u16b7\7\u02c0\2\2\u16b7\u16b8\7\u019b\2\2\u16b8\u16b9\5\u02ec"+
		"\u0177\2\u16b9\u16ba\7\u019c\2\2\u16ba\u02b1\3\2\2\2\u16bb\u16bc\tX\2"+
		"\2\u16bc\u16bd\5\u049c\u024f\2\u16bd\u16be\5\u02b4\u015b\2\u16be\u16e6"+
		"\3\2\2\2\u16bf\u16c0\7\u02d0\2\2\u16c0\u16c1\5\u02fc\u017f\2\u16c1\u16c2"+
		"\5\u02b4\u015b\2\u16c2\u16e6\3\2\2\2\u16c3\u16c4\tY\2\2\u16c4\u16c5\7"+
		"\u019b\2\2\u16c5\u16c7\5\u029c\u014f\2\u16c6\u16c8\5\u02b6\u015c\2\u16c7"+
		"\u16c6\3\2\2\2\u16c7\u16c8\3\2\2\2\u16c8\u16c9\3\2\2\2\u16c9\u16cb\7\u019c"+
		"\2\2\u16ca\u16cc\5\u02b8\u015d\2\u16cb\u16ca\3\2\2\2\u16cb\u16cc\3\2\2"+
		"\2\u16cc\u16cd\3\2\2\2\u16cd\u16ce\5\u02b4\u015b\2\u16ce\u16e6\3\2\2\2"+
		"\u16cf\u16d0\tZ\2\2\u16d0\u16d2\5\u02fa\u017e\2\u16d1\u16d3\5\u02b8\u015d"+
		"\2\u16d2\u16d1\3\2\2\2\u16d2\u16d3\3\2\2\2\u16d3\u16d4\3\2\2\2\u16d4\u16d5"+
		"\5\u02b4\u015b\2\u16d5\u16e6\3\2\2\2\u16d6\u16d7\7\u02cf\2\2\u16d7\u16d8"+
		"\7\u019b\2\2\u16d8\u16d9\5\u029c\u014f\2\u16d9\u16da\7\u0198\2\2\u16da"+
		"\u16db\5\u02a8\u0155\2\u16db\u16de\7\u019c\2\2\u16dc\u16dd\7\u01fd\2\2"+
		"\u16dd\u16df\t[\2\2\u16de\u16dc\3\2\2\2\u16de\u16df\3\2\2\2\u16df\u16e1"+
		"\3\2\2\2\u16e0\u16e2\5\u02b8\u015d\2\u16e1\u16e0\3\2\2\2\u16e1\u16e2\3"+
		"\2\2\2\u16e2\u16e3\3\2\2\2\u16e3\u16e4\5\u02b4\u015b\2\u16e4\u16e6\3\2"+
		"\2\2\u16e5\u16bb\3\2\2\2\u16e5\u16bf\3\2\2\2\u16e5\u16c3\3\2\2\2\u16e5"+
		"\u16cf\3\2\2\2\u16e5\u16d6\3\2\2\2\u16e6\u02b3\3\2\2\2\u16e7\u16ea\7\u02d3"+
		"\2\2\u16e8\u16eb\5\u045c\u022f\2\u16e9\u16eb\5\u0130\u0099\2\u16ea\u16e8"+
		"\3\2\2\2\u16ea\u16e9\3\2\2\2\u16eb\u02b5\3\2\2\2\u16ec\u16ef\7\u0198\2"+
		"\2\u16ed\u16f0\5\u0470\u0239\2\u16ee\u16f0\7\u01a6\2\2\u16ef\u16ed\3\2"+
		"\2\2\u16ef\u16ee\3\2\2\2\u16f0\u16f3\3\2\2\2\u16f1\u16f2\7\u0198\2\2\u16f2"+
		"\u16f4\5\u029c\u014f\2\u16f3\u16f1\3\2\2\2\u16f3\u16f4\3\2\2\2\u16f4\u02b7"+
		"\3\2\2\2\u16f5\u16f6\t\\\2\2\u16f6\u16f7\7\u02d1\2\2\u16f7\u02b9\3\2\2"+
		"\2\u16f8\u16f9\7\u02bb\2\2\u16f9\u16fa\7\u019b\2\2\u16fa\u16fb\5\u02bc"+
		"\u015f\2\u16fb\u16fd\7\u019c\2\2\u16fc\u16fe\5\u02b4\u015b\2\u16fd\u16fc"+
		"\3\2\2\2\u16fd\u16fe\3\2\2\2\u16fe\u1709\3\2\2\2\u16ff\u1700\7\u02ba\2"+
		"\2\u1700\u1701\7\u019b\2\2\u1701\u1702\5\u02bc\u015f\2\u1702\u1703\7\u0198"+
		"\2\2\u1703\u1704\5\u02bc\u015f\2\u1704\u1706\7\u019c\2\2\u1705\u1707\5"+
		"\u02b4\u015b\2\u1706\u1705\3\2\2\2\u1706\u1707\3\2\2\2\u1707\u1709\3\2"+
		"\2\2\u1708\u16f8\3\2\2\2\u1708\u16ff\3\2\2\2\u1709\u02bb\3\2\2\2\u170a"+
		"\u170c\7\u01ad\2\2\u170b\u170a\3\2\2\2\u170b\u170c\3\2\2\2\u170c\u170d"+
		"\3\2\2\2\u170d\u170e\5\u029c\u014f\2\u170e\u02bd\3\2\2\2\u170f\u1715\5"+
		"\u02c0\u0161\2\u1710\u1711\7\u019b\2\2\u1711\u1712\5\u02c0\u0161\2\u1712"+
		"\u1713\7\u019c\2\2\u1713\u1715\3\2\2\2\u1714\u170f\3\2\2\2\u1714\u1710"+
		"\3\2\2\2\u1715\u02bf\3\2\2\2\u1716\u171b\5\u0468\u0235\2\u1717\u1718\7"+
		"\u0198\2\2\u1718\u171a\5\u0468\u0235\2\u1719\u1717\3\2\2\2\u171a\u171d"+
		"\3\2\2\2\u171b\u1719\3\2\2\2\u171b\u171c\3\2\2\2\u171c\u02c1\3\2\2\2\u171d"+
		"\u171b\3\2\2\2\u171e\u171f\7\u0214\2\2\u171f\u1720\7M\2\2\u1720\u172e"+
		"\7\u00e0\2\2\u1721\u1722\7\u0214\2\2\u1722\u1723\7\u023b\2\2\u1723\u1724"+
		"\7\34\2\2\u1724\u1728\7\u00e0\2\2\u1725\u1726\7\u02ac\2\2\u1726\u1727"+
		"\7\u010d\2\2\u1727\u1729\7\u008a\2\2\u1728\u1725\3\2\2\2\u1728\u1729\3"+
		"\2\2\2\u1729\u172e\3\2\2\2\u172a\u172b\7\u02ac\2\2\u172b\u172c\7\u010d"+
		"\2\2\u172c\u172e\7\u008a\2\2\u172d\u171e\3\2\2\2\u172d\u1721\3\2\2\2\u172d"+
		"\u172a\3\2\2\2\u172e\u02c3\3\2\2\2\u172f\u1730\7\u01c4\2\2\u1730\u1731"+
		"\7\u019b\2\2\u1731\u1734\5\u02ec\u0177\2\u1732\u1733\7\u029c\2\2\u1733"+
		"\u1735\5\u03a0\u01d1\2\u1734\u1732\3\2\2\2\u1734\u1735\3\2\2\2\u1735\u1736"+
		"\3\2\2\2\u1736\u1737\7\u019c\2\2\u1737\u1841\3\2\2\2\u1738\u173a\7\u01d2"+
		"\2\2\u1739\u173b\5\u049c\u024f\2\u173a\u1739\3\2\2\2\u173a\u173b\3\2\2"+
		"\2\u173b\u1841\3\2\2\2\u173c\u173d\7r\2\2\u173d\u1841\5\u02fa\u017e\2"+
		"\u173e\u173f\7s\2\2\u173f\u1841\5\u02fa\u017e\2\u1740\u1741\7\u00a0\2"+
		"\2\u1741\u1841\5\u02fa\u017e\2\u1742\u1743\7\u0210\2\2\u1743\u1744\7\u019b"+
		"\2\2\u1744\u1745\5\u029c\u014f\2\u1745\u1746\7\u0198\2\2\u1746\u1747\5"+
		"\u029c\u014f\2\u1747\u1748\7\u0198\2\2\u1748\u1749\5\u029c\u014f\2\u1749"+
		"\u174a\7\u0198\2\2\u174a\u174b\5\u029c\u014f\2\u174b\u174c\7\u019c\2\2"+
		"\u174c\u1841\3\2\2\2\u174d\u174e\7\u0211\2\2\u174e\u174f\7\u019b\2\2\u174f"+
		"\u1752\5\u029c\u014f\2\u1750\u1751\7\u0198\2\2\u1751\u1753\5\u029c\u014f"+
		"\2\u1752\u1750\3\2\2\2\u1753\u1754\3\2\2\2\u1754\u1752\3\2\2\2\u1754\u1755"+
		"\3\2\2\2\u1755\u1756\3\2\2\2\u1756\u1757\7\u019c\2\2\u1757\u1841\3\2\2"+
		"\2\u1758\u1759\7\u021f\2\2\u1759\u175a\7\u019b\2\2\u175a\u175b\5\u029c"+
		"\u014f\2\u175b\u175c\7\u0198\2\2\u175c\u175d\5\u029c\u014f\2\u175d\u175e"+
		"\7\u019c\2\2\u175e\u1841\3\2\2\2\u175f\u1760\7\u00dd\2\2\u1760\u1841\5"+
		"\u02fa\u017e\2\u1761\u1762\7\u00e1\2\2\u1762\u1841\5\u02fa\u017e\2\u1763"+
		"\u1764\7\u0266\2\2\u1764\u1765\7\u019b\2\2\u1765\u1766\5\u029c\u014f\2"+
		"\u1766\u1767\7\u0198\2\2\u1767\u1768\5\u029c\u014f\2\u1768\u1769\7\u019c"+
		"\2\2\u1769\u1841\3\2\2\2\u176a\u176b\7\u0133\2\2\u176b\u1841\5\u02fa\u017e"+
		"\2\u176c\u176d\7\u0162\2\2\u176d\u1841\5\u02fa\u017e\2\u176e\u176f\7\u015f"+
		"\2\2\u176f\u1770\7\u019b\2\2\u1770\u1773\5\u029c\u014f\2\u1771\u1772\7"+
		"\u0198\2\2\u1772\u1774\5\u029c\u014f\2\u1773\u1771\3\2\2\2\u1773\u1774"+
		"\3\2\2\2\u1774\u1775\3\2\2\2\u1775\u1776\7\u019c\2\2\u1776\u1841\3\2\2"+
		"\2\u1777\u1841\5\u02d2\u016a\2\u1778\u1779\7\u016e\2\2\u1779\u1841\5\u049c"+
		"\u024f\2\u177a\u177b\7\u02a1\2\2\u177b\u1841\5\u02fa\u017e\2\u177c\u177d"+
		"\7\u017b\2\2\u177d\u1841\5\u02fa\u017e\2\u177e\u177f\t]\2\2\u177f\u1780"+
		"\7\u019b\2\2\u1780\u1781\5\u029c\u014f\2\u1781\u1787\7\u0198\2\2\u1782"+
		"\u1788\5\u029c\u014f\2\u1783\u1784\7\u0211\2\2\u1784\u1785\5\u029c\u014f"+
		"\2\u1785\u1786\5\u02f4\u017b\2\u1786\u1788\3\2\2\2\u1787\u1782\3\2\2\2"+
		"\u1787\u1783\3\2\2\2\u1788\u1789\3\2\2\2\u1789\u178a\7\u019c\2\2\u178a"+
		"\u1841\3\2\2\2\u178b\u178d\7\u01cf\2\2\u178c\u178e\5\u049c\u024f\2\u178d"+
		"\u178c\3\2\2\2\u178d\u178e\3\2\2\2\u178e\u1841\3\2\2\2\u178f\u1791\7\u01d4"+
		"\2\2\u1790\u1792\5\u02c8\u0165\2\u1791\u1790\3\2\2\2\u1791\u1792\3\2\2"+
		"\2\u1792\u1841\3\2\2\2\u1793\u1794\t^\2\2\u1794\u1795\7\u019b\2\2\u1795"+
		"\u1796\5\u029c\u014f\2\u1796\u1797\7\u0198\2\2\u1797\u1798\7\u0211\2\2"+
		"\u1798\u1799\5\u029c\u014f\2\u1799\u179a\5\u02f4\u017b\2\u179a\u179b\7"+
		"\u019c\2\2\u179b\u1841\3\2\2\2\u179c\u179d\7\u01f6\2\2\u179d\u179e\7\u019b"+
		"\2\2\u179e\u179f\5\u02f4\u017b\2\u179f\u17a0\7\u01fd\2\2\u17a0\u17a1\5"+
		"\u029c\u014f\2\u17a1\u17a2\7\u019c\2\2\u17a2\u1841\3\2\2\2\u17a3\u17a4"+
		"\7\u009b\2\2\u17a4\u17a5\7\u019b\2\2\u17a5\u17a6\5\u02d0\u0169\2\u17a6"+
		"\u17a7\7\u0198\2\2\u17a7\u17a8\5\u029c\u014f\2\u17a8\u17a9\7\u019c\2\2"+
		"\u17a9\u1841\3\2\2\2\u17aa\u17ac\7\u0240\2\2\u17ab\u17ad\5\u02c8\u0165"+
		"\2\u17ac\u17ab\3\2\2\2\u17ac\u17ad\3\2\2\2\u17ad\u1841\3\2\2\2\u17ae\u17af"+
		"\7\u0251\2\2\u17af\u17b0\7\u019b\2\2\u17b0\u17b1\5\u02a6\u0154\2\u17b1"+
		"\u17b2\7\u0214\2\2\u17b2\u17b3\5\u029c\u014f\2\u17b3\u17b4\7\u019c\2\2"+
		"\u17b4\u1841\3\2\2\2\u17b5\u1841\5\u02d4\u016b\2\u17b6\u17b8\7\u0286\2"+
		"\2\u17b7\u17b9\5\u02c8\u0165\2\u17b8\u17b7\3\2\2\2\u17b8\u17b9\3\2\2\2"+
		"\u17b9\u1841\3\2\2\2\u17ba\u17bb\t_\2\2\u17bb\u17bc\7\u019b\2\2\u17bc"+
		"\u17bd\5\u02f6\u017c\2\u17bd\u17be\7\u0198\2\2\u17be\u17bf\5\u029c\u014f"+
		"\2\u17bf\u17c0\7\u0198\2\2\u17c0\u17c1\5\u029c\u014f\2\u17c1\u17c2\7\u019c"+
		"\2\2\u17c2\u1841\3\2\2\2\u17c3\u17c5\7\u029d\2\2\u17c4\u17c6\5\u049c\u024f"+
		"\2\u17c5\u17c4\3\2\2\2\u17c5\u17c6\3\2\2\2\u17c6\u1841\3\2\2\2\u17c7\u17c9"+
		"\7\u029f\2\2\u17c8\u17ca\5\u02c8\u0165\2\u17c9\u17c8\3\2\2\2\u17c9\u17ca"+
		"\3\2\2\2\u17ca\u1841\3\2\2\2\u17cb\u17cd\7\u029e\2\2\u17cc\u17ce\5\u02c8"+
		"\u0165\2\u17cd\u17cc\3\2\2\2\u17cd\u17ce\3\2\2\2\u17ce\u1841\3\2\2\2\u17cf"+
		"\u17d0\7\4\2\2\u17d0\u1841\5\u02fa\u017e\2\u17d1\u17d2\7\n\2\2\u17d2\u1841"+
		"\5\u02fa\u017e\2\u17d3\u17d4\7W\2\2\u17d4\u1841\5\u02f8\u017d\2\u17d5"+
		"\u17d6\7Y\2\2\u17d6\u1841\5\u02fa\u017e\2\u17d7\u17d8\7\u01d5\2\2\u17d8"+
		"\u1841\5\u049c\u024f\2\u17d9\u17da\7\u0209\2\2\u17da\u17db\7\u019b\2\2"+
		"\u17db\u17dc\5\u029c\u014f\2\u17dc\u17dd\7\u0198\2\2\u17dd\u17de\5\u029c"+
		"\u014f\2\u17de\u17df\7\u0198\2\2\u17df\u17e0\5\u029c\u014f\2\u17e0\u17e1"+
		"\7\u019c\2\2\u17e1\u1841\3\2\2\2\u17e2\u17e3\7\26\2\2\u17e3\u17e4\7\u019b"+
		"\2\2\u17e4\u17e5\5\u029c\u014f\2\u17e5\u17e6\7\u0198\2\2\u17e6\u17e9\5"+
		"\u029c\u014f\2\u17e7\u17e8\7\u0198\2\2\u17e8\u17ea\5\u029c\u014f\2\u17e9"+
		"\u17e7\3\2\2\2\u17e9\u17ea\3\2\2\2\u17ea\u17eb\3\2\2\2\u17eb\u17ec\7\u019c"+
		"\2\2\u17ec\u1841\3\2\2\2\u17ed\u17ee\7\u00db\2\2\u17ee\u1841\5\u02fa\u017e"+
		"\2\u17ef\u17f0\7\u023a\2\2\u17f0\u17f1\7\u019b\2\2\u17f1\u17f2\5\u029c"+
		"\u014f\2\u17f2\u17f3\7\u0198\2\2\u17f3\u17f4\5\u029c\u014f\2\u17f4\u17f5"+
		"\7\u019c\2\2\u17f5\u1841\3\2\2\2\u17f6\u17f7\6\u0163\u00a4\2\u17f7\u17f8"+
		"\7\u00f5\2\2\u17f8\u17f9\7\u019b\2\2\u17f9\u17fa\5\u0480\u0241\2\u17fa"+
		"\u17fb\7\u019c\2\2\u17fb\u1841\3\2\2\2\u17fc\u17fd\6\u0163\u00a5\2\u17fd"+
		"\u17fe\7\u00fd\2\2\u17fe\u1841\5\u02fa\u017e\2\u17ff\u1800\7\u010c\2\2"+
		"\u1800\u1841\5\u02fa\u017e\2\u1801\u1802\7\u025f\2\2\u1802\u1803\7\u019b"+
		"\2\2\u1803\u1804\5\u029c\u014f\2\u1804\u1805\7\u0198\2\2\u1805\u1806\5"+
		"\u029c\u014f\2\u1806\u1807\7\u019c\2\2\u1807\u1841\3\2\2\2\u1808\u1809"+
		"\7\u0260\2\2\u1809\u180a\7\u019b\2\2\u180a\u180b\5\u029c\u014f\2\u180b"+
		"\u180c\7\u0198\2\2\u180c\u180d\5\u029c\u014f\2\u180d\u180e\7\u0198\2\2"+
		"\u180e\u180f\5\u029c\u014f\2\u180f\u1810\7\u019c\2\2\u1810\u1841\3\2\2"+
		"\2\u1811\u1812\7\u0128\2\2\u1812\u1841\5\u02fa\u017e\2\u1813\u1814\7\u012d"+
		"\2\2\u1814\u1841\5\u049c\u024f\2\u1815\u1816\7\64\2\2\u1816\u1817\7\u019b"+
		"\2\2\u1817\u1818\5\u029c\u014f\2\u1818\u1819\7\u0198\2\2\u1819\u181a\5"+
		"\u029c\u014f\2\u181a\u181b\7\u019c\2\2\u181b\u1841\3\2\2\2\u181c\u181d"+
		"\7\u0175\2\2\u181d\u181e\7\u019b\2\2\u181e\u1821\5\u029c\u014f\2\u181f"+
		"\u1820\7\u0198\2\2\u1820\u1822\5\u029c\u014f\2\u1821\u181f\3\2\2\2\u1821"+
		"\u1822\3\2\2\2\u1822\u1823\3\2\2\2\u1823\u1824\7\u019c\2\2\u1824\u1841"+
		"\3\2\2\2\u1825\u1826\7\u0177\2\2\u1826\u1827\7\u019b\2\2\u1827\u183b\5"+
		"\u029c\u014f\2\u1828\u1829\7\u01b1\2\2\u1829\u182a\7\u01c4\2\2\u182a\u182c"+
		"\5\u039c\u01cf\2\u182b\u1828\3\2\2\2\u182b\u182c\3\2\2\2\u182c\u182f\3"+
		"\2\2\2\u182d\u182e\6\u0163\u00a6\2\u182e\u1830\5\u02cc\u0167\2\u182f\u182d"+
		"\3\2\2\2\u182f\u1830\3\2\2\2\u1830\u183c\3\2\2\2\u1831\u1832\7\u01b1\2"+
		"\2\u1832\u1833\7\u01b7\2\2\u1833\u183c\5\u039c\u01cf\2\u1834\u1835\7\u0198"+
		"\2\2\u1835\u1836\5\u046c\u0237\2\u1836\u1837\7\u0198\2\2\u1837\u1838\5"+
		"\u046c\u0237\2\u1838\u1839\7\u0198\2\2\u1839\u183a\5\u046c\u0237\2\u183a"+
		"\u183c\3\2\2\2\u183b\u182b\3\2\2\2\u183b\u1831\3\2\2\2\u183b\u1834\3\2"+
		"\2\2\u183c\u183d\3\2\2\2\u183d\u183e\7\u019c\2\2\u183e\u1841\3\2\2\2\u183f"+
		"\u1841\5\u02c6\u0164\2\u1840\u172f\3\2\2\2\u1840\u1738\3\2\2\2\u1840\u173c"+
		"\3\2\2\2\u1840\u173e\3\2\2\2\u1840\u1740\3\2\2\2\u1840\u1742\3\2\2\2\u1840"+
		"\u174d\3\2\2\2\u1840\u1758\3\2\2\2\u1840\u175f\3\2\2\2\u1840\u1761\3\2"+
		"\2\2\u1840\u1763\3\2\2\2\u1840\u176a\3\2\2\2\u1840\u176c\3\2\2\2\u1840"+
		"\u176e\3\2\2\2\u1840\u1777\3\2\2\2\u1840\u1778\3\2\2\2\u1840\u177a\3\2"+
		"\2\2\u1840\u177c\3\2\2\2\u1840\u177e\3\2\2\2\u1840\u178b\3\2\2\2\u1840"+
		"\u178f\3\2\2\2\u1840\u1793\3\2\2\2\u1840\u179c\3\2\2\2\u1840\u17a3\3\2"+
		"\2\2\u1840\u17aa\3\2\2\2\u1840\u17ae\3\2\2\2\u1840\u17b5\3\2\2\2\u1840"+
		"\u17b6\3\2\2\2\u1840\u17ba\3\2\2\2\u1840\u17c3\3\2\2\2\u1840\u17c7\3\2"+
		"\2\2\u1840\u17cb\3\2\2\2\u1840\u17cf\3\2\2\2\u1840\u17d1\3\2\2\2\u1840"+
		"\u17d3\3\2\2\2\u1840\u17d5\3\2\2\2\u1840\u17d7\3\2\2\2\u1840\u17d9\3\2"+
		"\2\2\u1840\u17e2\3\2\2\2\u1840\u17ed\3\2\2\2\u1840\u17ef\3\2\2\2\u1840"+
		"\u17f6\3\2\2\2\u1840\u17fc\3\2\2\2\u1840\u17ff\3\2\2\2\u1840\u1801\3\2"+
		"\2\2\u1840\u1808\3\2\2\2\u1840\u1811\3\2\2\2\u1840\u1813\3\2\2\2\u1840"+
		"\u1815\3\2\2\2\u1840\u181c\3\2\2\2\u1840\u1825\3\2\2\2\u1840\u183f\3\2"+
		"\2\2\u1841\u02c5\3\2\2\2\u1842\u1843\6\u0164\u00a7\2\u1843\u1844\7\17"+
		"\2\2\u1844\u1845\7\u019b\2\2\u1845\u1846\5\u029c\u014f\2\u1846\u1847\7"+
		"\u0198\2\2\u1847\u1848\5\u029c\u014f\2\u1848\u1849\7\u019c\2\2\u1849\u1862"+
		"\3\2\2\2\u184a\u184b\7\u009a\2\2\u184b\u184d\7\u019b\2\2\u184c\u184e\5"+
		"\u02ec\u0177\2\u184d\u184c\3\2\2\2\u184d\u184e\3\2\2\2\u184e\u184f\3\2"+
		"\2\2\u184f\u1862\7\u019c\2\2\u1850\u1851\7\u00b4\2\2\u1851\u1862\5\u02f8"+
		"\u017d\2\u1852\u1853\7\u00e2\2\2\u1853\u1862\5\u02f8\u017d\2\u1854\u1855"+
		"\7\u00e3\2\2\u1855\u1862\5\u02f8\u017d\2\u1856\u1857\7\u00e4\2\2\u1857"+
		"\u1862\5\u02f8\u017d\2\u1858\u1859\7\u0102\2\2\u1859\u185a\7\u019b\2\2"+
		"\u185a\u185b\5\u029c\u014f\2\u185b\u185c\7\u0198\2\2\u185c\u185d\5\u029c"+
		"\u014f\2\u185d\u185e\7\u019c\2\2\u185e\u1862\3\2\2\2\u185f\u1860\7\u0103"+
		"\2\2\u1860\u1862\5\u02f8\u017d\2\u1861\u1842\3\2\2\2\u1861\u184a\3\2\2"+
		"\2\u1861\u1850\3\2\2\2\u1861\u1852\3\2\2\2\u1861\u1854\3\2\2\2\u1861\u1856"+
		"\3\2\2\2\u1861\u1858\3\2\2\2\u1861\u185f\3\2\2\2\u1862\u02c7\3\2\2\2\u1863"+
		"\u1865\7\u019b\2\2\u1864\u1866\5\u02ca\u0166\2\u1865\u1864\3\2\2\2\u1865"+
		"\u1866\3\2\2\2\u1866\u1867\3\2\2\2\u1867\u1868\7\u019c\2\2\u1868\u02c9"+
		"\3\2\2\2\u1869\u186a\6\u0166\u00a8\2\u186a\u186b\7\u017e\2\2\u186b\u02cb"+
		"\3\2\2\2\u186c\u1879\7\u00b3\2\2\u186d\u186e\5\u046e\u0238\2\u186e\u186f"+
		"\7\u018a\2\2\u186f\u1870\5\u046e\u0238\2\u1870\u187a\3\2\2\2\u1871\u1876"+
		"\5\u02ce\u0168\2\u1872\u1873\7\u0198\2\2\u1873\u1875\5\u02ce\u0168\2\u1874"+
		"\u1872\3\2\2\2\u1875\u1878\3\2\2\2\u1876\u1874\3\2\2\2\u1876\u1877\3\2"+
		"\2\2\u1877\u187a\3\2\2\2\u1878\u1876\3\2\2\2\u1879\u186d\3\2\2\2\u1879"+
		"\u1871\3\2\2\2\u187a\u02cd\3\2\2\2\u187b\u1881\5\u046e\u0238\2\u187c\u187e"+
		"\t#\2\2\u187d\u187f\7\u0128\2\2\u187e\u187d\3\2\2\2\u187e\u187f\3\2\2"+
		"\2\u187f\u1882\3\2\2\2\u1880\u1882\7\u0128\2\2\u1881\u187c\3\2\2\2\u1881"+
		"\u1880\3\2\2\2\u1881\u1882\3\2\2\2\u1882\u02cf\3\2\2\2\u1883\u1884\t`"+
		"\2\2\u1884\u02d1\3\2\2\2\u1885\u1886\7\u0292\2\2\u1886\u189e\7\u019b\2"+
		"\2\u1887\u188a\5\u029c\u014f\2\u1888\u1889\7\u01fd\2\2\u1889\u188b\5\u029c"+
		"\u014f\2\u188a\u1888\3\2\2\2\u188a\u188b\3\2\2\2\u188b\u189f\3\2\2\2\u188c"+
		"\u188e\7\u021d\2\2\u188d\u188f\5\u029c\u014f\2\u188e\u188d\3\2\2\2\u188e"+
		"\u188f\3\2\2\2\u188f\u1890\3\2\2\2\u1890\u1891\7\u01fd\2\2\u1891\u189f"+
		"\5\u029c\u014f\2\u1892\u1894\7\u0290\2\2\u1893\u1895\5\u029c\u014f\2\u1894"+
		"\u1893\3\2\2\2\u1894\u1895\3\2\2\2\u1895\u1896\3\2\2\2\u1896\u1897\7\u01fd"+
		"\2\2\u1897\u189f\5\u029c\u014f\2\u1898\u189a\7\u01bd\2\2\u1899\u189b\5"+
		"\u029c\u014f\2\u189a\u1899\3\2\2\2\u189a\u189b\3\2\2\2\u189b\u189c\3\2"+
		"\2\2\u189c\u189d\7\u01fd\2\2\u189d\u189f\5\u029c\u014f\2\u189e\u1887\3"+
		"\2\2\2\u189e\u188c\3\2\2\2\u189e\u1892\3\2\2\2\u189e\u1898\3\2\2\2\u189f"+
		"\u18a0\3\2\2\2\u18a0\u18a1\7\u019c\2\2\u18a1\u02d3\3\2\2\2\u18a2\u18a3"+
		"\7\u0284\2\2\u18a3\u18a4\7\u019b\2\2\u18a4\u18b1\5\u029c\u014f\2\u18a5"+
		"\u18a6\7\u0198\2\2\u18a6\u18a9\5\u029c\u014f\2\u18a7\u18a8\7\u0198\2\2"+
		"\u18a8\u18aa\5\u029c\u014f\2\u18a9\u18a7\3\2\2\2\u18a9\u18aa\3\2\2\2\u18aa"+
		"\u18b2\3\2\2\2\u18ab\u18ac\7\u01fd\2\2\u18ac\u18af\5\u029c\u014f\2\u18ad"+
		"\u18ae\7\u01fc\2\2\u18ae\u18b0\5\u029c\u014f\2\u18af\u18ad\3\2\2\2\u18af"+
		"\u18b0\3\2\2\2\u18b0\u18b2\3\2\2\2\u18b1\u18a5\3\2\2\2\u18b1\u18ab\3\2"+
		"\2\2\u18b2\u18b3\3\2\2\2\u18b3\u18b4\7\u019c\2\2\u18b4\u02d5\3\2\2\2\u18b5"+
		"\u18b6\5\u045e\u0230\2\u18b6\u18b8\7\u019b\2\2\u18b7\u18b9\5\u02d8\u016d"+
		"\2\u18b8\u18b7\3\2\2\2\u18b8\u18b9\3\2\2\2\u18b9\u18ba\3\2\2\2\u18ba\u18bb"+
		"\7\u019c\2\2\u18bb\u18c4\3\2\2\2\u18bc\u18bd\5\u0466\u0234\2\u18bd\u18bf"+
		"\7\u019b\2\2\u18be\u18c0\5\u02ec\u0177\2\u18bf\u18be\3\2\2\2\u18bf\u18c0"+
		"\3\2\2\2\u18c0\u18c1\3\2\2\2\u18c1\u18c2\7\u019c\2\2\u18c2\u18c4\3\2\2"+
		"\2\u18c3\u18b5\3\2\2\2\u18c3\u18bc\3\2\2\2\u18c4\u02d7\3\2\2\2\u18c5\u18ca"+
		"\5\u02da\u016e\2\u18c6\u18c7\7\u0198\2\2\u18c7\u18c9\5\u02da\u016e\2\u18c8"+
		"\u18c6\3\2\2\2\u18c9\u18cc\3\2\2\2\u18ca\u18c8\3\2\2\2\u18ca\u18cb\3\2"+
		"\2\2\u18cb\u02d9\3\2\2\2\u18cc\u18ca\3\2\2\2\u18cd\u18cf\5\u029c\u014f"+
		"\2\u18ce\u18d0\5\u015e\u00b0\2\u18cf\u18ce\3\2\2\2\u18cf\u18d0\3\2\2\2"+
		"\u18d0\u02db\3\2\2\2\u18d1\u18d4\5\u02de\u0170\2\u18d2\u18d3\7\u0182\2"+
		"\2\u18d3\u18d5\5\u029c\u014f\2\u18d4\u18d2\3\2\2\2\u18d4\u18d5\3\2\2\2"+
		"\u18d5\u18d8\3\2\2\2\u18d6\u18d8\5\u02e0\u0171\2\u18d7\u18d1\3\2\2\2\u18d7"+
		"\u18d6\3\2\2\2\u18d8\u02dd\3\2\2\2\u18d9\u18da\7\u01a2\2\2\u18da\u18dd"+
		"\5\u0494\u024b\2\u18db\u18dd\7\u01a3\2\2\u18dc\u18d9\3\2\2\2\u18dc\u18db"+
		"\3\2\2\2\u18dd\u02df\3\2\2\2\u18de\u18e0\7\u01a4\2\2\u18df\u18e1\5\u04a2"+
		"\u0252\2\u18e0\u18df\3\2\2\2\u18e0\u18e1\3\2\2\2\u18e1\u18e2\3\2\2\2\u18e2"+
		"\u18e4\5\u0494\u024b\2\u18e3\u18e5\5\u046a\u0236\2\u18e4\u18e3\3\2\2\2"+
		"\u18e4\u18e5\3\2\2\2\u18e5\u02e1\3\2\2\2\u18e6\u18e7\6\u0172\u00a9\2\u18e7"+
		"\u18e9\5\u0460\u0231\2\u18e8\u18ea\5\u046a\u0236\2\u18e9\u18e8\3\2\2\2"+
		"\u18e9\u18ea\3\2\2\2\u18ea\u18f1\3\2\2\2\u18eb\u18ec\6\u0172\u00aa\2\u18ec"+
		"\u18ee\5\u0496\u024c\2\u18ed\u18ef\5\u046a\u0236\2\u18ee\u18ed\3\2\2\2"+
		"\u18ee\u18ef\3\2\2\2\u18ef\u18f1\3\2\2\2\u18f0\u18e6\3\2\2\2\u18f0\u18eb"+
		"\3\2\2\2\u18f1\u18f5\3\2\2\2\u18f2\u18f3\7\u01e0\2\2\u18f3\u18f5\5\u046a"+
		"\u0236\2\u18f4\u18f0\3\2\2\2\u18f4\u18f2\3\2\2\2\u18f5\u02e3\3\2\2\2\u18f6"+
		"\u18f7\7\u02a9\2\2\u18f7\u18f8\5\u029c\u014f\2\u18f8\u02e5\3\2\2\2\u18f9"+
		"\u18fa\7\u028b\2\2\u18fa\u18fb\5\u029c\u014f\2\u18fb\u02e7\3\2\2\2\u18fc"+
		"\u18fd\7\u01ec\2\2\u18fd\u18fe\5\u029c\u014f\2\u18fe\u02e9\3\2\2\2\u18ff"+
		"\u1901\7\u01b7\2\2\u1900\u1902\5\u0392\u01ca\2\u1901\u1900\3\2\2\2\u1901"+
		"\u1902\3\2\2\2\u1902\u192d\3\2\2\2\u1903\u1905\7\u01c4\2\2\u1904\u1906"+
		"\5\u0392\u01ca\2\u1905\u1904\3\2\2\2\u1905\u1906\3\2\2\2\u1906\u1908\3"+
		"\2\2\2\u1907\u1909\5\u0396\u01cc\2\u1908\u1907\3\2\2\2\u1908\u1909\3\2"+
		"\2\2\u1909\u192d\3\2\2\2\u190a\u190c\5\u038e\u01c8\2\u190b\u190d\5\u0392"+
		"\u01ca\2\u190c\u190b\3\2\2\2\u190c\u190d\3\2\2\2\u190d\u192d\3\2\2\2\u190e"+
		"\u1910\7.\2\2\u190f\u1911\7\u0213\2\2\u1910\u190f\3\2\2\2\u1910\u1911"+
		"\3\2\2\2\u1911\u192d\3\2\2\2\u1912\u1914\7\u0298\2\2\u1913\u1915\7\u0213"+
		"\2\2\u1914\u1913\3\2\2\2\u1914\u1915\3\2\2\2\u1915\u192d\3\2\2\2\u1916"+
		"\u192d\7r\2\2\u1917\u1919\7\u0162\2\2\u1918\u191a\5\u039e\u01d0\2\u1919"+
		"\u1918\3\2\2\2\u1919\u191a\3\2\2\2\u191a\u192d\3\2\2\2\u191b\u191d\7q"+
		"\2\2\u191c\u191e\5\u039e\u01d0\2\u191d\u191c\3\2\2\2\u191d\u191e\3\2\2"+
		"\2\u191e\u192d\3\2\2\2\u191f\u1921\7\u01de\2\2\u1920\u1922\5\u048e\u0248"+
		"\2\u1921\u1920\3\2\2\2\u1921\u1922\3\2\2\2\u1922\u192d\3\2\2\2\u1923\u1924"+
		"\6\u0176\u00ab\2\u1924\u192d\7\u00ae\2\2\u1925\u1926\6\u0176\u00ac\2\u1926"+
		"\u192d\5\u0390\u01c9\2\u1927\u1928\6\u0176\u00ad\2\u1928\u192a\7\u01f9"+
		"\2\2\u1929\u192b\5\u0490\u0249\2\u192a\u1929\3\2\2\2\u192a\u192b\3\2\2"+
		"\2\u192b\u192d\3\2\2\2\u192c\u18ff\3\2\2\2\u192c\u1903\3\2\2\2\u192c\u190a"+
		"\3\2\2\2\u192c\u190e\3\2\2\2\u192c\u1912\3\2\2\2\u192c\u1916\3\2\2\2\u192c"+
		"\u1917\3\2\2\2\u192c\u191b\3\2\2\2\u192c\u191f\3\2\2\2\u192c\u1923\3\2"+
		"\2\2\u192c\u1925\3\2\2\2\u192c\u1927\3\2\2\2\u192d\u02eb\3\2\2\2\u192e"+
		"\u1933\5\u029c\u014f\2\u192f\u1930\7\u0198\2\2\u1930\u1932\5\u029c\u014f"+
		"\2\u1931\u192f\3\2\2\2\u1932\u1935\3\2\2\2\u1933\u1931\3\2\2\2\u1933\u1934"+
		"\3\2\2\2\u1934\u02ed\3\2\2\2\u1935\u1933\3\2\2\2\u1936\u1937\7\u01c4\2"+
		"\2\u1937\u193a\7\u026d\2\2\u1938\u193a\7\n\2\2\u1939\u1936\3\2\2\2\u1939"+
		"\u1938\3\2\2\2\u193a\u02ef\3\2\2\2\u193b\u193c\ta\2\2\u193c\u02f1\3\2"+
		"\2\2\u193d\u193e\tb\2\2\u193e\u02f3\3\2\2\2\u193f\u1942\5\u02f6\u017c"+
		"\2\u1940\u1942\tc\2\2\u1941\u193f\3\2\2\2\u1941\u1940\3\2\2\2\u1942\u02f5"+
		"\3\2\2\2\u1943\u1944\td\2\2\u1944\u02f7\3\2\2\2\u1945\u1946\7\u019b\2"+
		"\2\u1946\u1947\5\u02ec\u0177\2\u1947\u1948\7\u019c\2\2\u1948\u02f9\3\2"+
		"\2\2\u1949\u194a\7\u019b\2\2\u194a\u194b\5\u029c\u014f\2\u194b\u194c\7"+
		"\u019c\2\2\u194c\u02fb\3\2\2\2\u194d\u194e\7\u019b\2\2\u194e\u194f\5\u02a8"+
		"\u0155\2\u194f\u1950\7\u019c\2\2\u1950\u02fd\3\2\2\2\u1951\u1956\5\u0300"+
		"\u0181\2\u1952\u1953\7\u0198\2\2\u1953\u1955\5\u0300\u0181\2\u1954\u1952"+
		"\3\2\2\2\u1955\u1958\3\2\2\2\u1956\u1954\3\2\2\2\u1956\u1957\3\2\2\2\u1957"+
		"\u02ff\3\2\2\2\u1958\u1956\3\2\2\2\u1959\u195b\5\u029c\u014f\2\u195a\u195c"+
		"\5\u014c\u00a7\2\u195b\u195a\3\2\2\2\u195b\u195c\3\2\2\2\u195c\u0301\3"+
		"\2\2\2\u195d\u1962\5\u0304\u0183\2\u195e\u195f\7\u0198\2\2\u195f\u1961"+
		"\5\u0304\u0183\2\u1960\u195e\3\2\2\2\u1961\u1964\3\2\2\2\u1962\u1960\3"+
		"\2\2\2\u1962\u1963\3\2\2\2\u1963\u0303\3\2\2\2\u1964\u1962\3\2\2\2\u1965"+
		"\u1966\5\u029c\u014f\2\u1966\u0305\3\2\2\2\u1967\u1968\6\u0184\u00ae\2"+
		"\u1968\u1969\7\u01fc\2\2\u1969\u196a\7S\2\2\u196a\u196b\5\u0482\u0242"+
		"\2\u196b\u0307\3\2\2\2\u196c\u197a\5\4\3\2\u196d\u197a\5\u030a\u0186\2"+
		"\u196e\u197a\5\u030c\u0187\2\u196f\u197a\5\u0314\u018b\2\u1970\u197a\5"+
		"\u0318\u018d\2\u1971\u197a\5\u031a\u018e\2\u1972\u197a\5\u0320\u0191\2"+
		"\u1973\u197a\5\u0322\u0192\2\u1974\u197a\5\u033e\u01a0\2\u1975\u197a\5"+
		"\u033c\u019f\2\u1976\u197a\5\u0350\u01a9\2\u1977\u197a\5\u0354\u01ab\2"+
		"\u1978\u197a\5\u0352\u01aa\2\u1979\u196c\3\2\2\2\u1979\u196d\3\2\2\2\u1979"+
		"\u196e\3\2\2\2\u1979\u196f\3\2\2\2\u1979\u1970\3\2\2\2\u1979\u1971\3\2"+
		"\2\2\u1979\u1972\3\2\2\2\u1979\u1973\3\2\2\2\u1979\u1974\3\2\2\2\u1979"+
		"\u1975\3\2\2\2\u1979\u1976\3\2\2\2\u1979\u1977\3\2\2\2\u1979\u1978\3\2"+
		"\2\2\u197a\u0309\3\2\2\2\u197b\u197c\7\u0264\2\2\u197c\u197d\5\u029c\u014f"+
		"\2\u197d\u030b\3\2\2\2\u197e\u197f\7\u0209\2\2\u197f\u1980\5\u030e\u0188"+
		"\2\u1980\u1981\7\22\2\2\u1981\u1982\7\u0209\2\2\u1982\u030d\3\2\2\2\u1983"+
		"\u1984\5\u029c\u014f\2\u1984\u1989\5\u0310\u0189\2\u1985\u1986\7\u01ed"+
		"\2\2\u1986\u198a\5\u030e\u0188\2\u1987\u1988\7\u01ec\2\2\u1988\u198a\5"+
		"\u0312\u018a\2\u1989\u1985\3\2\2\2\u1989\u1987\3\2\2\2\u1989\u198a\3\2"+
		"\2\2\u198a\u030f\3\2\2\2\u198b\u198c\7\u028b\2\2\u198c\u198d\5\u0312\u018a"+
		"\2\u198d\u0311\3\2\2\2\u198e\u198f\5\u0308\u0185\2\u198f\u1990\7\u0199"+
		"\2\2\u1990\u1992\3\2\2\2\u1991\u198e\3\2\2\2\u1992\u1993\3\2\2\2\u1993"+
		"\u1991\3\2\2\2\u1993\u1994\3\2\2\2\u1994\u0313\3\2\2\2\u1995\u1997\7\u01c1"+
		"\2\2\u1996\u1998\5\u029c\u014f\2\u1997\u1996\3\2\2\2\u1997\u1998\3\2\2"+
		"\2\u1998\u199c\3\2\2\2\u1999\u199a\5\u02e4\u0173\2\u199a\u199b\5\u0310"+
		"\u0189\2\u199b\u199d\3\2\2\2\u199c\u1999\3\2\2\2\u199d\u199e\3\2\2\2\u199e"+
		"\u199c\3\2\2\2\u199e\u199f\3\2\2\2\u199f\u19a1\3\2\2\2\u19a0\u19a2\5\u0316"+
		"\u018c\2\u19a1\u19a0\3\2\2\2\u19a1\u19a2\3\2\2\2\u19a2\u19a3\3\2\2\2\u19a3"+
		"\u19a4\7\22\2\2\u19a4\u19a5\7\u01c1\2\2\u19a5\u0315\3\2\2\2\u19a6\u19a7"+
		"\7\u01ec\2\2\u19a7\u19a8\5\u0312\u018a\2\u19a8\u0317\3\2\2\2\u19a9\u19aa"+
		"\5\u031c\u018f\2\u19aa\u19ac\5\u031e\u0190\2\u19ab\u19ad\5\u0450\u0229"+
		"\2\u19ac\u19ab\3\2\2\2\u19ac\u19ad\3\2\2\2\u19ad\u0319\3\2\2\2\u19ae\u19af"+
		"\5\u031e\u0190\2\u19af\u031b\3\2\2\2\u19b0\u19b1\5\u044e\u0228\2\u19b1"+
		"\u19b2\7\u019a\2\2\u19b2\u031d\3\2\2\2\u19b3\u19b5\7\7\2\2\u19b4\u19b6"+
		"\5\u032a\u0196\2\u19b5\u19b4\3\2\2\2\u19b5\u19b6\3\2\2\2\u19b6\u19b8\3"+
		"\2\2\2\u19b7\u19b9\5\u0312\u018a\2\u19b8\u19b7\3\2\2\2\u19b8\u19b9\3\2"+
		"\2\2\u19b9\u19ba\3\2\2\2\u19ba\u19bb\7\22\2\2\u19bb\u031f\3\2\2\2\u19bc"+
		"\u19bd\5\u031c\u018f\2\u19bd\u19bf\5\u0322\u0192\2\u19be\u19c0\5\u0450"+
		"\u0229\2\u19bf\u19be\3\2\2\2\u19bf\u19c0\3\2\2\2\u19c0\u0321\3\2\2\2\u19c1"+
		"\u19c5\5\u0324\u0193\2\u19c2\u19c5\5\u0326\u0194\2\u19c3\u19c5\5\u0328"+
		"\u0195\2\u19c4\u19c1\3\2\2\2\u19c4\u19c2\3\2\2\2\u19c4\u19c3\3\2\2\2\u19c5"+
		"\u0323\3\2\2\2\u19c6\u19c7\7\u022b\2\2\u19c7\u19c8\5\u0312\u018a\2\u19c8"+
		"\u19c9\7\22\2\2\u19c9\u19ca\7\u022b\2\2\u19ca\u0325\3\2\2\2\u19cb\u19cc"+
		"\7\u02ab\2\2\u19cc\u19cd\5\u029c\u014f\2\u19cd\u19ce\7\21\2\2\u19ce\u19cf"+
		"\5\u0312\u018a\2\u19cf\u19d0\7\22\2\2\u19d0\u19d1\7\u02ab\2\2\u19d1\u0327"+
		"\3\2\2\2\u19d2\u19d3\7\u025f\2\2\u19d3\u19d4\5\u0312\u018a\2\u19d4\u19d5"+
		"\7\u016c\2\2\u19d5\u19d6\5\u029c\u014f\2\u19d6\u19d7\7\22\2\2\u19d7\u19d8"+
		"\7\u025f\2\2\u19d8\u0329\3\2\2\2\u19d9\u19da\5\u032c\u0197\2\u19da\u19db"+
		"\7\u0199\2\2\u19db\u19dd\3\2\2\2\u19dc\u19d9\3\2\2\2\u19dd\u19de\3\2\2"+
		"\2\u19de\u19dc\3\2\2\2\u19de\u19df\3\2\2\2\u19df\u032b\3\2\2\2\u19e0\u19e5"+
		"\5\u032e\u0198\2\u19e1\u19e5\5\u0330\u0199\2\u19e2\u19e5\5\u0336\u019c"+
		"\2\u19e3\u19e5\5\u033a\u019e\2\u19e4\u19e0\3\2\2\2\u19e4\u19e1\3\2\2\2"+
		"\u19e4\u19e2\3\2\2\2\u19e4\u19e3\3\2\2\2\u19e5\u032d\3\2\2\2\u19e6\u19e7"+
		"\7\u01df\2\2\u19e7\u19e8\5\u0462\u0232\2\u19e8\u19ea\5\u038c\u01c7\2\u19e9"+
		"\u19eb\5\u03d2\u01ea\2\u19ea\u19e9\3\2\2\2\u19ea\u19eb\3\2\2\2\u19eb\u19ee"+
		"\3\2\2\2\u19ec\u19ed\7\u01e0\2\2\u19ed\u19ef\5\u029c\u014f\2\u19ee\u19ec"+
		"\3\2\2\2\u19ee\u19ef\3\2\2\2\u19ef\u032f\3\2\2\2\u19f0\u19f1\7\u01df\2"+
		"\2\u19f1\u19f2\5\u0460\u0231\2\u19f2\u19f3\7\u01c8\2\2\u19f3\u19f4\7\u01fc"+
		"\2\2\u19f4\u19f5\5\u0332\u019a\2\u19f5\u0331\3\2\2\2\u19f6\u19f9\5\u046c"+
		"\u0237\2\u19f7\u19f9\5\u0334\u019b\2\u19f8\u19f6\3\2\2\2\u19f8\u19f7\3"+
		"\2\2\2\u19f9\u0333\3\2\2\2\u19fa\u19fc\7\u0275\2\2\u19fb\u19fd\7\u0172"+
		"\2\2\u19fc\u19fb\3\2\2\2\u19fc\u19fd\3\2\2\2\u19fd\u19fe\3\2\2\2\u19fe"+
		"\u19ff\5\u0480\u0241\2\u19ff\u0335\3\2\2\2\u1a00\u1a01\7\u01df\2\2\u1a01"+
		"\u1a02\te\2\2\u1a02\u1a03\7\30\2\2\u1a03\u1a04\7\u01fc\2\2\u1a04\u1a09"+
		"\5\u0338\u019d\2\u1a05\u1a06\7\u0198\2\2\u1a06\u1a08\5\u0338\u019d\2\u1a07"+
		"\u1a05\3\2\2\2\u1a08\u1a0b\3\2\2\2\u1a09\u1a07\3\2\2\2\u1a09\u1a0a\3\2"+
		"\2\2\u1a0a\u1a0c\3\2\2\2\u1a0b\u1a09\3\2\2\2\u1a0c\u1a0d\5\u0308\u0185"+
		"\2\u1a0d\u0337\3\2\2\2\u1a0e\u1a16\5\u0332\u019a\2\u1a0f\u1a16\5\u0460"+
		"\u0231\2\u1a10\u1a16\7\u0276\2\2\u1a11\u1a12\5\u02f0\u0179\2\u1a12\u1a13"+
		"\7\u0090\2\2\u1a13\u1a16\3\2\2\2\u1a14\u1a16\7\u0274\2\2\u1a15\u1a0e\3"+
		"\2\2\2\u1a15\u1a0f\3\2\2\2\u1a15\u1a10\3\2\2\2\u1a15\u1a11\3\2\2\2\u1a15"+
		"\u1a14\3\2\2\2\u1a16\u0339\3\2\2\2\u1a17\u1a18\7\u01df\2\2\u1a18\u1a19"+
		"\5\u0460\u0231\2\u1a19\u1a1a\7\u01d3\2\2\u1a1a\u1a1b\7\u01fc\2\2\u1a1b"+
		"\u1a1c\5\u010e\u0088\2\u1a1c\u033b\3\2\2\2\u1a1d\u1a1e\7\u0218\2\2\u1a1e"+
		"\u1a1f\5\u0450\u0229\2\u1a1f\u033d\3\2\2\2\u1a20\u1a21\7\u021e\2\2\u1a21"+
		"\u1a22\5\u0450\u0229\2\u1a22\u033f\3\2\2\2\u1a23\u1a27\7\u01ff\2\2\u1a24"+
		"\u1a28\7m\2\2\u1a25\u1a26\6\u01a1\u00af\2\u1a26\u1a28\7\u0144\2\2\u1a27"+
		"\u1a24\3\2\2\2\u1a27\u1a25\3\2\2\2\u1a27\u1a28\3\2\2\2\u1a28\u1a29\3\2"+
		"\2\2\u1a29\u1a3c\7x\2\2\u1a2a\u1a2f\5\u0344\u01a3\2\u1a2b\u1a2c\7\u0198"+
		"\2\2\u1a2c\u1a2e\5\u0344\u01a3\2\u1a2d\u1a2b\3\2\2\2\u1a2e\u1a31\3\2\2"+
		"\2\u1a2f\u1a2d\3\2\2\2\u1a2f\u1a30\3\2\2\2\u1a30\u1a3d\3\2\2\2\u1a31\u1a2f"+
		"\3\2\2\2\u1a32\u1a33\7\u01c8\2\2\u1a33\u1a34\5\u0342\u01a2\2\u1a34\u1a39"+
		"\5\u0346\u01a4\2\u1a35\u1a36\7\u0198\2\2\u1a36\u1a38\5\u0346\u01a4\2\u1a37"+
		"\u1a35\3\2\2\2\u1a38\u1a3b\3\2\2\2\u1a39\u1a37\3\2\2\2\u1a39\u1a3a\3\2"+
		"\2\2\u1a3a\u1a3d\3\2\2\2\u1a3b\u1a39\3\2\2\2\u1a3c\u1a2a\3\2\2\2\u1a3c"+
		"\u1a32\3\2\2\2\u1a3d\u0341\3\2\2\2\u1a3e\u1a42\5\u0474\u023b\2\u1a3f\u1a42"+
		"\5\u02dc\u016f\2\u1a40\u1a42\5\u0466\u0234\2\u1a41\u1a3e\3\2\2\2\u1a41"+
		"\u1a3f\3\2\2\2\u1a41\u1a40\3\2\2\2\u1a42\u0343\3\2\2\2\u1a43\u1a46\5\u02dc"+
		"\u016f\2\u1a44\u1a46\5\u0460\u0231\2\u1a45\u1a43\3\2\2\2\u1a45\u1a44\3"+
		"\2\2\2\u1a46\u1a47\3\2\2\2\u1a47\u1a48\7\u0181\2\2\u1a48\u1a49\tf\2\2"+
		"\u1a49\u0345\3\2\2\2\u1a4a\u1a4d\5\u02dc\u016f\2\u1a4b\u1a4d\5\u0460\u0231"+
		"\2\u1a4c\u1a4a\3\2\2\2\u1a4c\u1a4b\3\2\2\2\u1a4d\u1a4e\3\2\2\2\u1a4e\u1a51"+
		"\7\u0181\2\2\u1a4f\u1a52\5\u0348\u01a5\2\u1a50\u1a52\7\u0126\2\2\u1a51"+
		"\u1a4f\3\2\2\2\u1a51\u1a50\3\2\2\2\u1a52\u0347\3\2\2\2\u1a53\u1a54\tg"+
		"\2\2\u1a54\u0349\3\2\2\2\u1a55\u1a58\7\u0270\2\2\u1a56\u1a59\5\u0460\u0231"+
		"\2\u1a57\u1a59\5\u0334\u019b\2\u1a58\u1a56\3\2\2\2\u1a58\u1a57\3\2\2\2"+
		"\u1a59\u1a63\3\2\2\2\u1a5a\u1a5b\7\u026d\2\2\u1a5b\u1a60\5\u034e\u01a8"+
		"\2\u1a5c\u1a5d\7\u0198\2\2\u1a5d\u1a5f\5\u034e\u01a8\2\u1a5e\u1a5c\3\2"+
		"\2\2\u1a5f\u1a62\3\2\2\2\u1a60\u1a5e\3\2\2\2\u1a60\u1a61\3\2\2\2\u1a61"+
		"\u1a64\3\2\2\2\u1a62\u1a60\3\2\2\2\u1a63\u1a5a\3\2\2\2\u1a63\u1a64\3\2"+
		"\2\2\u1a64\u034b\3\2\2\2\u1a65\u1a6b\7\u0262\2\2\u1a66\u1a68\7\u0275\2"+
		"\2\u1a67\u1a69\7\u0172\2\2\u1a68\u1a67\3\2\2\2\u1a68\u1a69\3\2\2\2\u1a69"+
		"\u1a6a\3\2\2\2\u1a6a\u1a6c\5\u0494\u024b\2\u1a6b\u1a66\3\2\2\2\u1a6b\u1a6c"+
		"\3\2\2\2\u1a6c\u1a76\3\2\2\2\u1a6d\u1a6e\7\u026d\2\2\u1a6e\u1a73\5\u034e"+
		"\u01a8\2\u1a6f\u1a70\7\u0198\2\2\u1a70\u1a72\5\u034e\u01a8\2\u1a71\u1a6f"+
		"\3\2\2\2\u1a72\u1a75\3\2\2\2\u1a73\u1a71\3\2\2\2\u1a73\u1a74\3\2\2\2\u1a74"+
		"\u1a77\3\2\2\2\u1a75\u1a73\3\2\2\2\u1a76\u1a6d\3\2\2\2\u1a76\u1a77\3\2"+
		"\2\2\u1a77\u034d\3\2\2\2\u1a78\u1a79\5\u0348\u01a5\2\u1a79\u1a7a\7\u0181"+
		"\2\2\u1a7a\u1a7b\5\u0342\u01a2\2\u1a7b\u034f\3\2\2\2\u1a7c\u1a7d\7\36"+
		"\2\2\u1a7d\u1a7e\5\u0460\u0231\2\u1a7e\u0351\3\2\2\2\u1a7f\u1a80\7\f\2"+
		"\2\u1a80\u1a81\5\u0460\u0231\2\u1a81\u0353\3\2\2\2\u1a82\u1a87\7\u01f8"+
		"\2\2\u1a83\u1a85\7\u00ed\2\2\u1a84\u1a83\3\2\2\2\u1a84\u1a85\3\2\2\2\u1a85"+
		"\u1a86\3\2\2\2\u1a86\u1a88\7\u01fd\2\2\u1a87\u1a84\3\2\2\2\u1a87\u1a88"+
		"\3\2\2\2\u1a88\u1a89\3\2\2\2\u1a89\u1a8a\5\u0460\u0231\2\u1a8a\u1a8b\7"+
		"\u0212\2\2\u1a8b\u1a8c\5\u0462\u0232\2\u1a8c\u0355\3\2\2\2\u1a8d\u1a8e"+
		"\7C\2\2\u1a8e\u1a9b\5\u029c\u014f\2\u1a8f\u1a90\7\u0089\2\2\u1a90\u1a91"+
		"\5\u029c\u014f\2\u1a91\u1a94\5\u02f4\u017b\2\u1a92\u1a93\7\u0145\2\2\u1a93"+
		"\u1a95\5\u029c\u014f\2\u1a94\u1a92\3\2\2\2\u1a94\u1a95\3\2\2\2\u1a95\u1a98"+
		"\3\2\2\2\u1a96\u1a97\7\u0080\2\2\u1a97\u1a99\5\u029c\u014f\2\u1a98\u1a96"+
		"\3\2\2\2\u1a98\u1a99\3\2\2\2\u1a99\u1a9b\3\2\2\2\u1a9a\u1a8d\3\2\2\2\u1a9a"+
		"\u1a8f\3\2\2\2\u1a9b\u0357\3\2\2\2\u1a9c\u1a9d\5\u0408\u0205\2\u1a9d\u1a9f"+
		"\5\u0364\u01b3\2\u1a9e\u1aa0\5\u035a\u01ae\2\u1a9f\u1a9e\3\2\2\2\u1a9f"+
		"\u1aa0\3\2\2\2\u1aa0\u0359\3\2\2\2\u1aa1\u1aa2\6\u01ae\u00b0\2\u1aa2\u1aa5"+
		"\5\u035c\u01af\2\u1aa3\u1aa5\5\u036e\u01b8\2\u1aa4\u1aa1\3\2\2\2\u1aa4"+
		"\u1aa3\3\2\2\2\u1aa5\u035b\3\2\2\2\u1aa6\u1aa7\7\u01c5\2\2\u1aa7\u1aa8"+
		"\5\u02fa\u017e\2\u1aa8\u035d\3\2\2\2\u1aa9\u1aab\7\u023f\2\2\u1aaa\u1aa9"+
		"\3\2\2\2\u1aaa\u1aab\3\2\2\2\u1aab\u1aac\3\2\2\2\u1aac\u1aad\7\u02fa\2"+
		"\2\u1aad\u035f\3\2\2\2\u1aae\u1ab0\t(\2\2\u1aaf\u1ab1\5p9\2\u1ab0\u1aaf"+
		"\3\2\2\2\u1ab0\u1ab1\3\2\2\2\u1ab1\u1ab2\3\2\2\2\u1ab2\u1ab6\5\u037a\u01be"+
		"\2\u1ab3\u1ab5\5\u037e\u01c0\2\u1ab4\u1ab3\3\2\2\2\u1ab5\u1ab8\3\2\2\2"+
		"\u1ab6\u1ab4\3\2\2\2\u1ab6\u1ab7\3\2\2\2\u1ab7\u1afa\3\2\2\2\u1ab8\u1ab6"+
		"\3\2\2\2\u1ab9\u1abb\7\u01fe\2\2\u1aba\u1abc\5\u0190\u00c9\2\u1abb\u1aba"+
		"\3\2\2\2\u1abb\u1abc\3\2\2\2\u1abc\u1abe\3\2\2\2\u1abd\u1abf\5\u0412\u020a"+
		"\2\u1abe\u1abd\3\2\2\2\u1abe\u1abf\3\2\2\2\u1abf\u1ac0\3\2\2\2\u1ac0\u1ac4"+
		"\5\u037a\u01be\2\u1ac1\u1ac3\5\u0386\u01c4\2\u1ac2\u1ac1\3\2\2\2\u1ac3"+
		"\u1ac6\3\2\2\2\u1ac4\u1ac2\3\2\2\2\u1ac4\u1ac5\3\2\2\2\u1ac5\u1afa\3\2"+
		"\2\2\u1ac6\u1ac4\3\2\2\2\u1ac7\u1ac9\7\u0272\2\2\u1ac8\u1aca\5\u0190\u00c9"+
		"\2\u1ac9\u1ac8\3\2\2\2\u1ac9\u1aca\3\2\2\2\u1aca\u1acc\3\2\2\2\u1acb\u1acd"+
		"\5\u0412\u020a\2\u1acc\u1acb\3\2\2\2\u1acc\u1acd\3\2\2\2\u1acd\u1ace\3"+
		"\2\2\2\u1ace\u1ad2\5\u037a\u01be\2\u1acf\u1ad1\5\u0388\u01c5\2\u1ad0\u1acf"+
		"\3\2\2\2\u1ad1\u1ad4\3\2\2\2\u1ad2\u1ad0\3\2\2\2\u1ad2\u1ad3\3\2\2\2\u1ad3"+
		"\u1afa\3\2\2\2\u1ad4\u1ad2\3\2\2\2\u1ad5\u1ad7\5\u0362\u01b2\2\u1ad6\u1ad5"+
		"\3\2\2\2\u1ad6\u1ad7\3\2\2\2\u1ad7\u1af7\3\2\2\2\u1ad8\u1ad9\7\u0253\2"+
		"\2\u1ad9\u1adf\7\u021b\2\2\u1ada\u1adc\7\u0296\2\2\u1adb\u1add\5\u0190"+
		"\u00c9\2\u1adc\u1adb\3\2\2\2\u1adc\u1add\3\2\2\2\u1add\u1adf\3\2\2\2\u1ade"+
		"\u1ad8\3";
	private static final String _serializedATNSegment3 =
		"\2\2\2\u1ade\u1ada\3\2\2\2\u1adf\u1ae1\3\2\2\2\u1ae0\u1ae2\5p9\2\u1ae1"+
		"\u1ae0\3\2\2\2\u1ae1\u1ae2\3\2\2\2\u1ae2\u1ae3\3\2\2\2\u1ae3\u1ae7\5\u037a"+
		"\u01be\2\u1ae4\u1ae6\5\u037e\u01c0\2\u1ae5\u1ae4\3\2\2\2\u1ae6\u1ae9\3"+
		"\2\2\2\u1ae7\u1ae5\3\2\2\2\u1ae7\u1ae8\3\2\2\2\u1ae8\u1af8\3\2\2\2\u1ae9"+
		"\u1ae7\3\2\2\2\u1aea\u1aeb\7\u01fb\2\2\u1aeb\u1aed\7\u021b\2\2\u1aec\u1aee"+
		"\5\u0412\u020a\2\u1aed\u1aec\3\2\2\2\u1aed\u1aee\3\2\2\2\u1aee\u1aef\3"+
		"\2\2\2\u1aef\u1af0\5\u0372\u01ba\2\u1af0\u1af1\5\u036e\u01b8\2\u1af1\u1af8"+
		"\3\2\2\2\u1af2\u1af5\5\u035c\u01af\2\u1af3\u1af4\6\u01b1\u00b1\2\u1af4"+
		"\u1af6\5\u035e\u01b0\2\u1af5\u1af3\3\2\2\2\u1af5\u1af6\3\2\2\2\u1af6\u1af8"+
		"\3\2\2\2\u1af7\u1ade\3\2\2\2\u1af7\u1aea\3\2\2\2\u1af7\u1af2\3\2\2\2\u1af8"+
		"\u1afa\3\2\2\2\u1af9\u1aae\3\2\2\2\u1af9\u1ab9\3\2\2\2\u1af9\u1ac7\3\2"+
		"\2\2\u1af9\u1ad6\3\2\2\2\u1afa\u0361\3\2\2\2\u1afb\u1afd\7\u01c9\2\2\u1afc"+
		"\u1afe\5\u0460\u0231\2\u1afd\u1afc\3\2\2\2\u1afd\u1afe\3\2\2\2\u1afe\u0363"+
		"\3\2\2\2\u1aff\u1b23\5\u038c\u01c7\2\u1b00\u1b02\5\u0366\u01b4\2\u1b01"+
		"\u1b00\3\2\2\2\u1b02\u1b05\3\2\2\2\u1b03\u1b01\3\2\2\2\u1b03\u1b04\3\2"+
		"\2\2\u1b04\u1b24\3\2\2\2\u1b05\u1b03\3\2\2\2\u1b06\u1b08\6\u01b3\u00b2"+
		"\2\u1b07\u1b09\5\u03d2\u01ea\2\u1b08\u1b07\3\2\2\2\u1b08\u1b09\3\2\2\2"+
		"\u1b09\u1b0c\3\2\2\2\u1b0a\u1b0b\7\u0200\2\2\u1b0b\u1b0d\7\5\2\2\u1b0c"+
		"\u1b0a\3\2\2\2\u1b0c\u1b0d\3\2\2\2\u1b0d\u1b0e\3\2\2\2\u1b0e\u1b0f\7\u01b1"+
		"\2\2\u1b0f\u1b11\5\u02fa\u017e\2\u1b10\u1b12\th\2\2\u1b11\u1b10\3\2\2"+
		"\2\u1b11\u1b12\3\2\2\2\u1b12\u1b21\3\2\2\2\u1b13\u1b17\6\u01b3\u00b3\2"+
		"\u1b14\u1b16\5\u036c\u01b7\2\u1b15\u1b14\3\2\2\2\u1b16\u1b19\3\2\2\2\u1b17"+
		"\u1b15\3\2\2\2\u1b17\u1b18\3\2\2\2\u1b18\u1b22\3\2\2\2\u1b19\u1b17\3\2"+
		"\2\2\u1b1a\u1b1e\6\u01b3\u00b4\2\u1b1b\u1b1d\5\u0366\u01b4\2\u1b1c\u1b1b"+
		"\3\2\2\2\u1b1d\u1b20\3\2\2\2\u1b1e\u1b1c\3\2\2\2\u1b1e\u1b1f\3\2\2\2\u1b1f"+
		"\u1b22\3\2\2\2\u1b20\u1b1e\3\2\2\2\u1b21\u1b13\3\2\2\2\u1b21\u1b1a\3\2"+
		"\2\2\u1b22\u1b24\3\2\2\2\u1b23\u1b03\3\2\2\2\u1b23\u1b06\3\2\2\2\u1b24"+
		"\u0365\3\2\2\2\u1b25\u1b27\7\u023f\2\2\u1b26\u1b25\3\2\2\2\u1b26\u1b27"+
		"\3\2\2\2\u1b27\u1b28\3\2\2\2\u1b28\u1b5a\5\u048a\u0246\2\u1b29\u1b2a\6"+
		"\u01b4\u00b5\2\u1b2a\u1b2b\7\u023f\2\2\u1b2b\u1b5a\7\u02f0\2\2\u1b2c\u1b34"+
		"\7\u01e0\2\2\u1b2d\u1b35\5\u0476\u023c\2\u1b2e\u1b30\7\u0240\2\2\u1b2f"+
		"\u1b31\5\u02c8\u0165\2\u1b30\u1b2f\3\2\2\2\u1b30\u1b31\3\2\2\2\u1b31\u1b35"+
		"\3\2\2\2\u1b32\u1b33\6\u01b4\u00b6\2\u1b33\u1b35\5\u02fa\u017e\2\u1b34"+
		"\u1b2d\3\2\2\2\u1b34\u1b2e\3\2\2\2\u1b34\u1b32\3\2\2\2\u1b35\u1b5a\3\2"+
		"\2\2\u1b36\u1b37\7\u0245\2\2\u1b37\u1b38\7\u0299\2\2\u1b38\u1b3a\7\u0240"+
		"\2\2\u1b39\u1b3b\5\u02c8\u0165\2\u1b3a\u1b39\3\2\2\2\u1b3a\u1b3b\3\2\2"+
		"\2\u1b3b\u1b5a\3\2\2\2\u1b3c\u1b5a\7E\2\2\u1b3d\u1b3e\7\u0134\2\2\u1b3e"+
		"\u1b3f\7\u01e0\2\2\u1b3f\u1b5a\7\u0172\2\2\u1b40\u1b42\7\u0253\2\2\u1b41"+
		"\u1b40\3\2\2\2\u1b41\u1b42\3\2\2\2\u1b42\u1b43\3\2\2\2\u1b43\u1b5a\7\u021b"+
		"\2\2\u1b44\u1b46\7\u0296\2\2\u1b45\u1b47\7\u021b\2\2\u1b46\u1b45\3\2\2"+
		"\2\u1b46\u1b47\3\2\2\2\u1b47\u1b5a\3\2\2\2\u1b48\u1b49\7\r\2\2\u1b49\u1b5a"+
		"\5\u0480\u0241\2\u1b4a\u1b5a\5\u03d2\u01ea\2\u1b4b\u1b4c\7[\2\2\u1b4c"+
		"\u1b5a\5\u0368\u01b5\2\u1b4d\u1b4e\7\u014a\2\2\u1b4e\u1b5a\5\u036a\u01b6"+
		"\2\u1b4f\u1b50\6\u01b4\u00b7\2\u1b50\u1b51\7\u02e3\2\2\u1b51\u1b5a\5\u0472"+
		"\u023a\2\u1b52\u1b54\6\u01b4\u00b8\2\u1b53\u1b55\5\u0362\u01b2\2\u1b54"+
		"\u1b53\3\2\2\2\u1b54\u1b55\3\2\2\2\u1b55\u1b56\3\2\2\2\u1b56\u1b5a\5\u035c"+
		"\u01af\2\u1b57\u1b58\6\u01b4\u00b9\2\u1b58\u1b5a\5\u035e\u01b0\2\u1b59"+
		"\u1b26\3\2\2\2\u1b59\u1b29\3\2\2\2\u1b59\u1b2c\3\2\2\2\u1b59\u1b36\3\2"+
		"\2\2\u1b59\u1b3c\3\2\2\2\u1b59\u1b3d\3\2\2\2\u1b59\u1b41\3\2\2\2\u1b59"+
		"\u1b44\3\2\2\2\u1b59\u1b48\3\2\2\2\u1b59\u1b4a\3\2\2\2\u1b59\u1b4b\3\2"+
		"\2\2\u1b59\u1b4d\3\2\2\2\u1b59\u1b4f\3\2\2\2\u1b59\u1b52\3\2\2\2\u1b59"+
		"\u1b57\3\2\2\2\u1b5a\u0367\3\2\2\2\u1b5b\u1b5c\ti\2\2\u1b5c\u0369\3\2"+
		"\2\2\u1b5d\u1b5e\tj\2\2\u1b5e\u036b\3\2\2\2\u1b5f\u1b61\7\u0296\2\2\u1b60"+
		"\u1b62\7\u021b\2\2\u1b61\u1b60\3\2\2\2\u1b61\u1b62\3\2\2\2\u1b62\u1b6e"+
		"\3\2\2\2\u1b63\u1b64\7\r\2\2\u1b64\u1b6e\5\u047c\u023f\2\u1b65\u1b67\5"+
		"\u02f0\u0179\2\u1b66\u1b65\3\2\2\2\u1b66\u1b67\3\2\2\2\u1b67\u1b68\3\2"+
		"\2\2\u1b68\u1b6e\7\u0242\2\2\u1b69\u1b6b\7\u0253\2\2\u1b6a\u1b69\3\2\2"+
		"\2\u1b6a\u1b6b\3\2\2\2\u1b6b\u1b6c\3\2\2\2\u1b6c\u1b6e\7\u021b\2\2\u1b6d"+
		"\u1b5f\3\2\2\2\u1b6d\u1b63\3\2\2\2\u1b6d\u1b66\3\2\2\2\u1b6d\u1b6a\3\2"+
		"\2\2\u1b6e\u036d\3\2\2\2\u1b6f\u1b70\7\u025b\2\2\u1b70\u1b72\5\u0446\u0224"+
		"\2\u1b71\u1b73\5\u0464\u0233\2\u1b72\u1b71\3\2\2\2\u1b72\u1b73\3\2\2\2"+
		"\u1b73\u1b76\3\2\2\2\u1b74\u1b75\7\u022f\2\2\u1b75\u1b77\tk\2\2\u1b76"+
		"\u1b74\3\2\2\2\u1b76\u1b77\3\2\2\2\u1b77\u1b88\3\2\2\2\u1b78\u1b79\7\u0245"+
		"\2\2\u1b79\u1b7a\7\u0299\2\2\u1b7a\u1b7e\5\u0370\u01b9\2\u1b7b\u1b7c\7"+
		"\u0245\2\2\u1b7c\u1b7d\7\u01e2\2\2\u1b7d\u1b7f\5\u0370\u01b9\2\u1b7e\u1b7b"+
		"\3\2\2\2\u1b7e\u1b7f\3\2\2\2\u1b7f\u1b89\3\2\2\2\u1b80\u1b81\7\u0245\2"+
		"\2\u1b81\u1b82\7\u01e2\2\2\u1b82\u1b86\5\u0370\u01b9\2\u1b83\u1b84\7\u0245"+
		"\2\2\u1b84\u1b85\7\u0299\2\2\u1b85\u1b87\5\u0370\u01b9\2\u1b86\u1b83\3"+
		"\2\2\2\u1b86\u1b87\3\2\2\2\u1b87\u1b89\3\2\2\2\u1b88\u1b78\3\2\2\2\u1b88"+
		"\u1b80\3\2\2\2\u1b88\u1b89\3\2\2\2\u1b89\u036f\3\2\2\2\u1b8a\u1b90\t\4"+
		"\2\2\u1b8b\u1b8c\7\u026d\2\2\u1b8c\u1b90\5\u048a\u0246\2\u1b8d\u1b8e\7"+
		"\35\2\2\u1b8e\u1b90\7;\2\2\u1b8f\u1b8a\3\2\2\2\u1b8f\u1b8b\3\2\2\2\u1b8f"+
		"\u1b8d\3\2\2\2\u1b90\u0371\3\2\2\2\u1b91\u1b92\7\u019b\2\2\u1b92\u1b97"+
		"\5\u0374\u01bb\2\u1b93\u1b94\7\u0198\2\2\u1b94\u1b96\5\u0374\u01bb\2\u1b95"+
		"\u1b93\3\2\2\2\u1b96\u1b99\3\2\2\2\u1b97\u1b95\3\2\2\2\u1b97\u1b98\3\2"+
		"\2\2\u1b98\u1b9a\3\2\2\2\u1b99\u1b97\3\2\2\2\u1b9a\u1b9b\7\u019c\2\2\u1b9b"+
		"\u0373\3\2\2\2\u1b9c\u1b9e\5\u0460\u0231\2\u1b9d\u1b9f\5\u0392\u01ca\2"+
		"\u1b9e\u1b9d\3\2\2\2\u1b9e\u1b9f\3\2\2\2\u1b9f\u1ba1\3\2\2\2\u1ba0\u1ba2"+
		"\5\u014c\u00a7\2\u1ba1\u1ba0\3\2\2\2\u1ba1\u1ba2\3\2\2\2\u1ba2\u0375\3"+
		"\2\2\2\u1ba3\u1ba4\7\u019b\2\2\u1ba4\u1ba9\5\u0378\u01bd\2\u1ba5\u1ba6"+
		"\7\u0198\2\2\u1ba6\u1ba8\5\u0378\u01bd\2\u1ba7\u1ba5\3\2\2\2\u1ba8\u1bab"+
		"\3\2\2\2\u1ba9\u1ba7\3\2\2\2\u1ba9\u1baa\3\2\2\2\u1baa\u1bac\3\2\2\2\u1bab"+
		"\u1ba9\3\2\2\2\u1bac\u1bad\7\u019c\2\2\u1bad\u0377\3\2\2\2\u1bae\u1bb4"+
		"\5\u0374\u01bb\2\u1baf\u1bb1\5\u02fa\u017e\2\u1bb0\u1bb2\5\u014c\u00a7"+
		"\2\u1bb1\u1bb0\3\2\2\2\u1bb1\u1bb2\3\2\2\2\u1bb2\u1bb4\3\2\2\2\u1bb3\u1bae"+
		"\3\2\2\2\u1bb3\u1baf\3\2\2\2\u1bb4\u0379\3\2\2\2\u1bb5\u1bb6\6\u01be\u00ba"+
		"\2\u1bb6\u1bba\5\u0376\u01bc\2\u1bb7\u1bb8\6\u01be\u00bb\2\u1bb8\u1bba"+
		"\5\u0372\u01ba\2\u1bb9\u1bb5\3\2\2\2\u1bb9\u1bb7\3\2\2\2\u1bba\u037b\3"+
		"\2\2\2\u1bbb\u1bbc\tl\2\2\u1bbc\u037d\3\2\2\2\u1bbd\u1bc0\5\u0380\u01c1"+
		"\2\u1bbe\u1bc0\5\u0384\u01c3\2\u1bbf\u1bbd\3\2\2\2\u1bbf\u1bbe\3\2\2\2"+
		"\u1bc0\u037f\3\2\2\2\u1bc1\u1bc3\7\u00af\2\2\u1bc2\u1bc4\7\u0181\2\2\u1bc3"+
		"\u1bc2\3\2\2\2\u1bc3\u1bc4\3\2\2\2\u1bc4\u1bc5\3\2\2\2\u1bc5\u1bcb\5\u046c"+
		"\u0237\2\u1bc6\u1bc7\7\r\2\2\u1bc7\u1bcb\5\u0480\u0241\2\u1bc8\u1bc9\6"+
		"\u01c1\u00bc\2\u1bc9\u1bcb\5\u0382\u01c2\2\u1bca\u1bc1\3\2\2\2\u1bca\u1bc6"+
		"\3\2\2\2\u1bca\u1bc8\3\2\2\2\u1bcb\u0381\3\2\2\2\u1bcc\u1bcd\tm\2\2\u1bcd"+
		"\u0383\3\2\2\2\u1bce\u1bcf\tn\2\2\u1bcf\u1bd0\5\u037c\u01bf\2\u1bd0\u0385"+
		"\3\2\2\2\u1bd1\u1bd6\5\u0380\u01c1\2\u1bd2\u1bd3\7\u02ac\2\2\u1bd3\u1bd4"+
		"\7!\2\2\u1bd4\u1bd6\5\u0460\u0231\2\u1bd5\u1bd1\3\2\2\2\u1bd5\u1bd2\3"+
		"\2\2\2\u1bd6\u0387\3\2\2\2\u1bd7\u1bd8\5\u0380\u01c1\2\u1bd8\u0389\3\2"+
		"\2\2\u1bd9\u1bda\5\u038c\u01c7\2\u1bda\u1bdb\7\2\2\3\u1bdb\u038b\3\2\2"+
		"\2\u1bdc\u1bde\to\2\2\u1bdd\u1bdf\5\u0392\u01ca\2\u1bde\u1bdd\3\2\2\2"+
		"\u1bde\u1bdf\3\2\2\2\u1bdf\u1be1\3\2\2\2\u1be0\u1be2\5\u0394\u01cb\2\u1be1"+
		"\u1be0\3\2\2\2\u1be1\u1be2\3\2\2\2\u1be2\u1c70\3\2\2\2\u1be3\u1be9\7\u025a"+
		"\2\2\u1be4\u1be6\7\u01e8\2\2\u1be5\u1be7\7\u0252\2\2\u1be6\u1be5\3\2\2"+
		"\2\u1be6\u1be7\3\2\2\2\u1be7\u1be9\3\2\2\2\u1be8\u1be3\3\2\2\2\u1be8\u1be4"+
		"\3\2\2\2\u1be9\u1beb\3\2\2\2\u1bea\u1bec\5\u0492\u024a\2\u1beb\u1bea\3"+
		"\2\2\2\u1beb\u1bec\3\2\2\2\u1bec\u1bee\3\2\2\2\u1bed\u1bef\5\u0394\u01cb"+
		"\2\u1bee\u1bed\3\2\2\2\u1bee\u1bef\3\2\2\2\u1bef\u1c70\3\2\2\2\u1bf0\u1bf2"+
		"\tp\2\2\u1bf1\u1bf3\5\u048e\u0248\2\u1bf2\u1bf1\3\2\2\2\u1bf2\u1bf3\3"+
		"\2\2\2\u1bf3\u1bf5\3\2\2\2\u1bf4\u1bf6\5\u0394\u01cb\2\u1bf5\u1bf4\3\2"+
		"\2\2\u1bf5\u1bf6\3\2\2\2\u1bf6\u1c70\3\2\2\2\u1bf7\u1bf9\7J\2\2\u1bf8"+
		"\u1bfa\5\u0392\u01ca\2\u1bf9\u1bf8\3\2\2\2\u1bf9\u1bfa\3\2\2\2\u1bfa\u1c70"+
		"\3\2\2\2\u1bfb\u1c70\tq\2\2\u1bfc\u1bfe\7\u01c4\2\2\u1bfd\u1bff\5\u0392"+
		"\u01ca\2\u1bfe\u1bfd\3\2\2\2\u1bfe\u1bff\3\2\2\2\u1bff\u1c01\3\2\2\2\u1c00"+
		"\u1c02\5\u0396\u01cc\2\u1c01\u1c00\3\2\2\2\u1c01\u1c02\3\2\2\2\u1c02\u1c70"+
		"\3\2\2\2\u1c03\u1c05\5\u038e\u01c8\2\u1c04\u1c06\5\u0392\u01ca\2\u1c05"+
		"\u1c04\3\2\2\2\u1c05\u1c06\3\2\2\2\u1c06\u1c08\3\2\2\2\u1c07\u1c09\7\u01b7"+
		"\2\2\u1c08\u1c07\3\2\2\2\u1c08\u1c09\3\2\2\2\u1c09\u1c70\3\2\2\2\u1c0a"+
		"\u1c0c\7\u01b7\2\2\u1c0b\u1c0d\5\u0392\u01ca\2\u1c0c\u1c0b\3\2\2\2\u1c0c"+
		"\u1c0d\3\2\2\2\u1c0d\u1c70\3\2\2\2\u1c0e\u1c0f\7\u01c4\2\2\u1c0f\u1c12"+
		"\7\u02a5\2\2\u1c10\u1c12\7\u02a3\2\2\u1c11\u1c0e\3\2\2\2\u1c11\u1c10\3"+
		"\2\2\2\u1c12\u1c13\3\2\2\2\u1c13\u1c15\5\u0392\u01ca\2\u1c14\u1c16\5\u0396"+
		"\u01cc\2\u1c15\u1c14\3\2\2\2\u1c15\u1c16\3\2\2\2\u1c16\u1c70\3\2\2\2\u1c17"+
		"\u1c18\7\u00e9\2\2\u1c18\u1c22\7\u02a3\2\2\u1c19\u1c22\7\u00f3\2\2\u1c1a"+
		"\u1c1b\7\u00ea\2\2\u1c1b\u1c22\7\u02a3\2\2\u1c1c\u1c1d\7\u00e9\2\2\u1c1d"+
		"\u1c1e\7\u01c4\2\2\u1c1e\u1c22\7\u02a5\2\2\u1c1f\u1c20\7\u00ea\2\2\u1c20"+
		"\u1c22\7\u02a5\2\2\u1c21\u1c17\3\2\2\2\u1c21\u1c19\3\2\2\2\u1c21\u1c1a"+
		"\3\2\2\2\u1c21\u1c1c\3\2\2\2\u1c21\u1c1f\3\2\2\2\u1c22\u1c23\3\2\2\2\u1c23"+
		"\u1c25\5\u0392\u01ca\2\u1c24\u1c26\7\u01b7\2\2\u1c25\u1c24\3\2\2\2\u1c25"+
		"\u1c26\3\2\2\2\u1c26\u1c70\3\2\2\2\u1c27\u1c28\7\u02a2\2\2\u1c28\u1c70"+
		"\5\u0392\u01ca\2\u1c29\u1c2b\7\u017b\2\2\u1c2a\u1c2c\5\u0392\u01ca\2\u1c2b"+
		"\u1c2a\3\2\2\2\u1c2b\u1c2c\3\2\2\2\u1c2c\u1c2e\3\2\2\2\u1c2d\u1c2f\5\u0394"+
		"\u01cb\2\u1c2e\u1c2d\3\2\2\2\u1c2e\u1c2f\3\2\2\2\u1c2f\u1c70\3\2\2\2\u1c30"+
		"\u1c70\7r\2\2\u1c31\u1c33\7\u0162\2\2\u1c32\u1c34\5\u039e\u01d0\2\u1c33"+
		"\u1c32\3\2\2\2\u1c33\u1c34\3\2\2\2\u1c34\u1c70\3\2\2\2\u1c35\u1c37\7\u015f"+
		"\2\2\u1c36\u1c38\5\u039e\u01d0\2\u1c37\u1c36\3\2\2\2\u1c37\u1c38\3\2\2"+
		"\2\u1c38\u1c70\3\2\2\2\u1c39\u1c3b\7q\2\2\u1c3a\u1c3c\5\u039e\u01d0\2"+
		"\u1c3b\u1c3a\3\2\2\2\u1c3b\u1c3c\3\2\2\2\u1c3c\u1c70\3\2\2\2\u1c3d\u1c70"+
		"\7\u028c\2\2\u1c3e\u1c40\7\u01bc\2\2\u1c3f\u1c41\5\u0392\u01ca\2\u1c40"+
		"\u1c3f\3\2\2\2\u1c40\u1c41\3\2\2\2\u1c41\u1c70\3\2\2\2\u1c42\u1c70\tr"+
		"\2\2\u1c43\u1c44\7\u022a\2\2\u1c44\u1c70\7\u02a2\2\2\u1c45\u1c49\7\u022a"+
		"\2\2\u1c46\u1c47\7\u01c4\2\2\u1c47\u1c4a\7\u02a5\2\2\u1c48\u1c4a\7\u02a3"+
		"\2\2\u1c49\u1c46\3\2\2\2\u1c49\u1c48\3\2\2\2\u1c49\u1c4a\3\2\2\2\u1c4a"+
		"\u1c4c\3\2\2\2\u1c4b\u1c4d\5\u0396\u01cc\2\u1c4c\u1c4b\3\2\2\2\u1c4c\u1c4d"+
		"\3\2\2\2\u1c4d\u1c70\3\2\2\2\u1c4e\u1c50\7\u028e\2\2\u1c4f\u1c51\5\u0396"+
		"\u01cc\2\u1c50\u1c4f\3\2\2\2\u1c50\u1c51\3\2\2\2\u1c51\u1c70\3\2\2\2\u1c52"+
		"\u1c54\7\u015b\2\2\u1c53\u1c55\5\u0392\u01ca\2\u1c54\u1c53\3\2\2\2\u1c54"+
		"\u1c55\3\2\2\2\u1c55\u1c57\3\2\2\2\u1c56\u1c58\5\u0396\u01cc\2\u1c57\u1c56"+
		"\3\2\2\2\u1c57\u1c58\3\2\2\2\u1c58\u1c70\3\2\2\2\u1c59\u1c5b\7\u0234\2"+
		"\2\u1c5a\u1c5c\5\u0396\u01cc\2\u1c5b\u1c5a\3\2\2\2\u1c5b\u1c5c\3\2\2\2"+
		"\u1c5c\u1c70\3\2\2\2\u1c5d\u1c5f\7\u0228\2\2\u1c5e\u1c60\5\u0396\u01cc"+
		"\2\u1c5f\u1c5e\3\2\2\2\u1c5f\u1c60\3\2\2\2\u1c60\u1c70\3\2\2\2\u1c61\u1c62"+
		"\7\u0081\2\2\u1c62\u1c64\5\u0478\u023d\2\u1c63\u1c65\5\u0396\u01cc\2\u1c64"+
		"\u1c63\3\2\2\2\u1c64\u1c65\3\2\2\2\u1c65\u1c70\3\2\2\2\u1c66\u1c67\7\u026d"+
		"\2\2\u1c67\u1c69\5\u0478\u023d\2\u1c68\u1c6a\5\u0396\u01cc\2\u1c69\u1c68"+
		"\3\2\2\2\u1c69\u1c6a\3\2\2\2\u1c6a\u1c70\3\2\2\2\u1c6b\u1c70\7\u0134\2"+
		"\2\u1c6c\u1c6d\6\u01c7\u00bd\2\u1c6d\u1c70\7\u00ae\2\2\u1c6e\u1c70\ts"+
		"\2\2\u1c6f\u1bdc\3\2\2\2\u1c6f\u1be8\3\2\2\2\u1c6f\u1bf0\3\2\2\2\u1c6f"+
		"\u1bf7\3\2\2\2\u1c6f\u1bfb\3\2\2\2\u1c6f\u1bfc\3\2\2\2\u1c6f\u1c03\3\2"+
		"\2\2\u1c6f\u1c0a\3\2\2\2\u1c6f\u1c11\3\2\2\2\u1c6f\u1c21\3\2\2\2\u1c6f"+
		"\u1c27\3\2\2\2\u1c6f\u1c29\3\2\2\2\u1c6f\u1c30\3\2\2\2\u1c6f\u1c31\3\2"+
		"\2\2\u1c6f\u1c35\3\2\2\2\u1c6f\u1c39\3\2\2\2\u1c6f\u1c3d\3\2\2\2\u1c6f"+
		"\u1c3e\3\2\2\2\u1c6f\u1c42\3\2\2\2\u1c6f\u1c43\3\2\2\2\u1c6f\u1c45\3\2"+
		"\2\2\u1c6f\u1c4e\3\2\2\2\u1c6f\u1c52\3\2\2\2\u1c6f\u1c59\3\2\2\2\u1c6f"+
		"\u1c5d\3\2\2\2\u1c6f\u1c61\3\2\2\2\u1c6f\u1c66\3\2\2\2\u1c6f\u1c6b\3\2"+
		"\2\2\u1c6f\u1c6c\3\2\2\2\u1c6f\u1c6e\3\2\2\2\u1c70\u038d\3\2\2\2\u1c71"+
		"\u1c75\7\u00ea\2\2\u1c72\u1c73\7\u00e9\2\2\u1c73\u1c75\7\u01c4\2\2\u1c74"+
		"\u1c71\3\2\2\2\u1c74\u1c72\3\2\2\2\u1c75\u038f\3\2\2\2\u1c76\u1c7c\7\u025a"+
		"\2\2\u1c77\u1c79\7\u01e8\2\2\u1c78\u1c7a\7\u0252\2\2\u1c79\u1c78\3\2\2"+
		"\2\u1c79\u1c7a\3\2\2\2\u1c7a\u1c7c\3\2\2\2\u1c7b\u1c76\3\2\2\2\u1c7b\u1c77"+
		"\3\2\2\2\u1c7c\u0391\3\2\2\2\u1c7d\u1c80\7\u019b\2\2\u1c7e\u1c81\5\u0472"+
		"\u023a\2\u1c7f\u1c81\7\u01a9\2\2\u1c80\u1c7e\3\2\2\2\u1c80\u1c7f\3\2\2"+
		"\2\u1c81\u1c82\3\2\2\2\u1c82\u1c83\7\u019c\2\2\u1c83\u0393\3\2\2\2\u1c84"+
		"\u1c86\tt\2\2\u1c85\u1c84\3\2\2\2\u1c86\u1c87\3\2\2\2\u1c87\u1c85\3\2"+
		"\2\2\u1c87\u1c88\3\2\2\2\u1c88\u0395\3\2\2\2\u1c89\u1c98\5\u0398\u01cd"+
		"\2\u1c8a\u1c98\5\u039a\u01ce\2\u1c8b\u1c98\7\b\2\2\u1c8c\u1c8d\5\u02ee"+
		"\u0178\2\u1c8d\u1c8f\5\u03a0\u01d1\2\u1c8e\u1c90\7\u01b7\2\2\u1c8f\u1c8e"+
		"\3\2\2\2\u1c8f\u1c90\3\2\2\2\u1c90\u1c98\3\2\2\2\u1c91\u1c95\7\u01b7\2"+
		"\2\u1c92\u1c93\5\u02ee\u0178\2\u1c93\u1c94\5\u03a0\u01d1\2\u1c94\u1c96"+
		"\3\2\2\2\u1c95\u1c92\3\2\2\2\u1c95\u1c96\3\2\2\2\u1c96\u1c98\3\2\2\2\u1c97"+
		"\u1c89\3\2\2\2\u1c97\u1c8a\3\2\2\2\u1c97\u1c8b\3\2\2\2\u1c97\u1c8c\3\2"+
		"\2\2\u1c97\u1c91\3\2\2\2\u1c98\u0397\3\2\2\2\u1c99\u1c9b\7\4\2\2\u1c9a"+
		"\u1c9c\7\u01b7\2\2\u1c9b\u1c9a\3\2\2\2\u1c9b\u1c9c\3\2\2\2\u1c9c\u1ca0"+
		"\3\2\2\2\u1c9d\u1c9e\7\u01b7\2\2\u1c9e\u1ca0\7\4\2\2\u1c9f\u1c99\3\2\2"+
		"\2\u1c9f\u1c9d\3\2\2\2\u1ca0\u0399\3\2\2\2\u1ca1\u1ca3\7\65\2\2\u1ca2"+
		"\u1ca4\7\u01b7\2\2\u1ca3\u1ca2\3\2\2\2\u1ca3\u1ca4\3\2\2\2\u1ca4\u1ca8"+
		"\3\2\2\2\u1ca5\u1ca6\7\u01b7\2\2\u1ca6\u1ca8\7\65\2\2\u1ca7\u1ca1\3\2"+
		"\2\2\u1ca7\u1ca5\3\2\2\2\u1ca8\u039b\3\2\2\2\u1ca9\u1caa\7\u019b\2\2\u1caa"+
		"\u1cab\5\u046e\u0238\2\u1cab\u1cac\7\u019c\2\2\u1cac\u039d\3\2\2\2\u1cad"+
		"\u1cae\7\u019b\2\2\u1cae\u1caf\7\u017e\2\2\u1caf\u1cb0\7\u019c\2\2\u1cb0"+
		"\u039f\3\2\2\2\u1cb1\u1cb6\5\u0494\u024b\2\u1cb2\u1cb6\7\u01b7\2\2\u1cb3"+
		"\u1cb4\6\u01d1\u00be\2\u1cb4\u1cb6\7\u01e0\2\2\u1cb5\u1cb1\3\2\2\2\u1cb5"+
		"\u1cb2\3\2\2\2\u1cb5\u1cb3\3\2\2\2\u1cb6\u03a1\3\2\2\2\u1cb7\u1cbd\5\u0494"+
		"\u024b\2\u1cb8\u1cb9\6\u01d2\u00bf\2\u1cb9\u1cbd\7\u01e0\2\2\u1cba\u1cbb"+
		"\6\u01d2\u00c0\2\u1cbb\u1cbd\7\u01b7\2\2\u1cbc\u1cb7\3\2\2\2\u1cbc\u1cb8"+
		"\3\2\2\2\u1cbc\u1cba\3\2\2\2\u1cbd\u03a3\3\2\2\2\u1cbe\u1cc5\5\u03a8\u01d5"+
		"\2\u1cbf\u1cc1\7\u0198\2\2\u1cc0\u1cbf\3\2\2\2\u1cc0\u1cc1\3\2\2\2\u1cc1"+
		"\u1cc2\3\2\2\2\u1cc2\u1cc4\5\u03a8\u01d5\2\u1cc3\u1cc0\3\2\2\2\u1cc4\u1cc7"+
		"\3\2\2\2\u1cc5\u1cc3\3\2\2\2\u1cc5\u1cc6\3\2\2\2\u1cc6\u03a5\3\2\2\2\u1cc7"+
		"\u1cc5\3\2\2\2\u1cc8\u1cca\5\u03a8\u01d5\2\u1cc9\u1cc8\3\2\2\2\u1cca\u1ccb"+
		"\3\2\2\2\u1ccb\u1cc9\3\2\2\2\u1ccb\u1ccc\3\2\2\2\u1ccc\u03a7\3\2\2\2\u1ccd"+
		"\u1ccf\7\u0082\2\2\u1cce\u1cd0\7\u0181\2\2\u1ccf\u1cce\3\2\2\2\u1ccf\u1cd0"+
		"\3\2\2\2\u1cd0\u1cd1\3\2\2\2\u1cd1\u1d4f\5\u043e\u0220\2\u1cd2\u1cd3\6"+
		"\u01d5\u00c1\2\u1cd3\u1cd5\7\u02f1\2\2\u1cd4\u1cd6\5\u049e\u0250\2\u1cd5"+
		"\u1cd4\3\2\2\2\u1cd5\u1cd6\3\2\2\2\u1cd6\u1cd9\3\2\2\2\u1cd7\u1cda\7\u0242"+
		"\2\2\u1cd8\u1cda\5\u0494\u024b\2\u1cd9\u1cd7\3\2\2\2\u1cd9\u1cd8\3\2\2"+
		"\2\u1cda\u1d4f\3\2\2\2\u1cdb\u1cdd\7\u00ba\2\2\u1cdc\u1cde\7\u0181\2\2"+
		"\u1cdd\u1cdc\3\2\2\2\u1cdd\u1cde\3\2\2\2\u1cde\u1cdf\3\2\2\2\u1cdf\u1d4f"+
		"\5\u0470\u0239\2\u1ce0\u1ce2\7\u00de\2\2\u1ce1\u1ce3\7\u0181\2\2\u1ce2"+
		"\u1ce1\3\2\2\2\u1ce2\u1ce3\3\2\2\2\u1ce3\u1ce4\3\2\2\2\u1ce4\u1d4f\5\u0470"+
		"\u0239\2\u1ce5\u1ce7\7G\2\2\u1ce6\u1ce8\7\u0181\2\2\u1ce7\u1ce6\3\2\2"+
		"\2\u1ce7\u1ce8\3\2\2\2\u1ce8\u1ce9\3\2\2\2\u1ce9\u1d4f\5\u046c\u0237\2"+
		"\u1cea\u1cec\7\u00fd\2\2\u1ceb\u1ced\7\u0181\2\2\u1cec\u1ceb\3\2\2\2\u1cec"+
		"\u1ced\3\2\2\2\u1ced\u1cee\3\2\2\2\u1cee\u1d4f\5\u047a\u023e\2\u1cef\u1cf1"+
		"\7\r\2\2\u1cf0\u1cf2\7\u0181\2\2\u1cf1\u1cf0\3\2\2\2\u1cf1\u1cf2\3\2\2"+
		"\2\u1cf2\u1cf3\3\2\2\2\u1cf3\u1d4f\5\u047a\u023e\2\u1cf4\u1cf5\6\u01d5"+
		"\u00c2\2\u1cf5\u1cf7\7a\2\2\u1cf6\u1cf8\7\u0181\2\2\u1cf7\u1cf6\3\2\2"+
		"\2\u1cf7\u1cf8\3\2\2\2\u1cf8\u1cf9\3\2\2\2\u1cf9\u1d4f\5\u047c\u023f\2"+
		"\u1cfa\u1cfb\6\u01d5\u00c3\2\u1cfb\u1cfd\7b\2\2\u1cfc\u1cfe\7\u0181\2"+
		"\2\u1cfd\u1cfc\3\2\2\2\u1cfd\u1cfe\3\2\2\2\u1cfe\u1cff\3\2\2\2\u1cff\u1d4f"+
		"\5\u047c\u023f\2\u1d00\u1d02\7E\2\2\u1d01\u1d03\7\u0181\2\2\u1d02\u1d01"+
		"\3\2\2\2\u1d02\u1d03\3\2\2\2\u1d03\u1d04\3\2\2\2\u1d04\u1d4f\5\u0470\u0239"+
		"\2\u1d05\u1d07\7\u00f8\2\2\u1d06\u1d08\7\u0181\2\2\u1d07\u1d06\3\2\2\2"+
		"\u1d07\u1d08\3\2\2\2\u1d08\u1d09\3\2\2\2\u1d09\u1d4f\5\u03aa\u01d6\2\u1d0a"+
		"\u1d0c\tu\2\2\u1d0b\u1d0d\7\u0181\2\2\u1d0c\u1d0b\3\2\2\2\u1d0c\u1d0d"+
		"\3\2\2\2\u1d0d\u1d0e\3\2\2\2\u1d0e\u1d4f\5\u03aa\u01d6\2\u1d0f\u1d11\t"+
		"v\2\2\u1d10\u1d12\7\u0181\2\2\u1d11\u1d10\3\2\2\2\u1d11\u1d12\3\2\2\2"+
		"\u1d12\u1d13\3\2\2\2\u1d13\u1d4f\5\u046c\u0237\2\u1d14\u1d16\7v\2\2\u1d15"+
		"\u1d17\7\u0181\2\2\u1d16\u1d15\3\2\2\2\u1d16\u1d17\3\2\2\2\u1d17\u1d18"+
		"\3\2\2\2\u1d18\u1d4f\5\u046c\u0237\2\u1d19\u1d1b\7\u012e\2\2\u1d1a\u1d1c"+
		"\7\u0181\2\2\u1d1b\u1d1a\3\2\2\2\u1d1b\u1d1c\3\2\2\2\u1d1c\u1d1d\3\2\2"+
		"\2\u1d1d\u1d4f\tw\2\2\u1d1e\u1d20\7\u0295\2\2\u1d1f\u1d21\7\u0181\2\2"+
		"\u1d20\u1d1f\3\2\2\2\u1d20\u1d21\3\2\2\2\u1d21\u1d22\3\2\2\2\u1d22\u1d23"+
		"\7\u019b\2\2\u1d23\u1d24\5\u0448\u0225\2\u1d24\u1d25\7\u019c\2\2\u1d25"+
		"\u1d4f\3\2\2\2\u1d26\u1d4f\5\u03b0\u01d9\2\u1d27\u1d4f\5\u03ac\u01d7\2"+
		"\u1d28\u1d2a\7\u00ad\2\2\u1d29\u1d2b\7\u0181\2\2\u1d2a\u1d29\3\2\2\2\u1d2a"+
		"\u1d2b\3\2\2\2\u1d2b\u1d2c\3\2\2\2\u1d2c\u1d4f\tx\2\2\u1d2d\u1d2e\7o\2"+
		"\2\u1d2e\u1d30\7y\2\2\u1d2f\u1d31\7\u0181\2\2\u1d30\u1d2f\3\2\2\2\u1d30"+
		"\u1d31\3\2\2\2\u1d31\u1d32\3\2\2\2\u1d32\u1d4f\5\u047c\u023f\2\u1d33\u1d34"+
		"\7\u020b\2\2\u1d34\u1d36\7y\2\2\u1d35\u1d37\7\u0181\2\2\u1d36\u1d35\3"+
		"\2\2\2\u1d36\u1d37\3\2\2\2\u1d37\u1d38\3\2\2\2\u1d38\u1d4f\5\u047c\u023f"+
		"\2\u1d39\u1d3f\7\u0158\2\2\u1d3a\u1d3c\6\u01d5\u00c4\2\u1d3b\u1d3d\7\u0181"+
		"\2\2\u1d3c\u1d3b\3\2\2\2\u1d3c\u1d3d\3\2\2\2\u1d3d\u1d40\3\2\2\2\u1d3e"+
		"\u1d40\3\2\2\2\u1d3f\u1d3a\3\2\2\2\u1d3f\u1d3e\3\2\2\2\u1d40\u1d41\3\2"+
		"\2\2\u1d41\u1d4f\5\u0460\u0231\2\u1d42\u1d43\7\u014a\2\2\u1d43\u1d4f\t"+
		"y\2\2\u1d44\u1d46\7d\2\2\u1d45\u1d47\7\u0181\2\2\u1d46\u1d45\3\2\2\2\u1d46"+
		"\u1d47\3\2\2\2\u1d47\u1d48\3\2\2\2\u1d48\u1d4f\5\u047c\u023f\2\u1d49\u1d4b"+
		"\7\u00af\2\2\u1d4a\u1d4c\7\u0181\2\2\u1d4b\u1d4a\3\2\2\2\u1d4b\u1d4c\3"+
		"\2\2\2\u1d4c\u1d4d\3\2\2\2\u1d4d\u1d4f\5\u046c\u0237\2\u1d4e\u1ccd\3\2"+
		"\2\2\u1d4e\u1cd2\3\2\2\2\u1d4e\u1cdb\3\2\2\2\u1d4e\u1ce0\3\2\2\2\u1d4e"+
		"\u1ce5\3\2\2\2\u1d4e\u1cea\3\2\2\2\u1d4e\u1cef\3\2\2\2\u1d4e\u1cf4\3\2"+
		"\2\2\u1d4e\u1cfa\3\2\2\2\u1d4e\u1d00\3\2\2\2\u1d4e\u1d05\3\2\2\2\u1d4e"+
		"\u1d0a\3\2\2\2\u1d4e\u1d0f\3\2\2\2\u1d4e\u1d14\3\2\2\2\u1d4e\u1d19\3\2"+
		"\2\2\u1d4e\u1d1e\3\2\2\2\u1d4e\u1d26\3\2\2\2\u1d4e\u1d27\3\2\2\2\u1d4e"+
		"\u1d28\3\2\2\2\u1d4e\u1d2d\3\2\2\2\u1d4e\u1d33\3\2\2\2\u1d4e\u1d39\3\2"+
		"\2\2\u1d4e\u1d42\3\2\2\2\u1d4e\u1d44\3\2\2\2\u1d4e\u1d49\3\2\2\2\u1d4f"+
		"\u03a9\3\2\2\2\u1d50\u1d53\5\u046c\u0237\2\u1d51\u1d53\7\u01e0\2\2\u1d52"+
		"\u1d50\3\2\2\2\u1d52\u1d51\3\2\2\2\u1d53\u03ab\3\2\2\2\u1d54\u1d56\7\u01e0"+
		"\2\2\u1d55\u1d54\3\2\2\2\u1d55\u1d56\3\2\2\2\u1d56\u1d57\3\2\2\2\u1d57"+
		"\u1d59\7\u01c6\2\2\u1d58\u1d5a\7\u0181\2\2\u1d59\u1d58\3\2\2\2\u1d59\u1d5a"+
		"\3\2\2\2\u1d5a\u1d5b\3\2\2\2\u1d5b\u1d5c\5\u03a2\u01d2\2\u1d5c\u03ad\3"+
		"\2\2\2\u1d5d\u1d5f\7\u01e0\2\2\u1d5e\u1d5d\3\2\2\2\u1d5e\u1d5f\3\2\2\2"+
		"\u1d5f\u1d60\3\2\2\2\u1d60\u1d62\7b\2\2\u1d61\u1d63\7\u0181\2\2\u1d62"+
		"\u1d61\3\2\2\2\u1d62\u1d63\3\2\2\2\u1d63\u1d64\3\2\2\2\u1d64\u1d65\5\u047a"+
		"\u023e\2\u1d65\u03af\3\2\2\2\u1d66\u1d68\7\u01e0\2\2\u1d67\u1d66\3\2\2"+
		"\2\u1d67\u1d68\3\2\2\2\u1d68\u1d69\3\2\2\2\u1d69\u1d6b\5\u02ee\u0178\2"+
		"\u1d6a\u1d6c\7\u0181\2\2\u1d6b\u1d6a\3\2\2\2\u1d6b\u1d6c\3\2\2\2\u1d6c"+
		"\u1d6d\3\2\2\2\u1d6d\u1d6e\5\u03a0\u01d1\2\u1d6e\u03b1\3\2\2\2\u1d6f\u1d70"+
		"\7\"\2\2\u1d70\u1d71\7\u01be\2\2\u1d71\u1d74\5\u03b4\u01db\2\u1d72\u1d73"+
		"\7\u00fc\2\2\u1d73\u1d75\5\u046e\u0238\2\u1d74\u1d72\3\2\2\2\u1d74\u1d75"+
		"\3\2\2\2\u1d75\u1d77\3\2\2\2\u1d76\u1d78\5\u03b6\u01dc\2\u1d77\u1d76\3"+
		"\2\2\2\u1d77\u1d78\3\2\2\2\u1d78\u1d7a\3\2\2\2\u1d79\u1d7b\5\u03ba\u01de"+
		"\2\u1d7a\u1d79\3\2\2\2\u1d7a\u1d7b\3\2\2\2\u1d7b\u03b3\3\2\2\2\u1d7c\u1d7e"+
		"\7\u0222\2\2\u1d7d\u1d7c\3\2\2\2\u1d7d\u1d7e\3\2\2\2\u1d7e\u1d7f\3\2\2"+
		"\2\u1d7f\u1d81\7\u021b\2\2\u1d80\u1d82\5\u03b8\u01dd\2\u1d81\u1d80\3\2"+
		"\2\2\u1d81\u1d82\3\2\2\2\u1d82\u1d83\3\2\2\2\u1d83\u1d85\7\u019b\2\2\u1d84"+
		"\u1d86\5\u0462\u0232\2\u1d85\u1d84\3\2\2\2\u1d85\u1d86\3\2\2\2\u1d86\u1d87"+
		"\3\2\2\2\u1d87\u1d9e\7\u019c\2\2\u1d88\u1d8a\7\u0222\2\2\u1d89\u1d88\3"+
		"\2\2\2\u1d89\u1d8a\3\2\2\2\u1d8a\u1d8b\3\2\2\2\u1d8b\u1d8c\7\u009e\2\2"+
		"\u1d8c\u1d8d\7\u019b\2\2\u1d8d\u1d8e\5\u02a6\u0154\2\u1d8e\u1d8f\7\u019c"+
		"\2\2\u1d8f\u1d9e\3\2\2\2\u1d90\u1d9b\tz\2\2\u1d91\u1d92\7\u019b\2\2\u1d92"+
		"\u1d93\5\u02a6\u0154\2\u1d93\u1d94\7\u019c\2\2\u1d94\u1d9c\3\2\2\2\u1d95"+
		"\u1d96\7\\\2\2\u1d96\u1d98\7\u019b\2\2\u1d97\u1d99\5\u0462\u0232\2\u1d98"+
		"\u1d97\3\2\2\2\u1d98\u1d99\3\2\2\2\u1d99\u1d9a\3\2\2\2\u1d9a\u1d9c\7\u019c"+
		"\2\2\u1d9b\u1d91\3\2\2\2\u1d9b\u1d95\3\2\2\2\u1d9c\u1d9e\3\2\2\2\u1d9d"+
		"\u1d7d\3\2\2\2\u1d9d\u1d89\3\2\2\2\u1d9d\u1d90\3\2\2\2\u1d9e\u03b5\3\2"+
		"\2\2\u1d9f\u1da0\7\u014f\2\2\u1da0\u1da2\7\u01be\2\2\u1da1\u1da3\7\u0222"+
		"\2\2\u1da2\u1da1\3\2\2\2\u1da2\u1da3\3\2\2\2\u1da3\u1dae\3\2\2\2\u1da4"+
		"\u1da5\7\u009e\2\2\u1da5\u1da6\7\u019b\2\2\u1da6\u1da7\5\u02a6\u0154\2"+
		"\u1da7\u1da8\7\u019c\2\2\u1da8\u1daf\3\2\2\2\u1da9\u1dab\7\u021b\2\2\u1daa"+
		"\u1dac\5\u03b8\u01dd\2\u1dab\u1daa\3\2\2\2\u1dab\u1dac\3\2\2\2\u1dac\u1dad"+
		"\3\2\2\2\u1dad\u1daf\5\u0464\u0233\2\u1dae\u1da4\3\2\2\2\u1dae\u1da9\3"+
		"\2\2\2\u1daf\u1db2\3\2\2\2\u1db0\u1db1\7\u0150\2\2\u1db1\u1db3\5\u046e"+
		"\u0238\2\u1db2\u1db0\3\2\2\2\u1db2\u1db3\3\2\2\2\u1db3\u03b7\3\2\2\2\u1db4"+
		"\u1db5\6\u01dd\u00c5\2\u1db5\u1db6\7@\2\2\u1db6\u1db7\7\u0181\2\2\u1db7"+
		"\u1db8\5\u046e\u0238\2\u1db8\u03b9\3\2\2\2\u1db9\u1dba\7\u019b\2\2\u1dba"+
		"\u1dbf\5\u03bc\u01df\2\u1dbb\u1dbc\7\u0198\2\2\u1dbc\u1dbe\5\u03bc\u01df"+
		"\2\u1dbd\u1dbb\3\2\2\2\u1dbe\u1dc1\3\2\2\2\u1dbf\u1dbd\3\2\2\2\u1dbf\u1dc0"+
		"\3\2\2\2\u1dc0\u1dc2\3\2\2\2\u1dc1\u1dbf\3\2\2\2\u1dc2\u1dc3\7\u019c\2"+
		"\2\u1dc3\u03bb\3\2\2\2\u1dc4\u1dc5\7\"\2\2\u1dc5\u1dd0\5\u0460\u0231\2"+
		"\u1dc6\u1dc7\7\u02a1\2\2\u1dc7\u1dc8\7\u00b2\2\2\u1dc8\u1dcb\7\u015c\2"+
		"\2\u1dc9\u1dcc\5\u03c4\u01e3\2\u1dca\u1dcc\7\u0231\2\2\u1dcb\u1dc9\3\2"+
		"\2\2\u1dcb\u1dca\3\2\2\2\u1dcc\u1dd1\3\2\2\2\u1dcd\u1dce\7\u02a1\2\2\u1dce"+
		"\u1dcf\7\u0214\2\2\u1dcf\u1dd1\5\u03be\u01e0\2\u1dd0\u1dc6\3\2\2\2\u1dd0"+
		"\u1dcd\3\2\2\2\u1dd0\u1dd1\3\2\2\2\u1dd1\u1dd5\3\2\2\2\u1dd2\u1dd4\5\u03c0"+
		"\u01e1\2\u1dd3\u1dd2\3\2\2\2\u1dd4\u1dd7\3\2\2\2\u1dd5\u1dd3\3\2\2\2\u1dd5"+
		"\u1dd6\3\2\2\2\u1dd6\u1de3\3\2\2\2\u1dd7\u1dd5\3\2\2\2\u1dd8\u1dd9\7\u019b"+
		"\2\2\u1dd9\u1dde\5\u03c2\u01e2\2\u1dda\u1ddb\7\u0198\2\2\u1ddb\u1ddd\5"+
		"\u03c2\u01e2\2\u1ddc\u1dda\3\2\2\2\u1ddd\u1de0\3\2\2\2\u1dde\u1ddc\3\2"+
		"\2\2\u1dde\u1ddf\3\2\2\2\u1ddf\u1de1\3\2\2\2\u1de0\u1dde\3\2\2\2\u1de1"+
		"\u1de2\7\u019c\2\2\u1de2\u1de4\3\2\2\2\u1de3\u1dd8\3\2\2\2\u1de3\u1de4"+
		"\3\2\2\2\u1de4\u03bd\3\2\2\2\u1de5\u1df2\5\u03c4\u01e3\2\u1de6\u1de7\7"+
		"\u019b\2\2\u1de7\u1dec\5\u03c4\u01e3\2\u1de8\u1de9\7\u0198\2\2\u1de9\u1deb"+
		"\5\u03c4\u01e3\2\u1dea\u1de8\3\2\2\2\u1deb\u1dee\3\2\2\2\u1dec\u1dea\3"+
		"\2\2\2\u1dec\u1ded\3\2\2\2\u1ded\u1def\3\2\2\2\u1dee\u1dec\3\2\2\2\u1def"+
		"\u1df0\7\u019c\2\2\u1df0\u1df2\3\2\2\2\u1df1\u1de5\3\2\2\2\u1df1\u1de6"+
		"\3\2\2\2\u1df2\u03bf\3\2\2\2\u1df3\u1df5\7\u0158\2\2\u1df4\u1df6\7\u0181"+
		"\2\2\u1df5\u1df4\3\2\2\2\u1df5\u1df6\3\2\2\2\u1df6\u1df7\3\2\2\2\u1df7"+
		"\u1e16\5\u0460\u0231\2\u1df8\u1dfa\7\u014a\2\2\u1df9\u1df8\3\2\2\2\u1df9"+
		"\u1dfa\3\2\2\2\u1dfa\u1dfb\3\2\2\2\u1dfb\u1dfd\7\u0082\2\2\u1dfc\u1dfe"+
		"\7\u0181\2\2\u1dfd\u1dfc\3\2\2\2\u1dfd\u1dfe\3\2\2\2\u1dfe\u1dff\3\2\2"+
		"\2\u1dff\u1e16\5\u043e\u0220\2\u1e00\u1e02\7\u00f0\2\2\u1e01\u1e03\7\u0181"+
		"\2\2\u1e02\u1e01\3\2\2\2\u1e02\u1e03\3\2\2\2\u1e03\u1e04\3\2\2\2\u1e04"+
		"\u1e16\5\u046e\u0238\2\u1e05\u1e07\t{\2\2\u1e06\u1e08\7\u0181\2\2\u1e07"+
		"\u1e06\3\2\2\2\u1e07\u1e08\3\2\2\2\u1e08\u1e09\3\2\2\2\u1e09\u1e16\5\u046e"+
		"\u0238\2\u1e0a\u1e0b\t|\2\2\u1e0b\u1e0d\7y\2\2\u1e0c\u1e0e\7\u0181\2\2"+
		"\u1e0d\u1e0c\3\2\2\2\u1e0d\u1e0e\3\2\2\2\u1e0e\u1e0f\3\2\2\2\u1e0f\u1e16"+
		"\5\u0480\u0241\2\u1e10\u1e12\7\r\2\2\u1e11\u1e13\7\u0181\2\2\u1e12\u1e11"+
		"\3\2\2\2\u1e12\u1e13\3\2\2\2\u1e13\u1e14\3\2\2\2\u1e14\u1e16\5\u0480\u0241"+
		"\2\u1e15\u1df3\3\2\2\2\u1e15\u1df9\3\2\2\2\u1e15\u1e00\3\2\2\2\u1e15\u1e05"+
		"\3\2\2\2\u1e15\u1e0a\3\2\2\2\u1e15\u1e10\3\2\2\2\u1e16\u03c1\3\2\2\2\u1e17"+
		"\u1e18\7\u014f\2\2\u1e18\u1e1c\5\u0494\u024b\2\u1e19\u1e1b\5\u03c0\u01e1"+
		"\2\u1e1a\u1e19\3\2\2\2\u1e1b\u1e1e\3\2\2\2\u1e1c\u1e1a\3\2\2\2\u1e1c\u1e1d"+
		"\3\2\2\2\u1e1d\u03c3\3\2\2\2\u1e1e\u1e1c\3\2\2\2\u1e1f\u1e20\7\u019b\2"+
		"\2\u1e20\u1e25\5\u03c6\u01e4\2\u1e21\u1e22\7\u0198\2\2\u1e22\u1e24\5\u03c6"+
		"\u01e4\2\u1e23\u1e21\3\2\2\2\u1e24\u1e27\3\2\2\2\u1e25\u1e23\3\2\2\2\u1e25"+
		"\u1e26\3\2\2\2\u1e26\u1e28\3\2\2\2\u1e27\u1e25\3\2\2\2\u1e28\u1e29\7\u019c"+
		"\2\2\u1e29\u03c5\3\2\2\2\u1e2a\u1e2d\5\u02a6\u0154\2\u1e2b\u1e2d\7\u0231"+
		"\2\2\u1e2c\u1e2a\3\2\2\2\u1e2c\u1e2b\3\2\2\2\u1e2d\u03c7\3\2\2\2\u1e2e"+
		"\u1e2f\7u\2\2\u1e2f\u1e30\7\u0181\2\2\u1e30\u1e31\5\u03fa\u01fe\2\u1e31"+
		"\u03c9\3\2\2\2\u1e32\u1e33\7\u0209\2\2\u1e33\u1e34\7\u01f2\2\2\u1e34\u03cb"+
		"\3\2\2\2\u1e35\u1e36\7\u0209\2\2\u1e36\u1e37\5\u02f0\u0179\2\u1e37\u1e38"+
		"\7\u01f2\2\2\u1e38\u03cd\3\2\2\2\u1e39\u1e3b\t}\2\2\u1e3a\u1e39\3\2\2"+
		"\2\u1e3a\u1e3b\3\2\2\2\u1e3b\u1e3c\3\2\2\2\u1e3c\u1e3d\5\u03d0\u01e9\2"+
		"\u1e3d\u03cf\3\2\2\2\u1e3e\u1e3f\5\u044c\u0227\2\u1e3f\u1e40\5\u03d4\u01eb"+
		"\2\u1e40\u03d1\3\2\2\2\u1e41\u1e42\7\u01c6\2\2\u1e42\u1e43\5\u03a2\u01d2"+
		"\2\u1e43\u03d3\3\2\2\2\u1e44\u1e46\5\u038c\u01c7\2\u1e45\u1e47\5\u03d2"+
		"\u01ea\2\u1e46\u1e45\3\2\2\2\u1e46\u1e47\3\2\2\2\u1e47\u03d5\3\2\2\2\u1e48"+
		"\u1e49\7\u019b\2\2\u1e49\u1e4a\5\u041a\u020e\2\u1e4a\u1e4b\7\u0198\2\2"+
		"\u1e4b\u1e4c\5\u041a\u020e\2\u1e4c\u1e4d\7\u019c\2\2\u1e4d\u03d7\3\2\2"+
		"\2\u1e4e\u1e53\5\u042a\u0216\2\u1e4f\u1e50\7\u0198\2\2\u1e50\u1e52\5\u042a"+
		"\u0216\2\u1e51\u1e4f\3\2\2\2\u1e52\u1e55\3\2\2\2\u1e53\u1e51\3\2\2\2\u1e53"+
		"\u1e54\3\2\2\2\u1e54\u03d9\3\2\2\2\u1e55\u1e53\3\2\2\2\u1e56\u1e5b\5\u03dc"+
		"\u01ef\2\u1e57\u1e58\7\u0198\2\2\u1e58\u1e5a\5\u03dc\u01ef\2\u1e59\u1e57"+
		"\3\2\2\2\u1e5a\u1e5d\3\2\2\2\u1e5b\u1e59\3\2\2\2\u1e5b\u1e5c\3\2\2\2\u1e5c"+
		"\u03db\3\2\2\2\u1e5d\u1e5b\3\2\2\2\u1e5e\u1e5f\5\u040e\u0208\2\u1e5f\u1e62"+
		"\7\u0181\2\2\u1e60\u1e63\5\u029c\u014f\2\u1e61\u1e63\7\u01e0\2\2\u1e62"+
		"\u1e60\3\2\2\2\u1e62\u1e61\3\2\2\2\u1e63\u03dd\3\2\2\2\u1e64\u1e65\5\u02ee"+
		"\u0178\2\u1e65\u1e66\5\u03a0\u01d1\2\u1e66\u03df\3\2\2\2\u1e67\u1e69\7"+
		"\\\2\2\u1e68\u1e6a\5\u03e2\u01f2\2\u1e69\u1e68\3\2\2\2\u1e6a\u1e6b\3\2"+
		"\2\2\u1e6b\u1e69\3\2\2\2\u1e6b\u1e6c\3\2\2\2\u1e6c\u03e1\3\2\2\2\u1e6d"+
		"\u1e6e\7\u028a\2\2\u1e6e\u1e6f\7\u01be\2\2\u1e6f\u1e7a\5\u047c\u023f\2"+
		"\u1e70\u1e72\7\u024b\2\2\u1e71\u1e70\3\2\2\2\u1e71\u1e72\3\2\2\2\u1e72"+
		"\u1e73\3\2\2\2\u1e73\u1e74\7\u01ee\2\2\u1e74\u1e75\7\u01be\2\2\u1e75\u1e7a"+
		"\5\u047c\u023f\2\u1e76\u1e77\7\u01f0\2\2\u1e77\u1e78\7\u01be\2\2\u1e78"+
		"\u1e7a\5\u047c\u023f\2\u1e79\u1e6d\3\2\2\2\u1e79\u1e71\3\2\2\2\u1e79\u1e76"+
		"\3\2\2\2\u1e7a\u03e3\3\2\2\2\u1e7b\u1e7d\7\u0223\2\2\u1e7c\u1e7e\5\u03e6"+
		"\u01f4\2\u1e7d\u1e7c\3\2\2\2\u1e7e\u1e7f\3\2\2\2\u1e7f\u1e7d\3\2\2\2\u1e7f"+
		"\u1e80\3\2\2\2\u1e80\u03e5\3\2\2\2\u1e81\u1e82\t~\2\2\u1e82\u1e83\7\u01be"+
		"\2\2\u1e83\u1e84\5\u047c\u023f\2\u1e84\u03e7\3\2\2\2\u1e85\u1e8a\5\u03fa"+
		"\u01fe\2\u1e86\u1e87\7\u0198\2\2\u1e87\u1e89\5\u03fa\u01fe\2\u1e88\u1e86"+
		"\3\2\2\2\u1e89\u1e8c\3\2\2\2\u1e8a\u1e88\3\2\2\2\u1e8a\u1e8b\3\2\2\2\u1e8b"+
		"\u03e9\3\2\2\2\u1e8c\u1e8a\3\2\2\2\u1e8d\u1e92\5\u03ee\u01f8\2\u1e8e\u1e8f"+
		"\7\u0198\2\2\u1e8f\u1e91\5\u03ee\u01f8\2\u1e90\u1e8e\3\2\2\2\u1e91\u1e94"+
		"\3\2\2\2\u1e92\u1e90\3\2\2\2\u1e92\u1e93\3\2\2\2\u1e93\u03eb\3\2\2\2\u1e94"+
		"\u1e92\3\2\2\2\u1e95\u1e9a\5\u03f0\u01f9\2\u1e96\u1e97\7\u0198\2\2\u1e97"+
		"\u1e99\5\u03f0\u01f9\2\u1e98\u1e96\3\2\2\2\u1e99\u1e9c\3\2\2\2\u1e9a\u1e98"+
		"\3\2\2\2\u1e9a\u1e9b\3\2\2\2\u1e9b\u03ed\3\2\2\2\u1e9c\u1e9a\3\2\2\2\u1e9d"+
		"\u1eb8\5\u03fa\u01fe\2\u1e9e\u1eb6\7\u00a1\2\2\u1e9f\u1ea2\7\u01be\2\2"+
		"\u1ea0\u1ea1\6\u01f8\u00c6\2\u1ea1\u1ea3\7\u00fd\2\2\u1ea2\u1ea0\3\2\2"+
		"\2\u1ea2\u1ea3\3\2\2\2\u1ea3\u1ea4\3\2\2\2\u1ea4\u1eb7\5\u047c\u023f\2"+
		"\u1ea5\u1ea6\7\u02ac\2\2\u1ea6\u1eac\5\u0494\u024b\2\u1ea7\u1ea8\7\u01b1"+
		"\2\2\u1ea8\u1ead\5\u047e\u0240\2\u1ea9\u1eaa\6\u01f8\u00c7\2\u1eaa\u1eab"+
		"\7\u01be\2\2\u1eab\u1ead\5\u047c\u023f\2\u1eac\u1ea7\3\2\2\2\u1eac\u1ea9"+
		"\3\2\2\2\u1eac\u1ead\3\2\2\2\u1ead\u1eb7\3\2\2\2\u1eae\u1eb1\6\u01f8\u00c8"+
		"\2\u1eaf\u1eb0\7\u02ac\2\2\u1eb0\u1eb2\5\u0494\u024b\2\u1eb1\u1eaf\3\2"+
		"\2\2\u1eb1\u1eb2\3\2\2\2\u1eb2\u1eb3\3\2\2\2\u1eb3\u1eb4\7\u01be\2\2\u1eb4"+
		"\u1eb5\7\u02fe\2\2\u1eb5\u1eb7\7\u00fd\2\2\u1eb6\u1e9f\3\2\2\2\u1eb6\u1ea5"+
		"\3\2\2\2\u1eb6\u1eae\3\2\2\2\u1eb7\u1eb9\3\2\2\2\u1eb8\u1e9e\3\2\2\2\u1eb8"+
		"\u1eb9\3\2\2\2\u1eb9\u03ef\3\2\2\2\u1eba\u1ed7\5\u03fa\u01fe\2\u1ebb\u1ed2"+
		"\7\u00a1\2\2\u1ebc\u1ebd\7\u02ac\2\2\u1ebd\u1ebf\5\u0494\u024b\2\u1ebe"+
		"\u1ebc\3\2\2\2\u1ebe\u1ebf\3\2\2\2\u1ebf\u1ec0\3\2\2\2\u1ec0\u1ec1\7\u01be"+
		"\2\2\u1ec1\u1ec4\5\u047c\u023f\2\u1ec2\u1ec3\7\u0260\2\2\u1ec3\u1ec5\5"+
		"\u047c\u023f\2\u1ec4\u1ec2\3\2\2\2\u1ec4\u1ec5\3\2\2\2\u1ec5\u1ec7\3\2"+
		"\2\2\u1ec6\u1ec8\5\u03f2\u01fa\2\u1ec7\u1ec6\3\2\2\2\u1ec7\u1ec8\3\2\2"+
		"\2\u1ec8\u1ed3\3\2\2\2\u1ec9\u1eca\7\u02ac\2\2\u1eca\u1ed0\5\u0494\u024b"+
		"\2\u1ecb\u1ecc\7\u01b1\2\2\u1ecc\u1ece\5\u047e\u0240\2\u1ecd\u1ecf\5\u03f2"+
		"\u01fa\2\u1ece\u1ecd\3\2\2\2\u1ece\u1ecf\3\2\2\2\u1ecf\u1ed1\3\2\2\2\u1ed0"+
		"\u1ecb\3\2\2\2\u1ed0\u1ed1\3\2\2\2\u1ed1\u1ed3\3\2\2\2\u1ed2\u1ebe\3\2"+
		"\2\2\u1ed2\u1ec9\3\2\2\2\u1ed2\u1ed3\3\2\2\2\u1ed3\u1ed8\3\2\2\2\u1ed4"+
		"\u1ed6\5\u03f4\u01fb\2\u1ed5\u1ed4\3\2\2\2\u1ed5\u1ed6\3\2\2\2\u1ed6\u1ed8"+
		"\3\2\2\2\u1ed7\u1ebb\3\2\2\2\u1ed7\u1ed5\3\2\2\2\u1ed8\u03f1\3\2\2\2\u1ed9"+
		"\u1eda\7\u02f7\2\2\u1eda\u1edb\7m\2\2\u1edb\u1edc\7\u00fd\2\2\u1edc\u03f3"+
		"\3\2\2\2\u1edd\u1ede\7{\2\2\u1ede\u1edf\7\u02f8\2\2\u1edf\u1ee0\7\u00fd"+
		"\2\2\u1ee0\u03f5\3\2\2\2\u1ee1\u1ee2\7\u0260\2\2\u1ee2\u1ee3\5\u047c\u023f"+
		"\2\u1ee3\u03f7\3\2\2\2\u1ee4\u1ee8\5\u0494\u024b\2\u1ee5\u1ee6\7\u01a2"+
		"\2\2\u1ee6\u1ee9\5\u0494\u024b\2\u1ee7\u1ee9\7\u01a3\2\2\u1ee8\u1ee5\3"+
		"\2\2\2\u1ee8\u1ee7\3\2\2\2\u1ee8\u1ee9\3\2\2\2\u1ee9\u03f9\3\2\2\2\u1eea"+
		"\u1ef0\5\u03f8\u01fd\2\u1eeb\u1eed\7\u01d2\2\2\u1eec\u1eee\5\u049c\u024f"+
		"\2\u1eed\u1eec\3\2\2\2\u1eed\u1eee\3\2\2\2\u1eee\u1ef0\3\2\2\2\u1eef\u1eea"+
		"\3\2\2\2\u1eef\u1eeb\3\2\2\2\u1ef0\u03fb\3\2\2\2\u1ef1\u1ef2\7\u0220\2"+
		"\2\u1ef2\u1ef3\5\u047a\u023e\2\u1ef3\u03fd\3\2\2\2\u1ef4\u1ef7\5\u03fc"+
		"\u01ff\2\u1ef5\u1ef7\5\u0160\u00b1\2\u1ef6\u1ef4\3\2\2\2\u1ef6\u1ef5\3"+
		"\2\2\2\u1ef7\u03ff\3\2\2\2\u1ef8\u1ef9\t\177\2\2\u1ef9\u0401\3\2\2\2\u1efa"+
		"\u1efb\t\u0080\2\2\u1efb\u0403\3\2\2\2\u1efc\u1efd\6\u0203\u00c9\2\u1efd"+
		"\u1efe\7\"\2\2\u1efe\u1eff\5\u0464\u0233\2\u1eff\u0405\3\2\2\2\u1f00\u1f06"+
		"\5\u046a\u0236\2\u1f01\u1f03\5\u0466\u0234\2\u1f02\u1f04\5\u046a\u0236"+
		"\2\u1f03\u1f02\3\2\2\2\u1f03\u1f04\3\2\2\2\u1f04\u1f06\3\2\2\2\u1f05\u1f00"+
		"\3\2\2\2\u1f05\u1f01\3\2\2\2\u1f06\u0407\3\2\2\2\u1f07\u1f08\6\u0205\u00ca"+
		"\2\u1f08\u1f0c\5\u0460\u0231\2\u1f09\u1f0a\6\u0205\u00cb\2\u1f0a\u1f0c"+
		"\5\u0406\u0204\2\u1f0b\u1f07\3\2\2\2\u1f0b\u1f09\3\2\2\2\u1f0c\u0409\3"+
		"\2\2\2\u1f0d\u1f0e\5\u0460\u0231\2\u1f0e\u040b\3\2\2\2\u1f0f\u1f10\7\u019b"+
		"\2\2\u1f10\u1f15\5\u040a\u0206\2\u1f11\u1f12\7\u0198\2\2\u1f12\u1f14\5"+
		"\u040a\u0206\2\u1f13\u1f11\3\2\2\2\u1f14\u1f17\3\2\2\2\u1f15\u1f13\3\2"+
		"\2\2\u1f15\u1f16\3\2\2\2\u1f16\u1f18\3\2\2\2\u1f17\u1f15\3\2\2\2\u1f18"+
		"\u1f19\7\u019c\2\2\u1f19\u040d\3\2\2\2\u1f1a\u1f1b\5\u0406\u0204\2\u1f1b"+
		"\u040f\3\2\2\2\u1f1c\u1f1f\5\u040e\u0208\2\u1f1d\u1f1f\5\u0416\u020c\2"+
		"\u1f1e\u1f1c\3\2\2\2\u1f1e\u1f1d\3\2\2\2\u1f1f\u0411\3\2\2\2\u1f20\u1f21"+
		"\5\u0460\u0231\2\u1f21\u0413\3\2\2\2\u1f22\u1f23\5\u0406\u0204\2\u1f23"+
		"\u0415\3\2\2\2\u1f24\u1f25\5\u0460\u0231\2\u1f25\u1f29\7\u0197\2\2\u1f26"+
		"\u1f27\5\u0460\u0231\2\u1f27\u1f28\7\u0197\2\2\u1f28\u1f2a\3\2\2\2\u1f29"+
		"\u1f26\3\2\2\2\u1f29\u1f2a\3\2\2\2\u1f2a\u1f2b\3\2\2\2\u1f2b\u1f2c\7\u018b"+
		"\2\2\u1f2c\u0417\3\2\2\2\u1f2d\u1f2e\5\u0460\u0231\2\u1f2e\u0419\3\2\2"+
		"\2\u1f2f\u1f30\5\u0460\u0231\2\u1f30\u041b\3\2\2\2\u1f31\u1f32\5\u0466"+
		"\u0234\2\u1f32\u041d\3\2\2\2\u1f33\u1f34\5\u0466\u0234\2\u1f34\u041f\3"+
		"\2\2\2\u1f35\u1f36\5\u0466\u0234\2\u1f36\u0421\3\2\2\2\u1f37\u1f38\5\u0466"+
		"\u0234\2\u1f38\u0423\3\2\2\2\u1f39\u1f3a\5\u0466\u0234\2\u1f3a\u0425\3"+
		"\2\2\2\u1f3b\u1f3c\5\u0466\u0234\2\u1f3c\u0427\3\2\2\2\u1f3d\u1f40\5\u0466"+
		"\u0234\2\u1f3e\u1f40\5\u046a\u0236\2\u1f3f\u1f3d\3\2\2\2\u1f3f\u1f3e\3"+
		"\2\2\2\u1f40\u0429\3\2\2\2\u1f41\u1f44\5\u0466\u0234\2\u1f42\u1f44\5\u046a"+
		"\u0236\2\u1f43\u1f41\3\2\2\2\u1f43\u1f42\3\2\2\2\u1f44\u042b\3\2\2\2\u1f45"+
		"\u1f46\5\u0460\u0231\2\u1f46\u042d\3\2\2\2\u1f47\u1f48\5\u0460\u0231\2"+
		"\u1f48\u042f\3\2\2\2\u1f49\u1f4a\5\u0460\u0231\2\u1f4a\u0431\3\2\2\2\u1f4b"+
		"\u1f4c\5\u0460\u0231\2\u1f4c\u0433\3\2\2\2\u1f4d\u1f4e\5\u0466\u0234\2"+
		"\u1f4e\u0435\3\2\2\2\u1f4f\u1f50\5\u0466\u0234\2\u1f50\u0437\3\2\2\2\u1f51"+
		"\u1f52\5\u0460\u0231\2\u1f52\u0439\3\2\2\2\u1f53\u1f54\5\u0494\u024b\2"+
		"\u1f54\u043b\3\2\2\2\u1f55\u1f56\5\u0494\u024b\2\u1f56\u043d\3\2\2\2\u1f57"+
		"\u1f58\5\u0494\u024b\2\u1f58\u043f\3\2\2\2\u1f59\u1f5c\5\u0466\u0234\2"+
		"\u1f5a\u1f5c\5\u046a\u0236\2\u1f5b\u1f59\3\2\2\2\u1f5b\u1f5a\3\2\2\2\u1f5c"+
		"\u0441\3\2\2\2\u1f5d\u1f5e\5\u041a\u020e\2\u1f5e\u1f5f\5\u046a\u0236\2"+
		"\u1f5f\u0443\3\2\2\2\u1f60\u1f68\5\u0460\u0231\2\u1f61\u1f62\7\u0197\2"+
		"\2\u1f62\u1f69\7\u018b\2\2\u1f63\u1f66\5\u046a\u0236\2\u1f64\u1f65\7\u0197"+
		"\2\2\u1f65\u1f67\7\u018b\2\2\u1f66\u1f64\3\2\2\2\u1f66\u1f67\3\2\2\2\u1f67"+
		"\u1f69\3\2\2\2\u1f68\u1f61\3\2\2\2\u1f68\u1f63\3\2\2\2\u1f68\u1f69\3\2"+
		"\2\2\u1f69\u0445\3\2\2\2\u1f6a\u1f6d\5\u0466\u0234\2\u1f6b\u1f6d\5\u046a"+
		"\u0236\2\u1f6c\u1f6a\3\2\2\2\u1f6c\u1f6b\3\2\2\2\u1f6d\u0447\3\2\2\2\u1f6e"+
		"\u1f73\5\u0446\u0224\2\u1f6f\u1f70\7\u0198\2\2\u1f70\u1f72\5\u0446\u0224"+
		"\2\u1f71\u1f6f\3\2\2\2\u1f72\u1f75\3\2\2\2\u1f73\u1f71\3\2\2\2\u1f73\u1f74"+
		"\3\2\2\2\u1f74\u0449\3\2\2\2\u1f75\u1f73\3\2\2\2\u1f76\u1f7b\5\u0444\u0223"+
		"\2\u1f77\u1f78\7\u0198\2\2\u1f78\u1f7a\5\u0444\u0223\2\u1f79\u1f77\3\2"+
		"\2\2\u1f7a\u1f7d\3\2\2\2\u1f7b\u1f79\3\2\2\2\u1f7b\u1f7c\3\2\2\2\u1f7c"+
		"\u044b\3\2\2\2\u1f7d\u1f7b\3\2\2\2\u1f7e\u1f7f\5\u0460\u0231\2\u1f7f\u044d"+
		"\3\2\2\2\u1f80\u1f83\5\u045e\u0230\2\u1f81\u1f83\5\u04ac\u0257\2\u1f82"+
		"\u1f80\3\2\2\2\u1f82\u1f81\3\2\2\2\u1f83\u044f\3\2\2\2\u1f84\u1f85\5\u044e"+
		"\u0228\2\u1f85\u0451\3\2\2\2\u1f86\u1f89\5\u045e\u0230\2\u1f87\u1f89\5"+
		"\u04b2\u025a\2\u1f88\u1f86\3\2\2\2\u1f88\u1f87\3\2\2\2\u1f89\u0453\3\2"+
		"\2\2\u1f8a\u1f8b\5\u0452\u022a\2\u1f8b\u0455\3\2\2\2\u1f8c\u1f8d\5\u0460"+
		"\u0231\2\u1f8d\u0457\3\2\2\2\u1f8e\u1f8f\5\u047a\u023e\2\u1f8f\u0459\3"+
		"\2\2\2\u1f90\u1f91\5\u0460\u0231\2\u1f91\u045b\3\2\2\2\u1f92\u1f93\5\u0460"+
		"\u0231\2\u1f93\u045d\3\2\2\2\u1f94\u1f98\t\u0081\2\2\u1f95\u1f96\6\u0230"+
		"\u00cc\2\u1f96\u1f98\7\u0309\2\2\u1f97\u1f94\3\2\2\2\u1f97\u1f95\3\2\2"+
		"\2\u1f98\u045f\3\2\2\2\u1f99\u1f9c\5\u045e\u0230\2\u1f9a\u1f9c\5\u04a6"+
		"\u0254\2\u1f9b\u1f99\3\2\2\2\u1f9b\u1f9a\3\2\2\2\u1f9c\u0461\3\2\2\2\u1f9d"+
		"\u1fa2\5\u0460\u0231\2\u1f9e\u1f9f\7\u0198\2\2\u1f9f\u1fa1\5\u0460\u0231"+
		"\2\u1fa0\u1f9e\3\2\2\2\u1fa1\u1fa4\3\2\2\2\u1fa2\u1fa0\3\2\2\2\u1fa2\u1fa3"+
		"\3\2\2\2\u1fa3\u0463\3\2\2\2\u1fa4\u1fa2\3\2\2\2\u1fa5\u1fa6\7\u019b\2"+
		"\2\u1fa6\u1fa7\5\u0462\u0232\2\u1fa7\u1fa8\7\u019c\2\2\u1fa8\u0465\3\2"+
		"\2\2\u1fa9\u1fab\5\u0460\u0231\2\u1faa\u1fac\5\u046a\u0236\2\u1fab\u1faa"+
		"\3\2\2\2\u1fab\u1fac\3\2\2\2\u1fac\u0467\3\2\2\2\u1fad\u1fb2\5\u0460\u0231"+
		"\2\u1fae\u1fb0\5\u046a\u0236\2\u1faf\u1fb1\5\u046a\u0236\2\u1fb0\u1faf"+
		"\3\2\2\2\u1fb0\u1fb1\3\2\2\2\u1fb1\u1fb3\3\2\2\2\u1fb2\u1fae\3\2\2\2\u1fb2"+
		"\u1fb3\3\2\2\2\u1fb3\u1fb9\3\2\2\2\u1fb4\u1fb5\6\u0235\u00cd\2\u1fb5\u1fb6"+
		"\5\u046a\u0236\2\u1fb6\u1fb7\5\u046a\u0236\2\u1fb7\u1fb9\3\2\2\2\u1fb8"+
		"\u1fad\3\2\2\2\u1fb8\u1fb4\3\2\2\2\u1fb9\u0469\3\2\2\2\u1fba\u1fbb\7\u0197"+
		"\2\2\u1fbb\u1fbc\5\u0460\u0231\2\u1fbc\u046b\3\2\2\2\u1fbd\u1fbe\t\u0082"+
		"\2\2\u1fbe\u046d\3\2\2\2\u1fbf\u1fc0\t\u0083\2\2\u1fc0\u046f\3\2\2\2\u1fc1"+
		"\u1fc2\t\u0084\2\2\u1fc2\u0471\3\2\2\2\u1fc3\u1fc9\7\u017e\2\2\u1fc4\u1fc5"+
		"\6\u023a\u00ce\2\u1fc5\u1fc9\7\u01a7\2\2\u1fc6\u1fc9\7\u0180\2\2\u1fc7"+
		"\u1fc9\7\u017f\2\2\u1fc8\u1fc3\3\2\2\2\u1fc8\u1fc4\3\2\2\2\u1fc8\u1fc6"+
		"\3\2\2\2\u1fc8\u1fc7\3\2\2\2\u1fc9\u0473\3\2\2\2\u1fca\u1fd4\5\u0480\u0241"+
		"\2\u1fcb\u1fd4\5\u0486\u0244\2\u1fcc\u1fd4\5\u048c\u0247\2\u1fcd\u1fd4"+
		"\5\u048a\u0246\2\u1fce\u1fd4\5\u0488\u0245\2\u1fcf\u1fd1\7\u0305\2\2\u1fd0"+
		"\u1fcf\3\2\2\2\u1fd0\u1fd1\3\2\2\2\u1fd1\u1fd2\3\2\2\2\u1fd2\u1fd4\t\u0085"+
		"\2\2\u1fd3\u1fca\3\2\2\2\u1fd3\u1fcb\3\2\2\2\u1fd3\u1fcc\3\2\2\2\u1fd3"+
		"\u1fcd\3\2\2\2\u1fd3\u1fce\3\2\2\2\u1fd3\u1fd0\3\2\2\2\u1fd4\u0475\3\2"+
		"\2\2\u1fd5\u1fdb\5\u0474\u023b\2\u1fd6\u1fd7\7\u0189\2\2\u1fd7\u1fdb\5"+
		"\u046c\u0237\2\u1fd8\u1fd9\7\u018a\2\2\u1fd9\u1fdb\5\u046c\u0237\2\u1fda"+
		"\u1fd5\3\2\2\2\u1fda\u1fd6\3\2\2\2\u1fda\u1fd8\3\2\2\2\u1fdb\u0477\3\2"+
		"\2\2\u1fdc\u1fdd\7\u019b\2\2\u1fdd\u1fe2\5\u047c\u023f\2\u1fde\u1fdf\7"+
		"\u0198\2\2\u1fdf\u1fe1\5\u047c\u023f\2\u1fe0\u1fde\3\2\2\2\u1fe1\u1fe4"+
		"\3\2\2\2\u1fe2\u1fe0\3\2\2\2\u1fe2\u1fe3\3\2\2\2\u1fe3\u1fe5\3\2\2\2\u1fe4"+
		"\u1fe2\3\2\2\2\u1fe5\u1fe6\7\u019c\2\2\u1fe6\u0479\3\2\2\2\u1fe7\u1feb"+
		"\7\u030a\2\2\u1fe8\u1fe9\6\u023e\u00cf\2\u1fe9\u1feb\7\u0309\2\2\u1fea"+
		"\u1fe7\3\2\2\2\u1fea\u1fe8\3\2\2\2\u1feb\u047b\3\2\2\2\u1fec\u1ff0\5\u047a"+
		"\u023e\2\u1fed\u1ff0\7\u01a7\2\2\u1fee\u1ff0\7\u01a8\2\2\u1fef\u1fec\3"+
		"\2\2\2\u1fef\u1fed\3\2\2\2\u1fef\u1fee\3\2\2\2\u1ff0\u047d\3\2\2\2\u1ff1"+
		"\u1ff5\5\u047a\u023e\2\u1ff2\u1ff3\6\u0240\u00d0\2\u1ff3\u1ff5\7\u01a7"+
		"\2\2\u1ff4\u1ff1\3\2\2\2\u1ff4\u1ff2\3\2\2\2\u1ff5\u047f\3\2\2\2\u1ff6"+
		"\u1ff8\7\u0305\2\2\u1ff7\u1ff6\3\2\2\2\u1ff7\u1ff8\3\2\2\2\u1ff8\u1ff9"+
		"\3\2\2\2\u1ff9\u1ffc\5\u047a\u023e\2\u1ffa\u1ffc\7\u0307\2\2\u1ffb\u1ff7"+
		"\3\2\2\2\u1ffb\u1ffa\3\2\2\2\u1ffc\u2000\3\2\2\2\u1ffd\u1fff\5\u047a\u023e"+
		"\2\u1ffe\u1ffd\3\2\2\2\u1fff\u2002\3\2\2\2\u2000\u1ffe\3\2\2\2\u2000\u2001"+
		"\3\2\2\2\u2001\u0481\3\2\2\2\u2002\u2000\3\2\2\2\u2003\u2004\5\u047a\u023e"+
		"\2\u2004\u0483\3\2\2\2\u2005\u200a\5\u047a\u023e\2\u2006\u2007\7\u0198"+
		"\2\2\u2007\u2009\5\u047a\u023e\2\u2008\u2006\3\2\2\2\u2009\u200c\3\2\2"+
		"\2\u200a\u2008\3\2\2\2\u200a\u200b\3\2\2\2\u200b\u0485\3\2\2\2\u200c\u200a"+
		"\3\2\2\2\u200d\u200e\t\u0084\2\2\u200e\u0487\3\2\2\2\u200f\u2010\t\u0086"+
		"\2\2\u2010\u0489\3\2\2\2\u2011\u2012\t\u0087\2\2\u2012\u048b\3\2\2\2\u2013"+
		"\u2014\7r\2\2\u2014\u201a\7\u030a\2\2\u2015\u2016\7\u0162\2\2\u2016\u201a"+
		"\7\u030a\2\2\u2017\u2018\7\u015f\2\2\u2018\u201a\7\u030a\2\2\u2019\u2013"+
		"\3\2\2\2\u2019\u2015\3\2\2\2\u2019\u2017\3\2\2\2\u201a\u048d\3\2\2\2\u201b"+
		"\u201e\5\u0392\u01ca\2\u201c\u201e\5\u0492\u024a\2\u201d\u201b\3\2\2\2"+
		"\u201d\u201c\3\2\2\2\u201e\u048f\3\2\2\2\u201f\u2020\5\u0492\u024a\2\u2020"+
		"\u0491\3\2\2\2\u2021\u2022\7\u019b\2\2\u2022\u2023\7\u017e\2\2\u2023\u2024"+
		"\7\u0198\2\2\u2024\u2025\7\u017e\2\2\u2025\u2026\7\u019c\2\2\u2026\u0493"+
		"\3\2\2\2\u2027\u202a\7\u030a\2\2\u2028\u202a\5\u0460\u0231\2\u2029\u2027"+
		"\3\2\2\2\u2029\u2028\3\2\2\2\u202a\u0495\3\2\2\2\u202b\u202e\5\u045e\u0230"+
		"\2\u202c\u202e\5\u04b4\u025b\2\u202d\u202b\3\2\2\2\u202d\u202c\3\2\2\2"+
		"\u202e\u0497\3\2\2\2\u202f\u2032\5\u0452\u022a\2\u2030\u2032\5\u047a\u023e"+
		"\2\u2031\u202f\3\2\2\2\u2031\u2030\3\2\2\2\u2032\u0499\3\2\2\2\u2033\u2036"+
		"\5\u0472\u023a\2\u2034\u2036\5\u045e\u0230\2\u2035\u2033\3\2\2\2\u2035"+
		"\u2034\3\2\2\2\u2036\u049b\3\2\2\2\u2037\u2038\7\u019b\2\2\u2038\u2039"+
		"\7\u019c\2\2\u2039\u049d\3\2\2\2\u203a\u203b\t\u0088\2\2\u203b\u049f\3"+
		"\2\2\2\u203c\u203d\t\u0089\2\2\u203d\u04a1\3\2\2\2\u203e\u203f\7\u009d"+
		"\2\2\u203f\u2045\7\u0197\2\2\u2040\u2041\7\u00b6\2\2\u2041\u2045\7\u0197"+
		"\2\2\u2042\u2043\7\u0136\2\2\u2043\u2045\7\u0197\2\2\u2044\u203e\3\2\2"+
		"\2\u2044\u2040\3\2\2\2\u2044\u2042\3\2\2\2\u2045\u04a3\3\2\2\2\u2046\u2047"+
		"\7\u02b2\2\2\u2047\u2051\7\u0197\2\2\u2048\u2049\7\u02c1\2\2\u2049\u2051"+
		"\7\u0197\2\2\u204a\u204b\7\u009d\2\2\u204b\u2051\7\u0197\2\2\u204c\u204d"+
		"\7\u00b6\2\2\u204d\u2051\7\u0197\2\2\u204e\u204f\7\u0136\2\2\u204f\u2051"+
		"\7\u0197\2\2\u2050\u2046\3\2\2\2\u2050\u2048\3\2\2\2\u2050\u204a\3\2\2"+
		"\2\u2050\u204c\3\2\2\2\u2050\u204e\3\2\2\2\u2051\u04a5\3\2\2\2\u2052\u205a"+
		"\6\u0254\u00d1\2\u2053\u205b\5\u04ac\u0257\2\u2054\u205b\5\u04b8\u025d"+
		"\2\u2055\u205b\7\23\2\2\u2056\u2057\6\u0254\u00d2\2\u2057\u205b\7:\2\2"+
		"\u2058\u2059\6\u0254\u00d3\2\u2059\u205b\7\u02ea\2\2\u205a\u2053\3\2\2"+
		"\2\u205a\u2054\3\2\2\2\u205a\u2055\3\2\2\2\u205a\u2056\3\2\2\2\u205a\u2058"+
		"\3\2\2\2\u205b\u2064\3\2\2\2\u205c\u2062\5\u04b0\u0259\2\u205d\u2062\5"+
		"\u04a8\u0255\2\u205e\u2062\5\u04aa\u0256\2\u205f\u2062\5\u04ae\u0258\2"+
		"\u2060\u2062\5\u04b6\u025c\2\u2061\u205c\3\2\2\2\u2061\u205d\3\2\2\2\u2061"+
		"\u205e\3\2\2\2\u2061\u205f\3\2\2\2\u2061\u2060\3\2\2\2\u2062\u2064\3\2"+
		"\2\2\u2063\u2052\3\2\2\2\u2063\u2061\3\2\2\2\u2064\u04a7\3\2\2\2\u2065"+
		"\u2066\t\u008a\2\2\u2066\u04a9\3\2\2\2\u2067\u2068\t\u008b\2\2\u2068\u04ab"+
		"\3\2\2\2\u2069\u2074\6\u0257\u00d4\2\u206a\u2075\5\u04ba\u025e\2\u206b"+
		"\u2075\7\u0087\2\2\u206c\u2075\7\u0093\2\2\u206d\u2075\7\u00f1\2\2\u206e"+
		"\u2075\7\u0107\2\2\u206f\u2075\7\u010b\2\2\u2070\u2075\7\u011a\2\2\u2071"+
		"\u2075\7\u011d\2\2\u2072\u2075\7\u02e5\2\2\u2073\u2075\7\u0151\2\2\u2074"+
		"\u206a\3\2\2\2\u2074\u206b\3\2\2\2\u2074\u206c\3\2\2\2\u2074\u206d\3\2"+
		"\2\2\u2074\u206e\3\2\2\2\u2074\u206f\3\2\2\2\u2074\u2070\3\2\2\2\u2074"+
		"\u2071\3\2\2\2\u2074\u2072\3\2\2\2\u2074\u2073\3\2\2\2\u2075\u207c\3\2"+
		"\2\2\u2076\u207a\5\u04b0\u0259\2\u2077\u207a\5\u04ae\u0258\2\u2078\u207a"+
		"\5\u04b6\u025c\2\u2079\u2076\3\2\2\2\u2079\u2077\3\2\2\2\u2079\u2078\3"+
		"\2\2\2\u207a\u207c\3\2\2\2\u207b\u2069\3\2\2\2\u207b\u2079\3\2\2\2\u207c"+
		"\u04ad\3\2\2\2\u207d\u207e\t\u008c\2\2\u207e\u04af\3\2\2\2\u207f\u2080"+
		"\t\u008d\2\2\u2080\u04b1\3\2\2\2\u2081\u2084\6\u025a\u00d5\2\u2082\u2085"+
		"\5\u04ba\u025e\2\u2083\u2085\5\u04b8\u025d\2\u2084\u2082\3\2\2\2\u2084"+
		"\u2083\3\2\2\2\u2085\u208c\3\2\2\2\u2086\u208a\5\u04b0\u0259\2\u2087\u208a"+
		"\5\u04aa\u0256\2\u2088\u208a\5\u04b6\u025c\2\u2089\u2086\3\2\2\2\u2089"+
		"\u2087\3\2\2\2\u2089\u2088\3\2\2\2\u208a\u208c\3\2\2\2\u208b\u2081\3\2"+
		"\2\2\u208b\u2089\3\2\2\2\u208c\u04b3\3\2\2\2\u208d\u2092\5\u04b0\u0259"+
		"\2\u208e\u2092\5\u04a8\u0255\2\u208f\u2092\5\u04aa\u0256\2\u2090\u2092"+
		"\5\u04ae\u0258\2\u2091\u208d\3\2\2\2\u2091\u208e\3\2\2\2\u2091\u208f\3"+
		"\2\2\2\u2091\u2090\3\2\2\2\u2092\u04b5\3\2\2\2\u2093\u2094\t\u0089\2\2"+
		"\u2094\u04b7\3\2\2\2\u2095\u209b\t\u008e\2\2\u2096\u2097\6\u025d\u00d6"+
		"\2\u2097\u209b\7:\2\2\u2098\u2099\6\u025d\u00d7\2\u2099\u209b\7\u00a4"+
		"\2\2\u209a\u2095\3\2\2\2\u209a\u2096\3\2\2\2\u209a\u2098\3\2\2\2\u209b"+
		"\u04b9\3\2\2\2\u209c\u20a6\t\u008f\2\2\u209d\u209e\6\u025e\u00d8\2\u209e"+
		"\u20a6\7:\2\2\u209f\u20a0\6\u025e\u00d9\2\u20a0\u20a6\t\u0090\2\2\u20a1"+
		"\u20a2\6\u025e\u00da\2\u20a2\u20a6\t\u0091\2\2\u20a3\u20a4\6\u025e\u00db"+
		"\2\u20a4\u20a6\7\u02b4\2\2\u20a5\u209c\3\2\2\2\u20a5\u209d\3\2\2\2\u20a5"+
		"\u209f\3\2\2\2\u20a5\u20a1\3\2\2\2\u20a5\u20a3\3\2\2\2\u20a6\u04bb\3\2"+
		"\2\2\u0462\u04bf\u04c3\u04c6\u04c8\u04ec\u04f4\u04f9\u0509\u0510\u0517"+
		"\u051a\u0521\u0526\u0529\u052e\u0534\u0536\u053a\u053e\u0547\u054b\u0550"+
		"\u0556\u055d\u0561\u0566\u056b\u0572\u0575\u057b\u057e\u0585\u058f\u0594"+
		"\u0599\u05a1\u05a7\u05ab\u05b0\u05b9\u05bf\u05c5\u05cb\u05d5\u05db\u05e4"+
		"\u05f2\u05f6\u05fc\u0600\u0606\u060a\u060f\u0612\u0618\u061e\u0624\u0628"+
		"\u062d\u0631\u0635\u063d\u063f\u0646\u064e\u0656\u065a\u0671\u0681\u0684"+
		"\u068d\u0692\u0698\u069d\u06a1\u06a6\u06aa\u06ae\u06b2\u06b6\u06ba\u06bc"+
		"\u06c7\u06cc\u06d2\u06da\u06e3\u06e8\u06eb\u06f0\u06f7\u06ff\u0703\u0708"+
		"\u070f\u0714\u0719\u0721\u0725\u072a\u072d\u0730\u0733\u073a\u0741\u0745"+
		"\u075d\u0761\u0767\u076e\u0771\u0775\u077c\u077f\u0782\u0785\u078e\u0795"+
		"\u079a\u079d\u07a0\u07a6\u07ac\u07af\u07b4\u07be\u07c1\u07c7\u07cd\u07d7"+
		"\u07da\u07e2\u07e8\u07f3\u07f6\u07fb\u080e\u0811\u0814\u081a\u081d\u081f"+
		"\u0825\u082f\u0839\u083c\u083f\u0844\u084a\u0857\u085b\u0860\u0869\u087a"+
		"\u088d\u0896\u0899\u08a1\u08a6\u08aa\u08b1\u08b6\u08c5\u08c9\u08cf\u08d5"+
		"\u08db\u08e1\u08e7\u08ec\u08f0\u08f8\u08fe\u0904\u0909\u090c\u090f\u0918"+
		"\u091b\u0926\u0932\u093b\u093f\u0948\u094b\u0951\u0953\u0957\u095e\u096b"+
		"\u0972\u0978\u097b\u098c\u09a0\u09a4\u09aa\u09b0\u09b6\u09bb\u09c2\u09c9"+
		"\u09ce\u09d1\u09d5\u09d9\u09de\u09e2\u09e6\u09ec\u09f1\u09f4\u09f8\u09fe"+
		"\u0a02\u0a06\u0a0e\u0a16\u0a1f\u0a28\u0a35\u0a38\u0a3c\u0a42\u0a4a\u0a4f"+
		"\u0a52\u0a55\u0a58\u0a5b\u0a5d\u0a63\u0a65\u0a74\u0a7a\u0a81\u0a84\u0a86"+
		"\u0a88\u0a92\u0a94\u0a98\u0a9b\u0a9e\u0aa2\u0aa7\u0aad\u0ab0\u0ab3\u0ab9"+
		"\u0abc\u0ac5\u0ace\u0ad2\u0ad6\u0adc\u0ae1\u0ae6\u0aeb\u0aef\u0af5\u0b00"+
		"\u0b03\u0b08\u0b0e\u0b11\u0b14\u0b17\u0b1a\u0b28\u0b2b\u0b2f\u0b33\u0b39"+
		"\u0b3e\u0b42\u0b47\u0b4a\u0b4e\u0b54\u0b59\u0b62\u0b66\u0b6a\u0b6d\u0b72"+
		"\u0b75\u0b77\u0b7b\u0b7e\u0b84\u0b86\u0b8d\u0b91\u0b93\u0b98\u0b9c\u0ba0"+
		"\u0ba6\u0bae\u0bb3\u0bb6\u0bb9\u0bbc\u0bbf\u0bc3\u0bd2\u0bd6\u0bdc\u0bdf"+
		"\u0be2\u0be8\u0bed\u0bf1\u0bf4\u0bfc\u0bfe\u0c0b\u0c17\u0c1c\u0c1f\u0c22"+
		"\u0c27\u0c2d\u0c3d\u0c51\u0c5a\u0c5e\u0c65\u0c6a\u0c73\u0c7a\u0c85\u0c8c"+
		"\u0c97\u0c9e\u0ca2\u0ca8\u0cad\u0cb2\u0cb6\u0cbc\u0cc2\u0cc4\u0cc7\u0ccb"+
		"\u0cd5\u0cda\u0cdf\u0ce6\u0cef\u0cf7\u0cfc\u0d00\u0d06\u0d09\u0d0c\u0d10"+
		"\u0d14\u0d1e\u0d22\u0d25\u0d28\u0d2d\u0d33\u0d37\u0d3d\u0d40\u0d42\u0d47"+
		"\u0d53\u0d5c\u0d69\u0d6c\u0d71\u0d78\u0d7c\u0d80\u0d82\u0d90\u0d97\u0da0"+
		"\u0da6\u0daf\u0db3\u0db7\u0dc1\u0dc3\u0dcb\u0dd2\u0dd7\u0ddb\u0ddf\u0de2"+
		"\u0de8\u0deb\u0dee\u0df4\u0dfb\u0e00\u0e04\u0e07\u0e0a\u0e0d\u0e0f\u0e13"+
		"\u0e1b\u0e21\u0e25\u0e2a\u0e2d\u0e30\u0e33\u0e35\u0e3a\u0e43\u0e50\u0e52"+
		"\u0e56\u0e5c\u0e5f\u0e62\u0e68\u0e6f\u0e71\u0e79\u0e7f\u0e84\u0e87\u0e8e"+
		"\u0e90\u0e99\u0ea2\u0eab\u0eb3\u0eb7\u0ebe\u0ec1\u0ec3\u0ecb\u0ed1\u0edb"+
		"\u0ee2\u0f3a\u0f3e\u0f42\u0f50\u0f58\u0f5b\u0f67\u0f6c\u0f72\u0f79\u0f80"+
		"\u0f87\u0f8e\u0f95\u0f9c\u0f9f\u0fa6\u0fae\u0fb6\u0fc0\u0fc6\u0fca\u0fce"+
		"\u0fd3\u0fd6\u0fd8\u0fe1\u0fe7\u0fee\u0ff3\u0ff8\u0ffd\u1000\u1007\u1014"+
		"\u101a\u1020\u1027\u102f\u1035\u1041\u1043\u1049\u104d\u104f\u1053\u1060"+
		"\u1066\u106e\u1079\u107d\u108a\u1091\u1097\u1099\u10a3\u10ab\u10ae\u10b3"+
		"\u10b7\u10bd\u10c0\u10c5\u10d0\u10d2\u10de\u10e3\u10eb\u10f1\u10f3\u10f5"+
		"\u10fb\u1107\u110c\u110e\u1112\u1118\u111b\u111e\u1128\u112a\u1130\u1137"+
		"\u113d\u1147\u114b\u1150\u1161\u1171\u1176\u117e\u1186\u118b\u1191\u1194"+
		"\u1196\u119f\u11a5\u11ab\u11ad\u11b1\u11bc\u11c6\u11cb\u11d0\u11d5\u11dd"+
		"\u11e1\u11e6\u11ef\u11fb\u1209\u1212\u1214\u121b\u1222\u1226\u122c\u1234"+
		"\u123b\u123f\u1245\u124c\u124f\u1258\u125e\u1263\u127a\u127d\u128d\u1292"+
		"\u1295\u1299\u129c\u12aa\u12b0\u12b5\u12b8\u12ba\u12be\u12c3\u12c5\u12d1"+
		"\u12d7\u12ed\u12f1\u12f3\u12fb\u12ff\u1308\u1312\u1319\u131c\u1320\u1323"+
		"\u1326\u132a\u132d\u1331\u1334\u1339\u133c\u1341\u1344\u134a\u134e\u1354"+
		"\u1357\u1360\u1362\u1368\u136c\u136f\u1372\u1376\u137c\u137f\u1382\u138c"+
		"\u1390\u1399\u139c\u13a1\u13a4\u13a7\u13ab\u13ae\u13b3\u13b7\u13bf\u13cc"+
		"\u13de\u13e3\u13e8\u13f0\u13f6\u13f8\u13fc\u13ff\u140d\u1417\u141b\u1423"+
		"\u1426\u142a\u1434\u1438\u143f\u1444\u144c\u1451\u1457\u145e\u1463\u1469"+
		"\u1470\u147a\u147c\u1484\u1489\u148d\u1490\u1497\u149c\u14a0\u14ab\u14b3"+
		"\u14b7\u14ba\u14bd\u14c1\u14c5\u14ca\u14d0\u14d4\u14df\u14e2\u14e5\u14e8"+
		"\u14f0\u14f4\u14f9\u1501\u1509\u150f\u151c\u1526\u152c\u153a\u153d\u1541"+
		"\u154c\u154e\u1557\u1563\u1565\u156c\u1572\u1578\u1580\u158b\u158f\u15ac"+
		"\u15ae\u15b5\u15c6\u15cd\u15db\u15e7\u15ed\u15f4\u15f7\u1619\u1621\u1623"+
		"\u162f\u1634\u163a\u1642\u1649\u164f\u1654\u165a\u165f\u1664\u166a\u166f"+
		"\u1675\u167d\u1685\u168d\u1695\u169a\u16a0\u16a5\u16a9\u16ad\u16b2\u16b4"+
		"\u16c7\u16cb\u16d2\u16de\u16e1\u16e5\u16ea\u16ef\u16f3\u16fd\u1706\u1708"+
		"\u170b\u1714\u171b\u1728\u172d\u1734\u173a\u1754\u1773\u1787\u178d\u1791"+
		"\u17ac\u17b8\u17c5\u17c9\u17cd\u17e9\u1821\u182b\u182f\u183b\u1840\u184d"+
		"\u1861\u1865\u1876\u1879\u187e\u1881\u188a\u188e\u1894\u189a\u189e\u18a9"+
		"\u18af\u18b1\u18b8\u18bf\u18c3\u18ca\u18cf\u18d4\u18d7\u18dc\u18e0\u18e4"+
		"\u18e9\u18ee\u18f0\u18f4\u1901\u1905\u1908\u190c\u1910\u1914\u1919\u191d"+
		"\u1921\u192a\u192c\u1933\u1939\u1941\u1956\u195b\u1962\u1979\u1989\u1993"+
		"\u1997\u199e\u19a1\u19ac\u19b5\u19b8\u19bf\u19c4\u19de\u19e4\u19ea\u19ee"+
		"\u19f8\u19fc\u1a09\u1a15\u1a27\u1a2f\u1a39\u1a3c\u1a41\u1a45\u1a4c\u1a51"+
		"\u1a58\u1a60\u1a63\u1a68\u1a6b\u1a73\u1a76\u1a84\u1a87\u1a94\u1a98\u1a9a"+
		"\u1a9f\u1aa4\u1aaa\u1ab0\u1ab6\u1abb\u1abe\u1ac4\u1ac9\u1acc\u1ad2\u1ad6"+
		"\u1adc\u1ade\u1ae1\u1ae7\u1aed\u1af5\u1af7\u1af9\u1afd\u1b03\u1b08\u1b0c"+
		"\u1b11\u1b17\u1b1e\u1b21\u1b23\u1b26\u1b30\u1b34\u1b3a\u1b41\u1b46\u1b54"+
		"\u1b59\u1b61\u1b66\u1b6a\u1b6d\u1b72\u1b76\u1b7e\u1b86\u1b88\u1b8f\u1b97"+
		"\u1b9e\u1ba1\u1ba9\u1bb1\u1bb3\u1bb9\u1bbf\u1bc3\u1bca\u1bd5\u1bde\u1be1"+
		"\u1be6\u1be8\u1beb\u1bee\u1bf2\u1bf5\u1bf9\u1bfe\u1c01\u1c05\u1c08\u1c0c"+
		"\u1c11\u1c15\u1c21\u1c25\u1c2b\u1c2e\u1c33\u1c37\u1c3b\u1c40\u1c49\u1c4c"+
		"\u1c50\u1c54\u1c57\u1c5b\u1c5f\u1c64\u1c69\u1c6f\u1c74\u1c79\u1c7b\u1c80"+
		"\u1c87\u1c8f\u1c95\u1c97\u1c9b\u1c9f\u1ca3\u1ca7\u1cb5\u1cbc\u1cc0\u1cc5"+
		"\u1ccb\u1ccf\u1cd5\u1cd9\u1cdd\u1ce2\u1ce7\u1cec\u1cf1\u1cf7\u1cfd\u1d02"+
		"\u1d07\u1d0c\u1d11\u1d16\u1d1b\u1d20\u1d2a\u1d30\u1d36\u1d3c\u1d3f\u1d46"+
		"\u1d4b\u1d4e\u1d52\u1d55\u1d59\u1d5e\u1d62\u1d67\u1d6b\u1d74\u1d77\u1d7a"+
		"\u1d7d\u1d81\u1d85\u1d89\u1d98\u1d9b\u1d9d\u1da2\u1dab\u1dae\u1db2\u1dbf"+
		"\u1dcb\u1dd0\u1dd5\u1dde\u1de3\u1dec\u1df1\u1df5\u1df9\u1dfd\u1e02\u1e07"+
		"\u1e0d\u1e12\u1e15\u1e1c\u1e25\u1e2c\u1e3a\u1e46\u1e53\u1e5b\u1e62\u1e6b"+
		"\u1e71\u1e79\u1e7f\u1e8a\u1e92\u1e9a\u1ea2\u1eac\u1eb1\u1eb6\u1eb8\u1ebe"+
		"\u1ec4\u1ec7\u1ece\u1ed0\u1ed2\u1ed5\u1ed7\u1ee8\u1eed\u1eef\u1ef6\u1f03"+
		"\u1f05\u1f0b\u1f15\u1f1e\u1f29\u1f3f\u1f43\u1f5b\u1f66\u1f68\u1f6c\u1f73"+
		"\u1f7b\u1f82\u1f88\u1f97\u1f9b\u1fa2\u1fab\u1fb0\u1fb2\u1fb8\u1fc8\u1fd0"+
		"\u1fd3\u1fda\u1fe2\u1fea\u1fef\u1ff4\u1ff7\u1ffb\u2000\u200a\u2019\u201d"+
		"\u2029\u202d\u2031\u2035\u2044\u2050\u205a\u2061\u2063\u2074\u2079\u207b"+
		"\u2084\u2089\u208b\u2091\u209a\u20a5";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2,
			_serializedATNSegment3
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}